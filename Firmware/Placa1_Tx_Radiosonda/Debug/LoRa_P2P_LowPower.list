
LoRa_P2P_LowPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097e4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08009928  08009928  0000a928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ef4  08009ef4  0000b1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ef4  08009ef4  0000aef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009efc  08009efc  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009efc  08009efc  0000aefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f00  08009f00  0000af00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08009f04  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  200001e4  0800a0e8  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  0800a0e8  0000b730  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016847  00000000  00000000  0000b20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e4  00000000  00000000  00021a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  00025340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010cf  00000000  00000000  00026998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f807  00000000  00000000  00027a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154f2  00000000  00000000  0004726e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8e0c  00000000  00000000  0005c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011556c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b40  00000000  00000000  001155b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0011c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800990c 	.word	0x0800990c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800990c 	.word	0x0800990c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b6c:	f000 b988 	b.w	8000e80 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	468e      	mov	lr, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d962      	bls.n	8000c64 <__udivmoddi4+0xdc>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	b14e      	cbz	r6, 8000bb8 <__udivmoddi4+0x30>
 8000ba4:	f1c6 0320 	rsb	r3, r6, #32
 8000ba8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	ea43 0808 	orr.w	r8, r3, r8
 8000bb6:	40b4      	lsls	r4, r6
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bce:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000bdc:	f080 80ea 	bcs.w	8000db4 <__udivmoddi4+0x22c>
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f240 80e7 	bls.w	8000db4 <__udivmoddi4+0x22c>
 8000be6:	3902      	subs	r1, #2
 8000be8:	443b      	add	r3, r7
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	b2a3      	uxth	r3, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfe:	459c      	cmp	ip, r3
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x8e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c08:	f080 80d6 	bcs.w	8000db8 <__udivmoddi4+0x230>
 8000c0c:	459c      	cmp	ip, r3
 8000c0e:	f240 80d3 	bls.w	8000db8 <__udivmoddi4+0x230>
 8000c12:	443b      	add	r3, r7
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1a:	eba3 030c 	sub.w	r3, r3, ip
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40f3      	lsrs	r3, r6
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xb6>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb0>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x14c>
 8000c46:	4573      	cmp	r3, lr
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xc8>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 8105 	bhi.w	8000e5a <__udivmoddi4+0x2d2>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e5      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c62:	e7e2      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f000 8090 	beq.w	8000d8a <__udivmoddi4+0x202>
 8000c6a:	fab2 f682 	clz	r6, r2
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f040 80a4 	bne.w	8000dbc <__udivmoddi4+0x234>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	2101      	movs	r1, #1
 8000c82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x11e>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x11c>
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f200 80e0 	bhi.w	8000e64 <__udivmoddi4+0x2dc>
 8000ca4:	46c4      	mov	ip, r8
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb4:	fb02 f404 	mul.w	r4, r2, r4
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x144>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x142>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f200 80ca 	bhi.w	8000e5e <__udivmoddi4+0x2d6>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	fa1f fc87 	uxth.w	ip, r7
 8000cfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1a0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d1a:	f080 809c 	bcs.w	8000e56 <__udivmoddi4+0x2ce>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8099 	bls.w	8000e56 <__udivmoddi4+0x2ce>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	fa1f fe83 	uxth.w	lr, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1ce>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d4a:	f080 8082 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d97f      	bls.n	8000e52 <__udivmoddi4+0x2ca>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d62:	4564      	cmp	r4, ip
 8000d64:	4673      	mov	r3, lr
 8000d66:	46e1      	mov	r9, ip
 8000d68:	d362      	bcc.n	8000e30 <__udivmoddi4+0x2a8>
 8000d6a:	d05f      	beq.n	8000e2c <__udivmoddi4+0x2a4>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d72:	eb64 0409 	sbc.w	r4, r4, r9
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	431e      	orrs	r6, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e74f      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000d8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8e:	0c01      	lsrs	r1, r0, #16
 8000d90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d94:	b280      	uxth	r0, r0
 8000d96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	463c      	mov	r4, r7
 8000da0:	46b8      	mov	r8, r7
 8000da2:	46be      	mov	lr, r7
 8000da4:	2620      	movs	r6, #32
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	eba2 0208 	sub.w	r2, r2, r8
 8000dae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db2:	e766      	b.n	8000c82 <__udivmoddi4+0xfa>
 8000db4:	4601      	mov	r1, r0
 8000db6:	e718      	b.n	8000bea <__udivmoddi4+0x62>
 8000db8:	4610      	mov	r0, r2
 8000dba:	e72c      	b.n	8000c16 <__udivmoddi4+0x8e>
 8000dbc:	f1c6 0220 	rsb	r2, r6, #32
 8000dc0:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b1      	lsls	r1, r6
 8000dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb08 f904 	mul.w	r9, r8, r4
 8000de6:	40b0      	lsls	r0, r6
 8000de8:	4589      	cmp	r9, r1
 8000dea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dee:	b280      	uxth	r0, r0
 8000df0:	d93e      	bls.n	8000e70 <__udivmoddi4+0x2e8>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000df8:	d201      	bcs.n	8000dfe <__udivmoddi4+0x276>
 8000dfa:	4589      	cmp	r9, r1
 8000dfc:	d81f      	bhi.n	8000e3e <__udivmoddi4+0x2b6>
 8000dfe:	eba1 0109 	sub.w	r1, r1, r9
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d229      	bcs.n	8000e6c <__udivmoddi4+0x2e4>
 8000e18:	18ba      	adds	r2, r7, r2
 8000e1a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e1e:	d2c4      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d2c2      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e24:	f1a9 0102 	sub.w	r1, r9, #2
 8000e28:	443a      	add	r2, r7
 8000e2a:	e7be      	b.n	8000daa <__udivmoddi4+0x222>
 8000e2c:	45f0      	cmp	r8, lr
 8000e2e:	d29d      	bcs.n	8000d6c <__udivmoddi4+0x1e4>
 8000e30:	ebbe 0302 	subs.w	r3, lr, r2
 8000e34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e38:	3801      	subs	r0, #1
 8000e3a:	46e1      	mov	r9, ip
 8000e3c:	e796      	b.n	8000d6c <__udivmoddi4+0x1e4>
 8000e3e:	eba7 0909 	sub.w	r9, r7, r9
 8000e42:	4449      	add	r1, r9
 8000e44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4c:	fb09 f804 	mul.w	r8, r9, r4
 8000e50:	e7db      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e52:	4673      	mov	r3, lr
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1ce>
 8000e56:	4650      	mov	r0, sl
 8000e58:	e766      	b.n	8000d28 <__udivmoddi4+0x1a0>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e6fd      	b.n	8000c5a <__udivmoddi4+0xd2>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3a02      	subs	r2, #2
 8000e62:	e733      	b.n	8000ccc <__udivmoddi4+0x144>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	443b      	add	r3, r7
 8000e6a:	e71c      	b.n	8000ca6 <__udivmoddi4+0x11e>
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	e79c      	b.n	8000daa <__udivmoddi4+0x222>
 8000e70:	eba1 0109 	sub.w	r1, r1, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	e7c4      	b.n	8000e0a <__udivmoddi4+0x282>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f7ff ffe3 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff ffe0 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	200b      	movs	r0, #11
 8000eca:	f001 f898 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ece:	200b      	movs	r0, #11
 8000ed0:	f001 f8af 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	200c      	movs	r0, #12
 8000eda:	f001 f890 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ede:	200c      	movs	r0, #12
 8000ee0:	f001 f8a7 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	200d      	movs	r0, #13
 8000eea:	f001 f888 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000eee:	200d      	movs	r0, #13
 8000ef0:	f001 f89f 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	200e      	movs	r0, #14
 8000efa:	f001 f880 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000efe:	200e      	movs	r0, #14
 8000f00:	f001 f897 	bl	8002032 <HAL_NVIC_EnableIRQ>

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4c:	2004      	movs	r0, #4
 8000f4e:	f7ff ffdb 	bl	8000f08 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2002      	movs	r0, #2
 8000f54:	f7ff ffd8 	bl	8000f08 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff ffd5 	bl	8000f08 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f64:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f66:	f001 fd61 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2138      	movs	r1, #56	@ 0x38
 8000f6e:	4812      	ldr	r0, [pc, #72]	@ (8000fb8 <MX_GPIO_Init+0x80>)
 8000f70:	f001 fd5c 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f8c:	f001 fbee 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000f90:	2338      	movs	r3, #56	@ 0x38
 8000f92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4804      	ldr	r0, [pc, #16]	@ (8000fb8 <MX_GPIO_Init+0x80>)
 8000fa6:	f001 fbe1 	bl	800276c <HAL_GPIO_Init>

}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	48000800 	.word	0x48000800

08000fbc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fcc:	f023 0218 	bic.w	r2, r3, #24
 8000fd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_write>:
#include "radio_driver.h"

/* USER CODE BEGIN 0 */
// Redireciona a saída do printf para a USART2 (nossa porta de debug para o PC)
int _write(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <_write+0x28>)
 8001000:	f003 fd55 	bl	8004aae <HAL_UART_Transmit>
  return len;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200003c4 	.word	0x200003c4

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800101a:	f000 fea3 	bl	8001d64 <HAL_Init>
  SystemClock_Config();
 800101e:	f000 f877 	bl	8001110 <SystemClock_Config>
  MX_GPIO_Init();
 8001022:	f7ff ff89 	bl	8000f38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001026:	f7ff ff45 	bl	8000eb4 <MX_DMA_Init>
  MX_USART1_UART_Init();  // UART da Radiosonda
 800102a:	f000 fb8d 	bl	8001748 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();  // UART de Debug para o PC
 800102e:	f000 fbd7 	bl	80017e0 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 8001032:	f000 fa71 	bl	8001518 <MX_SUBGHZ_Init>

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8001036:	2001      	movs	r0, #1
 8001038:	f000 fdc2 	bl	8001bc0 <BSP_LED_Init>

  printf("\r\n--- Placa 1: Parser Radiosonda & Tx LoRa ---\r\n");
 800103c:	482e      	ldr	r0, [pc, #184]	@ (80010f8 <main+0xe4>)
 800103e:	f006 fcf9 	bl	8007a34 <puts>

  Radio_Init();
 8001042:	f000 f943 	bl	80012cc <Radio_Init>
  printf("Radio LoRa inicializado.\r\n");
 8001046:	482d      	ldr	r0, [pc, #180]	@ (80010fc <main+0xe8>)
 8001048:	f006 fcf4 	bl	8007a34 <puts>

  printf("Estado: Aguardando SYNC_WORD (0xAA) da radiosonda na USART1...\r\n");
 800104c:	482c      	ldr	r0, [pc, #176]	@ (8001100 <main+0xec>)
 800104e:	f006 fcf1 	bl	8007a34 <puts>

  // Inicia a recepção via DMA na USART1 (rádiosonda)
  HAL_UART_Receive_DMA(&huart1, radiosonde_rx_buffer, RADIOSONDE_UART_BUFFER_SIZE);
 8001052:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001056:	492b      	ldr	r1, [pc, #172]	@ (8001104 <main+0xf0>)
 8001058:	482b      	ldr	r0, [pc, #172]	@ (8001108 <main+0xf4>)
 800105a:	f003 fdaf 	bl	8004bbc <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint16_t new_pos = RADIOSONDE_UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 800105e:	4b2a      	ldr	r3, [pc, #168]	@ (8001108 <main+0xf4>)
 8001060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	b29b      	uxth	r3, r3
 800106a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800106e:	807b      	strh	r3, [r7, #2]
    if (new_pos != old_pos)
 8001070:	4b26      	ldr	r3, [pc, #152]	@ (800110c <main+0xf8>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	887a      	ldrh	r2, [r7, #2]
 8001076:	429a      	cmp	r2, r3
 8001078:	d0f1      	beq.n	800105e <main+0x4a>
    {
      if (new_pos > old_pos) {
 800107a:	4b24      	ldr	r3, [pc, #144]	@ (800110c <main+0xf8>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	429a      	cmp	r2, r3
 8001082:	d912      	bls.n	80010aa <main+0x96>
        for (int i = old_pos; i < new_pos; i++) { ProcessByte(radiosonde_rx_buffer[i]); }
 8001084:	4b21      	ldr	r3, [pc, #132]	@ (800110c <main+0xf8>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e009      	b.n	80010a0 <main+0x8c>
 800108c:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <main+0xf0>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f893 	bl	80011c0 <ProcessByte>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbf1      	blt.n	800108c <main+0x78>
 80010a8:	e021      	b.n	80010ee <main+0xda>
      } else { // Wrap-around
        for (int i = old_pos; i < RADIOSONDE_UART_BUFFER_SIZE; i++) { ProcessByte(radiosonde_rx_buffer[i]); }
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <main+0xf8>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	e009      	b.n	80010c6 <main+0xb2>
 80010b2:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <main+0xf0>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4413      	add	r3, r2
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f880 	bl	80011c0 <ProcessByte>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2bff      	cmp	r3, #255	@ 0xff
 80010ca:	ddf2      	ble.n	80010b2 <main+0x9e>
        for (int i = 0; i < new_pos; i++) { ProcessByte(radiosonde_rx_buffer[i]); }
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	e009      	b.n	80010e6 <main+0xd2>
 80010d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <main+0xf0>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f870 	bl	80011c0 <ProcessByte>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	dbf1      	blt.n	80010d2 <main+0xbe>
      }
      old_pos = new_pos;
 80010ee:	4a07      	ldr	r2, [pc, #28]	@ (800110c <main+0xf8>)
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	8013      	strh	r3, [r2, #0]
  {
 80010f4:	e7b3      	b.n	800105e <main+0x4a>
 80010f6:	bf00      	nop
 80010f8:	08009928 	.word	0x08009928
 80010fc:	08009958 	.word	0x08009958
 8001100:	08009974 	.word	0x08009974
 8001104:	20000200 	.word	0x20000200
 8001108:	20000330 	.word	0x20000330
 800110c:	20000300 	.word	0x20000300

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09a      	sub	sp, #104	@ 0x68
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2248      	movs	r2, #72	@ 0x48
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f006 fd68 	bl	8007bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001136:	f001 fca9 	bl	8002a8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff3e 	bl	8000fbc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001140:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <SystemClock_Config+0xac>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001148:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <SystemClock_Config+0xac>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <SystemClock_Config+0xac>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800115c:	2324      	movs	r3, #36	@ 0x24
 800115e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001160:	2381      	movs	r3, #129	@ 0x81
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001164:	2301      	movs	r3, #1
 8001166:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001168:	2300      	movs	r3, #0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800116c:	23b0      	movs	r3, #176	@ 0xb0
 800116e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001170:	2300      	movs	r3, #0
 8001172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f001 ff59 	bl	8003030 <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001184:	f000 f932 	bl	80013ec <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001188:	234f      	movs	r3, #79	@ 0x4f
 800118a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2102      	movs	r1, #2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fac5 	bl	8003734 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011b0:	f000 f91c 	bl	80013ec <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3768      	adds	r7, #104	@ 0x68
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	58000400 	.word	0x58000400

080011c0 <ProcessByte>:

/* USER CODE BEGIN 4 */
// --- Nossas funções de apoio ---

void ProcessByte(uint8_t receivedByte)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  switch (currentState)
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <ProcessByte+0xac>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d025      	beq.n	800121e <ProcessByte+0x5e>
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	dc46      	bgt.n	8001264 <ProcessByte+0xa4>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <ProcessByte+0x20>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d00b      	beq.n	80011f6 <ProcessByte+0x36>
        }
        currentState = AWAITING_SYNC;
      }
      break;
  }
}
 80011de:	e041      	b.n	8001264 <ProcessByte+0xa4>
      if (receivedByte == SYNC_WORD) {
 80011e0:	22aa      	movs	r2, #170	@ 0xaa
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d13a      	bne.n	800125e <ProcessByte+0x9e>
        byteCounter = 0;
 80011e8:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <ProcessByte+0xb0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
        currentState = RECEIVING_PAYLOAD;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <ProcessByte+0xac>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
      break;
 80011f4:	e033      	b.n	800125e <ProcessByte+0x9e>
      if (byteCounter < PAYLOAD_SIZE) {
 80011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <ProcessByte+0xb0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b13      	cmp	r3, #19
 80011fc:	d807      	bhi.n	800120e <ProcessByte+0x4e>
        payloadBuffer[byteCounter++] = receivedByte;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <ProcessByte+0xb0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	491a      	ldr	r1, [pc, #104]	@ (8001270 <ProcessByte+0xb0>)
 8001206:	600a      	str	r2, [r1, #0]
 8001208:	491a      	ldr	r1, [pc, #104]	@ (8001274 <ProcessByte+0xb4>)
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	54ca      	strb	r2, [r1, r3]
      if (byteCounter >= PAYLOAD_SIZE) {
 800120e:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <ProcessByte+0xb0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b13      	cmp	r3, #19
 8001214:	d925      	bls.n	8001262 <ProcessByte+0xa2>
        currentState = AWAITING_CHECKSUM;
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <ProcessByte+0xac>)
 8001218:	2202      	movs	r2, #2
 800121a:	701a      	strb	r2, [r3, #0]
      break;
 800121c:	e021      	b.n	8001262 <ProcessByte+0xa2>
        uint8_t receivedChecksum = receivedByte;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	73fb      	strb	r3, [r7, #15]
        uint8_t calculatedChecksum = calculate_checksum(payloadBuffer, PAYLOAD_SIZE);
 8001222:	2114      	movs	r1, #20
 8001224:	4813      	ldr	r0, [pc, #76]	@ (8001274 <ProcessByte+0xb4>)
 8001226:	f000 f8c3 	bl	80013b0 <calculate_checksum>
 800122a:	4603      	mov	r3, r0
 800122c:	73bb      	strb	r3, [r7, #14]
        if (receivedChecksum == calculatedChecksum) {
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	429a      	cmp	r2, r3
 8001234:	d109      	bne.n	800124a <ProcessByte+0x8a>
          printf("Checksum OK. Pacote da radiosonda validado.\r\n");
 8001236:	4810      	ldr	r0, [pc, #64]	@ (8001278 <ProcessByte+0xb8>)
 8001238:	f006 fbfc 	bl	8007a34 <puts>
          BSP_LED_Toggle(LED_GREEN);
 800123c:	2001      	movs	r0, #1
 800123e:	f000 fcf9 	bl	8001c34 <BSP_LED_Toggle>
          SendLoRaPacket((LoRaPayload_t*)payloadBuffer);
 8001242:	480c      	ldr	r0, [pc, #48]	@ (8001274 <ProcessByte+0xb4>)
 8001244:	f000 f81c 	bl	8001280 <SendLoRaPacket>
 8001248:	e005      	b.n	8001256 <ProcessByte+0x96>
          printf("Falha no Checksum! Esperado: 0x%02X, Recebido: 0x%02X\r\n", calculatedChecksum, receivedChecksum);
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	4619      	mov	r1, r3
 8001250:	480a      	ldr	r0, [pc, #40]	@ (800127c <ProcessByte+0xbc>)
 8001252:	f006 fb87 	bl	8007964 <iprintf>
        currentState = AWAITING_SYNC;
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <ProcessByte+0xac>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
      break;
 800125c:	e002      	b.n	8001264 <ProcessByte+0xa4>
      break;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <ProcessByte+0xa4>
      break;
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000031c 	.word	0x2000031c
 8001270:	20000318 	.word	0x20000318
 8001274:	20000304 	.word	0x20000304
 8001278:	080099b4 	.word	0x080099b4
 800127c:	080099e4 	.word	0x080099e4

08001280 <SendLoRaPacket>:

void SendLoRaPacket(LoRaPayload_t* payload)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    if (tx_done == true) // Só transmite se a transmissão anterior já terminou
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <SendLoRaPacket+0x40>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00e      	beq.n	80012b0 <SendLoRaPacket+0x30>
    {
        tx_done = false; // Bloqueia novas transmissões
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <SendLoRaPacket+0x40>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
        printf("Transmitindo pacote LoRa ID: %lu\r\n", payload->packet_id);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <SendLoRaPacket+0x44>)
 80012a0:	f006 fb60 	bl	8007964 <iprintf>
        SUBGRF_SendPayload((uint8_t*)payload, PAYLOAD_SIZE, 0); // Timeout 0 para não bloquear
 80012a4:	2200      	movs	r2, #0
 80012a6:	2114      	movs	r1, #20
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f005 f877 	bl	800639c <SUBGRF_SendPayload>
    }
    else
    {
        printf("WARN: Rádio ocupado, pacote descartado.\r\n");
    }
}
 80012ae:	e002      	b.n	80012b6 <SendLoRaPacket+0x36>
        printf("WARN: Rádio ocupado, pacote descartado.\r\n");
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <SendLoRaPacket+0x48>)
 80012b2:	f006 fbbf 	bl	8007a34 <puts>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000000 	.word	0x20000000
 80012c4:	08009a1c 	.word	0x08009a1c
 80012c8:	08009a40 	.word	0x08009a40

080012cc <Radio_Init>:

void Radio_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	@ 0x30
 80012d0:	af00      	add	r7, sp, #0
    SUBGRF_Init(RadioOnDioIrq);
 80012d2:	481f      	ldr	r0, [pc, #124]	@ (8001350 <Radio_Init+0x84>)
 80012d4:	f005 f80a 	bl	80062ec <SUBGRF_Init>

    SUBGRF_SetStandby(STDBY_RC);
 80012d8:	2000      	movs	r0, #0
 80012da:	f005 f8b3 	bl	8006444 <SUBGRF_SetStandby>
    SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 80012de:	2001      	movs	r0, #1
 80012e0:	f005 fa46 	bl	8006770 <SUBGRF_SetPacketType>
    SUBGRF_SetRfFrequency(RF_FREQUENCY);
 80012e4:	481b      	ldr	r0, [pc, #108]	@ (8001354 <Radio_Init+0x88>)
 80012e6:	f005 f9fd 	bl	80066e4 <SUBGRF_SetRfFrequency>
    SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 80012ea:	200e      	movs	r0, #14
 80012ec:	f005 fd2c 	bl	8006d48 <SUBGRF_SetRfTxPower>

    ModulationParams_t modulationParams;
    modulationParams.PacketType = PACKET_TYPE_LORA;
 80012f0:	2301      	movs	r3, #1
 80012f2:	753b      	strb	r3, [r7, #20]
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 80012f4:	2307      	movs	r3, #7
 80012f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 80012fa:	2304      	movs	r3, #4
 80012fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    modulationParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 8001300:	2301      	movs	r3, #1
 8001302:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    SUBGRF_SetModulationParams(&modulationParams);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4618      	mov	r0, r3
 8001312:	f005 fb21 	bl	8006958 <SUBGRF_SetModulationParams>

    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 8001316:	2301      	movs	r3, #1
 8001318:	703b      	strb	r3, [r7, #0]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 800131a:	2308      	movs	r3, #8
 800131c:	81fb      	strh	r3, [r7, #14]
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 800131e:	2300      	movs	r3, #0
 8001320:	743b      	strb	r3, [r7, #16]
    packetParams.Params.LoRa.PayloadLength = 255;
 8001322:	23ff      	movs	r3, #255	@ 0xff
 8001324:	747b      	strb	r3, [r7, #17]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8001326:	2301      	movs	r3, #1
 8001328:	74bb      	strb	r3, [r7, #18]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 800132a:	2300      	movs	r3, #0
 800132c:	74fb      	strb	r3, [r7, #19]
    SUBGRF_SetPacketParams(&packetParams);
 800132e:	463b      	mov	r3, r7
 8001330:	4618      	mov	r0, r3
 8001332:	f005 fbdf 	bl	8006af4 <SUBGRF_SetPacketParams>

    // Configura as interrupções do rádio que queremos ouvir (TX_DONE e TIMEOUT)
    SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8001336:	2300      	movs	r3, #0
 8001338:	2200      	movs	r2, #0
 800133a:	f240 2101 	movw	r1, #513	@ 0x201
 800133e:	f240 2001 	movw	r0, #513	@ 0x201
 8001342:	f005 f973 	bl	800662c <SUBGRF_SetDioIrqParams>
}
 8001346:	bf00      	nop
 8001348:	3730      	adds	r7, #48	@ 0x30
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	08001359 	.word	0x08001359
 8001354:	3689cac0 	.word	0x3689cac0

08001358 <RadioOnDioIrq>:

// Callback para os eventos de interrupção do rádio
void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq)
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001368:	d00e      	beq.n	8001388 <RadioOnDioIrq+0x30>
 800136a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800136e:	dc12      	bgt.n	8001396 <RadioOnDioIrq+0x3e>
 8001370:	2b01      	cmp	r3, #1
 8001372:	d002      	beq.n	800137a <RadioOnDioIrq+0x22>
 8001374:	2b02      	cmp	r3, #2
 8001376:	d010      	beq.n	800139a <RadioOnDioIrq+0x42>
        case IRQ_RX_TX_TIMEOUT:
            printf("WARN: LoRa TX Timeout.\r\n");
            tx_done = true; // Libera para tentar de novo
            break;
        default:
            break;
 8001378:	e00d      	b.n	8001396 <RadioOnDioIrq+0x3e>
            printf("LoRa TX Done.\r\n");
 800137a:	480a      	ldr	r0, [pc, #40]	@ (80013a4 <RadioOnDioIrq+0x4c>)
 800137c:	f006 fb5a 	bl	8007a34 <puts>
            tx_done = true; // Libera para a próxima transmissão
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <RadioOnDioIrq+0x50>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
            break;
 8001386:	e009      	b.n	800139c <RadioOnDioIrq+0x44>
            printf("WARN: LoRa TX Timeout.\r\n");
 8001388:	4808      	ldr	r0, [pc, #32]	@ (80013ac <RadioOnDioIrq+0x54>)
 800138a:	f006 fb53 	bl	8007a34 <puts>
            tx_done = true; // Libera para tentar de novo
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <RadioOnDioIrq+0x50>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
            break;
 8001394:	e002      	b.n	800139c <RadioOnDioIrq+0x44>
            break;
 8001396:	bf00      	nop
 8001398:	e000      	b.n	800139c <RadioOnDioIrq+0x44>
            break;
 800139a:	bf00      	nop
    }
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08009a6c 	.word	0x08009a6c
 80013a8:	20000000 	.word	0x20000000
 80013ac:	08009a7c 	.word	0x08009a7c

080013b0 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t* data, int length) {
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
    uint8_t checksum = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) { checksum ^= data[i]; }
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	e009      	b.n	80013d8 <calculate_checksum+0x28>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	4053      	eors	r3, r2
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3301      	adds	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf1      	blt.n	80013c4 <calculate_checksum+0x14>
    return checksum;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <Error_Handler+0x8>

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <NMI_Handler+0x4>

0800140c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <UsageFault_Handler+0x4>

0800142c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001454:	f000 fce0 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <DMA1_Channel1_IRQHandler+0x10>)
 8001462:	f000 ffe5 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000518 	.word	0x20000518

08001470 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <DMA1_Channel2_IRQHandler+0x10>)
 8001476:	f000 ffdb 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000578 	.word	0x20000578

08001484 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <DMA1_Channel3_IRQHandler+0x10>)
 800148a:	f000 ffd1 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000458 	.word	0x20000458

08001498 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <DMA1_Channel4_IRQHandler+0x10>)
 800149e:	f000 ffc7 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200004b8 	.word	0x200004b8

080014ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <USART1_IRQHandler+0x10>)
 80014b2:	f003 fbcf 	bl	8004c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000330 	.word	0x20000330

080014c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <USART2_IRQHandler+0x10>)
 80014c6:	f003 fbc5 	bl	8004c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200003c4 	.word	0x200003c4

080014d4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80014da:	f003 f8c9 	bl	8004670 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000320 	.word	0x20000320

080014e8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80014f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80014f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001504:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <MX_SUBGHZ_Init+0x20>)
 800151e:	2208      	movs	r2, #8
 8001520:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	@ (8001538 <MX_SUBGHZ_Init+0x20>)
 8001524:	f002 fe7a 	bl	800421c <HAL_SUBGHZ_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800152e:	f7ff ff5d 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000320 	.word	0x20000320

0800153c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff ffcf 	bl	80014e8 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2032      	movs	r0, #50	@ 0x32
 8001550:	f000 fd55 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001554:	2032      	movs	r0, #50	@ 0x32
 8001556:	f000 fd6c 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  return 1;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <_kill>:

int _kill(int pid, int sig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800157a:	f006 fb8d 	bl	8007c98 <__errno>
 800157e:	4603      	mov	r3, r0
 8001580:	2216      	movs	r2, #22
 8001582:	601a      	str	r2, [r3, #0]
  return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe7 	bl	8001570 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a2:	bf00      	nop
 80015a4:	e7fd      	b.n	80015a2 <_exit+0x12>

080015a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e00a      	b.n	80015ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b8:	f3af 8000 	nop.w
 80015bc:	4601      	mov	r1, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	b2ca      	uxtb	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbf0      	blt.n	80015b8 <_read+0x12>
  }

  return len;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001606:	605a      	str	r2, [r3, #4]
  return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <_isatty>:

int _isatty(int file)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800161c:	2301      	movs	r3, #1
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	@ (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f006 fb12 	bl	8007c98 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20010000 	.word	0x20010000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	2000032c 	.word	0x2000032c
 80016a8:	20000730 	.word	0x20000730

080016ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <LL_AHB2_GRP1_EnableClock>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016dc:	68fb      	ldr	r3, [r7, #12]
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <LL_APB1_GRP1_EnableClock>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001704:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <LL_APB2_GRP1_EnableClock>:
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001724:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001726:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4313      	orrs	r3, r2
 800172e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001734:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800174c:	4b22      	ldr	r3, [pc, #136]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 800174e:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <MX_USART1_UART_Init+0x94>)
 8001750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001752:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 8001754:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001784:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001790:	4811      	ldr	r0, [pc, #68]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 8001792:	f003 f93c 	bl	8004a0e <HAL_UART_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800179c:	f7ff fe26 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 80017a4:	f004 fcb0 	bl	8006108 <HAL_UARTEx_SetTxFifoThreshold>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017ae:	f7ff fe1d 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 80017b6:	f004 fce5 	bl	8006184 <HAL_UARTEx_SetRxFifoThreshold>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f7ff fe14 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <MX_USART1_UART_Init+0x90>)
 80017c6:	f004 fc67 	bl	8006098 <HAL_UARTEx_DisableFifoMode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017d0:	f7ff fe0c 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000330 	.word	0x20000330
 80017dc:	40013800 	.word	0x40013800

080017e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 80017e6:	4a23      	ldr	r2, [pc, #140]	@ (8001874 <MX_USART2_UART_Init+0x94>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ea:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 80017ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001816:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001822:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001828:	4811      	ldr	r0, [pc, #68]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 800182a:	f003 f8f0 	bl	8004a0e <HAL_UART_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001834:	f7ff fdda 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001838:	2100      	movs	r1, #0
 800183a:	480d      	ldr	r0, [pc, #52]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 800183c:	f004 fc64 	bl	8006108 <HAL_UARTEx_SetTxFifoThreshold>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001846:	f7ff fdd1 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4808      	ldr	r0, [pc, #32]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 800184e:	f004 fc99 	bl	8006184 <HAL_UARTEx_SetRxFifoThreshold>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001858:	f7ff fdc8 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	@ (8001870 <MX_USART2_UART_Init+0x90>)
 800185e:	f004 fc1b 	bl	8006098 <HAL_UARTEx_DisableFifoMode>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001868:	f7ff fdc0 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200003c4 	.word	0x200003c4
 8001874:	40004400 	.word	0x40004400

08001878 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b096      	sub	sp, #88	@ 0x58
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	2238      	movs	r2, #56	@ 0x38
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f006 f9ab 	bl	8007bf4 <memset>
  if(uartHandle->Instance==USART1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a9b      	ldr	r2, [pc, #620]	@ (8001b10 <HAL_UART_MspInit+0x298>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	f040 8094 	bne.w	80019d2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018ae:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80018b2:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 fafb 	bl	8003eb4 <HAL_RCCEx_PeriphCLKConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80018c4:	f7ff fd92 	bl	80013ec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80018cc:	f7ff ff24 	bl	8001718 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	2002      	movs	r0, #2
 80018d2:	f7ff fef1 	bl	80016b8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80018d6:	23c0      	movs	r3, #192	@ 0xc0
 80018d8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e6:	2307      	movs	r3, #7
 80018e8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80018ee:	4619      	mov	r1, r3
 80018f0:	4888      	ldr	r0, [pc, #544]	@ (8001b14 <HAL_UART_MspInit+0x29c>)
 80018f2:	f000 ff3b 	bl	800276c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80018f6:	4b88      	ldr	r3, [pc, #544]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 80018f8:	4a88      	ldr	r2, [pc, #544]	@ (8001b1c <HAL_UART_MspInit+0x2a4>)
 80018fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80018fc:	4b86      	ldr	r3, [pc, #536]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 80018fe:	2211      	movs	r2, #17
 8001900:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001902:	4b85      	ldr	r3, [pc, #532]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001908:	4b83      	ldr	r3, [pc, #524]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800190e:	4b82      	ldr	r3, [pc, #520]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001914:	4b80      	ldr	r3, [pc, #512]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800191a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001920:	4b7d      	ldr	r3, [pc, #500]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 8001922:	2220      	movs	r2, #32
 8001924:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001926:	4b7c      	ldr	r3, [pc, #496]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800192c:	487a      	ldr	r0, [pc, #488]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 800192e:	f000 fb9b 	bl	8002068 <HAL_DMA_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001938:	f7ff fd58 	bl	80013ec <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800193c:	2110      	movs	r1, #16
 800193e:	4876      	ldr	r0, [pc, #472]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 8001940:	f000 fe3c 	bl	80025bc <HAL_DMA_ConfigChannelAttributes>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 800194a:	f7ff fd4f 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a71      	ldr	r2, [pc, #452]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 8001952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001956:	4a70      	ldr	r2, [pc, #448]	@ (8001b18 <HAL_UART_MspInit+0x2a0>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800195c:	4b70      	ldr	r3, [pc, #448]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 800195e:	4a71      	ldr	r2, [pc, #452]	@ (8001b24 <HAL_UART_MspInit+0x2ac>)
 8001960:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001962:	4b6f      	ldr	r3, [pc, #444]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 8001964:	2212      	movs	r2, #18
 8001966:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001968:	4b6d      	ldr	r3, [pc, #436]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 800196a:	2210      	movs	r2, #16
 800196c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b6a      	ldr	r3, [pc, #424]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 8001976:	2280      	movs	r2, #128	@ 0x80
 8001978:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197a:	4b69      	ldr	r3, [pc, #420]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001980:	4b67      	ldr	r3, [pc, #412]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001986:	4b66      	ldr	r3, [pc, #408]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 8001988:	2220      	movs	r2, #32
 800198a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800198c:	4b64      	ldr	r3, [pc, #400]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001992:	4863      	ldr	r0, [pc, #396]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 8001994:	f000 fb68 	bl	8002068 <HAL_DMA_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800199e:	f7ff fd25 	bl	80013ec <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80019a2:	2110      	movs	r1, #16
 80019a4:	485e      	ldr	r0, [pc, #376]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 80019a6:	f000 fe09 	bl	80025bc <HAL_DMA_ConfigChannelAttributes>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80019b0:	f7ff fd1c 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 80019b8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80019ba:	4a59      	ldr	r2, [pc, #356]	@ (8001b20 <HAL_UART_MspInit+0x2a8>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2024      	movs	r0, #36	@ 0x24
 80019c6:	f000 fb1a 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ca:	2024      	movs	r0, #36	@ 0x24
 80019cc:	f000 fb31 	bl	8002032 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019d0:	e099      	b.n	8001b06 <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a54      	ldr	r2, [pc, #336]	@ (8001b28 <HAL_UART_MspInit+0x2b0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	f040 8094 	bne.w	8001b06 <HAL_UART_MspInit+0x28e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019de:	2302      	movs	r3, #2
 80019e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019e2:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80019e6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fa61 	bl	8003eb4 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_UART_MspInit+0x184>
      Error_Handler();
 80019f8:	f7ff fcf8 	bl	80013ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001a00:	f7ff fe72 	bl	80016e8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	2001      	movs	r0, #1
 8001a06:	f7ff fe57 	bl	80016b8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a28:	f000 fea0 	bl	800276c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a2e:	4a40      	ldr	r2, [pc, #256]	@ (8001b30 <HAL_UART_MspInit+0x2b8>)
 8001a30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001a32:	4b3e      	ldr	r3, [pc, #248]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a34:	2213      	movs	r2, #19
 8001a36:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a38:	4b3c      	ldr	r3, [pc, #240]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a44:	4b39      	ldr	r3, [pc, #228]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a46:	2280      	movs	r2, #128	@ 0x80
 8001a48:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4a:	4b38      	ldr	r3, [pc, #224]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a50:	4b36      	ldr	r3, [pc, #216]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001a56:	4b35      	ldr	r3, [pc, #212]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a58:	2220      	movs	r2, #32
 8001a5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5c:	4b33      	ldr	r3, [pc, #204]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a62:	4832      	ldr	r0, [pc, #200]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a64:	f000 fb00 	bl	8002068 <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8001a6e:	f7ff fcbd 	bl	80013ec <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a72:	2110      	movs	r1, #16
 8001a74:	482d      	ldr	r0, [pc, #180]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a76:	f000 fda1 	bl	80025bc <HAL_DMA_ConfigChannelAttributes>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8001a80:	f7ff fcb4 	bl	80013ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a29      	ldr	r2, [pc, #164]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a8c:	4a27      	ldr	r2, [pc, #156]	@ (8001b2c <HAL_UART_MspInit+0x2b4>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001a92:	4b28      	ldr	r3, [pc, #160]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001a94:	4a28      	ldr	r2, [pc, #160]	@ (8001b38 <HAL_UART_MspInit+0x2c0>)
 8001a96:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001a98:	4b26      	ldr	r3, [pc, #152]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001a9a:	2214      	movs	r2, #20
 8001a9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a9e:	4b25      	ldr	r3, [pc, #148]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa4:	4b23      	ldr	r3, [pc, #140]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aaa:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001aac:	2280      	movs	r2, #128	@ 0x80
 8001aae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001abe:	2220      	movs	r2, #32
 8001ac0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ac8:	481a      	ldr	r0, [pc, #104]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001aca:	f000 facd 	bl	8002068 <HAL_DMA_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8001ad4:	f7ff fc8a 	bl	80013ec <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ad8:	2110      	movs	r1, #16
 8001ada:	4816      	ldr	r0, [pc, #88]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001adc:	f000 fd6e 	bl	80025bc <HAL_DMA_ConfigChannelAttributes>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001ae6:	f7ff fc81 	bl	80013ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001aee:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001af0:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <HAL_UART_MspInit+0x2bc>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2025      	movs	r0, #37	@ 0x25
 8001afc:	f000 fa7f 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b00:	2025      	movs	r0, #37	@ 0x25
 8001b02:	f000 fa96 	bl	8002032 <HAL_NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3758      	adds	r7, #88	@ 0x58
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40013800 	.word	0x40013800
 8001b14:	48000400 	.word	0x48000400
 8001b18:	20000458 	.word	0x20000458
 8001b1c:	40020030 	.word	0x40020030
 8001b20:	200004b8 	.word	0x200004b8
 8001b24:	40020044 	.word	0x40020044
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	20000518 	.word	0x20000518
 8001b30:	40020008 	.word	0x40020008
 8001b34:	20000578 	.word	0x20000578
 8001b38:	4002001c 	.word	0x4002001c

08001b3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b3c:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b40:	f7ff fdb4 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b46:	490d      	ldr	r1, [pc, #52]	@ (8001b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <LoopForever+0xe>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b88 <LoopForever+0x16>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b6a:	f006 f89b 	bl	8007ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6e:	f7ff fa51 	bl	8001014 <main>

08001b72 <LoopForever>:

LoopForever:
    b LoopForever
 8001b72:	e7fe      	b.n	8001b72 <LoopForever>
  ldr   r0, =_estack
 8001b74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001b80:	08009f04 	.word	0x08009f04
  ldr r2, =_sbss
 8001b84:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001b88:	20000730 	.word	0x20000730

08001b8c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>

08001b8e <LL_AHB2_GRP1_EnableClock>:
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001baa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
	...

08001bc0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f7ff ffd7 	bl	8001b8e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <BSP_LED_Init+0x6c>)
 8001be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001be8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001bea:	2301      	movs	r3, #1
 8001bec:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <BSP_LED_Init+0x70>)
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	f107 020c 	add.w	r2, r7, #12
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fdb1 	bl	800276c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <BSP_LED_Init+0x70>)
 8001c0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <BSP_LED_Init+0x6c>)
 8001c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f000 ff05 	bl	8002a2c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	08009b50 	.word	0x08009b50
 8001c30:	20000008 	.word	0x20000008

08001c34 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <BSP_LED_Toggle+0x2c>)
 8001c42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4906      	ldr	r1, [pc, #24]	@ (8001c64 <BSP_LED_Toggle+0x30>)
 8001c4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4610      	mov	r0, r2
 8001c52:	f000 ff02 	bl	8002a5a <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000008 	.word	0x20000008
 8001c64:	08009b50 	.word	0x08009b50

08001c68 <LL_AHB2_GRP1_EnableClock>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001cac:	2004      	movs	r0, #4
 8001cae:	f7ff ffdb 	bl	8001c68 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4812      	ldr	r0, [pc, #72]	@ (8001d10 <BSP_RADIO_Init+0x78>)
 8001cc8:	f000 fd50 	bl	800276c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480e      	ldr	r0, [pc, #56]	@ (8001d10 <BSP_RADIO_Init+0x78>)
 8001cd6:	f000 fd49 	bl	800276c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001cda:	2308      	movs	r3, #8
 8001cdc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480b      	ldr	r0, [pc, #44]	@ (8001d10 <BSP_RADIO_Init+0x78>)
 8001ce4:	f000 fd42 	bl	800276c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2120      	movs	r1, #32
 8001cec:	4808      	ldr	r0, [pc, #32]	@ (8001d10 <BSP_RADIO_Init+0x78>)
 8001cee:	f000 fe9d 	bl	8002a2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2110      	movs	r1, #16
 8001cf6:	4806      	ldr	r0, [pc, #24]	@ (8001d10 <BSP_RADIO_Init+0x78>)
 8001cf8:	f000 fe98 	bl	8002a2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2108      	movs	r1, #8
 8001d00:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <BSP_RADIO_Init+0x78>)
 8001d02:	f000 fe93 	bl	8002a2c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	48000800 	.word	0x48000800

08001d14 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001d4e:	230f      	movs	r3, #15
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	e001      	b.n	8001d58 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001d54:	2316      	movs	r3, #22
 8001d56:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d58:	68fb      	ldr	r3, [r7, #12]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 f93a 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d74:	f001 fec0 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a09      	ldr	r2, [pc, #36]	@ (8001da0 <HAL_Init+0x3c>)
 8001d7c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f000 f810 	bl	8001da4 <HAL_InitTick>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	e001      	b.n	8001d94 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d90:	f7ff fb32 	bl	80013f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d94:	79fb      	ldrb	r3, [r7, #7]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <HAL_InitTick+0x6c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d024      	beq.n	8001e02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001db8:	f001 fe9e 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_InitTick+0x6c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f93c 	bl	800204e <HAL_SYSTICK_Config>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b0f      	cmp	r3, #15
 8001de0:	d809      	bhi.n	8001df6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de2:	2200      	movs	r2, #0
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dea:	f000 f908 	bl	8001ffe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dee:	4a09      	ldr	r2, [pc, #36]	@ (8001e14 <HAL_InitTick+0x70>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e007      	b.n	8001e06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e004      	b.n	8001e06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e001      	b.n	8001e06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000018 	.word	0x20000018
 8001e14:	20000014 	.word	0x20000014

08001e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_IncTick+0x1c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a03      	ldr	r2, [pc, #12]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20000018 	.word	0x20000018
 8001e38:	200005d8 	.word	0x200005d8

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b02      	ldr	r3, [pc, #8]	@ (8001e4c <HAL_GetTick+0x10>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	200005d8 	.word	0x200005d8

08001e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	f003 0307 	and.w	r3, r3, #7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0b      	blt.n	8001ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4906      	ldr	r1, [pc, #24]	@ (8001ee8 <__NVIC_EnableIRQ+0x34>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fc8:	f7ff ff90 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff2d 	bl	8001e50 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff ff44 	bl	8001e98 <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff92 	bl	8001f40 <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff61 	bl	8001eec <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff37 	bl	8001eb4 <__NVIC_EnableIRQ>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ffa4 	bl	8001fa4 <SysTick_Config>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e08e      	b.n	8002198 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	4b47      	ldr	r3, [pc, #284]	@ (80021a0 <HAL_DMA_Init+0x138>)
 8002082:	429a      	cmp	r2, r3
 8002084:	d80f      	bhi.n	80020a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	4b45      	ldr	r3, [pc, #276]	@ (80021a4 <HAL_DMA_Init+0x13c>)
 800208e:	4413      	add	r3, r2
 8002090:	4a45      	ldr	r2, [pc, #276]	@ (80021a8 <HAL_DMA_Init+0x140>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	009a      	lsls	r2, r3, #2
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a42      	ldr	r2, [pc, #264]	@ (80021ac <HAL_DMA_Init+0x144>)
 80020a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80020a4:	e00e      	b.n	80020c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b40      	ldr	r3, [pc, #256]	@ (80021b0 <HAL_DMA_Init+0x148>)
 80020ae:	4413      	add	r3, r2
 80020b0:	4a3d      	ldr	r2, [pc, #244]	@ (80021a8 <HAL_DMA_Init+0x140>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	009a      	lsls	r2, r3, #2
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a3c      	ldr	r2, [pc, #240]	@ (80021b4 <HAL_DMA_Init+0x14c>)
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80020da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020de:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fabc 	bl	8002694 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002124:	d102      	bne.n	800212c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002134:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002138:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002142:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d010      	beq.n	800216e <HAL_DMA_Init+0x106>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b04      	cmp	r3, #4
 8002152:	d80c      	bhi.n	800216e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fae5 	bl	8002724 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	e008      	b.n	8002180 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40020407 	.word	0x40020407
 80021a4:	bffdfff8 	.word	0xbffdfff8
 80021a8:	cccccccd 	.word	0xcccccccd
 80021ac:	40020000 	.word	0x40020000
 80021b0:	bffdfbf8 	.word	0xbffdfbf8
 80021b4:	40020400 	.word	0x40020400

080021b8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_DMA_Start_IT+0x20>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e069      	b.n	80022ac <HAL_DMA_Start_IT+0xf4>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d155      	bne.n	8002298 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fa02 	bl	800261a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 020e 	orr.w	r2, r2, #14
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e00f      	b.n	8002250 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0204 	bic.w	r2, r2, #4
 800223e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 020a 	orr.w	r2, r2, #10
 800224e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800226c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002284:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e008      	b.n	80022aa <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2280      	movs	r2, #128	@ 0x80
 800229c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e04f      	b.n	8002366 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d008      	beq.n	80022e4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2204      	movs	r2, #4
 80022d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e040      	b.n	8002366 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 020e 	bic.w	r2, r2, #14
 80022f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002302:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002318:	f003 021c 	and.w	r2, r3, #28
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002330:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002344:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002348:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002352:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d005      	beq.n	8002394 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2204      	movs	r2, #4
 800238c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e047      	b.n	8002424 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 020e 	bic.w	r2, r2, #14
 80023a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c8:	f003 021c 	and.w	r2, r3, #28
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	2101      	movs	r1, #1
 80023d2:	fa01 f202 	lsl.w	r2, r1, r2
 80023d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00c      	beq.n	8002404 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002402:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
    }
  }
  return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	f003 031c 	and.w	r3, r3, #28
 8002450:	2204      	movs	r2, #4
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d027      	beq.n	80024ac <HAL_DMA_IRQHandler+0x7c>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d022      	beq.n	80024ac <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d107      	bne.n	8002484 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0204 	bic.w	r2, r2, #4
 8002482:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002488:	f003 021c 	and.w	r2, r3, #28
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	2104      	movs	r1, #4
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8081 	beq.w	80025a4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80024aa:	e07b      	b.n	80025a4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b0:	f003 031c 	and.w	r3, r3, #28
 80024b4:	2202      	movs	r2, #2
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03d      	beq.n	800253c <HAL_DMA_IRQHandler+0x10c>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d038      	beq.n	800253c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 020a 	bic.w	r2, r2, #10
 80024e6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b2e      	ldr	r3, [pc, #184]	@ (80025b0 <HAL_DMA_IRQHandler+0x180>)
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d909      	bls.n	8002510 <HAL_DMA_IRQHandler+0xe0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002500:	f003 031c 	and.w	r3, r3, #28
 8002504:	4a2b      	ldr	r2, [pc, #172]	@ (80025b4 <HAL_DMA_IRQHandler+0x184>)
 8002506:	2102      	movs	r1, #2
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	6053      	str	r3, [r2, #4]
 800250e:	e008      	b.n	8002522 <HAL_DMA_IRQHandler+0xf2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	f003 031c 	and.w	r3, r3, #28
 8002518:	4a27      	ldr	r2, [pc, #156]	@ (80025b8 <HAL_DMA_IRQHandler+0x188>)
 800251a:	2102      	movs	r1, #2
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d038      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800253a:	e033      	b.n	80025a4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002540:	f003 031c 	and.w	r3, r3, #28
 8002544:	2208      	movs	r2, #8
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d02a      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x176>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d025      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 020e 	bic.w	r2, r2, #14
 8002568:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	f003 021c 	and.w	r2, r3, #28
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f202 	lsl.w	r2, r1, r2
 800257c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
}
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40020080 	.word	0x40020080
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020000 	.word	0x40020000

080025bc <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	72fb      	strb	r3, [r7, #11]
    return status;
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	e01b      	b.n	8002610 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e003      	b.n	8002606 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002604:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	601a      	str	r2, [r3, #0]

  return status;
 800260e:	7afb      	ldrb	r3, [r7, #11]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002630:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002642:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	f003 021c 	and.w	r2, r3, #28
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f202 	lsl.w	r2, r1, r2
 8002656:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b10      	cmp	r3, #16
 8002666:	d108      	bne.n	800267a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002678:	e007      	b.n	800268a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	60da      	str	r2, [r3, #12]
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d813      	bhi.n	80026d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026b4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3b08      	subs	r3, #8
 80026c4:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	e011      	b.n	80026f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80026da:	4413      	add	r3, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	3b08      	subs	r3, #8
 80026e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002718 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	3307      	adds	r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002720 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80026f8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2201      	movs	r2, #1
 8002702:	409a      	lsls	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40020407 	.word	0x40020407
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	4002081c 	.word	0x4002081c
 8002720:	40020880 	.word	0x40020880

08002724 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002734:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a08      	ldr	r2, [pc, #32]	@ (8002768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002748:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3b01      	subs	r3, #1
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2201      	movs	r2, #1
 8002754:	409a      	lsls	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	1000823f 	.word	0x1000823f
 8002768:	40020940 	.word	0x40020940

0800276c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277a:	e140      	b.n	80029fe <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8132 	beq.w	80029f8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d005      	beq.n	80027ac <HAL_GPIO_Init+0x40>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d130      	bne.n	800280e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027e2:	2201      	movs	r2, #1
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 0201 	and.w	r2, r3, #1
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b03      	cmp	r3, #3
 8002818:	d017      	beq.n	800284a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d123      	bne.n	800289e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4013      	ands	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	08da      	lsrs	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3208      	adds	r2, #8
 8002898:	6939      	ldr	r1, [r7, #16]
 800289a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0203 	and.w	r2, r3, #3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 808c 	beq.w	80029f8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80028e0:	4a4e      	ldr	r2, [pc, #312]	@ (8002a1c <HAL_GPIO_Init+0x2b0>)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	2207      	movs	r2, #7
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800290a:	d00d      	beq.n	8002928 <HAL_GPIO_Init+0x1bc>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a44      	ldr	r2, [pc, #272]	@ (8002a20 <HAL_GPIO_Init+0x2b4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d007      	beq.n	8002924 <HAL_GPIO_Init+0x1b8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a43      	ldr	r2, [pc, #268]	@ (8002a24 <HAL_GPIO_Init+0x2b8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d101      	bne.n	8002920 <HAL_GPIO_Init+0x1b4>
 800291c:	2302      	movs	r3, #2
 800291e:	e004      	b.n	800292a <HAL_GPIO_Init+0x1be>
 8002920:	2307      	movs	r3, #7
 8002922:	e002      	b.n	800292a <HAL_GPIO_Init+0x1be>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_GPIO_Init+0x1be>
 8002928:	2300      	movs	r3, #0
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	f002 0203 	and.w	r2, r2, #3
 8002930:	0092      	lsls	r2, r2, #2
 8002932:	4093      	lsls	r3, r2
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800293a:	4938      	ldr	r1, [pc, #224]	@ (8002a1c <HAL_GPIO_Init+0x2b0>)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002948:	4b37      	ldr	r3, [pc, #220]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800296c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002972:	4b2d      	ldr	r3, [pc, #180]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002996:	4a24      	ldr	r2, [pc, #144]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800299c:	4b22      	ldr	r3, [pc, #136]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 800299e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80029c2:	4a19      	ldr	r2, [pc, #100]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80029ca:	4b17      	ldr	r3, [pc, #92]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029d0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3301      	adds	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f47f aeb7 	bne.w	800277c <HAL_GPIO_Init+0x10>
  }
}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	48000400 	.word	0x48000400
 8002a24:	48000800 	.word	0x48000800
 8002a28:	58000800 	.word	0x58000800

08002a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a3c:	787b      	ldrb	r3, [r7, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a48:	e002      	b.n	8002a50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a6c:	887a      	ldrh	r2, [r7, #2]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4013      	ands	r3, r2
 8002a72:	041a      	lsls	r2, r3, #16
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43d9      	mvns	r1, r3
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a03      	ldr	r2, [pc, #12]	@ (8002aa4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	58000400 	.word	0x58000400

08002aa8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <HAL_PWREx_GetVoltageRange+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	58000400 	.word	0x58000400

08002ac0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad0:	d101      	bne.n	8002ad6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	58000400 	.word	0x58000400

08002ae4 <LL_RCC_HSE_EnableTcxo>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_HSE_DisableTcxo>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b2e:	d101      	bne.n	8002b34 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_HSE_Enable>:
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <LL_RCC_HSE_Disable>:
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <LL_RCC_HSE_IsReady>:
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b88:	d101      	bne.n	8002b8e <LL_RCC_HSE_IsReady+0x18>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_RCC_HSE_IsReady+0x1a>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_HSI_Enable>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_HSI_Disable>:
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <LL_RCC_HSI_IsReady>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be2:	d101      	bne.n	8002be8 <LL_RCC_HSI_IsReady+0x18>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_RCC_HSI_IsReady+0x1a>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d101      	bne.n	8002c32 <LL_RCC_LSE_IsReady+0x18>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <LL_RCC_LSE_IsReady+0x1a>
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d101      	bne.n	8002c94 <LL_RCC_LSI_IsReady+0x18>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <LL_RCC_LSI_IsReady+0x1a>
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6013      	str	r3, [r2, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	6013      	str	r3, [r2, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d101      	bne.n	8002cec <LL_RCC_MSI_IsReady+0x16>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_RCC_MSI_IsReady+0x18>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d101      	bne.n	8002d0c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dda:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dde:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e04:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e08:	f023 020f 	bic.w	r2, r3, #15
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002efa:	6013      	str	r3, [r2, #0]
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f16:	d101      	bne.n	8002f1c <LL_RCC_PLL_IsReady+0x18>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_RCC_PLL_IsReady+0x1a>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0303 	and.w	r3, r3, #3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f92:	d101      	bne.n	8002f98 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002faa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fb6:	d101      	bne.n	8002fbc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fda:	d101      	bne.n	8002fe0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ffc:	d101      	bne.n	8003002 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800301a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800301e:	d101      	bne.n	8003024 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
	...

08003030 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e36f      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003042:	f7ff fea6 	bl	8002d92 <LL_RCC_GetSysClkSource>
 8003046:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003048:	f7ff ff8f 	bl	8002f6a <LL_RCC_PLL_GetMainSource>
 800304c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80c4 	beq.w	80031e4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_RCC_OscConfig+0x3e>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d176      	bne.n	8003156 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d173      	bne.n	8003156 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e353      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_OscConfig+0x68>
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003096:	e006      	b.n	80030a6 <HAL_RCC_OscConfig+0x76>
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d222      	bcs.n	80030f0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fd5a 	bl	8003b68 <RCC_SetFlashLatencyFromMSIRange>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e331      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fe2b 	bl	8002d44 <LL_RCC_MSI_SetCalibTrimming>
 80030ee:	e021      	b.n	8003134 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030fa:	f043 0308 	orr.w	r3, r3, #8
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fe12 	bl	8002d44 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fd1f 	bl	8003b68 <RCC_SetFlashLatencyFromMSIRange>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e2f6      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003134:	f000 fce0 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003138:	4603      	mov	r3, r0
 800313a:	4aa7      	ldr	r2, [pc, #668]	@ (80033d8 <HAL_RCC_OscConfig+0x3a8>)
 800313c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800313e:	4ba7      	ldr	r3, [pc, #668]	@ (80033dc <HAL_RCC_OscConfig+0x3ac>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fe2e 	bl	8001da4 <HAL_InitTick>
 8003148:	4603      	mov	r3, r0
 800314a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d047      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	e2e5      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d02c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800315e:	f7ff fd9e 	bl	8002c9e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003162:	f7fe fe6b 	bl	8001e3c <HAL_GetTick>
 8003166:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800316a:	f7fe fe67 	bl	8001e3c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e2d2      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800317c:	f7ff fdab 	bl	8002cd6 <LL_RCC_MSI_IsReady>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f1      	beq.n	800316a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fdc7 	bl	8002d44 <LL_RCC_MSI_SetCalibTrimming>
 80031b6:	e015      	b.n	80031e4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031b8:	f7ff fd7f 	bl	8002cba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fe3e 	bl	8001e3c <HAL_GetTick>
 80031c0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c4:	f7fe fe3a 	bl	8001e3c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e2a5      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031d6:	f7ff fd7e 	bl	8002cd6 <LL_RCC_MSI_IsReady>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f1      	bne.n	80031c4 <HAL_RCC_OscConfig+0x194>
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031e2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d058      	beq.n	80032a2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x1d2>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d108      	bne.n	800320e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d105      	bne.n	800320e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d14b      	bne.n	80032a2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e289      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800320e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003220:	4313      	orrs	r3, r2
 8003222:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322c:	d102      	bne.n	8003234 <HAL_RCC_OscConfig+0x204>
 800322e:	f7ff fc86 	bl	8002b3e <LL_RCC_HSE_Enable>
 8003232:	e00d      	b.n	8003250 <HAL_RCC_OscConfig+0x220>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800323c:	d104      	bne.n	8003248 <HAL_RCC_OscConfig+0x218>
 800323e:	f7ff fc51 	bl	8002ae4 <LL_RCC_HSE_EnableTcxo>
 8003242:	f7ff fc7c 	bl	8002b3e <LL_RCC_HSE_Enable>
 8003246:	e003      	b.n	8003250 <HAL_RCC_OscConfig+0x220>
 8003248:	f7ff fc87 	bl	8002b5a <LL_RCC_HSE_Disable>
 800324c:	f7ff fc58 	bl	8002b00 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d012      	beq.n	800327e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fdf0 	bl	8001e3c <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe fdec 	bl	8001e3c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	@ 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e257      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003272:	f7ff fc80 	bl	8002b76 <LL_RCC_HSE_IsReady>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f1      	beq.n	8003260 <HAL_RCC_OscConfig+0x230>
 800327c:	e011      	b.n	80032a2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe fddd 	bl	8001e3c <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003286:	f7fe fdd9 	bl	8001e3c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b64      	cmp	r3, #100	@ 0x64
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e244      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003298:	f7ff fc6d 	bl	8002b76 <LL_RCC_HSE_IsReady>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f1      	bne.n	8003286 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d046      	beq.n	800333c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_OscConfig+0x290>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d10e      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d10b      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e22a      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fc8e 	bl	8002bf2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032d6:	e031      	b.n	800333c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d019      	beq.n	8003314 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e0:	f7ff fc5a 	bl	8002b98 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fdaa 	bl	8001e3c <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fe fda6 	bl	8001e3c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e211      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032fe:	f7ff fc67 	bl	8002bd0 <LL_RCC_HSI_IsReady>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f1      	beq.n	80032ec <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fc70 	bl	8002bf2 <LL_RCC_HSI_SetCalibTrimming>
 8003312:	e013      	b.n	800333c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003314:	f7ff fc4e 	bl	8002bb4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fd90 	bl	8001e3c <HAL_GetTick>
 800331c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003320:	f7fe fd8c 	bl	8001e3c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e1f7      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003332:	f7ff fc4d 	bl	8002bd0 <LL_RCC_HSI_IsReady>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f1      	bne.n	8003320 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d06e      	beq.n	8003426 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d056      	beq.n	80033fe <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003358:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	429a      	cmp	r2, r3
 8003366:	d031      	beq.n	80033cc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e1d0      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d013      	beq.n	80033b2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800338a:	f7ff fc67 	bl	8002c5c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800338e:	f7fe fd55 	bl	8001e3c <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003396:	f7fe fd51 	bl	8001e3c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b11      	cmp	r3, #17
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e1bc      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80033a8:	f7ff fc68 	bl	8002c7c <LL_RCC_LSI_IsReady>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f1      	bne.n	8003396 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ba:	f023 0210 	bic.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033cc:	f7ff fc36 	bl	8002c3c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d0:	f7fe fd34 	bl	8001e3c <HAL_GetTick>
 80033d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80033d6:	e00c      	b.n	80033f2 <HAL_RCC_OscConfig+0x3c2>
 80033d8:	20000004 	.word	0x20000004
 80033dc:	20000014 	.word	0x20000014
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fe fd2c 	bl	8001e3c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b11      	cmp	r3, #17
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e197      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80033f2:	f7ff fc43 	bl	8002c7c <LL_RCC_LSI_IsReady>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f1      	beq.n	80033e0 <HAL_RCC_OscConfig+0x3b0>
 80033fc:	e013      	b.n	8003426 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fe:	f7ff fc2d 	bl	8002c5c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003402:	f7fe fd1b 	bl	8001e3c <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340a:	f7fe fd17 	bl	8001e3c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b11      	cmp	r3, #17
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e182      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800341c:	f7ff fc2e 	bl	8002c7c <LL_RCC_LSI_IsReady>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f1      	bne.n	800340a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80d8 	beq.w	80035e4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003434:	f7ff fb44 	bl	8002ac0 <LL_PWR_IsEnabledBkUpAccess>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d113      	bne.n	8003466 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800343e:	f7ff fb25 	bl	8002a8c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003442:	f7fe fcfb 	bl	8001e3c <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344a:	f7fe fcf7 	bl	8001e3c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e162      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800345c:	f7ff fb30 	bl	8002ac0 <LL_PWR_IsEnabledBkUpAccess>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f1      	beq.n	800344a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d07b      	beq.n	8003566 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b85      	cmp	r3, #133	@ 0x85
 8003474:	d003      	beq.n	800347e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d109      	bne.n	8003492 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800347e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7fe fcd3 	bl	8001e3c <HAL_GetTick>
 8003496:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fe fcc5 	bl	8001e3c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e12e      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034c4:	f7ff fba9 	bl	8002c1a <LL_RCC_LSE_IsReady>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ef      	beq.n	80034ae <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b81      	cmp	r3, #129	@ 0x81
 80034d4:	d003      	beq.n	80034de <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b85      	cmp	r3, #133	@ 0x85
 80034dc:	d121      	bne.n	8003522 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fcad 	bl	8001e3c <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fe fc9f 	bl	8001e3c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e108      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ec      	beq.n	80034fa <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003520:	e060      	b.n	80035e4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe fc8b 	bl	8001e3c <HAL_GetTick>
 8003526:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003530:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fe fc7d 	bl	8001e3c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0e6      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ec      	bne.n	800353e <HAL_RCC_OscConfig+0x50e>
 8003564:	e03e      	b.n	80035e4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003566:	f7fe fc69 	bl	8001e3c <HAL_GetTick>
 800356a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003578:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fe fc5b 	bl	8001e3c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0c4      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ec      	bne.n	8003582 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a8:	f7fe fc48 	bl	8001e3c <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80035c2:	e00a      	b.n	80035da <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fe fc3a 	bl	8001e3c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0a3      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80035da:	f7ff fb1e 	bl	8002c1a <LL_RCC_LSE_IsReady>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ef      	bne.n	80035c4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8099 	beq.w	8003720 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d06c      	beq.n	80036ce <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d14b      	bne.n	8003694 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fc:	f7ff fc74 	bl	8002ee8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fe fc1c 	bl	8001e3c <HAL_GetTick>
 8003604:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe fc18 	bl	8001e3c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b0a      	cmp	r3, #10
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e083      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800361a:	f7ff fc73 	bl	8002f04 <LL_RCC_PLL_IsReady>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f1      	bne.n	8003608 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	4b40      	ldr	r3, [pc, #256]	@ (800372c <HAL_RCC_OscConfig+0x6fc>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800363c:	0212      	lsls	r2, r2, #8
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003644:	4311      	orrs	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003650:	430a      	orrs	r2, r1
 8003652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003656:	4313      	orrs	r3, r2
 8003658:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365a:	f7ff fc37 	bl	8002ecc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7fe fbe5 	bl	8001e3c <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7fe fbe1 	bl	8001e3c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b0a      	cmp	r3, #10
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e04c      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003688:	f7ff fc3c 	bl	8002f04 <LL_RCC_PLL_IsReady>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f1      	beq.n	8003676 <HAL_RCC_OscConfig+0x646>
 8003692:	e045      	b.n	8003720 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003694:	f7ff fc28 	bl	8002ee8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fbd0 	bl	8001e3c <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fbcc 	bl	8001e3c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b0a      	cmp	r3, #10
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e037      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80036b2:	f7ff fc27 	bl	8002f04 <LL_RCC_PLL_IsReady>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f1      	bne.n	80036a0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80036bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003730 <HAL_RCC_OscConfig+0x700>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	60cb      	str	r3, [r1, #12]
 80036cc:	e028      	b.n	8003720 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e023      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f003 0203 	and.w	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d115      	bne.n	800371c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d10e      	bne.n	800371c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	429a      	cmp	r2, r3
 800370c:	d106      	bne.n	800371c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	11c1808c 	.word	0x11c1808c
 8003730:	eefefffc 	.word	0xeefefffc

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e12c      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b98      	ldr	r3, [pc, #608]	@ (80039ac <HAL_RCC_ClockConfig+0x278>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d91b      	bls.n	800378e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b95      	ldr	r3, [pc, #596]	@ (80039ac <HAL_RCC_ClockConfig+0x278>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 0207 	bic.w	r2, r3, #7
 800375e:	4993      	ldr	r1, [pc, #588]	@ (80039ac <HAL_RCC_ClockConfig+0x278>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003766:	f7fe fb69 	bl	8001e3c <HAL_GetTick>
 800376a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376c:	e008      	b.n	8003780 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800376e:	f7fe fb65 	bl	8001e3c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e110      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003780:	4b8a      	ldr	r3, [pc, #552]	@ (80039ac <HAL_RCC_ClockConfig+0x278>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d1ef      	bne.n	800376e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fb02 	bl	8002da8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037a4:	f7fe fb4a 	bl	8001e3c <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037ac:	f7fe fb46 	bl	8001e3c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0f1      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037be:	f7ff fbdf 	bl	8002f80 <LL_RCC_IsActiveFlag_HPRE>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f1      	beq.n	80037ac <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d016      	beq.n	8003802 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff faf8 	bl	8002dce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037de:	f7fe fb2d 	bl	8001e3c <HAL_GetTick>
 80037e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037e6:	f7fe fb29 	bl	8001e3c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0d4      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037f8:	f7ff fbd3 	bl	8002fa2 <LL_RCC_IsActiveFlag_C2HPRE>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f1      	beq.n	80037e6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff faf0 	bl	8002df8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003818:	f7fe fb10 	bl	8001e3c <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003820:	f7fe fb0c 	bl	8001e3c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e0b7      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003832:	f7ff fbc8 	bl	8002fc6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f1      	beq.n	8003820 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fae9 	bl	8002e24 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003852:	f7fe faf3 	bl	8001e3c <HAL_GetTick>
 8003856:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800385a:	f7fe faef 	bl	8001e3c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e09a      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800386c:	f7ff fbbd 	bl	8002fea <LL_RCC_IsActiveFlag_PPRE1>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f1      	beq.n	800385a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d017      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fade 	bl	8002e4a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800388e:	f7fe fad5 	bl	8001e3c <HAL_GetTick>
 8003892:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003896:	f7fe fad1 	bl	8001e3c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e07c      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038a8:	f7ff fbb0 	bl	800300c <LL_RCC_IsActiveFlag_PPRE2>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f1      	beq.n	8003896 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d043      	beq.n	8003946 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d106      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80038c6:	f7ff f956 	bl	8002b76 <LL_RCC_HSE_IsReady>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d11e      	bne.n	800390e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e066      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d106      	bne.n	80038ea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80038dc:	f7ff fb12 	bl	8002f04 <LL_RCC_PLL_IsReady>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d113      	bne.n	800390e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e05b      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80038f2:	f7ff f9f0 	bl	8002cd6 <LL_RCC_MSI_IsReady>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d108      	bne.n	800390e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e050      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003900:	f7ff f966 	bl	8002bd0 <LL_RCC_HSI_IsReady>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e049      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fa2a 	bl	8002d6c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003918:	f7fe fa90 	bl	8001e3c <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fe fa8c 	bl	8001e3c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e035      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	f7ff fa2c 	bl	8002d92 <LL_RCC_GetSysClkSource>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	429a      	cmp	r2, r3
 8003944:	d1ec      	bne.n	8003920 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003946:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <HAL_RCC_ClockConfig+0x278>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d21b      	bcs.n	800398c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003954:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_RCC_ClockConfig+0x278>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 0207 	bic.w	r2, r3, #7
 800395c:	4913      	ldr	r1, [pc, #76]	@ (80039ac <HAL_RCC_ClockConfig+0x278>)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	4313      	orrs	r3, r2
 8003962:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003964:	f7fe fa6a 	bl	8001e3c <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	e008      	b.n	800397e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800396c:	f7fe fa66 	bl	8001e3c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e011      	b.n	80039a2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <HAL_RCC_ClockConfig+0x278>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d1ef      	bne.n	800396c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800398c:	f000 f8b4 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003990:	4603      	mov	r3, r0
 8003992:	4a07      	ldr	r2, [pc, #28]	@ (80039b0 <HAL_RCC_ClockConfig+0x27c>)
 8003994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003996:	4b07      	ldr	r3, [pc, #28]	@ (80039b4 <HAL_RCC_ClockConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fa02 	bl	8001da4 <HAL_InitTick>
 80039a0:	4603      	mov	r3, r0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	58004000 	.word	0x58004000
 80039b0:	20000004 	.word	0x20000004
 80039b4:	20000014 	.word	0x20000014

080039b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c6:	f7ff f9e4 	bl	8002d92 <LL_RCC_GetSysClkSource>
 80039ca:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039cc:	f7ff facd 	bl	8002f6a <LL_RCC_PLL_GetMainSource>
 80039d0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x2c>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d139      	bne.n	8003a52 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d136      	bne.n	8003a52 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80039e4:	f7ff f987 	bl	8002cf6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d115      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x62>
 80039ee:	f7ff f982 	bl	8002cf6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x4e>
 80039f8:	f7ff f98d 	bl	8002d16 <LL_RCC_MSI_GetRange>
 80039fc:	4603      	mov	r3, r0
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	e005      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x5a>
 8003a06:	f7ff f991 	bl	8002d2c <LL_RCC_MSI_GetRangeAfterStandby>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a36      	ldr	r2, [pc, #216]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x134>)
 8003a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a18:	e014      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x8c>
 8003a1a:	f7ff f96c 	bl	8002cf6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_GetSysClockFreq+0x7a>
 8003a24:	f7ff f977 	bl	8002d16 <LL_RCC_MSI_GetRange>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	e005      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x86>
 8003a32:	f7ff f97b 	bl	8002d2c <LL_RCC_MSI_GetRangeAfterStandby>
 8003a36:	4603      	mov	r3, r0
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x134>)
 8003a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a44:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d115      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a50:	e012      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d102      	bne.n	8003a5e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a58:	4b25      	ldr	r3, [pc, #148]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e00c      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d109      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a64:	f7ff f85a 	bl	8002b1c <LL_RCC_HSE_IsEnabledDiv2>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d102      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a6e:	4b20      	ldr	r3, [pc, #128]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e001      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a74:	4b1f      	ldr	r3, [pc, #124]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a76:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a78:	f7ff f98b 	bl	8002d92 <LL_RCC_GetSysClkSource>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d12f      	bne.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a82:	f7ff fa72 	bl	8002f6a <LL_RCC_PLL_GetMainSource>
 8003a86:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0xde>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d003      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0xe4>
 8003a94:	e00d      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a96:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a98:	60fb      	str	r3, [r7, #12]
        break;
 8003a9a:	e00d      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a9c:	f7ff f83e 	bl	8002b1c <LL_RCC_HSE_IsEnabledDiv2>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003aa6:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003aa8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003aaa:	e005      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003aac:	4b11      	ldr	r3, [pc, #68]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003aae:	60fb      	str	r3, [r7, #12]
        break;
 8003ab0:	e002      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	60fb      	str	r3, [r7, #12]
        break;
 8003ab6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003ab8:	f7ff fa35 	bl	8002f26 <LL_RCC_PLL_GetN>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	fb03 f402 	mul.w	r4, r3, r2
 8003ac4:	f7ff fa46 	bl	8002f54 <LL_RCC_PLL_GetDivider>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	3301      	adds	r3, #1
 8003ace:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ad2:	f7ff fa34 	bl	8002f3e <LL_RCC_PLL_GetR>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	0f5b      	lsrs	r3, r3, #29
 8003ada:	3301      	adds	r3, #1
 8003adc:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ae0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003ae2:	697b      	ldr	r3, [r7, #20]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}
 8003aec:	08009b10 	.word	0x08009b10
 8003af0:	00f42400 	.word	0x00f42400
 8003af4:	01e84800 	.word	0x01e84800

08003af8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b598      	push	{r3, r4, r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003afc:	f7ff ff5c 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003b00:	4604      	mov	r4, r0
 8003b02:	f7ff f9b5 	bl	8002e70 <LL_RCC_GetAHBPrescaler>
 8003b06:	4603      	mov	r3, r0
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	4a03      	ldr	r2, [pc, #12]	@ (8003b1c <HAL_RCC_GetHCLKFreq+0x24>)
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd98      	pop	{r3, r4, r7, pc}
 8003b1c:	08009ab0 	.word	0x08009ab0

08003b20 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b20:	b598      	push	{r3, r4, r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b24:	f7ff ffe8 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b28:	4604      	mov	r4, r0
 8003b2a:	f7ff f9b9 	bl	8002ea0 <LL_RCC_GetAPB1Prescaler>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	4a03      	ldr	r2, [pc, #12]	@ (8003b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd98      	pop	{r3, r4, r7, pc}
 8003b40:	08009af0 	.word	0x08009af0

08003b44 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b598      	push	{r3, r4, r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003b48:	f7ff ffd6 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	f7ff f9b2 	bl	8002eb6 <LL_RCC_GetAPB2Prescaler>
 8003b52:	4603      	mov	r3, r0
 8003b54:	0adb      	lsrs	r3, r3, #11
 8003b56:	4a03      	ldr	r2, [pc, #12]	@ (8003b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd98      	pop	{r3, r4, r7, pc}
 8003b64:	08009af0 	.word	0x08009af0

08003b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	4a10      	ldr	r2, [pc, #64]	@ (8003bbc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003b80:	f7ff f981 	bl	8002e86 <LL_RCC_GetAHB3Prescaler>
 8003b84:	4603      	mov	r3, r0
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4a09      	ldr	r2, [pc, #36]	@ (8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	0c9c      	lsrs	r4, r3, #18
 8003ba4:	f7fe ff80 	bl	8002aa8 <HAL_PWREx_GetVoltageRange>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4619      	mov	r1, r3
 8003bac:	4620      	mov	r0, r4
 8003bae:	f000 f80b 	bl	8003bc8 <RCC_SetFlashLatency>
 8003bb2:	4603      	mov	r3, r0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd90      	pop	{r4, r7, pc}
 8003bbc:	08009b10 	.word	0x08009b10
 8003bc0:	08009ab0 	.word	0x08009ab0
 8003bc4:	431bde83 	.word	0x431bde83

08003bc8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08e      	sub	sp, #56	@ 0x38
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8003cbc <RCC_SetFlashLatency+0xf4>)
 8003bd4:	f107 0320 	add.w	r3, r7, #32
 8003bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bdc:	6018      	str	r0, [r3, #0]
 8003bde:	3304      	adds	r3, #4
 8003be0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003be2:	4a37      	ldr	r2, [pc, #220]	@ (8003cc0 <RCC_SetFlashLatency+0xf8>)
 8003be4:	f107 0318 	add.w	r3, r7, #24
 8003be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bec:	6018      	str	r0, [r3, #0]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003bf2:	4a34      	ldr	r2, [pc, #208]	@ (8003cc4 <RCC_SetFlashLatency+0xfc>)
 8003bf4:	f107 030c 	add.w	r3, r7, #12
 8003bf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bfe:	2300      	movs	r3, #0
 8003c00:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c08:	d11b      	bne.n	8003c42 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c0e:	e014      	b.n	8003c3a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	3338      	adds	r3, #56	@ 0x38
 8003c16:	443b      	add	r3, r7
 8003c18:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d807      	bhi.n	8003c34 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3338      	adds	r3, #56	@ 0x38
 8003c2a:	443b      	add	r3, r7
 8003c2c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c32:	e021      	b.n	8003c78 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	3301      	adds	r3, #1
 8003c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d9e7      	bls.n	8003c10 <RCC_SetFlashLatency+0x48>
 8003c40:	e01a      	b.n	8003c78 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c46:	e014      	b.n	8003c72 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	3338      	adds	r3, #56	@ 0x38
 8003c4e:	443b      	add	r3, r7
 8003c50:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003c54:	461a      	mov	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d807      	bhi.n	8003c6c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	3338      	adds	r3, #56	@ 0x38
 8003c62:	443b      	add	r3, r7
 8003c64:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c6a:	e005      	b.n	8003c78 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6e:	3301      	adds	r3, #1
 8003c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d9e7      	bls.n	8003c48 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c78:	4b13      	ldr	r3, [pc, #76]	@ (8003cc8 <RCC_SetFlashLatency+0x100>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 0207 	bic.w	r2, r3, #7
 8003c80:	4911      	ldr	r1, [pc, #68]	@ (8003cc8 <RCC_SetFlashLatency+0x100>)
 8003c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c88:	f7fe f8d8 	bl	8001e3c <HAL_GetTick>
 8003c8c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c8e:	e008      	b.n	8003ca2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c90:	f7fe f8d4 	bl	8001e3c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e007      	b.n	8003cb2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ca2:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <RCC_SetFlashLatency+0x100>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1ef      	bne.n	8003c90 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3738      	adds	r7, #56	@ 0x38
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	08009a94 	.word	0x08009a94
 8003cc0:	08009a9c 	.word	0x08009a9c
 8003cc4:	08009aa4 	.word	0x08009aa4
 8003cc8:	58004000 	.word	0x58004000

08003ccc <LL_RCC_LSE_IsReady>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d101      	bne.n	8003ce4 <LL_RCC_LSE_IsReady+0x18>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <LL_RCC_LSE_IsReady+0x1a>
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <LL_RCC_SetUSARTClockSource>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	43db      	mvns	r3, r3
 8003d04:	401a      	ands	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <LL_RCC_SetI2SClockSource>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_SetLPUARTClockSource>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <LL_RCC_SetI2CClockSource>:
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	401a      	ands	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <LL_RCC_SetLPTIMClockSource>:
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	041b      	lsls	r3, r3, #16
 8003dc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_SetRNGClockSource>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dec:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003df0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <LL_RCC_SetADCClockSource>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <LL_RCC_SetRTCClockSource>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_GetRTCClockSource>:
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <LL_RCC_ForceBackupDomainReset>:
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e92:	b480      	push	{r7}
 8003e94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d058      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003ed4:	f7fe fdda 	bl	8002a8c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ed8:	f7fd ffb0 	bl	8001e3c <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ede:	e009      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fd ffac 	bl	8001e3c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d902      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ef2:	e006      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ef4:	4b7b      	ldr	r3, [pc, #492]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f00:	d1ee      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d13c      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003f08:	f7ff ffa7 	bl	8003e5a <LL_RCC_GetRTCClockSource>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d00f      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f22:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f24:	f7ff ffa5 	bl	8003e72 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f28:	f7ff ffb3 	bl	8003e92 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d014      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd ff7c 	bl	8001e3c <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f46:	e00b      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f48:	f7fd ff78 	bl	8001e3c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d902      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f5e:	e004      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f60:	f7ff feb4 	bl	8003ccc <LL_RCC_LSE_IsReady>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d1ee      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff5b 	bl	8003e30 <LL_RCC_SetRTCClockSource>
 8003f7a:	e004      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	74bb      	strb	r3, [r7, #18]
 8003f80:	e001      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fea9 	bl	8003cee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fe9e 	bl	8003cee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fec0 	bl	8003d48 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fee6 	bl	8003daa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fedb 	bl	8003daa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fed0 	bl	8003daa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d004      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fea9 	bl	8003d72 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fe9e 	bl	8003d72 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fe93 	bl	8003d72 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	d011      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fe5e 	bl	8003d1e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406a:	d107      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800406c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fea5 	bl	8003ddc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	2b00      	cmp	r3, #0
 8004098:	d107      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040a8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d011      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fea3 	bl	8003e06 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040c8:	d107      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80040da:	7cbb      	ldrb	r3, [r7, #18]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	58000400 	.word	0x58000400

080040e8 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040f8:	4904      	ldr	r1, [pc, #16]	@ (800410c <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	608b      	str	r3, [r1, #8]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	58000400 	.word	0x58000400

08004110 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411a:	4a04      	ldr	r2, [pc, #16]	@ (800412c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800411c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	58000400 	.word	0x58000400

08004130 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004134:	4b05      	ldr	r3, [pc, #20]	@ (800414c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	4a04      	ldr	r2, [pc, #16]	@ (800414c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800413c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	58000400 	.word	0x58000400

08004150 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004154:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800415a:	619a      	str	r2, [r3, #24]
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	58000400 	.word	0x58000400

08004168 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d101      	bne.n	800417c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	58000400 	.word	0x58000400

0800418c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004190:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b04      	cmp	r3, #4
 800419a:	d101      	bne.n	80041a0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	58000400 	.word	0x58000400

080041b0 <LL_RCC_RF_DisableReset>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <LL_RCC_IsRFUnderReset>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80041d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e4:	d101      	bne.n	80041ea <LL_RCC_IsRFUnderReset+0x1a>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <LL_RCC_IsRFUnderReset+0x1c>
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80041fc:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <LL_EXTI_EnableIT_32_63+0x24>)
 80041fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004202:	4905      	ldr	r1, [pc, #20]	@ (8004218 <LL_EXTI_EnableIT_32_63+0x24>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	58000800 	.word	0x58000800

0800421c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
    return status;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	e052      	b.n	80042d8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	799b      	ldrb	r3, [r3, #6]
 800423a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800423c:	7bbb      	ldrb	r3, [r7, #14]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_SUBGHZ_Init+0x2c>
 8004242:	7bbb      	ldrb	r3, [r7, #14]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d109      	bne.n	800425c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd f974 	bl	800153c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004254:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004258:	f7ff ffcc 	bl	80041f4 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800425c:	7bbb      	ldrb	r3, [r7, #14]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d126      	bne.n	80042b0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004268:	f7ff ffa2 	bl	80041b0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800426c:	4b1c      	ldr	r3, [pc, #112]	@ (80042e0 <HAL_SUBGHZ_Init+0xc4>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	0cdb      	lsrs	r3, r3, #19
 800427a:	2264      	movs	r2, #100	@ 0x64
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	609a      	str	r2, [r3, #8]
        break;
 8004292:	e007      	b.n	80042a4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	3b01      	subs	r3, #1
 8004298:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800429a:	f7ff ff99 	bl	80041d0 <LL_RCC_IsRFUnderReset>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ee      	bne.n	8004282 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80042a4:	f7ff ff34 	bl	8004110 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80042a8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80042ac:	f7ff ff1c 	bl	80040e8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80042b0:	f7ff ff4e 	bl	8004150 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fa64 	bl	800478c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	719a      	strb	r2, [r3, #6]

  return status;
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000004 	.word	0x20000004

080042e4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	461a      	mov	r2, r3
 80042f0:	460b      	mov	r3, r1
 80042f2:	817b      	strh	r3, [r7, #10]
 80042f4:	4613      	mov	r3, r2
 80042f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	799b      	ldrb	r3, [r3, #6]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d14a      	bne.n	8004398 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	795b      	ldrb	r3, [r3, #5]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800430a:	2302      	movs	r3, #2
 800430c:	e045      	b.n	800439a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2202      	movs	r2, #2
 8004318:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fb04 	bl	8004928 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004320:	f7ff ff06 	bl	8004130 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004324:	210d      	movs	r1, #13
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fa50 	bl	80047cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	4619      	mov	r1, r3
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fa48 	bl	80047cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800433c:	897b      	ldrh	r3, [r7, #10]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	4619      	mov	r1, r3
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fa42 	bl	80047cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004348:	2300      	movs	r3, #0
 800434a:	82bb      	strh	r3, [r7, #20]
 800434c:	e00a      	b.n	8004364 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800434e:	8abb      	ldrh	r3, [r7, #20]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa37 	bl	80047cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800435e:	8abb      	ldrh	r3, [r7, #20]
 8004360:	3301      	adds	r3, #1
 8004362:	82bb      	strh	r3, [r7, #20]
 8004364:	8aba      	ldrh	r2, [r7, #20]
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	d3f0      	bcc.n	800434e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800436c:	f7ff fed0 	bl	8004110 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fafd 	bl	8004970 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
 8004382:	e001      	b.n	8004388 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	715a      	strb	r2, [r3, #5]

    return status;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	e000      	b.n	800439a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b088      	sub	sp, #32
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	461a      	mov	r2, r3
 80043ae:	460b      	mov	r3, r1
 80043b0:	817b      	strh	r3, [r7, #10]
 80043b2:	4613      	mov	r3, r2
 80043b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	799b      	ldrb	r3, [r3, #6]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d14a      	bne.n	800445a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	795b      	ldrb	r3, [r3, #5]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e045      	b.n	800445c <HAL_SUBGHZ_ReadRegisters+0xba>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 faa6 	bl	8004928 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80043dc:	f7ff fea8 	bl	8004130 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80043e0:	211d      	movs	r1, #29
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f9f2 	bl	80047cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	4619      	mov	r1, r3
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f9ea 	bl	80047cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	4619      	mov	r1, r3
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f9e4 	bl	80047cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004404:	2100      	movs	r1, #0
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f9e0 	bl	80047cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800440c:	2300      	movs	r3, #0
 800440e:	82fb      	strh	r3, [r7, #22]
 8004410:	e009      	b.n	8004426 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004412:	69b9      	ldr	r1, [r7, #24]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fa2f 	bl	8004878 <SUBGHZSPI_Receive>
      pData++;
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	3301      	adds	r3, #1
 800441e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004420:	8afb      	ldrh	r3, [r7, #22]
 8004422:	3301      	adds	r3, #1
 8004424:	82fb      	strh	r3, [r7, #22]
 8004426:	8afa      	ldrh	r2, [r7, #22]
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	429a      	cmp	r2, r3
 800442c:	d3f1      	bcc.n	8004412 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800442e:	f7ff fe6f 	bl	8004110 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fa9c 	bl	8004970 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e001      	b.n	800444a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	715a      	strb	r2, [r3, #5]

    return status;
 8004456:	7ffb      	ldrb	r3, [r7, #31]
 8004458:	e000      	b.n	800445c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	461a      	mov	r2, r3
 8004470:	460b      	mov	r3, r1
 8004472:	72fb      	strb	r3, [r7, #11]
 8004474:	4613      	mov	r3, r2
 8004476:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	799b      	ldrb	r3, [r3, #6]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d14a      	bne.n	8004518 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	795b      	ldrb	r3, [r3, #5]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800448a:	2302      	movs	r3, #2
 800448c:	e045      	b.n	800451a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fa47 	bl	8004928 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800449a:	7afb      	ldrb	r3, [r7, #11]
 800449c:	2b84      	cmp	r3, #132	@ 0x84
 800449e:	d002      	beq.n	80044a6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80044a0:	7afb      	ldrb	r3, [r7, #11]
 80044a2:	2b94      	cmp	r3, #148	@ 0x94
 80044a4:	d103      	bne.n	80044ae <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	711a      	strb	r2, [r3, #4]
 80044ac:	e002      	b.n	80044b4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044b4:	f7ff fe3c 	bl	8004130 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	4619      	mov	r1, r3
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f985 	bl	80047cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80044c2:	2300      	movs	r3, #0
 80044c4:	82bb      	strh	r3, [r7, #20]
 80044c6:	e00a      	b.n	80044de <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80044c8:	8abb      	ldrh	r3, [r7, #20]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	4619      	mov	r1, r3
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f97a 	bl	80047cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80044d8:	8abb      	ldrh	r3, [r7, #20]
 80044da:	3301      	adds	r3, #1
 80044dc:	82bb      	strh	r3, [r7, #20]
 80044de:	8aba      	ldrh	r2, [r7, #20]
 80044e0:	893b      	ldrh	r3, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d3f0      	bcc.n	80044c8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044e6:	f7ff fe13 	bl	8004110 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80044ea:	7afb      	ldrb	r3, [r7, #11]
 80044ec:	2b84      	cmp	r3, #132	@ 0x84
 80044ee:	d002      	beq.n	80044f6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fa3d 	bl	8004970 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	75fb      	strb	r3, [r7, #23]
 8004502:	e001      	b.n	8004508 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	715a      	strb	r2, [r3, #5]

    return status;
 8004514:	7dfb      	ldrb	r3, [r7, #23]
 8004516:	e000      	b.n	800451a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b088      	sub	sp, #32
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	461a      	mov	r2, r3
 800452e:	460b      	mov	r3, r1
 8004530:	72fb      	strb	r3, [r7, #11]
 8004532:	4613      	mov	r3, r2
 8004534:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	799b      	ldrb	r3, [r3, #6]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	d13d      	bne.n	80045c0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	795b      	ldrb	r3, [r3, #5]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800454c:	2302      	movs	r3, #2
 800454e:	e038      	b.n	80045c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f9e6 	bl	8004928 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800455c:	f7ff fde8 	bl	8004130 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	4619      	mov	r1, r3
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f931 	bl	80047cc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800456a:	2100      	movs	r1, #0
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f92d 	bl	80047cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004572:	2300      	movs	r3, #0
 8004574:	82fb      	strh	r3, [r7, #22]
 8004576:	e009      	b.n	800458c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f97c 	bl	8004878 <SUBGHZSPI_Receive>
      pData++;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	3301      	adds	r3, #1
 8004584:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004586:	8afb      	ldrh	r3, [r7, #22]
 8004588:	3301      	adds	r3, #1
 800458a:	82fb      	strh	r3, [r7, #22]
 800458c:	8afa      	ldrh	r2, [r7, #22]
 800458e:	893b      	ldrh	r3, [r7, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	d3f1      	bcc.n	8004578 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004594:	f7ff fdbc 	bl	8004110 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f9e9 	bl	8004970 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	77fb      	strb	r3, [r7, #31]
 80045aa:	e001      	b.n	80045b0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	715a      	strb	r2, [r3, #5]

    return status;
 80045bc:	7ffb      	ldrb	r3, [r7, #31]
 80045be:	e000      	b.n	80045c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045c0:	2302      	movs	r3, #2
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	461a      	mov	r2, r3
 80045d6:	460b      	mov	r3, r1
 80045d8:	72fb      	strb	r3, [r7, #11]
 80045da:	4613      	mov	r3, r2
 80045dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	799b      	ldrb	r3, [r3, #6]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d13e      	bne.n	8004666 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	795b      	ldrb	r3, [r3, #5]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e039      	b.n	8004668 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f994 	bl	8004928 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004600:	f7ff fd96 	bl	8004130 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004604:	210e      	movs	r1, #14
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8e0 	bl	80047cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	4619      	mov	r1, r3
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f8db 	bl	80047cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004616:	2300      	movs	r3, #0
 8004618:	82bb      	strh	r3, [r7, #20]
 800461a:	e00a      	b.n	8004632 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800461c:	8abb      	ldrh	r3, [r7, #20]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4413      	add	r3, r2
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	4619      	mov	r1, r3
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8d0 	bl	80047cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800462c:	8abb      	ldrh	r3, [r7, #20]
 800462e:	3301      	adds	r3, #1
 8004630:	82bb      	strh	r3, [r7, #20]
 8004632:	8aba      	ldrh	r2, [r7, #20]
 8004634:	893b      	ldrh	r3, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	d3f0      	bcc.n	800461c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800463a:	f7ff fd69 	bl	8004110 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f996 	bl	8004970 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	75fb      	strb	r3, [r7, #23]
 8004650:	e001      	b.n	8004656 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	715a      	strb	r2, [r3, #5]

    return status;
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	e000      	b.n	8004668 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004678:	2300      	movs	r3, #0
 800467a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800467c:	f107 020c 	add.w	r2, r7, #12
 8004680:	2302      	movs	r3, #2
 8004682:	2112      	movs	r1, #18
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ff4c 	bl	8004522 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800468a:	7b3b      	ldrb	r3, [r7, #12]
 800468c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800468e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	b21a      	sxth	r2, r3
 8004696:	7b7b      	ldrb	r3, [r7, #13]
 8004698:	b21b      	sxth	r3, r3
 800469a:	4313      	orrs	r3, r2
 800469c:	b21b      	sxth	r3, r3
 800469e:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80046a0:	f107 020c 	add.w	r2, r7, #12
 80046a4:	2302      	movs	r3, #2
 80046a6:	2102      	movs	r1, #2
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff fedb 	bl	8004464 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80046ae:	89fb      	ldrh	r3, [r7, #14]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f002 fb79 	bl	8006db0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80046be:	89fb      	ldrh	r3, [r7, #14]
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 80046ca:	89fb      	ldrh	r3, [r7, #14]
 80046cc:	099b      	lsrs	r3, r3, #6
 80046ce:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f002 fb78 	bl	8006dcc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80046dc:	89fb      	ldrh	r3, [r7, #14]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f002 fbc7 	bl	8006e7c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80046ee:	89fb      	ldrh	r3, [r7, #14]
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f002 fbcc 	bl	8006e98 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004700:	89fb      	ldrh	r3, [r7, #14]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f002 fbd1 	bl	8006eb4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004712:	89fb      	ldrh	r3, [r7, #14]
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f002 fb9e 	bl	8006e60 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004724:	89fb      	ldrh	r3, [r7, #14]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f002 fb59 	bl	8006de8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004736:	89fb      	ldrh	r3, [r7, #14]
 8004738:	09db      	lsrs	r3, r3, #7
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00e      	beq.n	8004760 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004742:	89fb      	ldrh	r3, [r7, #14]
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d004      	beq.n	8004758 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800474e:	2101      	movs	r1, #1
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f002 fb57 	bl	8006e04 <HAL_SUBGHZ_CADStatusCallback>
 8004756:	e003      	b.n	8004760 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004758:	2100      	movs	r1, #0
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f002 fb52 	bl	8006e04 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004760:	89fb      	ldrh	r3, [r7, #14]
 8004762:	0a5b      	lsrs	r3, r3, #9
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f002 fb67 	bl	8006e40 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004772:	89fb      	ldrh	r3, [r7, #14]
 8004774:	0b9b      	lsrs	r3, r3, #14
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f002 fba6 	bl	8006ed0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004794:	4b0c      	ldr	r3, [pc, #48]	@ (80047c8 <SUBGHZSPI_Init+0x3c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0b      	ldr	r2, [pc, #44]	@ (80047c8 <SUBGHZSPI_Init+0x3c>)
 800479a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800479e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80047a0:	4a09      	ldr	r2, [pc, #36]	@ (80047c8 <SUBGHZSPI_Init+0x3c>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80047a8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80047aa:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <SUBGHZSPI_Init+0x3c>)
 80047ac:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80047b0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80047b2:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <SUBGHZSPI_Init+0x3c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a04      	ldr	r2, [pc, #16]	@ (80047c8 <SUBGHZSPI_Init+0x3c>)
 80047b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047bc:	6013      	str	r3, [r2, #0]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	58010000 	.word	0x58010000

080047cc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80047dc:	4b23      	ldr	r3, [pc, #140]	@ (800486c <SUBGHZSPI_Transmit+0xa0>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	0cdb      	lsrs	r3, r3, #19
 80047ea:	2264      	movs	r2, #100	@ 0x64
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	609a      	str	r2, [r3, #8]
      break;
 8004802:	e008      	b.n	8004816 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3b01      	subs	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800480a:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <SUBGHZSPI_Transmit+0xa4>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	d1ed      	bne.n	80047f2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004816:	4b17      	ldr	r3, [pc, #92]	@ (8004874 <SUBGHZSPI_Transmit+0xa8>)
 8004818:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004820:	4b12      	ldr	r3, [pc, #72]	@ (800486c <SUBGHZSPI_Transmit+0xa0>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	0cdb      	lsrs	r3, r3, #19
 800482e:	2264      	movs	r2, #100	@ 0x64
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	609a      	str	r2, [r3, #8]
      break;
 8004846:	e008      	b.n	800485a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3b01      	subs	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800484e:	4b08      	ldr	r3, [pc, #32]	@ (8004870 <SUBGHZSPI_Transmit+0xa4>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b01      	cmp	r3, #1
 8004858:	d1ed      	bne.n	8004836 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800485a:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <SUBGHZSPI_Transmit+0xa4>)
 800485c:	68db      	ldr	r3, [r3, #12]

  return status;
 800485e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004860:	4618      	mov	r0, r3
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000004 	.word	0x20000004
 8004870:	58010000 	.word	0x58010000
 8004874:	5801000c 	.word	0x5801000c

08004878 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004886:	4b25      	ldr	r3, [pc, #148]	@ (800491c <SUBGHZSPI_Receive+0xa4>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	0cdb      	lsrs	r3, r3, #19
 8004894:	2264      	movs	r2, #100	@ 0x64
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	609a      	str	r2, [r3, #8]
      break;
 80048ac:	e008      	b.n	80048c0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80048b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <SUBGHZSPI_Receive+0xa8>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d1ed      	bne.n	800489c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80048c0:	4b18      	ldr	r3, [pc, #96]	@ (8004924 <SUBGHZSPI_Receive+0xac>)
 80048c2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	22ff      	movs	r2, #255	@ 0xff
 80048c8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048ca:	4b14      	ldr	r3, [pc, #80]	@ (800491c <SUBGHZSPI_Receive+0xa4>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	0cdb      	lsrs	r3, r3, #19
 80048d8:	2264      	movs	r2, #100	@ 0x64
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d105      	bne.n	80048f2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	609a      	str	r2, [r3, #8]
      break;
 80048f0:	e008      	b.n	8004904 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <SUBGHZSPI_Receive+0xa8>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d1ed      	bne.n	80048e0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004904:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <SUBGHZSPI_Receive+0xa8>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	b2da      	uxtb	r2, r3
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	701a      	strb	r2, [r3, #0]

  return status;
 800490e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004910:	4618      	mov	r0, r3
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000004 	.word	0x20000004
 8004920:	58010000 	.word	0x58010000
 8004924:	5801000c 	.word	0x5801000c

08004928 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	791b      	ldrb	r3, [r3, #4]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d111      	bne.n	800495c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004938:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <SUBGHZ_CheckDeviceReady+0x44>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	4413      	add	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004948:	f7ff fbf2 	bl	8004130 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3b01      	subs	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f9      	bne.n	800494c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004958:	f7ff fbda 	bl	8004110 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f807 	bl	8004970 <SUBGHZ_WaitOnBusy>
 8004962:	4603      	mov	r3, r0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000004 	.word	0x20000004

08004970 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800497c:	4b12      	ldr	r3, [pc, #72]	@ (80049c8 <SUBGHZ_WaitOnBusy+0x58>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	0d1b      	lsrs	r3, r3, #20
 800498a:	2264      	movs	r2, #100	@ 0x64
 800498c:	fb02 f303 	mul.w	r3, r2, r3
 8004990:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004992:	f7ff fbfb 	bl	800418c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004996:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d105      	bne.n	80049aa <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	609a      	str	r2, [r3, #8]
      break;
 80049a8:	e009      	b.n	80049be <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80049b0:	f7ff fbda 	bl	8004168 <LL_PWR_IsActiveFlag_RFBUSYS>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d0e9      	beq.n	8004992 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80049be:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000004 	.word	0x20000004

080049cc <LL_RCC_GetUSARTClockSource>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80049d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	401a      	ands	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	4313      	orrs	r3, r2
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <LL_RCC_GetLPUARTClockSource>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4013      	ands	r3, r2
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e042      	b.n	8004aa6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc ff20 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	@ 0x24
 8004a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fec3 	bl	80057e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fc4c 	bl	80052fc <UART_SetConfig>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e01b      	b.n	8004aa6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 ff41 	bl	8005926 <UART_CheckIdleState>
 8004aa4:	4603      	mov	r3, r0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b08a      	sub	sp, #40	@ 0x28
 8004ab2:	af02      	add	r7, sp, #8
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d173      	bne.n	8004bb0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_UART_Transmit+0x26>
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e06c      	b.n	8004bb2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2221      	movs	r2, #33	@ 0x21
 8004ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ae8:	f7fd f9a8 	bl	8001e3c <HAL_GetTick>
 8004aec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	88fa      	ldrh	r2, [r7, #6]
 8004afa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b06:	d108      	bne.n	8004b1a <HAL_UART_Transmit+0x6c>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	e003      	b.n	8004b22 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b22:	e02c      	b.n	8004b7e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2180      	movs	r1, #128	@ 0x80
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 ff47 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e039      	b.n	8004bb2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	3302      	adds	r3, #2
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	e007      	b.n	8004b6c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1cc      	bne.n	8004b24 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2140      	movs	r1, #64	@ 0x40
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 ff14 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e006      	b.n	8004bb2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	@ 0x28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d137      	bne.n	8004c44 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_UART_Receive_DMA+0x24>
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e030      	b.n	8004c46 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <HAL_UART_Receive_DMA+0x94>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d01f      	beq.n	8004c34 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d018      	beq.n	8004c34 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	623b      	str	r3, [r7, #32]
 8004c22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	69f9      	ldr	r1, [r7, #28]
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e6      	bne.n	8004c02 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	461a      	mov	r2, r3
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 ff90 	bl	8005b60 <UART_Start_Receive_DMA>
 8004c40:	4603      	mov	r3, r0
 8004c42:	e000      	b.n	8004c46 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3728      	adds	r7, #40	@ 0x28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40008000 	.word	0x40008000

08004c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b0ba      	sub	sp, #232	@ 0xe8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004c7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004c82:	4013      	ands	r3, r2
 8004c84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d009      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 82e3 	beq.w	8005284 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
      }
      return;
 8004cc6:	e2dd      	b.n	8005284 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8123 	beq.w	8004f18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004cd6:	4b8d      	ldr	r3, [pc, #564]	@ (8004f0c <HAL_UART_IRQHandler+0x2b8>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004cde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8004f10 <HAL_UART_IRQHandler+0x2bc>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8116 	beq.w	8004f18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d011      	beq.n	8004d1c <HAL_UART_IRQHandler+0xc8>
 8004cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d011      	beq.n	8004d4c <HAL_UART_IRQHandler+0xf8>
 8004d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	f043 0204 	orr.w	r2, r3, #4
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d011      	beq.n	8004d7c <HAL_UART_IRQHandler+0x128>
 8004d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00b      	beq.n	8004d7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2204      	movs	r2, #4
 8004d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d72:	f043 0202 	orr.w	r2, r3, #2
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d017      	beq.n	8004db8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d98:	4b5c      	ldr	r3, [pc, #368]	@ (8004f0c <HAL_UART_IRQHandler+0x2b8>)
 8004d9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00b      	beq.n	8004db8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2208      	movs	r2, #8
 8004da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dae:	f043 0208 	orr.w	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d012      	beq.n	8004dea <HAL_UART_IRQHandler+0x196>
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8249 	beq.w	8005288 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d013      	beq.n	8004e2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3e:	2b40      	cmp	r3, #64	@ 0x40
 8004e40:	d005      	beq.n	8004e4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d054      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 ff6c 	bl	8005d2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5e:	2b40      	cmp	r3, #64	@ 0x40
 8004e60:	d146      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1d9      	bne.n	8004e62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d017      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ebe:	4a15      	ldr	r2, [pc, #84]	@ (8004f14 <HAL_UART_IRQHandler+0x2c0>)
 8004ec0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fd fa51 	bl	8002370 <HAL_DMA_Abort_IT>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d019      	beq.n	8004f08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee6:	e00f      	b.n	8004f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f9f2 	bl	80052d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eee:	e00b      	b.n	8004f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f9ee 	bl	80052d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef6:	e007      	b.n	8004f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f9ea 	bl	80052d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004f06:	e1bf      	b.n	8005288 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	bf00      	nop
    return;
 8004f0a:	e1bd      	b.n	8005288 <HAL_UART_IRQHandler+0x634>
 8004f0c:	10000001 	.word	0x10000001
 8004f10:	04000120 	.word	0x04000120
 8004f14:	08005fe1 	.word	0x08005fe1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	f040 8153 	bne.w	80051c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 814c 	beq.w	80051c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8145 	beq.w	80051c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2210      	movs	r2, #16
 8004f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f50:	2b40      	cmp	r3, #64	@ 0x40
 8004f52:	f040 80bb 	bne.w	80050cc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 818f 	beq.w	800528c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	f080 8187 	bcs.w	800528c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 8087 	bne.w	80050aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004fc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004fca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1da      	bne.n	8004f9c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3308      	adds	r3, #8
 8004fec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ff6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800500a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800500e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005012:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800501c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e1      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3308      	adds	r3, #8
 8005042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005046:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005048:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800504c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e3      	bne.n	8005022 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005078:	f023 0310 	bic.w	r3, r3, #16
 800507c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800508a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800508c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005090:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e4      	bne.n	8005068 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fd f905 	bl	80022b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80050bc:	b29b      	uxth	r3, r3
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f90d 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050ca:	e0df      	b.n	800528c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80d1 	beq.w	8005290 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80050ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80cc 	beq.w	8005290 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800511a:	647b      	str	r3, [r7, #68]	@ 0x44
 800511c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005120:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e4      	bne.n	80050f8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3308      	adds	r3, #8
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	623b      	str	r3, [r7, #32]
   return(result);
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3308      	adds	r3, #8
 8005152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005156:	633a      	str	r2, [r7, #48]	@ 0x30
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800515c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e1      	bne.n	800512e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	60fb      	str	r3, [r7, #12]
   return(result);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0310 	bic.w	r3, r3, #16
 8005192:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	69b9      	ldr	r1, [r7, #24]
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	617b      	str	r3, [r7, #20]
   return(result);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e4      	bne.n	800517e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f88f 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051c6:	e063      	b.n	8005290 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00e      	beq.n	80051f2 <HAL_UART_IRQHandler+0x59e>
 80051d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80051e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 ff39 	bl	8006062 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051f0:	e051      	b.n	8005296 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d014      	beq.n	8005228 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d105      	bne.n	8005216 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800520a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800520e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800521a:	2b00      	cmp	r3, #0
 800521c:	d03a      	beq.n	8005294 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
    }
    return;
 8005226:	e035      	b.n	8005294 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d009      	beq.n	8005248 <HAL_UART_IRQHandler+0x5f4>
 8005234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fee3 	bl	800600c <UART_EndTransmit_IT>
    return;
 8005246:	e026      	b.n	8005296 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800524c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_UART_IRQHandler+0x614>
 8005254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005258:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 ff10 	bl	8006086 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005266:	e016      	b.n	8005296 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d010      	beq.n	8005296 <HAL_UART_IRQHandler+0x642>
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005278:	2b00      	cmp	r3, #0
 800527a:	da0c      	bge.n	8005296 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fef9 	bl	8006074 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005282:	e008      	b.n	8005296 <HAL_UART_IRQHandler+0x642>
      return;
 8005284:	bf00      	nop
 8005286:	e006      	b.n	8005296 <HAL_UART_IRQHandler+0x642>
    return;
 8005288:	bf00      	nop
 800528a:	e004      	b.n	8005296 <HAL_UART_IRQHandler+0x642>
      return;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <HAL_UART_IRQHandler+0x642>
      return;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <HAL_UART_IRQHandler+0x642>
    return;
 8005294:	bf00      	nop
  }
}
 8005296:	37e8      	adds	r7, #232	@ 0xe8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr
	...

080052fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005300:	b08c      	sub	sp, #48	@ 0x30
 8005302:	af00      	add	r7, sp, #0
 8005304:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	431a      	orrs	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	431a      	orrs	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	4313      	orrs	r3, r2
 8005322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b94      	ldr	r3, [pc, #592]	@ (800557c <UART_SetConfig+0x280>)
 800532c:	4013      	ands	r3, r2
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005334:	430b      	orrs	r3, r1
 8005336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a89      	ldr	r2, [pc, #548]	@ (8005580 <UART_SetConfig+0x284>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005364:	4313      	orrs	r3, r2
 8005366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005372:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800537c:	430b      	orrs	r3, r1
 800537e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	f023 010f 	bic.w	r1, r3, #15
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a7a      	ldr	r2, [pc, #488]	@ (8005584 <UART_SetConfig+0x288>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d127      	bne.n	80053f0 <UART_SetConfig+0xf4>
 80053a0:	2003      	movs	r0, #3
 80053a2:	f7ff fb13 	bl	80049cc <LL_RCC_GetUSARTClockSource>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d81b      	bhi.n	80053e8 <UART_SetConfig+0xec>
 80053b0:	a201      	add	r2, pc, #4	@ (adr r2, 80053b8 <UART_SetConfig+0xbc>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080053d9 	.word	0x080053d9
 80053c0:	080053d1 	.word	0x080053d1
 80053c4:	080053e1 	.word	0x080053e1
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ce:	e080      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80053d0:	2302      	movs	r3, #2
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d6:	e07c      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80053d8:	2304      	movs	r3, #4
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053de:	e078      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80053e0:	2308      	movs	r3, #8
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e6:	e074      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ee:	e070      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a64      	ldr	r2, [pc, #400]	@ (8005588 <UART_SetConfig+0x28c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d138      	bne.n	800546c <UART_SetConfig+0x170>
 80053fa:	200c      	movs	r0, #12
 80053fc:	f7ff fae6 	bl	80049cc <LL_RCC_GetUSARTClockSource>
 8005400:	4603      	mov	r3, r0
 8005402:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005406:	2b0c      	cmp	r3, #12
 8005408:	d82c      	bhi.n	8005464 <UART_SetConfig+0x168>
 800540a:	a201      	add	r2, pc, #4	@ (adr r2, 8005410 <UART_SetConfig+0x114>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	08005445 	.word	0x08005445
 8005414:	08005465 	.word	0x08005465
 8005418:	08005465 	.word	0x08005465
 800541c:	08005465 	.word	0x08005465
 8005420:	08005455 	.word	0x08005455
 8005424:	08005465 	.word	0x08005465
 8005428:	08005465 	.word	0x08005465
 800542c:	08005465 	.word	0x08005465
 8005430:	0800544d 	.word	0x0800544d
 8005434:	08005465 	.word	0x08005465
 8005438:	08005465 	.word	0x08005465
 800543c:	08005465 	.word	0x08005465
 8005440:	0800545d 	.word	0x0800545d
 8005444:	2300      	movs	r3, #0
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544a:	e042      	b.n	80054d2 <UART_SetConfig+0x1d6>
 800544c:	2302      	movs	r3, #2
 800544e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005452:	e03e      	b.n	80054d2 <UART_SetConfig+0x1d6>
 8005454:	2304      	movs	r3, #4
 8005456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545a:	e03a      	b.n	80054d2 <UART_SetConfig+0x1d6>
 800545c:	2308      	movs	r3, #8
 800545e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005462:	e036      	b.n	80054d2 <UART_SetConfig+0x1d6>
 8005464:	2310      	movs	r3, #16
 8005466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546a:	e032      	b.n	80054d2 <UART_SetConfig+0x1d6>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a43      	ldr	r2, [pc, #268]	@ (8005580 <UART_SetConfig+0x284>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d12a      	bne.n	80054cc <UART_SetConfig+0x1d0>
 8005476:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800547a:	f7ff fab9 	bl	80049f0 <LL_RCC_GetLPUARTClockSource>
 800547e:	4603      	mov	r3, r0
 8005480:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005484:	d01a      	beq.n	80054bc <UART_SetConfig+0x1c0>
 8005486:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800548a:	d81b      	bhi.n	80054c4 <UART_SetConfig+0x1c8>
 800548c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005490:	d00c      	beq.n	80054ac <UART_SetConfig+0x1b0>
 8005492:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005496:	d815      	bhi.n	80054c4 <UART_SetConfig+0x1c8>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <UART_SetConfig+0x1a8>
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a0:	d008      	beq.n	80054b4 <UART_SetConfig+0x1b8>
 80054a2:	e00f      	b.n	80054c4 <UART_SetConfig+0x1c8>
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	e012      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80054ac:	2302      	movs	r3, #2
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b2:	e00e      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ba:	e00a      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c2:	e006      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ca:	e002      	b.n	80054d2 <UART_SetConfig+0x1d6>
 80054cc:	2310      	movs	r3, #16
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005580 <UART_SetConfig+0x284>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	f040 80a4 	bne.w	8005626 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d823      	bhi.n	800552e <UART_SetConfig+0x232>
 80054e6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <UART_SetConfig+0x1f0>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005511 	.word	0x08005511
 80054f0:	0800552f 	.word	0x0800552f
 80054f4:	08005519 	.word	0x08005519
 80054f8:	0800552f 	.word	0x0800552f
 80054fc:	0800551f 	.word	0x0800551f
 8005500:	0800552f 	.word	0x0800552f
 8005504:	0800552f 	.word	0x0800552f
 8005508:	0800552f 	.word	0x0800552f
 800550c:	08005527 	.word	0x08005527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005510:	f7fe fb06 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8005514:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005516:	e010      	b.n	800553a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005518:	4b1c      	ldr	r3, [pc, #112]	@ (800558c <UART_SetConfig+0x290>)
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800551c:	e00d      	b.n	800553a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551e:	f7fe fa4b 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8005522:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005524:	e009      	b.n	800553a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800552c:	e005      	b.n	800553a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005538:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8137 	beq.w	80057b0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	4a12      	ldr	r2, [pc, #72]	@ (8005590 <UART_SetConfig+0x294>)
 8005548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800554c:	461a      	mov	r2, r3
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	fbb3 f3f2 	udiv	r3, r3, r2
 8005554:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	4413      	add	r3, r2
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	429a      	cmp	r2, r3
 8005564:	d305      	bcc.n	8005572 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	429a      	cmp	r2, r3
 8005570:	d910      	bls.n	8005594 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005578:	e11a      	b.n	80057b0 <UART_SetConfig+0x4b4>
 800557a:	bf00      	nop
 800557c:	cfff69f3 	.word	0xcfff69f3
 8005580:	40008000 	.word	0x40008000
 8005584:	40013800 	.word	0x40013800
 8005588:	40004400 	.word	0x40004400
 800558c:	00f42400 	.word	0x00f42400
 8005590:	08009b58 	.word	0x08009b58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	2200      	movs	r2, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	60fa      	str	r2, [r7, #12]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a0:	4a8e      	ldr	r2, [pc, #568]	@ (80057dc <UART_SetConfig+0x4e0>)
 80055a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2200      	movs	r2, #0
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055b6:	f7fb facf 	bl	8000b58 <__aeabi_uldivmod>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4610      	mov	r0, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	020b      	lsls	r3, r1, #8
 80055cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055d0:	0202      	lsls	r2, r0, #8
 80055d2:	6979      	ldr	r1, [r7, #20]
 80055d4:	6849      	ldr	r1, [r1, #4]
 80055d6:	0849      	lsrs	r1, r1, #1
 80055d8:	2000      	movs	r0, #0
 80055da:	460c      	mov	r4, r1
 80055dc:	4605      	mov	r5, r0
 80055de:	eb12 0804 	adds.w	r8, r2, r4
 80055e2:	eb43 0905 	adc.w	r9, r3, r5
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	469a      	mov	sl, r3
 80055ee:	4693      	mov	fp, r2
 80055f0:	4652      	mov	r2, sl
 80055f2:	465b      	mov	r3, fp
 80055f4:	4640      	mov	r0, r8
 80055f6:	4649      	mov	r1, r9
 80055f8:	f7fb faae 	bl	8000b58 <__aeabi_uldivmod>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4613      	mov	r3, r2
 8005602:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800560a:	d308      	bcc.n	800561e <UART_SetConfig+0x322>
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005612:	d204      	bcs.n	800561e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a3a      	ldr	r2, [r7, #32]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	e0c8      	b.n	80057b0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005624:	e0c4      	b.n	80057b0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800562e:	d167      	bne.n	8005700 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005630:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005634:	2b08      	cmp	r3, #8
 8005636:	d828      	bhi.n	800568a <UART_SetConfig+0x38e>
 8005638:	a201      	add	r2, pc, #4	@ (adr r2, 8005640 <UART_SetConfig+0x344>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005665 	.word	0x08005665
 8005644:	0800566d 	.word	0x0800566d
 8005648:	08005675 	.word	0x08005675
 800564c:	0800568b 	.word	0x0800568b
 8005650:	0800567b 	.word	0x0800567b
 8005654:	0800568b 	.word	0x0800568b
 8005658:	0800568b 	.word	0x0800568b
 800565c:	0800568b 	.word	0x0800568b
 8005660:	08005683 	.word	0x08005683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005664:	f7fe fa5c 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8005668:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800566a:	e014      	b.n	8005696 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800566c:	f7fe fa6a 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8005670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005672:	e010      	b.n	8005696 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005674:	4b5a      	ldr	r3, [pc, #360]	@ (80057e0 <UART_SetConfig+0x4e4>)
 8005676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005678:	e00d      	b.n	8005696 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800567a:	f7fe f99d 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 800567e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005680:	e009      	b.n	8005696 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005688:	e005      	b.n	8005696 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8089 	beq.w	80057b0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	4a4e      	ldr	r2, [pc, #312]	@ (80057dc <UART_SetConfig+0x4e0>)
 80056a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80056b0:	005a      	lsls	r2, r3, #1
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	441a      	add	r2, r3
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	2b0f      	cmp	r3, #15
 80056c8:	d916      	bls.n	80056f8 <UART_SetConfig+0x3fc>
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d0:	d212      	bcs.n	80056f8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f023 030f 	bic.w	r3, r3, #15
 80056da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	8bfb      	ldrh	r3, [r7, #30]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	8bfa      	ldrh	r2, [r7, #30]
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	e05b      	b.n	80057b0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056fe:	e057      	b.n	80057b0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005700:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005704:	2b08      	cmp	r3, #8
 8005706:	d828      	bhi.n	800575a <UART_SetConfig+0x45e>
 8005708:	a201      	add	r2, pc, #4	@ (adr r2, 8005710 <UART_SetConfig+0x414>)
 800570a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570e:	bf00      	nop
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	0800575b 	.word	0x0800575b
 8005720:	0800574b 	.word	0x0800574b
 8005724:	0800575b 	.word	0x0800575b
 8005728:	0800575b 	.word	0x0800575b
 800572c:	0800575b 	.word	0x0800575b
 8005730:	08005753 	.word	0x08005753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fe f9f4 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8005738:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800573a:	e014      	b.n	8005766 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800573c:	f7fe fa02 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8005740:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005742:	e010      	b.n	8005766 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005744:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <UART_SetConfig+0x4e4>)
 8005746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005748:	e00d      	b.n	8005766 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574a:	f7fe f935 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 800574e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005750:	e009      	b.n	8005766 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005758:	e005      	b.n	8005766 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005764:	bf00      	nop
    }

    if (pclk != 0U)
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d021      	beq.n	80057b0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005770:	4a1a      	ldr	r2, [pc, #104]	@ (80057dc <UART_SetConfig+0x4e0>)
 8005772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005776:	461a      	mov	r2, r3
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	fbb3 f2f2 	udiv	r2, r3, r2
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	441a      	add	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	fbb2 f3f3 	udiv	r3, r2, r3
 800578e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	2b0f      	cmp	r3, #15
 8005794:	d909      	bls.n	80057aa <UART_SetConfig+0x4ae>
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800579c:	d205      	bcs.n	80057aa <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60da      	str	r2, [r3, #12]
 80057a8:	e002      	b.n	80057b0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2200      	movs	r2, #0
 80057c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2200      	movs	r2, #0
 80057ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3730      	adds	r7, #48	@ 0x30
 80057d4:	46bd      	mov	sp, r7
 80057d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057da:	bf00      	nop
 80057dc:	08009b58 	.word	0x08009b58
 80057e0:	00f42400 	.word	0x00f42400

080057e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01a      	beq.n	80058fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058e2:	d10a      	bne.n	80058fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b086      	sub	sp, #24
 800592a:	af02      	add	r7, sp, #8
 800592c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005936:	f7fc fa81 	bl	8001e3c <HAL_GetTick>
 800593a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b08      	cmp	r3, #8
 8005948:	d10e      	bne.n	8005968 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f832 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e028      	b.n	80059ba <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b04      	cmp	r3, #4
 8005974:	d10e      	bne.n	8005994 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005976:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f81c 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e012      	b.n	80059ba <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b09c      	sub	sp, #112	@ 0x70
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	e0af      	b.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059da:	f000 80ab 	beq.w	8005b34 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fc fa2d 	bl	8001e3c <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80059ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d140      	bne.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a04:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005a08:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a14:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005a18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e6      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a46:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005a48:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e06f      	b.n	8005b56 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d057      	beq.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x172>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b80      	cmp	r3, #128	@ 0x80
 8005a88:	d054      	beq.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x172>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b40      	cmp	r3, #64	@ 0x40
 8005a8e:	d051      	beq.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a9e:	d149      	bne.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005aa8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005abe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aca:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e6      	bne.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	613b      	str	r3, [r7, #16]
   return(result);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3308      	adds	r3, #8
 8005afa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005afc:	623a      	str	r2, [r7, #32]
 8005afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	69f9      	ldr	r1, [r7, #28]
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e5      	bne.n	8005adc <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e010      	b.n	8005b56 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69da      	ldr	r2, [r3, #28]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	f43f af40 	beq.w	80059d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3770      	adds	r7, #112	@ 0x70
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b096      	sub	sp, #88	@ 0x58
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	88fa      	ldrh	r2, [r7, #6]
 8005b78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2222      	movs	r2, #34	@ 0x22
 8005b88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d02d      	beq.n	8005bf2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9c:	4a40      	ldr	r2, [pc, #256]	@ (8005ca0 <UART_Start_Receive_DMA+0x140>)
 8005b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ca4 <UART_Start_Receive_DMA+0x144>)
 8005ba8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bb0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ca8 <UART_Start_Receive_DMA+0x148>)
 8005bb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bba:	2200      	movs	r2, #0
 8005bbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3324      	adds	r3, #36	@ 0x24
 8005bca:	4619      	mov	r1, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	f7fc faf0 	bl	80021b8 <HAL_DMA_Start_IT>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2210      	movs	r2, #16
 8005be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e051      	b.n	8005c96 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d018      	beq.n	8005c2c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c1a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e6      	bne.n	8005bfa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c4c:	637a      	str	r2, [r7, #52]	@ 0x34
 8005c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c80:	623a      	str	r2, [r7, #32]
 8005c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	69f9      	ldr	r1, [r7, #28]
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e5      	bne.n	8005c60 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3758      	adds	r7, #88	@ 0x58
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	08005df7 	.word	0x08005df7
 8005ca4:	08005f23 	.word	0x08005f23
 8005ca8:	08005f61 	.word	0x08005f61

08005cac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b08f      	sub	sp, #60	@ 0x3c
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cd4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e6      	bne.n	8005cb4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3308      	adds	r3, #8
 8005cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d06:	61ba      	str	r2, [r7, #24]
 8005d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6979      	ldr	r1, [r7, #20]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	613b      	str	r3, [r7, #16]
   return(result);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005d22:	bf00      	nop
 8005d24:	373c      	adds	r7, #60	@ 0x3c
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr

08005d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b095      	sub	sp, #84	@ 0x54
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e6      	bne.n	8005d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e3      	bne.n	8005d66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d118      	bne.n	8005dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6979      	ldr	r1, [r7, #20]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e6      	bne.n	8005da6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dec:	bf00      	nop
 8005dee:	3754      	adds	r7, #84	@ 0x54
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr

08005df6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b09c      	sub	sp, #112	@ 0x70
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e02:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d171      	bne.n	8005ef6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e3a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3308      	adds	r3, #8
 8005e6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e6c:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e6e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e96:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ea0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e5      	bne.n	8005e80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d118      	bne.n	8005ef6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f023 0310 	bic.w	r3, r3, #16
 8005ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	69b9      	ldr	r1, [r7, #24]
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	617b      	str	r3, [r7, #20]
   return(result);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e6      	bne.n	8005ec4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ef8:	2200      	movs	r2, #0
 8005efa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d107      	bne.n	8005f14 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f0e:	f7ff f9e9 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f12:	e002      	b.n	8005f1a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005f14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f16:	f7ff f9ca 	bl	80052ae <HAL_UART_RxCpltCallback>
}
 8005f1a:	bf00      	nop
 8005f1c:	3770      	adds	r7, #112	@ 0x70
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d109      	bne.n	8005f52 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	4619      	mov	r1, r3
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff f9ca 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f50:	e002      	b.n	8005f58 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff f9b4 	bl	80052c0 <HAL_UART_RxHalfCpltCallback>
}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f88:	2b80      	cmp	r3, #128	@ 0x80
 8005f8a:	d109      	bne.n	8005fa0 <UART_DMAError+0x40>
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b21      	cmp	r3, #33	@ 0x21
 8005f90:	d106      	bne.n	8005fa0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005f9a:	6978      	ldr	r0, [r7, #20]
 8005f9c:	f7ff fe86 	bl	8005cac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005faa:	2b40      	cmp	r3, #64	@ 0x40
 8005fac:	d109      	bne.n	8005fc2 <UART_DMAError+0x62>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b22      	cmp	r3, #34	@ 0x22
 8005fb2:	d106      	bne.n	8005fc2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005fbc:	6978      	ldr	r0, [r7, #20]
 8005fbe:	f7ff feb5 	bl	8005d2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc8:	f043 0210 	orr.w	r2, r3, #16
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fd2:	6978      	ldr	r0, [r7, #20]
 8005fd4:	f7ff f97d 	bl	80052d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd8:	bf00      	nop
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7ff f967 	bl	80052d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006004:	bf00      	nop
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	60bb      	str	r3, [r7, #8]
   return(result);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6979      	ldr	r1, [r7, #20]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	613b      	str	r3, [r7, #16]
   return(result);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e6      	bne.n	8006014 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff f921 	bl	800529c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800605a:	bf00      	nop
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr

08006074 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr

08006086 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr

08006098 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_UARTEx_DisableFifoMode+0x16>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e027      	b.n	80060fe <HAL_UARTEx_DisableFifoMode+0x66>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2224      	movs	r2, #36	@ 0x24
 80060ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0201 	bic.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr

08006108 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800611c:	2302      	movs	r3, #2
 800611e:	e02d      	b.n	800617c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2224      	movs	r2, #36	@ 0x24
 800612c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f84f 	bl	8006200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006198:	2302      	movs	r3, #2
 800619a:	e02d      	b.n	80061f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2224      	movs	r2, #36	@ 0x24
 80061a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0201 	bic.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f811 	bl	8006200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800620c:	2b00      	cmp	r3, #0
 800620e:	d108      	bne.n	8006222 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006220:	e031      	b.n	8006286 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006222:	2308      	movs	r3, #8
 8006224:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006226:	2308      	movs	r3, #8
 8006228:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	0e5b      	lsrs	r3, r3, #25
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	0f5b      	lsrs	r3, r3, #29
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	7b3a      	ldrb	r2, [r7, #12]
 800624e:	4910      	ldr	r1, [pc, #64]	@ (8006290 <UARTEx_SetNbDataToProcess+0x90>)
 8006250:	5c8a      	ldrb	r2, [r1, r2]
 8006252:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006256:	7b3a      	ldrb	r2, [r7, #12]
 8006258:	490e      	ldr	r1, [pc, #56]	@ (8006294 <UARTEx_SetNbDataToProcess+0x94>)
 800625a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800625c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006260:	b29a      	uxth	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	7b7a      	ldrb	r2, [r7, #13]
 800626c:	4908      	ldr	r1, [pc, #32]	@ (8006290 <UARTEx_SetNbDataToProcess+0x90>)
 800626e:	5c8a      	ldrb	r2, [r1, r2]
 8006270:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006274:	7b7a      	ldrb	r2, [r7, #13]
 8006276:	4907      	ldr	r1, [pc, #28]	@ (8006294 <UARTEx_SetNbDataToProcess+0x94>)
 8006278:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800627a:	fb93 f3f2 	sdiv	r3, r3, r2
 800627e:	b29a      	uxth	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr
 8006290:	08009b70 	.word	0x08009b70
 8006294:	08009b78 	.word	0x08009b78

08006298 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800629c:	f7fb fcfc 	bl	8001c98 <BSP_RADIO_Init>
 80062a0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <RBI_GetTxConfig>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_GetTxConfig(void)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80062aa:	f7fb fd33 	bl	8001d14 <BSP_RADIO_GetTxConfig>
 80062ae:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80062b8:	f7fb fd33 	bl	8001d22 <BSP_RADIO_IsTCXO>
 80062bc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80062be:	4618      	mov	r0, r3
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80062c6:	f7fb fd33 	bl	8001d30 <BSP_RADIO_IsDCDC>
 80062ca:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fb fd2e 	bl	8001d3e <BSP_RADIO_GetRFOMaxPowerConfig>
 80062e2:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80062fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006370 <SUBGRF_Init+0x84>)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8006300:	f7fb f90a 	bl	8001518 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006304:	2002      	movs	r0, #2
 8006306:	f000 fdf3 	bl	8006ef0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800630a:	4b1a      	ldr	r3, [pc, #104]	@ (8006374 <SUBGRF_Init+0x88>)
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006310:	2000      	movs	r0, #0
 8006312:	f000 f897 	bl	8006444 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006316:	f7ff ffcd 	bl	80062b4 <RBI_IsTCXO>
 800631a:	4603      	mov	r3, r0
 800631c:	2b01      	cmp	r3, #1
 800631e:	d10e      	bne.n	800633e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006320:	2140      	movs	r1, #64	@ 0x40
 8006322:	2001      	movs	r0, #1
 8006324:	f000 f9bc 	bl	80066a0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006328:	2100      	movs	r1, #0
 800632a:	f640 1011 	movw	r0, #2321	@ 0x911
 800632e:	f000 fc7d 	bl	8006c2c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006332:	237f      	movs	r3, #127	@ 0x7f
 8006334:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006336:	7b38      	ldrb	r0, [r7, #12]
 8006338:	f000 f8c0 	bl	80064bc <SUBGRF_Calibrate>
 800633c:	e009      	b.n	8006352 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800633e:	2120      	movs	r1, #32
 8006340:	f640 1011 	movw	r0, #2321	@ 0x911
 8006344:	f000 fc72 	bl	8006c2c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006348:	2120      	movs	r1, #32
 800634a:	f640 1012 	movw	r0, #2322	@ 0x912
 800634e:	f000 fc6d 	bl	8006c2c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006352:	210e      	movs	r1, #14
 8006354:	f640 101f 	movw	r0, #2335	@ 0x91f
 8006358:	f000 fc68 	bl	8006c2c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800635c:	f7ff ff9c 	bl	8006298 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006360:	4b05      	ldr	r3, [pc, #20]	@ (8006378 <SUBGRF_Init+0x8c>)
 8006362:	2201      	movs	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	200005e0 	.word	0x200005e0
 8006374:	200005df 	.word	0x200005df
 8006378:	200005dc 	.word	0x200005dc

0800637c <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	461a      	mov	r2, r3
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	2000      	movs	r0, #0
 8006390:	f000 fc96 	bl	8006cc0 <SUBGRF_WriteBuffer>
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <SUBGRF_SendPayload>:

    return 0;
}

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	460b      	mov	r3, r1
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	4619      	mov	r1, r3
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff ffe4 	bl	800637c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f861 	bl	800647c <SUBGRF_SetTx>
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	4603      	mov	r3, r0
 80063ca:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	0a1b      	lsrs	r3, r3, #8
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80063dc:	f000 f9e4 	bl	80067a8 <SUBGRF_GetPacketType>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d108      	bne.n	80063f8 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	2202      	movs	r2, #2
 80063ec:	4619      	mov	r1, r3
 80063ee:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80063f2:	f000 fc43 	bl	8006c7c <SUBGRF_WriteRegisters>
            break;
 80063f6:	e000      	b.n	80063fa <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80063f8:	bf00      	nop
    }
}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	4603      	mov	r3, r0
 800640a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	b29b      	uxth	r3, r3
 8006412:	b2db      	uxtb	r3, r3
 8006414:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800641c:	f000 f9c4 	bl	80067a8 <SUBGRF_GetPacketType>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d108      	bne.n	8006438 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006426:	f107 030c 	add.w	r3, r7, #12
 800642a:	2202      	movs	r2, #2
 800642c:	4619      	mov	r1, r3
 800642e:	f240 60be 	movw	r0, #1726	@ 0x6be
 8006432:	f000 fc23 	bl	8006c7c <SUBGRF_WriteRegisters>
            break;
 8006436:	e000      	b.n	800643a <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006438:	bf00      	nop
    }
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	4603      	mov	r3, r0
 800644c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800644e:	1dfb      	adds	r3, r7, #7
 8006450:	2201      	movs	r2, #1
 8006452:	4619      	mov	r1, r3
 8006454:	2080      	movs	r0, #128	@ 0x80
 8006456:	f000 fc55 	bl	8006d04 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8006460:	4b05      	ldr	r3, [pc, #20]	@ (8006478 <SUBGRF_SetStandby+0x34>)
 8006462:	2201      	movs	r2, #1
 8006464:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8006466:	e002      	b.n	800646e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8006468:	4b03      	ldr	r3, [pc, #12]	@ (8006478 <SUBGRF_SetStandby+0x34>)
 800646a:	2202      	movs	r2, #2
 800646c:	701a      	strb	r2, [r3, #0]
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200005dc 	.word	0x200005dc

0800647c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8006484:	4b0c      	ldr	r3, [pc, #48]	@ (80064b8 <SUBGRF_SetTx+0x3c>)
 8006486:	2204      	movs	r2, #4
 8006488:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	b2db      	uxtb	r3, r3
 8006490:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0a1b      	lsrs	r3, r3, #8
 8006496:	b2db      	uxtb	r3, r3
 8006498:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80064a0:	f107 030c 	add.w	r3, r7, #12
 80064a4:	2203      	movs	r2, #3
 80064a6:	4619      	mov	r1, r3
 80064a8:	2083      	movs	r0, #131	@ 0x83
 80064aa:	f000 fc2b 	bl	8006d04 <SUBGRF_WriteCommand>
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	200005dc 	.word	0x200005dc

080064bc <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80064c4:	793b      	ldrb	r3, [r7, #4]
 80064c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	019b      	lsls	r3, r3, #6
 80064d0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80064d2:	793b      	ldrb	r3, [r7, #4]
 80064d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80064d8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80064da:	b25b      	sxtb	r3, r3
 80064dc:	015b      	lsls	r3, r3, #5
 80064de:	b25b      	sxtb	r3, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80064e4:	793b      	ldrb	r3, [r7, #4]
 80064e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80064ea:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80064ec:	b25b      	sxtb	r3, r3
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	b25b      	sxtb	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80064f6:	793b      	ldrb	r3, [r7, #4]
 80064f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80064fc:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80064fe:	b25b      	sxtb	r3, r3
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	b25b      	sxtb	r3, r3
 8006504:	4313      	orrs	r3, r2
 8006506:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006508:	793b      	ldrb	r3, [r7, #4]
 800650a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800650e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006510:	b25b      	sxtb	r3, r3
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	b25b      	sxtb	r3, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800651a:	793b      	ldrb	r3, [r7, #4]
 800651c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006520:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006522:	b25b      	sxtb	r3, r3
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	b25b      	sxtb	r3, r3
 8006528:	4313      	orrs	r3, r2
 800652a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800652c:	793b      	ldrb	r3, [r7, #4]
 800652e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006532:	b2db      	uxtb	r3, r3
 8006534:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006536:	4313      	orrs	r3, r2
 8006538:	b25b      	sxtb	r3, r3
 800653a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800653c:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800653e:	f107 030f 	add.w	r3, r7, #15
 8006542:	2201      	movs	r2, #1
 8006544:	4619      	mov	r1, r3
 8006546:	2089      	movs	r0, #137	@ 0x89
 8006548:	f000 fbdc 	bl	8006d04 <SUBGRF_WriteCommand>
}
 800654c:	bf00      	nop
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a1d      	ldr	r2, [pc, #116]	@ (80065d4 <SUBGRF_CalibrateImage+0x80>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d904      	bls.n	800656e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8006564:	23e1      	movs	r3, #225	@ 0xe1
 8006566:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8006568:	23e9      	movs	r3, #233	@ 0xe9
 800656a:	737b      	strb	r3, [r7, #13]
 800656c:	e027      	b.n	80065be <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <SUBGRF_CalibrateImage+0x84>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d904      	bls.n	8006580 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8006576:	23d7      	movs	r3, #215	@ 0xd7
 8006578:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800657a:	23db      	movs	r3, #219	@ 0xdb
 800657c:	737b      	strb	r3, [r7, #13]
 800657e:	e01e      	b.n	80065be <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a16      	ldr	r2, [pc, #88]	@ (80065dc <SUBGRF_CalibrateImage+0x88>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d904      	bls.n	8006592 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8006588:	23c1      	movs	r3, #193	@ 0xc1
 800658a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800658c:	23c5      	movs	r3, #197	@ 0xc5
 800658e:	737b      	strb	r3, [r7, #13]
 8006590:	e015      	b.n	80065be <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a12      	ldr	r2, [pc, #72]	@ (80065e0 <SUBGRF_CalibrateImage+0x8c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d904      	bls.n	80065a4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800659a:	2375      	movs	r3, #117	@ 0x75
 800659c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800659e:	2381      	movs	r3, #129	@ 0x81
 80065a0:	737b      	strb	r3, [r7, #13]
 80065a2:	e00c      	b.n	80065be <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a0f      	ldr	r2, [pc, #60]	@ (80065e4 <SUBGRF_CalibrateImage+0x90>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d904      	bls.n	80065b6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80065ac:	236b      	movs	r3, #107	@ 0x6b
 80065ae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80065b0:	236f      	movs	r3, #111	@ 0x6f
 80065b2:	737b      	strb	r3, [r7, #13]
 80065b4:	e003      	b.n	80065be <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80065b6:	2329      	movs	r3, #41	@ 0x29
 80065b8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80065ba:	232b      	movs	r3, #43	@ 0x2b
 80065bc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80065be:	f107 030c 	add.w	r3, r7, #12
 80065c2:	2202      	movs	r2, #2
 80065c4:	4619      	mov	r1, r3
 80065c6:	2098      	movs	r0, #152	@ 0x98
 80065c8:	f000 fb9c 	bl	8006d04 <SUBGRF_WriteCommand>
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	35a4e900 	.word	0x35a4e900
 80065d8:	32a9f880 	.word	0x32a9f880
 80065dc:	2de54480 	.word	0x2de54480
 80065e0:	1b6b0b00 	.word	0x1b6b0b00
 80065e4:	1954fc40 	.word	0x1954fc40

080065e8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4623      	mov	r3, r4
 80065f8:	71fb      	strb	r3, [r7, #7]
 80065fa:	4603      	mov	r3, r0
 80065fc:	71bb      	strb	r3, [r7, #6]
 80065fe:	460b      	mov	r3, r1
 8006600:	717b      	strb	r3, [r7, #5]
 8006602:	4613      	mov	r3, r2
 8006604:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800660a:	79bb      	ldrb	r3, [r7, #6]
 800660c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800660e:	797b      	ldrb	r3, [r7, #5]
 8006610:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8006612:	793b      	ldrb	r3, [r7, #4]
 8006614:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8006616:	f107 030c 	add.w	r3, r7, #12
 800661a:	2204      	movs	r2, #4
 800661c:	4619      	mov	r1, r3
 800661e:	2095      	movs	r0, #149	@ 0x95
 8006620:	f000 fb70 	bl	8006d04 <SUBGRF_WriteCommand>
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	bd90      	pop	{r4, r7, pc}

0800662c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	4611      	mov	r1, r2
 8006638:	461a      	mov	r2, r3
 800663a:	4623      	mov	r3, r4
 800663c:	80fb      	strh	r3, [r7, #6]
 800663e:	4603      	mov	r3, r0
 8006640:	80bb      	strh	r3, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	807b      	strh	r3, [r7, #2]
 8006646:	4613      	mov	r3, r2
 8006648:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	0a1b      	lsrs	r3, r3, #8
 800664e:	b29b      	uxth	r3, r3
 8006650:	b2db      	uxtb	r3, r3
 8006652:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800665a:	88bb      	ldrh	r3, [r7, #4]
 800665c:	0a1b      	lsrs	r3, r3, #8
 800665e:	b29b      	uxth	r3, r3
 8006660:	b2db      	uxtb	r3, r3
 8006662:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8006664:	88bb      	ldrh	r3, [r7, #4]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800666a:	887b      	ldrh	r3, [r7, #2]
 800666c:	0a1b      	lsrs	r3, r3, #8
 800666e:	b29b      	uxth	r3, r3
 8006670:	b2db      	uxtb	r3, r3
 8006672:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8006674:	887b      	ldrh	r3, [r7, #2]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800667a:	883b      	ldrh	r3, [r7, #0]
 800667c:	0a1b      	lsrs	r3, r3, #8
 800667e:	b29b      	uxth	r3, r3
 8006680:	b2db      	uxtb	r3, r3
 8006682:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8006684:	883b      	ldrh	r3, [r7, #0]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	2208      	movs	r2, #8
 8006690:	4619      	mov	r1, r3
 8006692:	2008      	movs	r0, #8
 8006694:	f000 fb36 	bl	8006d04 <SUBGRF_WriteCommand>
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	bd90      	pop	{r4, r7, pc}

080066a0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	6039      	str	r1, [r7, #0]
 80066aa:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	0a1b      	lsrs	r3, r3, #8
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80066cc:	f107 030c 	add.w	r3, r7, #12
 80066d0:	2204      	movs	r2, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	2097      	movs	r0, #151	@ 0x97
 80066d6:	f000 fb15 	bl	8006d04 <SUBGRF_WriteCommand>
}
 80066da:	bf00      	nop
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80066e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80066f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006768 <SUBGRF_SetRfFrequency+0x84>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f083 0301 	eor.w	r3, r3, #1
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff ff27 	bl	8006554 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8006706:	4b18      	ldr	r3, [pc, #96]	@ (8006768 <SUBGRF_SetRfFrequency+0x84>)
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	461c      	mov	r4, r3
 8006712:	4615      	mov	r5, r2
 8006714:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8006718:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800671c:	4a13      	ldr	r2, [pc, #76]	@ (800676c <SUBGRF_SetRfFrequency+0x88>)
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	4640      	mov	r0, r8
 8006724:	4649      	mov	r1, r9
 8006726:	f7fa fa17 	bl	8000b58 <__aeabi_uldivmod>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4613      	mov	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	0e1b      	lsrs	r3, r3, #24
 8006736:	b2db      	uxtb	r3, r3
 8006738:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	0c1b      	lsrs	r3, r3, #16
 800673e:	b2db      	uxtb	r3, r3
 8006740:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	b2db      	uxtb	r3, r3
 8006748:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8006750:	f107 0308 	add.w	r3, r7, #8
 8006754:	2204      	movs	r2, #4
 8006756:	4619      	mov	r1, r3
 8006758:	2086      	movs	r0, #134	@ 0x86
 800675a:	f000 fad3 	bl	8006d04 <SUBGRF_WriteCommand>
}
 800675e:	bf00      	nop
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006768:	200005df 	.word	0x200005df
 800676c:	01e84800 	.word	0x01e84800

08006770 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800677a:	79fa      	ldrb	r2, [r7, #7]
 800677c:	4b09      	ldr	r3, [pc, #36]	@ (80067a4 <SUBGRF_SetPacketType+0x34>)
 800677e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8006786:	2100      	movs	r1, #0
 8006788:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800678c:	f000 fa4e 	bl	8006c2c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006790:	1dfb      	adds	r3, r7, #7
 8006792:	2201      	movs	r2, #1
 8006794:	4619      	mov	r1, r3
 8006796:	208a      	movs	r0, #138	@ 0x8a
 8006798:	f000 fab4 	bl	8006d04 <SUBGRF_WriteCommand>
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	200005dd 	.word	0x200005dd

080067a8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
    return PacketType;
 80067ac:	4b02      	ldr	r3, [pc, #8]	@ (80067b8 <SUBGRF_GetPacketType+0x10>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	200005dd 	.word	0x200005dd

080067bc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	71fb      	strb	r3, [r7, #7]
 80067c6:	460b      	mov	r3, r1
 80067c8:	71bb      	strb	r3, [r7, #6]
 80067ca:	4613      	mov	r3, r2
 80067cc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d149      	bne.n	8006868 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80067d4:	2000      	movs	r0, #0
 80067d6:	f7ff fd7b 	bl	80062d0 <RBI_GetRFOMaxPowerConfig>
 80067da:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80067dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	da01      	bge.n	80067ea <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b0e      	cmp	r3, #14
 80067ee:	d10e      	bne.n	800680e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80067f0:	2301      	movs	r3, #1
 80067f2:	2201      	movs	r2, #1
 80067f4:	2100      	movs	r1, #0
 80067f6:	2004      	movs	r0, #4
 80067f8:	f7ff fef6 	bl	80065e8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80067fc:	79ba      	ldrb	r2, [r7, #6]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	b2db      	uxtb	r3, r3
 8006806:	330e      	adds	r3, #14
 8006808:	b2db      	uxtb	r3, r3
 800680a:	71bb      	strb	r3, [r7, #6]
 800680c:	e01f      	b.n	800684e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b0a      	cmp	r3, #10
 8006812:	d10e      	bne.n	8006832 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8006814:	2301      	movs	r3, #1
 8006816:	2201      	movs	r2, #1
 8006818:	2100      	movs	r1, #0
 800681a:	2001      	movs	r0, #1
 800681c:	f7ff fee4 	bl	80065e8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8006820:	79ba      	ldrb	r2, [r7, #6]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	b2db      	uxtb	r3, r3
 800682a:	330d      	adds	r3, #13
 800682c:	b2db      	uxtb	r3, r3
 800682e:	71bb      	strb	r3, [r7, #6]
 8006830:	e00d      	b.n	800684e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8006832:	2301      	movs	r3, #1
 8006834:	2201      	movs	r2, #1
 8006836:	2100      	movs	r1, #0
 8006838:	2007      	movs	r0, #7
 800683a:	f7ff fed5 	bl	80065e8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800683e:	79ba      	ldrb	r2, [r7, #6]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	b2db      	uxtb	r3, r3
 8006848:	330e      	adds	r3, #14
 800684a:	b2db      	uxtb	r3, r3
 800684c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800684e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006852:	f113 0f11 	cmn.w	r3, #17
 8006856:	da01      	bge.n	800685c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8006858:	23ef      	movs	r3, #239	@ 0xef
 800685a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800685c:	2118      	movs	r1, #24
 800685e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8006862:	f000 f9e3 	bl	8006c2c <SUBGRF_WriteRegister>
 8006866:	e067      	b.n	8006938 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8006868:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800686c:	f000 f9f2 	bl	8006c54 <SUBGRF_ReadRegister>
 8006870:	4603      	mov	r3, r0
 8006872:	f043 031e 	orr.w	r3, r3, #30
 8006876:	b2db      	uxtb	r3, r3
 8006878:	4619      	mov	r1, r3
 800687a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800687e:	f000 f9d5 	bl	8006c2c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8006882:	2001      	movs	r0, #1
 8006884:	f7ff fd24 	bl	80062d0 <RBI_GetRFOMaxPowerConfig>
 8006888:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800688a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	429a      	cmp	r2, r3
 8006892:	da01      	bge.n	8006898 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b14      	cmp	r3, #20
 800689c:	d10e      	bne.n	80068bc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800689e:	2301      	movs	r3, #1
 80068a0:	2200      	movs	r2, #0
 80068a2:	2105      	movs	r1, #5
 80068a4:	2003      	movs	r0, #3
 80068a6:	f7ff fe9f 	bl	80065e8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80068aa:	79ba      	ldrb	r2, [r7, #6]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	3316      	adds	r3, #22
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	71bb      	strb	r3, [r7, #6]
 80068ba:	e031      	b.n	8006920 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b11      	cmp	r3, #17
 80068c0:	d10e      	bne.n	80068e0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80068c2:	2301      	movs	r3, #1
 80068c4:	2200      	movs	r2, #0
 80068c6:	2103      	movs	r1, #3
 80068c8:	2002      	movs	r0, #2
 80068ca:	f7ff fe8d 	bl	80065e8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80068ce:	79ba      	ldrb	r2, [r7, #6]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	3316      	adds	r3, #22
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	71bb      	strb	r3, [r7, #6]
 80068de:	e01f      	b.n	8006920 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b0e      	cmp	r3, #14
 80068e4:	d10e      	bne.n	8006904 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80068e6:	2301      	movs	r3, #1
 80068e8:	2200      	movs	r2, #0
 80068ea:	2102      	movs	r1, #2
 80068ec:	2002      	movs	r0, #2
 80068ee:	f7ff fe7b 	bl	80065e8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80068f2:	79ba      	ldrb	r2, [r7, #6]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	330e      	adds	r3, #14
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	71bb      	strb	r3, [r7, #6]
 8006902:	e00d      	b.n	8006920 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8006904:	2301      	movs	r3, #1
 8006906:	2200      	movs	r2, #0
 8006908:	2107      	movs	r1, #7
 800690a:	2004      	movs	r0, #4
 800690c:	f7ff fe6c 	bl	80065e8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006910:	79ba      	ldrb	r2, [r7, #6]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	b2db      	uxtb	r3, r3
 800691a:	3316      	adds	r3, #22
 800691c:	b2db      	uxtb	r3, r3
 800691e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8006920:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006924:	f113 0f09 	cmn.w	r3, #9
 8006928:	da01      	bge.n	800692e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800692a:	23f7      	movs	r3, #247	@ 0xf7
 800692c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800692e:	2138      	movs	r1, #56	@ 0x38
 8006930:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8006934:	f000 f97a 	bl	8006c2c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8006938:	79bb      	ldrb	r3, [r7, #6]
 800693a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800693c:	797b      	ldrb	r3, [r7, #5]
 800693e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8006940:	f107 0308 	add.w	r3, r7, #8
 8006944:	2202      	movs	r2, #2
 8006946:	4619      	mov	r1, r3
 8006948:	208e      	movs	r0, #142	@ 0x8e
 800694a:	f000 f9db 	bl	8006d04 <SUBGRF_WriteCommand>
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8006958:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800695c:	b086      	sub	sp, #24
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006966:	f107 0308 	add.w	r3, r7, #8
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	781a      	ldrb	r2, [r3, #0]
 8006974:	4b5c      	ldr	r3, [pc, #368]	@ (8006ae8 <SUBGRF_SetModulationParams+0x190>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d004      	beq.n	8006986 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff fef5 	bl	8006770 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b03      	cmp	r3, #3
 800698c:	f200 80a5 	bhi.w	8006ada <SUBGRF_SetModulationParams+0x182>
 8006990:	a201      	add	r2, pc, #4	@ (adr r2, 8006998 <SUBGRF_SetModulationParams+0x40>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069a9 	.word	0x080069a9
 800699c:	08006a69 	.word	0x08006a69
 80069a0:	08006a2b 	.word	0x08006a2b
 80069a4:	08006a97 	.word	0x08006a97
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80069a8:	2308      	movs	r3, #8
 80069aa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4a4e      	ldr	r2, [pc, #312]	@ (8006aec <SUBGRF_SetModulationParams+0x194>)
 80069b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	0c1b      	lsrs	r3, r3, #16
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	0a1b      	lsrs	r3, r3, #8
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7b1b      	ldrb	r3, [r3, #12]
 80069d2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7b5b      	ldrb	r3, [r3, #13]
 80069d8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2200      	movs	r2, #0
 80069e0:	461c      	mov	r4, r3
 80069e2:	4615      	mov	r5, r2
 80069e4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80069e8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80069ec:	4a40      	ldr	r2, [pc, #256]	@ (8006af0 <SUBGRF_SetModulationParams+0x198>)
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	4640      	mov	r0, r8
 80069f4:	4649      	mov	r1, r9
 80069f6:	f7fa f8af 	bl	8000b58 <__aeabi_uldivmod>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4613      	mov	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	0a1b      	lsrs	r3, r3, #8
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006a18:	7cfb      	ldrb	r3, [r7, #19]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	f107 0308 	add.w	r3, r7, #8
 8006a20:	4619      	mov	r1, r3
 8006a22:	208b      	movs	r0, #139	@ 0x8b
 8006a24:	f000 f96e 	bl	8006d04 <SUBGRF_WriteCommand>
        break;
 8006a28:	e058      	b.n	8006adc <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8006a2a:	2304      	movs	r3, #4
 8006a2c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	4a2e      	ldr	r2, [pc, #184]	@ (8006aec <SUBGRF_SetModulationParams+0x194>)
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	0c1b      	lsrs	r3, r3, #16
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	0a1b      	lsrs	r3, r3, #8
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	7d1b      	ldrb	r3, [r3, #20]
 8006a54:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006a56:	7cfb      	ldrb	r3, [r7, #19]
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	f107 0308 	add.w	r3, r7, #8
 8006a5e:	4619      	mov	r1, r3
 8006a60:	208b      	movs	r0, #139	@ 0x8b
 8006a62:	f000 f94f 	bl	8006d04 <SUBGRF_WriteCommand>
        break;
 8006a66:	e039      	b.n	8006adc <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8006a68:	2304      	movs	r3, #4
 8006a6a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7e1b      	ldrb	r3, [r3, #24]
 8006a70:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7e5b      	ldrb	r3, [r3, #25]
 8006a76:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7e9b      	ldrb	r3, [r3, #26]
 8006a7c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	7edb      	ldrb	r3, [r3, #27]
 8006a82:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006a84:	7cfb      	ldrb	r3, [r7, #19]
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	208b      	movs	r0, #139	@ 0x8b
 8006a90:	f000 f938 	bl	8006d04 <SUBGRF_WriteCommand>

        break;
 8006a94:	e022      	b.n	8006adc <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8006a96:	2305      	movs	r3, #5
 8006a98:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	4a13      	ldr	r2, [pc, #76]	@ (8006aec <SUBGRF_SetModulationParams+0x194>)
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	0c1b      	lsrs	r3, r3, #16
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	0a1b      	lsrs	r3, r3, #8
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7b1b      	ldrb	r3, [r3, #12]
 8006ac0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7b5b      	ldrb	r3, [r3, #13]
 8006ac6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006ac8:	7cfb      	ldrb	r3, [r7, #19]
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	f107 0308 	add.w	r3, r7, #8
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	208b      	movs	r0, #139	@ 0x8b
 8006ad4:	f000 f916 	bl	8006d04 <SUBGRF_WriteCommand>
        break;
 8006ad8:	e000      	b.n	8006adc <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8006ada:	bf00      	nop
    }
}
 8006adc:	bf00      	nop
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200005dd 	.word	0x200005dd
 8006aec:	3d090000 	.word	0x3d090000
 8006af0:	01e84800 	.word	0x01e84800

08006af4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006b00:	f107 030c 	add.w	r3, r7, #12
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	605a      	str	r2, [r3, #4]
 8006b0a:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	781a      	ldrb	r2, [r3, #0]
 8006b10:	4b44      	ldr	r3, [pc, #272]	@ (8006c24 <SUBGRF_SetPacketParams+0x130>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d004      	beq.n	8006b22 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fe27 	bl	8006770 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d878      	bhi.n	8006c1c <SUBGRF_SetPacketParams+0x128>
 8006b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <SUBGRF_SetPacketParams+0x3c>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b41 	.word	0x08006b41
 8006b34:	08006bd1 	.word	0x08006bd1
 8006b38:	08006bc5 	.word	0x08006bc5
 8006b3c:	08006b41 	.word	0x08006b41
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7a5b      	ldrb	r3, [r3, #9]
 8006b44:	2bf1      	cmp	r3, #241	@ 0xf1
 8006b46:	d10a      	bne.n	8006b5e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8006b48:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006b4c:	f7ff fc39 	bl	80063c2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006b50:	f248 0005 	movw	r0, #32773	@ 0x8005
 8006b54:	f7ff fc55 	bl	8006402 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	75bb      	strb	r3, [r7, #22]
 8006b5c:	e011      	b.n	8006b82 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7a5b      	ldrb	r3, [r3, #9]
 8006b62:	2bf2      	cmp	r3, #242	@ 0xf2
 8006b64:	d10a      	bne.n	8006b7c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8006b66:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8006b6a:	f7ff fc2a 	bl	80063c2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8006b6e:	f241 0021 	movw	r0, #4129	@ 0x1021
 8006b72:	f7ff fc46 	bl	8006402 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8006b76:	2306      	movs	r3, #6
 8006b78:	75bb      	strb	r3, [r7, #22]
 8006b7a:	e002      	b.n	8006b82 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7a5b      	ldrb	r3, [r3, #9]
 8006b80:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8006b82:	2309      	movs	r3, #9
 8006b84:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	885b      	ldrh	r3, [r3, #2]
 8006b8a:	0a1b      	lsrs	r3, r3, #8
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	885b      	ldrh	r3, [r3, #2]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	791b      	ldrb	r3, [r3, #4]
 8006b9e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	795b      	ldrb	r3, [r3, #5]
 8006ba4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	799b      	ldrb	r3, [r3, #6]
 8006baa:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	79db      	ldrb	r3, [r3, #7]
 8006bb0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	7a1b      	ldrb	r3, [r3, #8]
 8006bb6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8006bb8:	7dbb      	ldrb	r3, [r7, #22]
 8006bba:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7a9b      	ldrb	r3, [r3, #10]
 8006bc0:	753b      	strb	r3, [r7, #20]
        break;
 8006bc2:	e022      	b.n	8006c0a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	7b1b      	ldrb	r3, [r3, #12]
 8006bcc:	733b      	strb	r3, [r7, #12]
        break;
 8006bce:	e01c      	b.n	8006c0a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8006bd0:	2306      	movs	r3, #6
 8006bd2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	89db      	ldrh	r3, [r3, #14]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	89db      	ldrh	r3, [r3, #14]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7c1a      	ldrb	r2, [r3, #16]
 8006bec:	4b0e      	ldr	r3, [pc, #56]	@ (8006c28 <SUBGRF_SetPacketParams+0x134>)
 8006bee:	4611      	mov	r1, r2
 8006bf0:	7019      	strb	r1, [r3, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7c5b      	ldrb	r3, [r3, #17]
 8006bfa:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	7c9b      	ldrb	r3, [r3, #18]
 8006c00:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7cdb      	ldrb	r3, [r3, #19]
 8006c06:	747b      	strb	r3, [r7, #17]
        break;
 8006c08:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	f107 030c 	add.w	r3, r7, #12
 8006c12:	4619      	mov	r1, r3
 8006c14:	208c      	movs	r0, #140	@ 0x8c
 8006c16:	f000 f875 	bl	8006d04 <SUBGRF_WriteCommand>
 8006c1a:	e000      	b.n	8006c1e <SUBGRF_SetPacketParams+0x12a>
        return;
 8006c1c:	bf00      	nop
}
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	200005dd 	.word	0x200005dd
 8006c28:	200005de 	.word	0x200005de

08006c2c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	460a      	mov	r2, r1
 8006c36:	80fb      	strh	r3, [r7, #6]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006c3c:	1d7a      	adds	r2, r7, #5
 8006c3e:	88f9      	ldrh	r1, [r7, #6]
 8006c40:	2301      	movs	r3, #1
 8006c42:	4803      	ldr	r0, [pc, #12]	@ (8006c50 <SUBGRF_WriteRegister+0x24>)
 8006c44:	f7fd fb4e 	bl	80042e4 <HAL_SUBGHZ_WriteRegisters>
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000320 	.word	0x20000320

08006c54 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8006c5e:	f107 020f 	add.w	r2, r7, #15
 8006c62:	88f9      	ldrh	r1, [r7, #6]
 8006c64:	2301      	movs	r3, #1
 8006c66:	4804      	ldr	r0, [pc, #16]	@ (8006c78 <SUBGRF_ReadRegister+0x24>)
 8006c68:	f7fd fb9b 	bl	80043a2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000320 	.word	0x20000320

08006c7c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	6039      	str	r1, [r7, #0]
 8006c86:	80fb      	strh	r3, [r7, #6]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c90:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c92:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006c94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c96:	b672      	cpsid	i
}
 8006c98:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8006c9a:	88bb      	ldrh	r3, [r7, #4]
 8006c9c:	88f9      	ldrh	r1, [r7, #6]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4806      	ldr	r0, [pc, #24]	@ (8006cbc <SUBGRF_WriteRegisters+0x40>)
 8006ca2:	f7fd fb1f 	bl	80042e4 <HAL_SUBGHZ_WriteRegisters>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f383 8810 	msr	PRIMASK, r3
}
 8006cb0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006cb2:	bf00      	nop
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000320 	.word	0x20000320

08006cc0 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	6039      	str	r1, [r7, #0]
 8006cca:	71fb      	strb	r3, [r7, #7]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006cd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006cda:	b672      	cpsid	i
}
 8006cdc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8006cde:	79bb      	ldrb	r3, [r7, #6]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	79f9      	ldrb	r1, [r7, #7]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	4806      	ldr	r0, [pc, #24]	@ (8006d00 <SUBGRF_WriteBuffer+0x40>)
 8006ce8:	f7fd fc6f 	bl	80045ca <HAL_SUBGHZ_WriteBuffer>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f383 8810 	msr	PRIMASK, r3
}
 8006cf6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006cf8:	bf00      	nop
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20000320 	.word	0x20000320

08006d04 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	6039      	str	r1, [r7, #0]
 8006d0e:	71fb      	strb	r3, [r7, #7]
 8006d10:	4613      	mov	r3, r2
 8006d12:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d14:	f3ef 8310 	mrs	r3, PRIMASK
 8006d18:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006d1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d1e:	b672      	cpsid	i
}
 8006d20:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8006d22:	88bb      	ldrh	r3, [r7, #4]
 8006d24:	79f9      	ldrb	r1, [r7, #7]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	4806      	ldr	r0, [pc, #24]	@ (8006d44 <SUBGRF_WriteCommand+0x40>)
 8006d2a:	f7fd fb9b 	bl	8004464 <HAL_SUBGHZ_ExecSetCmd>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f383 8810 	msr	PRIMASK, r3
}
 8006d38:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006d3a:	bf00      	nop
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20000320 	.word	0x20000320

08006d48 <SUBGRF_SetRfTxPower>:
    }
    RBI_ConfigRFSwitch(state);
}

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8006d52:	2301      	movs	r3, #1
 8006d54:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8006d56:	f7ff faa6 	bl	80062a6 <RBI_GetTxConfig>
 8006d5a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d016      	beq.n	8006d90 <SUBGRF_SetRfTxPower+0x48>
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	dc16      	bgt.n	8006d96 <SUBGRF_SetRfTxPower+0x4e>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <SUBGRF_SetRfTxPower+0x2e>
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d00a      	beq.n	8006d8a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8006d74:	e00f      	b.n	8006d96 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8006d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d7a:	2b0f      	cmp	r3, #15
 8006d7c:	dd02      	ble.n	8006d84 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	73fb      	strb	r3, [r7, #15]
            break;
 8006d82:	e009      	b.n	8006d98 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
            break;
 8006d88:	e006      	b.n	8006d98 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
            break;
 8006d8e:	e003      	b.n	8006d98 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8006d90:	2302      	movs	r3, #2
 8006d92:	73fb      	strb	r3, [r7, #15]
            break;
 8006d94:	e000      	b.n	8006d98 <SUBGRF_SetRfTxPower+0x50>
            break;
 8006d96:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8006d98:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff fd0b 	bl	80067bc <SUBGRF_SetTxParams>

    return paSelect;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8006db8:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	4798      	blx	r3
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	200005e0 	.word	0x200005e0

08006dcc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8006dd4:	4b03      	ldr	r3, [pc, #12]	@ (8006de4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2002      	movs	r0, #2
 8006dda:	4798      	blx	r3
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	200005e0 	.word	0x200005e0

08006de8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8006df0:	4b03      	ldr	r3, [pc, #12]	@ (8006e00 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2040      	movs	r0, #64	@ 0x40
 8006df6:	4798      	blx	r3
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200005e0 	.word	0x200005e0

08006e04 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d005      	beq.n	8006e26 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8006e1a:	e00a      	b.n	8006e32 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8006e1c:	4b07      	ldr	r3, [pc, #28]	@ (8006e3c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2080      	movs	r0, #128	@ 0x80
 8006e22:	4798      	blx	r3
            break;
 8006e24:	e005      	b.n	8006e32 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8006e26:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006e2e:	4798      	blx	r3
            break;
 8006e30:	bf00      	nop
    }
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200005e0 	.word	0x200005e0

08006e40 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8006e48:	4b04      	ldr	r3, [pc, #16]	@ (8006e5c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006e50:	4798      	blx	r3
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200005e0 	.word	0x200005e0

08006e60 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8006e68:	4b03      	ldr	r3, [pc, #12]	@ (8006e78 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2020      	movs	r0, #32
 8006e6e:	4798      	blx	r3
}
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	200005e0 	.word	0x200005e0

08006e7c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8006e84:	4b03      	ldr	r3, [pc, #12]	@ (8006e94 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2004      	movs	r0, #4
 8006e8a:	4798      	blx	r3
}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	200005e0 	.word	0x200005e0

08006e98 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8006ea0:	4b03      	ldr	r3, [pc, #12]	@ (8006eb0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2008      	movs	r0, #8
 8006ea6:	4798      	blx	r3
}
 8006ea8:	bf00      	nop
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	200005e0 	.word	0x200005e0

08006eb4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8006ebc:	4b03      	ldr	r3, [pc, #12]	@ (8006ecc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2010      	movs	r0, #16
 8006ec2:	4798      	blx	r3
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	200005e0 	.word	0x200005e0

08006ed0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8006ed8:	4b04      	ldr	r3, [pc, #16]	@ (8006eec <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006ee0:	4798      	blx	r3
}
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	200005e0 	.word	0x200005e0

08006ef0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8006efa:	f7ff f9e2 	bl	80062c2 <RBI_IsDCDC>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d112      	bne.n	8006f2a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8006f04:	f640 1023 	movw	r0, #2339	@ 0x923
 8006f08:	f7ff fea4 	bl	8006c54 <SUBGRF_ReadRegister>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	f023 0306 	bic.w	r3, r3, #6
 8006f16:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8006f18:	7bfa      	ldrb	r2, [r7, #15]
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	4619      	mov	r1, r3
 8006f22:	f640 1023 	movw	r0, #2339	@ 0x923
 8006f26:	f7ff fe81 	bl	8006c2c <SUBGRF_WriteRegister>
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <__cvt>:
 8006f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	bfbc      	itt	lt
 8006f40:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006f44:	4614      	movlt	r4, r2
 8006f46:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f48:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006f4a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006f4e:	bfb6      	itet	lt
 8006f50:	461d      	movlt	r5, r3
 8006f52:	2300      	movge	r3, #0
 8006f54:	232d      	movlt	r3, #45	@ 0x2d
 8006f56:	7013      	strb	r3, [r2, #0]
 8006f58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f5a:	f023 0820 	bic.w	r8, r3, #32
 8006f5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f62:	d005      	beq.n	8006f70 <__cvt+0x3e>
 8006f64:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f68:	d100      	bne.n	8006f6c <__cvt+0x3a>
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e000      	b.n	8006f72 <__cvt+0x40>
 8006f70:	2303      	movs	r3, #3
 8006f72:	aa07      	add	r2, sp, #28
 8006f74:	9204      	str	r2, [sp, #16]
 8006f76:	aa06      	add	r2, sp, #24
 8006f78:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f7c:	e9cd 3600 	strd	r3, r6, [sp]
 8006f80:	4622      	mov	r2, r4
 8006f82:	462b      	mov	r3, r5
 8006f84:	f000 ff40 	bl	8007e08 <_dtoa_r>
 8006f88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	d119      	bne.n	8006fc4 <__cvt+0x92>
 8006f90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f92:	07db      	lsls	r3, r3, #31
 8006f94:	d50e      	bpl.n	8006fb4 <__cvt+0x82>
 8006f96:	eb00 0906 	add.w	r9, r0, r6
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7f9 fd69 	bl	8000a78 <__aeabi_dcmpeq>
 8006fa6:	b108      	cbz	r0, 8006fac <__cvt+0x7a>
 8006fa8:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fac:	2230      	movs	r2, #48	@ 0x30
 8006fae:	9b07      	ldr	r3, [sp, #28]
 8006fb0:	454b      	cmp	r3, r9
 8006fb2:	d31e      	bcc.n	8006ff2 <__cvt+0xc0>
 8006fb4:	9b07      	ldr	r3, [sp, #28]
 8006fb6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006fb8:	1bdb      	subs	r3, r3, r7
 8006fba:	4638      	mov	r0, r7
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	b008      	add	sp, #32
 8006fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fc8:	eb00 0906 	add.w	r9, r0, r6
 8006fcc:	d1e5      	bne.n	8006f9a <__cvt+0x68>
 8006fce:	7803      	ldrb	r3, [r0, #0]
 8006fd0:	2b30      	cmp	r3, #48	@ 0x30
 8006fd2:	d10a      	bne.n	8006fea <__cvt+0xb8>
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4629      	mov	r1, r5
 8006fdc:	f7f9 fd4c 	bl	8000a78 <__aeabi_dcmpeq>
 8006fe0:	b918      	cbnz	r0, 8006fea <__cvt+0xb8>
 8006fe2:	f1c6 0601 	rsb	r6, r6, #1
 8006fe6:	f8ca 6000 	str.w	r6, [sl]
 8006fea:	f8da 3000 	ldr.w	r3, [sl]
 8006fee:	4499      	add	r9, r3
 8006ff0:	e7d3      	b.n	8006f9a <__cvt+0x68>
 8006ff2:	1c59      	adds	r1, r3, #1
 8006ff4:	9107      	str	r1, [sp, #28]
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	e7d9      	b.n	8006fae <__cvt+0x7c>

08006ffa <__exponent>:
 8006ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	bfba      	itte	lt
 8007000:	4249      	neglt	r1, r1
 8007002:	232d      	movlt	r3, #45	@ 0x2d
 8007004:	232b      	movge	r3, #43	@ 0x2b
 8007006:	2909      	cmp	r1, #9
 8007008:	7002      	strb	r2, [r0, #0]
 800700a:	7043      	strb	r3, [r0, #1]
 800700c:	dd29      	ble.n	8007062 <__exponent+0x68>
 800700e:	f10d 0307 	add.w	r3, sp, #7
 8007012:	461d      	mov	r5, r3
 8007014:	270a      	movs	r7, #10
 8007016:	461a      	mov	r2, r3
 8007018:	fbb1 f6f7 	udiv	r6, r1, r7
 800701c:	fb07 1416 	mls	r4, r7, r6, r1
 8007020:	3430      	adds	r4, #48	@ 0x30
 8007022:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007026:	460c      	mov	r4, r1
 8007028:	2c63      	cmp	r4, #99	@ 0x63
 800702a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800702e:	4631      	mov	r1, r6
 8007030:	dcf1      	bgt.n	8007016 <__exponent+0x1c>
 8007032:	3130      	adds	r1, #48	@ 0x30
 8007034:	1e94      	subs	r4, r2, #2
 8007036:	f803 1c01 	strb.w	r1, [r3, #-1]
 800703a:	1c41      	adds	r1, r0, #1
 800703c:	4623      	mov	r3, r4
 800703e:	42ab      	cmp	r3, r5
 8007040:	d30a      	bcc.n	8007058 <__exponent+0x5e>
 8007042:	f10d 0309 	add.w	r3, sp, #9
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	42ac      	cmp	r4, r5
 800704a:	bf88      	it	hi
 800704c:	2300      	movhi	r3, #0
 800704e:	3302      	adds	r3, #2
 8007050:	4403      	add	r3, r0
 8007052:	1a18      	subs	r0, r3, r0
 8007054:	b003      	add	sp, #12
 8007056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007058:	f813 6b01 	ldrb.w	r6, [r3], #1
 800705c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007060:	e7ed      	b.n	800703e <__exponent+0x44>
 8007062:	2330      	movs	r3, #48	@ 0x30
 8007064:	3130      	adds	r1, #48	@ 0x30
 8007066:	7083      	strb	r3, [r0, #2]
 8007068:	70c1      	strb	r1, [r0, #3]
 800706a:	1d03      	adds	r3, r0, #4
 800706c:	e7f1      	b.n	8007052 <__exponent+0x58>
	...

08007070 <_printf_float>:
 8007070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	b091      	sub	sp, #68	@ 0x44
 8007076:	460c      	mov	r4, r1
 8007078:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800707c:	4616      	mov	r6, r2
 800707e:	461f      	mov	r7, r3
 8007080:	4605      	mov	r5, r0
 8007082:	f000 fdbf 	bl	8007c04 <_localeconv_r>
 8007086:	6803      	ldr	r3, [r0, #0]
 8007088:	9308      	str	r3, [sp, #32]
 800708a:	4618      	mov	r0, r3
 800708c:	f7f9 f8c8 	bl	8000220 <strlen>
 8007090:	2300      	movs	r3, #0
 8007092:	930e      	str	r3, [sp, #56]	@ 0x38
 8007094:	f8d8 3000 	ldr.w	r3, [r8]
 8007098:	9009      	str	r0, [sp, #36]	@ 0x24
 800709a:	3307      	adds	r3, #7
 800709c:	f023 0307 	bic.w	r3, r3, #7
 80070a0:	f103 0208 	add.w	r2, r3, #8
 80070a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070a8:	f8d4 b000 	ldr.w	fp, [r4]
 80070ac:	f8c8 2000 	str.w	r2, [r8]
 80070b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80070be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80070c6:	4b9d      	ldr	r3, [pc, #628]	@ (800733c <_printf_float+0x2cc>)
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070cc:	f7f9 fd06 	bl	8000adc <__aeabi_dcmpun>
 80070d0:	bb70      	cbnz	r0, 8007130 <_printf_float+0xc0>
 80070d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80070d6:	4b99      	ldr	r3, [pc, #612]	@ (800733c <_printf_float+0x2cc>)
 80070d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070dc:	f7f9 fce0 	bl	8000aa0 <__aeabi_dcmple>
 80070e0:	bb30      	cbnz	r0, 8007130 <_printf_float+0xc0>
 80070e2:	2200      	movs	r2, #0
 80070e4:	2300      	movs	r3, #0
 80070e6:	4640      	mov	r0, r8
 80070e8:	4649      	mov	r1, r9
 80070ea:	f7f9 fccf 	bl	8000a8c <__aeabi_dcmplt>
 80070ee:	b110      	cbz	r0, 80070f6 <_printf_float+0x86>
 80070f0:	232d      	movs	r3, #45	@ 0x2d
 80070f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070f6:	4a92      	ldr	r2, [pc, #584]	@ (8007340 <_printf_float+0x2d0>)
 80070f8:	4b92      	ldr	r3, [pc, #584]	@ (8007344 <_printf_float+0x2d4>)
 80070fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80070fe:	bf8c      	ite	hi
 8007100:	4690      	movhi	r8, r2
 8007102:	4698      	movls	r8, r3
 8007104:	2303      	movs	r3, #3
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	f02b 0304 	bic.w	r3, fp, #4
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	f04f 0900 	mov.w	r9, #0
 8007112:	9700      	str	r7, [sp, #0]
 8007114:	4633      	mov	r3, r6
 8007116:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007118:	4621      	mov	r1, r4
 800711a:	4628      	mov	r0, r5
 800711c:	f000 f9d4 	bl	80074c8 <_printf_common>
 8007120:	3001      	adds	r0, #1
 8007122:	f040 808f 	bne.w	8007244 <_printf_float+0x1d4>
 8007126:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800712a:	b011      	add	sp, #68	@ 0x44
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	4640      	mov	r0, r8
 8007136:	4649      	mov	r1, r9
 8007138:	f7f9 fcd0 	bl	8000adc <__aeabi_dcmpun>
 800713c:	b140      	cbz	r0, 8007150 <_printf_float+0xe0>
 800713e:	464b      	mov	r3, r9
 8007140:	2b00      	cmp	r3, #0
 8007142:	bfbc      	itt	lt
 8007144:	232d      	movlt	r3, #45	@ 0x2d
 8007146:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800714a:	4a7f      	ldr	r2, [pc, #508]	@ (8007348 <_printf_float+0x2d8>)
 800714c:	4b7f      	ldr	r3, [pc, #508]	@ (800734c <_printf_float+0x2dc>)
 800714e:	e7d4      	b.n	80070fa <_printf_float+0x8a>
 8007150:	6863      	ldr	r3, [r4, #4]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007158:	d13f      	bne.n	80071da <_printf_float+0x16a>
 800715a:	2306      	movs	r3, #6
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007162:	2200      	movs	r2, #0
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	9206      	str	r2, [sp, #24]
 8007168:	aa0e      	add	r2, sp, #56	@ 0x38
 800716a:	e9cd a204 	strd	sl, r2, [sp, #16]
 800716e:	aa0d      	add	r2, sp, #52	@ 0x34
 8007170:	9203      	str	r2, [sp, #12]
 8007172:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007176:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800717a:	6863      	ldr	r3, [r4, #4]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	4642      	mov	r2, r8
 8007180:	464b      	mov	r3, r9
 8007182:	4628      	mov	r0, r5
 8007184:	910a      	str	r1, [sp, #40]	@ 0x28
 8007186:	f7ff fed4 	bl	8006f32 <__cvt>
 800718a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800718c:	2947      	cmp	r1, #71	@ 0x47
 800718e:	4680      	mov	r8, r0
 8007190:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007192:	d128      	bne.n	80071e6 <_printf_float+0x176>
 8007194:	1cc8      	adds	r0, r1, #3
 8007196:	db02      	blt.n	800719e <_printf_float+0x12e>
 8007198:	6863      	ldr	r3, [r4, #4]
 800719a:	4299      	cmp	r1, r3
 800719c:	dd40      	ble.n	8007220 <_printf_float+0x1b0>
 800719e:	f1aa 0a02 	sub.w	sl, sl, #2
 80071a2:	fa5f fa8a 	uxtb.w	sl, sl
 80071a6:	3901      	subs	r1, #1
 80071a8:	4652      	mov	r2, sl
 80071aa:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071ae:	910d      	str	r1, [sp, #52]	@ 0x34
 80071b0:	f7ff ff23 	bl	8006ffa <__exponent>
 80071b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071b6:	1813      	adds	r3, r2, r0
 80071b8:	2a01      	cmp	r2, #1
 80071ba:	4681      	mov	r9, r0
 80071bc:	6123      	str	r3, [r4, #16]
 80071be:	dc02      	bgt.n	80071c6 <_printf_float+0x156>
 80071c0:	6822      	ldr	r2, [r4, #0]
 80071c2:	07d2      	lsls	r2, r2, #31
 80071c4:	d501      	bpl.n	80071ca <_printf_float+0x15a>
 80071c6:	3301      	adds	r3, #1
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d09f      	beq.n	8007112 <_printf_float+0xa2>
 80071d2:	232d      	movs	r3, #45	@ 0x2d
 80071d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071d8:	e79b      	b.n	8007112 <_printf_float+0xa2>
 80071da:	2947      	cmp	r1, #71	@ 0x47
 80071dc:	d1bf      	bne.n	800715e <_printf_float+0xee>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1bd      	bne.n	800715e <_printf_float+0xee>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e7ba      	b.n	800715c <_printf_float+0xec>
 80071e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071ea:	d9dc      	bls.n	80071a6 <_printf_float+0x136>
 80071ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80071f0:	d118      	bne.n	8007224 <_printf_float+0x1b4>
 80071f2:	2900      	cmp	r1, #0
 80071f4:	6863      	ldr	r3, [r4, #4]
 80071f6:	dd0b      	ble.n	8007210 <_printf_float+0x1a0>
 80071f8:	6121      	str	r1, [r4, #16]
 80071fa:	b913      	cbnz	r3, 8007202 <_printf_float+0x192>
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	07d0      	lsls	r0, r2, #31
 8007200:	d502      	bpl.n	8007208 <_printf_float+0x198>
 8007202:	3301      	adds	r3, #1
 8007204:	440b      	add	r3, r1
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	65a1      	str	r1, [r4, #88]	@ 0x58
 800720a:	f04f 0900 	mov.w	r9, #0
 800720e:	e7dc      	b.n	80071ca <_printf_float+0x15a>
 8007210:	b913      	cbnz	r3, 8007218 <_printf_float+0x1a8>
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	07d2      	lsls	r2, r2, #31
 8007216:	d501      	bpl.n	800721c <_printf_float+0x1ac>
 8007218:	3302      	adds	r3, #2
 800721a:	e7f4      	b.n	8007206 <_printf_float+0x196>
 800721c:	2301      	movs	r3, #1
 800721e:	e7f2      	b.n	8007206 <_printf_float+0x196>
 8007220:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007226:	4299      	cmp	r1, r3
 8007228:	db05      	blt.n	8007236 <_printf_float+0x1c6>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	6121      	str	r1, [r4, #16]
 800722e:	07d8      	lsls	r0, r3, #31
 8007230:	d5ea      	bpl.n	8007208 <_printf_float+0x198>
 8007232:	1c4b      	adds	r3, r1, #1
 8007234:	e7e7      	b.n	8007206 <_printf_float+0x196>
 8007236:	2900      	cmp	r1, #0
 8007238:	bfd4      	ite	le
 800723a:	f1c1 0202 	rsble	r2, r1, #2
 800723e:	2201      	movgt	r2, #1
 8007240:	4413      	add	r3, r2
 8007242:	e7e0      	b.n	8007206 <_printf_float+0x196>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	055a      	lsls	r2, r3, #21
 8007248:	d407      	bmi.n	800725a <_printf_float+0x1ea>
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	4642      	mov	r2, r8
 800724e:	4631      	mov	r1, r6
 8007250:	4628      	mov	r0, r5
 8007252:	47b8      	blx	r7
 8007254:	3001      	adds	r0, #1
 8007256:	d12b      	bne.n	80072b0 <_printf_float+0x240>
 8007258:	e765      	b.n	8007126 <_printf_float+0xb6>
 800725a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800725e:	f240 80dd 	bls.w	800741c <_printf_float+0x3ac>
 8007262:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007266:	2200      	movs	r2, #0
 8007268:	2300      	movs	r3, #0
 800726a:	f7f9 fc05 	bl	8000a78 <__aeabi_dcmpeq>
 800726e:	2800      	cmp	r0, #0
 8007270:	d033      	beq.n	80072da <_printf_float+0x26a>
 8007272:	4a37      	ldr	r2, [pc, #220]	@ (8007350 <_printf_float+0x2e0>)
 8007274:	2301      	movs	r3, #1
 8007276:	4631      	mov	r1, r6
 8007278:	4628      	mov	r0, r5
 800727a:	47b8      	blx	r7
 800727c:	3001      	adds	r0, #1
 800727e:	f43f af52 	beq.w	8007126 <_printf_float+0xb6>
 8007282:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007286:	4543      	cmp	r3, r8
 8007288:	db02      	blt.n	8007290 <_printf_float+0x220>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	07d8      	lsls	r0, r3, #31
 800728e:	d50f      	bpl.n	80072b0 <_printf_float+0x240>
 8007290:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007294:	4631      	mov	r1, r6
 8007296:	4628      	mov	r0, r5
 8007298:	47b8      	blx	r7
 800729a:	3001      	adds	r0, #1
 800729c:	f43f af43 	beq.w	8007126 <_printf_float+0xb6>
 80072a0:	f04f 0900 	mov.w	r9, #0
 80072a4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80072a8:	f104 0a1a 	add.w	sl, r4, #26
 80072ac:	45c8      	cmp	r8, r9
 80072ae:	dc09      	bgt.n	80072c4 <_printf_float+0x254>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	079b      	lsls	r3, r3, #30
 80072b4:	f100 8103 	bmi.w	80074be <_printf_float+0x44e>
 80072b8:	68e0      	ldr	r0, [r4, #12]
 80072ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072bc:	4298      	cmp	r0, r3
 80072be:	bfb8      	it	lt
 80072c0:	4618      	movlt	r0, r3
 80072c2:	e732      	b.n	800712a <_printf_float+0xba>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4652      	mov	r2, sl
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f af29 	beq.w	8007126 <_printf_float+0xb6>
 80072d4:	f109 0901 	add.w	r9, r9, #1
 80072d8:	e7e8      	b.n	80072ac <_printf_float+0x23c>
 80072da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072dc:	2b00      	cmp	r3, #0
 80072de:	dc39      	bgt.n	8007354 <_printf_float+0x2e4>
 80072e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007350 <_printf_float+0x2e0>)
 80072e2:	2301      	movs	r3, #1
 80072e4:	4631      	mov	r1, r6
 80072e6:	4628      	mov	r0, r5
 80072e8:	47b8      	blx	r7
 80072ea:	3001      	adds	r0, #1
 80072ec:	f43f af1b 	beq.w	8007126 <_printf_float+0xb6>
 80072f0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80072f4:	ea59 0303 	orrs.w	r3, r9, r3
 80072f8:	d102      	bne.n	8007300 <_printf_float+0x290>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	07d9      	lsls	r1, r3, #31
 80072fe:	d5d7      	bpl.n	80072b0 <_printf_float+0x240>
 8007300:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f af0b 	beq.w	8007126 <_printf_float+0xb6>
 8007310:	f04f 0a00 	mov.w	sl, #0
 8007314:	f104 0b1a 	add.w	fp, r4, #26
 8007318:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800731a:	425b      	negs	r3, r3
 800731c:	4553      	cmp	r3, sl
 800731e:	dc01      	bgt.n	8007324 <_printf_float+0x2b4>
 8007320:	464b      	mov	r3, r9
 8007322:	e793      	b.n	800724c <_printf_float+0x1dc>
 8007324:	2301      	movs	r3, #1
 8007326:	465a      	mov	r2, fp
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f aef9 	beq.w	8007126 <_printf_float+0xb6>
 8007334:	f10a 0a01 	add.w	sl, sl, #1
 8007338:	e7ee      	b.n	8007318 <_printf_float+0x2a8>
 800733a:	bf00      	nop
 800733c:	7fefffff 	.word	0x7fefffff
 8007340:	08009b84 	.word	0x08009b84
 8007344:	08009b80 	.word	0x08009b80
 8007348:	08009b8c 	.word	0x08009b8c
 800734c:	08009b88 	.word	0x08009b88
 8007350:	08009b90 	.word	0x08009b90
 8007354:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007356:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800735a:	4553      	cmp	r3, sl
 800735c:	bfa8      	it	ge
 800735e:	4653      	movge	r3, sl
 8007360:	2b00      	cmp	r3, #0
 8007362:	4699      	mov	r9, r3
 8007364:	dc36      	bgt.n	80073d4 <_printf_float+0x364>
 8007366:	f04f 0b00 	mov.w	fp, #0
 800736a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800736e:	f104 021a 	add.w	r2, r4, #26
 8007372:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007374:	930a      	str	r3, [sp, #40]	@ 0x28
 8007376:	eba3 0309 	sub.w	r3, r3, r9
 800737a:	455b      	cmp	r3, fp
 800737c:	dc31      	bgt.n	80073e2 <_printf_float+0x372>
 800737e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007380:	459a      	cmp	sl, r3
 8007382:	dc3a      	bgt.n	80073fa <_printf_float+0x38a>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	07da      	lsls	r2, r3, #31
 8007388:	d437      	bmi.n	80073fa <_printf_float+0x38a>
 800738a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800738c:	ebaa 0903 	sub.w	r9, sl, r3
 8007390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007392:	ebaa 0303 	sub.w	r3, sl, r3
 8007396:	4599      	cmp	r9, r3
 8007398:	bfa8      	it	ge
 800739a:	4699      	movge	r9, r3
 800739c:	f1b9 0f00 	cmp.w	r9, #0
 80073a0:	dc33      	bgt.n	800740a <_printf_float+0x39a>
 80073a2:	f04f 0800 	mov.w	r8, #0
 80073a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073aa:	f104 0b1a 	add.w	fp, r4, #26
 80073ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073b0:	ebaa 0303 	sub.w	r3, sl, r3
 80073b4:	eba3 0309 	sub.w	r3, r3, r9
 80073b8:	4543      	cmp	r3, r8
 80073ba:	f77f af79 	ble.w	80072b0 <_printf_float+0x240>
 80073be:	2301      	movs	r3, #1
 80073c0:	465a      	mov	r2, fp
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b8      	blx	r7
 80073c8:	3001      	adds	r0, #1
 80073ca:	f43f aeac 	beq.w	8007126 <_printf_float+0xb6>
 80073ce:	f108 0801 	add.w	r8, r8, #1
 80073d2:	e7ec      	b.n	80073ae <_printf_float+0x33e>
 80073d4:	4642      	mov	r2, r8
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	d1c2      	bne.n	8007366 <_printf_float+0x2f6>
 80073e0:	e6a1      	b.n	8007126 <_printf_float+0xb6>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f ae9a 	beq.w	8007126 <_printf_float+0xb6>
 80073f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073f4:	f10b 0b01 	add.w	fp, fp, #1
 80073f8:	e7bb      	b.n	8007372 <_printf_float+0x302>
 80073fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	d1c0      	bne.n	800738a <_printf_float+0x31a>
 8007408:	e68d      	b.n	8007126 <_printf_float+0xb6>
 800740a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800740c:	464b      	mov	r3, r9
 800740e:	4442      	add	r2, r8
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	d1c3      	bne.n	80073a2 <_printf_float+0x332>
 800741a:	e684      	b.n	8007126 <_printf_float+0xb6>
 800741c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007420:	f1ba 0f01 	cmp.w	sl, #1
 8007424:	dc01      	bgt.n	800742a <_printf_float+0x3ba>
 8007426:	07db      	lsls	r3, r3, #31
 8007428:	d536      	bpl.n	8007498 <_printf_float+0x428>
 800742a:	2301      	movs	r3, #1
 800742c:	4642      	mov	r2, r8
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f ae76 	beq.w	8007126 <_printf_float+0xb6>
 800743a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	f43f ae6e 	beq.w	8007126 <_printf_float+0xb6>
 800744a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800744e:	2200      	movs	r2, #0
 8007450:	2300      	movs	r3, #0
 8007452:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007456:	f7f9 fb0f 	bl	8000a78 <__aeabi_dcmpeq>
 800745a:	b9c0      	cbnz	r0, 800748e <_printf_float+0x41e>
 800745c:	4653      	mov	r3, sl
 800745e:	f108 0201 	add.w	r2, r8, #1
 8007462:	4631      	mov	r1, r6
 8007464:	4628      	mov	r0, r5
 8007466:	47b8      	blx	r7
 8007468:	3001      	adds	r0, #1
 800746a:	d10c      	bne.n	8007486 <_printf_float+0x416>
 800746c:	e65b      	b.n	8007126 <_printf_float+0xb6>
 800746e:	2301      	movs	r3, #1
 8007470:	465a      	mov	r2, fp
 8007472:	4631      	mov	r1, r6
 8007474:	4628      	mov	r0, r5
 8007476:	47b8      	blx	r7
 8007478:	3001      	adds	r0, #1
 800747a:	f43f ae54 	beq.w	8007126 <_printf_float+0xb6>
 800747e:	f108 0801 	add.w	r8, r8, #1
 8007482:	45d0      	cmp	r8, sl
 8007484:	dbf3      	blt.n	800746e <_printf_float+0x3fe>
 8007486:	464b      	mov	r3, r9
 8007488:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800748c:	e6df      	b.n	800724e <_printf_float+0x1de>
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	f104 0b1a 	add.w	fp, r4, #26
 8007496:	e7f4      	b.n	8007482 <_printf_float+0x412>
 8007498:	2301      	movs	r3, #1
 800749a:	4642      	mov	r2, r8
 800749c:	e7e1      	b.n	8007462 <_printf_float+0x3f2>
 800749e:	2301      	movs	r3, #1
 80074a0:	464a      	mov	r2, r9
 80074a2:	4631      	mov	r1, r6
 80074a4:	4628      	mov	r0, r5
 80074a6:	47b8      	blx	r7
 80074a8:	3001      	adds	r0, #1
 80074aa:	f43f ae3c 	beq.w	8007126 <_printf_float+0xb6>
 80074ae:	f108 0801 	add.w	r8, r8, #1
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80074b6:	1a5b      	subs	r3, r3, r1
 80074b8:	4543      	cmp	r3, r8
 80074ba:	dcf0      	bgt.n	800749e <_printf_float+0x42e>
 80074bc:	e6fc      	b.n	80072b8 <_printf_float+0x248>
 80074be:	f04f 0800 	mov.w	r8, #0
 80074c2:	f104 0919 	add.w	r9, r4, #25
 80074c6:	e7f4      	b.n	80074b2 <_printf_float+0x442>

080074c8 <_printf_common>:
 80074c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	4616      	mov	r6, r2
 80074ce:	4698      	mov	r8, r3
 80074d0:	688a      	ldr	r2, [r1, #8]
 80074d2:	690b      	ldr	r3, [r1, #16]
 80074d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074d8:	4293      	cmp	r3, r2
 80074da:	bfb8      	it	lt
 80074dc:	4613      	movlt	r3, r2
 80074de:	6033      	str	r3, [r6, #0]
 80074e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074e4:	4607      	mov	r7, r0
 80074e6:	460c      	mov	r4, r1
 80074e8:	b10a      	cbz	r2, 80074ee <_printf_common+0x26>
 80074ea:	3301      	adds	r3, #1
 80074ec:	6033      	str	r3, [r6, #0]
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	0699      	lsls	r1, r3, #26
 80074f2:	bf42      	ittt	mi
 80074f4:	6833      	ldrmi	r3, [r6, #0]
 80074f6:	3302      	addmi	r3, #2
 80074f8:	6033      	strmi	r3, [r6, #0]
 80074fa:	6825      	ldr	r5, [r4, #0]
 80074fc:	f015 0506 	ands.w	r5, r5, #6
 8007500:	d106      	bne.n	8007510 <_printf_common+0x48>
 8007502:	f104 0a19 	add.w	sl, r4, #25
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	6832      	ldr	r2, [r6, #0]
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	42ab      	cmp	r3, r5
 800750e:	dc26      	bgt.n	800755e <_printf_common+0x96>
 8007510:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007514:	6822      	ldr	r2, [r4, #0]
 8007516:	3b00      	subs	r3, #0
 8007518:	bf18      	it	ne
 800751a:	2301      	movne	r3, #1
 800751c:	0692      	lsls	r2, r2, #26
 800751e:	d42b      	bmi.n	8007578 <_printf_common+0xb0>
 8007520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007524:	4641      	mov	r1, r8
 8007526:	4638      	mov	r0, r7
 8007528:	47c8      	blx	r9
 800752a:	3001      	adds	r0, #1
 800752c:	d01e      	beq.n	800756c <_printf_common+0xa4>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	6922      	ldr	r2, [r4, #16]
 8007532:	f003 0306 	and.w	r3, r3, #6
 8007536:	2b04      	cmp	r3, #4
 8007538:	bf02      	ittt	eq
 800753a:	68e5      	ldreq	r5, [r4, #12]
 800753c:	6833      	ldreq	r3, [r6, #0]
 800753e:	1aed      	subeq	r5, r5, r3
 8007540:	68a3      	ldr	r3, [r4, #8]
 8007542:	bf0c      	ite	eq
 8007544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007548:	2500      	movne	r5, #0
 800754a:	4293      	cmp	r3, r2
 800754c:	bfc4      	itt	gt
 800754e:	1a9b      	subgt	r3, r3, r2
 8007550:	18ed      	addgt	r5, r5, r3
 8007552:	2600      	movs	r6, #0
 8007554:	341a      	adds	r4, #26
 8007556:	42b5      	cmp	r5, r6
 8007558:	d11a      	bne.n	8007590 <_printf_common+0xc8>
 800755a:	2000      	movs	r0, #0
 800755c:	e008      	b.n	8007570 <_printf_common+0xa8>
 800755e:	2301      	movs	r3, #1
 8007560:	4652      	mov	r2, sl
 8007562:	4641      	mov	r1, r8
 8007564:	4638      	mov	r0, r7
 8007566:	47c8      	blx	r9
 8007568:	3001      	adds	r0, #1
 800756a:	d103      	bne.n	8007574 <_printf_common+0xac>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007574:	3501      	adds	r5, #1
 8007576:	e7c6      	b.n	8007506 <_printf_common+0x3e>
 8007578:	18e1      	adds	r1, r4, r3
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	2030      	movs	r0, #48	@ 0x30
 800757e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007582:	4422      	add	r2, r4
 8007584:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007588:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800758c:	3302      	adds	r3, #2
 800758e:	e7c7      	b.n	8007520 <_printf_common+0x58>
 8007590:	2301      	movs	r3, #1
 8007592:	4622      	mov	r2, r4
 8007594:	4641      	mov	r1, r8
 8007596:	4638      	mov	r0, r7
 8007598:	47c8      	blx	r9
 800759a:	3001      	adds	r0, #1
 800759c:	d0e6      	beq.n	800756c <_printf_common+0xa4>
 800759e:	3601      	adds	r6, #1
 80075a0:	e7d9      	b.n	8007556 <_printf_common+0x8e>
	...

080075a4 <_printf_i>:
 80075a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	7e0f      	ldrb	r7, [r1, #24]
 80075aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075ac:	2f78      	cmp	r7, #120	@ 0x78
 80075ae:	4691      	mov	r9, r2
 80075b0:	4680      	mov	r8, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	469a      	mov	sl, r3
 80075b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075ba:	d807      	bhi.n	80075cc <_printf_i+0x28>
 80075bc:	2f62      	cmp	r7, #98	@ 0x62
 80075be:	d80a      	bhi.n	80075d6 <_printf_i+0x32>
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	f000 80d1 	beq.w	8007768 <_printf_i+0x1c4>
 80075c6:	2f58      	cmp	r7, #88	@ 0x58
 80075c8:	f000 80b8 	beq.w	800773c <_printf_i+0x198>
 80075cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075d4:	e03a      	b.n	800764c <_printf_i+0xa8>
 80075d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075da:	2b15      	cmp	r3, #21
 80075dc:	d8f6      	bhi.n	80075cc <_printf_i+0x28>
 80075de:	a101      	add	r1, pc, #4	@ (adr r1, 80075e4 <_printf_i+0x40>)
 80075e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	08007651 	.word	0x08007651
 80075ec:	080075cd 	.word	0x080075cd
 80075f0:	080075cd 	.word	0x080075cd
 80075f4:	080075cd 	.word	0x080075cd
 80075f8:	080075cd 	.word	0x080075cd
 80075fc:	08007651 	.word	0x08007651
 8007600:	080075cd 	.word	0x080075cd
 8007604:	080075cd 	.word	0x080075cd
 8007608:	080075cd 	.word	0x080075cd
 800760c:	080075cd 	.word	0x080075cd
 8007610:	0800774f 	.word	0x0800774f
 8007614:	0800767b 	.word	0x0800767b
 8007618:	08007709 	.word	0x08007709
 800761c:	080075cd 	.word	0x080075cd
 8007620:	080075cd 	.word	0x080075cd
 8007624:	08007771 	.word	0x08007771
 8007628:	080075cd 	.word	0x080075cd
 800762c:	0800767b 	.word	0x0800767b
 8007630:	080075cd 	.word	0x080075cd
 8007634:	080075cd 	.word	0x080075cd
 8007638:	08007711 	.word	0x08007711
 800763c:	6833      	ldr	r3, [r6, #0]
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6032      	str	r2, [r6, #0]
 8007644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007648:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800764c:	2301      	movs	r3, #1
 800764e:	e09c      	b.n	800778a <_printf_i+0x1e6>
 8007650:	6833      	ldr	r3, [r6, #0]
 8007652:	6820      	ldr	r0, [r4, #0]
 8007654:	1d19      	adds	r1, r3, #4
 8007656:	6031      	str	r1, [r6, #0]
 8007658:	0606      	lsls	r6, r0, #24
 800765a:	d501      	bpl.n	8007660 <_printf_i+0xbc>
 800765c:	681d      	ldr	r5, [r3, #0]
 800765e:	e003      	b.n	8007668 <_printf_i+0xc4>
 8007660:	0645      	lsls	r5, r0, #25
 8007662:	d5fb      	bpl.n	800765c <_printf_i+0xb8>
 8007664:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007668:	2d00      	cmp	r5, #0
 800766a:	da03      	bge.n	8007674 <_printf_i+0xd0>
 800766c:	232d      	movs	r3, #45	@ 0x2d
 800766e:	426d      	negs	r5, r5
 8007670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007674:	4858      	ldr	r0, [pc, #352]	@ (80077d8 <_printf_i+0x234>)
 8007676:	230a      	movs	r3, #10
 8007678:	e011      	b.n	800769e <_printf_i+0xfa>
 800767a:	6821      	ldr	r1, [r4, #0]
 800767c:	6833      	ldr	r3, [r6, #0]
 800767e:	0608      	lsls	r0, r1, #24
 8007680:	f853 5b04 	ldr.w	r5, [r3], #4
 8007684:	d402      	bmi.n	800768c <_printf_i+0xe8>
 8007686:	0649      	lsls	r1, r1, #25
 8007688:	bf48      	it	mi
 800768a:	b2ad      	uxthmi	r5, r5
 800768c:	2f6f      	cmp	r7, #111	@ 0x6f
 800768e:	4852      	ldr	r0, [pc, #328]	@ (80077d8 <_printf_i+0x234>)
 8007690:	6033      	str	r3, [r6, #0]
 8007692:	bf14      	ite	ne
 8007694:	230a      	movne	r3, #10
 8007696:	2308      	moveq	r3, #8
 8007698:	2100      	movs	r1, #0
 800769a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800769e:	6866      	ldr	r6, [r4, #4]
 80076a0:	60a6      	str	r6, [r4, #8]
 80076a2:	2e00      	cmp	r6, #0
 80076a4:	db05      	blt.n	80076b2 <_printf_i+0x10e>
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	432e      	orrs	r6, r5
 80076aa:	f021 0104 	bic.w	r1, r1, #4
 80076ae:	6021      	str	r1, [r4, #0]
 80076b0:	d04b      	beq.n	800774a <_printf_i+0x1a6>
 80076b2:	4616      	mov	r6, r2
 80076b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80076b8:	fb03 5711 	mls	r7, r3, r1, r5
 80076bc:	5dc7      	ldrb	r7, [r0, r7]
 80076be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076c2:	462f      	mov	r7, r5
 80076c4:	42bb      	cmp	r3, r7
 80076c6:	460d      	mov	r5, r1
 80076c8:	d9f4      	bls.n	80076b4 <_printf_i+0x110>
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d10b      	bne.n	80076e6 <_printf_i+0x142>
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	07df      	lsls	r7, r3, #31
 80076d2:	d508      	bpl.n	80076e6 <_printf_i+0x142>
 80076d4:	6923      	ldr	r3, [r4, #16]
 80076d6:	6861      	ldr	r1, [r4, #4]
 80076d8:	4299      	cmp	r1, r3
 80076da:	bfde      	ittt	le
 80076dc:	2330      	movle	r3, #48	@ 0x30
 80076de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076e2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80076e6:	1b92      	subs	r2, r2, r6
 80076e8:	6122      	str	r2, [r4, #16]
 80076ea:	f8cd a000 	str.w	sl, [sp]
 80076ee:	464b      	mov	r3, r9
 80076f0:	aa03      	add	r2, sp, #12
 80076f2:	4621      	mov	r1, r4
 80076f4:	4640      	mov	r0, r8
 80076f6:	f7ff fee7 	bl	80074c8 <_printf_common>
 80076fa:	3001      	adds	r0, #1
 80076fc:	d14a      	bne.n	8007794 <_printf_i+0x1f0>
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007702:	b004      	add	sp, #16
 8007704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	f043 0320 	orr.w	r3, r3, #32
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	4832      	ldr	r0, [pc, #200]	@ (80077dc <_printf_i+0x238>)
 8007712:	2778      	movs	r7, #120	@ 0x78
 8007714:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	6831      	ldr	r1, [r6, #0]
 800771c:	061f      	lsls	r7, r3, #24
 800771e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007722:	d402      	bmi.n	800772a <_printf_i+0x186>
 8007724:	065f      	lsls	r7, r3, #25
 8007726:	bf48      	it	mi
 8007728:	b2ad      	uxthmi	r5, r5
 800772a:	6031      	str	r1, [r6, #0]
 800772c:	07d9      	lsls	r1, r3, #31
 800772e:	bf44      	itt	mi
 8007730:	f043 0320 	orrmi.w	r3, r3, #32
 8007734:	6023      	strmi	r3, [r4, #0]
 8007736:	b11d      	cbz	r5, 8007740 <_printf_i+0x19c>
 8007738:	2310      	movs	r3, #16
 800773a:	e7ad      	b.n	8007698 <_printf_i+0xf4>
 800773c:	4826      	ldr	r0, [pc, #152]	@ (80077d8 <_printf_i+0x234>)
 800773e:	e7e9      	b.n	8007714 <_printf_i+0x170>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	f023 0320 	bic.w	r3, r3, #32
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	e7f6      	b.n	8007738 <_printf_i+0x194>
 800774a:	4616      	mov	r6, r2
 800774c:	e7bd      	b.n	80076ca <_printf_i+0x126>
 800774e:	6833      	ldr	r3, [r6, #0]
 8007750:	6825      	ldr	r5, [r4, #0]
 8007752:	6961      	ldr	r1, [r4, #20]
 8007754:	1d18      	adds	r0, r3, #4
 8007756:	6030      	str	r0, [r6, #0]
 8007758:	062e      	lsls	r6, r5, #24
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	d501      	bpl.n	8007762 <_printf_i+0x1be>
 800775e:	6019      	str	r1, [r3, #0]
 8007760:	e002      	b.n	8007768 <_printf_i+0x1c4>
 8007762:	0668      	lsls	r0, r5, #25
 8007764:	d5fb      	bpl.n	800775e <_printf_i+0x1ba>
 8007766:	8019      	strh	r1, [r3, #0]
 8007768:	2300      	movs	r3, #0
 800776a:	6123      	str	r3, [r4, #16]
 800776c:	4616      	mov	r6, r2
 800776e:	e7bc      	b.n	80076ea <_printf_i+0x146>
 8007770:	6833      	ldr	r3, [r6, #0]
 8007772:	1d1a      	adds	r2, r3, #4
 8007774:	6032      	str	r2, [r6, #0]
 8007776:	681e      	ldr	r6, [r3, #0]
 8007778:	6862      	ldr	r2, [r4, #4]
 800777a:	2100      	movs	r1, #0
 800777c:	4630      	mov	r0, r6
 800777e:	f7f8 fcff 	bl	8000180 <memchr>
 8007782:	b108      	cbz	r0, 8007788 <_printf_i+0x1e4>
 8007784:	1b80      	subs	r0, r0, r6
 8007786:	6060      	str	r0, [r4, #4]
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	6123      	str	r3, [r4, #16]
 800778c:	2300      	movs	r3, #0
 800778e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007792:	e7aa      	b.n	80076ea <_printf_i+0x146>
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	4632      	mov	r2, r6
 8007798:	4649      	mov	r1, r9
 800779a:	4640      	mov	r0, r8
 800779c:	47d0      	blx	sl
 800779e:	3001      	adds	r0, #1
 80077a0:	d0ad      	beq.n	80076fe <_printf_i+0x15a>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	079b      	lsls	r3, r3, #30
 80077a6:	d413      	bmi.n	80077d0 <_printf_i+0x22c>
 80077a8:	68e0      	ldr	r0, [r4, #12]
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	4298      	cmp	r0, r3
 80077ae:	bfb8      	it	lt
 80077b0:	4618      	movlt	r0, r3
 80077b2:	e7a6      	b.n	8007702 <_printf_i+0x15e>
 80077b4:	2301      	movs	r3, #1
 80077b6:	4632      	mov	r2, r6
 80077b8:	4649      	mov	r1, r9
 80077ba:	4640      	mov	r0, r8
 80077bc:	47d0      	blx	sl
 80077be:	3001      	adds	r0, #1
 80077c0:	d09d      	beq.n	80076fe <_printf_i+0x15a>
 80077c2:	3501      	adds	r5, #1
 80077c4:	68e3      	ldr	r3, [r4, #12]
 80077c6:	9903      	ldr	r1, [sp, #12]
 80077c8:	1a5b      	subs	r3, r3, r1
 80077ca:	42ab      	cmp	r3, r5
 80077cc:	dcf2      	bgt.n	80077b4 <_printf_i+0x210>
 80077ce:	e7eb      	b.n	80077a8 <_printf_i+0x204>
 80077d0:	2500      	movs	r5, #0
 80077d2:	f104 0619 	add.w	r6, r4, #25
 80077d6:	e7f5      	b.n	80077c4 <_printf_i+0x220>
 80077d8:	08009b92 	.word	0x08009b92
 80077dc:	08009ba3 	.word	0x08009ba3

080077e0 <std>:
 80077e0:	2300      	movs	r3, #0
 80077e2:	b510      	push	{r4, lr}
 80077e4:	4604      	mov	r4, r0
 80077e6:	e9c0 3300 	strd	r3, r3, [r0]
 80077ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ee:	6083      	str	r3, [r0, #8]
 80077f0:	8181      	strh	r1, [r0, #12]
 80077f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80077f4:	81c2      	strh	r2, [r0, #14]
 80077f6:	6183      	str	r3, [r0, #24]
 80077f8:	4619      	mov	r1, r3
 80077fa:	2208      	movs	r2, #8
 80077fc:	305c      	adds	r0, #92	@ 0x5c
 80077fe:	f000 f9f9 	bl	8007bf4 <memset>
 8007802:	4b0d      	ldr	r3, [pc, #52]	@ (8007838 <std+0x58>)
 8007804:	6263      	str	r3, [r4, #36]	@ 0x24
 8007806:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <std+0x5c>)
 8007808:	62a3      	str	r3, [r4, #40]	@ 0x28
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <std+0x60>)
 800780c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800780e:	4b0d      	ldr	r3, [pc, #52]	@ (8007844 <std+0x64>)
 8007810:	6323      	str	r3, [r4, #48]	@ 0x30
 8007812:	4b0d      	ldr	r3, [pc, #52]	@ (8007848 <std+0x68>)
 8007814:	6224      	str	r4, [r4, #32]
 8007816:	429c      	cmp	r4, r3
 8007818:	d006      	beq.n	8007828 <std+0x48>
 800781a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800781e:	4294      	cmp	r4, r2
 8007820:	d002      	beq.n	8007828 <std+0x48>
 8007822:	33d0      	adds	r3, #208	@ 0xd0
 8007824:	429c      	cmp	r4, r3
 8007826:	d105      	bne.n	8007834 <std+0x54>
 8007828:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007830:	f000 ba5c 	b.w	8007cec <__retarget_lock_init_recursive>
 8007834:	bd10      	pop	{r4, pc}
 8007836:	bf00      	nop
 8007838:	08007a45 	.word	0x08007a45
 800783c:	08007a67 	.word	0x08007a67
 8007840:	08007a9f 	.word	0x08007a9f
 8007844:	08007ac3 	.word	0x08007ac3
 8007848:	200005e4 	.word	0x200005e4

0800784c <stdio_exit_handler>:
 800784c:	4a02      	ldr	r2, [pc, #8]	@ (8007858 <stdio_exit_handler+0xc>)
 800784e:	4903      	ldr	r1, [pc, #12]	@ (800785c <stdio_exit_handler+0x10>)
 8007850:	4803      	ldr	r0, [pc, #12]	@ (8007860 <stdio_exit_handler+0x14>)
 8007852:	f000 b869 	b.w	8007928 <_fwalk_sglue>
 8007856:	bf00      	nop
 8007858:	2000001c 	.word	0x2000001c
 800785c:	08009619 	.word	0x08009619
 8007860:	2000002c 	.word	0x2000002c

08007864 <cleanup_stdio>:
 8007864:	6841      	ldr	r1, [r0, #4]
 8007866:	4b0c      	ldr	r3, [pc, #48]	@ (8007898 <cleanup_stdio+0x34>)
 8007868:	4299      	cmp	r1, r3
 800786a:	b510      	push	{r4, lr}
 800786c:	4604      	mov	r4, r0
 800786e:	d001      	beq.n	8007874 <cleanup_stdio+0x10>
 8007870:	f001 fed2 	bl	8009618 <_fflush_r>
 8007874:	68a1      	ldr	r1, [r4, #8]
 8007876:	4b09      	ldr	r3, [pc, #36]	@ (800789c <cleanup_stdio+0x38>)
 8007878:	4299      	cmp	r1, r3
 800787a:	d002      	beq.n	8007882 <cleanup_stdio+0x1e>
 800787c:	4620      	mov	r0, r4
 800787e:	f001 fecb 	bl	8009618 <_fflush_r>
 8007882:	68e1      	ldr	r1, [r4, #12]
 8007884:	4b06      	ldr	r3, [pc, #24]	@ (80078a0 <cleanup_stdio+0x3c>)
 8007886:	4299      	cmp	r1, r3
 8007888:	d004      	beq.n	8007894 <cleanup_stdio+0x30>
 800788a:	4620      	mov	r0, r4
 800788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007890:	f001 bec2 	b.w	8009618 <_fflush_r>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	bf00      	nop
 8007898:	200005e4 	.word	0x200005e4
 800789c:	2000064c 	.word	0x2000064c
 80078a0:	200006b4 	.word	0x200006b4

080078a4 <global_stdio_init.part.0>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <global_stdio_init.part.0+0x30>)
 80078a8:	4c0b      	ldr	r4, [pc, #44]	@ (80078d8 <global_stdio_init.part.0+0x34>)
 80078aa:	4a0c      	ldr	r2, [pc, #48]	@ (80078dc <global_stdio_init.part.0+0x38>)
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	4620      	mov	r0, r4
 80078b0:	2200      	movs	r2, #0
 80078b2:	2104      	movs	r1, #4
 80078b4:	f7ff ff94 	bl	80077e0 <std>
 80078b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078bc:	2201      	movs	r2, #1
 80078be:	2109      	movs	r1, #9
 80078c0:	f7ff ff8e 	bl	80077e0 <std>
 80078c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078c8:	2202      	movs	r2, #2
 80078ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ce:	2112      	movs	r1, #18
 80078d0:	f7ff bf86 	b.w	80077e0 <std>
 80078d4:	2000071c 	.word	0x2000071c
 80078d8:	200005e4 	.word	0x200005e4
 80078dc:	0800784d 	.word	0x0800784d

080078e0 <__sfp_lock_acquire>:
 80078e0:	4801      	ldr	r0, [pc, #4]	@ (80078e8 <__sfp_lock_acquire+0x8>)
 80078e2:	f000 ba04 	b.w	8007cee <__retarget_lock_acquire_recursive>
 80078e6:	bf00      	nop
 80078e8:	20000725 	.word	0x20000725

080078ec <__sfp_lock_release>:
 80078ec:	4801      	ldr	r0, [pc, #4]	@ (80078f4 <__sfp_lock_release+0x8>)
 80078ee:	f000 b9ff 	b.w	8007cf0 <__retarget_lock_release_recursive>
 80078f2:	bf00      	nop
 80078f4:	20000725 	.word	0x20000725

080078f8 <__sinit>:
 80078f8:	b510      	push	{r4, lr}
 80078fa:	4604      	mov	r4, r0
 80078fc:	f7ff fff0 	bl	80078e0 <__sfp_lock_acquire>
 8007900:	6a23      	ldr	r3, [r4, #32]
 8007902:	b11b      	cbz	r3, 800790c <__sinit+0x14>
 8007904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007908:	f7ff bff0 	b.w	80078ec <__sfp_lock_release>
 800790c:	4b04      	ldr	r3, [pc, #16]	@ (8007920 <__sinit+0x28>)
 800790e:	6223      	str	r3, [r4, #32]
 8007910:	4b04      	ldr	r3, [pc, #16]	@ (8007924 <__sinit+0x2c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1f5      	bne.n	8007904 <__sinit+0xc>
 8007918:	f7ff ffc4 	bl	80078a4 <global_stdio_init.part.0>
 800791c:	e7f2      	b.n	8007904 <__sinit+0xc>
 800791e:	bf00      	nop
 8007920:	08007865 	.word	0x08007865
 8007924:	2000071c 	.word	0x2000071c

08007928 <_fwalk_sglue>:
 8007928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800792c:	4607      	mov	r7, r0
 800792e:	4688      	mov	r8, r1
 8007930:	4614      	mov	r4, r2
 8007932:	2600      	movs	r6, #0
 8007934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007938:	f1b9 0901 	subs.w	r9, r9, #1
 800793c:	d505      	bpl.n	800794a <_fwalk_sglue+0x22>
 800793e:	6824      	ldr	r4, [r4, #0]
 8007940:	2c00      	cmp	r4, #0
 8007942:	d1f7      	bne.n	8007934 <_fwalk_sglue+0xc>
 8007944:	4630      	mov	r0, r6
 8007946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794a:	89ab      	ldrh	r3, [r5, #12]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d907      	bls.n	8007960 <_fwalk_sglue+0x38>
 8007950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007954:	3301      	adds	r3, #1
 8007956:	d003      	beq.n	8007960 <_fwalk_sglue+0x38>
 8007958:	4629      	mov	r1, r5
 800795a:	4638      	mov	r0, r7
 800795c:	47c0      	blx	r8
 800795e:	4306      	orrs	r6, r0
 8007960:	3568      	adds	r5, #104	@ 0x68
 8007962:	e7e9      	b.n	8007938 <_fwalk_sglue+0x10>

08007964 <iprintf>:
 8007964:	b40f      	push	{r0, r1, r2, r3}
 8007966:	b507      	push	{r0, r1, r2, lr}
 8007968:	4906      	ldr	r1, [pc, #24]	@ (8007984 <iprintf+0x20>)
 800796a:	ab04      	add	r3, sp, #16
 800796c:	6808      	ldr	r0, [r1, #0]
 800796e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007972:	6881      	ldr	r1, [r0, #8]
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	f001 fcb7 	bl	80092e8 <_vfiprintf_r>
 800797a:	b003      	add	sp, #12
 800797c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007980:	b004      	add	sp, #16
 8007982:	4770      	bx	lr
 8007984:	20000028 	.word	0x20000028

08007988 <_puts_r>:
 8007988:	6a03      	ldr	r3, [r0, #32]
 800798a:	b570      	push	{r4, r5, r6, lr}
 800798c:	6884      	ldr	r4, [r0, #8]
 800798e:	4605      	mov	r5, r0
 8007990:	460e      	mov	r6, r1
 8007992:	b90b      	cbnz	r3, 8007998 <_puts_r+0x10>
 8007994:	f7ff ffb0 	bl	80078f8 <__sinit>
 8007998:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800799a:	07db      	lsls	r3, r3, #31
 800799c:	d405      	bmi.n	80079aa <_puts_r+0x22>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	0598      	lsls	r0, r3, #22
 80079a2:	d402      	bmi.n	80079aa <_puts_r+0x22>
 80079a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079a6:	f000 f9a2 	bl	8007cee <__retarget_lock_acquire_recursive>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	0719      	lsls	r1, r3, #28
 80079ae:	d502      	bpl.n	80079b6 <_puts_r+0x2e>
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d135      	bne.n	8007a22 <_puts_r+0x9a>
 80079b6:	4621      	mov	r1, r4
 80079b8:	4628      	mov	r0, r5
 80079ba:	f000 f8c5 	bl	8007b48 <__swsetup_r>
 80079be:	b380      	cbz	r0, 8007a22 <_puts_r+0x9a>
 80079c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80079c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079c6:	07da      	lsls	r2, r3, #31
 80079c8:	d405      	bmi.n	80079d6 <_puts_r+0x4e>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	059b      	lsls	r3, r3, #22
 80079ce:	d402      	bmi.n	80079d6 <_puts_r+0x4e>
 80079d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079d2:	f000 f98d 	bl	8007cf0 <__retarget_lock_release_recursive>
 80079d6:	4628      	mov	r0, r5
 80079d8:	bd70      	pop	{r4, r5, r6, pc}
 80079da:	2b00      	cmp	r3, #0
 80079dc:	da04      	bge.n	80079e8 <_puts_r+0x60>
 80079de:	69a2      	ldr	r2, [r4, #24]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	dc17      	bgt.n	8007a14 <_puts_r+0x8c>
 80079e4:	290a      	cmp	r1, #10
 80079e6:	d015      	beq.n	8007a14 <_puts_r+0x8c>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	6022      	str	r2, [r4, #0]
 80079ee:	7019      	strb	r1, [r3, #0]
 80079f0:	68a3      	ldr	r3, [r4, #8]
 80079f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079f6:	3b01      	subs	r3, #1
 80079f8:	60a3      	str	r3, [r4, #8]
 80079fa:	2900      	cmp	r1, #0
 80079fc:	d1ed      	bne.n	80079da <_puts_r+0x52>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	da11      	bge.n	8007a26 <_puts_r+0x9e>
 8007a02:	4622      	mov	r2, r4
 8007a04:	210a      	movs	r1, #10
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 f85f 	bl	8007aca <__swbuf_r>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d0d7      	beq.n	80079c0 <_puts_r+0x38>
 8007a10:	250a      	movs	r5, #10
 8007a12:	e7d7      	b.n	80079c4 <_puts_r+0x3c>
 8007a14:	4622      	mov	r2, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	f000 f857 	bl	8007aca <__swbuf_r>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d1e7      	bne.n	80079f0 <_puts_r+0x68>
 8007a20:	e7ce      	b.n	80079c0 <_puts_r+0x38>
 8007a22:	3e01      	subs	r6, #1
 8007a24:	e7e4      	b.n	80079f0 <_puts_r+0x68>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	6022      	str	r2, [r4, #0]
 8007a2c:	220a      	movs	r2, #10
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e7ee      	b.n	8007a10 <_puts_r+0x88>
	...

08007a34 <puts>:
 8007a34:	4b02      	ldr	r3, [pc, #8]	@ (8007a40 <puts+0xc>)
 8007a36:	4601      	mov	r1, r0
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f7ff bfa5 	b.w	8007988 <_puts_r>
 8007a3e:	bf00      	nop
 8007a40:	20000028 	.word	0x20000028

08007a44 <__sread>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	460c      	mov	r4, r1
 8007a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4c:	f000 f900 	bl	8007c50 <_read_r>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	bfab      	itete	ge
 8007a54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a56:	89a3      	ldrhlt	r3, [r4, #12]
 8007a58:	181b      	addge	r3, r3, r0
 8007a5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a5e:	bfac      	ite	ge
 8007a60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a62:	81a3      	strhlt	r3, [r4, #12]
 8007a64:	bd10      	pop	{r4, pc}

08007a66 <__swrite>:
 8007a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6a:	461f      	mov	r7, r3
 8007a6c:	898b      	ldrh	r3, [r1, #12]
 8007a6e:	05db      	lsls	r3, r3, #23
 8007a70:	4605      	mov	r5, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	4616      	mov	r6, r2
 8007a76:	d505      	bpl.n	8007a84 <__swrite+0x1e>
 8007a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f000 f8d4 	bl	8007c2c <_lseek_r>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a8e:	81a3      	strh	r3, [r4, #12]
 8007a90:	4632      	mov	r2, r6
 8007a92:	463b      	mov	r3, r7
 8007a94:	4628      	mov	r0, r5
 8007a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9a:	f000 b8eb 	b.w	8007c74 <_write_r>

08007a9e <__sseek>:
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa6:	f000 f8c1 	bl	8007c2c <_lseek_r>
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	bf15      	itete	ne
 8007ab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007aba:	81a3      	strheq	r3, [r4, #12]
 8007abc:	bf18      	it	ne
 8007abe:	81a3      	strhne	r3, [r4, #12]
 8007ac0:	bd10      	pop	{r4, pc}

08007ac2 <__sclose>:
 8007ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac6:	f000 b8a1 	b.w	8007c0c <_close_r>

08007aca <__swbuf_r>:
 8007aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007acc:	460e      	mov	r6, r1
 8007ace:	4614      	mov	r4, r2
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	b118      	cbz	r0, 8007adc <__swbuf_r+0x12>
 8007ad4:	6a03      	ldr	r3, [r0, #32]
 8007ad6:	b90b      	cbnz	r3, 8007adc <__swbuf_r+0x12>
 8007ad8:	f7ff ff0e 	bl	80078f8 <__sinit>
 8007adc:	69a3      	ldr	r3, [r4, #24]
 8007ade:	60a3      	str	r3, [r4, #8]
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	071a      	lsls	r2, r3, #28
 8007ae4:	d501      	bpl.n	8007aea <__swbuf_r+0x20>
 8007ae6:	6923      	ldr	r3, [r4, #16]
 8007ae8:	b943      	cbnz	r3, 8007afc <__swbuf_r+0x32>
 8007aea:	4621      	mov	r1, r4
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 f82b 	bl	8007b48 <__swsetup_r>
 8007af2:	b118      	cbz	r0, 8007afc <__swbuf_r+0x32>
 8007af4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007af8:	4638      	mov	r0, r7
 8007afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	6922      	ldr	r2, [r4, #16]
 8007b00:	1a98      	subs	r0, r3, r2
 8007b02:	6963      	ldr	r3, [r4, #20]
 8007b04:	b2f6      	uxtb	r6, r6
 8007b06:	4283      	cmp	r3, r0
 8007b08:	4637      	mov	r7, r6
 8007b0a:	dc05      	bgt.n	8007b18 <__swbuf_r+0x4e>
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f001 fd82 	bl	8009618 <_fflush_r>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1ed      	bne.n	8007af4 <__swbuf_r+0x2a>
 8007b18:	68a3      	ldr	r3, [r4, #8]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	60a3      	str	r3, [r4, #8]
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	6022      	str	r2, [r4, #0]
 8007b24:	701e      	strb	r6, [r3, #0]
 8007b26:	6962      	ldr	r2, [r4, #20]
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d004      	beq.n	8007b38 <__swbuf_r+0x6e>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	07db      	lsls	r3, r3, #31
 8007b32:	d5e1      	bpl.n	8007af8 <__swbuf_r+0x2e>
 8007b34:	2e0a      	cmp	r6, #10
 8007b36:	d1df      	bne.n	8007af8 <__swbuf_r+0x2e>
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f001 fd6c 	bl	8009618 <_fflush_r>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d0d9      	beq.n	8007af8 <__swbuf_r+0x2e>
 8007b44:	e7d6      	b.n	8007af4 <__swbuf_r+0x2a>
	...

08007b48 <__swsetup_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4b29      	ldr	r3, [pc, #164]	@ (8007bf0 <__swsetup_r+0xa8>)
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	460c      	mov	r4, r1
 8007b52:	b118      	cbz	r0, 8007b5c <__swsetup_r+0x14>
 8007b54:	6a03      	ldr	r3, [r0, #32]
 8007b56:	b90b      	cbnz	r3, 8007b5c <__swsetup_r+0x14>
 8007b58:	f7ff fece 	bl	80078f8 <__sinit>
 8007b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b60:	0719      	lsls	r1, r3, #28
 8007b62:	d422      	bmi.n	8007baa <__swsetup_r+0x62>
 8007b64:	06da      	lsls	r2, r3, #27
 8007b66:	d407      	bmi.n	8007b78 <__swsetup_r+0x30>
 8007b68:	2209      	movs	r2, #9
 8007b6a:	602a      	str	r2, [r5, #0]
 8007b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b76:	e033      	b.n	8007be0 <__swsetup_r+0x98>
 8007b78:	0758      	lsls	r0, r3, #29
 8007b7a:	d512      	bpl.n	8007ba2 <__swsetup_r+0x5a>
 8007b7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b7e:	b141      	cbz	r1, 8007b92 <__swsetup_r+0x4a>
 8007b80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b84:	4299      	cmp	r1, r3
 8007b86:	d002      	beq.n	8007b8e <__swsetup_r+0x46>
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 ff0d 	bl	80089a8 <_free_r>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	6063      	str	r3, [r4, #4]
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f043 0308 	orr.w	r3, r3, #8
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	b94b      	cbnz	r3, 8007bc2 <__swsetup_r+0x7a>
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bb8:	d003      	beq.n	8007bc2 <__swsetup_r+0x7a>
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f001 fd79 	bl	80096b4 <__smakebuf_r>
 8007bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc6:	f013 0201 	ands.w	r2, r3, #1
 8007bca:	d00a      	beq.n	8007be2 <__swsetup_r+0x9a>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	60a2      	str	r2, [r4, #8]
 8007bd0:	6962      	ldr	r2, [r4, #20]
 8007bd2:	4252      	negs	r2, r2
 8007bd4:	61a2      	str	r2, [r4, #24]
 8007bd6:	6922      	ldr	r2, [r4, #16]
 8007bd8:	b942      	cbnz	r2, 8007bec <__swsetup_r+0xa4>
 8007bda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bde:	d1c5      	bne.n	8007b6c <__swsetup_r+0x24>
 8007be0:	bd38      	pop	{r3, r4, r5, pc}
 8007be2:	0799      	lsls	r1, r3, #30
 8007be4:	bf58      	it	pl
 8007be6:	6962      	ldrpl	r2, [r4, #20]
 8007be8:	60a2      	str	r2, [r4, #8]
 8007bea:	e7f4      	b.n	8007bd6 <__swsetup_r+0x8e>
 8007bec:	2000      	movs	r0, #0
 8007bee:	e7f7      	b.n	8007be0 <__swsetup_r+0x98>
 8007bf0:	20000028 	.word	0x20000028

08007bf4 <memset>:
 8007bf4:	4402      	add	r2, r0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d100      	bne.n	8007bfe <memset+0xa>
 8007bfc:	4770      	bx	lr
 8007bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007c02:	e7f9      	b.n	8007bf8 <memset+0x4>

08007c04 <_localeconv_r>:
 8007c04:	4800      	ldr	r0, [pc, #0]	@ (8007c08 <_localeconv_r+0x4>)
 8007c06:	4770      	bx	lr
 8007c08:	20000168 	.word	0x20000168

08007c0c <_close_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4d06      	ldr	r5, [pc, #24]	@ (8007c28 <_close_r+0x1c>)
 8007c10:	2300      	movs	r3, #0
 8007c12:	4604      	mov	r4, r0
 8007c14:	4608      	mov	r0, r1
 8007c16:	602b      	str	r3, [r5, #0]
 8007c18:	f7f9 fce2 	bl	80015e0 <_close>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d102      	bne.n	8007c26 <_close_r+0x1a>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	b103      	cbz	r3, 8007c26 <_close_r+0x1a>
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	bd38      	pop	{r3, r4, r5, pc}
 8007c28:	20000720 	.word	0x20000720

08007c2c <_lseek_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4d07      	ldr	r5, [pc, #28]	@ (8007c4c <_lseek_r+0x20>)
 8007c30:	4604      	mov	r4, r0
 8007c32:	4608      	mov	r0, r1
 8007c34:	4611      	mov	r1, r2
 8007c36:	2200      	movs	r2, #0
 8007c38:	602a      	str	r2, [r5, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f7f9 fcf4 	bl	8001628 <_lseek>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_lseek_r+0x1e>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_lseek_r+0x1e>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	20000720 	.word	0x20000720

08007c50 <_read_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	@ (8007c70 <_read_r+0x20>)
 8007c54:	4604      	mov	r4, r0
 8007c56:	4608      	mov	r0, r1
 8007c58:	4611      	mov	r1, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	602a      	str	r2, [r5, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7f9 fca1 	bl	80015a6 <_read>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_read_r+0x1e>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_read_r+0x1e>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	20000720 	.word	0x20000720

08007c74 <_write_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d07      	ldr	r5, [pc, #28]	@ (8007c94 <_write_r+0x20>)
 8007c78:	4604      	mov	r4, r0
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	602a      	str	r2, [r5, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f7f9 f9b0 	bl	8000fe8 <_write>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_write_r+0x1e>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_write_r+0x1e>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	20000720 	.word	0x20000720

08007c98 <__errno>:
 8007c98:	4b01      	ldr	r3, [pc, #4]	@ (8007ca0 <__errno+0x8>)
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000028 	.word	0x20000028

08007ca4 <__libc_init_array>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8007cdc <__libc_init_array+0x38>)
 8007ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ce0 <__libc_init_array+0x3c>)
 8007caa:	1b64      	subs	r4, r4, r5
 8007cac:	10a4      	asrs	r4, r4, #2
 8007cae:	2600      	movs	r6, #0
 8007cb0:	42a6      	cmp	r6, r4
 8007cb2:	d109      	bne.n	8007cc8 <__libc_init_array+0x24>
 8007cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ce4 <__libc_init_array+0x40>)
 8007cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ce8 <__libc_init_array+0x44>)
 8007cb8:	f001 fe28 	bl	800990c <_init>
 8007cbc:	1b64      	subs	r4, r4, r5
 8007cbe:	10a4      	asrs	r4, r4, #2
 8007cc0:	2600      	movs	r6, #0
 8007cc2:	42a6      	cmp	r6, r4
 8007cc4:	d105      	bne.n	8007cd2 <__libc_init_array+0x2e>
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ccc:	4798      	blx	r3
 8007cce:	3601      	adds	r6, #1
 8007cd0:	e7ee      	b.n	8007cb0 <__libc_init_array+0xc>
 8007cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd6:	4798      	blx	r3
 8007cd8:	3601      	adds	r6, #1
 8007cda:	e7f2      	b.n	8007cc2 <__libc_init_array+0x1e>
 8007cdc:	08009efc 	.word	0x08009efc
 8007ce0:	08009efc 	.word	0x08009efc
 8007ce4:	08009efc 	.word	0x08009efc
 8007ce8:	08009f00 	.word	0x08009f00

08007cec <__retarget_lock_init_recursive>:
 8007cec:	4770      	bx	lr

08007cee <__retarget_lock_acquire_recursive>:
 8007cee:	4770      	bx	lr

08007cf0 <__retarget_lock_release_recursive>:
 8007cf0:	4770      	bx	lr

08007cf2 <quorem>:
 8007cf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf6:	6903      	ldr	r3, [r0, #16]
 8007cf8:	690c      	ldr	r4, [r1, #16]
 8007cfa:	42a3      	cmp	r3, r4
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	db7e      	blt.n	8007dfe <quorem+0x10c>
 8007d00:	3c01      	subs	r4, #1
 8007d02:	f101 0814 	add.w	r8, r1, #20
 8007d06:	00a3      	lsls	r3, r4, #2
 8007d08:	f100 0514 	add.w	r5, r0, #20
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d24:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d28:	d32e      	bcc.n	8007d88 <quorem+0x96>
 8007d2a:	f04f 0a00 	mov.w	sl, #0
 8007d2e:	46c4      	mov	ip, r8
 8007d30:	46ae      	mov	lr, r5
 8007d32:	46d3      	mov	fp, sl
 8007d34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d38:	b298      	uxth	r0, r3
 8007d3a:	fb06 a000 	mla	r0, r6, r0, sl
 8007d3e:	0c02      	lsrs	r2, r0, #16
 8007d40:	0c1b      	lsrs	r3, r3, #16
 8007d42:	fb06 2303 	mla	r3, r6, r3, r2
 8007d46:	f8de 2000 	ldr.w	r2, [lr]
 8007d4a:	b280      	uxth	r0, r0
 8007d4c:	b292      	uxth	r2, r2
 8007d4e:	1a12      	subs	r2, r2, r0
 8007d50:	445a      	add	r2, fp
 8007d52:	f8de 0000 	ldr.w	r0, [lr]
 8007d56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d64:	b292      	uxth	r2, r2
 8007d66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d6a:	45e1      	cmp	r9, ip
 8007d6c:	f84e 2b04 	str.w	r2, [lr], #4
 8007d70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d74:	d2de      	bcs.n	8007d34 <quorem+0x42>
 8007d76:	9b00      	ldr	r3, [sp, #0]
 8007d78:	58eb      	ldr	r3, [r5, r3]
 8007d7a:	b92b      	cbnz	r3, 8007d88 <quorem+0x96>
 8007d7c:	9b01      	ldr	r3, [sp, #4]
 8007d7e:	3b04      	subs	r3, #4
 8007d80:	429d      	cmp	r5, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	d32f      	bcc.n	8007de6 <quorem+0xf4>
 8007d86:	613c      	str	r4, [r7, #16]
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f001 f97f 	bl	800908c <__mcmp>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	db25      	blt.n	8007dde <quorem+0xec>
 8007d92:	4629      	mov	r1, r5
 8007d94:	2000      	movs	r0, #0
 8007d96:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d9a:	f8d1 c000 	ldr.w	ip, [r1]
 8007d9e:	fa1f fe82 	uxth.w	lr, r2
 8007da2:	fa1f f38c 	uxth.w	r3, ip
 8007da6:	eba3 030e 	sub.w	r3, r3, lr
 8007daa:	4403      	add	r3, r0
 8007dac:	0c12      	lsrs	r2, r2, #16
 8007dae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007db2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dbc:	45c1      	cmp	r9, r8
 8007dbe:	f841 3b04 	str.w	r3, [r1], #4
 8007dc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007dc6:	d2e6      	bcs.n	8007d96 <quorem+0xa4>
 8007dc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dd0:	b922      	cbnz	r2, 8007ddc <quorem+0xea>
 8007dd2:	3b04      	subs	r3, #4
 8007dd4:	429d      	cmp	r5, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	d30b      	bcc.n	8007df2 <quorem+0x100>
 8007dda:	613c      	str	r4, [r7, #16]
 8007ddc:	3601      	adds	r6, #1
 8007dde:	4630      	mov	r0, r6
 8007de0:	b003      	add	sp, #12
 8007de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de6:	6812      	ldr	r2, [r2, #0]
 8007de8:	3b04      	subs	r3, #4
 8007dea:	2a00      	cmp	r2, #0
 8007dec:	d1cb      	bne.n	8007d86 <quorem+0x94>
 8007dee:	3c01      	subs	r4, #1
 8007df0:	e7c6      	b.n	8007d80 <quorem+0x8e>
 8007df2:	6812      	ldr	r2, [r2, #0]
 8007df4:	3b04      	subs	r3, #4
 8007df6:	2a00      	cmp	r2, #0
 8007df8:	d1ef      	bne.n	8007dda <quorem+0xe8>
 8007dfa:	3c01      	subs	r4, #1
 8007dfc:	e7ea      	b.n	8007dd4 <quorem+0xe2>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	e7ee      	b.n	8007de0 <quorem+0xee>
 8007e02:	0000      	movs	r0, r0
 8007e04:	0000      	movs	r0, r0
	...

08007e08 <_dtoa_r>:
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	69c7      	ldr	r7, [r0, #28]
 8007e0e:	b097      	sub	sp, #92	@ 0x5c
 8007e10:	4614      	mov	r4, r2
 8007e12:	461d      	mov	r5, r3
 8007e14:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007e18:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007e1a:	4681      	mov	r9, r0
 8007e1c:	b97f      	cbnz	r7, 8007e3e <_dtoa_r+0x36>
 8007e1e:	2010      	movs	r0, #16
 8007e20:	f000 fe0c 	bl	8008a3c <malloc>
 8007e24:	4602      	mov	r2, r0
 8007e26:	f8c9 001c 	str.w	r0, [r9, #28]
 8007e2a:	b920      	cbnz	r0, 8007e36 <_dtoa_r+0x2e>
 8007e2c:	4baa      	ldr	r3, [pc, #680]	@ (80080d8 <_dtoa_r+0x2d0>)
 8007e2e:	21ef      	movs	r1, #239	@ 0xef
 8007e30:	48aa      	ldr	r0, [pc, #680]	@ (80080dc <_dtoa_r+0x2d4>)
 8007e32:	f001 fcbb 	bl	80097ac <__assert_func>
 8007e36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e3a:	6007      	str	r7, [r0, #0]
 8007e3c:	60c7      	str	r7, [r0, #12]
 8007e3e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e42:	6819      	ldr	r1, [r3, #0]
 8007e44:	b159      	cbz	r1, 8007e5e <_dtoa_r+0x56>
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	604a      	str	r2, [r1, #4]
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4093      	lsls	r3, r2
 8007e4e:	608b      	str	r3, [r1, #8]
 8007e50:	4648      	mov	r0, r9
 8007e52:	f000 fee9 	bl	8008c28 <_Bfree>
 8007e56:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	1e2b      	subs	r3, r5, #0
 8007e60:	bfb9      	ittee	lt
 8007e62:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e66:	9307      	strlt	r3, [sp, #28]
 8007e68:	2300      	movge	r3, #0
 8007e6a:	6033      	strge	r3, [r6, #0]
 8007e6c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007e70:	4b9b      	ldr	r3, [pc, #620]	@ (80080e0 <_dtoa_r+0x2d8>)
 8007e72:	bfbc      	itt	lt
 8007e74:	2201      	movlt	r2, #1
 8007e76:	6032      	strlt	r2, [r6, #0]
 8007e78:	ea33 0308 	bics.w	r3, r3, r8
 8007e7c:	d112      	bne.n	8007ea4 <_dtoa_r+0x9c>
 8007e7e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007e8a:	4323      	orrs	r3, r4
 8007e8c:	f000 855b 	beq.w	8008946 <_dtoa_r+0xb3e>
 8007e90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e92:	f8df a250 	ldr.w	sl, [pc, #592]	@ 80080e4 <_dtoa_r+0x2dc>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 855d 	beq.w	8008956 <_dtoa_r+0xb4e>
 8007e9c:	f10a 0303 	add.w	r3, sl, #3
 8007ea0:	f000 bd57 	b.w	8008952 <_dtoa_r+0xb4a>
 8007ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ea8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f7f8 fde0 	bl	8000a78 <__aeabi_dcmpeq>
 8007eb8:	4607      	mov	r7, r0
 8007eba:	b158      	cbz	r0, 8007ed4 <_dtoa_r+0xcc>
 8007ebc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ec4:	b113      	cbz	r3, 8007ecc <_dtoa_r+0xc4>
 8007ec6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ec8:	4b87      	ldr	r3, [pc, #540]	@ (80080e8 <_dtoa_r+0x2e0>)
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80080ec <_dtoa_r+0x2e4>
 8007ed0:	f000 bd41 	b.w	8008956 <_dtoa_r+0xb4e>
 8007ed4:	ab14      	add	r3, sp, #80	@ 0x50
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	ab15      	add	r3, sp, #84	@ 0x54
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4648      	mov	r0, r9
 8007ede:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ee2:	f001 f981 	bl	80091e8 <__d2b>
 8007ee6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007eea:	9003      	str	r0, [sp, #12]
 8007eec:	2e00      	cmp	r6, #0
 8007eee:	d077      	beq.n	8007fe0 <_dtoa_r+0x1d8>
 8007ef0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ef2:	9712      	str	r7, [sp, #72]	@ 0x48
 8007ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007efc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f08:	4619      	mov	r1, r3
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	4b78      	ldr	r3, [pc, #480]	@ (80080f0 <_dtoa_r+0x2e8>)
 8007f0e:	f7f8 f993 	bl	8000238 <__aeabi_dsub>
 8007f12:	a36b      	add	r3, pc, #428	@ (adr r3, 80080c0 <_dtoa_r+0x2b8>)
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f7f8 fb46 	bl	80005a8 <__aeabi_dmul>
 8007f1c:	a36a      	add	r3, pc, #424	@ (adr r3, 80080c8 <_dtoa_r+0x2c0>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f7f8 f98b 	bl	800023c <__adddf3>
 8007f26:	4604      	mov	r4, r0
 8007f28:	4630      	mov	r0, r6
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	f7f8 fad2 	bl	80004d4 <__aeabi_i2d>
 8007f30:	a367      	add	r3, pc, #412	@ (adr r3, 80080d0 <_dtoa_r+0x2c8>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 fb37 	bl	80005a8 <__aeabi_dmul>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 f97b 	bl	800023c <__adddf3>
 8007f46:	4604      	mov	r4, r0
 8007f48:	460d      	mov	r5, r1
 8007f4a:	f7f8 fddd 	bl	8000b08 <__aeabi_d2iz>
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4607      	mov	r7, r0
 8007f52:	2300      	movs	r3, #0
 8007f54:	4620      	mov	r0, r4
 8007f56:	4629      	mov	r1, r5
 8007f58:	f7f8 fd98 	bl	8000a8c <__aeabi_dcmplt>
 8007f5c:	b140      	cbz	r0, 8007f70 <_dtoa_r+0x168>
 8007f5e:	4638      	mov	r0, r7
 8007f60:	f7f8 fab8 	bl	80004d4 <__aeabi_i2d>
 8007f64:	4622      	mov	r2, r4
 8007f66:	462b      	mov	r3, r5
 8007f68:	f7f8 fd86 	bl	8000a78 <__aeabi_dcmpeq>
 8007f6c:	b900      	cbnz	r0, 8007f70 <_dtoa_r+0x168>
 8007f6e:	3f01      	subs	r7, #1
 8007f70:	2f16      	cmp	r7, #22
 8007f72:	d853      	bhi.n	800801c <_dtoa_r+0x214>
 8007f74:	4b5f      	ldr	r3, [pc, #380]	@ (80080f4 <_dtoa_r+0x2ec>)
 8007f76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f82:	f7f8 fd83 	bl	8000a8c <__aeabi_dcmplt>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d04a      	beq.n	8008020 <_dtoa_r+0x218>
 8007f8a:	3f01      	subs	r7, #1
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f92:	1b9b      	subs	r3, r3, r6
 8007f94:	1e5a      	subs	r2, r3, #1
 8007f96:	bf45      	ittet	mi
 8007f98:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f9c:	9304      	strmi	r3, [sp, #16]
 8007f9e:	2300      	movpl	r3, #0
 8007fa0:	2300      	movmi	r3, #0
 8007fa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fa4:	bf54      	ite	pl
 8007fa6:	9304      	strpl	r3, [sp, #16]
 8007fa8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007faa:	2f00      	cmp	r7, #0
 8007fac:	db3a      	blt.n	8008024 <_dtoa_r+0x21c>
 8007fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb0:	970e      	str	r7, [sp, #56]	@ 0x38
 8007fb2:	443b      	add	r3, r7
 8007fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fbc:	2b09      	cmp	r3, #9
 8007fbe:	d864      	bhi.n	800808a <_dtoa_r+0x282>
 8007fc0:	2b05      	cmp	r3, #5
 8007fc2:	bfc4      	itt	gt
 8007fc4:	3b04      	subgt	r3, #4
 8007fc6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007fc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fca:	f1a3 0302 	sub.w	r3, r3, #2
 8007fce:	bfcc      	ite	gt
 8007fd0:	2400      	movgt	r4, #0
 8007fd2:	2401      	movle	r4, #1
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d864      	bhi.n	80080a2 <_dtoa_r+0x29a>
 8007fd8:	e8df f003 	tbb	[pc, r3]
 8007fdc:	2c385553 	.word	0x2c385553
 8007fe0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007fe4:	441e      	add	r6, r3
 8007fe6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	bfc1      	itttt	gt
 8007fee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ff2:	fa08 f803 	lslgt.w	r8, r8, r3
 8007ff6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ffa:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ffe:	bfd6      	itet	le
 8008000:	f1c3 0320 	rsble	r3, r3, #32
 8008004:	ea48 0003 	orrgt.w	r0, r8, r3
 8008008:	fa04 f003 	lslle.w	r0, r4, r3
 800800c:	f7f8 fa52 	bl	80004b4 <__aeabi_ui2d>
 8008010:	2201      	movs	r2, #1
 8008012:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008016:	3e01      	subs	r6, #1
 8008018:	9212      	str	r2, [sp, #72]	@ 0x48
 800801a:	e775      	b.n	8007f08 <_dtoa_r+0x100>
 800801c:	2301      	movs	r3, #1
 800801e:	e7b6      	b.n	8007f8e <_dtoa_r+0x186>
 8008020:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008022:	e7b5      	b.n	8007f90 <_dtoa_r+0x188>
 8008024:	9b04      	ldr	r3, [sp, #16]
 8008026:	1bdb      	subs	r3, r3, r7
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	427b      	negs	r3, r7
 800802c:	930a      	str	r3, [sp, #40]	@ 0x28
 800802e:	2300      	movs	r3, #0
 8008030:	930e      	str	r3, [sp, #56]	@ 0x38
 8008032:	e7c2      	b.n	8007fba <_dtoa_r+0x1b2>
 8008034:	2301      	movs	r3, #1
 8008036:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008038:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800803a:	eb07 0b03 	add.w	fp, r7, r3
 800803e:	f10b 0301 	add.w	r3, fp, #1
 8008042:	2b01      	cmp	r3, #1
 8008044:	9308      	str	r3, [sp, #32]
 8008046:	bfb8      	it	lt
 8008048:	2301      	movlt	r3, #1
 800804a:	e006      	b.n	800805a <_dtoa_r+0x252>
 800804c:	2301      	movs	r3, #1
 800804e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008050:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008052:	2b00      	cmp	r3, #0
 8008054:	dd28      	ble.n	80080a8 <_dtoa_r+0x2a0>
 8008056:	469b      	mov	fp, r3
 8008058:	9308      	str	r3, [sp, #32]
 800805a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800805e:	2100      	movs	r1, #0
 8008060:	2204      	movs	r2, #4
 8008062:	f102 0514 	add.w	r5, r2, #20
 8008066:	429d      	cmp	r5, r3
 8008068:	d926      	bls.n	80080b8 <_dtoa_r+0x2b0>
 800806a:	6041      	str	r1, [r0, #4]
 800806c:	4648      	mov	r0, r9
 800806e:	f000 fd9b 	bl	8008ba8 <_Balloc>
 8008072:	4682      	mov	sl, r0
 8008074:	2800      	cmp	r0, #0
 8008076:	d141      	bne.n	80080fc <_dtoa_r+0x2f4>
 8008078:	4b1f      	ldr	r3, [pc, #124]	@ (80080f8 <_dtoa_r+0x2f0>)
 800807a:	4602      	mov	r2, r0
 800807c:	f240 11af 	movw	r1, #431	@ 0x1af
 8008080:	e6d6      	b.n	8007e30 <_dtoa_r+0x28>
 8008082:	2300      	movs	r3, #0
 8008084:	e7e3      	b.n	800804e <_dtoa_r+0x246>
 8008086:	2300      	movs	r3, #0
 8008088:	e7d5      	b.n	8008036 <_dtoa_r+0x22e>
 800808a:	2401      	movs	r4, #1
 800808c:	2300      	movs	r3, #0
 800808e:	9320      	str	r3, [sp, #128]	@ 0x80
 8008090:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008092:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008096:	2200      	movs	r2, #0
 8008098:	f8cd b020 	str.w	fp, [sp, #32]
 800809c:	2312      	movs	r3, #18
 800809e:	9221      	str	r2, [sp, #132]	@ 0x84
 80080a0:	e7db      	b.n	800805a <_dtoa_r+0x252>
 80080a2:	2301      	movs	r3, #1
 80080a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080a6:	e7f4      	b.n	8008092 <_dtoa_r+0x28a>
 80080a8:	f04f 0b01 	mov.w	fp, #1
 80080ac:	f8cd b020 	str.w	fp, [sp, #32]
 80080b0:	465b      	mov	r3, fp
 80080b2:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80080b6:	e7d0      	b.n	800805a <_dtoa_r+0x252>
 80080b8:	3101      	adds	r1, #1
 80080ba:	0052      	lsls	r2, r2, #1
 80080bc:	e7d1      	b.n	8008062 <_dtoa_r+0x25a>
 80080be:	bf00      	nop
 80080c0:	636f4361 	.word	0x636f4361
 80080c4:	3fd287a7 	.word	0x3fd287a7
 80080c8:	8b60c8b3 	.word	0x8b60c8b3
 80080cc:	3fc68a28 	.word	0x3fc68a28
 80080d0:	509f79fb 	.word	0x509f79fb
 80080d4:	3fd34413 	.word	0x3fd34413
 80080d8:	08009bc1 	.word	0x08009bc1
 80080dc:	08009bd8 	.word	0x08009bd8
 80080e0:	7ff00000 	.word	0x7ff00000
 80080e4:	08009bbd 	.word	0x08009bbd
 80080e8:	08009b91 	.word	0x08009b91
 80080ec:	08009b90 	.word	0x08009b90
 80080f0:	3ff80000 	.word	0x3ff80000
 80080f4:	08009d28 	.word	0x08009d28
 80080f8:	08009c30 	.word	0x08009c30
 80080fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008100:	6018      	str	r0, [r3, #0]
 8008102:	9b08      	ldr	r3, [sp, #32]
 8008104:	2b0e      	cmp	r3, #14
 8008106:	f200 80a1 	bhi.w	800824c <_dtoa_r+0x444>
 800810a:	2c00      	cmp	r4, #0
 800810c:	f000 809e 	beq.w	800824c <_dtoa_r+0x444>
 8008110:	2f00      	cmp	r7, #0
 8008112:	dd33      	ble.n	800817c <_dtoa_r+0x374>
 8008114:	4b9c      	ldr	r3, [pc, #624]	@ (8008388 <_dtoa_r+0x580>)
 8008116:	f007 020f 	and.w	r2, r7, #15
 800811a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800811e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008122:	05f8      	lsls	r0, r7, #23
 8008124:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008128:	ea4f 1427 	mov.w	r4, r7, asr #4
 800812c:	d516      	bpl.n	800815c <_dtoa_r+0x354>
 800812e:	4b97      	ldr	r3, [pc, #604]	@ (800838c <_dtoa_r+0x584>)
 8008130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008138:	f7f8 fb60 	bl	80007fc <__aeabi_ddiv>
 800813c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008140:	f004 040f 	and.w	r4, r4, #15
 8008144:	2603      	movs	r6, #3
 8008146:	4d91      	ldr	r5, [pc, #580]	@ (800838c <_dtoa_r+0x584>)
 8008148:	b954      	cbnz	r4, 8008160 <_dtoa_r+0x358>
 800814a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800814e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008152:	f7f8 fb53 	bl	80007fc <__aeabi_ddiv>
 8008156:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800815a:	e028      	b.n	80081ae <_dtoa_r+0x3a6>
 800815c:	2602      	movs	r6, #2
 800815e:	e7f2      	b.n	8008146 <_dtoa_r+0x33e>
 8008160:	07e1      	lsls	r1, r4, #31
 8008162:	d508      	bpl.n	8008176 <_dtoa_r+0x36e>
 8008164:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008168:	e9d5 2300 	ldrd	r2, r3, [r5]
 800816c:	f7f8 fa1c 	bl	80005a8 <__aeabi_dmul>
 8008170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008174:	3601      	adds	r6, #1
 8008176:	1064      	asrs	r4, r4, #1
 8008178:	3508      	adds	r5, #8
 800817a:	e7e5      	b.n	8008148 <_dtoa_r+0x340>
 800817c:	f000 80af 	beq.w	80082de <_dtoa_r+0x4d6>
 8008180:	427c      	negs	r4, r7
 8008182:	4b81      	ldr	r3, [pc, #516]	@ (8008388 <_dtoa_r+0x580>)
 8008184:	4d81      	ldr	r5, [pc, #516]	@ (800838c <_dtoa_r+0x584>)
 8008186:	f004 020f 	and.w	r2, r4, #15
 800818a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008196:	f7f8 fa07 	bl	80005a8 <__aeabi_dmul>
 800819a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800819e:	1124      	asrs	r4, r4, #4
 80081a0:	2300      	movs	r3, #0
 80081a2:	2602      	movs	r6, #2
 80081a4:	2c00      	cmp	r4, #0
 80081a6:	f040 808f 	bne.w	80082c8 <_dtoa_r+0x4c0>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1d3      	bne.n	8008156 <_dtoa_r+0x34e>
 80081ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081b0:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8094 	beq.w	80082e2 <_dtoa_r+0x4da>
 80081ba:	4b75      	ldr	r3, [pc, #468]	@ (8008390 <_dtoa_r+0x588>)
 80081bc:	2200      	movs	r2, #0
 80081be:	4620      	mov	r0, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	f7f8 fc63 	bl	8000a8c <__aeabi_dcmplt>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f000 808b 	beq.w	80082e2 <_dtoa_r+0x4da>
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 8087 	beq.w	80082e2 <_dtoa_r+0x4da>
 80081d4:	f1bb 0f00 	cmp.w	fp, #0
 80081d8:	dd34      	ble.n	8008244 <_dtoa_r+0x43c>
 80081da:	4620      	mov	r0, r4
 80081dc:	4b6d      	ldr	r3, [pc, #436]	@ (8008394 <_dtoa_r+0x58c>)
 80081de:	2200      	movs	r2, #0
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7f8 f9e1 	bl	80005a8 <__aeabi_dmul>
 80081e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081ea:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80081ee:	3601      	adds	r6, #1
 80081f0:	465c      	mov	r4, fp
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7f8 f96e 	bl	80004d4 <__aeabi_i2d>
 80081f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081fc:	f7f8 f9d4 	bl	80005a8 <__aeabi_dmul>
 8008200:	4b65      	ldr	r3, [pc, #404]	@ (8008398 <_dtoa_r+0x590>)
 8008202:	2200      	movs	r2, #0
 8008204:	f7f8 f81a 	bl	800023c <__adddf3>
 8008208:	4605      	mov	r5, r0
 800820a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800820e:	2c00      	cmp	r4, #0
 8008210:	d16a      	bne.n	80082e8 <_dtoa_r+0x4e0>
 8008212:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008216:	4b61      	ldr	r3, [pc, #388]	@ (800839c <_dtoa_r+0x594>)
 8008218:	2200      	movs	r2, #0
 800821a:	f7f8 f80d 	bl	8000238 <__aeabi_dsub>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008226:	462a      	mov	r2, r5
 8008228:	4633      	mov	r3, r6
 800822a:	f7f8 fc4d 	bl	8000ac8 <__aeabi_dcmpgt>
 800822e:	2800      	cmp	r0, #0
 8008230:	f040 8298 	bne.w	8008764 <_dtoa_r+0x95c>
 8008234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008238:	462a      	mov	r2, r5
 800823a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800823e:	f7f8 fc25 	bl	8000a8c <__aeabi_dcmplt>
 8008242:	bb38      	cbnz	r0, 8008294 <_dtoa_r+0x48c>
 8008244:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008248:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800824c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800824e:	2b00      	cmp	r3, #0
 8008250:	f2c0 8157 	blt.w	8008502 <_dtoa_r+0x6fa>
 8008254:	2f0e      	cmp	r7, #14
 8008256:	f300 8154 	bgt.w	8008502 <_dtoa_r+0x6fa>
 800825a:	4b4b      	ldr	r3, [pc, #300]	@ (8008388 <_dtoa_r+0x580>)
 800825c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008260:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008264:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008268:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800826a:	2b00      	cmp	r3, #0
 800826c:	f280 80e5 	bge.w	800843a <_dtoa_r+0x632>
 8008270:	9b08      	ldr	r3, [sp, #32]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f300 80e1 	bgt.w	800843a <_dtoa_r+0x632>
 8008278:	d10c      	bne.n	8008294 <_dtoa_r+0x48c>
 800827a:	4b48      	ldr	r3, [pc, #288]	@ (800839c <_dtoa_r+0x594>)
 800827c:	2200      	movs	r2, #0
 800827e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008282:	f7f8 f991 	bl	80005a8 <__aeabi_dmul>
 8008286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800828a:	f7f8 fc13 	bl	8000ab4 <__aeabi_dcmpge>
 800828e:	2800      	cmp	r0, #0
 8008290:	f000 8266 	beq.w	8008760 <_dtoa_r+0x958>
 8008294:	2400      	movs	r4, #0
 8008296:	4625      	mov	r5, r4
 8008298:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800829a:	4656      	mov	r6, sl
 800829c:	ea6f 0803 	mvn.w	r8, r3
 80082a0:	2700      	movs	r7, #0
 80082a2:	4621      	mov	r1, r4
 80082a4:	4648      	mov	r0, r9
 80082a6:	f000 fcbf 	bl	8008c28 <_Bfree>
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	f000 80bd 	beq.w	800842a <_dtoa_r+0x622>
 80082b0:	b12f      	cbz	r7, 80082be <_dtoa_r+0x4b6>
 80082b2:	42af      	cmp	r7, r5
 80082b4:	d003      	beq.n	80082be <_dtoa_r+0x4b6>
 80082b6:	4639      	mov	r1, r7
 80082b8:	4648      	mov	r0, r9
 80082ba:	f000 fcb5 	bl	8008c28 <_Bfree>
 80082be:	4629      	mov	r1, r5
 80082c0:	4648      	mov	r0, r9
 80082c2:	f000 fcb1 	bl	8008c28 <_Bfree>
 80082c6:	e0b0      	b.n	800842a <_dtoa_r+0x622>
 80082c8:	07e2      	lsls	r2, r4, #31
 80082ca:	d505      	bpl.n	80082d8 <_dtoa_r+0x4d0>
 80082cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082d0:	f7f8 f96a 	bl	80005a8 <__aeabi_dmul>
 80082d4:	3601      	adds	r6, #1
 80082d6:	2301      	movs	r3, #1
 80082d8:	1064      	asrs	r4, r4, #1
 80082da:	3508      	adds	r5, #8
 80082dc:	e762      	b.n	80081a4 <_dtoa_r+0x39c>
 80082de:	2602      	movs	r6, #2
 80082e0:	e765      	b.n	80081ae <_dtoa_r+0x3a6>
 80082e2:	9c08      	ldr	r4, [sp, #32]
 80082e4:	46b8      	mov	r8, r7
 80082e6:	e784      	b.n	80081f2 <_dtoa_r+0x3ea>
 80082e8:	4b27      	ldr	r3, [pc, #156]	@ (8008388 <_dtoa_r+0x580>)
 80082ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082f4:	4454      	add	r4, sl
 80082f6:	2900      	cmp	r1, #0
 80082f8:	d054      	beq.n	80083a4 <_dtoa_r+0x59c>
 80082fa:	4929      	ldr	r1, [pc, #164]	@ (80083a0 <_dtoa_r+0x598>)
 80082fc:	2000      	movs	r0, #0
 80082fe:	f7f8 fa7d 	bl	80007fc <__aeabi_ddiv>
 8008302:	4633      	mov	r3, r6
 8008304:	462a      	mov	r2, r5
 8008306:	f7f7 ff97 	bl	8000238 <__aeabi_dsub>
 800830a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800830e:	4656      	mov	r6, sl
 8008310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008314:	f7f8 fbf8 	bl	8000b08 <__aeabi_d2iz>
 8008318:	4605      	mov	r5, r0
 800831a:	f7f8 f8db 	bl	80004d4 <__aeabi_i2d>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008326:	f7f7 ff87 	bl	8000238 <__aeabi_dsub>
 800832a:	3530      	adds	r5, #48	@ 0x30
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008334:	f806 5b01 	strb.w	r5, [r6], #1
 8008338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800833c:	f7f8 fba6 	bl	8000a8c <__aeabi_dcmplt>
 8008340:	2800      	cmp	r0, #0
 8008342:	d172      	bne.n	800842a <_dtoa_r+0x622>
 8008344:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008348:	4911      	ldr	r1, [pc, #68]	@ (8008390 <_dtoa_r+0x588>)
 800834a:	2000      	movs	r0, #0
 800834c:	f7f7 ff74 	bl	8000238 <__aeabi_dsub>
 8008350:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008354:	f7f8 fb9a 	bl	8000a8c <__aeabi_dcmplt>
 8008358:	2800      	cmp	r0, #0
 800835a:	f040 80b4 	bne.w	80084c6 <_dtoa_r+0x6be>
 800835e:	42a6      	cmp	r6, r4
 8008360:	f43f af70 	beq.w	8008244 <_dtoa_r+0x43c>
 8008364:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008368:	4b0a      	ldr	r3, [pc, #40]	@ (8008394 <_dtoa_r+0x58c>)
 800836a:	2200      	movs	r2, #0
 800836c:	f7f8 f91c 	bl	80005a8 <__aeabi_dmul>
 8008370:	4b08      	ldr	r3, [pc, #32]	@ (8008394 <_dtoa_r+0x58c>)
 8008372:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008376:	2200      	movs	r2, #0
 8008378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800837c:	f7f8 f914 	bl	80005a8 <__aeabi_dmul>
 8008380:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008384:	e7c4      	b.n	8008310 <_dtoa_r+0x508>
 8008386:	bf00      	nop
 8008388:	08009d28 	.word	0x08009d28
 800838c:	08009d00 	.word	0x08009d00
 8008390:	3ff00000 	.word	0x3ff00000
 8008394:	40240000 	.word	0x40240000
 8008398:	401c0000 	.word	0x401c0000
 800839c:	40140000 	.word	0x40140000
 80083a0:	3fe00000 	.word	0x3fe00000
 80083a4:	4631      	mov	r1, r6
 80083a6:	4628      	mov	r0, r5
 80083a8:	f7f8 f8fe 	bl	80005a8 <__aeabi_dmul>
 80083ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80083b2:	4656      	mov	r6, sl
 80083b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b8:	f7f8 fba6 	bl	8000b08 <__aeabi_d2iz>
 80083bc:	4605      	mov	r5, r0
 80083be:	f7f8 f889 	bl	80004d4 <__aeabi_i2d>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ca:	f7f7 ff35 	bl	8000238 <__aeabi_dsub>
 80083ce:	3530      	adds	r5, #48	@ 0x30
 80083d0:	f806 5b01 	strb.w	r5, [r6], #1
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	42a6      	cmp	r6, r4
 80083da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083de:	f04f 0200 	mov.w	r2, #0
 80083e2:	d124      	bne.n	800842e <_dtoa_r+0x626>
 80083e4:	4baf      	ldr	r3, [pc, #700]	@ (80086a4 <_dtoa_r+0x89c>)
 80083e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083ea:	f7f7 ff27 	bl	800023c <__adddf3>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f6:	f7f8 fb67 	bl	8000ac8 <__aeabi_dcmpgt>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d163      	bne.n	80084c6 <_dtoa_r+0x6be>
 80083fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008402:	49a8      	ldr	r1, [pc, #672]	@ (80086a4 <_dtoa_r+0x89c>)
 8008404:	2000      	movs	r0, #0
 8008406:	f7f7 ff17 	bl	8000238 <__aeabi_dsub>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008412:	f7f8 fb3b 	bl	8000a8c <__aeabi_dcmplt>
 8008416:	2800      	cmp	r0, #0
 8008418:	f43f af14 	beq.w	8008244 <_dtoa_r+0x43c>
 800841c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800841e:	1e73      	subs	r3, r6, #1
 8008420:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008422:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008426:	2b30      	cmp	r3, #48	@ 0x30
 8008428:	d0f8      	beq.n	800841c <_dtoa_r+0x614>
 800842a:	4647      	mov	r7, r8
 800842c:	e03b      	b.n	80084a6 <_dtoa_r+0x69e>
 800842e:	4b9e      	ldr	r3, [pc, #632]	@ (80086a8 <_dtoa_r+0x8a0>)
 8008430:	f7f8 f8ba 	bl	80005a8 <__aeabi_dmul>
 8008434:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008438:	e7bc      	b.n	80083b4 <_dtoa_r+0x5ac>
 800843a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800843e:	4656      	mov	r6, sl
 8008440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008444:	4620      	mov	r0, r4
 8008446:	4629      	mov	r1, r5
 8008448:	f7f8 f9d8 	bl	80007fc <__aeabi_ddiv>
 800844c:	f7f8 fb5c 	bl	8000b08 <__aeabi_d2iz>
 8008450:	4680      	mov	r8, r0
 8008452:	f7f8 f83f 	bl	80004d4 <__aeabi_i2d>
 8008456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800845a:	f7f8 f8a5 	bl	80005a8 <__aeabi_dmul>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800846a:	f7f7 fee5 	bl	8000238 <__aeabi_dsub>
 800846e:	f806 4b01 	strb.w	r4, [r6], #1
 8008472:	9d08      	ldr	r5, [sp, #32]
 8008474:	eba6 040a 	sub.w	r4, r6, sl
 8008478:	42a5      	cmp	r5, r4
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	d133      	bne.n	80084e8 <_dtoa_r+0x6e0>
 8008480:	f7f7 fedc 	bl	800023c <__adddf3>
 8008484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008488:	4604      	mov	r4, r0
 800848a:	460d      	mov	r5, r1
 800848c:	f7f8 fb1c 	bl	8000ac8 <__aeabi_dcmpgt>
 8008490:	b9c0      	cbnz	r0, 80084c4 <_dtoa_r+0x6bc>
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	4620      	mov	r0, r4
 8008498:	4629      	mov	r1, r5
 800849a:	f7f8 faed 	bl	8000a78 <__aeabi_dcmpeq>
 800849e:	b110      	cbz	r0, 80084a6 <_dtoa_r+0x69e>
 80084a0:	f018 0f01 	tst.w	r8, #1
 80084a4:	d10e      	bne.n	80084c4 <_dtoa_r+0x6bc>
 80084a6:	9903      	ldr	r1, [sp, #12]
 80084a8:	4648      	mov	r0, r9
 80084aa:	f000 fbbd 	bl	8008c28 <_Bfree>
 80084ae:	2300      	movs	r3, #0
 80084b0:	7033      	strb	r3, [r6, #0]
 80084b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80084b4:	3701      	adds	r7, #1
 80084b6:	601f      	str	r7, [r3, #0]
 80084b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 824b 	beq.w	8008956 <_dtoa_r+0xb4e>
 80084c0:	601e      	str	r6, [r3, #0]
 80084c2:	e248      	b.n	8008956 <_dtoa_r+0xb4e>
 80084c4:	46b8      	mov	r8, r7
 80084c6:	4633      	mov	r3, r6
 80084c8:	461e      	mov	r6, r3
 80084ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084ce:	2a39      	cmp	r2, #57	@ 0x39
 80084d0:	d106      	bne.n	80084e0 <_dtoa_r+0x6d8>
 80084d2:	459a      	cmp	sl, r3
 80084d4:	d1f8      	bne.n	80084c8 <_dtoa_r+0x6c0>
 80084d6:	2230      	movs	r2, #48	@ 0x30
 80084d8:	f108 0801 	add.w	r8, r8, #1
 80084dc:	f88a 2000 	strb.w	r2, [sl]
 80084e0:	781a      	ldrb	r2, [r3, #0]
 80084e2:	3201      	adds	r2, #1
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	e7a0      	b.n	800842a <_dtoa_r+0x622>
 80084e8:	4b6f      	ldr	r3, [pc, #444]	@ (80086a8 <_dtoa_r+0x8a0>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	f7f8 f85c 	bl	80005a8 <__aeabi_dmul>
 80084f0:	2200      	movs	r2, #0
 80084f2:	2300      	movs	r3, #0
 80084f4:	4604      	mov	r4, r0
 80084f6:	460d      	mov	r5, r1
 80084f8:	f7f8 fabe 	bl	8000a78 <__aeabi_dcmpeq>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d09f      	beq.n	8008440 <_dtoa_r+0x638>
 8008500:	e7d1      	b.n	80084a6 <_dtoa_r+0x69e>
 8008502:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008504:	2a00      	cmp	r2, #0
 8008506:	f000 80ea 	beq.w	80086de <_dtoa_r+0x8d6>
 800850a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800850c:	2a01      	cmp	r2, #1
 800850e:	f300 80cd 	bgt.w	80086ac <_dtoa_r+0x8a4>
 8008512:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008514:	2a00      	cmp	r2, #0
 8008516:	f000 80c1 	beq.w	800869c <_dtoa_r+0x894>
 800851a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800851e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008520:	9e04      	ldr	r6, [sp, #16]
 8008522:	9a04      	ldr	r2, [sp, #16]
 8008524:	441a      	add	r2, r3
 8008526:	9204      	str	r2, [sp, #16]
 8008528:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800852a:	2101      	movs	r1, #1
 800852c:	441a      	add	r2, r3
 800852e:	4648      	mov	r0, r9
 8008530:	9209      	str	r2, [sp, #36]	@ 0x24
 8008532:	f000 fc2d 	bl	8008d90 <__i2b>
 8008536:	4605      	mov	r5, r0
 8008538:	b166      	cbz	r6, 8008554 <_dtoa_r+0x74c>
 800853a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	dd09      	ble.n	8008554 <_dtoa_r+0x74c>
 8008540:	42b3      	cmp	r3, r6
 8008542:	9a04      	ldr	r2, [sp, #16]
 8008544:	bfa8      	it	ge
 8008546:	4633      	movge	r3, r6
 8008548:	1ad2      	subs	r2, r2, r3
 800854a:	9204      	str	r2, [sp, #16]
 800854c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800854e:	1af6      	subs	r6, r6, r3
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	9309      	str	r3, [sp, #36]	@ 0x24
 8008554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008556:	b30b      	cbz	r3, 800859c <_dtoa_r+0x794>
 8008558:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 80c6 	beq.w	80086ec <_dtoa_r+0x8e4>
 8008560:	2c00      	cmp	r4, #0
 8008562:	f000 80c0 	beq.w	80086e6 <_dtoa_r+0x8de>
 8008566:	4629      	mov	r1, r5
 8008568:	4622      	mov	r2, r4
 800856a:	4648      	mov	r0, r9
 800856c:	f000 fcc8 	bl	8008f00 <__pow5mult>
 8008570:	9a03      	ldr	r2, [sp, #12]
 8008572:	4601      	mov	r1, r0
 8008574:	4605      	mov	r5, r0
 8008576:	4648      	mov	r0, r9
 8008578:	f000 fc20 	bl	8008dbc <__multiply>
 800857c:	9903      	ldr	r1, [sp, #12]
 800857e:	4680      	mov	r8, r0
 8008580:	4648      	mov	r0, r9
 8008582:	f000 fb51 	bl	8008c28 <_Bfree>
 8008586:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008588:	1b1b      	subs	r3, r3, r4
 800858a:	930a      	str	r3, [sp, #40]	@ 0x28
 800858c:	f000 80b1 	beq.w	80086f2 <_dtoa_r+0x8ea>
 8008590:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008592:	4641      	mov	r1, r8
 8008594:	4648      	mov	r0, r9
 8008596:	f000 fcb3 	bl	8008f00 <__pow5mult>
 800859a:	9003      	str	r0, [sp, #12]
 800859c:	2101      	movs	r1, #1
 800859e:	4648      	mov	r0, r9
 80085a0:	f000 fbf6 	bl	8008d90 <__i2b>
 80085a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085a6:	4604      	mov	r4, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 81d8 	beq.w	800895e <_dtoa_r+0xb56>
 80085ae:	461a      	mov	r2, r3
 80085b0:	4601      	mov	r1, r0
 80085b2:	4648      	mov	r0, r9
 80085b4:	f000 fca4 	bl	8008f00 <__pow5mult>
 80085b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	4604      	mov	r4, r0
 80085be:	f300 809f 	bgt.w	8008700 <_dtoa_r+0x8f8>
 80085c2:	9b06      	ldr	r3, [sp, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f040 8097 	bne.w	80086f8 <_dtoa_r+0x8f0>
 80085ca:	9b07      	ldr	r3, [sp, #28]
 80085cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f040 8093 	bne.w	80086fc <_dtoa_r+0x8f4>
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085dc:	0d1b      	lsrs	r3, r3, #20
 80085de:	051b      	lsls	r3, r3, #20
 80085e0:	b133      	cbz	r3, 80085f0 <_dtoa_r+0x7e8>
 80085e2:	9b04      	ldr	r3, [sp, #16]
 80085e4:	3301      	adds	r3, #1
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ea:	3301      	adds	r3, #1
 80085ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ee:	2301      	movs	r3, #1
 80085f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 81b8 	beq.w	800896a <_dtoa_r+0xb62>
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008600:	6918      	ldr	r0, [r3, #16]
 8008602:	f000 fb79 	bl	8008cf8 <__hi0bits>
 8008606:	f1c0 0020 	rsb	r0, r0, #32
 800860a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800860c:	4418      	add	r0, r3
 800860e:	f010 001f 	ands.w	r0, r0, #31
 8008612:	f000 8082 	beq.w	800871a <_dtoa_r+0x912>
 8008616:	f1c0 0320 	rsb	r3, r0, #32
 800861a:	2b04      	cmp	r3, #4
 800861c:	dd73      	ble.n	8008706 <_dtoa_r+0x8fe>
 800861e:	9b04      	ldr	r3, [sp, #16]
 8008620:	f1c0 001c 	rsb	r0, r0, #28
 8008624:	4403      	add	r3, r0
 8008626:	9304      	str	r3, [sp, #16]
 8008628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862a:	4403      	add	r3, r0
 800862c:	4406      	add	r6, r0
 800862e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008630:	9b04      	ldr	r3, [sp, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	dd05      	ble.n	8008642 <_dtoa_r+0x83a>
 8008636:	9903      	ldr	r1, [sp, #12]
 8008638:	461a      	mov	r2, r3
 800863a:	4648      	mov	r0, r9
 800863c:	f000 fcba 	bl	8008fb4 <__lshift>
 8008640:	9003      	str	r0, [sp, #12]
 8008642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd05      	ble.n	8008654 <_dtoa_r+0x84c>
 8008648:	4621      	mov	r1, r4
 800864a:	461a      	mov	r2, r3
 800864c:	4648      	mov	r0, r9
 800864e:	f000 fcb1 	bl	8008fb4 <__lshift>
 8008652:	4604      	mov	r4, r0
 8008654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008656:	2b00      	cmp	r3, #0
 8008658:	d061      	beq.n	800871e <_dtoa_r+0x916>
 800865a:	9803      	ldr	r0, [sp, #12]
 800865c:	4621      	mov	r1, r4
 800865e:	f000 fd15 	bl	800908c <__mcmp>
 8008662:	2800      	cmp	r0, #0
 8008664:	da5b      	bge.n	800871e <_dtoa_r+0x916>
 8008666:	2300      	movs	r3, #0
 8008668:	9903      	ldr	r1, [sp, #12]
 800866a:	220a      	movs	r2, #10
 800866c:	4648      	mov	r0, r9
 800866e:	f000 fafd 	bl	8008c6c <__multadd>
 8008672:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008674:	9003      	str	r0, [sp, #12]
 8008676:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 8177 	beq.w	800896e <_dtoa_r+0xb66>
 8008680:	4629      	mov	r1, r5
 8008682:	2300      	movs	r3, #0
 8008684:	220a      	movs	r2, #10
 8008686:	4648      	mov	r0, r9
 8008688:	f000 faf0 	bl	8008c6c <__multadd>
 800868c:	f1bb 0f00 	cmp.w	fp, #0
 8008690:	4605      	mov	r5, r0
 8008692:	dc6f      	bgt.n	8008774 <_dtoa_r+0x96c>
 8008694:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008696:	2b02      	cmp	r3, #2
 8008698:	dc49      	bgt.n	800872e <_dtoa_r+0x926>
 800869a:	e06b      	b.n	8008774 <_dtoa_r+0x96c>
 800869c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800869e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086a2:	e73c      	b.n	800851e <_dtoa_r+0x716>
 80086a4:	3fe00000 	.word	0x3fe00000
 80086a8:	40240000 	.word	0x40240000
 80086ac:	9b08      	ldr	r3, [sp, #32]
 80086ae:	1e5c      	subs	r4, r3, #1
 80086b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	db09      	blt.n	80086ca <_dtoa_r+0x8c2>
 80086b6:	1b1c      	subs	r4, r3, r4
 80086b8:	9b08      	ldr	r3, [sp, #32]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f6bf af30 	bge.w	8008520 <_dtoa_r+0x718>
 80086c0:	9b04      	ldr	r3, [sp, #16]
 80086c2:	9a08      	ldr	r2, [sp, #32]
 80086c4:	1a9e      	subs	r6, r3, r2
 80086c6:	2300      	movs	r3, #0
 80086c8:	e72b      	b.n	8008522 <_dtoa_r+0x71a>
 80086ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80086d0:	1ae3      	subs	r3, r4, r3
 80086d2:	441a      	add	r2, r3
 80086d4:	9e04      	ldr	r6, [sp, #16]
 80086d6:	9b08      	ldr	r3, [sp, #32]
 80086d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80086da:	2400      	movs	r4, #0
 80086dc:	e721      	b.n	8008522 <_dtoa_r+0x71a>
 80086de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086e0:	9e04      	ldr	r6, [sp, #16]
 80086e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80086e4:	e728      	b.n	8008538 <_dtoa_r+0x730>
 80086e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80086ea:	e751      	b.n	8008590 <_dtoa_r+0x788>
 80086ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086ee:	9903      	ldr	r1, [sp, #12]
 80086f0:	e750      	b.n	8008594 <_dtoa_r+0x78c>
 80086f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80086f6:	e751      	b.n	800859c <_dtoa_r+0x794>
 80086f8:	2300      	movs	r3, #0
 80086fa:	e779      	b.n	80085f0 <_dtoa_r+0x7e8>
 80086fc:	9b06      	ldr	r3, [sp, #24]
 80086fe:	e777      	b.n	80085f0 <_dtoa_r+0x7e8>
 8008700:	2300      	movs	r3, #0
 8008702:	930a      	str	r3, [sp, #40]	@ 0x28
 8008704:	e779      	b.n	80085fa <_dtoa_r+0x7f2>
 8008706:	d093      	beq.n	8008630 <_dtoa_r+0x828>
 8008708:	9a04      	ldr	r2, [sp, #16]
 800870a:	331c      	adds	r3, #28
 800870c:	441a      	add	r2, r3
 800870e:	9204      	str	r2, [sp, #16]
 8008710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008712:	441a      	add	r2, r3
 8008714:	441e      	add	r6, r3
 8008716:	9209      	str	r2, [sp, #36]	@ 0x24
 8008718:	e78a      	b.n	8008630 <_dtoa_r+0x828>
 800871a:	4603      	mov	r3, r0
 800871c:	e7f4      	b.n	8008708 <_dtoa_r+0x900>
 800871e:	9b08      	ldr	r3, [sp, #32]
 8008720:	2b00      	cmp	r3, #0
 8008722:	46b8      	mov	r8, r7
 8008724:	dc20      	bgt.n	8008768 <_dtoa_r+0x960>
 8008726:	469b      	mov	fp, r3
 8008728:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800872a:	2b02      	cmp	r3, #2
 800872c:	dd1e      	ble.n	800876c <_dtoa_r+0x964>
 800872e:	f1bb 0f00 	cmp.w	fp, #0
 8008732:	f47f adb1 	bne.w	8008298 <_dtoa_r+0x490>
 8008736:	4621      	mov	r1, r4
 8008738:	465b      	mov	r3, fp
 800873a:	2205      	movs	r2, #5
 800873c:	4648      	mov	r0, r9
 800873e:	f000 fa95 	bl	8008c6c <__multadd>
 8008742:	4601      	mov	r1, r0
 8008744:	4604      	mov	r4, r0
 8008746:	9803      	ldr	r0, [sp, #12]
 8008748:	f000 fca0 	bl	800908c <__mcmp>
 800874c:	2800      	cmp	r0, #0
 800874e:	f77f ada3 	ble.w	8008298 <_dtoa_r+0x490>
 8008752:	4656      	mov	r6, sl
 8008754:	2331      	movs	r3, #49	@ 0x31
 8008756:	f806 3b01 	strb.w	r3, [r6], #1
 800875a:	f108 0801 	add.w	r8, r8, #1
 800875e:	e59f      	b.n	80082a0 <_dtoa_r+0x498>
 8008760:	9c08      	ldr	r4, [sp, #32]
 8008762:	46b8      	mov	r8, r7
 8008764:	4625      	mov	r5, r4
 8008766:	e7f4      	b.n	8008752 <_dtoa_r+0x94a>
 8008768:	f8dd b020 	ldr.w	fp, [sp, #32]
 800876c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 8101 	beq.w	8008976 <_dtoa_r+0xb6e>
 8008774:	2e00      	cmp	r6, #0
 8008776:	dd05      	ble.n	8008784 <_dtoa_r+0x97c>
 8008778:	4629      	mov	r1, r5
 800877a:	4632      	mov	r2, r6
 800877c:	4648      	mov	r0, r9
 800877e:	f000 fc19 	bl	8008fb4 <__lshift>
 8008782:	4605      	mov	r5, r0
 8008784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008786:	2b00      	cmp	r3, #0
 8008788:	d05c      	beq.n	8008844 <_dtoa_r+0xa3c>
 800878a:	6869      	ldr	r1, [r5, #4]
 800878c:	4648      	mov	r0, r9
 800878e:	f000 fa0b 	bl	8008ba8 <_Balloc>
 8008792:	4606      	mov	r6, r0
 8008794:	b928      	cbnz	r0, 80087a2 <_dtoa_r+0x99a>
 8008796:	4b82      	ldr	r3, [pc, #520]	@ (80089a0 <_dtoa_r+0xb98>)
 8008798:	4602      	mov	r2, r0
 800879a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800879e:	f7ff bb47 	b.w	8007e30 <_dtoa_r+0x28>
 80087a2:	692a      	ldr	r2, [r5, #16]
 80087a4:	3202      	adds	r2, #2
 80087a6:	0092      	lsls	r2, r2, #2
 80087a8:	f105 010c 	add.w	r1, r5, #12
 80087ac:	300c      	adds	r0, #12
 80087ae:	f000 ffef 	bl	8009790 <memcpy>
 80087b2:	2201      	movs	r2, #1
 80087b4:	4631      	mov	r1, r6
 80087b6:	4648      	mov	r0, r9
 80087b8:	f000 fbfc 	bl	8008fb4 <__lshift>
 80087bc:	f10a 0301 	add.w	r3, sl, #1
 80087c0:	9304      	str	r3, [sp, #16]
 80087c2:	eb0a 030b 	add.w	r3, sl, fp
 80087c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087c8:	9b06      	ldr	r3, [sp, #24]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	462f      	mov	r7, r5
 80087d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d2:	4605      	mov	r5, r0
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	9803      	ldr	r0, [sp, #12]
 80087d8:	4621      	mov	r1, r4
 80087da:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80087de:	f7ff fa88 	bl	8007cf2 <quorem>
 80087e2:	4603      	mov	r3, r0
 80087e4:	3330      	adds	r3, #48	@ 0x30
 80087e6:	9006      	str	r0, [sp, #24]
 80087e8:	4639      	mov	r1, r7
 80087ea:	9803      	ldr	r0, [sp, #12]
 80087ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ee:	f000 fc4d 	bl	800908c <__mcmp>
 80087f2:	462a      	mov	r2, r5
 80087f4:	9008      	str	r0, [sp, #32]
 80087f6:	4621      	mov	r1, r4
 80087f8:	4648      	mov	r0, r9
 80087fa:	f000 fc63 	bl	80090c4 <__mdiff>
 80087fe:	68c2      	ldr	r2, [r0, #12]
 8008800:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008802:	4606      	mov	r6, r0
 8008804:	bb02      	cbnz	r2, 8008848 <_dtoa_r+0xa40>
 8008806:	4601      	mov	r1, r0
 8008808:	9803      	ldr	r0, [sp, #12]
 800880a:	f000 fc3f 	bl	800908c <__mcmp>
 800880e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008810:	4602      	mov	r2, r0
 8008812:	4631      	mov	r1, r6
 8008814:	4648      	mov	r0, r9
 8008816:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800881a:	f000 fa05 	bl	8008c28 <_Bfree>
 800881e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008820:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008822:	9e04      	ldr	r6, [sp, #16]
 8008824:	ea42 0103 	orr.w	r1, r2, r3
 8008828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800882a:	4319      	orrs	r1, r3
 800882c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800882e:	d10d      	bne.n	800884c <_dtoa_r+0xa44>
 8008830:	2b39      	cmp	r3, #57	@ 0x39
 8008832:	d027      	beq.n	8008884 <_dtoa_r+0xa7c>
 8008834:	9a08      	ldr	r2, [sp, #32]
 8008836:	2a00      	cmp	r2, #0
 8008838:	dd01      	ble.n	800883e <_dtoa_r+0xa36>
 800883a:	9b06      	ldr	r3, [sp, #24]
 800883c:	3331      	adds	r3, #49	@ 0x31
 800883e:	f88b 3000 	strb.w	r3, [fp]
 8008842:	e52e      	b.n	80082a2 <_dtoa_r+0x49a>
 8008844:	4628      	mov	r0, r5
 8008846:	e7b9      	b.n	80087bc <_dtoa_r+0x9b4>
 8008848:	2201      	movs	r2, #1
 800884a:	e7e2      	b.n	8008812 <_dtoa_r+0xa0a>
 800884c:	9908      	ldr	r1, [sp, #32]
 800884e:	2900      	cmp	r1, #0
 8008850:	db04      	blt.n	800885c <_dtoa_r+0xa54>
 8008852:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8008854:	4301      	orrs	r1, r0
 8008856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008858:	4301      	orrs	r1, r0
 800885a:	d120      	bne.n	800889e <_dtoa_r+0xa96>
 800885c:	2a00      	cmp	r2, #0
 800885e:	ddee      	ble.n	800883e <_dtoa_r+0xa36>
 8008860:	9903      	ldr	r1, [sp, #12]
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	2201      	movs	r2, #1
 8008866:	4648      	mov	r0, r9
 8008868:	f000 fba4 	bl	8008fb4 <__lshift>
 800886c:	4621      	mov	r1, r4
 800886e:	9003      	str	r0, [sp, #12]
 8008870:	f000 fc0c 	bl	800908c <__mcmp>
 8008874:	2800      	cmp	r0, #0
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	dc02      	bgt.n	8008880 <_dtoa_r+0xa78>
 800887a:	d1e0      	bne.n	800883e <_dtoa_r+0xa36>
 800887c:	07da      	lsls	r2, r3, #31
 800887e:	d5de      	bpl.n	800883e <_dtoa_r+0xa36>
 8008880:	2b39      	cmp	r3, #57	@ 0x39
 8008882:	d1da      	bne.n	800883a <_dtoa_r+0xa32>
 8008884:	2339      	movs	r3, #57	@ 0x39
 8008886:	f88b 3000 	strb.w	r3, [fp]
 800888a:	4633      	mov	r3, r6
 800888c:	461e      	mov	r6, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008894:	2a39      	cmp	r2, #57	@ 0x39
 8008896:	d04e      	beq.n	8008936 <_dtoa_r+0xb2e>
 8008898:	3201      	adds	r2, #1
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	e501      	b.n	80082a2 <_dtoa_r+0x49a>
 800889e:	2a00      	cmp	r2, #0
 80088a0:	dd03      	ble.n	80088aa <_dtoa_r+0xaa2>
 80088a2:	2b39      	cmp	r3, #57	@ 0x39
 80088a4:	d0ee      	beq.n	8008884 <_dtoa_r+0xa7c>
 80088a6:	3301      	adds	r3, #1
 80088a8:	e7c9      	b.n	800883e <_dtoa_r+0xa36>
 80088aa:	9a04      	ldr	r2, [sp, #16]
 80088ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088b2:	428a      	cmp	r2, r1
 80088b4:	d028      	beq.n	8008908 <_dtoa_r+0xb00>
 80088b6:	9903      	ldr	r1, [sp, #12]
 80088b8:	2300      	movs	r3, #0
 80088ba:	220a      	movs	r2, #10
 80088bc:	4648      	mov	r0, r9
 80088be:	f000 f9d5 	bl	8008c6c <__multadd>
 80088c2:	42af      	cmp	r7, r5
 80088c4:	9003      	str	r0, [sp, #12]
 80088c6:	f04f 0300 	mov.w	r3, #0
 80088ca:	f04f 020a 	mov.w	r2, #10
 80088ce:	4639      	mov	r1, r7
 80088d0:	4648      	mov	r0, r9
 80088d2:	d107      	bne.n	80088e4 <_dtoa_r+0xadc>
 80088d4:	f000 f9ca 	bl	8008c6c <__multadd>
 80088d8:	4607      	mov	r7, r0
 80088da:	4605      	mov	r5, r0
 80088dc:	9b04      	ldr	r3, [sp, #16]
 80088de:	3301      	adds	r3, #1
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	e777      	b.n	80087d4 <_dtoa_r+0x9cc>
 80088e4:	f000 f9c2 	bl	8008c6c <__multadd>
 80088e8:	4629      	mov	r1, r5
 80088ea:	4607      	mov	r7, r0
 80088ec:	2300      	movs	r3, #0
 80088ee:	220a      	movs	r2, #10
 80088f0:	4648      	mov	r0, r9
 80088f2:	f000 f9bb 	bl	8008c6c <__multadd>
 80088f6:	4605      	mov	r5, r0
 80088f8:	e7f0      	b.n	80088dc <_dtoa_r+0xad4>
 80088fa:	f1bb 0f00 	cmp.w	fp, #0
 80088fe:	bfcc      	ite	gt
 8008900:	465e      	movgt	r6, fp
 8008902:	2601      	movle	r6, #1
 8008904:	4456      	add	r6, sl
 8008906:	2700      	movs	r7, #0
 8008908:	9903      	ldr	r1, [sp, #12]
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	2201      	movs	r2, #1
 800890e:	4648      	mov	r0, r9
 8008910:	f000 fb50 	bl	8008fb4 <__lshift>
 8008914:	4621      	mov	r1, r4
 8008916:	9003      	str	r0, [sp, #12]
 8008918:	f000 fbb8 	bl	800908c <__mcmp>
 800891c:	2800      	cmp	r0, #0
 800891e:	dcb4      	bgt.n	800888a <_dtoa_r+0xa82>
 8008920:	d102      	bne.n	8008928 <_dtoa_r+0xb20>
 8008922:	9b04      	ldr	r3, [sp, #16]
 8008924:	07db      	lsls	r3, r3, #31
 8008926:	d4b0      	bmi.n	800888a <_dtoa_r+0xa82>
 8008928:	4633      	mov	r3, r6
 800892a:	461e      	mov	r6, r3
 800892c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008930:	2a30      	cmp	r2, #48	@ 0x30
 8008932:	d0fa      	beq.n	800892a <_dtoa_r+0xb22>
 8008934:	e4b5      	b.n	80082a2 <_dtoa_r+0x49a>
 8008936:	459a      	cmp	sl, r3
 8008938:	d1a8      	bne.n	800888c <_dtoa_r+0xa84>
 800893a:	2331      	movs	r3, #49	@ 0x31
 800893c:	f108 0801 	add.w	r8, r8, #1
 8008940:	f88a 3000 	strb.w	r3, [sl]
 8008944:	e4ad      	b.n	80082a2 <_dtoa_r+0x49a>
 8008946:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008948:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80089a4 <_dtoa_r+0xb9c>
 800894c:	b11b      	cbz	r3, 8008956 <_dtoa_r+0xb4e>
 800894e:	f10a 0308 	add.w	r3, sl, #8
 8008952:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	4650      	mov	r0, sl
 8008958:	b017      	add	sp, #92	@ 0x5c
 800895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008960:	2b01      	cmp	r3, #1
 8008962:	f77f ae2e 	ble.w	80085c2 <_dtoa_r+0x7ba>
 8008966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008968:	930a      	str	r3, [sp, #40]	@ 0x28
 800896a:	2001      	movs	r0, #1
 800896c:	e64d      	b.n	800860a <_dtoa_r+0x802>
 800896e:	f1bb 0f00 	cmp.w	fp, #0
 8008972:	f77f aed9 	ble.w	8008728 <_dtoa_r+0x920>
 8008976:	4656      	mov	r6, sl
 8008978:	9803      	ldr	r0, [sp, #12]
 800897a:	4621      	mov	r1, r4
 800897c:	f7ff f9b9 	bl	8007cf2 <quorem>
 8008980:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008984:	f806 3b01 	strb.w	r3, [r6], #1
 8008988:	eba6 020a 	sub.w	r2, r6, sl
 800898c:	4593      	cmp	fp, r2
 800898e:	ddb4      	ble.n	80088fa <_dtoa_r+0xaf2>
 8008990:	9903      	ldr	r1, [sp, #12]
 8008992:	2300      	movs	r3, #0
 8008994:	220a      	movs	r2, #10
 8008996:	4648      	mov	r0, r9
 8008998:	f000 f968 	bl	8008c6c <__multadd>
 800899c:	9003      	str	r0, [sp, #12]
 800899e:	e7eb      	b.n	8008978 <_dtoa_r+0xb70>
 80089a0:	08009c30 	.word	0x08009c30
 80089a4:	08009bb4 	.word	0x08009bb4

080089a8 <_free_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4605      	mov	r5, r0
 80089ac:	2900      	cmp	r1, #0
 80089ae:	d041      	beq.n	8008a34 <_free_r+0x8c>
 80089b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089b4:	1f0c      	subs	r4, r1, #4
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bfb8      	it	lt
 80089ba:	18e4      	addlt	r4, r4, r3
 80089bc:	f000 f8e8 	bl	8008b90 <__malloc_lock>
 80089c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a38 <_free_r+0x90>)
 80089c2:	6813      	ldr	r3, [r2, #0]
 80089c4:	b933      	cbnz	r3, 80089d4 <_free_r+0x2c>
 80089c6:	6063      	str	r3, [r4, #4]
 80089c8:	6014      	str	r4, [r2, #0]
 80089ca:	4628      	mov	r0, r5
 80089cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089d0:	f000 b8e4 	b.w	8008b9c <__malloc_unlock>
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	d908      	bls.n	80089ea <_free_r+0x42>
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	1821      	adds	r1, r4, r0
 80089dc:	428b      	cmp	r3, r1
 80089de:	bf01      	itttt	eq
 80089e0:	6819      	ldreq	r1, [r3, #0]
 80089e2:	685b      	ldreq	r3, [r3, #4]
 80089e4:	1809      	addeq	r1, r1, r0
 80089e6:	6021      	streq	r1, [r4, #0]
 80089e8:	e7ed      	b.n	80089c6 <_free_r+0x1e>
 80089ea:	461a      	mov	r2, r3
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	b10b      	cbz	r3, 80089f4 <_free_r+0x4c>
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	d9fa      	bls.n	80089ea <_free_r+0x42>
 80089f4:	6811      	ldr	r1, [r2, #0]
 80089f6:	1850      	adds	r0, r2, r1
 80089f8:	42a0      	cmp	r0, r4
 80089fa:	d10b      	bne.n	8008a14 <_free_r+0x6c>
 80089fc:	6820      	ldr	r0, [r4, #0]
 80089fe:	4401      	add	r1, r0
 8008a00:	1850      	adds	r0, r2, r1
 8008a02:	4283      	cmp	r3, r0
 8008a04:	6011      	str	r1, [r2, #0]
 8008a06:	d1e0      	bne.n	80089ca <_free_r+0x22>
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	6053      	str	r3, [r2, #4]
 8008a0e:	4408      	add	r0, r1
 8008a10:	6010      	str	r0, [r2, #0]
 8008a12:	e7da      	b.n	80089ca <_free_r+0x22>
 8008a14:	d902      	bls.n	8008a1c <_free_r+0x74>
 8008a16:	230c      	movs	r3, #12
 8008a18:	602b      	str	r3, [r5, #0]
 8008a1a:	e7d6      	b.n	80089ca <_free_r+0x22>
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	1821      	adds	r1, r4, r0
 8008a20:	428b      	cmp	r3, r1
 8008a22:	bf04      	itt	eq
 8008a24:	6819      	ldreq	r1, [r3, #0]
 8008a26:	685b      	ldreq	r3, [r3, #4]
 8008a28:	6063      	str	r3, [r4, #4]
 8008a2a:	bf04      	itt	eq
 8008a2c:	1809      	addeq	r1, r1, r0
 8008a2e:	6021      	streq	r1, [r4, #0]
 8008a30:	6054      	str	r4, [r2, #4]
 8008a32:	e7ca      	b.n	80089ca <_free_r+0x22>
 8008a34:	bd38      	pop	{r3, r4, r5, pc}
 8008a36:	bf00      	nop
 8008a38:	2000072c 	.word	0x2000072c

08008a3c <malloc>:
 8008a3c:	4b02      	ldr	r3, [pc, #8]	@ (8008a48 <malloc+0xc>)
 8008a3e:	4601      	mov	r1, r0
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	f000 b825 	b.w	8008a90 <_malloc_r>
 8008a46:	bf00      	nop
 8008a48:	20000028 	.word	0x20000028

08008a4c <sbrk_aligned>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a8c <sbrk_aligned+0x40>)
 8008a50:	460c      	mov	r4, r1
 8008a52:	6831      	ldr	r1, [r6, #0]
 8008a54:	4605      	mov	r5, r0
 8008a56:	b911      	cbnz	r1, 8008a5e <sbrk_aligned+0x12>
 8008a58:	f000 fe8a 	bl	8009770 <_sbrk_r>
 8008a5c:	6030      	str	r0, [r6, #0]
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	f000 fe85 	bl	8009770 <_sbrk_r>
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	d103      	bne.n	8008a72 <sbrk_aligned+0x26>
 8008a6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008a6e:	4620      	mov	r0, r4
 8008a70:	bd70      	pop	{r4, r5, r6, pc}
 8008a72:	1cc4      	adds	r4, r0, #3
 8008a74:	f024 0403 	bic.w	r4, r4, #3
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	d0f8      	beq.n	8008a6e <sbrk_aligned+0x22>
 8008a7c:	1a21      	subs	r1, r4, r0
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 fe76 	bl	8009770 <_sbrk_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	d1f2      	bne.n	8008a6e <sbrk_aligned+0x22>
 8008a88:	e7ef      	b.n	8008a6a <sbrk_aligned+0x1e>
 8008a8a:	bf00      	nop
 8008a8c:	20000728 	.word	0x20000728

08008a90 <_malloc_r>:
 8008a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	1ccd      	adds	r5, r1, #3
 8008a96:	f025 0503 	bic.w	r5, r5, #3
 8008a9a:	3508      	adds	r5, #8
 8008a9c:	2d0c      	cmp	r5, #12
 8008a9e:	bf38      	it	cc
 8008aa0:	250c      	movcc	r5, #12
 8008aa2:	2d00      	cmp	r5, #0
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	db01      	blt.n	8008aac <_malloc_r+0x1c>
 8008aa8:	42a9      	cmp	r1, r5
 8008aaa:	d904      	bls.n	8008ab6 <_malloc_r+0x26>
 8008aac:	230c      	movs	r3, #12
 8008aae:	6033      	str	r3, [r6, #0]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b8c <_malloc_r+0xfc>
 8008aba:	f000 f869 	bl	8008b90 <__malloc_lock>
 8008abe:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac2:	461c      	mov	r4, r3
 8008ac4:	bb44      	cbnz	r4, 8008b18 <_malloc_r+0x88>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff ffbf 	bl	8008a4c <sbrk_aligned>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	d158      	bne.n	8008b86 <_malloc_r+0xf6>
 8008ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ad8:	4627      	mov	r7, r4
 8008ada:	2f00      	cmp	r7, #0
 8008adc:	d143      	bne.n	8008b66 <_malloc_r+0xd6>
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	d04b      	beq.n	8008b7a <_malloc_r+0xea>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	eb04 0903 	add.w	r9, r4, r3
 8008aec:	f000 fe40 	bl	8009770 <_sbrk_r>
 8008af0:	4581      	cmp	r9, r0
 8008af2:	d142      	bne.n	8008b7a <_malloc_r+0xea>
 8008af4:	6821      	ldr	r1, [r4, #0]
 8008af6:	1a6d      	subs	r5, r5, r1
 8008af8:	4629      	mov	r1, r5
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff ffa6 	bl	8008a4c <sbrk_aligned>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d03a      	beq.n	8008b7a <_malloc_r+0xea>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	442b      	add	r3, r5
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	bb62      	cbnz	r2, 8008b6c <_malloc_r+0xdc>
 8008b12:	f8c8 7000 	str.w	r7, [r8]
 8008b16:	e00f      	b.n	8008b38 <_malloc_r+0xa8>
 8008b18:	6822      	ldr	r2, [r4, #0]
 8008b1a:	1b52      	subs	r2, r2, r5
 8008b1c:	d420      	bmi.n	8008b60 <_malloc_r+0xd0>
 8008b1e:	2a0b      	cmp	r2, #11
 8008b20:	d917      	bls.n	8008b52 <_malloc_r+0xc2>
 8008b22:	1961      	adds	r1, r4, r5
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	6025      	str	r5, [r4, #0]
 8008b28:	bf18      	it	ne
 8008b2a:	6059      	strne	r1, [r3, #4]
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	bf08      	it	eq
 8008b30:	f8c8 1000 	streq.w	r1, [r8]
 8008b34:	5162      	str	r2, [r4, r5]
 8008b36:	604b      	str	r3, [r1, #4]
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f000 f82f 	bl	8008b9c <__malloc_unlock>
 8008b3e:	f104 000b 	add.w	r0, r4, #11
 8008b42:	1d23      	adds	r3, r4, #4
 8008b44:	f020 0007 	bic.w	r0, r0, #7
 8008b48:	1ac2      	subs	r2, r0, r3
 8008b4a:	bf1c      	itt	ne
 8008b4c:	1a1b      	subne	r3, r3, r0
 8008b4e:	50a3      	strne	r3, [r4, r2]
 8008b50:	e7af      	b.n	8008ab2 <_malloc_r+0x22>
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	bf0c      	ite	eq
 8008b58:	f8c8 2000 	streq.w	r2, [r8]
 8008b5c:	605a      	strne	r2, [r3, #4]
 8008b5e:	e7eb      	b.n	8008b38 <_malloc_r+0xa8>
 8008b60:	4623      	mov	r3, r4
 8008b62:	6864      	ldr	r4, [r4, #4]
 8008b64:	e7ae      	b.n	8008ac4 <_malloc_r+0x34>
 8008b66:	463c      	mov	r4, r7
 8008b68:	687f      	ldr	r7, [r7, #4]
 8008b6a:	e7b6      	b.n	8008ada <_malloc_r+0x4a>
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	42a3      	cmp	r3, r4
 8008b72:	d1fb      	bne.n	8008b6c <_malloc_r+0xdc>
 8008b74:	2300      	movs	r3, #0
 8008b76:	6053      	str	r3, [r2, #4]
 8008b78:	e7de      	b.n	8008b38 <_malloc_r+0xa8>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	6033      	str	r3, [r6, #0]
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f80c 	bl	8008b9c <__malloc_unlock>
 8008b84:	e794      	b.n	8008ab0 <_malloc_r+0x20>
 8008b86:	6005      	str	r5, [r0, #0]
 8008b88:	e7d6      	b.n	8008b38 <_malloc_r+0xa8>
 8008b8a:	bf00      	nop
 8008b8c:	2000072c 	.word	0x2000072c

08008b90 <__malloc_lock>:
 8008b90:	4801      	ldr	r0, [pc, #4]	@ (8008b98 <__malloc_lock+0x8>)
 8008b92:	f7ff b8ac 	b.w	8007cee <__retarget_lock_acquire_recursive>
 8008b96:	bf00      	nop
 8008b98:	20000724 	.word	0x20000724

08008b9c <__malloc_unlock>:
 8008b9c:	4801      	ldr	r0, [pc, #4]	@ (8008ba4 <__malloc_unlock+0x8>)
 8008b9e:	f7ff b8a7 	b.w	8007cf0 <__retarget_lock_release_recursive>
 8008ba2:	bf00      	nop
 8008ba4:	20000724 	.word	0x20000724

08008ba8 <_Balloc>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	69c6      	ldr	r6, [r0, #28]
 8008bac:	4604      	mov	r4, r0
 8008bae:	460d      	mov	r5, r1
 8008bb0:	b976      	cbnz	r6, 8008bd0 <_Balloc+0x28>
 8008bb2:	2010      	movs	r0, #16
 8008bb4:	f7ff ff42 	bl	8008a3c <malloc>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	61e0      	str	r0, [r4, #28]
 8008bbc:	b920      	cbnz	r0, 8008bc8 <_Balloc+0x20>
 8008bbe:	4b18      	ldr	r3, [pc, #96]	@ (8008c20 <_Balloc+0x78>)
 8008bc0:	4818      	ldr	r0, [pc, #96]	@ (8008c24 <_Balloc+0x7c>)
 8008bc2:	216b      	movs	r1, #107	@ 0x6b
 8008bc4:	f000 fdf2 	bl	80097ac <__assert_func>
 8008bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bcc:	6006      	str	r6, [r0, #0]
 8008bce:	60c6      	str	r6, [r0, #12]
 8008bd0:	69e6      	ldr	r6, [r4, #28]
 8008bd2:	68f3      	ldr	r3, [r6, #12]
 8008bd4:	b183      	cbz	r3, 8008bf8 <_Balloc+0x50>
 8008bd6:	69e3      	ldr	r3, [r4, #28]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bde:	b9b8      	cbnz	r0, 8008c10 <_Balloc+0x68>
 8008be0:	2101      	movs	r1, #1
 8008be2:	fa01 f605 	lsl.w	r6, r1, r5
 8008be6:	1d72      	adds	r2, r6, #5
 8008be8:	0092      	lsls	r2, r2, #2
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 fdfc 	bl	80097e8 <_calloc_r>
 8008bf0:	b160      	cbz	r0, 8008c0c <_Balloc+0x64>
 8008bf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bf6:	e00e      	b.n	8008c16 <_Balloc+0x6e>
 8008bf8:	2221      	movs	r2, #33	@ 0x21
 8008bfa:	2104      	movs	r1, #4
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 fdf3 	bl	80097e8 <_calloc_r>
 8008c02:	69e3      	ldr	r3, [r4, #28]
 8008c04:	60f0      	str	r0, [r6, #12]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e4      	bne.n	8008bd6 <_Balloc+0x2e>
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	6802      	ldr	r2, [r0, #0]
 8008c12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c16:	2300      	movs	r3, #0
 8008c18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c1c:	e7f7      	b.n	8008c0e <_Balloc+0x66>
 8008c1e:	bf00      	nop
 8008c20:	08009bc1 	.word	0x08009bc1
 8008c24:	08009c41 	.word	0x08009c41

08008c28 <_Bfree>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	69c6      	ldr	r6, [r0, #28]
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	b976      	cbnz	r6, 8008c50 <_Bfree+0x28>
 8008c32:	2010      	movs	r0, #16
 8008c34:	f7ff ff02 	bl	8008a3c <malloc>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	61e8      	str	r0, [r5, #28]
 8008c3c:	b920      	cbnz	r0, 8008c48 <_Bfree+0x20>
 8008c3e:	4b09      	ldr	r3, [pc, #36]	@ (8008c64 <_Bfree+0x3c>)
 8008c40:	4809      	ldr	r0, [pc, #36]	@ (8008c68 <_Bfree+0x40>)
 8008c42:	218f      	movs	r1, #143	@ 0x8f
 8008c44:	f000 fdb2 	bl	80097ac <__assert_func>
 8008c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c4c:	6006      	str	r6, [r0, #0]
 8008c4e:	60c6      	str	r6, [r0, #12]
 8008c50:	b13c      	cbz	r4, 8008c62 <_Bfree+0x3a>
 8008c52:	69eb      	ldr	r3, [r5, #28]
 8008c54:	6862      	ldr	r2, [r4, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c5c:	6021      	str	r1, [r4, #0]
 8008c5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	08009bc1 	.word	0x08009bc1
 8008c68:	08009c41 	.word	0x08009c41

08008c6c <__multadd>:
 8008c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c70:	690d      	ldr	r5, [r1, #16]
 8008c72:	4607      	mov	r7, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	461e      	mov	r6, r3
 8008c78:	f101 0c14 	add.w	ip, r1, #20
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	f8dc 3000 	ldr.w	r3, [ip]
 8008c82:	b299      	uxth	r1, r3
 8008c84:	fb02 6101 	mla	r1, r2, r1, r6
 8008c88:	0c1e      	lsrs	r6, r3, #16
 8008c8a:	0c0b      	lsrs	r3, r1, #16
 8008c8c:	fb02 3306 	mla	r3, r2, r6, r3
 8008c90:	b289      	uxth	r1, r1
 8008c92:	3001      	adds	r0, #1
 8008c94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c98:	4285      	cmp	r5, r0
 8008c9a:	f84c 1b04 	str.w	r1, [ip], #4
 8008c9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ca2:	dcec      	bgt.n	8008c7e <__multadd+0x12>
 8008ca4:	b30e      	cbz	r6, 8008cea <__multadd+0x7e>
 8008ca6:	68a3      	ldr	r3, [r4, #8]
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	dc19      	bgt.n	8008ce0 <__multadd+0x74>
 8008cac:	6861      	ldr	r1, [r4, #4]
 8008cae:	4638      	mov	r0, r7
 8008cb0:	3101      	adds	r1, #1
 8008cb2:	f7ff ff79 	bl	8008ba8 <_Balloc>
 8008cb6:	4680      	mov	r8, r0
 8008cb8:	b928      	cbnz	r0, 8008cc6 <__multadd+0x5a>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf0 <__multadd+0x84>)
 8008cbe:	480d      	ldr	r0, [pc, #52]	@ (8008cf4 <__multadd+0x88>)
 8008cc0:	21ba      	movs	r1, #186	@ 0xba
 8008cc2:	f000 fd73 	bl	80097ac <__assert_func>
 8008cc6:	6922      	ldr	r2, [r4, #16]
 8008cc8:	3202      	adds	r2, #2
 8008cca:	f104 010c 	add.w	r1, r4, #12
 8008cce:	0092      	lsls	r2, r2, #2
 8008cd0:	300c      	adds	r0, #12
 8008cd2:	f000 fd5d 	bl	8009790 <memcpy>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	4638      	mov	r0, r7
 8008cda:	f7ff ffa5 	bl	8008c28 <_Bfree>
 8008cde:	4644      	mov	r4, r8
 8008ce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	615e      	str	r6, [r3, #20]
 8008ce8:	6125      	str	r5, [r4, #16]
 8008cea:	4620      	mov	r0, r4
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	08009c30 	.word	0x08009c30
 8008cf4:	08009c41 	.word	0x08009c41

08008cf8 <__hi0bits>:
 8008cf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	bf36      	itet	cc
 8008d00:	0403      	lslcc	r3, r0, #16
 8008d02:	2000      	movcs	r0, #0
 8008d04:	2010      	movcc	r0, #16
 8008d06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d0a:	bf3c      	itt	cc
 8008d0c:	021b      	lslcc	r3, r3, #8
 8008d0e:	3008      	addcc	r0, #8
 8008d10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d14:	bf3c      	itt	cc
 8008d16:	011b      	lslcc	r3, r3, #4
 8008d18:	3004      	addcc	r0, #4
 8008d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d1e:	bf3c      	itt	cc
 8008d20:	009b      	lslcc	r3, r3, #2
 8008d22:	3002      	addcc	r0, #2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	db05      	blt.n	8008d34 <__hi0bits+0x3c>
 8008d28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d2c:	f100 0001 	add.w	r0, r0, #1
 8008d30:	bf08      	it	eq
 8008d32:	2020      	moveq	r0, #32
 8008d34:	4770      	bx	lr

08008d36 <__lo0bits>:
 8008d36:	6803      	ldr	r3, [r0, #0]
 8008d38:	4602      	mov	r2, r0
 8008d3a:	f013 0007 	ands.w	r0, r3, #7
 8008d3e:	d00b      	beq.n	8008d58 <__lo0bits+0x22>
 8008d40:	07d9      	lsls	r1, r3, #31
 8008d42:	d421      	bmi.n	8008d88 <__lo0bits+0x52>
 8008d44:	0798      	lsls	r0, r3, #30
 8008d46:	bf49      	itett	mi
 8008d48:	085b      	lsrmi	r3, r3, #1
 8008d4a:	089b      	lsrpl	r3, r3, #2
 8008d4c:	2001      	movmi	r0, #1
 8008d4e:	6013      	strmi	r3, [r2, #0]
 8008d50:	bf5c      	itt	pl
 8008d52:	6013      	strpl	r3, [r2, #0]
 8008d54:	2002      	movpl	r0, #2
 8008d56:	4770      	bx	lr
 8008d58:	b299      	uxth	r1, r3
 8008d5a:	b909      	cbnz	r1, 8008d60 <__lo0bits+0x2a>
 8008d5c:	0c1b      	lsrs	r3, r3, #16
 8008d5e:	2010      	movs	r0, #16
 8008d60:	b2d9      	uxtb	r1, r3
 8008d62:	b909      	cbnz	r1, 8008d68 <__lo0bits+0x32>
 8008d64:	3008      	adds	r0, #8
 8008d66:	0a1b      	lsrs	r3, r3, #8
 8008d68:	0719      	lsls	r1, r3, #28
 8008d6a:	bf04      	itt	eq
 8008d6c:	091b      	lsreq	r3, r3, #4
 8008d6e:	3004      	addeq	r0, #4
 8008d70:	0799      	lsls	r1, r3, #30
 8008d72:	bf04      	itt	eq
 8008d74:	089b      	lsreq	r3, r3, #2
 8008d76:	3002      	addeq	r0, #2
 8008d78:	07d9      	lsls	r1, r3, #31
 8008d7a:	d403      	bmi.n	8008d84 <__lo0bits+0x4e>
 8008d7c:	085b      	lsrs	r3, r3, #1
 8008d7e:	f100 0001 	add.w	r0, r0, #1
 8008d82:	d003      	beq.n	8008d8c <__lo0bits+0x56>
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	4770      	bx	lr
 8008d88:	2000      	movs	r0, #0
 8008d8a:	4770      	bx	lr
 8008d8c:	2020      	movs	r0, #32
 8008d8e:	4770      	bx	lr

08008d90 <__i2b>:
 8008d90:	b510      	push	{r4, lr}
 8008d92:	460c      	mov	r4, r1
 8008d94:	2101      	movs	r1, #1
 8008d96:	f7ff ff07 	bl	8008ba8 <_Balloc>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	b928      	cbnz	r0, 8008daa <__i2b+0x1a>
 8008d9e:	4b05      	ldr	r3, [pc, #20]	@ (8008db4 <__i2b+0x24>)
 8008da0:	4805      	ldr	r0, [pc, #20]	@ (8008db8 <__i2b+0x28>)
 8008da2:	f240 1145 	movw	r1, #325	@ 0x145
 8008da6:	f000 fd01 	bl	80097ac <__assert_func>
 8008daa:	2301      	movs	r3, #1
 8008dac:	6144      	str	r4, [r0, #20]
 8008dae:	6103      	str	r3, [r0, #16]
 8008db0:	bd10      	pop	{r4, pc}
 8008db2:	bf00      	nop
 8008db4:	08009c30 	.word	0x08009c30
 8008db8:	08009c41 	.word	0x08009c41

08008dbc <__multiply>:
 8008dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	4617      	mov	r7, r2
 8008dc2:	690a      	ldr	r2, [r1, #16]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	bfa8      	it	ge
 8008dca:	463b      	movge	r3, r7
 8008dcc:	4689      	mov	r9, r1
 8008dce:	bfa4      	itt	ge
 8008dd0:	460f      	movge	r7, r1
 8008dd2:	4699      	movge	r9, r3
 8008dd4:	693d      	ldr	r5, [r7, #16]
 8008dd6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	eb05 060a 	add.w	r6, r5, sl
 8008de2:	42b3      	cmp	r3, r6
 8008de4:	b085      	sub	sp, #20
 8008de6:	bfb8      	it	lt
 8008de8:	3101      	addlt	r1, #1
 8008dea:	f7ff fedd 	bl	8008ba8 <_Balloc>
 8008dee:	b930      	cbnz	r0, 8008dfe <__multiply+0x42>
 8008df0:	4602      	mov	r2, r0
 8008df2:	4b41      	ldr	r3, [pc, #260]	@ (8008ef8 <__multiply+0x13c>)
 8008df4:	4841      	ldr	r0, [pc, #260]	@ (8008efc <__multiply+0x140>)
 8008df6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008dfa:	f000 fcd7 	bl	80097ac <__assert_func>
 8008dfe:	f100 0414 	add.w	r4, r0, #20
 8008e02:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e06:	4623      	mov	r3, r4
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4573      	cmp	r3, lr
 8008e0c:	d320      	bcc.n	8008e50 <__multiply+0x94>
 8008e0e:	f107 0814 	add.w	r8, r7, #20
 8008e12:	f109 0114 	add.w	r1, r9, #20
 8008e16:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008e1a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008e1e:	9302      	str	r3, [sp, #8]
 8008e20:	1beb      	subs	r3, r5, r7
 8008e22:	3b15      	subs	r3, #21
 8008e24:	f023 0303 	bic.w	r3, r3, #3
 8008e28:	3304      	adds	r3, #4
 8008e2a:	3715      	adds	r7, #21
 8008e2c:	42bd      	cmp	r5, r7
 8008e2e:	bf38      	it	cc
 8008e30:	2304      	movcc	r3, #4
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	9b02      	ldr	r3, [sp, #8]
 8008e36:	9103      	str	r1, [sp, #12]
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	d80c      	bhi.n	8008e56 <__multiply+0x9a>
 8008e3c:	2e00      	cmp	r6, #0
 8008e3e:	dd03      	ble.n	8008e48 <__multiply+0x8c>
 8008e40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d055      	beq.n	8008ef4 <__multiply+0x138>
 8008e48:	6106      	str	r6, [r0, #16]
 8008e4a:	b005      	add	sp, #20
 8008e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e50:	f843 2b04 	str.w	r2, [r3], #4
 8008e54:	e7d9      	b.n	8008e0a <__multiply+0x4e>
 8008e56:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e5a:	f1ba 0f00 	cmp.w	sl, #0
 8008e5e:	d01f      	beq.n	8008ea0 <__multiply+0xe4>
 8008e60:	46c4      	mov	ip, r8
 8008e62:	46a1      	mov	r9, r4
 8008e64:	2700      	movs	r7, #0
 8008e66:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e6a:	f8d9 3000 	ldr.w	r3, [r9]
 8008e6e:	fa1f fb82 	uxth.w	fp, r2
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e78:	443b      	add	r3, r7
 8008e7a:	f8d9 7000 	ldr.w	r7, [r9]
 8008e7e:	0c12      	lsrs	r2, r2, #16
 8008e80:	0c3f      	lsrs	r7, r7, #16
 8008e82:	fb0a 7202 	mla	r2, sl, r2, r7
 8008e86:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e90:	4565      	cmp	r5, ip
 8008e92:	f849 3b04 	str.w	r3, [r9], #4
 8008e96:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008e9a:	d8e4      	bhi.n	8008e66 <__multiply+0xaa>
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	50e7      	str	r7, [r4, r3]
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ea6:	3104      	adds	r1, #4
 8008ea8:	f1b9 0f00 	cmp.w	r9, #0
 8008eac:	d020      	beq.n	8008ef0 <__multiply+0x134>
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	4647      	mov	r7, r8
 8008eb2:	46a4      	mov	ip, r4
 8008eb4:	f04f 0a00 	mov.w	sl, #0
 8008eb8:	f8b7 b000 	ldrh.w	fp, [r7]
 8008ebc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008ec0:	fb09 220b 	mla	r2, r9, fp, r2
 8008ec4:	4452      	add	r2, sl
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ecc:	f84c 3b04 	str.w	r3, [ip], #4
 8008ed0:	f857 3b04 	ldr.w	r3, [r7], #4
 8008ed4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ed8:	f8bc 3000 	ldrh.w	r3, [ip]
 8008edc:	fb09 330a 	mla	r3, r9, sl, r3
 8008ee0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008ee4:	42bd      	cmp	r5, r7
 8008ee6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008eea:	d8e5      	bhi.n	8008eb8 <__multiply+0xfc>
 8008eec:	9a01      	ldr	r2, [sp, #4]
 8008eee:	50a3      	str	r3, [r4, r2]
 8008ef0:	3404      	adds	r4, #4
 8008ef2:	e79f      	b.n	8008e34 <__multiply+0x78>
 8008ef4:	3e01      	subs	r6, #1
 8008ef6:	e7a1      	b.n	8008e3c <__multiply+0x80>
 8008ef8:	08009c30 	.word	0x08009c30
 8008efc:	08009c41 	.word	0x08009c41

08008f00 <__pow5mult>:
 8008f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f04:	4615      	mov	r5, r2
 8008f06:	f012 0203 	ands.w	r2, r2, #3
 8008f0a:	4607      	mov	r7, r0
 8008f0c:	460e      	mov	r6, r1
 8008f0e:	d007      	beq.n	8008f20 <__pow5mult+0x20>
 8008f10:	4c25      	ldr	r4, [pc, #148]	@ (8008fa8 <__pow5mult+0xa8>)
 8008f12:	3a01      	subs	r2, #1
 8008f14:	2300      	movs	r3, #0
 8008f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f1a:	f7ff fea7 	bl	8008c6c <__multadd>
 8008f1e:	4606      	mov	r6, r0
 8008f20:	10ad      	asrs	r5, r5, #2
 8008f22:	d03d      	beq.n	8008fa0 <__pow5mult+0xa0>
 8008f24:	69fc      	ldr	r4, [r7, #28]
 8008f26:	b97c      	cbnz	r4, 8008f48 <__pow5mult+0x48>
 8008f28:	2010      	movs	r0, #16
 8008f2a:	f7ff fd87 	bl	8008a3c <malloc>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	61f8      	str	r0, [r7, #28]
 8008f32:	b928      	cbnz	r0, 8008f40 <__pow5mult+0x40>
 8008f34:	4b1d      	ldr	r3, [pc, #116]	@ (8008fac <__pow5mult+0xac>)
 8008f36:	481e      	ldr	r0, [pc, #120]	@ (8008fb0 <__pow5mult+0xb0>)
 8008f38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f3c:	f000 fc36 	bl	80097ac <__assert_func>
 8008f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f44:	6004      	str	r4, [r0, #0]
 8008f46:	60c4      	str	r4, [r0, #12]
 8008f48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f50:	b94c      	cbnz	r4, 8008f66 <__pow5mult+0x66>
 8008f52:	f240 2171 	movw	r1, #625	@ 0x271
 8008f56:	4638      	mov	r0, r7
 8008f58:	f7ff ff1a 	bl	8008d90 <__i2b>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f62:	4604      	mov	r4, r0
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	f04f 0900 	mov.w	r9, #0
 8008f6a:	07eb      	lsls	r3, r5, #31
 8008f6c:	d50a      	bpl.n	8008f84 <__pow5mult+0x84>
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4622      	mov	r2, r4
 8008f72:	4638      	mov	r0, r7
 8008f74:	f7ff ff22 	bl	8008dbc <__multiply>
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff fe53 	bl	8008c28 <_Bfree>
 8008f82:	4646      	mov	r6, r8
 8008f84:	106d      	asrs	r5, r5, #1
 8008f86:	d00b      	beq.n	8008fa0 <__pow5mult+0xa0>
 8008f88:	6820      	ldr	r0, [r4, #0]
 8008f8a:	b938      	cbnz	r0, 8008f9c <__pow5mult+0x9c>
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4638      	mov	r0, r7
 8008f92:	f7ff ff13 	bl	8008dbc <__multiply>
 8008f96:	6020      	str	r0, [r4, #0]
 8008f98:	f8c0 9000 	str.w	r9, [r0]
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	e7e4      	b.n	8008f6a <__pow5mult+0x6a>
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa6:	bf00      	nop
 8008fa8:	08009cf4 	.word	0x08009cf4
 8008fac:	08009bc1 	.word	0x08009bc1
 8008fb0:	08009c41 	.word	0x08009c41

08008fb4 <__lshift>:
 8008fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb8:	460c      	mov	r4, r1
 8008fba:	6849      	ldr	r1, [r1, #4]
 8008fbc:	6923      	ldr	r3, [r4, #16]
 8008fbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fc2:	68a3      	ldr	r3, [r4, #8]
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	4691      	mov	r9, r2
 8008fc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fcc:	f108 0601 	add.w	r6, r8, #1
 8008fd0:	42b3      	cmp	r3, r6
 8008fd2:	db0b      	blt.n	8008fec <__lshift+0x38>
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f7ff fde7 	bl	8008ba8 <_Balloc>
 8008fda:	4605      	mov	r5, r0
 8008fdc:	b948      	cbnz	r0, 8008ff2 <__lshift+0x3e>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	4b28      	ldr	r3, [pc, #160]	@ (8009084 <__lshift+0xd0>)
 8008fe2:	4829      	ldr	r0, [pc, #164]	@ (8009088 <__lshift+0xd4>)
 8008fe4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008fe8:	f000 fbe0 	bl	80097ac <__assert_func>
 8008fec:	3101      	adds	r1, #1
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	e7ee      	b.n	8008fd0 <__lshift+0x1c>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f100 0114 	add.w	r1, r0, #20
 8008ff8:	f100 0210 	add.w	r2, r0, #16
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	4553      	cmp	r3, sl
 8009000:	db33      	blt.n	800906a <__lshift+0xb6>
 8009002:	6920      	ldr	r0, [r4, #16]
 8009004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009008:	f104 0314 	add.w	r3, r4, #20
 800900c:	f019 091f 	ands.w	r9, r9, #31
 8009010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009018:	d02b      	beq.n	8009072 <__lshift+0xbe>
 800901a:	f1c9 0e20 	rsb	lr, r9, #32
 800901e:	468a      	mov	sl, r1
 8009020:	2200      	movs	r2, #0
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	fa00 f009 	lsl.w	r0, r0, r9
 8009028:	4310      	orrs	r0, r2
 800902a:	f84a 0b04 	str.w	r0, [sl], #4
 800902e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009032:	459c      	cmp	ip, r3
 8009034:	fa22 f20e 	lsr.w	r2, r2, lr
 8009038:	d8f3      	bhi.n	8009022 <__lshift+0x6e>
 800903a:	ebac 0304 	sub.w	r3, ip, r4
 800903e:	3b15      	subs	r3, #21
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	3304      	adds	r3, #4
 8009046:	f104 0015 	add.w	r0, r4, #21
 800904a:	4560      	cmp	r0, ip
 800904c:	bf88      	it	hi
 800904e:	2304      	movhi	r3, #4
 8009050:	50ca      	str	r2, [r1, r3]
 8009052:	b10a      	cbz	r2, 8009058 <__lshift+0xa4>
 8009054:	f108 0602 	add.w	r6, r8, #2
 8009058:	3e01      	subs	r6, #1
 800905a:	4638      	mov	r0, r7
 800905c:	612e      	str	r6, [r5, #16]
 800905e:	4621      	mov	r1, r4
 8009060:	f7ff fde2 	bl	8008c28 <_Bfree>
 8009064:	4628      	mov	r0, r5
 8009066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906a:	f842 0f04 	str.w	r0, [r2, #4]!
 800906e:	3301      	adds	r3, #1
 8009070:	e7c5      	b.n	8008ffe <__lshift+0x4a>
 8009072:	3904      	subs	r1, #4
 8009074:	f853 2b04 	ldr.w	r2, [r3], #4
 8009078:	f841 2f04 	str.w	r2, [r1, #4]!
 800907c:	459c      	cmp	ip, r3
 800907e:	d8f9      	bhi.n	8009074 <__lshift+0xc0>
 8009080:	e7ea      	b.n	8009058 <__lshift+0xa4>
 8009082:	bf00      	nop
 8009084:	08009c30 	.word	0x08009c30
 8009088:	08009c41 	.word	0x08009c41

0800908c <__mcmp>:
 800908c:	690a      	ldr	r2, [r1, #16]
 800908e:	4603      	mov	r3, r0
 8009090:	6900      	ldr	r0, [r0, #16]
 8009092:	1a80      	subs	r0, r0, r2
 8009094:	b530      	push	{r4, r5, lr}
 8009096:	d10e      	bne.n	80090b6 <__mcmp+0x2a>
 8009098:	3314      	adds	r3, #20
 800909a:	3114      	adds	r1, #20
 800909c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090ac:	4295      	cmp	r5, r2
 80090ae:	d003      	beq.n	80090b8 <__mcmp+0x2c>
 80090b0:	d205      	bcs.n	80090be <__mcmp+0x32>
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090b6:	bd30      	pop	{r4, r5, pc}
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d3f3      	bcc.n	80090a4 <__mcmp+0x18>
 80090bc:	e7fb      	b.n	80090b6 <__mcmp+0x2a>
 80090be:	2001      	movs	r0, #1
 80090c0:	e7f9      	b.n	80090b6 <__mcmp+0x2a>
	...

080090c4 <__mdiff>:
 80090c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	4689      	mov	r9, r1
 80090ca:	4606      	mov	r6, r0
 80090cc:	4611      	mov	r1, r2
 80090ce:	4648      	mov	r0, r9
 80090d0:	4614      	mov	r4, r2
 80090d2:	f7ff ffdb 	bl	800908c <__mcmp>
 80090d6:	1e05      	subs	r5, r0, #0
 80090d8:	d112      	bne.n	8009100 <__mdiff+0x3c>
 80090da:	4629      	mov	r1, r5
 80090dc:	4630      	mov	r0, r6
 80090de:	f7ff fd63 	bl	8008ba8 <_Balloc>
 80090e2:	4602      	mov	r2, r0
 80090e4:	b928      	cbnz	r0, 80090f2 <__mdiff+0x2e>
 80090e6:	4b3e      	ldr	r3, [pc, #248]	@ (80091e0 <__mdiff+0x11c>)
 80090e8:	f240 2137 	movw	r1, #567	@ 0x237
 80090ec:	483d      	ldr	r0, [pc, #244]	@ (80091e4 <__mdiff+0x120>)
 80090ee:	f000 fb5d 	bl	80097ac <__assert_func>
 80090f2:	2301      	movs	r3, #1
 80090f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090f8:	4610      	mov	r0, r2
 80090fa:	b003      	add	sp, #12
 80090fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009100:	bfbc      	itt	lt
 8009102:	464b      	movlt	r3, r9
 8009104:	46a1      	movlt	r9, r4
 8009106:	4630      	mov	r0, r6
 8009108:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800910c:	bfba      	itte	lt
 800910e:	461c      	movlt	r4, r3
 8009110:	2501      	movlt	r5, #1
 8009112:	2500      	movge	r5, #0
 8009114:	f7ff fd48 	bl	8008ba8 <_Balloc>
 8009118:	4602      	mov	r2, r0
 800911a:	b918      	cbnz	r0, 8009124 <__mdiff+0x60>
 800911c:	4b30      	ldr	r3, [pc, #192]	@ (80091e0 <__mdiff+0x11c>)
 800911e:	f240 2145 	movw	r1, #581	@ 0x245
 8009122:	e7e3      	b.n	80090ec <__mdiff+0x28>
 8009124:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009128:	6926      	ldr	r6, [r4, #16]
 800912a:	60c5      	str	r5, [r0, #12]
 800912c:	f109 0310 	add.w	r3, r9, #16
 8009130:	f109 0514 	add.w	r5, r9, #20
 8009134:	f104 0e14 	add.w	lr, r4, #20
 8009138:	f100 0b14 	add.w	fp, r0, #20
 800913c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009140:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	46d9      	mov	r9, fp
 8009148:	f04f 0c00 	mov.w	ip, #0
 800914c:	9b01      	ldr	r3, [sp, #4]
 800914e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009152:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	b281      	uxth	r1, r0
 800915a:	fa1f f38a 	uxth.w	r3, sl
 800915e:	1a5b      	subs	r3, r3, r1
 8009160:	0c00      	lsrs	r0, r0, #16
 8009162:	4463      	add	r3, ip
 8009164:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009168:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800916c:	b29b      	uxth	r3, r3
 800916e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009172:	4576      	cmp	r6, lr
 8009174:	f849 3b04 	str.w	r3, [r9], #4
 8009178:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800917c:	d8e6      	bhi.n	800914c <__mdiff+0x88>
 800917e:	1b33      	subs	r3, r6, r4
 8009180:	3b15      	subs	r3, #21
 8009182:	f023 0303 	bic.w	r3, r3, #3
 8009186:	3415      	adds	r4, #21
 8009188:	3304      	adds	r3, #4
 800918a:	42a6      	cmp	r6, r4
 800918c:	bf38      	it	cc
 800918e:	2304      	movcc	r3, #4
 8009190:	441d      	add	r5, r3
 8009192:	445b      	add	r3, fp
 8009194:	461e      	mov	r6, r3
 8009196:	462c      	mov	r4, r5
 8009198:	4544      	cmp	r4, r8
 800919a:	d30e      	bcc.n	80091ba <__mdiff+0xf6>
 800919c:	f108 0103 	add.w	r1, r8, #3
 80091a0:	1b49      	subs	r1, r1, r5
 80091a2:	f021 0103 	bic.w	r1, r1, #3
 80091a6:	3d03      	subs	r5, #3
 80091a8:	45a8      	cmp	r8, r5
 80091aa:	bf38      	it	cc
 80091ac:	2100      	movcc	r1, #0
 80091ae:	440b      	add	r3, r1
 80091b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091b4:	b191      	cbz	r1, 80091dc <__mdiff+0x118>
 80091b6:	6117      	str	r7, [r2, #16]
 80091b8:	e79e      	b.n	80090f8 <__mdiff+0x34>
 80091ba:	f854 1b04 	ldr.w	r1, [r4], #4
 80091be:	46e6      	mov	lr, ip
 80091c0:	0c08      	lsrs	r0, r1, #16
 80091c2:	fa1c fc81 	uxtah	ip, ip, r1
 80091c6:	4471      	add	r1, lr
 80091c8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80091cc:	b289      	uxth	r1, r1
 80091ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80091d2:	f846 1b04 	str.w	r1, [r6], #4
 80091d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091da:	e7dd      	b.n	8009198 <__mdiff+0xd4>
 80091dc:	3f01      	subs	r7, #1
 80091de:	e7e7      	b.n	80091b0 <__mdiff+0xec>
 80091e0:	08009c30 	.word	0x08009c30
 80091e4:	08009c41 	.word	0x08009c41

080091e8 <__d2b>:
 80091e8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80091ec:	2101      	movs	r1, #1
 80091ee:	9e08      	ldr	r6, [sp, #32]
 80091f0:	4690      	mov	r8, r2
 80091f2:	4699      	mov	r9, r3
 80091f4:	f7ff fcd8 	bl	8008ba8 <_Balloc>
 80091f8:	4604      	mov	r4, r0
 80091fa:	b930      	cbnz	r0, 800920a <__d2b+0x22>
 80091fc:	4602      	mov	r2, r0
 80091fe:	4b24      	ldr	r3, [pc, #144]	@ (8009290 <__d2b+0xa8>)
 8009200:	4824      	ldr	r0, [pc, #144]	@ (8009294 <__d2b+0xac>)
 8009202:	f240 310f 	movw	r1, #783	@ 0x30f
 8009206:	f000 fad1 	bl	80097ac <__assert_func>
 800920a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800920e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009212:	b10d      	cbz	r5, 8009218 <__d2b+0x30>
 8009214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009218:	9301      	str	r3, [sp, #4]
 800921a:	f1b8 0300 	subs.w	r3, r8, #0
 800921e:	d024      	beq.n	800926a <__d2b+0x82>
 8009220:	4668      	mov	r0, sp
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	f7ff fd87 	bl	8008d36 <__lo0bits>
 8009228:	e9dd 1200 	ldrd	r1, r2, [sp]
 800922c:	b1d8      	cbz	r0, 8009266 <__d2b+0x7e>
 800922e:	f1c0 0320 	rsb	r3, r0, #32
 8009232:	fa02 f303 	lsl.w	r3, r2, r3
 8009236:	430b      	orrs	r3, r1
 8009238:	40c2      	lsrs	r2, r0
 800923a:	6163      	str	r3, [r4, #20]
 800923c:	9201      	str	r2, [sp, #4]
 800923e:	9b01      	ldr	r3, [sp, #4]
 8009240:	61a3      	str	r3, [r4, #24]
 8009242:	2b00      	cmp	r3, #0
 8009244:	bf0c      	ite	eq
 8009246:	2201      	moveq	r2, #1
 8009248:	2202      	movne	r2, #2
 800924a:	6122      	str	r2, [r4, #16]
 800924c:	b1ad      	cbz	r5, 800927a <__d2b+0x92>
 800924e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009252:	4405      	add	r5, r0
 8009254:	6035      	str	r5, [r6, #0]
 8009256:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800925a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925c:	6018      	str	r0, [r3, #0]
 800925e:	4620      	mov	r0, r4
 8009260:	b002      	add	sp, #8
 8009262:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009266:	6161      	str	r1, [r4, #20]
 8009268:	e7e9      	b.n	800923e <__d2b+0x56>
 800926a:	a801      	add	r0, sp, #4
 800926c:	f7ff fd63 	bl	8008d36 <__lo0bits>
 8009270:	9b01      	ldr	r3, [sp, #4]
 8009272:	6163      	str	r3, [r4, #20]
 8009274:	3020      	adds	r0, #32
 8009276:	2201      	movs	r2, #1
 8009278:	e7e7      	b.n	800924a <__d2b+0x62>
 800927a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800927e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009282:	6030      	str	r0, [r6, #0]
 8009284:	6918      	ldr	r0, [r3, #16]
 8009286:	f7ff fd37 	bl	8008cf8 <__hi0bits>
 800928a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800928e:	e7e4      	b.n	800925a <__d2b+0x72>
 8009290:	08009c30 	.word	0x08009c30
 8009294:	08009c41 	.word	0x08009c41

08009298 <__sfputc_r>:
 8009298:	6893      	ldr	r3, [r2, #8]
 800929a:	3b01      	subs	r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	b410      	push	{r4}
 80092a0:	6093      	str	r3, [r2, #8]
 80092a2:	da07      	bge.n	80092b4 <__sfputc_r+0x1c>
 80092a4:	6994      	ldr	r4, [r2, #24]
 80092a6:	42a3      	cmp	r3, r4
 80092a8:	db01      	blt.n	80092ae <__sfputc_r+0x16>
 80092aa:	290a      	cmp	r1, #10
 80092ac:	d102      	bne.n	80092b4 <__sfputc_r+0x1c>
 80092ae:	bc10      	pop	{r4}
 80092b0:	f7fe bc0b 	b.w	8007aca <__swbuf_r>
 80092b4:	6813      	ldr	r3, [r2, #0]
 80092b6:	1c58      	adds	r0, r3, #1
 80092b8:	6010      	str	r0, [r2, #0]
 80092ba:	7019      	strb	r1, [r3, #0]
 80092bc:	4608      	mov	r0, r1
 80092be:	bc10      	pop	{r4}
 80092c0:	4770      	bx	lr

080092c2 <__sfputs_r>:
 80092c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c4:	4606      	mov	r6, r0
 80092c6:	460f      	mov	r7, r1
 80092c8:	4614      	mov	r4, r2
 80092ca:	18d5      	adds	r5, r2, r3
 80092cc:	42ac      	cmp	r4, r5
 80092ce:	d101      	bne.n	80092d4 <__sfputs_r+0x12>
 80092d0:	2000      	movs	r0, #0
 80092d2:	e007      	b.n	80092e4 <__sfputs_r+0x22>
 80092d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d8:	463a      	mov	r2, r7
 80092da:	4630      	mov	r0, r6
 80092dc:	f7ff ffdc 	bl	8009298 <__sfputc_r>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d1f3      	bne.n	80092cc <__sfputs_r+0xa>
 80092e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092e8 <_vfiprintf_r>:
 80092e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	460d      	mov	r5, r1
 80092ee:	b09d      	sub	sp, #116	@ 0x74
 80092f0:	4614      	mov	r4, r2
 80092f2:	4698      	mov	r8, r3
 80092f4:	4606      	mov	r6, r0
 80092f6:	b118      	cbz	r0, 8009300 <_vfiprintf_r+0x18>
 80092f8:	6a03      	ldr	r3, [r0, #32]
 80092fa:	b90b      	cbnz	r3, 8009300 <_vfiprintf_r+0x18>
 80092fc:	f7fe fafc 	bl	80078f8 <__sinit>
 8009300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009302:	07d9      	lsls	r1, r3, #31
 8009304:	d405      	bmi.n	8009312 <_vfiprintf_r+0x2a>
 8009306:	89ab      	ldrh	r3, [r5, #12]
 8009308:	059a      	lsls	r2, r3, #22
 800930a:	d402      	bmi.n	8009312 <_vfiprintf_r+0x2a>
 800930c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800930e:	f7fe fcee 	bl	8007cee <__retarget_lock_acquire_recursive>
 8009312:	89ab      	ldrh	r3, [r5, #12]
 8009314:	071b      	lsls	r3, r3, #28
 8009316:	d501      	bpl.n	800931c <_vfiprintf_r+0x34>
 8009318:	692b      	ldr	r3, [r5, #16]
 800931a:	b99b      	cbnz	r3, 8009344 <_vfiprintf_r+0x5c>
 800931c:	4629      	mov	r1, r5
 800931e:	4630      	mov	r0, r6
 8009320:	f7fe fc12 	bl	8007b48 <__swsetup_r>
 8009324:	b170      	cbz	r0, 8009344 <_vfiprintf_r+0x5c>
 8009326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009328:	07dc      	lsls	r4, r3, #31
 800932a:	d504      	bpl.n	8009336 <_vfiprintf_r+0x4e>
 800932c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009330:	b01d      	add	sp, #116	@ 0x74
 8009332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009336:	89ab      	ldrh	r3, [r5, #12]
 8009338:	0598      	lsls	r0, r3, #22
 800933a:	d4f7      	bmi.n	800932c <_vfiprintf_r+0x44>
 800933c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800933e:	f7fe fcd7 	bl	8007cf0 <__retarget_lock_release_recursive>
 8009342:	e7f3      	b.n	800932c <_vfiprintf_r+0x44>
 8009344:	2300      	movs	r3, #0
 8009346:	9309      	str	r3, [sp, #36]	@ 0x24
 8009348:	2320      	movs	r3, #32
 800934a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800934e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009352:	2330      	movs	r3, #48	@ 0x30
 8009354:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009504 <_vfiprintf_r+0x21c>
 8009358:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800935c:	f04f 0901 	mov.w	r9, #1
 8009360:	4623      	mov	r3, r4
 8009362:	469a      	mov	sl, r3
 8009364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009368:	b10a      	cbz	r2, 800936e <_vfiprintf_r+0x86>
 800936a:	2a25      	cmp	r2, #37	@ 0x25
 800936c:	d1f9      	bne.n	8009362 <_vfiprintf_r+0x7a>
 800936e:	ebba 0b04 	subs.w	fp, sl, r4
 8009372:	d00b      	beq.n	800938c <_vfiprintf_r+0xa4>
 8009374:	465b      	mov	r3, fp
 8009376:	4622      	mov	r2, r4
 8009378:	4629      	mov	r1, r5
 800937a:	4630      	mov	r0, r6
 800937c:	f7ff ffa1 	bl	80092c2 <__sfputs_r>
 8009380:	3001      	adds	r0, #1
 8009382:	f000 80a7 	beq.w	80094d4 <_vfiprintf_r+0x1ec>
 8009386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009388:	445a      	add	r2, fp
 800938a:	9209      	str	r2, [sp, #36]	@ 0x24
 800938c:	f89a 3000 	ldrb.w	r3, [sl]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 809f 	beq.w	80094d4 <_vfiprintf_r+0x1ec>
 8009396:	2300      	movs	r3, #0
 8009398:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800939c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093a0:	f10a 0a01 	add.w	sl, sl, #1
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	9307      	str	r3, [sp, #28]
 80093a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80093ae:	4654      	mov	r4, sl
 80093b0:	2205      	movs	r2, #5
 80093b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b6:	4853      	ldr	r0, [pc, #332]	@ (8009504 <_vfiprintf_r+0x21c>)
 80093b8:	f7f6 fee2 	bl	8000180 <memchr>
 80093bc:	9a04      	ldr	r2, [sp, #16]
 80093be:	b9d8      	cbnz	r0, 80093f8 <_vfiprintf_r+0x110>
 80093c0:	06d1      	lsls	r1, r2, #27
 80093c2:	bf44      	itt	mi
 80093c4:	2320      	movmi	r3, #32
 80093c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093ca:	0713      	lsls	r3, r2, #28
 80093cc:	bf44      	itt	mi
 80093ce:	232b      	movmi	r3, #43	@ 0x2b
 80093d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093d4:	f89a 3000 	ldrb.w	r3, [sl]
 80093d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093da:	d015      	beq.n	8009408 <_vfiprintf_r+0x120>
 80093dc:	9a07      	ldr	r2, [sp, #28]
 80093de:	4654      	mov	r4, sl
 80093e0:	2000      	movs	r0, #0
 80093e2:	f04f 0c0a 	mov.w	ip, #10
 80093e6:	4621      	mov	r1, r4
 80093e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ec:	3b30      	subs	r3, #48	@ 0x30
 80093ee:	2b09      	cmp	r3, #9
 80093f0:	d94b      	bls.n	800948a <_vfiprintf_r+0x1a2>
 80093f2:	b1b0      	cbz	r0, 8009422 <_vfiprintf_r+0x13a>
 80093f4:	9207      	str	r2, [sp, #28]
 80093f6:	e014      	b.n	8009422 <_vfiprintf_r+0x13a>
 80093f8:	eba0 0308 	sub.w	r3, r0, r8
 80093fc:	fa09 f303 	lsl.w	r3, r9, r3
 8009400:	4313      	orrs	r3, r2
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	46a2      	mov	sl, r4
 8009406:	e7d2      	b.n	80093ae <_vfiprintf_r+0xc6>
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	1d19      	adds	r1, r3, #4
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	9103      	str	r1, [sp, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	bfbb      	ittet	lt
 8009414:	425b      	neglt	r3, r3
 8009416:	f042 0202 	orrlt.w	r2, r2, #2
 800941a:	9307      	strge	r3, [sp, #28]
 800941c:	9307      	strlt	r3, [sp, #28]
 800941e:	bfb8      	it	lt
 8009420:	9204      	strlt	r2, [sp, #16]
 8009422:	7823      	ldrb	r3, [r4, #0]
 8009424:	2b2e      	cmp	r3, #46	@ 0x2e
 8009426:	d10a      	bne.n	800943e <_vfiprintf_r+0x156>
 8009428:	7863      	ldrb	r3, [r4, #1]
 800942a:	2b2a      	cmp	r3, #42	@ 0x2a
 800942c:	d132      	bne.n	8009494 <_vfiprintf_r+0x1ac>
 800942e:	9b03      	ldr	r3, [sp, #12]
 8009430:	1d1a      	adds	r2, r3, #4
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	9203      	str	r2, [sp, #12]
 8009436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800943a:	3402      	adds	r4, #2
 800943c:	9305      	str	r3, [sp, #20]
 800943e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009508 <_vfiprintf_r+0x220>
 8009442:	7821      	ldrb	r1, [r4, #0]
 8009444:	2203      	movs	r2, #3
 8009446:	4650      	mov	r0, sl
 8009448:	f7f6 fe9a 	bl	8000180 <memchr>
 800944c:	b138      	cbz	r0, 800945e <_vfiprintf_r+0x176>
 800944e:	9b04      	ldr	r3, [sp, #16]
 8009450:	eba0 000a 	sub.w	r0, r0, sl
 8009454:	2240      	movs	r2, #64	@ 0x40
 8009456:	4082      	lsls	r2, r0
 8009458:	4313      	orrs	r3, r2
 800945a:	3401      	adds	r4, #1
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009462:	482a      	ldr	r0, [pc, #168]	@ (800950c <_vfiprintf_r+0x224>)
 8009464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009468:	2206      	movs	r2, #6
 800946a:	f7f6 fe89 	bl	8000180 <memchr>
 800946e:	2800      	cmp	r0, #0
 8009470:	d03f      	beq.n	80094f2 <_vfiprintf_r+0x20a>
 8009472:	4b27      	ldr	r3, [pc, #156]	@ (8009510 <_vfiprintf_r+0x228>)
 8009474:	bb1b      	cbnz	r3, 80094be <_vfiprintf_r+0x1d6>
 8009476:	9b03      	ldr	r3, [sp, #12]
 8009478:	3307      	adds	r3, #7
 800947a:	f023 0307 	bic.w	r3, r3, #7
 800947e:	3308      	adds	r3, #8
 8009480:	9303      	str	r3, [sp, #12]
 8009482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009484:	443b      	add	r3, r7
 8009486:	9309      	str	r3, [sp, #36]	@ 0x24
 8009488:	e76a      	b.n	8009360 <_vfiprintf_r+0x78>
 800948a:	fb0c 3202 	mla	r2, ip, r2, r3
 800948e:	460c      	mov	r4, r1
 8009490:	2001      	movs	r0, #1
 8009492:	e7a8      	b.n	80093e6 <_vfiprintf_r+0xfe>
 8009494:	2300      	movs	r3, #0
 8009496:	3401      	adds	r4, #1
 8009498:	9305      	str	r3, [sp, #20]
 800949a:	4619      	mov	r1, r3
 800949c:	f04f 0c0a 	mov.w	ip, #10
 80094a0:	4620      	mov	r0, r4
 80094a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094a6:	3a30      	subs	r2, #48	@ 0x30
 80094a8:	2a09      	cmp	r2, #9
 80094aa:	d903      	bls.n	80094b4 <_vfiprintf_r+0x1cc>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0c6      	beq.n	800943e <_vfiprintf_r+0x156>
 80094b0:	9105      	str	r1, [sp, #20]
 80094b2:	e7c4      	b.n	800943e <_vfiprintf_r+0x156>
 80094b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80094b8:	4604      	mov	r4, r0
 80094ba:	2301      	movs	r3, #1
 80094bc:	e7f0      	b.n	80094a0 <_vfiprintf_r+0x1b8>
 80094be:	ab03      	add	r3, sp, #12
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	462a      	mov	r2, r5
 80094c4:	4b13      	ldr	r3, [pc, #76]	@ (8009514 <_vfiprintf_r+0x22c>)
 80094c6:	a904      	add	r1, sp, #16
 80094c8:	4630      	mov	r0, r6
 80094ca:	f7fd fdd1 	bl	8007070 <_printf_float>
 80094ce:	4607      	mov	r7, r0
 80094d0:	1c78      	adds	r0, r7, #1
 80094d2:	d1d6      	bne.n	8009482 <_vfiprintf_r+0x19a>
 80094d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094d6:	07d9      	lsls	r1, r3, #31
 80094d8:	d405      	bmi.n	80094e6 <_vfiprintf_r+0x1fe>
 80094da:	89ab      	ldrh	r3, [r5, #12]
 80094dc:	059a      	lsls	r2, r3, #22
 80094de:	d402      	bmi.n	80094e6 <_vfiprintf_r+0x1fe>
 80094e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094e2:	f7fe fc05 	bl	8007cf0 <__retarget_lock_release_recursive>
 80094e6:	89ab      	ldrh	r3, [r5, #12]
 80094e8:	065b      	lsls	r3, r3, #25
 80094ea:	f53f af1f 	bmi.w	800932c <_vfiprintf_r+0x44>
 80094ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094f0:	e71e      	b.n	8009330 <_vfiprintf_r+0x48>
 80094f2:	ab03      	add	r3, sp, #12
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	462a      	mov	r2, r5
 80094f8:	4b06      	ldr	r3, [pc, #24]	@ (8009514 <_vfiprintf_r+0x22c>)
 80094fa:	a904      	add	r1, sp, #16
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7fe f851 	bl	80075a4 <_printf_i>
 8009502:	e7e4      	b.n	80094ce <_vfiprintf_r+0x1e6>
 8009504:	08009c9a 	.word	0x08009c9a
 8009508:	08009ca0 	.word	0x08009ca0
 800950c:	08009ca4 	.word	0x08009ca4
 8009510:	08007071 	.word	0x08007071
 8009514:	080092c3 	.word	0x080092c3

08009518 <__sflush_r>:
 8009518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	0716      	lsls	r6, r2, #28
 8009520:	4605      	mov	r5, r0
 8009522:	460c      	mov	r4, r1
 8009524:	d454      	bmi.n	80095d0 <__sflush_r+0xb8>
 8009526:	684b      	ldr	r3, [r1, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	dc02      	bgt.n	8009532 <__sflush_r+0x1a>
 800952c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800952e:	2b00      	cmp	r3, #0
 8009530:	dd48      	ble.n	80095c4 <__sflush_r+0xac>
 8009532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009534:	2e00      	cmp	r6, #0
 8009536:	d045      	beq.n	80095c4 <__sflush_r+0xac>
 8009538:	2300      	movs	r3, #0
 800953a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800953e:	682f      	ldr	r7, [r5, #0]
 8009540:	6a21      	ldr	r1, [r4, #32]
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	d030      	beq.n	80095a8 <__sflush_r+0x90>
 8009546:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	0759      	lsls	r1, r3, #29
 800954c:	d505      	bpl.n	800955a <__sflush_r+0x42>
 800954e:	6863      	ldr	r3, [r4, #4]
 8009550:	1ad2      	subs	r2, r2, r3
 8009552:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009554:	b10b      	cbz	r3, 800955a <__sflush_r+0x42>
 8009556:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009558:	1ad2      	subs	r2, r2, r3
 800955a:	2300      	movs	r3, #0
 800955c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800955e:	6a21      	ldr	r1, [r4, #32]
 8009560:	4628      	mov	r0, r5
 8009562:	47b0      	blx	r6
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	d106      	bne.n	8009578 <__sflush_r+0x60>
 800956a:	6829      	ldr	r1, [r5, #0]
 800956c:	291d      	cmp	r1, #29
 800956e:	d82b      	bhi.n	80095c8 <__sflush_r+0xb0>
 8009570:	4a28      	ldr	r2, [pc, #160]	@ (8009614 <__sflush_r+0xfc>)
 8009572:	40ca      	lsrs	r2, r1
 8009574:	07d6      	lsls	r6, r2, #31
 8009576:	d527      	bpl.n	80095c8 <__sflush_r+0xb0>
 8009578:	2200      	movs	r2, #0
 800957a:	6062      	str	r2, [r4, #4]
 800957c:	04d9      	lsls	r1, r3, #19
 800957e:	6922      	ldr	r2, [r4, #16]
 8009580:	6022      	str	r2, [r4, #0]
 8009582:	d504      	bpl.n	800958e <__sflush_r+0x76>
 8009584:	1c42      	adds	r2, r0, #1
 8009586:	d101      	bne.n	800958c <__sflush_r+0x74>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b903      	cbnz	r3, 800958e <__sflush_r+0x76>
 800958c:	6560      	str	r0, [r4, #84]	@ 0x54
 800958e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009590:	602f      	str	r7, [r5, #0]
 8009592:	b1b9      	cbz	r1, 80095c4 <__sflush_r+0xac>
 8009594:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009598:	4299      	cmp	r1, r3
 800959a:	d002      	beq.n	80095a2 <__sflush_r+0x8a>
 800959c:	4628      	mov	r0, r5
 800959e:	f7ff fa03 	bl	80089a8 <_free_r>
 80095a2:	2300      	movs	r3, #0
 80095a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80095a6:	e00d      	b.n	80095c4 <__sflush_r+0xac>
 80095a8:	2301      	movs	r3, #1
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b0      	blx	r6
 80095ae:	4602      	mov	r2, r0
 80095b0:	1c50      	adds	r0, r2, #1
 80095b2:	d1c9      	bne.n	8009548 <__sflush_r+0x30>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0c6      	beq.n	8009548 <__sflush_r+0x30>
 80095ba:	2b1d      	cmp	r3, #29
 80095bc:	d001      	beq.n	80095c2 <__sflush_r+0xaa>
 80095be:	2b16      	cmp	r3, #22
 80095c0:	d11d      	bne.n	80095fe <__sflush_r+0xe6>
 80095c2:	602f      	str	r7, [r5, #0]
 80095c4:	2000      	movs	r0, #0
 80095c6:	e021      	b.n	800960c <__sflush_r+0xf4>
 80095c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095cc:	b21b      	sxth	r3, r3
 80095ce:	e01a      	b.n	8009606 <__sflush_r+0xee>
 80095d0:	690f      	ldr	r7, [r1, #16]
 80095d2:	2f00      	cmp	r7, #0
 80095d4:	d0f6      	beq.n	80095c4 <__sflush_r+0xac>
 80095d6:	0793      	lsls	r3, r2, #30
 80095d8:	680e      	ldr	r6, [r1, #0]
 80095da:	bf08      	it	eq
 80095dc:	694b      	ldreq	r3, [r1, #20]
 80095de:	600f      	str	r7, [r1, #0]
 80095e0:	bf18      	it	ne
 80095e2:	2300      	movne	r3, #0
 80095e4:	1bf6      	subs	r6, r6, r7
 80095e6:	608b      	str	r3, [r1, #8]
 80095e8:	2e00      	cmp	r6, #0
 80095ea:	ddeb      	ble.n	80095c4 <__sflush_r+0xac>
 80095ec:	6a21      	ldr	r1, [r4, #32]
 80095ee:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80095f2:	4633      	mov	r3, r6
 80095f4:	463a      	mov	r2, r7
 80095f6:	4628      	mov	r0, r5
 80095f8:	47e0      	blx	ip
 80095fa:	2800      	cmp	r0, #0
 80095fc:	dc07      	bgt.n	800960e <__sflush_r+0xf6>
 80095fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009606:	81a3      	strh	r3, [r4, #12]
 8009608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960e:	4407      	add	r7, r0
 8009610:	1a36      	subs	r6, r6, r0
 8009612:	e7e9      	b.n	80095e8 <__sflush_r+0xd0>
 8009614:	20400001 	.word	0x20400001

08009618 <_fflush_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	690b      	ldr	r3, [r1, #16]
 800961c:	4605      	mov	r5, r0
 800961e:	460c      	mov	r4, r1
 8009620:	b913      	cbnz	r3, 8009628 <_fflush_r+0x10>
 8009622:	2500      	movs	r5, #0
 8009624:	4628      	mov	r0, r5
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	b118      	cbz	r0, 8009632 <_fflush_r+0x1a>
 800962a:	6a03      	ldr	r3, [r0, #32]
 800962c:	b90b      	cbnz	r3, 8009632 <_fflush_r+0x1a>
 800962e:	f7fe f963 	bl	80078f8 <__sinit>
 8009632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0f3      	beq.n	8009622 <_fflush_r+0xa>
 800963a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800963c:	07d0      	lsls	r0, r2, #31
 800963e:	d404      	bmi.n	800964a <_fflush_r+0x32>
 8009640:	0599      	lsls	r1, r3, #22
 8009642:	d402      	bmi.n	800964a <_fflush_r+0x32>
 8009644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009646:	f7fe fb52 	bl	8007cee <__retarget_lock_acquire_recursive>
 800964a:	4628      	mov	r0, r5
 800964c:	4621      	mov	r1, r4
 800964e:	f7ff ff63 	bl	8009518 <__sflush_r>
 8009652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009654:	07da      	lsls	r2, r3, #31
 8009656:	4605      	mov	r5, r0
 8009658:	d4e4      	bmi.n	8009624 <_fflush_r+0xc>
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	059b      	lsls	r3, r3, #22
 800965e:	d4e1      	bmi.n	8009624 <_fflush_r+0xc>
 8009660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009662:	f7fe fb45 	bl	8007cf0 <__retarget_lock_release_recursive>
 8009666:	e7dd      	b.n	8009624 <_fflush_r+0xc>

08009668 <__swhatbuf_r>:
 8009668:	b570      	push	{r4, r5, r6, lr}
 800966a:	460c      	mov	r4, r1
 800966c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009670:	2900      	cmp	r1, #0
 8009672:	b096      	sub	sp, #88	@ 0x58
 8009674:	4615      	mov	r5, r2
 8009676:	461e      	mov	r6, r3
 8009678:	da0d      	bge.n	8009696 <__swhatbuf_r+0x2e>
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009680:	f04f 0100 	mov.w	r1, #0
 8009684:	bf14      	ite	ne
 8009686:	2340      	movne	r3, #64	@ 0x40
 8009688:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800968c:	2000      	movs	r0, #0
 800968e:	6031      	str	r1, [r6, #0]
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	b016      	add	sp, #88	@ 0x58
 8009694:	bd70      	pop	{r4, r5, r6, pc}
 8009696:	466a      	mov	r2, sp
 8009698:	f000 f848 	bl	800972c <_fstat_r>
 800969c:	2800      	cmp	r0, #0
 800969e:	dbec      	blt.n	800967a <__swhatbuf_r+0x12>
 80096a0:	9901      	ldr	r1, [sp, #4]
 80096a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096aa:	4259      	negs	r1, r3
 80096ac:	4159      	adcs	r1, r3
 80096ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096b2:	e7eb      	b.n	800968c <__swhatbuf_r+0x24>

080096b4 <__smakebuf_r>:
 80096b4:	898b      	ldrh	r3, [r1, #12]
 80096b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096b8:	079d      	lsls	r5, r3, #30
 80096ba:	4606      	mov	r6, r0
 80096bc:	460c      	mov	r4, r1
 80096be:	d507      	bpl.n	80096d0 <__smakebuf_r+0x1c>
 80096c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	2301      	movs	r3, #1
 80096ca:	6163      	str	r3, [r4, #20]
 80096cc:	b003      	add	sp, #12
 80096ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d0:	ab01      	add	r3, sp, #4
 80096d2:	466a      	mov	r2, sp
 80096d4:	f7ff ffc8 	bl	8009668 <__swhatbuf_r>
 80096d8:	9f00      	ldr	r7, [sp, #0]
 80096da:	4605      	mov	r5, r0
 80096dc:	4639      	mov	r1, r7
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff f9d6 	bl	8008a90 <_malloc_r>
 80096e4:	b948      	cbnz	r0, 80096fa <__smakebuf_r+0x46>
 80096e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ea:	059a      	lsls	r2, r3, #22
 80096ec:	d4ee      	bmi.n	80096cc <__smakebuf_r+0x18>
 80096ee:	f023 0303 	bic.w	r3, r3, #3
 80096f2:	f043 0302 	orr.w	r3, r3, #2
 80096f6:	81a3      	strh	r3, [r4, #12]
 80096f8:	e7e2      	b.n	80096c0 <__smakebuf_r+0xc>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	6020      	str	r0, [r4, #0]
 80096fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	9b01      	ldr	r3, [sp, #4]
 8009706:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800970a:	b15b      	cbz	r3, 8009724 <__smakebuf_r+0x70>
 800970c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009710:	4630      	mov	r0, r6
 8009712:	f000 f81d 	bl	8009750 <_isatty_r>
 8009716:	b128      	cbz	r0, 8009724 <__smakebuf_r+0x70>
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	f023 0303 	bic.w	r3, r3, #3
 800971e:	f043 0301 	orr.w	r3, r3, #1
 8009722:	81a3      	strh	r3, [r4, #12]
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	431d      	orrs	r5, r3
 8009728:	81a5      	strh	r5, [r4, #12]
 800972a:	e7cf      	b.n	80096cc <__smakebuf_r+0x18>

0800972c <_fstat_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4d07      	ldr	r5, [pc, #28]	@ (800974c <_fstat_r+0x20>)
 8009730:	2300      	movs	r3, #0
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	4611      	mov	r1, r2
 8009738:	602b      	str	r3, [r5, #0]
 800973a:	f7f7 ff5c 	bl	80015f6 <_fstat>
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d102      	bne.n	8009748 <_fstat_r+0x1c>
 8009742:	682b      	ldr	r3, [r5, #0]
 8009744:	b103      	cbz	r3, 8009748 <_fstat_r+0x1c>
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	bd38      	pop	{r3, r4, r5, pc}
 800974a:	bf00      	nop
 800974c:	20000720 	.word	0x20000720

08009750 <_isatty_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d06      	ldr	r5, [pc, #24]	@ (800976c <_isatty_r+0x1c>)
 8009754:	2300      	movs	r3, #0
 8009756:	4604      	mov	r4, r0
 8009758:	4608      	mov	r0, r1
 800975a:	602b      	str	r3, [r5, #0]
 800975c:	f7f7 ff5a 	bl	8001614 <_isatty>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d102      	bne.n	800976a <_isatty_r+0x1a>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	b103      	cbz	r3, 800976a <_isatty_r+0x1a>
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	20000720 	.word	0x20000720

08009770 <_sbrk_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	4d06      	ldr	r5, [pc, #24]	@ (800978c <_sbrk_r+0x1c>)
 8009774:	2300      	movs	r3, #0
 8009776:	4604      	mov	r4, r0
 8009778:	4608      	mov	r0, r1
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	f7f7 ff60 	bl	8001640 <_sbrk>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_sbrk_r+0x1a>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_sbrk_r+0x1a>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	20000720 	.word	0x20000720

08009790 <memcpy>:
 8009790:	440a      	add	r2, r1
 8009792:	4291      	cmp	r1, r2
 8009794:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009798:	d100      	bne.n	800979c <memcpy+0xc>
 800979a:	4770      	bx	lr
 800979c:	b510      	push	{r4, lr}
 800979e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097a6:	4291      	cmp	r1, r2
 80097a8:	d1f9      	bne.n	800979e <memcpy+0xe>
 80097aa:	bd10      	pop	{r4, pc}

080097ac <__assert_func>:
 80097ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097ae:	4614      	mov	r4, r2
 80097b0:	461a      	mov	r2, r3
 80097b2:	4b09      	ldr	r3, [pc, #36]	@ (80097d8 <__assert_func+0x2c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4605      	mov	r5, r0
 80097b8:	68d8      	ldr	r0, [r3, #12]
 80097ba:	b14c      	cbz	r4, 80097d0 <__assert_func+0x24>
 80097bc:	4b07      	ldr	r3, [pc, #28]	@ (80097dc <__assert_func+0x30>)
 80097be:	9100      	str	r1, [sp, #0]
 80097c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097c4:	4906      	ldr	r1, [pc, #24]	@ (80097e0 <__assert_func+0x34>)
 80097c6:	462b      	mov	r3, r5
 80097c8:	f000 f842 	bl	8009850 <fiprintf>
 80097cc:	f000 f852 	bl	8009874 <abort>
 80097d0:	4b04      	ldr	r3, [pc, #16]	@ (80097e4 <__assert_func+0x38>)
 80097d2:	461c      	mov	r4, r3
 80097d4:	e7f3      	b.n	80097be <__assert_func+0x12>
 80097d6:	bf00      	nop
 80097d8:	20000028 	.word	0x20000028
 80097dc:	08009cb5 	.word	0x08009cb5
 80097e0:	08009cc2 	.word	0x08009cc2
 80097e4:	08009cf0 	.word	0x08009cf0

080097e8 <_calloc_r>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	fba1 5402 	umull	r5, r4, r1, r2
 80097ee:	b934      	cbnz	r4, 80097fe <_calloc_r+0x16>
 80097f0:	4629      	mov	r1, r5
 80097f2:	f7ff f94d 	bl	8008a90 <_malloc_r>
 80097f6:	4606      	mov	r6, r0
 80097f8:	b928      	cbnz	r0, 8009806 <_calloc_r+0x1e>
 80097fa:	4630      	mov	r0, r6
 80097fc:	bd70      	pop	{r4, r5, r6, pc}
 80097fe:	220c      	movs	r2, #12
 8009800:	6002      	str	r2, [r0, #0]
 8009802:	2600      	movs	r6, #0
 8009804:	e7f9      	b.n	80097fa <_calloc_r+0x12>
 8009806:	462a      	mov	r2, r5
 8009808:	4621      	mov	r1, r4
 800980a:	f7fe f9f3 	bl	8007bf4 <memset>
 800980e:	e7f4      	b.n	80097fa <_calloc_r+0x12>

08009810 <__ascii_mbtowc>:
 8009810:	b082      	sub	sp, #8
 8009812:	b901      	cbnz	r1, 8009816 <__ascii_mbtowc+0x6>
 8009814:	a901      	add	r1, sp, #4
 8009816:	b142      	cbz	r2, 800982a <__ascii_mbtowc+0x1a>
 8009818:	b14b      	cbz	r3, 800982e <__ascii_mbtowc+0x1e>
 800981a:	7813      	ldrb	r3, [r2, #0]
 800981c:	600b      	str	r3, [r1, #0]
 800981e:	7812      	ldrb	r2, [r2, #0]
 8009820:	1e10      	subs	r0, r2, #0
 8009822:	bf18      	it	ne
 8009824:	2001      	movne	r0, #1
 8009826:	b002      	add	sp, #8
 8009828:	4770      	bx	lr
 800982a:	4610      	mov	r0, r2
 800982c:	e7fb      	b.n	8009826 <__ascii_mbtowc+0x16>
 800982e:	f06f 0001 	mvn.w	r0, #1
 8009832:	e7f8      	b.n	8009826 <__ascii_mbtowc+0x16>

08009834 <__ascii_wctomb>:
 8009834:	4603      	mov	r3, r0
 8009836:	4608      	mov	r0, r1
 8009838:	b141      	cbz	r1, 800984c <__ascii_wctomb+0x18>
 800983a:	2aff      	cmp	r2, #255	@ 0xff
 800983c:	d904      	bls.n	8009848 <__ascii_wctomb+0x14>
 800983e:	228a      	movs	r2, #138	@ 0x8a
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009846:	4770      	bx	lr
 8009848:	700a      	strb	r2, [r1, #0]
 800984a:	2001      	movs	r0, #1
 800984c:	4770      	bx	lr
	...

08009850 <fiprintf>:
 8009850:	b40e      	push	{r1, r2, r3}
 8009852:	b503      	push	{r0, r1, lr}
 8009854:	4601      	mov	r1, r0
 8009856:	ab03      	add	r3, sp, #12
 8009858:	4805      	ldr	r0, [pc, #20]	@ (8009870 <fiprintf+0x20>)
 800985a:	f853 2b04 	ldr.w	r2, [r3], #4
 800985e:	6800      	ldr	r0, [r0, #0]
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	f7ff fd41 	bl	80092e8 <_vfiprintf_r>
 8009866:	b002      	add	sp, #8
 8009868:	f85d eb04 	ldr.w	lr, [sp], #4
 800986c:	b003      	add	sp, #12
 800986e:	4770      	bx	lr
 8009870:	20000028 	.word	0x20000028

08009874 <abort>:
 8009874:	b508      	push	{r3, lr}
 8009876:	2006      	movs	r0, #6
 8009878:	f000 f82c 	bl	80098d4 <raise>
 800987c:	2001      	movs	r0, #1
 800987e:	f7f7 fe87 	bl	8001590 <_exit>

08009882 <_raise_r>:
 8009882:	291f      	cmp	r1, #31
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4605      	mov	r5, r0
 8009888:	460c      	mov	r4, r1
 800988a:	d904      	bls.n	8009896 <_raise_r+0x14>
 800988c:	2316      	movs	r3, #22
 800988e:	6003      	str	r3, [r0, #0]
 8009890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009894:	bd38      	pop	{r3, r4, r5, pc}
 8009896:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009898:	b112      	cbz	r2, 80098a0 <_raise_r+0x1e>
 800989a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800989e:	b94b      	cbnz	r3, 80098b4 <_raise_r+0x32>
 80098a0:	4628      	mov	r0, r5
 80098a2:	f000 f831 	bl	8009908 <_getpid_r>
 80098a6:	4622      	mov	r2, r4
 80098a8:	4601      	mov	r1, r0
 80098aa:	4628      	mov	r0, r5
 80098ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098b0:	f000 b818 	b.w	80098e4 <_kill_r>
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d00a      	beq.n	80098ce <_raise_r+0x4c>
 80098b8:	1c59      	adds	r1, r3, #1
 80098ba:	d103      	bne.n	80098c4 <_raise_r+0x42>
 80098bc:	2316      	movs	r3, #22
 80098be:	6003      	str	r3, [r0, #0]
 80098c0:	2001      	movs	r0, #1
 80098c2:	e7e7      	b.n	8009894 <_raise_r+0x12>
 80098c4:	2100      	movs	r1, #0
 80098c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098ca:	4620      	mov	r0, r4
 80098cc:	4798      	blx	r3
 80098ce:	2000      	movs	r0, #0
 80098d0:	e7e0      	b.n	8009894 <_raise_r+0x12>
	...

080098d4 <raise>:
 80098d4:	4b02      	ldr	r3, [pc, #8]	@ (80098e0 <raise+0xc>)
 80098d6:	4601      	mov	r1, r0
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	f7ff bfd2 	b.w	8009882 <_raise_r>
 80098de:	bf00      	nop
 80098e0:	20000028 	.word	0x20000028

080098e4 <_kill_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d07      	ldr	r5, [pc, #28]	@ (8009904 <_kill_r+0x20>)
 80098e8:	2300      	movs	r3, #0
 80098ea:	4604      	mov	r4, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	4611      	mov	r1, r2
 80098f0:	602b      	str	r3, [r5, #0]
 80098f2:	f7f7 fe3d 	bl	8001570 <_kill>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	d102      	bne.n	8009900 <_kill_r+0x1c>
 80098fa:	682b      	ldr	r3, [r5, #0]
 80098fc:	b103      	cbz	r3, 8009900 <_kill_r+0x1c>
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	bd38      	pop	{r3, r4, r5, pc}
 8009902:	bf00      	nop
 8009904:	20000720 	.word	0x20000720

08009908 <_getpid_r>:
 8009908:	f7f7 be2b 	b.w	8001562 <_getpid>

0800990c <_init>:
 800990c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990e:	bf00      	nop
 8009910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009912:	bc08      	pop	{r3}
 8009914:	469e      	mov	lr, r3
 8009916:	4770      	bx	lr

08009918 <_fini>:
 8009918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991a:	bf00      	nop
 800991c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800991e:	bc08      	pop	{r3}
 8009920:	469e      	mov	lr, r3
 8009922:	4770      	bx	lr
