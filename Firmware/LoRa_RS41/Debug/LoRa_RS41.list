
LoRa_RS41.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd88  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  0800bec8  0800bec8  0000cec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c73c  0800c73c  0000e1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c73c  0800c73c  0000d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c744  0800c744  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c744  0800c744  0000d744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c748  0800c748  0000d748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800c74c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  200001e0  0800c92c  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  0800c92c  0000e758  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017071  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039aa  00000000  00000000  0002527b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00028c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001104  00000000  00000000  0002a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb47  00000000  00000000  0002b3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d4e  00000000  00000000  0004af13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9033  00000000  00000000  00060c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007164  00000000  00000000  00119cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00120e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800beb0 	.word	0x0800beb0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800beb0 	.word	0x0800beb0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c4c:	f000 b9be 	b.w	8000fcc <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	468e      	mov	lr, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	4688      	mov	r8, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	d962      	bls.n	8000db0 <__udivmoddi4+0xdc>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	b14e      	cbz	r6, 8000d04 <__udivmoddi4+0x30>
 8000cf0:	f1c6 0320 	rsb	r3, r6, #32
 8000cf4:	fa01 f806 	lsl.w	r8, r1, r6
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	40b7      	lsls	r7, r6
 8000cfe:	ea43 0808 	orr.w	r8, r3, r8
 8000d02:	40b4      	lsls	r4, r6
 8000d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d08:	fa1f fc87 	uxth.w	ip, r7
 8000d0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d10:	0c23      	lsrs	r3, r4, #16
 8000d12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d28:	f080 80ea 	bcs.w	8000f00 <__udivmoddi4+0x22c>
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f240 80e7 	bls.w	8000f00 <__udivmoddi4+0x22c>
 8000d32:	3902      	subs	r1, #2
 8000d34:	443b      	add	r3, r7
 8000d36:	1a9a      	subs	r2, r3, r2
 8000d38:	b2a3      	uxth	r3, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4a:	459c      	cmp	ip, r3
 8000d4c:	d909      	bls.n	8000d62 <__udivmoddi4+0x8e>
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d54:	f080 80d6 	bcs.w	8000f04 <__udivmoddi4+0x230>
 8000d58:	459c      	cmp	ip, r3
 8000d5a:	f240 80d3 	bls.w	8000f04 <__udivmoddi4+0x230>
 8000d5e:	443b      	add	r3, r7
 8000d60:	3802      	subs	r0, #2
 8000d62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d66:	eba3 030c 	sub.w	r3, r3, ip
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11d      	cbz	r5, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40f3      	lsrs	r3, r6
 8000d70:	2200      	movs	r2, #0
 8000d72:	e9c5 3200 	strd	r3, r2, [r5]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d905      	bls.n	8000d8a <__udivmoddi4+0xb6>
 8000d7e:	b10d      	cbz	r5, 8000d84 <__udivmoddi4+0xb0>
 8000d80:	e9c5 0100 	strd	r0, r1, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	4608      	mov	r0, r1
 8000d88:	e7f5      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000d8a:	fab3 f183 	clz	r1, r3
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d146      	bne.n	8000e20 <__udivmoddi4+0x14c>
 8000d92:	4573      	cmp	r3, lr
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xc8>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 8105 	bhi.w	8000fa6 <__udivmoddi4+0x2d2>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	4690      	mov	r8, r2
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e5      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000daa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dae:	e7e2      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	2a00      	cmp	r2, #0
 8000db2:	f000 8090 	beq.w	8000ed6 <__udivmoddi4+0x202>
 8000db6:	fab2 f682 	clz	r6, r2
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	f040 80a4 	bne.w	8000f08 <__udivmoddi4+0x234>
 8000dc0:	1a8a      	subs	r2, r1, r2
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	b2bc      	uxth	r4, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dda:	fb04 f20c 	mul.w	r2, r4, ip
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x11e>
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x11c>
 8000dea:	429a      	cmp	r2, r3
 8000dec:	f200 80e0 	bhi.w	8000fb0 <__udivmoddi4+0x2dc>
 8000df0:	46c4      	mov	ip, r8
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000df8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dfc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e00:	fb02 f404 	mul.w	r4, r2, r4
 8000e04:	429c      	cmp	r4, r3
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0x144>
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x142>
 8000e10:	429c      	cmp	r4, r3
 8000e12:	f200 80ca 	bhi.w	8000faa <__udivmoddi4+0x2d6>
 8000e16:	4602      	mov	r2, r0
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e1e:	e7a5      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e20:	f1c1 0620 	rsb	r6, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e30:	fa20 f306 	lsr.w	r3, r0, r6
 8000e34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	fa1f fc87 	uxth.w	ip, r7
 8000e46:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x1a0>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e66:	f080 809c 	bcs.w	8000fa2 <__udivmoddi4+0x2ce>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f240 8099 	bls.w	8000fa2 <__udivmoddi4+0x2ce>
 8000e70:	3802      	subs	r0, #2
 8000e72:	443c      	add	r4, r7
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	fa1f fe83 	uxth.w	lr, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e8c:	45a4      	cmp	ip, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1ce>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e96:	f080 8082 	bcs.w	8000f9e <__udivmoddi4+0x2ca>
 8000e9a:	45a4      	cmp	ip, r4
 8000e9c:	d97f      	bls.n	8000f9e <__udivmoddi4+0x2ca>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	443c      	add	r4, r7
 8000ea2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ea6:	eba4 040c 	sub.w	r4, r4, ip
 8000eaa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eae:	4564      	cmp	r4, ip
 8000eb0:	4673      	mov	r3, lr
 8000eb2:	46e1      	mov	r9, ip
 8000eb4:	d362      	bcc.n	8000f7c <__udivmoddi4+0x2a8>
 8000eb6:	d05f      	beq.n	8000f78 <__udivmoddi4+0x2a4>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x1fe>
 8000eba:	ebb8 0203 	subs.w	r2, r8, r3
 8000ebe:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ec6:	fa22 f301 	lsr.w	r3, r2, r1
 8000eca:	431e      	orrs	r6, r3
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e74f      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000ed6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eda:	0c01      	lsrs	r1, r0, #16
 8000edc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee0:	b280      	uxth	r0, r0
 8000ee2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4638      	mov	r0, r7
 8000eea:	463c      	mov	r4, r7
 8000eec:	46b8      	mov	r8, r7
 8000eee:	46be      	mov	lr, r7
 8000ef0:	2620      	movs	r6, #32
 8000ef2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ef6:	eba2 0208 	sub.w	r2, r2, r8
 8000efa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000efe:	e766      	b.n	8000dce <__udivmoddi4+0xfa>
 8000f00:	4601      	mov	r1, r0
 8000f02:	e718      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f04:	4610      	mov	r0, r2
 8000f06:	e72c      	b.n	8000d62 <__udivmoddi4+0x8e>
 8000f08:	f1c6 0220 	rsb	r2, r6, #32
 8000f0c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f10:	40b7      	lsls	r7, r6
 8000f12:	40b1      	lsls	r1, r6
 8000f14:	fa20 f202 	lsr.w	r2, r0, r2
 8000f18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f22:	b2bc      	uxth	r4, r7
 8000f24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb08 f904 	mul.w	r9, r8, r4
 8000f32:	40b0      	lsls	r0, r6
 8000f34:	4589      	cmp	r9, r1
 8000f36:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3a:	b280      	uxth	r0, r0
 8000f3c:	d93e      	bls.n	8000fbc <__udivmoddi4+0x2e8>
 8000f3e:	1879      	adds	r1, r7, r1
 8000f40:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f44:	d201      	bcs.n	8000f4a <__udivmoddi4+0x276>
 8000f46:	4589      	cmp	r9, r1
 8000f48:	d81f      	bhi.n	8000f8a <__udivmoddi4+0x2b6>
 8000f4a:	eba1 0109 	sub.w	r1, r1, r9
 8000f4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f52:	fb09 f804 	mul.w	r8, r9, r4
 8000f56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d229      	bcs.n	8000fb8 <__udivmoddi4+0x2e4>
 8000f64:	18ba      	adds	r2, r7, r2
 8000f66:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f6a:	d2c4      	bcs.n	8000ef6 <__udivmoddi4+0x222>
 8000f6c:	4542      	cmp	r2, r8
 8000f6e:	d2c2      	bcs.n	8000ef6 <__udivmoddi4+0x222>
 8000f70:	f1a9 0102 	sub.w	r1, r9, #2
 8000f74:	443a      	add	r2, r7
 8000f76:	e7be      	b.n	8000ef6 <__udivmoddi4+0x222>
 8000f78:	45f0      	cmp	r8, lr
 8000f7a:	d29d      	bcs.n	8000eb8 <__udivmoddi4+0x1e4>
 8000f7c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f80:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f84:	3801      	subs	r0, #1
 8000f86:	46e1      	mov	r9, ip
 8000f88:	e796      	b.n	8000eb8 <__udivmoddi4+0x1e4>
 8000f8a:	eba7 0909 	sub.w	r9, r7, r9
 8000f8e:	4449      	add	r1, r9
 8000f90:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f98:	fb09 f804 	mul.w	r8, r9, r4
 8000f9c:	e7db      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f9e:	4673      	mov	r3, lr
 8000fa0:	e77f      	b.n	8000ea2 <__udivmoddi4+0x1ce>
 8000fa2:	4650      	mov	r0, sl
 8000fa4:	e766      	b.n	8000e74 <__udivmoddi4+0x1a0>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e6fd      	b.n	8000da6 <__udivmoddi4+0xd2>
 8000faa:	443b      	add	r3, r7
 8000fac:	3a02      	subs	r2, #2
 8000fae:	e733      	b.n	8000e18 <__udivmoddi4+0x144>
 8000fb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb4:	443b      	add	r3, r7
 8000fb6:	e71c      	b.n	8000df2 <__udivmoddi4+0x11e>
 8000fb8:	4649      	mov	r1, r9
 8000fba:	e79c      	b.n	8000ef6 <__udivmoddi4+0x222>
 8000fbc:	eba1 0109 	sub.w	r1, r1, r9
 8000fc0:	46c4      	mov	ip, r8
 8000fc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc6:	fb09 f804 	mul.w	r8, r9, r4
 8000fca:	e7c4      	b.n	8000f56 <__udivmoddi4+0x282>

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000fde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001004:	2004      	movs	r0, #4
 8001006:	f7ff ffe3 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ffe0 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	200b      	movs	r0, #11
 8001016:	f001 fa10 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800101a:	200b      	movs	r0, #11
 800101c:	f001 fa27 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	200c      	movs	r0, #12
 8001026:	f001 fa08 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800102a:	200c      	movs	r0, #12
 800102c:	f001 fa1f 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	200d      	movs	r0, #13
 8001036:	f001 fa00 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800103a:	200d      	movs	r0, #13
 800103c:	f001 fa17 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	200e      	movs	r0, #14
 8001046:	f001 f9f8 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800104a:	200e      	movs	r0, #14
 800104c:	f001 fa0f 	bl	800246e <HAL_NVIC_EnableIRQ>

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001060:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001062:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001070:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001078:	68fb      	ldr	r3, [r7, #12]
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff ffdb 	bl	8001054 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff ffd8 	bl	8001054 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ffd5 	bl	8001054 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b0:	4813      	ldr	r0, [pc, #76]	@ (8001100 <MX_GPIO_Init+0x7c>)
 80010b2:	f001 fed9 	bl	8002e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2138      	movs	r1, #56	@ 0x38
 80010ba:	4812      	ldr	r0, [pc, #72]	@ (8001104 <MX_GPIO_Init+0x80>)
 80010bc:	f001 fed4 	bl	8002e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80010c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	480a      	ldr	r0, [pc, #40]	@ (8001100 <MX_GPIO_Init+0x7c>)
 80010d8:	f001 fd66 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80010dc:	2338      	movs	r3, #56	@ 0x38
 80010de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_GPIO_Init+0x80>)
 80010f2:	f001 fd59 	bl	8002ba8 <HAL_GPIO_Init>

}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800

08001108 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001118:	f023 0218 	bic.w	r2, r3, #24
 800111c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
	...

08001134 <_write>:
#include "protocol.h"

/* USER CODE BEGIN 0 */
// Redireciona a saída do printf para a USART2 (nossa porta de debug para o PC)
int _write(int file, char *ptr, int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	b29a      	uxth	r2, r3
 8001144:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	4804      	ldr	r0, [pc, #16]	@ (800115c <_write+0x28>)
 800114c:	f003 ff9d 	bl	800508a <HAL_UART_Transmit>
  return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200003e4 	.word	0x200003e4

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8001166:	f001 f81b 	bl	80021a0 <HAL_Init>
  SystemClock_Config();
 800116a:	f000 f887 	bl	800127c <SystemClock_Config>
  MX_GPIO_Init();
 800116e:	f7ff ff89 	bl	8001084 <MX_GPIO_Init>
  MX_DMA_Init();
 8001172:	f7ff ff45 	bl	8001000 <MX_DMA_Init>
  MX_USART1_UART_Init();  // UART da Radiosonda
 8001176:	f000 fe67 	bl	8001e48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();  // UART de Debug para o PC
 800117a:	f000 feb1 	bl	8001ee0 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 800117e:	f000 fda5 	bl	8001ccc <MX_SUBGHZ_Init>

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8001182:	2001      	movs	r0, #1
 8001184:	f000 ff3a 	bl	8001ffc <BSP_LED_Init>

  printf("\r\n--- LoRa_RS41 (SLAVE NODE) ---\r\n");
 8001188:	4834      	ldr	r0, [pc, #208]	@ (800125c <main+0xfc>)
 800118a:	f007 fa67 	bl	800865c <puts>
  printf("Parser da Radiosonda + Resposta a Comandos LoRa\r\n");
 800118e:	4834      	ldr	r0, [pc, #208]	@ (8001260 <main+0x100>)
 8001190:	f007 fa64 	bl	800865c <puts>

  Radio_Init();
 8001194:	f000 fa3a 	bl	800160c <Radio_Init>
  printf("Radio LoRa inicializado em modo SLAVE.\r\n");
 8001198:	4832      	ldr	r0, [pc, #200]	@ (8001264 <main+0x104>)
 800119a:	f007 fa5f 	bl	800865c <puts>

  // Inicia a recepção via DMA na USART1 (radiosonda)
  HAL_UART_Receive_DMA(&huart1, radiosonde_rx_buffer, RADIOSONDE_UART_BUFFER_SIZE);
 800119e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011a2:	4931      	ldr	r1, [pc, #196]	@ (8001268 <main+0x108>)
 80011a4:	4831      	ldr	r0, [pc, #196]	@ (800126c <main+0x10c>)
 80011a6:	f003 fff7 	bl	8005198 <HAL_UART_Receive_DMA>
  printf("Parser da radiosonda ativo na USART1.\r\n");
 80011aa:	4831      	ldr	r0, [pc, #196]	@ (8001270 <main+0x110>)
 80011ac:	f007 fa56 	bl	800865c <puts>

  // Coloca o rádio LoRa em modo de recepção contínua (aguardando comandos)
  SUBGRF_SetRx(0); // Timeout 0 = recepção contínua
 80011b0:	2000      	movs	r0, #0
 80011b2:	f005 fc93 	bl	8006adc <SUBGRF_SetRx>
  printf("Aguardando comandos LoRa da estacao base...\r\n");
 80011b6:	482f      	ldr	r0, [pc, #188]	@ (8001274 <main+0x114>)
 80011b8:	f007 fa50 	bl	800865c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // --- Processa dados da radiosonda via DMA ---
    uint16_t new_pos = RADIOSONDE_UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 80011bc:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <main+0x10c>)
 80011be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80011cc:	807b      	strh	r3, [r7, #2]
    if (new_pos != old_pos)
 80011ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <main+0x118>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d03c      	beq.n	8001252 <main+0xf2>
    {
      if (new_pos > old_pos) {
 80011d8:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <main+0x118>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	887a      	ldrh	r2, [r7, #2]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d912      	bls.n	8001208 <main+0xa8>
        for (int i = old_pos; i < new_pos; i++) {
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <main+0x118>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e009      	b.n	80011fe <main+0x9e>
          ProcessByte(radiosonde_rx_buffer[i]);
 80011ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001268 <main+0x108>)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f89a 	bl	800132c <ProcessByte>
        for (int i = old_pos; i < new_pos; i++) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	429a      	cmp	r2, r3
 8001204:	dbf1      	blt.n	80011ea <main+0x8a>
 8001206:	e021      	b.n	800124c <main+0xec>
        }
      } else { // Wrap-around
        for (int i = old_pos; i < RADIOSONDE_UART_BUFFER_SIZE; i++) {
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <main+0x118>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	e009      	b.n	8001224 <main+0xc4>
          ProcessByte(radiosonde_rx_buffer[i]);
 8001210:	4a15      	ldr	r2, [pc, #84]	@ (8001268 <main+0x108>)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f887 	bl	800132c <ProcessByte>
        for (int i = old_pos; i < RADIOSONDE_UART_BUFFER_SIZE; i++) {
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	3301      	adds	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2bff      	cmp	r3, #255	@ 0xff
 8001228:	ddf2      	ble.n	8001210 <main+0xb0>
        }
        for (int i = 0; i < new_pos; i++) {
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	e009      	b.n	8001244 <main+0xe4>
          ProcessByte(radiosonde_rx_buffer[i]);
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <main+0x108>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f877 	bl	800132c <ProcessByte>
        for (int i = 0; i < new_pos; i++) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3301      	adds	r3, #1
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf1      	blt.n	8001230 <main+0xd0>
        }
      }
      old_pos = new_pos;
 800124c:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <main+0x118>)
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	8013      	strh	r3, [r2, #0]
    }

    // O processamento de comandos LoRa acontece nos callbacks de interrupção
    // O processador pode entrar em modo sleep para economizar energia
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001252:	2101      	movs	r1, #1
 8001254:	2000      	movs	r0, #0
 8001256:	f001 fe45 	bl	8002ee4 <HAL_PWR_EnterSLEEPMode>
  {
 800125a:	e7af      	b.n	80011bc <main+0x5c>
 800125c:	0800bec8 	.word	0x0800bec8
 8001260:	0800beec 	.word	0x0800beec
 8001264:	0800bf20 	.word	0x0800bf20
 8001268:	200001fc 	.word	0x200001fc
 800126c:	20000350 	.word	0x20000350
 8001270:	0800bf48 	.word	0x0800bf48
 8001274:	0800bf70 	.word	0x0800bf70
 8001278:	200002fc 	.word	0x200002fc

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b09a      	sub	sp, #104	@ 0x68
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2248      	movs	r2, #72	@ 0x48
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f007 fae8 	bl	8008860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	619a      	str	r2, [r3, #24]

  HAL_PWR_EnableBkUpAccess();
 80012a2:	f001 fe11 	bl	8002ec8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff ff2e 	bl	8001108 <LL_RCC_LSE_SetDriveCapability>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <SystemClock_Config+0xac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <SystemClock_Config+0xac>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <SystemClock_Config+0xac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012c8:	2324      	movs	r3, #36	@ 0x24
 80012ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012cc:	2381      	movs	r3, #129	@ 0x81
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80012d8:	23b0      	movs	r3, #176	@ 0xb0
 80012da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012dc:	2300      	movs	r3, #0
 80012de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 f939 	bl	800355c <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80012f0:	f000 fa98 	bl	8001824 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80012f4:	234f      	movs	r3, #79	@ 0x4f
 80012f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2102      	movs	r1, #2
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fca5 	bl	8003c60 <HAL_RCC_ClockConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800131c:	f000 fa82 	bl	8001824 <Error_Handler>
  }
}
 8001320:	bf00      	nop
 8001322:	3768      	adds	r7, #104	@ 0x68
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	58000400 	.word	0x58000400

0800132c <ProcessByte>:

/* USER CODE BEGIN 4 */
// --- Implementação das Funções ---

void ProcessByte(uint8_t receivedByte)
{
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  switch (currentState)
 8001336:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <ProcessByte+0xc4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d025      	beq.n	800138a <ProcessByte+0x5e>
 800133e:	2b02      	cmp	r3, #2
 8001340:	dc51      	bgt.n	80013e6 <ProcessByte+0xba>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <ProcessByte+0x20>
 8001346:	2b01      	cmp	r3, #1
 8001348:	d00b      	beq.n	8001362 <ProcessByte+0x36>
        }
        currentState = AWAITING_SYNC;
      }
      break;
  }
}
 800134a:	e04c      	b.n	80013e6 <ProcessByte+0xba>
      if (receivedByte == SYNC_WORD) {
 800134c:	22aa      	movs	r2, #170	@ 0xaa
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4293      	cmp	r3, r2
 8001352:	d145      	bne.n	80013e0 <ProcessByte+0xb4>
        byteCounter = 0;
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <ProcessByte+0xc8>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
        currentState = RECEIVING_PAYLOAD;
 800135a:	4b25      	ldr	r3, [pc, #148]	@ (80013f0 <ProcessByte+0xc4>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
      break;
 8001360:	e03e      	b.n	80013e0 <ProcessByte+0xb4>
      if (byteCounter < TELEMETRY_PAYLOAD_SIZE) {
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <ProcessByte+0xc8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b13      	cmp	r3, #19
 8001368:	d807      	bhi.n	800137a <ProcessByte+0x4e>
        payloadBuffer[byteCounter++] = receivedByte;
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <ProcessByte+0xc8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	4920      	ldr	r1, [pc, #128]	@ (80013f4 <ProcessByte+0xc8>)
 8001372:	600a      	str	r2, [r1, #0]
 8001374:	4920      	ldr	r1, [pc, #128]	@ (80013f8 <ProcessByte+0xcc>)
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	54ca      	strb	r2, [r1, r3]
      if (byteCounter >= TELEMETRY_PAYLOAD_SIZE) {
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <ProcessByte+0xc8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b13      	cmp	r3, #19
 8001380:	d930      	bls.n	80013e4 <ProcessByte+0xb8>
        currentState = AWAITING_CHECKSUM;
 8001382:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <ProcessByte+0xc4>)
 8001384:	2202      	movs	r2, #2
 8001386:	701a      	strb	r2, [r3, #0]
      break;
 8001388:	e02c      	b.n	80013e4 <ProcessByte+0xb8>
        uint8_t receivedChecksum = receivedByte;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	73fb      	strb	r3, [r7, #15]
        uint8_t calculatedChecksum = calculate_checksum(payloadBuffer, TELEMETRY_PAYLOAD_SIZE);
 800138e:	2114      	movs	r1, #20
 8001390:	4819      	ldr	r0, [pc, #100]	@ (80013f8 <ProcessByte+0xcc>)
 8001392:	f000 fa29 	bl	80017e8 <calculate_checksum>
 8001396:	4603      	mov	r3, r0
 8001398:	73bb      	strb	r3, [r7, #14]
        if (receivedChecksum == calculatedChecksum) {
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	7bbb      	ldrb	r3, [r7, #14]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d114      	bne.n	80013cc <ProcessByte+0xa0>
          memcpy(&latest_telemetry, payloadBuffer, TELEMETRY_PAYLOAD_SIZE);
 80013a2:	4a16      	ldr	r2, [pc, #88]	@ (80013fc <ProcessByte+0xd0>)
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <ProcessByte+0xcc>)
 80013a6:	4614      	mov	r4, r2
 80013a8:	461d      	mov	r5, r3
 80013aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ae:	682b      	ldr	r3, [r5, #0]
 80013b0:	6023      	str	r3, [r4, #0]
          telemetry_available = true;
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <ProcessByte+0xd4>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
          printf("Telemetria atualizada - ID: %lu\r\n", latest_telemetry.packet_id);
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <ProcessByte+0xd0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	4811      	ldr	r0, [pc, #68]	@ (8001404 <ProcessByte+0xd8>)
 80013c0:	f007 f8e4 	bl	800858c <iprintf>
          BSP_LED_Toggle(LED_GREEN);
 80013c4:	2001      	movs	r0, #1
 80013c6:	f000 fe53 	bl	8002070 <BSP_LED_Toggle>
 80013ca:	e005      	b.n	80013d8 <ProcessByte+0xac>
          printf("Falha no Checksum radiosonda! Esperado: 0x%02X, Recebido: 0x%02X\r\n",
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <ProcessByte+0xdc>)
 80013d4:	f007 f8da 	bl	800858c <iprintf>
        currentState = AWAITING_SYNC;
 80013d8:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <ProcessByte+0xc4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
      break;
 80013de:	e002      	b.n	80013e6 <ProcessByte+0xba>
      break;
 80013e0:	bf00      	nop
 80013e2:	e000      	b.n	80013e6 <ProcessByte+0xba>
      break;
 80013e4:	bf00      	nop
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bdb0      	pop	{r4, r5, r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000318 	.word	0x20000318
 80013f4:	20000314 	.word	0x20000314
 80013f8:	20000300 	.word	0x20000300
 80013fc:	20000328 	.word	0x20000328
 8001400:	2000033c 	.word	0x2000033c
 8001404:	0800bfa0 	.word	0x0800bfa0
 8001408:	0800bfc4 	.word	0x0800bfc4

0800140c <SendResetCommandToRS41>:

void SendResetCommandToRS41(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
    uint8_t packet_to_send[MAX_PACKET_SIZE];

    // --- Montagem do Pacote ---

    // Byte 0: Palavra de Sincronização
    packet_to_send[0] = 0xAA; //Palavra de sincronização #define CMD_SYNC_WORD   0xAA
 8001412:	23aa      	movs	r3, #170	@ 0xaa
 8001414:	713b      	strb	r3, [r7, #4]

    // Byte 1: ID do Comando (Ação)
    packet_to_send[1] = 0x04; // ID do comando #define CMD_EXECUTE     0x04
 8001416:	2304      	movs	r3, #4
 8001418:	717b      	strb	r3, [r7, #5]

    // Byte 2: ID do Parâmetro (Alvo)
    packet_to_send[2] = 0x01; // ID da ação específica #define PARAM_MCU_RESET 0x01
 800141a:	2301      	movs	r3, #1
 800141c:	71bb      	strb	r3, [r7, #6]

    // Byte 3: Comprimento do Payload de Dados (0 para este comando)
    packet_to_send[3] = 0x00;
 800141e:	2300      	movs	r3, #0
 8001420:	71fb      	strb	r3, [r7, #7]

    // --- Cálculo do Checksum ---
    // O checksum é calculado sobre os bytes do payload: CMD_ID, PARAM_ID e LEN.
    // Portanto, calculamos sobre 3 bytes, começando do índice 1 do nosso buffer.
    uint8_t checksum = calculate_checksum(&packet_to_send[1], 3);
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	3301      	adds	r3, #1
 8001426:	2103      	movs	r1, #3
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f9dd 	bl	80017e8 <calculate_checksum>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]

    // Byte 4: Checksum
    packet_to_send[4] = checksum;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	723b      	strb	r3, [r7, #8]

    // --- Transmissão via UART ---
    printf("Enviando comando de RESET para a RS41 via UART...\r\n");
 8001436:	4807      	ldr	r0, [pc, #28]	@ (8001454 <SendResetCommandToRS41+0x48>)
 8001438:	f007 f910 	bl	800865c <puts>
    HAL_UART_Transmit(&huart1, packet_to_send, sizeof(packet_to_send), HAL_MAX_DELAY);
 800143c:	1d39      	adds	r1, r7, #4
 800143e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001442:	220b      	movs	r2, #11
 8001444:	4804      	ldr	r0, [pc, #16]	@ (8001458 <SendResetCommandToRS41+0x4c>)
 8001446:	f003 fe20 	bl	800508a <HAL_UART_Transmit>
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	0800c008 	.word	0x0800c008
 8001458:	20000350 	.word	0x20000350

0800145c <SendResetResponse>:

void SendResetResponse(void)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
    if (lora_tx_busy) {
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <SendResetResponse+0x7c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <SendResetResponse+0x18>
        printf("WARN: Radio ocupado, resposta descartada.\r\n");
 800146c:	481b      	ldr	r0, [pc, #108]	@ (80014dc <SendResetResponse+0x80>)
 800146e:	f007 f8f5 	bl	800865c <puts>
 8001472:	e02e      	b.n	80014d2 <SendResetResponse+0x76>
        return;
    }

    lora_tx_busy = true;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <SendResetResponse+0x7c>)
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
    printf("Enviando comando de reset - ID: %lu\r\n", latest_telemetry.packet_id);
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <SendResetResponse+0x84>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	4818      	ldr	r0, [pc, #96]	@ (80014e4 <SendResetResponse+0x88>)
 8001482:	f007 f883 	bl	800858c <iprintf>

    // 1. Crie um buffer de transmissão na pilha com o tamanho MÁXIMO padronizado.
    //    Esta é a correção crucial. Agora 'tx_buffer' é um array real com memória alocada.
    uint8_t tx_buffer[TELEMETRY_PAYLOAD_SIZE];
    // 2. Limpe o buffer com zeros para garantir que o padding seja 0x00.
    memset(tx_buffer, 0, TELEMETRY_PAYLOAD_SIZE);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2214      	movs	r2, #20
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f007 f9e6 	bl	8008860 <memset>

    // 3. Copie os dados de telemetria reais para o início do buffer maior.
    memcpy(tx_buffer, &latest_telemetry, TELEMETRY_PAYLOAD_SIZE); // Use sizeof() para segurança
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <SendResetResponse+0x84>)
 8001496:	f107 0414 	add.w	r4, r7, #20
 800149a:	461d      	mov	r5, r3
 800149c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	6023      	str	r3, [r4, #0]

    // 4. Configure o rádio para enviar um pacote do tamanho MÁXIMO.
    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 80014a4:	2301      	movs	r3, #1
 80014a6:	703b      	strb	r3, [r7, #0]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 80014a8:	2308      	movs	r3, #8
 80014aa:	81fb      	strh	r3, [r7, #14]
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 80014ac:	2301      	movs	r3, #1
 80014ae:	743b      	strb	r3, [r7, #16]
    packetParams.Params.LoRa.PayloadLength = TELEMETRY_PAYLOAD_SIZE;
 80014b0:	2314      	movs	r3, #20
 80014b2:	747b      	strb	r3, [r7, #17]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 80014b4:	2301      	movs	r3, #1
 80014b6:	74bb      	strb	r3, [r7, #18]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	74fb      	strb	r3, [r7, #19]
    SUBGRF_SetPacketParams(&packetParams);
 80014bc:	463b      	mov	r3, r7
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fe48 	bl	8007154 <SUBGRF_SetPacketParams>

    // 5. Envie o buffer completo de tamanho máximo.
    SUBGRF_SendPayload(tx_buffer, TELEMETRY_PAYLOAD_SIZE, 0);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	2114      	movs	r1, #20
 80014cc:	4618      	mov	r0, r3
 80014ce:	f005 fa75 	bl	80069bc <SUBGRF_SendPayload>
}
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bdb0      	pop	{r4, r5, r7, pc}
 80014d8:	2000033d 	.word	0x2000033d
 80014dc:	0800c03c 	.word	0x0800c03c
 80014e0:	20000328 	.word	0x20000328
 80014e4:	0800c068 	.word	0x0800c068

080014e8 <SendTelemetryResponse>:

void SendTelemetryResponse(void)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
    if (lora_tx_busy) {
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <SendTelemetryResponse+0x88>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <SendTelemetryResponse+0x18>
        printf("WARN: Radio ocupado, resposta descartada.\r\n");
 80014f8:	481e      	ldr	r0, [pc, #120]	@ (8001574 <SendTelemetryResponse+0x8c>)
 80014fa:	f007 f8af 	bl	800865c <puts>
        return;
 80014fe:	e033      	b.n	8001568 <SendTelemetryResponse+0x80>
    }

    if (!telemetry_available) {
 8001500:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <SendTelemetryResponse+0x90>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f083 0301 	eor.w	r3, r3, #1
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <SendTelemetryResponse+0x30>
        printf("WARN: Nenhuma telemetria disponível.\r\n");
 8001510:	481a      	ldr	r0, [pc, #104]	@ (800157c <SendTelemetryResponse+0x94>)
 8001512:	f007 f8a3 	bl	800865c <puts>
        return;
 8001516:	e027      	b.n	8001568 <SendTelemetryResponse+0x80>
    }

    lora_tx_busy = true;
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <SendTelemetryResponse+0x88>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
    printf("Enviando telemetria - ID: %lu\r\n", latest_telemetry.packet_id);
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <SendTelemetryResponse+0x98>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	4817      	ldr	r0, [pc, #92]	@ (8001584 <SendTelemetryResponse+0x9c>)
 8001526:	f007 f831 	bl	800858c <iprintf>

    // 2. Limpe o buffer com zeros para garantir que o padding seja 0x00.
//    memset(tx_buffer, 0, TELEMETRY_PAYLOAD_SIZE);

    // 3. Copie os dados de telemetria reais para o início do buffer maior.
    memcpy(tx_buffer, &latest_telemetry, TELEMETRY_PAYLOAD_SIZE); // Use sizeof() para segurança
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <SendTelemetryResponse+0x98>)
 800152c:	f107 0414 	add.w	r4, r7, #20
 8001530:	461d      	mov	r5, r3
 8001532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001536:	682b      	ldr	r3, [r5, #0]
 8001538:	6023      	str	r3, [r4, #0]

    // 4. Configure o rádio para enviar um pacote do tamanho MÁXIMO.
    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 800153a:	2301      	movs	r3, #1
 800153c:	703b      	strb	r3, [r7, #0]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 800153e:	2308      	movs	r3, #8
 8001540:	81fb      	strh	r3, [r7, #14]
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001542:	2301      	movs	r3, #1
 8001544:	743b      	strb	r3, [r7, #16]
    packetParams.Params.LoRa.PayloadLength = TELEMETRY_PAYLOAD_SIZE;
 8001546:	2314      	movs	r3, #20
 8001548:	747b      	strb	r3, [r7, #17]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 800154a:	2301      	movs	r3, #1
 800154c:	74bb      	strb	r3, [r7, #18]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 800154e:	2300      	movs	r3, #0
 8001550:	74fb      	strb	r3, [r7, #19]
    SUBGRF_SetPacketParams(&packetParams);
 8001552:	463b      	mov	r3, r7
 8001554:	4618      	mov	r0, r3
 8001556:	f005 fdfd 	bl	8007154 <SUBGRF_SetPacketParams>

    // 5. Envie o buffer completo de tamanho máximo.
    SUBGRF_SendPayload(tx_buffer, TELEMETRY_PAYLOAD_SIZE, 0);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	2114      	movs	r1, #20
 8001562:	4618      	mov	r0, r3
 8001564:	f005 fa2a 	bl	80069bc <SUBGRF_SendPayload>
}
 8001568:	3728      	adds	r7, #40	@ 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bdb0      	pop	{r4, r5, r7, pc}
 800156e:	bf00      	nop
 8001570:	2000033d 	.word	0x2000033d
 8001574:	0800c03c 	.word	0x0800c03c
 8001578:	2000033c 	.word	0x2000033c
 800157c:	0800c090 	.word	0x0800c090
 8001580:	20000328 	.word	0x20000328
 8001584:	0800c0b8 	.word	0x0800c0b8

08001588 <ProcessLoRaCommand>:


void ProcessLoRaCommand(uint8_t* buffer, uint8_t size)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
    if (size != MAX_PACKET_SIZE) {
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	2b0b      	cmp	r3, #11
 8001598:	d005      	beq.n	80015a6 <ProcessLoRaCommand+0x1e>
        printf("ERRO: Comando LoRa com tamanho inválido: %d\r\n", size);
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	4619      	mov	r1, r3
 800159e:	4816      	ldr	r0, [pc, #88]	@ (80015f8 <ProcessLoRaCommand+0x70>)
 80015a0:	f006 fff4 	bl	800858c <iprintf>
        return;
 80015a4:	e025      	b.n	80015f2 <ProcessLoRaCommand+0x6a>
    }

    CommandPacket_t* command = (CommandPacket_t*)buffer;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

    printf("Comando recebido: %d, Seq: %lu\r\n", command->command_type, command->sequence_number);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	791b      	ldrb	r3, [r3, #4]
 80015ae:	4619      	mov	r1, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4811      	ldr	r0, [pc, #68]	@ (80015fc <ProcessLoRaCommand+0x74>)
 80015b8:	f006 ffe8 	bl	800858c <iprintf>

    switch (command->command_type)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	791b      	ldrb	r3, [r3, #4]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d007      	beq.n	80015d4 <ProcessLoRaCommand+0x4c>
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d10d      	bne.n	80015e4 <ProcessLoRaCommand+0x5c>
    {
        case CMD_TYPE_REQUEST:
            printf("Processando pedido de telemetria...\r\n");
 80015c8:	480d      	ldr	r0, [pc, #52]	@ (8001600 <ProcessLoRaCommand+0x78>)
 80015ca:	f007 f847 	bl	800865c <puts>
            SendTelemetryResponse();
 80015ce:	f7ff ff8b 	bl	80014e8 <SendTelemetryResponse>
            break;
 80015d2:	e00e      	b.n	80015f2 <ProcessLoRaCommand+0x6a>

        case CMD_TYPE_EXECUTE:
			printf("Processando pedido de reset...\r\n");
 80015d4:	480b      	ldr	r0, [pc, #44]	@ (8001604 <ProcessLoRaCommand+0x7c>)
 80015d6:	f007 f841 	bl	800865c <puts>
			SendResetCommandToRS41();
 80015da:	f7ff ff17 	bl	800140c <SendResetCommandToRS41>
			SendResetResponse();
 80015de:	f7ff ff3d 	bl	800145c <SendResetResponse>
			break;
 80015e2:	e006      	b.n	80015f2 <ProcessLoRaCommand+0x6a>

        default:
            printf("WARN: Comando desconhecido: %d\r\n", command->command_type);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	791b      	ldrb	r3, [r3, #4]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4807      	ldr	r0, [pc, #28]	@ (8001608 <ProcessLoRaCommand+0x80>)
 80015ec:	f006 ffce 	bl	800858c <iprintf>
            break;
 80015f0:	bf00      	nop
    }
}
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	0800c0d8 	.word	0x0800c0d8
 80015fc:	0800c108 	.word	0x0800c108
 8001600:	0800c12c 	.word	0x0800c12c
 8001604:	0800c154 	.word	0x0800c154
 8001608:	0800c174 	.word	0x0800c174

0800160c <Radio_Init>:

void Radio_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	@ 0x30
 8001610:	af00      	add	r7, sp, #0
    SUBGRF_Init(RadioOnDioIrq);
 8001612:	481f      	ldr	r0, [pc, #124]	@ (8001690 <Radio_Init+0x84>)
 8001614:	f005 f958 	bl	80068c8 <SUBGRF_Init>

    SUBGRF_SetStandby(STDBY_RC);
 8001618:	2000      	movs	r0, #0
 800161a:	f005 fa23 	bl	8006a64 <SUBGRF_SetStandby>
    SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 800161e:	2001      	movs	r0, #1
 8001620:	f005 fbd6 	bl	8006dd0 <SUBGRF_SetPacketType>
    SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8001624:	481b      	ldr	r0, [pc, #108]	@ (8001694 <Radio_Init+0x88>)
 8001626:	f005 fb8d 	bl	8006d44 <SUBGRF_SetRfFrequency>
    SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 800162a:	2016      	movs	r0, #22
 800162c:	f005 ff7e 	bl	800752c <SUBGRF_SetRfTxPower>

    ModulationParams_t modulationParams;
    modulationParams.PacketType = PACKET_TYPE_LORA;
 8001630:	2301      	movs	r3, #1
 8001632:	753b      	strb	r3, [r7, #20]
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 8001634:	230a      	movs	r3, #10
 8001636:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 800163a:	2304      	movs	r3, #4
 800163c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    modulationParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 8001640:	2304      	movs	r3, #4
 8001642:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    SUBGRF_SetModulationParams(&modulationParams);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fcb1 	bl	8006fb8 <SUBGRF_SetModulationParams>

    // Configuração inicial para receber comandos
    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 8001656:	2301      	movs	r3, #1
 8001658:	703b      	strb	r3, [r7, #0]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 800165a:	2308      	movs	r3, #8
 800165c:	81fb      	strh	r3, [r7, #14]
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 800165e:	2301      	movs	r3, #1
 8001660:	743b      	strb	r3, [r7, #16]
    packetParams.Params.LoRa.PayloadLength = MAX_PACKET_SIZE; // Inicialmente configurado para comandos
 8001662:	230b      	movs	r3, #11
 8001664:	747b      	strb	r3, [r7, #17]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8001666:	2301      	movs	r3, #1
 8001668:	74bb      	strb	r3, [r7, #18]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 800166a:	2300      	movs	r3, #0
 800166c:	74fb      	strb	r3, [r7, #19]
    SUBGRF_SetPacketParams(&packetParams);
 800166e:	463b      	mov	r3, r7
 8001670:	4618      	mov	r0, r3
 8001672:	f005 fd6f 	bl	8007154 <SUBGRF_SetPacketParams>

    // Configura interrupções para RX e TX
    SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_TX_DONE | IRQ_CRC_ERROR | IRQ_RX_TX_TIMEOUT,
 8001676:	2300      	movs	r3, #0
 8001678:	2200      	movs	r2, #0
 800167a:	f240 2143 	movw	r1, #579	@ 0x243
 800167e:	f240 2043 	movw	r0, #579	@ 0x243
 8001682:	f005 fb03 	bl	8006c8c <SUBGRF_SetDioIrqParams>
                           IRQ_RX_DONE | IRQ_TX_DONE | IRQ_CRC_ERROR | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE, IRQ_RADIO_NONE);
}
 8001686:	bf00      	nop
 8001688:	3730      	adds	r7, #48	@ 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	08001699 	.word	0x08001699
 8001694:	3689cac0 	.word	0x3689cac0

08001698 <RadioOnDioIrq>:

void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b098      	sub	sp, #96	@ 0x60
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]

    switch (radioIrq)
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016a8:	d06c      	beq.n	8001784 <RadioOnDioIrq+0xec>
 80016aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016ae:	f300 8089 	bgt.w	80017c4 <RadioOnDioIrq+0x12c>
 80016b2:	2b40      	cmp	r3, #64	@ 0x40
 80016b4:	d048      	beq.n	8001748 <RadioOnDioIrq+0xb0>
 80016b6:	2b40      	cmp	r3, #64	@ 0x40
 80016b8:	f300 8084 	bgt.w	80017c4 <RadioOnDioIrq+0x12c>
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d022      	beq.n	8001706 <RadioOnDioIrq+0x6e>
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d17f      	bne.n	80017c4 <RadioOnDioIrq+0x12c>
    {
        case IRQ_RX_DONE:
            {
                uint8_t received_size = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                PacketStatus_t packetStatus;

                SUBGRF_GetPayload(lora_rx_buffer, &received_size, sizeof(lora_rx_buffer));
 80016ca:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80016ce:	220b      	movs	r2, #11
 80016d0:	4619      	mov	r1, r3
 80016d2:	483f      	ldr	r0, [pc, #252]	@ (80017d0 <RadioOnDioIrq+0x138>)
 80016d4:	f005 f950 	bl	8006978 <SUBGRF_GetPayload>
                SUBGRF_GetPacketStatus(&packetStatus);
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 fe01 	bl	80072e4 <SUBGRF_GetPacketStatus>

                printf("Comando LoRa recebido! RSSI: %d dBm, SNR: %d, Size: %d\r\n",
                       packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt, received_size);
 80016e2:	f997 3018 	ldrsb.w	r3, [r7, #24]
                printf("Comando LoRa recebido! RSSI: %d dBm, SNR: %d, Size: %d\r\n",
 80016e6:	4619      	mov	r1, r3
                       packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt, received_size);
 80016e8:	f997 3019 	ldrsb.w	r3, [r7, #25]
                printf("Comando LoRa recebido! RSSI: %d dBm, SNR: %d, Size: %d\r\n",
 80016ec:	461a      	mov	r2, r3
 80016ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016f2:	4838      	ldr	r0, [pc, #224]	@ (80017d4 <RadioOnDioIrq+0x13c>)
 80016f4:	f006 ff4a 	bl	800858c <iprintf>
                ProcessLoRaCommand(lora_rx_buffer, received_size);
 80016f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016fc:	4619      	mov	r1, r3
 80016fe:	4834      	ldr	r0, [pc, #208]	@ (80017d0 <RadioOnDioIrq+0x138>)
 8001700:	f7ff ff42 	bl	8001588 <ProcessLoRaCommand>
            }
            break;
 8001704:	e05f      	b.n	80017c6 <RadioOnDioIrq+0x12e>

        case IRQ_TX_DONE:
            printf("LoRa TX concluida.\r\n");
 8001706:	4834      	ldr	r0, [pc, #208]	@ (80017d8 <RadioOnDioIrq+0x140>)
 8001708:	f006 ffa8 	bl	800865c <puts>
            lora_tx_busy = false;
 800170c:	4b33      	ldr	r3, [pc, #204]	@ (80017dc <RadioOnDioIrq+0x144>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]



            // Reconfigura para receber comandos novamente
            PacketParams_t packetParams;
            packetParams.PacketType = PACKET_TYPE_LORA;
 8001712:	2301      	movs	r3, #1
 8001714:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8001718:	2308      	movs	r3, #8
 800171a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 800171e:	2301      	movs	r3, #1
 8001720:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            packetParams.Params.LoRa.PayloadLength = MAX_PACKET_SIZE;
 8001724:	230b      	movs	r3, #11
 8001726:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            SUBGRF_SetPacketParams(&packetParams);
 8001736:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800173a:	4618      	mov	r0, r3
 800173c:	f005 fd0a 	bl	8007154 <SUBGRF_SetPacketParams>

            // Volta para modo de recepção contínua
            SUBGRF_SetRx(0);
 8001740:	2000      	movs	r0, #0
 8001742:	f005 f9cb 	bl	8006adc <SUBGRF_SetRx>
            break;
 8001746:	e03e      	b.n	80017c6 <RadioOnDioIrq+0x12e>

        case IRQ_CRC_ERROR:
            printf("WARN: Erro de CRC no comando LoRa.\r\n");
 8001748:	4825      	ldr	r0, [pc, #148]	@ (80017e0 <RadioOnDioIrq+0x148>)
 800174a:	f006 ff87 	bl	800865c <puts>
            // Reconfigura para comandos e volta a escutar
            PacketParams_t packetParamsCrc;
            packetParamsCrc.PacketType = PACKET_TYPE_LORA;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            packetParamsCrc.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8001754:	2308      	movs	r3, #8
 8001756:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            packetParamsCrc.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            packetParamsCrc.Params.LoRa.PayloadLength = MAX_PACKET_SIZE;
 8001760:	230b      	movs	r3, #11
 8001762:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            packetParamsCrc.Params.LoRa.CrcMode = LORA_CRC_ON;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            packetParamsCrc.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            SUBGRF_SetPacketParams(&packetParamsCrc);
 8001772:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001776:	4618      	mov	r0, r3
 8001778:	f005 fcec 	bl	8007154 <SUBGRF_SetPacketParams>
            SUBGRF_SetRx(0);
 800177c:	2000      	movs	r0, #0
 800177e:	f005 f9ad 	bl	8006adc <SUBGRF_SetRx>
            break;
 8001782:	e020      	b.n	80017c6 <RadioOnDioIrq+0x12e>

        case IRQ_RX_TX_TIMEOUT:
            printf("WARN: LoRa timeout.\r\n");
 8001784:	4817      	ldr	r0, [pc, #92]	@ (80017e4 <RadioOnDioIrq+0x14c>)
 8001786:	f006 ff69 	bl	800865c <puts>
            lora_tx_busy = false;
 800178a:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <RadioOnDioIrq+0x144>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
            // Reconfigura para comandos e volta a escutar
            PacketParams_t packetParamsTimeout;
            packetParamsTimeout.PacketType = PACKET_TYPE_LORA;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            packetParamsTimeout.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8001796:	2308      	movs	r3, #8
 8001798:	867b      	strh	r3, [r7, #50]	@ 0x32
            packetParamsTimeout.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 800179a:	2301      	movs	r3, #1
 800179c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            packetParamsTimeout.Params.LoRa.PayloadLength = MAX_PACKET_SIZE;
 80017a0:	230b      	movs	r3, #11
 80017a2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            packetParamsTimeout.Params.LoRa.CrcMode = LORA_CRC_ON;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
            packetParamsTimeout.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SUBGRF_SetPacketParams(&packetParamsTimeout);
 80017b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fccc 	bl	8007154 <SUBGRF_SetPacketParams>
            SUBGRF_SetRx(0);
 80017bc:	2000      	movs	r0, #0
 80017be:	f005 f98d 	bl	8006adc <SUBGRF_SetRx>
            break;
 80017c2:	e000      	b.n	80017c6 <RadioOnDioIrq+0x12e>

        default:
            break;
 80017c4:	bf00      	nop
    }
}
 80017c6:	bf00      	nop
 80017c8:	3760      	adds	r7, #96	@ 0x60
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000031c 	.word	0x2000031c
 80017d4:	0800c198 	.word	0x0800c198
 80017d8:	0800c1d4 	.word	0x0800c1d4
 80017dc:	2000033d 	.word	0x2000033d
 80017e0:	0800c1e8 	.word	0x0800c1e8
 80017e4:	0800c20c 	.word	0x0800c20c

080017e8 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t* data, int length)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
    uint8_t checksum = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	e009      	b.n	8001810 <calculate_checksum+0x28>
        checksum ^= data[i];
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	4053      	eors	r3, r2
 8001808:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3301      	adds	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf1      	blt.n	80017fc <calculate_checksum+0x14>
    }
    return checksum;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <Error_Handler+0x8>

08001830 <LL_AHB2_GRP1_EnableClock>:
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800183c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800183e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4313      	orrs	r3, r2
 8001846:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001854:	68fb      	ldr	r3, [r7, #12]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800186e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800187c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800189e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b4:	68fb      	ldr	r3, [r7, #12]
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e4:	68fb      	ldr	r3, [r7, #12]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <HAL_SUBGHZ_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsubghz: SUBGHZ handle pointer
  * @retval None
  */
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN SUBGHZ_MspInit 0 */

    /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001904:	2001      	movs	r0, #1
 8001906:	f7ff ffdb 	bl	80018c0 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2032      	movs	r0, #50	@ 0x32
 8001910:	f000 fd93 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001914:	2032      	movs	r0, #50	@ 0x32
 8001916:	f000 fdaa 	bl	800246e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SUBGHZ_MspInit 1 */

    /* USER CODE END SUBGHZ_MspInit 1 */

}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b096      	sub	sp, #88	@ 0x58
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2238      	movs	r2, #56	@ 0x38
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f006 ff8b 	bl	8008860 <memset>
  if(huart->Instance==USART1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a9b      	ldr	r2, [pc, #620]	@ (8001bbc <HAL_UART_MspInit+0x298>)
 8001950:	4293      	cmp	r3, r2
 8001952:	f040 8094 	bne.w	8001a7e <HAL_UART_MspInit+0x15a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001956:	2301      	movs	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800195a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800195e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	4618      	mov	r0, r3
 8001966:	f002 fd3b 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001970:	f7ff ff58 	bl	8001824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001974:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001978:	f7ff ff8a 	bl	8001890 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	2002      	movs	r0, #2
 800197e:	f7ff ff57 	bl	8001830 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001982:	23c0      	movs	r3, #192	@ 0xc0
 8001984:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001992:	2307      	movs	r3, #7
 8001994:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800199a:	4619      	mov	r1, r3
 800199c:	4888      	ldr	r0, [pc, #544]	@ (8001bc0 <HAL_UART_MspInit+0x29c>)
 800199e:	f001 f903 	bl	8002ba8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80019a2:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019a4:	4a88      	ldr	r2, [pc, #544]	@ (8001bc8 <HAL_UART_MspInit+0x2a4>)
 80019a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80019a8:	4b86      	ldr	r3, [pc, #536]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019aa:	2212      	movs	r2, #18
 80019ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ae:	4b85      	ldr	r3, [pc, #532]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019b0:	2210      	movs	r2, #16
 80019b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b4:	4b83      	ldr	r3, [pc, #524]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019ba:	4b82      	ldr	r3, [pc, #520]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019bc:	2280      	movs	r2, #128	@ 0x80
 80019be:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019c0:	4b80      	ldr	r3, [pc, #512]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019c6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80019cc:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019ce:	2220      	movs	r2, #32
 80019d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019d2:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019d8:	487a      	ldr	r0, [pc, #488]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019da:	f000 fd63 	bl	80024a4 <HAL_DMA_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80019e4:	f7ff ff1e 	bl	8001824 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80019e8:	2110      	movs	r1, #16
 80019ea:	4876      	ldr	r0, [pc, #472]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019ec:	f001 f804 	bl	80029f8 <HAL_DMA_ConfigChannelAttributes>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 80019f6:	f7ff ff15 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a71      	ldr	r2, [pc, #452]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 80019fe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001a00:	4a70      	ldr	r2, [pc, #448]	@ (8001bc4 <HAL_UART_MspInit+0x2a0>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001a06:	4b71      	ldr	r3, [pc, #452]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a08:	4a71      	ldr	r2, [pc, #452]	@ (8001bd0 <HAL_UART_MspInit+0x2ac>)
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a0e:	2211      	movs	r2, #17
 8001a10:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a12:	4b6e      	ldr	r3, [pc, #440]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b6c      	ldr	r3, [pc, #432]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b6b      	ldr	r3, [pc, #428]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a24:	4b69      	ldr	r3, [pc, #420]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2a:	4b68      	ldr	r3, [pc, #416]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a30:	4b66      	ldr	r3, [pc, #408]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a32:	2220      	movs	r2, #32
 8001a34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a36:	4b65      	ldr	r3, [pc, #404]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a3c:	4863      	ldr	r0, [pc, #396]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a3e:	f000 fd31 	bl	80024a4 <HAL_DMA_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001a48:	f7ff feec 	bl	8001824 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	485f      	ldr	r0, [pc, #380]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a50:	f000 ffd2 	bl	80029f8 <HAL_DMA_ConfigChannelAttributes>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001a5a:	f7ff fee3 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a5a      	ldr	r2, [pc, #360]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a66:	4a59      	ldr	r2, [pc, #356]	@ (8001bcc <HAL_UART_MspInit+0x2a8>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2024      	movs	r0, #36	@ 0x24
 8001a72:	f000 fce2 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a76:	2024      	movs	r0, #36	@ 0x24
 8001a78:	f000 fcf9 	bl	800246e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a7c:	e099      	b.n	8001bb2 <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a54      	ldr	r2, [pc, #336]	@ (8001bd4 <HAL_UART_MspInit+0x2b0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	f040 8094 	bne.w	8001bb2 <HAL_UART_MspInit+0x28e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a8e:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001a92:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fca1 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8001aa4:	f7ff febe 	bl	8001824 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001aac:	f7ff fed8 	bl	8001860 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff febd 	bl	8001830 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad4:	f001 f868 	bl	8002ba8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8001ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001ada:	4a40      	ldr	r2, [pc, #256]	@ (8001bdc <HAL_UART_MspInit+0x2b8>)
 8001adc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001ade:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001ae0:	2213      	movs	r2, #19
 8001ae2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aea:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001af0:	4b39      	ldr	r3, [pc, #228]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001af2:	2280      	movs	r2, #128	@ 0x80
 8001af4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001afc:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b02:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001b04:	2220      	movs	r2, #32
 8001b06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b08:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b0e:	4832      	ldr	r0, [pc, #200]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001b10:	f000 fcc8 	bl	80024a4 <HAL_DMA_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8001b1a:	f7ff fe83 	bl	8001824 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b1e:	2110      	movs	r1, #16
 8001b20:	482d      	ldr	r0, [pc, #180]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001b22:	f000 ff69 	bl	80029f8 <HAL_DMA_ConfigChannelAttributes>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8001b2c:	f7ff fe7a 	bl	8001824 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a29      	ldr	r2, [pc, #164]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001b34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b38:	4a27      	ldr	r2, [pc, #156]	@ (8001bd8 <HAL_UART_MspInit+0x2b4>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001b3e:	4b28      	ldr	r3, [pc, #160]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b40:	4a28      	ldr	r2, [pc, #160]	@ (8001be4 <HAL_UART_MspInit+0x2c0>)
 8001b42:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b44:	4b26      	ldr	r3, [pc, #152]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b46:	2214      	movs	r2, #20
 8001b48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b4a:	4b25      	ldr	r3, [pc, #148]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b23      	ldr	r3, [pc, #140]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b22      	ldr	r3, [pc, #136]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5c:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b74:	481a      	ldr	r0, [pc, #104]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b76:	f000 fc95 	bl	80024a4 <HAL_DMA_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8001b80:	f7ff fe50 	bl	8001824 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b84:	2110      	movs	r1, #16
 8001b86:	4816      	ldr	r0, [pc, #88]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b88:	f000 ff36 	bl	80029f8 <HAL_DMA_ConfigChannelAttributes>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001b92:	f7ff fe47 	bl	8001824 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a11      	ldr	r2, [pc, #68]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b9a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b9c:	4a10      	ldr	r2, [pc, #64]	@ (8001be0 <HAL_UART_MspInit+0x2bc>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2025      	movs	r0, #37	@ 0x25
 8001ba8:	f000 fc47 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bac:	2025      	movs	r0, #37	@ 0x25
 8001bae:	f000 fc5e 	bl	800246e <HAL_NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3758      	adds	r7, #88	@ 0x58
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	200004d8 	.word	0x200004d8
 8001bc8:	40020008 	.word	0x40020008
 8001bcc:	20000478 	.word	0x20000478
 8001bd0:	4002001c 	.word	0x4002001c
 8001bd4:	40004400 	.word	0x40004400
 8001bd8:	20000538 	.word	0x20000538
 8001bdc:	40020030 	.word	0x40020030
 8001be0:	20000598 	.word	0x20000598
 8001be4:	40020044 	.word	0x40020044

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <NMI_Handler+0x4>

08001bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <MemManage_Handler+0x4>

08001c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <BusFault_Handler+0x4>

08001c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <UsageFault_Handler+0x4>

08001c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f000 fb0c 	bl	8002254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <DMA1_Channel1_IRQHandler+0x10>)
 8001c46:	f000 fe11 	bl	800286c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200004d8 	.word	0x200004d8

08001c54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <DMA1_Channel2_IRQHandler+0x10>)
 8001c5a:	f000 fe07 	bl	800286c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000478 	.word	0x20000478

08001c68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <DMA1_Channel3_IRQHandler+0x10>)
 8001c6e:	f000 fdfd 	bl	800286c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000538 	.word	0x20000538

08001c7c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <DMA1_Channel4_IRQHandler+0x10>)
 8001c82:	f000 fdf3 	bl	800286c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000598 	.word	0x20000598

08001c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <USART1_IRQHandler+0x10>)
 8001c96:	f003 facb 	bl	8005230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000350 	.word	0x20000350

08001ca4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <USART2_IRQHandler+0x10>)
 8001caa:	f003 fac1 	bl	8005230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200003e4 	.word	0x200003e4

08001cb8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001cbe:	f002 ffc5 	bl	8004c4c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000340 	.word	0x20000340

08001ccc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <MX_SUBGHZ_Init+0x20>)
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <MX_SUBGHZ_Init+0x20>)
 8001cd8:	f002 fd36 	bl	8004748 <HAL_SUBGHZ_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001ce2:	f7ff fd9f 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000340 	.word	0x20000340

08001cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return 1;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <_kill>:

int _kill(int pid, int sig)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d08:	f006 fdfc 	bl	8008904 <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2216      	movs	r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
  return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_exit>:

void _exit (int status)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d26:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffe7 	bl	8001cfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <_exit+0x12>

08001d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e00a      	b.n	8001d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d46:	f3af 8000 	nop.w
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	60ba      	str	r2, [r7, #8]
 8001d52:	b2ca      	uxtb	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbf0      	blt.n	8001d46 <_read+0x12>
  }

  return len;
 8001d64:	687b      	ldr	r3, [r7, #4]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d94:	605a      	str	r2, [r3, #4]
  return 0;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
	...

08001dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e00:	f006 fd80 	bl	8008904 <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20010000 	.word	0x20010000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	2000034c 	.word	0x2000034c
 8001e38:	20000758 	.word	0x20000758

08001e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e4e:	4a23      	ldr	r2, [pc, #140]	@ (8001edc <MX_USART1_UART_Init+0x94>)
 8001e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001e52:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e54:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e6e:	220c      	movs	r2, #12
 8001e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e78:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e84:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e90:	4811      	ldr	r0, [pc, #68]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001e92:	f003 f8aa 	bl	8004fea <HAL_UART_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e9c:	f7ff fcc2 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001ea4:	f004 fc1e 	bl	80066e4 <HAL_UARTEx_SetTxFifoThreshold>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001eae:	f7ff fcb9 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4808      	ldr	r0, [pc, #32]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001eb6:	f004 fc53 	bl	8006760 <HAL_UARTEx_SetRxFifoThreshold>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ec0:	f7ff fcb0 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ec4:	4804      	ldr	r0, [pc, #16]	@ (8001ed8 <MX_USART1_UART_Init+0x90>)
 8001ec6:	f004 fbd5 	bl	8006674 <HAL_UARTEx_DisableFifoMode>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ed0:	f7ff fca8 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000350 	.word	0x20000350
 8001edc:	40013800 	.word	0x40013800

08001ee0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001ee6:	4a23      	ldr	r2, [pc, #140]	@ (8001f74 <MX_USART2_UART_Init+0x94>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eea:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001eec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f28:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f2a:	f003 f85e 	bl	8004fea <HAL_UART_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f34:	f7ff fc76 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	480d      	ldr	r0, [pc, #52]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f3c:	f004 fbd2 	bl	80066e4 <HAL_UARTEx_SetTxFifoThreshold>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f46:	f7ff fc6d 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4808      	ldr	r0, [pc, #32]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f4e:	f004 fc07 	bl	8006760 <HAL_UARTEx_SetRxFifoThreshold>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f58:	f7ff fc64 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <MX_USART2_UART_Init+0x90>)
 8001f5e:	f004 fb89 	bl	8006674 <HAL_UARTEx_DisableFifoMode>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f68:	f7ff fc5c 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200003e4 	.word	0x200003e4
 8001f74:	40004400 	.word	0x40004400

08001f78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f78:	480d      	ldr	r0, [pc, #52]	@ (8001fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f7c:	f7ff ff5e 	bl	8001e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f82:	490d      	ldr	r1, [pc, #52]	@ (8001fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f84:	4a0d      	ldr	r2, [pc, #52]	@ (8001fbc <LoopForever+0xe>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f98:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc4 <LoopForever+0x16>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fa6:	f006 fcb3 	bl	8008910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001faa:	f7ff f8d9 	bl	8001160 <main>

08001fae <LoopForever>:

LoopForever:
    b LoopForever
 8001fae:	e7fe      	b.n	8001fae <LoopForever>
  ldr   r0, =_estack
 8001fb0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fbc:	0800c74c 	.word	0x0800c74c
  ldr r2, =_sbss
 8001fc0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001fc4:	20000758 	.word	0x20000758

08001fc8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC_IRQHandler>

08001fca <LL_AHB2_GRP1_EnableClock>:
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4013      	ands	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
	...

08001ffc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002016:	2002      	movs	r0, #2
 8002018:	f7ff ffd7 	bl	8001fca <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <BSP_LED_Init+0x6c>)
 8002020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002024:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800202e:	2302      	movs	r3, #2
 8002030:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <BSP_LED_Init+0x70>)
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	f107 020c 	add.w	r2, r7, #12
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fdb1 	bl	8002ba8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	4a08      	ldr	r2, [pc, #32]	@ (800206c <BSP_LED_Init+0x70>)
 800204a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <BSP_LED_Init+0x6c>)
 8002052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002056:	2200      	movs	r2, #0
 8002058:	4619      	mov	r1, r3
 800205a:	f000 ff05 	bl	8002e68 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	0800c2e0 	.word	0x0800c2e0
 800206c:	20000004 	.word	0x20000004

08002070 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	4a07      	ldr	r2, [pc, #28]	@ (800209c <BSP_LED_Toggle+0x2c>)
 800207e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4906      	ldr	r1, [pc, #24]	@ (80020a0 <BSP_LED_Toggle+0x30>)
 8002086:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f000 ff02 	bl	8002e96 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000004 	.word	0x20000004
 80020a0:	0800c2e0 	.word	0x0800c2e0

080020a4 <LL_AHB2_GRP1_EnableClock>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c8:	68fb      	ldr	r3, [r7, #12]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80020e8:	2004      	movs	r0, #4
 80020ea:	f7ff ffdb 	bl	80020a4 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80020ee:	2310      	movs	r3, #16
 80020f0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4812      	ldr	r0, [pc, #72]	@ (800214c <BSP_RADIO_Init+0x78>)
 8002104:	f000 fd50 	bl	8002ba8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002108:	2320      	movs	r3, #32
 800210a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4619      	mov	r1, r3
 8002110:	480e      	ldr	r0, [pc, #56]	@ (800214c <BSP_RADIO_Init+0x78>)
 8002112:	f000 fd49 	bl	8002ba8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002116:	2308      	movs	r3, #8
 8002118:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	4619      	mov	r1, r3
 800211e:	480b      	ldr	r0, [pc, #44]	@ (800214c <BSP_RADIO_Init+0x78>)
 8002120:	f000 fd42 	bl	8002ba8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002124:	2200      	movs	r2, #0
 8002126:	2120      	movs	r1, #32
 8002128:	4808      	ldr	r0, [pc, #32]	@ (800214c <BSP_RADIO_Init+0x78>)
 800212a:	f000 fe9d 	bl	8002e68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800212e:	2200      	movs	r2, #0
 8002130:	2110      	movs	r1, #16
 8002132:	4806      	ldr	r0, [pc, #24]	@ (800214c <BSP_RADIO_Init+0x78>)
 8002134:	f000 fe98 	bl	8002e68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002138:	2200      	movs	r2, #0
 800213a:	2108      	movs	r1, #8
 800213c:	4803      	ldr	r0, [pc, #12]	@ (800214c <BSP_RADIO_Init+0x78>)
 800213e:	f000 fe93 	bl	8002e68 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	48000800 	.word	0x48000800

08002150 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002170:	2301      	movs	r3, #1
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800218a:	230f      	movs	r3, #15
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e001      	b.n	8002194 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002190:	2316      	movs	r3, #22
 8002192:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021aa:	2003      	movs	r0, #3
 80021ac:	f000 f93a 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021b0:	f001 ff38 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a09      	ldr	r2, [pc, #36]	@ (80021dc <HAL_Init+0x3c>)
 80021b8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ba:	2000      	movs	r0, #0
 80021bc:	f000 f810 	bl	80021e0 <HAL_InitTick>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	e001      	b.n	80021d0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021cc:	f7ff fb90 	bl	80018f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d0:	79fb      	ldrb	r3, [r7, #7]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021ec:	4b17      	ldr	r3, [pc, #92]	@ (800224c <HAL_InitTick+0x6c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d024      	beq.n	800223e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021f4:	f001 ff16 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b14      	ldr	r3, [pc, #80]	@ (800224c <HAL_InitTick+0x6c>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002204:	fbb3 f3f1 	udiv	r3, r3, r1
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f93c 	bl	800248a <HAL_SYSTICK_Config>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10f      	bne.n	8002238 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	d809      	bhi.n	8002232 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221e:	2200      	movs	r2, #0
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002226:	f000 f908 	bl	800243a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800222a:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <HAL_InitTick+0x70>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e007      	b.n	8002242 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e004      	b.n	8002242 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e001      	b.n	8002242 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000014 	.word	0x20000014
 8002250:	20000010 	.word	0x20000010

08002254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_IncTick+0x1c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_IncTick+0x20>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a03      	ldr	r2, [pc, #12]	@ (8002274 <HAL_IncTick+0x20>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000014 	.word	0x20000014
 8002274:	200005f8 	.word	0x200005f8

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b02      	ldr	r3, [pc, #8]	@ (8002288 <HAL_GetTick+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	200005f8 	.word	0x200005f8

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4906      	ldr	r1, [pc, #24]	@ (8002324 <__NVIC_EnableIRQ+0x34>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	@ (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	@ (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	@ 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	@ 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002404:	f7ff ff90 	bl	8002328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff2d 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff44 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff92 	bl	800237c <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff61 	bl	8002328 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff37 	bl	80022f0 <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa4 	bl	80023e0 <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e08e      	b.n	80025d4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b47      	ldr	r3, [pc, #284]	@ (80025dc <HAL_DMA_Init+0x138>)
 80024be:	429a      	cmp	r2, r3
 80024c0:	d80f      	bhi.n	80024e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b45      	ldr	r3, [pc, #276]	@ (80025e0 <HAL_DMA_Init+0x13c>)
 80024ca:	4413      	add	r3, r2
 80024cc:	4a45      	ldr	r2, [pc, #276]	@ (80025e4 <HAL_DMA_Init+0x140>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	009a      	lsls	r2, r3, #2
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a42      	ldr	r2, [pc, #264]	@ (80025e8 <HAL_DMA_Init+0x144>)
 80024de:	641a      	str	r2, [r3, #64]	@ 0x40
 80024e0:	e00e      	b.n	8002500 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b40      	ldr	r3, [pc, #256]	@ (80025ec <HAL_DMA_Init+0x148>)
 80024ea:	4413      	add	r3, r2
 80024ec:	4a3d      	ldr	r2, [pc, #244]	@ (80025e4 <HAL_DMA_Init+0x140>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	009a      	lsls	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a3c      	ldr	r2, [pc, #240]	@ (80025f0 <HAL_DMA_Init+0x14c>)
 80024fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800251a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6819      	ldr	r1, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fabc 	bl	8002ad0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002560:	d102      	bne.n	8002568 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002570:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002574:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800257e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_DMA_Init+0x106>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d80c      	bhi.n	80025aa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fae5 	bl	8002b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	e008      	b.n	80025bc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40020407 	.word	0x40020407
 80025e0:	bffdfff8 	.word	0xbffdfff8
 80025e4:	cccccccd 	.word	0xcccccccd
 80025e8:	40020000 	.word	0x40020000
 80025ec:	bffdfbf8 	.word	0xbffdfbf8
 80025f0:	40020400 	.word	0x40020400

080025f4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_DMA_Start_IT+0x20>
 8002610:	2302      	movs	r3, #2
 8002612:	e069      	b.n	80026e8 <HAL_DMA_Start_IT+0xf4>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d155      	bne.n	80026d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fa02 	bl	8002a56 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 020e 	orr.w	r2, r2, #14
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00f      	b.n	800268c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0204 	bic.w	r2, r2, #4
 800267a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 020a 	orr.w	r2, r2, #10
 800268a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e008      	b.n	80026e6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2280      	movs	r2, #128	@ 0x80
 80026d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e04f      	b.n	80027a2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d008      	beq.n	8002720 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2204      	movs	r2, #4
 8002712:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e040      	b.n	80027a2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 020e 	bic.w	r2, r2, #14
 800272e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800273e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002754:	f003 021c 	and.w	r2, r3, #28
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800276c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00c      	beq.n	8002790 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002784:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800278e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d005      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2204      	movs	r2, #4
 80027c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e047      	b.n	8002860 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 020e 	bic.w	r2, r2, #14
 80027de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	f003 021c 	and.w	r2, r3, #28
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800281c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002830:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002834:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800283e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
    }
  }
  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002888:	f003 031c 	and.w	r3, r3, #28
 800288c:	2204      	movs	r2, #4
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d027      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x7c>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d022      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	f003 021c 	and.w	r2, r3, #28
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	2104      	movs	r1, #4
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8081 	beq.w	80029e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80028e6:	e07b      	b.n	80029e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ec:	f003 031c 	and.w	r3, r3, #28
 80028f0:	2202      	movs	r2, #2
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03d      	beq.n	8002978 <HAL_DMA_IRQHandler+0x10c>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d038      	beq.n	8002978 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 020a 	bic.w	r2, r2, #10
 8002922:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_DMA_IRQHandler+0x180>)
 8002934:	429a      	cmp	r2, r3
 8002936:	d909      	bls.n	800294c <HAL_DMA_IRQHandler+0xe0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	f003 031c 	and.w	r3, r3, #28
 8002940:	4a2b      	ldr	r2, [pc, #172]	@ (80029f0 <HAL_DMA_IRQHandler+0x184>)
 8002942:	2102      	movs	r1, #2
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	6053      	str	r3, [r2, #4]
 800294a:	e008      	b.n	800295e <HAL_DMA_IRQHandler+0xf2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	f003 031c 	and.w	r3, r3, #28
 8002954:	4a27      	ldr	r2, [pc, #156]	@ (80029f4 <HAL_DMA_IRQHandler+0x188>)
 8002956:	2102      	movs	r1, #2
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d038      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002976:	e033      	b.n	80029e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297c:	f003 031c 	and.w	r3, r3, #28
 8002980:	2208      	movs	r2, #8
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d02a      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x176>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d025      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 020e 	bic.w	r2, r2, #14
 80029a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f003 021c 	and.w	r2, r3, #28
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f202 	lsl.w	r2, r1, r2
 80029b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d004      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
}
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40020080 	.word	0x40020080
 80029f0:	40020400 	.word	0x40020400
 80029f4:	40020000 	.word	0x40020000

080029f8 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	72fb      	strb	r3, [r7, #11]
    return status;
 8002a10:	7afb      	ldrb	r3, [r7, #11]
 8002a12:	e01b      	b.n	8002a4c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00d      	beq.n	8002a42 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e003      	b.n	8002a42 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a40:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	601a      	str	r2, [r3, #0]

  return status;
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a6c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a7e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a84:	f003 021c 	and.w	r2, r3, #28
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d108      	bne.n	8002ab6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ab4:	e007      	b.n	8002ac6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	60da      	str	r2, [r3, #12]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d813      	bhi.n	8002b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002af0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	3b08      	subs	r3, #8
 8002b00:	4a14      	ldr	r2, [pc, #80]	@ (8002b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e011      	b.n	8002b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	009a      	lsls	r2, r3, #2
 8002b14:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002b16:	4413      	add	r3, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3b08      	subs	r3, #8
 8002b24:	4a0b      	ldr	r2, [pc, #44]	@ (8002b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	3307      	adds	r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002b34:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40020407 	.word	0x40020407
 8002b54:	cccccccd 	.word	0xcccccccd
 8002b58:	4002081c 	.word	0x4002081c
 8002b5c:	40020880 	.word	0x40020880

08002b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b70:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a08      	ldr	r2, [pc, #32]	@ (8002ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2201      	movs	r2, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	1000823f 	.word	0x1000823f
 8002ba4:	40020940 	.word	0x40020940

08002ba8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb6:	e140      	b.n	8002e3a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8132 	beq.w	8002e34 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d005      	beq.n	8002be8 <HAL_GPIO_Init+0x40>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d130      	bne.n	8002c4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c1e:	2201      	movs	r2, #1
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f003 0201 	and.w	r2, r3, #1
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d017      	beq.n	8002c86 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d123      	bne.n	8002cda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	08da      	lsrs	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3208      	adds	r2, #8
 8002cd4:	6939      	ldr	r1, [r7, #16]
 8002cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 808c 	beq.w	8002e34 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002e58 <HAL_GPIO_Init+0x2b0>)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	2207      	movs	r2, #7
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d46:	d00d      	beq.n	8002d64 <HAL_GPIO_Init+0x1bc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a44      	ldr	r2, [pc, #272]	@ (8002e5c <HAL_GPIO_Init+0x2b4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <HAL_GPIO_Init+0x1b8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a43      	ldr	r2, [pc, #268]	@ (8002e60 <HAL_GPIO_Init+0x2b8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_GPIO_Init+0x1b4>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x1be>
 8002d5c:	2307      	movs	r3, #7
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x1be>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x1be>
 8002d64:	2300      	movs	r3, #0
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d76:	4938      	ldr	r1, [pc, #224]	@ (8002e58 <HAL_GPIO_Init+0x2b0>)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d84:	4b37      	ldr	r3, [pc, #220]	@ (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002da8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002dae:	4b2d      	ldr	r3, [pc, #180]	@ (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dd2:	4a24      	ldr	r2, [pc, #144]	@ (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002dd8:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dde:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002dfe:	4a19      	ldr	r2, [pc, #100]	@ (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002e06:	4b17      	ldr	r3, [pc, #92]	@ (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e64 <HAL_GPIO_Init+0x2bc>)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3301      	adds	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f aeb7 	bne.w	8002bb8 <HAL_GPIO_Init+0x10>
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	48000400 	.word	0x48000400
 8002e60:	48000800 	.word	0x48000800
 8002e64:	58000800 	.word	0x58000800

08002e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
 8002e74:	4613      	mov	r3, r2
 8002e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e78:	787b      	ldrb	r3, [r7, #1]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e84:	e002      	b.n	8002e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ea8:	887a      	ldrh	r2, [r7, #2]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	041a      	lsls	r2, r3, #16
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ecc:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a03      	ldr	r2, [pc, #12]	@ (8002ee0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed6:	6013      	str	r3, [r2, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	58000400 	.word	0x58000400

08002ee4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002ef6:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f02:	d10d      	bne.n	8002f20 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002f04:	f000 f83c 	bl	8002f80 <HAL_PWREx_DisableLowPowerRunMode>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8002f0e:	e015      	b.n	8002f3c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002f10:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002f1c:	f000 f822 	bl	8002f64 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f20:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4a08      	ldr	r2, [pc, #32]	@ (8002f48 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002f26:	f023 0304 	bic.w	r3, r3, #4
 8002f2a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002f32:	bf30      	wfi
 8002f34:	e002      	b.n	8002f3c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002f36:	bf40      	sev
    __WFE();
 8002f38:	bf20      	wfe
    __WFE();
 8002f3a:	bf20      	wfe
  }
}
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	58000400 	.word	0x58000400
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <HAL_PWREx_GetVoltageRange+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	58000400 	.word	0x58000400

08002f64 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a03      	ldr	r2, [pc, #12]	@ (8002f7c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	58000400 	.word	0x58000400

08002f80 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002f86:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a15      	ldr	r2, [pc, #84]	@ (8002fe0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002f8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f90:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8002f92:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2232      	movs	r2, #50	@ 0x32
 8002f98:	fb02 f303 	mul.w	r3, r2, r3
 8002f9c:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0c9b      	lsrs	r3, r3, #18
 8002fa4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002fa6:	e002      	b.n	8002fae <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002fae:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fba:	d102      	bne.n	8002fc2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f2      	bne.n	8002fa8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002fc2:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fce:	d101      	bne.n	8002fd4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	58000400 	.word	0x58000400
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ffc:	d101      	bne.n	8003002 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	58000400 	.word	0x58000400

08003010 <LL_RCC_HSE_EnableTcxo>:
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800301e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <LL_RCC_HSE_DisableTcxo>:
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800303a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800305a:	d101      	bne.n	8003060 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <LL_RCC_HSE_Enable>:
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	6013      	str	r3, [r2, #0]
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <LL_RCC_HSE_Disable>:
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800308a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003098:	6013      	str	r3, [r2, #0]
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_HSE_IsReady>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030b4:	d101      	bne.n	80030ba <LL_RCC_HSE_IsReady+0x18>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_RCC_HSE_IsReady+0x1a>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <LL_RCC_HSI_Enable>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <LL_RCC_HSI_Disable>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_HSI_IsReady>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310e:	d101      	bne.n	8003114 <LL_RCC_HSI_IsReady+0x18>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <LL_RCC_HSI_IsReady+0x1a>
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <LL_RCC_HSI_SetCalibTrimming>:
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	061b      	lsls	r3, r3, #24
 8003134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d101      	bne.n	800315e <LL_RCC_LSE_IsReady+0x18>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <LL_RCC_LSE_IsReady+0x1a>
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800316c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d101      	bne.n	80031c0 <LL_RCC_LSI_IsReady+0x18>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <LL_RCC_LSI_IsReady+0x1a>
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80031ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80031ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	6013      	str	r3, [r2, #0]
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d101      	bne.n	8003218 <LL_RCC_MSI_IsReady+0x16>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <LL_RCC_MSI_IsReady+0x18>
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b08      	cmp	r3, #8
 8003232:	d101      	bne.n	8003238 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003264:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003306:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800330a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800330e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003330:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003334:	f023 020f 	bic.w	r2, r3, #15
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003362:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4313      	orrs	r3, r2
 800336a:	608b      	str	r3, [r1, #8]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800340a:	6013      	str	r3, [r2, #0]
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003426:	6013      	str	r3, [r2, #0]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003442:	d101      	bne.n	8003448 <LL_RCC_PLL_IsReady+0x18>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <LL_RCC_PLL_IsReady+0x1a>
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003462:	4618      	mov	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800346e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003496:	b480      	push	{r7}
 8003498:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800349a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0303 	and.w	r3, r3, #3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80034b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034be:	d101      	bne.n	80034c4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80034d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80034da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034e2:	d101      	bne.n	80034e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80034f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80034fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003506:	d101      	bne.n	800350c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800351a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003528:	d101      	bne.n	800352e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800353c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003546:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800354a:	d101      	bne.n	8003550 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
	...

0800355c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e36f      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356e:	f7ff fea6 	bl	80032be <LL_RCC_GetSysClkSource>
 8003572:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003574:	f7ff ff8f 	bl	8003496 <LL_RCC_PLL_GetMainSource>
 8003578:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80c4 	beq.w	8003710 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x3e>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	2b0c      	cmp	r3, #12
 8003592:	d176      	bne.n	8003682 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d173      	bne.n	8003682 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e353      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_OscConfig+0x68>
 80035b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c2:	e006      	b.n	80035d2 <HAL_RCC_OscConfig+0x76>
 80035c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d222      	bcs.n	800361c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fd5a 	bl	8004094 <RCC_SetFlashLatencyFromMSIRange>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e331      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035f4:	f043 0308 	orr.w	r3, r3, #8
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fe2b 	bl	8003270 <LL_RCC_MSI_SetCalibTrimming>
 800361a:	e021      	b.n	8003660 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800361c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003626:	f043 0308 	orr.w	r3, r3, #8
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fe12 	bl	8003270 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd1f 	bl	8004094 <RCC_SetFlashLatencyFromMSIRange>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e2f6      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003660:	f000 fce0 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 8003664:	4603      	mov	r3, r0
 8003666:	4aa7      	ldr	r2, [pc, #668]	@ (8003904 <HAL_RCC_OscConfig+0x3a8>)
 8003668:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800366a:	4ba7      	ldr	r3, [pc, #668]	@ (8003908 <HAL_RCC_OscConfig+0x3ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe fdb6 	bl	80021e0 <HAL_InitTick>
 8003674:	4603      	mov	r3, r0
 8003676:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d047      	beq.n	800370e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	e2e5      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02c      	beq.n	80036e4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800368a:	f7ff fd9e 	bl	80031ca <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800368e:	f7fe fdf3 	bl	8002278 <HAL_GetTick>
 8003692:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003696:	f7fe fdef 	bl	8002278 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e2d2      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80036a8:	f7ff fdab 	bl	8003202 <LL_RCC_MSI_IsReady>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f1      	beq.n	8003696 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fdc7 	bl	8003270 <LL_RCC_MSI_SetCalibTrimming>
 80036e2:	e015      	b.n	8003710 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036e4:	f7ff fd7f 	bl	80031e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036e8:	f7fe fdc6 	bl	8002278 <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036f0:	f7fe fdc2 	bl	8002278 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e2a5      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003702:	f7ff fd7e 	bl	8003202 <LL_RCC_MSI_IsReady>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f1      	bne.n	80036f0 <HAL_RCC_OscConfig+0x194>
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800370e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d058      	beq.n	80037ce <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d005      	beq.n	800372e <HAL_RCC_OscConfig+0x1d2>
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b0c      	cmp	r3, #12
 8003726:	d108      	bne.n	800373a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d14b      	bne.n	80037ce <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e289      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800373a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003758:	d102      	bne.n	8003760 <HAL_RCC_OscConfig+0x204>
 800375a:	f7ff fc86 	bl	800306a <LL_RCC_HSE_Enable>
 800375e:	e00d      	b.n	800377c <HAL_RCC_OscConfig+0x220>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003768:	d104      	bne.n	8003774 <HAL_RCC_OscConfig+0x218>
 800376a:	f7ff fc51 	bl	8003010 <LL_RCC_HSE_EnableTcxo>
 800376e:	f7ff fc7c 	bl	800306a <LL_RCC_HSE_Enable>
 8003772:	e003      	b.n	800377c <HAL_RCC_OscConfig+0x220>
 8003774:	f7ff fc87 	bl	8003086 <LL_RCC_HSE_Disable>
 8003778:	f7ff fc58 	bl	800302c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d012      	beq.n	80037aa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fd78 	bl	8002278 <HAL_GetTick>
 8003788:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe fd74 	bl	8002278 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	@ 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e257      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800379e:	f7ff fc80 	bl	80030a2 <LL_RCC_HSE_IsReady>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f1      	beq.n	800378c <HAL_RCC_OscConfig+0x230>
 80037a8:	e011      	b.n	80037ce <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037aa:	f7fe fd65 	bl	8002278 <HAL_GetTick>
 80037ae:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b2:	f7fe fd61 	bl	8002278 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b64      	cmp	r3, #100	@ 0x64
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e244      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80037c4:	f7ff fc6d 	bl	80030a2 <LL_RCC_HSE_IsReady>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f1      	bne.n	80037b2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d046      	beq.n	8003868 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d005      	beq.n	80037ec <HAL_RCC_OscConfig+0x290>
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d10e      	bne.n	8003804 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e22a      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fc8e 	bl	800311e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003802:	e031      	b.n	8003868 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d019      	beq.n	8003840 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800380c:	f7ff fc5a 	bl	80030c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe fd32 	bl	8002278 <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003818:	f7fe fd2e 	bl	8002278 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e211      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800382a:	f7ff fc67 	bl	80030fc <LL_RCC_HSI_IsReady>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f1      	beq.n	8003818 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fc70 	bl	800311e <LL_RCC_HSI_SetCalibTrimming>
 800383e:	e013      	b.n	8003868 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003840:	f7ff fc4e 	bl	80030e0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fe fd18 	bl	8002278 <HAL_GetTick>
 8003848:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384c:	f7fe fd14 	bl	8002278 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e1f7      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800385e:	f7ff fc4d 	bl	80030fc <LL_RCC_HSI_IsReady>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f1      	bne.n	800384c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d06e      	beq.n	8003952 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d056      	beq.n	800392a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800387c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003884:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	429a      	cmp	r2, r3
 8003892:	d031      	beq.n	80038f8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e1d0      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80038b6:	f7ff fc67 	bl	8003188 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038ba:	f7fe fcdd 	bl	8002278 <HAL_GetTick>
 80038be:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c2:	f7fe fcd9 	bl	8002278 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b11      	cmp	r3, #17
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e1bc      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80038d4:	f7ff fc68 	bl	80031a8 <LL_RCC_LSI_IsReady>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f1      	bne.n	80038c2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80038de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e6:	f023 0210 	bic.w	r2, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f8:	f7ff fc36 	bl	8003168 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fc:	f7fe fcbc 	bl	8002278 <HAL_GetTick>
 8003900:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003902:	e00c      	b.n	800391e <HAL_RCC_OscConfig+0x3c2>
 8003904:	20000000 	.word	0x20000000
 8003908:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390c:	f7fe fcb4 	bl	8002278 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b11      	cmp	r3, #17
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e197      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800391e:	f7ff fc43 	bl	80031a8 <LL_RCC_LSI_IsReady>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f1      	beq.n	800390c <HAL_RCC_OscConfig+0x3b0>
 8003928:	e013      	b.n	8003952 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392a:	f7ff fc2d 	bl	8003188 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392e:	f7fe fca3 	bl	8002278 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003936:	f7fe fc9f 	bl	8002278 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b11      	cmp	r3, #17
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e182      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003948:	f7ff fc2e 	bl	80031a8 <LL_RCC_LSI_IsReady>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f1      	bne.n	8003936 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80d8 	beq.w	8003b10 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003960:	f7ff fb44 	bl	8002fec <LL_PWR_IsEnabledBkUpAccess>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d113      	bne.n	8003992 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800396a:	f7ff faad 	bl	8002ec8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396e:	f7fe fc83 	bl	8002278 <HAL_GetTick>
 8003972:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003976:	f7fe fc7f 	bl	8002278 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e162      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003988:	f7ff fb30 	bl	8002fec <LL_PWR_IsEnabledBkUpAccess>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f1      	beq.n	8003976 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d07b      	beq.n	8003a92 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b85      	cmp	r3, #133	@ 0x85
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d109      	bne.n	80039be <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fe fc5b 	bl	8002278 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe fc4d 	bl	8002278 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e12e      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80039f0:	f7ff fba9 	bl	8003146 <LL_RCC_LSE_IsReady>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ef      	beq.n	80039da <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b81      	cmp	r3, #129	@ 0x81
 8003a00:	d003      	beq.n	8003a0a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b85      	cmp	r3, #133	@ 0x85
 8003a08:	d121      	bne.n	8003a4e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fe fc35 	bl	8002278 <HAL_GetTick>
 8003a0e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fe fc27 	bl	8002278 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e108      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ec      	beq.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003a4c:	e060      	b.n	8003b10 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe fc13 	bl	8002278 <HAL_GetTick>
 8003a52:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fe fc05 	bl	8002278 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0e6      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ec      	bne.n	8003a6a <HAL_RCC_OscConfig+0x50e>
 8003a90:	e03e      	b.n	8003b10 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a92:	f7fe fbf1 	bl	8002278 <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fe fbe3 	bl	8002278 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0c4      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ec      	bne.n	8003aae <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fbd0 	bl	8002278 <HAL_GetTick>
 8003ad8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fe fbc2 	bl	8002278 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0a3      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b06:	f7ff fb1e 	bl	8003146 <LL_RCC_LSE_IsReady>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ef      	bne.n	8003af0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8099 	beq.w	8003c4c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d06c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d14b      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b28:	f7ff fc74 	bl	8003414 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fba4 	bl	8002278 <HAL_GetTick>
 8003b30:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe fba0 	bl	8002278 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b0a      	cmp	r3, #10
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e083      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003b46:	f7ff fc73 	bl	8003430 <LL_RCC_PLL_IsReady>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f1      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	4b40      	ldr	r3, [pc, #256]	@ (8003c58 <HAL_RCC_OscConfig+0x6fc>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b62:	4311      	orrs	r1, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b68:	0212      	lsls	r2, r2, #8
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b76:	4311      	orrs	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b86:	f7ff fc37 	bl	80033f8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fe fb6d 	bl	8002278 <HAL_GetTick>
 8003b9e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba2:	f7fe fb69 	bl	8002278 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b0a      	cmp	r3, #10
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e04c      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003bb4:	f7ff fc3c 	bl	8003430 <LL_RCC_PLL_IsReady>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f1      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x646>
 8003bbe:	e045      	b.n	8003c4c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	f7ff fc28 	bl	8003414 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fb58 	bl	8002278 <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe fb54 	bl	8002278 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b0a      	cmp	r3, #10
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e037      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003bde:	f7ff fc27 	bl	8003430 <LL_RCC_PLL_IsReady>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f1      	bne.n	8003bcc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c5c <HAL_RCC_OscConfig+0x700>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60cb      	str	r3, [r1, #12]
 8003bf8:	e028      	b.n	8003c4c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e023      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f003 0203 	and.w	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d115      	bne.n	8003c48 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d10e      	bne.n	8003c48 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d106      	bne.n	8003c48 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	11c1808c 	.word	0x11c1808c
 8003c5c:	eefefffc 	.word	0xeefefffc

08003c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e12c      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c74:	4b98      	ldr	r3, [pc, #608]	@ (8003ed8 <HAL_RCC_ClockConfig+0x278>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d91b      	bls.n	8003cba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b95      	ldr	r3, [pc, #596]	@ (8003ed8 <HAL_RCC_ClockConfig+0x278>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 0207 	bic.w	r2, r3, #7
 8003c8a:	4993      	ldr	r1, [pc, #588]	@ (8003ed8 <HAL_RCC_ClockConfig+0x278>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c92:	f7fe faf1 	bl	8002278 <HAL_GetTick>
 8003c96:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c9a:	f7fe faed 	bl	8002278 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e110      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cac:	4b8a      	ldr	r3, [pc, #552]	@ (8003ed8 <HAL_RCC_ClockConfig+0x278>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d1ef      	bne.n	8003c9a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fb02 	bl	80032d4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003cd0:	f7fe fad2 	bl	8002278 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003cd8:	f7fe face 	bl	8002278 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0f1      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003cea:	f7ff fbdf 	bl	80034ac <LL_RCC_IsActiveFlag_HPRE>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f1      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d016      	beq.n	8003d2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff faf8 	bl	80032fa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d0a:	f7fe fab5 	bl	8002278 <HAL_GetTick>
 8003d0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d12:	f7fe fab1 	bl	8002278 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e0d4      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003d24:	f7ff fbd3 	bl	80034ce <LL_RCC_IsActiveFlag_C2HPRE>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f1      	beq.n	8003d12 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff faf0 	bl	8003324 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d44:	f7fe fa98 	bl	8002278 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d4c:	f7fe fa94 	bl	8002278 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e0b7      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d5e:	f7ff fbc8 	bl	80034f2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f1      	beq.n	8003d4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d016      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fae9 	bl	8003350 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d7e:	f7fe fa7b 	bl	8002278 <HAL_GetTick>
 8003d82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d86:	f7fe fa77 	bl	8002278 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e09a      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d98:	f7ff fbbd 	bl	8003516 <LL_RCC_IsActiveFlag_PPRE1>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f1      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d017      	beq.n	8003dde <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fade 	bl	8003376 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003dba:	f7fe fa5d 	bl	8002278 <HAL_GetTick>
 8003dbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003dc2:	f7fe fa59 	bl	8002278 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e07c      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003dd4:	f7ff fbb0 	bl	8003538 <LL_RCC_IsActiveFlag_PPRE2>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f1      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d043      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003df2:	f7ff f956 	bl	80030a2 <LL_RCC_HSE_IsReady>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d11e      	bne.n	8003e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e066      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003e08:	f7ff fb12 	bl	8003430 <LL_RCC_PLL_IsReady>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d113      	bne.n	8003e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e05b      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003e1e:	f7ff f9f0 	bl	8003202 <LL_RCC_MSI_IsReady>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d108      	bne.n	8003e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e050      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003e2c:	f7ff f966 	bl	80030fc <LL_RCC_HSI_IsReady>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e049      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fa2a 	bl	8003298 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fe fa18 	bl	8002278 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fe fa14 	bl	8002278 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e035      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	f7ff fa2c 	bl	80032be <LL_RCC_GetSysClkSource>
 8003e66:	4602      	mov	r2, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d1ec      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e72:	4b19      	ldr	r3, [pc, #100]	@ (8003ed8 <HAL_RCC_ClockConfig+0x278>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d21b      	bcs.n	8003eb8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e80:	4b15      	ldr	r3, [pc, #84]	@ (8003ed8 <HAL_RCC_ClockConfig+0x278>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 0207 	bic.w	r2, r3, #7
 8003e88:	4913      	ldr	r1, [pc, #76]	@ (8003ed8 <HAL_RCC_ClockConfig+0x278>)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e90:	f7fe f9f2 	bl	8002278 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e98:	f7fe f9ee 	bl	8002278 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e011      	b.n	8003ece <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <HAL_RCC_ClockConfig+0x278>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d1ef      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003eb8:	f000 f8b4 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4a07      	ldr	r2, [pc, #28]	@ (8003edc <HAL_RCC_ClockConfig+0x27c>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003ec2:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <HAL_RCC_ClockConfig+0x280>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe f98a 	bl	80021e0 <HAL_InitTick>
 8003ecc:	4603      	mov	r3, r0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	58004000 	.word	0x58004000
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	20000010 	.word	0x20000010

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef2:	f7ff f9e4 	bl	80032be <LL_RCC_GetSysClkSource>
 8003ef6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef8:	f7ff facd 	bl	8003496 <LL_RCC_PLL_GetMainSource>
 8003efc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x2c>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d139      	bne.n	8003f7e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d136      	bne.n	8003f7e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003f10:	f7ff f987 	bl	8003222 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <HAL_RCC_GetSysClockFreq+0x62>
 8003f1a:	f7ff f982 	bl	8003222 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x4e>
 8003f24:	f7ff f98d 	bl	8003242 <LL_RCC_MSI_GetRange>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	e005      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0x5a>
 8003f32:	f7ff f991 	bl	8003258 <LL_RCC_MSI_GetRangeAfterStandby>
 8003f36:	4603      	mov	r3, r0
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	4a36      	ldr	r2, [pc, #216]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	e014      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x8c>
 8003f46:	f7ff f96c 	bl	8003222 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_GetSysClockFreq+0x7a>
 8003f50:	f7ff f977 	bl	8003242 <LL_RCC_MSI_GetRange>
 8003f54:	4603      	mov	r3, r0
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	e005      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0x86>
 8003f5e:	f7ff f97b 	bl	8003258 <LL_RCC_MSI_GetRangeAfterStandby>
 8003f62:	4603      	mov	r3, r0
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f70:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d115      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f7c:	e012      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d102      	bne.n	8003f8a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f84:	4b25      	ldr	r3, [pc, #148]	@ (800401c <HAL_RCC_GetSysClockFreq+0x138>)
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e00c      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d109      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f90:	f7ff f85a 	bl	8003048 <LL_RCC_HSE_IsEnabledDiv2>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d102      	bne.n	8003fa0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003f9a:	4b20      	ldr	r3, [pc, #128]	@ (800401c <HAL_RCC_GetSysClockFreq+0x138>)
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e001      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fa2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa4:	f7ff f98b 	bl	80032be <LL_RCC_GetSysClkSource>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d12f      	bne.n	800400e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003fae:	f7ff fa72 	bl	8003496 <LL_RCC_PLL_GetMainSource>
 8003fb2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCC_GetSysClockFreq+0xde>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d003      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0xe4>
 8003fc0:	e00d      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003fc2:	4b16      	ldr	r3, [pc, #88]	@ (800401c <HAL_RCC_GetSysClockFreq+0x138>)
 8003fc4:	60fb      	str	r3, [r7, #12]
        break;
 8003fc6:	e00d      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003fc8:	f7ff f83e 	bl	8003048 <LL_RCC_HSE_IsEnabledDiv2>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d102      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003fd2:	4b12      	ldr	r3, [pc, #72]	@ (800401c <HAL_RCC_GetSysClockFreq+0x138>)
 8003fd4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003fd6:	e005      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fda:	60fb      	str	r3, [r7, #12]
        break;
 8003fdc:	e002      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	60fb      	str	r3, [r7, #12]
        break;
 8003fe2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003fe4:	f7ff fa35 	bl	8003452 <LL_RCC_PLL_GetN>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	fb03 f402 	mul.w	r4, r3, r2
 8003ff0:	f7ff fa46 	bl	8003480 <LL_RCC_PLL_GetDivider>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ffe:	f7ff fa34 	bl	800346a <LL_RCC_PLL_GetR>
 8004002:	4603      	mov	r3, r0
 8004004:	0f5b      	lsrs	r3, r3, #29
 8004006:	3301      	adds	r3, #1
 8004008:	fbb4 f3f3 	udiv	r3, r4, r3
 800400c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800400e:	697b      	ldr	r3, [r7, #20]
}
 8004010:	4618      	mov	r0, r3
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bd90      	pop	{r4, r7, pc}
 8004018:	0800c2a0 	.word	0x0800c2a0
 800401c:	00f42400 	.word	0x00f42400
 8004020:	01e84800 	.word	0x01e84800

08004024 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004024:	b598      	push	{r3, r4, r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004028:	f7ff ff5c 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 800402c:	4604      	mov	r4, r0
 800402e:	f7ff f9b5 	bl	800339c <LL_RCC_GetAHBPrescaler>
 8004032:	4603      	mov	r3, r0
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	4a03      	ldr	r2, [pc, #12]	@ (8004048 <HAL_RCC_GetHCLKFreq+0x24>)
 800403c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004040:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd98      	pop	{r3, r4, r7, pc}
 8004048:	0800c240 	.word	0x0800c240

0800404c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800404c:	b598      	push	{r3, r4, r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004050:	f7ff ffe8 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 8004054:	4604      	mov	r4, r0
 8004056:	f7ff f9b9 	bl	80033cc <LL_RCC_GetAPB1Prescaler>
 800405a:	4603      	mov	r3, r0
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	4a03      	ldr	r2, [pc, #12]	@ (800406c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004064:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd98      	pop	{r3, r4, r7, pc}
 800406c:	0800c280 	.word	0x0800c280

08004070 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004070:	b598      	push	{r3, r4, r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004074:	f7ff ffd6 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 8004078:	4604      	mov	r4, r0
 800407a:	f7ff f9b2 	bl	80033e2 <LL_RCC_GetAPB2Prescaler>
 800407e:	4603      	mov	r3, r0
 8004080:	0adb      	lsrs	r3, r3, #11
 8004082:	4a03      	ldr	r2, [pc, #12]	@ (8004090 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004088:	fa24 f303 	lsr.w	r3, r4, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd98      	pop	{r3, r4, r7, pc}
 8004090:	0800c280 	.word	0x0800c280

08004094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	4a10      	ldr	r2, [pc, #64]	@ (80040e8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80040a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040aa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80040ac:	f7ff f981 	bl	80033b2 <LL_RCC_GetAHB3Prescaler>
 80040b0:	4603      	mov	r3, r0
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	4a0c      	ldr	r2, [pc, #48]	@ (80040ec <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80040ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4a09      	ldr	r2, [pc, #36]	@ (80040f0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0c9c      	lsrs	r4, r3, #18
 80040d0:	f7fe ff3c 	bl	8002f4c <HAL_PWREx_GetVoltageRange>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4619      	mov	r1, r3
 80040d8:	4620      	mov	r0, r4
 80040da:	f000 f80b 	bl	80040f4 <RCC_SetFlashLatency>
 80040de:	4603      	mov	r3, r0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd90      	pop	{r4, r7, pc}
 80040e8:	0800c2a0 	.word	0x0800c2a0
 80040ec:	0800c240 	.word	0x0800c240
 80040f0:	431bde83 	.word	0x431bde83

080040f4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08e      	sub	sp, #56	@ 0x38
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80040fe:	4a3a      	ldr	r2, [pc, #232]	@ (80041e8 <RCC_SetFlashLatency+0xf4>)
 8004100:	f107 0320 	add.w	r3, r7, #32
 8004104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004108:	6018      	str	r0, [r3, #0]
 800410a:	3304      	adds	r3, #4
 800410c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800410e:	4a37      	ldr	r2, [pc, #220]	@ (80041ec <RCC_SetFlashLatency+0xf8>)
 8004110:	f107 0318 	add.w	r3, r7, #24
 8004114:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004118:	6018      	str	r0, [r3, #0]
 800411a:	3304      	adds	r3, #4
 800411c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800411e:	4a34      	ldr	r2, [pc, #208]	@ (80041f0 <RCC_SetFlashLatency+0xfc>)
 8004120:	f107 030c 	add.w	r3, r7, #12
 8004124:	ca07      	ldmia	r2, {r0, r1, r2}
 8004126:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800412a:	2300      	movs	r3, #0
 800412c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004134:	d11b      	bne.n	800416e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004136:	2300      	movs	r3, #0
 8004138:	633b      	str	r3, [r7, #48]	@ 0x30
 800413a:	e014      	b.n	8004166 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	3338      	adds	r3, #56	@ 0x38
 8004142:	443b      	add	r3, r7
 8004144:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4293      	cmp	r3, r2
 800414e:	d807      	bhi.n	8004160 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	3338      	adds	r3, #56	@ 0x38
 8004156:	443b      	add	r3, r7
 8004158:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800415c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800415e:	e021      	b.n	80041a4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	3301      	adds	r3, #1
 8004164:	633b      	str	r3, [r7, #48]	@ 0x30
 8004166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004168:	2b02      	cmp	r3, #2
 800416a:	d9e7      	bls.n	800413c <RCC_SetFlashLatency+0x48>
 800416c:	e01a      	b.n	80041a4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800416e:	2300      	movs	r3, #0
 8004170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004172:	e014      	b.n	800419e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	3338      	adds	r3, #56	@ 0x38
 800417a:	443b      	add	r3, r7
 800417c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004180:	461a      	mov	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4293      	cmp	r3, r2
 8004186:	d807      	bhi.n	8004198 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	3338      	adds	r3, #56	@ 0x38
 800418e:	443b      	add	r3, r7
 8004190:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004194:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004196:	e005      	b.n	80041a4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419a:	3301      	adds	r3, #1
 800419c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800419e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d9e7      	bls.n	8004174 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041a4:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <RCC_SetFlashLatency+0x100>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 0207 	bic.w	r2, r3, #7
 80041ac:	4911      	ldr	r1, [pc, #68]	@ (80041f4 <RCC_SetFlashLatency+0x100>)
 80041ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041b4:	f7fe f860 	bl	8002278 <HAL_GetTick>
 80041b8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041ba:	e008      	b.n	80041ce <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80041bc:	f7fe f85c 	bl	8002278 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e007      	b.n	80041de <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041ce:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <RCC_SetFlashLatency+0x100>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1ef      	bne.n	80041bc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3738      	adds	r7, #56	@ 0x38
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	0800c224 	.word	0x0800c224
 80041ec:	0800c22c 	.word	0x0800c22c
 80041f0:	0800c234 	.word	0x0800c234
 80041f4:	58004000 	.word	0x58004000

080041f8 <LL_RCC_LSE_IsReady>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b02      	cmp	r3, #2
 800420a:	d101      	bne.n	8004210 <LL_RCC_LSE_IsReady+0x18>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <LL_RCC_LSE_IsReady+0x1a>
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <LL_RCC_SetUSARTClockSource>:
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004226:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	43db      	mvns	r3, r3
 8004230:	401a      	ands	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <LL_RCC_SetI2SClockSource>:
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800425e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <LL_RCC_SetLPUARTClockSource>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004284:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004288:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <LL_RCC_SetI2CClockSource>:
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80042a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80042b6:	43db      	mvns	r3, r3
 80042b8:	401a      	ands	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80042c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <LL_RCC_SetLPTIMClockSource>:
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	43db      	mvns	r3, r3
 80042ee:	401a      	ands	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <LL_RCC_SetRNGClockSource>:
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004318:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800431c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <LL_RCC_SetADCClockSource>:
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <LL_RCC_SetRTCClockSource>:
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004370:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <LL_RCC_GetRTCClockSource>:
{
 8004386:	b480      	push	{r7}
 8004388:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800438a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004396:	4618      	mov	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <LL_RCC_ForceBackupDomainReset>:
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <LL_RCC_ReleaseBackupDomainReset>:
{
 80043be:	b480      	push	{r7}
 80043c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80043d6:	bf00      	nop
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80043ec:	2300      	movs	r3, #0
 80043ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80043f0:	2300      	movs	r3, #0
 80043f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d058      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004400:	f7fe fd62 	bl	8002ec8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004404:	f7fd ff38 	bl	8002278 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800440a:	e009      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440c:	f7fd ff34 	bl	8002278 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d902      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	74fb      	strb	r3, [r7, #19]
        break;
 800441e:	e006      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004420:	4b7b      	ldr	r3, [pc, #492]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442c:	d1ee      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d13c      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004434:	f7ff ffa7 	bl	8004386 <LL_RCC_GetRTCClockSource>
 8004438:	4602      	mov	r2, r0
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	429a      	cmp	r2, r3
 8004440:	d00f      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004450:	f7ff ffa5 	bl	800439e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004454:	f7ff ffb3 	bl	80043be <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d014      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd ff04 	bl	8002278 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004472:	e00b      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004474:	f7fd ff00 	bl	8002278 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d902      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	74fb      	strb	r3, [r7, #19]
            break;
 800448a:	e004      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800448c:	f7ff feb4 	bl	80041f8 <LL_RCC_LSE_IsReady>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d1ee      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff5b 	bl	800435c <LL_RCC_SetRTCClockSource>
 80044a6:	e004      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	74bb      	strb	r3, [r7, #18]
 80044ac:	e001      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fea9 	bl	800421a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fe9e 	bl	800421a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d004      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fec0 	bl	8004274 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fee6 	bl	80042d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fedb 	bl	80042d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fed0 	bl	80042d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fea9 	bl	800429e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fe9e 	bl	800429e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fe93 	bl	800429e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d011      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fe5e 	bl	800424a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004596:	d107      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d010      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fea5 	bl	8004308 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d107      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d011      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fea3 	bl	8004332 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045f4:	d107      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004604:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004606:	7cbb      	ldrb	r3, [r7, #18]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	58000400 	.word	0x58000400

08004614 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800461c:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004624:	4904      	ldr	r1, [pc, #16]	@ (8004638 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4313      	orrs	r3, r2
 800462a:	608b      	str	r3, [r1, #8]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	58000400 	.word	0x58000400

0800463c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	4a04      	ldr	r2, [pc, #16]	@ (8004658 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	58000400 	.word	0x58000400

0800465c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	4a04      	ldr	r2, [pc, #16]	@ (8004678 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004668:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	58000400 	.word	0x58000400

0800467c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004680:	4b03      	ldr	r3, [pc, #12]	@ (8004690 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004686:	619a      	str	r2, [r3, #24]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	58000400 	.word	0x58000400

08004694 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004698:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d101      	bne.n	80046a8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	58000400 	.word	0x58000400

080046b8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80046bc:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d101      	bne.n	80046cc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	58000400 	.word	0x58000400

080046dc <LL_RCC_RF_DisableReset>:
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80046e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <LL_RCC_IsRFUnderReset>:
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800470c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004710:	d101      	bne.n	8004716 <LL_RCC_IsRFUnderReset+0x1a>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <LL_RCC_IsRFUnderReset+0x1c>
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004728:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <LL_EXTI_EnableIT_32_63+0x24>)
 800472a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800472e:	4905      	ldr	r1, [pc, #20]	@ (8004744 <LL_EXTI_EnableIT_32_63+0x24>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	58000800 	.word	0x58000800

08004748 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]
    return status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	e052      	b.n	8004804 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	799b      	ldrb	r3, [r3, #6]
 8004766:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004768:	7bbb      	ldrb	r3, [r7, #14]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_SUBGHZ_Init+0x2c>
 800476e:	7bbb      	ldrb	r3, [r7, #14]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d109      	bne.n	8004788 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd f8be 	bl	80018fc <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004780:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004784:	f7ff ffcc 	bl	8004720 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004788:	7bbb      	ldrb	r3, [r7, #14]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d126      	bne.n	80047dc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004794:	f7ff ffa2 	bl	80046dc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004798:	4b1c      	ldr	r3, [pc, #112]	@ (800480c <HAL_SUBGHZ_Init+0xc4>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	0cdb      	lsrs	r3, r3, #19
 80047a6:	2264      	movs	r2, #100	@ 0x64
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d105      	bne.n	80047c0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	609a      	str	r2, [r3, #8]
        break;
 80047be:	e007      	b.n	80047d0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80047c6:	f7ff ff99 	bl	80046fc <LL_RCC_IsRFUnderReset>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ee      	bne.n	80047ae <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047d0:	f7ff ff34 	bl	800463c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80047d4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80047d8:	f7ff ff1c 	bl	8004614 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80047dc:	f7ff ff4e 	bl	800467c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fabc 	bl	8004d68 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	719a      	strb	r2, [r3, #6]

  return status;
 8004802:	7bfb      	ldrb	r3, [r7, #15]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000000 	.word	0x20000000

08004810 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	461a      	mov	r2, r3
 800481c:	460b      	mov	r3, r1
 800481e:	817b      	strh	r3, [r7, #10]
 8004820:	4613      	mov	r3, r2
 8004822:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	799b      	ldrb	r3, [r3, #6]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d14a      	bne.n	80048c4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	795b      	ldrb	r3, [r3, #5]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004836:	2302      	movs	r3, #2
 8004838:	e045      	b.n	80048c6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2202      	movs	r2, #2
 8004844:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fb5c 	bl	8004f04 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800484c:	f7ff ff06 	bl	800465c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004850:	210d      	movs	r1, #13
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 faa8 	bl	8004da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004858:	897b      	ldrh	r3, [r7, #10]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	b29b      	uxth	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	4619      	mov	r1, r3
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 faa0 	bl	8004da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004868:	897b      	ldrh	r3, [r7, #10]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	4619      	mov	r1, r3
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fa9a 	bl	8004da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004874:	2300      	movs	r3, #0
 8004876:	82bb      	strh	r3, [r7, #20]
 8004878:	e00a      	b.n	8004890 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800487a:	8abb      	ldrh	r3, [r7, #20]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fa8f 	bl	8004da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800488a:	8abb      	ldrh	r3, [r7, #20]
 800488c:	3301      	adds	r3, #1
 800488e:	82bb      	strh	r3, [r7, #20]
 8004890:	8aba      	ldrh	r2, [r7, #20]
 8004892:	893b      	ldrh	r3, [r7, #8]
 8004894:	429a      	cmp	r2, r3
 8004896:	d3f0      	bcc.n	800487a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004898:	f7ff fed0 	bl	800463c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fb55 	bl	8004f4c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
 80048ae:	e001      	b.n	80048b4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	715a      	strb	r2, [r3, #5]

    return status;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	e000      	b.n	80048c6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b088      	sub	sp, #32
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	461a      	mov	r2, r3
 80048da:	460b      	mov	r3, r1
 80048dc:	817b      	strh	r3, [r7, #10]
 80048de:	4613      	mov	r3, r2
 80048e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	799b      	ldrb	r3, [r3, #6]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d14a      	bne.n	8004986 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	795b      	ldrb	r3, [r3, #5]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e045      	b.n	8004988 <HAL_SUBGHZ_ReadRegisters+0xba>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fafe 	bl	8004f04 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004908:	f7ff fea8 	bl	800465c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800490c:	211d      	movs	r1, #29
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fa4a 	bl	8004da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004914:	897b      	ldrh	r3, [r7, #10]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	b29b      	uxth	r3, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	4619      	mov	r1, r3
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fa42 	bl	8004da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004924:	897b      	ldrh	r3, [r7, #10]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	4619      	mov	r1, r3
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fa3c 	bl	8004da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004930:	2100      	movs	r1, #0
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fa38 	bl	8004da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004938:	2300      	movs	r3, #0
 800493a:	82fb      	strh	r3, [r7, #22]
 800493c:	e009      	b.n	8004952 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800493e:	69b9      	ldr	r1, [r7, #24]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fa87 	bl	8004e54 <SUBGHZSPI_Receive>
      pData++;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	3301      	adds	r3, #1
 800494a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800494c:	8afb      	ldrh	r3, [r7, #22]
 800494e:	3301      	adds	r3, #1
 8004950:	82fb      	strh	r3, [r7, #22]
 8004952:	8afa      	ldrh	r2, [r7, #22]
 8004954:	893b      	ldrh	r3, [r7, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	d3f1      	bcc.n	800493e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800495a:	f7ff fe6f 	bl	800463c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 faf4 	bl	8004f4c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e001      	b.n	8004976 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	715a      	strb	r2, [r3, #5]

    return status;
 8004982:	7ffb      	ldrb	r3, [r7, #31]
 8004984:	e000      	b.n	8004988 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
  }
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	461a      	mov	r2, r3
 800499c:	460b      	mov	r3, r1
 800499e:	72fb      	strb	r3, [r7, #11]
 80049a0:	4613      	mov	r3, r2
 80049a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	799b      	ldrb	r3, [r3, #6]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d14a      	bne.n	8004a44 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	795b      	ldrb	r3, [r3, #5]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e045      	b.n	8004a46 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fa9f 	bl	8004f04 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80049c6:	7afb      	ldrb	r3, [r7, #11]
 80049c8:	2b84      	cmp	r3, #132	@ 0x84
 80049ca:	d002      	beq.n	80049d2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80049cc:	7afb      	ldrb	r3, [r7, #11]
 80049ce:	2b94      	cmp	r3, #148	@ 0x94
 80049d0:	d103      	bne.n	80049da <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	711a      	strb	r2, [r3, #4]
 80049d8:	e002      	b.n	80049e0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049e0:	f7ff fe3c 	bl	800465c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80049e4:	7afb      	ldrb	r3, [r7, #11]
 80049e6:	4619      	mov	r1, r3
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f9dd 	bl	8004da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	82bb      	strh	r3, [r7, #20]
 80049f2:	e00a      	b.n	8004a0a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80049f4:	8abb      	ldrh	r3, [r7, #20]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	4619      	mov	r1, r3
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f9d2 	bl	8004da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004a04:	8abb      	ldrh	r3, [r7, #20]
 8004a06:	3301      	adds	r3, #1
 8004a08:	82bb      	strh	r3, [r7, #20]
 8004a0a:	8aba      	ldrh	r2, [r7, #20]
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3f0      	bcc.n	80049f4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a12:	f7ff fe13 	bl	800463c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	2b84      	cmp	r3, #132	@ 0x84
 8004a1a:	d002      	beq.n	8004a22 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fa95 	bl	8004f4c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
 8004a2e:	e001      	b.n	8004a34 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	715a      	strb	r2, [r3, #5]

    return status;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	e000      	b.n	8004a46 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b088      	sub	sp, #32
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	72fb      	strb	r3, [r7, #11]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	799b      	ldrb	r3, [r3, #6]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d13d      	bne.n	8004aec <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	795b      	ldrb	r3, [r3, #5]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e038      	b.n	8004aee <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fa3e 	bl	8004f04 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a88:	f7ff fde8 	bl	800465c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004a8c:	7afb      	ldrb	r3, [r7, #11]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f989 	bl	8004da8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a96:	2100      	movs	r1, #0
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f985 	bl	8004da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	82fb      	strh	r3, [r7, #22]
 8004aa2:	e009      	b.n	8004ab8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004aa4:	69b9      	ldr	r1, [r7, #24]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f9d4 	bl	8004e54 <SUBGHZSPI_Receive>
      pData++;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004ab2:	8afb      	ldrh	r3, [r7, #22]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	82fb      	strh	r3, [r7, #22]
 8004ab8:	8afa      	ldrh	r2, [r7, #22]
 8004aba:	893b      	ldrh	r3, [r7, #8]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d3f1      	bcc.n	8004aa4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004ac0:	f7ff fdbc 	bl	800463c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fa41 	bl	8004f4c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e001      	b.n	8004adc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	715a      	strb	r2, [r3, #5]

    return status;
 8004ae8:	7ffb      	ldrb	r3, [r7, #31]
 8004aea:	e000      	b.n	8004aee <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3720      	adds	r7, #32
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	461a      	mov	r2, r3
 8004b02:	460b      	mov	r3, r1
 8004b04:	72fb      	strb	r3, [r7, #11]
 8004b06:	4613      	mov	r3, r2
 8004b08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	799b      	ldrb	r3, [r3, #6]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d13e      	bne.n	8004b92 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	795b      	ldrb	r3, [r3, #5]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e039      	b.n	8004b94 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 f9ec 	bl	8004f04 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b2c:	f7ff fd96 	bl	800465c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004b30:	210e      	movs	r1, #14
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f938 	bl	8004da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004b38:	7afb      	ldrb	r3, [r7, #11]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f933 	bl	8004da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	82bb      	strh	r3, [r7, #20]
 8004b46:	e00a      	b.n	8004b5e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004b48:	8abb      	ldrh	r3, [r7, #20]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	4619      	mov	r1, r3
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f928 	bl	8004da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b58:	8abb      	ldrh	r3, [r7, #20]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	82bb      	strh	r3, [r7, #20]
 8004b5e:	8aba      	ldrh	r2, [r7, #20]
 8004b60:	893b      	ldrh	r3, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d3f0      	bcc.n	8004b48 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b66:	f7ff fd69 	bl	800463c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f9ee 	bl	8004f4c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	75fb      	strb	r3, [r7, #23]
 8004b7c:	e001      	b.n	8004b82 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	715a      	strb	r2, [r3, #5]

    return status;
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	e000      	b.n	8004b94 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	460b      	mov	r3, r1
 8004baa:	72fb      	strb	r3, [r7, #11]
 8004bac:	4613      	mov	r3, r2
 8004bae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	799b      	ldrb	r3, [r3, #6]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d141      	bne.n	8004c42 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	795b      	ldrb	r3, [r3, #5]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e03c      	b.n	8004c44 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f997 	bl	8004f04 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004bd6:	f7ff fd41 	bl	800465c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004bda:	211e      	movs	r1, #30
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f8e3 	bl	8004da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004be2:	7afb      	ldrb	r3, [r7, #11]
 8004be4:	4619      	mov	r1, r3
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f8de 	bl	8004da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004bec:	2100      	movs	r1, #0
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f8da 	bl	8004da8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	82fb      	strh	r3, [r7, #22]
 8004bf8:	e009      	b.n	8004c0e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004bfa:	69b9      	ldr	r1, [r7, #24]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f929 	bl	8004e54 <SUBGHZSPI_Receive>
      pData++;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	3301      	adds	r3, #1
 8004c06:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004c08:	8afb      	ldrh	r3, [r7, #22]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	82fb      	strh	r3, [r7, #22]
 8004c0e:	8afa      	ldrh	r2, [r7, #22]
 8004c10:	893b      	ldrh	r3, [r7, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d3f1      	bcc.n	8004bfa <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004c16:	f7ff fd11 	bl	800463c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f996 	bl	8004f4c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e001      	b.n	8004c32 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	715a      	strb	r2, [r3, #5]

    return status;
 8004c3e:	7ffb      	ldrb	r3, [r7, #31]
 8004c40:	e000      	b.n	8004c44 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
  }
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004c54:	2300      	movs	r3, #0
 8004c56:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004c58:	f107 020c 	add.w	r2, r7, #12
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	2112      	movs	r1, #18
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fef4 	bl	8004a4e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004c66:	7b3b      	ldrb	r3, [r7, #12]
 8004c68:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	b21a      	sxth	r2, r3
 8004c72:	7b7b      	ldrb	r3, [r7, #13]
 8004c74:	b21b      	sxth	r3, r3
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004c7c:	f107 020c 	add.w	r2, r7, #12
 8004c80:	2302      	movs	r3, #2
 8004c82:	2102      	movs	r1, #2
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fe83 	bl	8004990 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f002 fc7d 	bl	8007594 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004c9a:	89fb      	ldrh	r3, [r7, #14]
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	099b      	lsrs	r3, r3, #6
 8004caa:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f002 fc7c 	bl	80075b0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004cb8:	89fb      	ldrh	r3, [r7, #14]
 8004cba:	089b      	lsrs	r3, r3, #2
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f002 fccb 	bl	8007660 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004cca:	89fb      	ldrh	r3, [r7, #14]
 8004ccc:	08db      	lsrs	r3, r3, #3
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f002 fcd0 	bl	800767c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004cdc:	89fb      	ldrh	r3, [r7, #14]
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f002 fcd5 	bl	8007698 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004cee:	89fb      	ldrh	r3, [r7, #14]
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f002 fca2 	bl	8007644 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004d00:	89fb      	ldrh	r3, [r7, #14]
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f002 fc5d 	bl	80075cc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004d12:	89fb      	ldrh	r3, [r7, #14]
 8004d14:	09db      	lsrs	r3, r3, #7
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00e      	beq.n	8004d3c <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004d1e:	89fb      	ldrh	r3, [r7, #14]
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d004      	beq.n	8004d34 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f002 fc5b 	bl	80075e8 <HAL_SUBGHZ_CADStatusCallback>
 8004d32:	e003      	b.n	8004d3c <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004d34:	2100      	movs	r1, #0
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f002 fc56 	bl	80075e8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004d3c:	89fb      	ldrh	r3, [r7, #14]
 8004d3e:	0a5b      	lsrs	r3, r3, #9
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f002 fc6b 	bl	8007624 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004d4e:	89fb      	ldrh	r3, [r7, #14]
 8004d50:	0b9b      	lsrs	r3, r3, #14
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f002 fcaa 	bl	80076b4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d70:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <SUBGHZSPI_Init+0x3c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0b      	ldr	r2, [pc, #44]	@ (8004da4 <SUBGHZSPI_Init+0x3c>)
 8004d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d7a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004d7c:	4a09      	ldr	r2, [pc, #36]	@ (8004da4 <SUBGHZSPI_Init+0x3c>)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004d84:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004d86:	4b07      	ldr	r3, [pc, #28]	@ (8004da4 <SUBGHZSPI_Init+0x3c>)
 8004d88:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004d8c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d8e:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <SUBGHZSPI_Init+0x3c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a04      	ldr	r2, [pc, #16]	@ (8004da4 <SUBGHZSPI_Init+0x3c>)
 8004d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d98:	6013      	str	r3, [r2, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	58010000 	.word	0x58010000

08004da8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004db8:	4b23      	ldr	r3, [pc, #140]	@ (8004e48 <SUBGHZSPI_Transmit+0xa0>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	0cdb      	lsrs	r3, r3, #19
 8004dc6:	2264      	movs	r2, #100	@ 0x64
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	609a      	str	r2, [r3, #8]
      break;
 8004dde:	e008      	b.n	8004df2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004de6:	4b19      	ldr	r3, [pc, #100]	@ (8004e4c <SUBGHZSPI_Transmit+0xa4>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d1ed      	bne.n	8004dce <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004df2:	4b17      	ldr	r3, [pc, #92]	@ (8004e50 <SUBGHZSPI_Transmit+0xa8>)
 8004df4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004dfc:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <SUBGHZSPI_Transmit+0xa0>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	0cdb      	lsrs	r3, r3, #19
 8004e0a:	2264      	movs	r2, #100	@ 0x64
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d105      	bne.n	8004e24 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	609a      	str	r2, [r3, #8]
      break;
 8004e22:	e008      	b.n	8004e36 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004e2a:	4b08      	ldr	r3, [pc, #32]	@ (8004e4c <SUBGHZSPI_Transmit+0xa4>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d1ed      	bne.n	8004e12 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004e36:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <SUBGHZSPI_Transmit+0xa4>)
 8004e38:	68db      	ldr	r3, [r3, #12]

  return status;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	58010000 	.word	0x58010000
 8004e50:	5801000c 	.word	0x5801000c

08004e54 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e62:	4b25      	ldr	r3, [pc, #148]	@ (8004ef8 <SUBGHZSPI_Receive+0xa4>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	0cdb      	lsrs	r3, r3, #19
 8004e70:	2264      	movs	r2, #100	@ 0x64
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d105      	bne.n	8004e8a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	609a      	str	r2, [r3, #8]
      break;
 8004e88:	e008      	b.n	8004e9c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004e90:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <SUBGHZSPI_Receive+0xa8>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d1ed      	bne.n	8004e78 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004e9c:	4b18      	ldr	r3, [pc, #96]	@ (8004f00 <SUBGHZSPI_Receive+0xac>)
 8004e9e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	22ff      	movs	r2, #255	@ 0xff
 8004ea4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004ea6:	4b14      	ldr	r3, [pc, #80]	@ (8004ef8 <SUBGHZSPI_Receive+0xa4>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	0cdb      	lsrs	r3, r3, #19
 8004eb4:	2264      	movs	r2, #100	@ 0x64
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	609a      	str	r2, [r3, #8]
      break;
 8004ecc:	e008      	b.n	8004ee0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004ed4:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <SUBGHZSPI_Receive+0xa8>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d1ed      	bne.n	8004ebc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004ee0:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <SUBGHZSPI_Receive+0xa8>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	701a      	strb	r2, [r3, #0]

  return status;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	58010000 	.word	0x58010000
 8004f00:	5801000c 	.word	0x5801000c

08004f04 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	791b      	ldrb	r3, [r3, #4]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d111      	bne.n	8004f38 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	@ (8004f48 <SUBGHZ_CheckDeviceReady+0x44>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004f24:	f7ff fb9a 	bl	800465c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f9      	bne.n	8004f28 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004f34:	f7ff fb82 	bl	800463c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f807 	bl	8004f4c <SUBGHZ_WaitOnBusy>
 8004f3e:	4603      	mov	r3, r0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000000 	.word	0x20000000

08004f4c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004f58:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <SUBGHZ_WaitOnBusy+0x58>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	0d1b      	lsrs	r3, r3, #20
 8004f66:	2264      	movs	r2, #100	@ 0x64
 8004f68:	fb02 f303 	mul.w	r3, r2, r3
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004f6e:	f7ff fba3 	bl	80046b8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004f72:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d105      	bne.n	8004f86 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	609a      	str	r2, [r3, #8]
      break;
 8004f84:	e009      	b.n	8004f9a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004f8c:	f7ff fb82 	bl	8004694 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d0e9      	beq.n	8004f6e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000000 	.word	0x20000000

08004fa8 <LL_RCC_GetUSARTClockSource>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	401a      	ands	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	041b      	lsls	r3, r3, #16
 8004fc0:	4313      	orrs	r3, r2
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <LL_RCC_GetLPUARTClockSource>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4013      	ands	r3, r2
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e042      	b.n	8005082 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc fc88 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2224      	movs	r2, #36	@ 0x24
 8005018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fec3 	bl	8005dc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fc4c 	bl	80058d8 <UART_SetConfig>
 8005040:	4603      	mov	r3, r0
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e01b      	b.n	8005082 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005058:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005068:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 ff41 	bl	8005f02 <UART_CheckIdleState>
 8005080:	4603      	mov	r3, r0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b08a      	sub	sp, #40	@ 0x28
 800508e:	af02      	add	r7, sp, #8
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	603b      	str	r3, [r7, #0]
 8005096:	4613      	mov	r3, r2
 8005098:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d173      	bne.n	800518c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_UART_Transmit+0x26>
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e06c      	b.n	800518e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2221      	movs	r2, #33	@ 0x21
 80050c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050c4:	f7fd f8d8 	bl	8002278 <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	88fa      	ldrh	r2, [r7, #6]
 80050ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	88fa      	ldrh	r2, [r7, #6]
 80050d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e2:	d108      	bne.n	80050f6 <HAL_UART_Transmit+0x6c>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	e003      	b.n	80050fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050fe:	e02c      	b.n	800515a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2200      	movs	r2, #0
 8005108:	2180      	movs	r1, #128	@ 0x80
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 ff47 	bl	8005f9e <UART_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e039      	b.n	800518e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800512e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	3302      	adds	r3, #2
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e007      	b.n	8005148 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	781a      	ldrb	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3301      	adds	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1cc      	bne.n	8005100 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2200      	movs	r2, #0
 800516e:	2140      	movs	r1, #64	@ 0x40
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 ff14 	bl	8005f9e <UART_WaitOnFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e006      	b.n	800518e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	e000      	b.n	800518e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800518c:	2302      	movs	r3, #2
  }
}
 800518e:	4618      	mov	r0, r3
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	@ 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d137      	bne.n	8005220 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_UART_Receive_DMA+0x24>
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e030      	b.n	8005222 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a18      	ldr	r2, [pc, #96]	@ (800522c <HAL_UART_Receive_DMA+0x94>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d01f      	beq.n	8005210 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d018      	beq.n	8005210 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	613b      	str	r3, [r7, #16]
   return(result);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	69f9      	ldr	r1, [r7, #28]
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	61bb      	str	r3, [r7, #24]
   return(result);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	461a      	mov	r2, r3
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 ff90 	bl	800613c <UART_Start_Receive_DMA>
 800521c:	4603      	mov	r3, r0
 800521e:	e000      	b.n	8005222 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3728      	adds	r7, #40	@ 0x28
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40008000 	.word	0x40008000

08005230 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b0ba      	sub	sp, #232	@ 0xe8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005256:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800525a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800525e:	4013      	ands	r3, r2
 8005260:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005264:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11b      	bne.n	80052a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800526c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d015      	beq.n	80052a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 82e3 	beq.w	8005860 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
      }
      return;
 80052a2:	e2dd      	b.n	8005860 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8123 	beq.w	80054f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80052b2:	4b8d      	ldr	r3, [pc, #564]	@ (80054e8 <HAL_UART_IRQHandler+0x2b8>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052be:	4b8b      	ldr	r3, [pc, #556]	@ (80054ec <HAL_UART_IRQHandler+0x2bc>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8116 	beq.w	80054f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d011      	beq.n	80052f8 <HAL_UART_IRQHandler+0xc8>
 80052d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00b      	beq.n	80052f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ee:	f043 0201 	orr.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d011      	beq.n	8005328 <HAL_UART_IRQHandler+0xf8>
 8005304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2202      	movs	r2, #2
 8005316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531e:	f043 0204 	orr.w	r2, r3, #4
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d011      	beq.n	8005358 <HAL_UART_IRQHandler+0x128>
 8005334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2204      	movs	r2, #4
 8005346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534e:	f043 0202 	orr.w	r2, r3, #2
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d017      	beq.n	8005394 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005370:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005374:	4b5c      	ldr	r3, [pc, #368]	@ (80054e8 <HAL_UART_IRQHandler+0x2b8>)
 8005376:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2208      	movs	r2, #8
 8005382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538a:	f043 0208 	orr.w	r2, r3, #8
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800539c:	2b00      	cmp	r3, #0
 800539e:	d012      	beq.n	80053c6 <HAL_UART_IRQHandler+0x196>
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053bc:	f043 0220 	orr.w	r2, r3, #32
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8249 	beq.w	8005864 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d013      	beq.n	8005406 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541a:	2b40      	cmp	r3, #64	@ 0x40
 800541c:	d005      	beq.n	800542a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800541e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005422:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005426:	2b00      	cmp	r3, #0
 8005428:	d054      	beq.n	80054d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 ff6c 	bl	8006308 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b40      	cmp	r3, #64	@ 0x40
 800543c:	d146      	bne.n	80054cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3308      	adds	r3, #8
 8005444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800545c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3308      	adds	r3, #8
 8005466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800546a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800546e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1d9      	bne.n	800543e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d017      	beq.n	80054c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800549a:	4a15      	ldr	r2, [pc, #84]	@ (80054f0 <HAL_UART_IRQHandler+0x2c0>)
 800549c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fd f981 	bl	80027ac <HAL_DMA_Abort_IT>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d019      	beq.n	80054e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80054be:	4610      	mov	r0, r2
 80054c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c2:	e00f      	b.n	80054e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f9f2 	bl	80058ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ca:	e00b      	b.n	80054e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f9ee 	bl	80058ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d2:	e007      	b.n	80054e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f9ea 	bl	80058ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80054e2:	e1bf      	b.n	8005864 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	bf00      	nop
    return;
 80054e6:	e1bd      	b.n	8005864 <HAL_UART_IRQHandler+0x634>
 80054e8:	10000001 	.word	0x10000001
 80054ec:	04000120 	.word	0x04000120
 80054f0:	080065bd 	.word	0x080065bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	f040 8153 	bne.w	80057a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 814c 	beq.w	80057a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800550c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8145 	beq.w	80057a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2210      	movs	r2, #16
 8005520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	f040 80bb 	bne.w	80056a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005540:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 818f 	beq.w	8005868 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005550:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005554:	429a      	cmp	r2, r3
 8005556:	f080 8187 	bcs.w	8005868 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005560:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	f040 8087 	bne.w	8005686 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800558c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1da      	bne.n	8005578 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3308      	adds	r3, #8
 80055c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3308      	adds	r3, #8
 80055e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e1      	bne.n	80055c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3308      	adds	r3, #8
 8005604:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800560e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3308      	adds	r3, #8
 800561e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005624:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005628:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e3      	bne.n	80055fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005654:	f023 0310 	bic.w	r3, r3, #16
 8005658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005666:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005668:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800566c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e4      	bne.n	8005644 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005680:	4618      	mov	r0, r3
 8005682:	f7fd f835 	bl	80026f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005698:	b29b      	uxth	r3, r3
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	b29b      	uxth	r3, r3
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f90d 	bl	80058c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056a6:	e0df      	b.n	8005868 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80d1 	beq.w	800586c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80056ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 80cc 	beq.w	800586c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80056f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e4      	bne.n	80056d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3308      	adds	r3, #8
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	623b      	str	r3, [r7, #32]
   return(result);
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3308      	adds	r3, #8
 800572e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005732:	633a      	str	r2, [r7, #48]	@ 0x30
 8005734:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e1      	bne.n	800570a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	60fb      	str	r3, [r7, #12]
   return(result);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0310 	bic.w	r3, r3, #16
 800576e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	69b9      	ldr	r1, [r7, #24]
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	617b      	str	r3, [r7, #20]
   return(result);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e4      	bne.n	800575a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005796:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f88f 	bl	80058c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057a2:	e063      	b.n	800586c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00e      	beq.n	80057ce <HAL_UART_IRQHandler+0x59e>
 80057b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80057c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 ff39 	bl	800663e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057cc:	e051      	b.n	8005872 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d014      	beq.n	8005804 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80057da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80057e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03a      	beq.n	8005870 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
    }
    return;
 8005802:	e035      	b.n	8005870 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <HAL_UART_IRQHandler+0x5f4>
 8005810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fee3 	bl	80065e8 <UART_EndTransmit_IT>
    return;
 8005822:	e026      	b.n	8005872 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <HAL_UART_IRQHandler+0x614>
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005834:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 ff10 	bl	8006662 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005842:	e016      	b.n	8005872 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d010      	beq.n	8005872 <HAL_UART_IRQHandler+0x642>
 8005850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005854:	2b00      	cmp	r3, #0
 8005856:	da0c      	bge.n	8005872 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fef9 	bl	8006650 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800585e:	e008      	b.n	8005872 <HAL_UART_IRQHandler+0x642>
      return;
 8005860:	bf00      	nop
 8005862:	e006      	b.n	8005872 <HAL_UART_IRQHandler+0x642>
    return;
 8005864:	bf00      	nop
 8005866:	e004      	b.n	8005872 <HAL_UART_IRQHandler+0x642>
      return;
 8005868:	bf00      	nop
 800586a:	e002      	b.n	8005872 <HAL_UART_IRQHandler+0x642>
      return;
 800586c:	bf00      	nop
 800586e:	e000      	b.n	8005872 <HAL_UART_IRQHandler+0x642>
    return;
 8005870:	bf00      	nop
  }
}
 8005872:	37e8      	adds	r7, #232	@ 0xe8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr

080058ae <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr

080058c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr
	...

080058d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058dc:	b08c      	sub	sp, #48	@ 0x30
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b94      	ldr	r3, [pc, #592]	@ (8005b58 <UART_SetConfig+0x280>)
 8005908:	4013      	ands	r3, r2
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005910:	430b      	orrs	r3, r1
 8005912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a89      	ldr	r2, [pc, #548]	@ (8005b5c <UART_SetConfig+0x284>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005940:	4313      	orrs	r3, r2
 8005942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800594e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005958:	430b      	orrs	r3, r1
 800595a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	f023 010f 	bic.w	r1, r3, #15
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7a      	ldr	r2, [pc, #488]	@ (8005b60 <UART_SetConfig+0x288>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d127      	bne.n	80059cc <UART_SetConfig+0xf4>
 800597c:	2003      	movs	r0, #3
 800597e:	f7ff fb13 	bl	8004fa8 <LL_RCC_GetUSARTClockSource>
 8005982:	4603      	mov	r3, r0
 8005984:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005988:	2b03      	cmp	r3, #3
 800598a:	d81b      	bhi.n	80059c4 <UART_SetConfig+0xec>
 800598c:	a201      	add	r2, pc, #4	@ (adr r2, 8005994 <UART_SetConfig+0xbc>)
 800598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005992:	bf00      	nop
 8005994:	080059a5 	.word	0x080059a5
 8005998:	080059b5 	.word	0x080059b5
 800599c:	080059ad 	.word	0x080059ad
 80059a0:	080059bd 	.word	0x080059bd
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059aa:	e080      	b.n	8005aae <UART_SetConfig+0x1d6>
 80059ac:	2302      	movs	r3, #2
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b2:	e07c      	b.n	8005aae <UART_SetConfig+0x1d6>
 80059b4:	2304      	movs	r3, #4
 80059b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ba:	e078      	b.n	8005aae <UART_SetConfig+0x1d6>
 80059bc:	2308      	movs	r3, #8
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c2:	e074      	b.n	8005aae <UART_SetConfig+0x1d6>
 80059c4:	2310      	movs	r3, #16
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ca:	e070      	b.n	8005aae <UART_SetConfig+0x1d6>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a64      	ldr	r2, [pc, #400]	@ (8005b64 <UART_SetConfig+0x28c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d138      	bne.n	8005a48 <UART_SetConfig+0x170>
 80059d6:	200c      	movs	r0, #12
 80059d8:	f7ff fae6 	bl	8004fa8 <LL_RCC_GetUSARTClockSource>
 80059dc:	4603      	mov	r3, r0
 80059de:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80059e2:	2b0c      	cmp	r3, #12
 80059e4:	d82c      	bhi.n	8005a40 <UART_SetConfig+0x168>
 80059e6:	a201      	add	r2, pc, #4	@ (adr r2, 80059ec <UART_SetConfig+0x114>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a21 	.word	0x08005a21
 80059f0:	08005a41 	.word	0x08005a41
 80059f4:	08005a41 	.word	0x08005a41
 80059f8:	08005a41 	.word	0x08005a41
 80059fc:	08005a31 	.word	0x08005a31
 8005a00:	08005a41 	.word	0x08005a41
 8005a04:	08005a41 	.word	0x08005a41
 8005a08:	08005a41 	.word	0x08005a41
 8005a0c:	08005a29 	.word	0x08005a29
 8005a10:	08005a41 	.word	0x08005a41
 8005a14:	08005a41 	.word	0x08005a41
 8005a18:	08005a41 	.word	0x08005a41
 8005a1c:	08005a39 	.word	0x08005a39
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a26:	e042      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a2e:	e03e      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005a30:	2304      	movs	r3, #4
 8005a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a36:	e03a      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005a38:	2308      	movs	r3, #8
 8005a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3e:	e036      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005a40:	2310      	movs	r3, #16
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a46:	e032      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a43      	ldr	r2, [pc, #268]	@ (8005b5c <UART_SetConfig+0x284>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d12a      	bne.n	8005aa8 <UART_SetConfig+0x1d0>
 8005a52:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005a56:	f7ff fab9 	bl	8004fcc <LL_RCC_GetLPUARTClockSource>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a60:	d01a      	beq.n	8005a98 <UART_SetConfig+0x1c0>
 8005a62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a66:	d81b      	bhi.n	8005aa0 <UART_SetConfig+0x1c8>
 8005a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a6c:	d00c      	beq.n	8005a88 <UART_SetConfig+0x1b0>
 8005a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a72:	d815      	bhi.n	8005aa0 <UART_SetConfig+0x1c8>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <UART_SetConfig+0x1a8>
 8005a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a7c:	d008      	beq.n	8005a90 <UART_SetConfig+0x1b8>
 8005a7e:	e00f      	b.n	8005aa0 <UART_SetConfig+0x1c8>
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a86:	e012      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a8e:	e00e      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a96:	e00a      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a9e:	e006      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa6:	e002      	b.n	8005aae <UART_SetConfig+0x1d6>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b5c <UART_SetConfig+0x284>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	f040 80a4 	bne.w	8005c02 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005aba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d823      	bhi.n	8005b0a <UART_SetConfig+0x232>
 8005ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <UART_SetConfig+0x1f0>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005b0b 	.word	0x08005b0b
 8005ad0:	08005af5 	.word	0x08005af5
 8005ad4:	08005b0b 	.word	0x08005b0b
 8005ad8:	08005afb 	.word	0x08005afb
 8005adc:	08005b0b 	.word	0x08005b0b
 8005ae0:	08005b0b 	.word	0x08005b0b
 8005ae4:	08005b0b 	.word	0x08005b0b
 8005ae8:	08005b03 	.word	0x08005b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fe faae 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005af0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005af2:	e010      	b.n	8005b16 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af4:	4b1c      	ldr	r3, [pc, #112]	@ (8005b68 <UART_SetConfig+0x290>)
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005af8:	e00d      	b.n	8005b16 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afa:	f7fe f9f3 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8005afe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b00:	e009      	b.n	8005b16 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b08:	e005      	b.n	8005b16 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8137 	beq.w	8005d8c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	4a12      	ldr	r2, [pc, #72]	@ (8005b6c <UART_SetConfig+0x294>)
 8005b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d305      	bcc.n	8005b4e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d910      	bls.n	8005b70 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b54:	e11a      	b.n	8005d8c <UART_SetConfig+0x4b4>
 8005b56:	bf00      	nop
 8005b58:	cfff69f3 	.word	0xcfff69f3
 8005b5c:	40008000 	.word	0x40008000
 8005b60:	40013800 	.word	0x40013800
 8005b64:	40004400 	.word	0x40004400
 8005b68:	00f42400 	.word	0x00f42400
 8005b6c:	0800c2e8 	.word	0x0800c2e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	2200      	movs	r2, #0
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	60fa      	str	r2, [r7, #12]
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	4a8e      	ldr	r2, [pc, #568]	@ (8005db8 <UART_SetConfig+0x4e0>)
 8005b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2200      	movs	r2, #0
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b92:	f7fb f851 	bl	8000c38 <__aeabi_uldivmod>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	020b      	lsls	r3, r1, #8
 8005ba8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bac:	0202      	lsls	r2, r0, #8
 8005bae:	6979      	ldr	r1, [r7, #20]
 8005bb0:	6849      	ldr	r1, [r1, #4]
 8005bb2:	0849      	lsrs	r1, r1, #1
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	4605      	mov	r5, r0
 8005bba:	eb12 0804 	adds.w	r8, r2, r4
 8005bbe:	eb43 0905 	adc.w	r9, r3, r5
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	469a      	mov	sl, r3
 8005bca:	4693      	mov	fp, r2
 8005bcc:	4652      	mov	r2, sl
 8005bce:	465b      	mov	r3, fp
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	f7fb f830 	bl	8000c38 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4613      	mov	r3, r2
 8005bde:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005be6:	d308      	bcc.n	8005bfa <UART_SetConfig+0x322>
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bee:	d204      	bcs.n	8005bfa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	60da      	str	r2, [r3, #12]
 8005bf8:	e0c8      	b.n	8005d8c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c00:	e0c4      	b.n	8005d8c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c0a:	d167      	bne.n	8005cdc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005c0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d828      	bhi.n	8005c66 <UART_SetConfig+0x38e>
 8005c14:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x344>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c51 	.word	0x08005c51
 8005c28:	08005c67 	.word	0x08005c67
 8005c2c:	08005c57 	.word	0x08005c57
 8005c30:	08005c67 	.word	0x08005c67
 8005c34:	08005c67 	.word	0x08005c67
 8005c38:	08005c67 	.word	0x08005c67
 8005c3c:	08005c5f 	.word	0x08005c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe fa04 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005c44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c46:	e014      	b.n	8005c72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c48:	f7fe fa12 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8005c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c4e:	e010      	b.n	8005c72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c50:	4b5a      	ldr	r3, [pc, #360]	@ (8005dbc <UART_SetConfig+0x4e4>)
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c54:	e00d      	b.n	8005c72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c56:	f7fe f945 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8005c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c5c:	e009      	b.n	8005c72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c64:	e005      	b.n	8005c72 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8089 	beq.w	8005d8c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	4a4e      	ldr	r2, [pc, #312]	@ (8005db8 <UART_SetConfig+0x4e0>)
 8005c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c8c:	005a      	lsls	r2, r3, #1
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	441a      	add	r2, r3
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b0f      	cmp	r3, #15
 8005ca4:	d916      	bls.n	8005cd4 <UART_SetConfig+0x3fc>
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cac:	d212      	bcs.n	8005cd4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f023 030f 	bic.w	r3, r3, #15
 8005cb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	8bfb      	ldrh	r3, [r7, #30]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	8bfa      	ldrh	r2, [r7, #30]
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	e05b      	b.n	8005d8c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005cda:	e057      	b.n	8005d8c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d828      	bhi.n	8005d36 <UART_SetConfig+0x45e>
 8005ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cec <UART_SetConfig+0x414>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d21 	.word	0x08005d21
 8005cf8:	08005d37 	.word	0x08005d37
 8005cfc:	08005d27 	.word	0x08005d27
 8005d00:	08005d37 	.word	0x08005d37
 8005d04:	08005d37 	.word	0x08005d37
 8005d08:	08005d37 	.word	0x08005d37
 8005d0c:	08005d2f 	.word	0x08005d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d10:	f7fe f99c 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005d14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d16:	e014      	b.n	8005d42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d18:	f7fe f9aa 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8005d1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d1e:	e010      	b.n	8005d42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d20:	4b26      	ldr	r3, [pc, #152]	@ (8005dbc <UART_SetConfig+0x4e4>)
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d24:	e00d      	b.n	8005d42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d26:	f7fe f8dd 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8005d2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d2c:	e009      	b.n	8005d42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d34:	e005      	b.n	8005d42 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d40:	bf00      	nop
    }

    if (pclk != 0U)
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d021      	beq.n	8005d8c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005db8 <UART_SetConfig+0x4e0>)
 8005d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	441a      	add	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2b0f      	cmp	r3, #15
 8005d70:	d909      	bls.n	8005d86 <UART_SetConfig+0x4ae>
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d78:	d205      	bcs.n	8005d86 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
 8005d84:	e002      	b.n	8005d8c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2200      	movs	r2, #0
 8005da6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005da8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3730      	adds	r7, #48	@ 0x30
 8005db0:	46bd      	mov	sp, r7
 8005db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db6:	bf00      	nop
 8005db8:	0800c2e8 	.word	0x0800c2e8
 8005dbc:	00f42400 	.word	0x00f42400

08005dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ebe:	d10a      	bne.n	8005ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]
  }
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b086      	sub	sp, #24
 8005f06:	af02      	add	r7, sp, #8
 8005f08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f12:	f7fc f9b1 	bl	8002278 <HAL_GetTick>
 8005f16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d10e      	bne.n	8005f44 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f832 	bl	8005f9e <UART_WaitOnFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e028      	b.n	8005f96 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d10e      	bne.n	8005f70 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f81c 	bl	8005f9e <UART_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e012      	b.n	8005f96 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b09c      	sub	sp, #112	@ 0x70
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	603b      	str	r3, [r7, #0]
 8005faa:	4613      	mov	r3, r2
 8005fac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fae:	e0af      	b.n	8006110 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fb6:	f000 80ab 	beq.w	8006110 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fba:	f7fc f95d 	bl	8002278 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d302      	bcc.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d140      	bne.n	8006052 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fe0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005fe4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ff0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ff4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e6      	bne.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	663b      	str	r3, [r7, #96]	@ 0x60
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006022:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006024:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e5      	bne.n	8006002 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e06f      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d057      	beq.n	8006110 <UART_WaitOnFlagUntilTimeout+0x172>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b80      	cmp	r3, #128	@ 0x80
 8006064:	d054      	beq.n	8006110 <UART_WaitOnFlagUntilTimeout+0x172>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b40      	cmp	r3, #64	@ 0x40
 800606a:	d051      	beq.n	8006110 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800607a:	d149      	bne.n	8006110 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006084:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800609a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80060b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e6      	bne.n	8006086 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3308      	adds	r3, #8
 80060be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	613b      	str	r3, [r7, #16]
   return(result);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3308      	adds	r3, #8
 80060d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80060d8:	623a      	str	r2, [r7, #32]
 80060da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	69f9      	ldr	r1, [r7, #28]
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e5      	bne.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e010      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4013      	ands	r3, r2
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	bf0c      	ite	eq
 8006120:	2301      	moveq	r3, #1
 8006122:	2300      	movne	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	429a      	cmp	r2, r3
 800612c:	f43f af40 	beq.w	8005fb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3770      	adds	r7, #112	@ 0x70
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b096      	sub	sp, #88	@ 0x58
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2222      	movs	r2, #34	@ 0x22
 8006164:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800616e:	2b00      	cmp	r3, #0
 8006170:	d02d      	beq.n	80061ce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006178:	4a40      	ldr	r2, [pc, #256]	@ (800627c <UART_Start_Receive_DMA+0x140>)
 800617a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006182:	4a3f      	ldr	r2, [pc, #252]	@ (8006280 <UART_Start_Receive_DMA+0x144>)
 8006184:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800618c:	4a3d      	ldr	r2, [pc, #244]	@ (8006284 <UART_Start_Receive_DMA+0x148>)
 800618e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006196:	2200      	movs	r2, #0
 8006198:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3324      	adds	r3, #36	@ 0x24
 80061a6:	4619      	mov	r1, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ac:	461a      	mov	r2, r3
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	f7fc fa20 	bl	80025f4 <HAL_DMA_Start_IT>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2210      	movs	r2, #16
 80061be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e051      	b.n	8006272 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80061fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e6      	bne.n	80061d6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3308      	adds	r3, #8
 800620e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006228:	637a      	str	r2, [r7, #52]	@ 0x34
 800622a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800622e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e5      	bne.n	8006208 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3308      	adds	r3, #8
 8006242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	613b      	str	r3, [r7, #16]
   return(result);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3308      	adds	r3, #8
 800625a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800625c:	623a      	str	r2, [r7, #32]
 800625e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	e841 2300 	strex	r3, r2, [r1]
 8006268:	61bb      	str	r3, [r7, #24]
   return(result);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e5      	bne.n	800623c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3758      	adds	r7, #88	@ 0x58
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	080063d3 	.word	0x080063d3
 8006280:	080064ff 	.word	0x080064ff
 8006284:	0800653d 	.word	0x0800653d

08006288 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b08f      	sub	sp, #60	@ 0x3c
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	61fb      	str	r3, [r7, #28]
   return(result);
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e6      	bne.n	8006290 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80062d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e2:	61ba      	str	r2, [r7, #24]
 80062e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	6979      	ldr	r1, [r7, #20]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	613b      	str	r3, [r7, #16]
   return(result);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e5      	bne.n	80062c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80062fe:	bf00      	nop
 8006300:	373c      	adds	r7, #60	@ 0x3c
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b095      	sub	sp, #84	@ 0x54
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800632e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006330:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e6      	bne.n	8006310 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	61fb      	str	r3, [r7, #28]
   return(result);
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800636c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e3      	bne.n	8006342 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d118      	bne.n	80063b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f023 0310 	bic.w	r3, r3, #16
 8006396:	647b      	str	r3, [r7, #68]	@ 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6979      	ldr	r1, [r7, #20]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	613b      	str	r3, [r7, #16]
   return(result);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e6      	bne.n	8006382 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063c8:	bf00      	nop
 80063ca:	3754      	adds	r7, #84	@ 0x54
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr

080063d2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b09c      	sub	sp, #112	@ 0x70
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d171      	bne.n	80064d2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80063ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006406:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800640a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800640c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006414:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006416:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800641a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e6      	bne.n	80063f6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3308      	adds	r3, #8
 800642e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006448:	647a      	str	r2, [r7, #68]	@ 0x44
 800644a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800644e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e5      	bne.n	8006428 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	623b      	str	r3, [r7, #32]
   return(result);
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006472:	663b      	str	r3, [r7, #96]	@ 0x60
 8006474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800647c:	633a      	str	r2, [r7, #48]	@ 0x30
 800647e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800649a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d118      	bne.n	80064d2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 0310 	bic.w	r3, r3, #16
 80064b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	69b9      	ldr	r1, [r7, #24]
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	617b      	str	r3, [r7, #20]
   return(result);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e6      	bne.n	80064a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064d4:	2200      	movs	r2, #0
 80064d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d107      	bne.n	80064f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064e6:	4619      	mov	r1, r3
 80064e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064ea:	f7ff f9e9 	bl	80058c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064ee:	e002      	b.n	80064f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80064f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064f2:	f7ff f9ca 	bl	800588a <HAL_UART_RxCpltCallback>
}
 80064f6:	bf00      	nop
 80064f8:	3770      	adds	r7, #112	@ 0x70
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d109      	bne.n	800652e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	b29b      	uxth	r3, r3
 8006524:	4619      	mov	r1, r3
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff f9ca 	bl	80058c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800652c:	e002      	b.n	8006534 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff f9b4 	bl	800589c <HAL_UART_RxHalfCpltCallback>
}
 8006534:	bf00      	nop
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006550:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006558:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006564:	2b80      	cmp	r3, #128	@ 0x80
 8006566:	d109      	bne.n	800657c <UART_DMAError+0x40>
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b21      	cmp	r3, #33	@ 0x21
 800656c:	d106      	bne.n	800657c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2200      	movs	r2, #0
 8006572:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006576:	6978      	ldr	r0, [r7, #20]
 8006578:	f7ff fe86 	bl	8006288 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006586:	2b40      	cmp	r3, #64	@ 0x40
 8006588:	d109      	bne.n	800659e <UART_DMAError+0x62>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b22      	cmp	r3, #34	@ 0x22
 800658e:	d106      	bne.n	800659e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2200      	movs	r2, #0
 8006594:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006598:	6978      	ldr	r0, [r7, #20]
 800659a:	f7ff feb5 	bl	8006308 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a4:	f043 0210 	orr.w	r2, r3, #16
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065ae:	6978      	ldr	r0, [r7, #20]
 80065b0:	f7ff f97d 	bl	80058ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065b4:	bf00      	nop
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff f967 	bl	80058ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6979      	ldr	r1, [r7, #20]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	613b      	str	r3, [r7, #16]
   return(result);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e6      	bne.n	80065f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff f921 	bl	8005878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006636:	bf00      	nop
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr

08006650 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006682:	2b01      	cmp	r3, #1
 8006684:	d101      	bne.n	800668a <HAL_UARTEx_DisableFifoMode+0x16>
 8006686:	2302      	movs	r3, #2
 8006688:	e027      	b.n	80066da <HAL_UARTEx_DisableFifoMode+0x66>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2224      	movs	r2, #36	@ 0x24
 8006696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0201 	bic.w	r2, r2, #1
 80066b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80066b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e02d      	b.n	8006758 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2224      	movs	r2, #36	@ 0x24
 8006708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f84f 	bl	80067dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006774:	2302      	movs	r3, #2
 8006776:	e02d      	b.n	80067d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	@ 0x24
 8006784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0201 	bic.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f811 	bl	80067dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d108      	bne.n	80067fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067fc:	e031      	b.n	8006862 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067fe:	2308      	movs	r3, #8
 8006800:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006802:	2308      	movs	r3, #8
 8006804:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	0e5b      	lsrs	r3, r3, #25
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	0f5b      	lsrs	r3, r3, #29
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	7b3a      	ldrb	r2, [r7, #12]
 800682a:	4910      	ldr	r1, [pc, #64]	@ (800686c <UARTEx_SetNbDataToProcess+0x90>)
 800682c:	5c8a      	ldrb	r2, [r1, r2]
 800682e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006832:	7b3a      	ldrb	r2, [r7, #12]
 8006834:	490e      	ldr	r1, [pc, #56]	@ (8006870 <UARTEx_SetNbDataToProcess+0x94>)
 8006836:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006838:	fb93 f3f2 	sdiv	r3, r3, r2
 800683c:	b29a      	uxth	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	7b7a      	ldrb	r2, [r7, #13]
 8006848:	4908      	ldr	r1, [pc, #32]	@ (800686c <UARTEx_SetNbDataToProcess+0x90>)
 800684a:	5c8a      	ldrb	r2, [r1, r2]
 800684c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006850:	7b7a      	ldrb	r2, [r7, #13]
 8006852:	4907      	ldr	r1, [pc, #28]	@ (8006870 <UARTEx_SetNbDataToProcess+0x94>)
 8006854:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006856:	fb93 f3f2 	sdiv	r3, r3, r2
 800685a:	b29a      	uxth	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006862:	bf00      	nop
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr
 800686c:	0800c300 	.word	0x0800c300
 8006870:	0800c308 	.word	0x0800c308

08006874 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8006878:	f7fb fc2c 	bl	80020d4 <BSP_RADIO_Init>
 800687c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800687e:	4618      	mov	r0, r3
 8006880:	bd80      	pop	{r7, pc}

08006882 <RBI_GetTxConfig>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_GetTxConfig(void)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8006886:	f7fb fc63 	bl	8002150 <BSP_RADIO_GetTxConfig>
 800688a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}

08006890 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8006894:	f7fb fc63 	bl	800215e <BSP_RADIO_IsTCXO>
 8006898:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800689a:	4618      	mov	r0, r3
 800689c:	bd80      	pop	{r7, pc}

0800689e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80068a2:	f7fb fc63 	bl	800216c <BSP_RADIO_IsDCDC>
 80068a6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	bd80      	pop	{r7, pc}

080068ac <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fb fc5e 	bl	800217a <BSP_RADIO_GetRFOMaxPowerConfig>
 80068be:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80068d6:	4a1d      	ldr	r2, [pc, #116]	@ (800694c <SUBGRF_Init+0x84>)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80068dc:	f7fb f9f6 	bl	8001ccc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80068e0:	2002      	movs	r0, #2
 80068e2:	f000 fef7 	bl	80076d4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80068e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006950 <SUBGRF_Init+0x88>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80068ec:	2000      	movs	r0, #0
 80068ee:	f000 f8b9 	bl	8006a64 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80068f2:	f7ff ffcd 	bl	8006890 <RBI_IsTCXO>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d10e      	bne.n	800691a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80068fc:	2140      	movs	r1, #64	@ 0x40
 80068fe:	2001      	movs	r0, #1
 8006900:	f000 f9fe 	bl	8006d00 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006904:	2100      	movs	r1, #0
 8006906:	f640 1011 	movw	r0, #2321	@ 0x911
 800690a:	f000 fd3d 	bl	8007388 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800690e:	237f      	movs	r3, #127	@ 0x7f
 8006910:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006912:	7b38      	ldrb	r0, [r7, #12]
 8006914:	f000 f902 	bl	8006b1c <SUBGRF_Calibrate>
 8006918:	e009      	b.n	800692e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800691a:	2120      	movs	r1, #32
 800691c:	f640 1011 	movw	r0, #2321	@ 0x911
 8006920:	f000 fd32 	bl	8007388 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006924:	2120      	movs	r1, #32
 8006926:	f640 1012 	movw	r0, #2322	@ 0x912
 800692a:	f000 fd2d 	bl	8007388 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800692e:	210e      	movs	r1, #14
 8006930:	f640 101f 	movw	r0, #2335	@ 0x91f
 8006934:	f000 fd28 	bl	8007388 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8006938:	f7ff ff9c 	bl	8006874 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800693c:	4b05      	ldr	r3, [pc, #20]	@ (8006954 <SUBGRF_Init+0x8c>)
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000608 	.word	0x20000608
 8006950:	20000604 	.word	0x20000604
 8006954:	200005fc 	.word	0x200005fc

08006958 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	461a      	mov	r2, r3
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	2000      	movs	r0, #0
 800696c:	f000 fd56 	bl	800741c <SUBGRF_WriteBuffer>
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800698a:	f107 0317 	add.w	r3, r7, #23
 800698e:	4619      	mov	r1, r3
 8006990:	68b8      	ldr	r0, [r7, #8]
 8006992:	f000 fc7b 	bl	800728c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	79fa      	ldrb	r2, [r7, #7]
 800699c:	429a      	cmp	r2, r3
 800699e:	d201      	bcs.n	80069a4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e007      	b.n	80069b4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80069a4:	7df8      	ldrb	r0, [r7, #23]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	68f9      	ldr	r1, [r7, #12]
 80069ae:	f000 fd57 	bl	8007460 <SUBGRF_ReadBuffer>

    return 0;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	460b      	mov	r3, r1
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80069ca:	7afb      	ldrb	r3, [r7, #11]
 80069cc:	4619      	mov	r1, r3
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff ffc2 	bl	8006958 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f861 	bl	8006a9c <SUBGRF_SetTx>
}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	4603      	mov	r3, r0
 80069ea:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80069fc:	f000 fa04 	bl	8006e08 <SUBGRF_GetPacketType>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d108      	bne.n	8006a18 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006a06:	f107 030c 	add.w	r3, r7, #12
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8006a12:	f000 fce1 	bl	80073d8 <SUBGRF_WriteRegisters>
            break;
 8006a16:	e000      	b.n	8006a1a <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006a18:	bf00      	nop
    }
}
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	4603      	mov	r3, r0
 8006a2a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006a3c:	f000 f9e4 	bl	8006e08 <SUBGRF_GetPacketType>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d108      	bne.n	8006a58 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006a46:	f107 030c 	add.w	r3, r7, #12
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	f240 60be 	movw	r0, #1726	@ 0x6be
 8006a52:	f000 fcc1 	bl	80073d8 <SUBGRF_WriteRegisters>
            break;
 8006a56:	e000      	b.n	8006a5a <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006a58:	bf00      	nop
    }
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006a6e:	1dfb      	adds	r3, r7, #7
 8006a70:	2201      	movs	r2, #1
 8006a72:	4619      	mov	r1, r3
 8006a74:	2080      	movs	r0, #128	@ 0x80
 8006a76:	f000 fd15 	bl	80074a4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8006a80:	4b05      	ldr	r3, [pc, #20]	@ (8006a98 <SUBGRF_SetStandby+0x34>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8006a86:	e002      	b.n	8006a8e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8006a88:	4b03      	ldr	r3, [pc, #12]	@ (8006a98 <SUBGRF_SetStandby+0x34>)
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	701a      	strb	r2, [r3, #0]
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	200005fc 	.word	0x200005fc

08006a9c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad8 <SUBGRF_SetTx+0x3c>)
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	0a1b      	lsrs	r3, r3, #8
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006ac0:	f107 030c 	add.w	r3, r7, #12
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	2083      	movs	r0, #131	@ 0x83
 8006aca:	f000 fceb 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006ace:	bf00      	nop
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	200005fc 	.word	0x200005fc

08006adc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b18 <SUBGRF_SetRx+0x3c>)
 8006ae6:	2205      	movs	r2, #5
 8006ae8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	0a1b      	lsrs	r3, r3, #8
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006b00:	f107 030c 	add.w	r3, r7, #12
 8006b04:	2203      	movs	r2, #3
 8006b06:	4619      	mov	r1, r3
 8006b08:	2082      	movs	r0, #130	@ 0x82
 8006b0a:	f000 fccb 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	200005fc 	.word	0x200005fc

08006b1c <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006b24:	793b      	ldrb	r3, [r7, #4]
 8006b26:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	b25b      	sxtb	r3, r3
 8006b2e:	019b      	lsls	r3, r3, #6
 8006b30:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006b32:	793b      	ldrb	r3, [r7, #4]
 8006b34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b38:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006b3a:	b25b      	sxtb	r3, r3
 8006b3c:	015b      	lsls	r3, r3, #5
 8006b3e:	b25b      	sxtb	r3, r3
 8006b40:	4313      	orrs	r3, r2
 8006b42:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006b44:	793b      	ldrb	r3, [r7, #4]
 8006b46:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b4a:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006b4c:	b25b      	sxtb	r3, r3
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	b25b      	sxtb	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006b56:	793b      	ldrb	r3, [r7, #4]
 8006b58:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b5c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006b5e:	b25b      	sxtb	r3, r3
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	b25b      	sxtb	r3, r3
 8006b64:	4313      	orrs	r3, r2
 8006b66:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006b68:	793b      	ldrb	r3, [r7, #4]
 8006b6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b6e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006b70:	b25b      	sxtb	r3, r3
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	b25b      	sxtb	r3, r3
 8006b76:	4313      	orrs	r3, r2
 8006b78:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006b7a:	793b      	ldrb	r3, [r7, #4]
 8006b7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b80:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006b82:	b25b      	sxtb	r3, r3
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	b25b      	sxtb	r3, r3
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8006b8c:	793b      	ldrb	r3, [r7, #4]
 8006b8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006b9c:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8006b9e:	f107 030f 	add.w	r3, r7, #15
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	2089      	movs	r0, #137	@ 0x89
 8006ba8:	f000 fc7c 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8006c34 <SUBGRF_CalibrateImage+0x80>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d904      	bls.n	8006bce <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8006bc4:	23e1      	movs	r3, #225	@ 0xe1
 8006bc6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8006bc8:	23e9      	movs	r3, #233	@ 0xe9
 8006bca:	737b      	strb	r3, [r7, #13]
 8006bcc:	e027      	b.n	8006c1e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a19      	ldr	r2, [pc, #100]	@ (8006c38 <SUBGRF_CalibrateImage+0x84>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d904      	bls.n	8006be0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8006bd6:	23d7      	movs	r3, #215	@ 0xd7
 8006bd8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8006bda:	23db      	movs	r3, #219	@ 0xdb
 8006bdc:	737b      	strb	r3, [r7, #13]
 8006bde:	e01e      	b.n	8006c1e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a16      	ldr	r2, [pc, #88]	@ (8006c3c <SUBGRF_CalibrateImage+0x88>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d904      	bls.n	8006bf2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8006be8:	23c1      	movs	r3, #193	@ 0xc1
 8006bea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8006bec:	23c5      	movs	r3, #197	@ 0xc5
 8006bee:	737b      	strb	r3, [r7, #13]
 8006bf0:	e015      	b.n	8006c1e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a12      	ldr	r2, [pc, #72]	@ (8006c40 <SUBGRF_CalibrateImage+0x8c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d904      	bls.n	8006c04 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8006bfa:	2375      	movs	r3, #117	@ 0x75
 8006bfc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8006bfe:	2381      	movs	r3, #129	@ 0x81
 8006c00:	737b      	strb	r3, [r7, #13]
 8006c02:	e00c      	b.n	8006c1e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a0f      	ldr	r2, [pc, #60]	@ (8006c44 <SUBGRF_CalibrateImage+0x90>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d904      	bls.n	8006c16 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8006c0c:	236b      	movs	r3, #107	@ 0x6b
 8006c0e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8006c10:	236f      	movs	r3, #111	@ 0x6f
 8006c12:	737b      	strb	r3, [r7, #13]
 8006c14:	e003      	b.n	8006c1e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8006c16:	2329      	movs	r3, #41	@ 0x29
 8006c18:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8006c1a:	232b      	movs	r3, #43	@ 0x2b
 8006c1c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8006c1e:	f107 030c 	add.w	r3, r7, #12
 8006c22:	2202      	movs	r2, #2
 8006c24:	4619      	mov	r1, r3
 8006c26:	2098      	movs	r0, #152	@ 0x98
 8006c28:	f000 fc3c 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	35a4e900 	.word	0x35a4e900
 8006c38:	32a9f880 	.word	0x32a9f880
 8006c3c:	2de54480 	.word	0x2de54480
 8006c40:	1b6b0b00 	.word	0x1b6b0b00
 8006c44:	1954fc40 	.word	0x1954fc40

08006c48 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4623      	mov	r3, r4
 8006c58:	71fb      	strb	r3, [r7, #7]
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	71bb      	strb	r3, [r7, #6]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	717b      	strb	r3, [r7, #5]
 8006c62:	4613      	mov	r3, r2
 8006c64:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8006c6a:	79bb      	ldrb	r3, [r7, #6]
 8006c6c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8006c6e:	797b      	ldrb	r3, [r7, #5]
 8006c70:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8006c72:	793b      	ldrb	r3, [r7, #4]
 8006c74:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8006c76:	f107 030c 	add.w	r3, r7, #12
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	2095      	movs	r0, #149	@ 0x95
 8006c80:	f000 fc10 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd90      	pop	{r4, r7, pc}

08006c8c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	80fb      	strh	r3, [r7, #6]
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	80bb      	strh	r3, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	807b      	strh	r3, [r7, #2]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	0a1b      	lsrs	r3, r3, #8
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8006cba:	88bb      	ldrh	r3, [r7, #4]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8006cc4:	88bb      	ldrh	r3, [r7, #4]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8006cca:	887b      	ldrh	r3, [r7, #2]
 8006ccc:	0a1b      	lsrs	r3, r3, #8
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8006cd4:	887b      	ldrh	r3, [r7, #2]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8006cda:	883b      	ldrh	r3, [r7, #0]
 8006cdc:	0a1b      	lsrs	r3, r3, #8
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8006ce4:	883b      	ldrh	r3, [r7, #0]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8006cea:	f107 0308 	add.w	r3, r7, #8
 8006cee:	2208      	movs	r2, #8
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	2008      	movs	r0, #8
 8006cf4:	f000 fbd6 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006cf8:	bf00      	nop
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd90      	pop	{r4, r7, pc}

08006d00 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	6039      	str	r1, [r7, #0]
 8006d0a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	0a1b      	lsrs	r3, r3, #8
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8006d2c:	f107 030c 	add.w	r3, r7, #12
 8006d30:	2204      	movs	r2, #4
 8006d32:	4619      	mov	r1, r3
 8006d34:	2097      	movs	r0, #151	@ 0x97
 8006d36:	f000 fbb5 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8006d44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8006d52:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc8 <SUBGRF_SetRfFrequency+0x84>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	f083 0301 	eor.w	r3, r3, #1
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff ff27 	bl	8006bb4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8006d66:	4b18      	ldr	r3, [pc, #96]	@ (8006dc8 <SUBGRF_SetRfFrequency+0x84>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	461c      	mov	r4, r3
 8006d72:	4615      	mov	r5, r2
 8006d74:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8006d78:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8006d7c:	4a13      	ldr	r2, [pc, #76]	@ (8006dcc <SUBGRF_SetRfFrequency+0x88>)
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	f7f9 ff57 	bl	8000c38 <__aeabi_uldivmod>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4613      	mov	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	0e1b      	lsrs	r3, r3, #24
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	0c1b      	lsrs	r3, r3, #16
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	0a1b      	lsrs	r3, r3, #8
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8006db0:	f107 0308 	add.w	r3, r7, #8
 8006db4:	2204      	movs	r2, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	2086      	movs	r0, #134	@ 0x86
 8006dba:	f000 fb73 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006dc8:	20000604 	.word	0x20000604
 8006dcc:	01e84800 	.word	0x01e84800

08006dd0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8006dda:	79fa      	ldrb	r2, [r7, #7]
 8006ddc:	4b09      	ldr	r3, [pc, #36]	@ (8006e04 <SUBGRF_SetPacketType+0x34>)
 8006dde:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8006de6:	2100      	movs	r1, #0
 8006de8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8006dec:	f000 facc 	bl	8007388 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006df0:	1dfb      	adds	r3, r7, #7
 8006df2:	2201      	movs	r2, #1
 8006df4:	4619      	mov	r1, r3
 8006df6:	208a      	movs	r0, #138	@ 0x8a
 8006df8:	f000 fb54 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	200005fd 	.word	0x200005fd

08006e08 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
    return PacketType;
 8006e0c:	4b02      	ldr	r3, [pc, #8]	@ (8006e18 <SUBGRF_GetPacketType+0x10>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr
 8006e18:	200005fd 	.word	0x200005fd

08006e1c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	71fb      	strb	r3, [r7, #7]
 8006e26:	460b      	mov	r3, r1
 8006e28:	71bb      	strb	r3, [r7, #6]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d149      	bne.n	8006ec8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8006e34:	2000      	movs	r0, #0
 8006e36:	f7ff fd39 	bl	80068ac <RBI_GetRFOMaxPowerConfig>
 8006e3a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8006e3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	da01      	bge.n	8006e4a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b0e      	cmp	r3, #14
 8006e4e:	d10e      	bne.n	8006e6e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8006e50:	2301      	movs	r3, #1
 8006e52:	2201      	movs	r2, #1
 8006e54:	2100      	movs	r1, #0
 8006e56:	2004      	movs	r0, #4
 8006e58:	f7ff fef6 	bl	8006c48 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006e5c:	79ba      	ldrb	r2, [r7, #6]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	330e      	adds	r3, #14
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	71bb      	strb	r3, [r7, #6]
 8006e6c:	e01f      	b.n	8006eae <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b0a      	cmp	r3, #10
 8006e72:	d10e      	bne.n	8006e92 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8006e74:	2301      	movs	r3, #1
 8006e76:	2201      	movs	r2, #1
 8006e78:	2100      	movs	r1, #0
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f7ff fee4 	bl	8006c48 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8006e80:	79ba      	ldrb	r2, [r7, #6]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	330d      	adds	r3, #13
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	71bb      	strb	r3, [r7, #6]
 8006e90:	e00d      	b.n	8006eae <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8006e92:	2301      	movs	r3, #1
 8006e94:	2201      	movs	r2, #1
 8006e96:	2100      	movs	r1, #0
 8006e98:	2007      	movs	r0, #7
 8006e9a:	f7ff fed5 	bl	8006c48 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006e9e:	79ba      	ldrb	r2, [r7, #6]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	330e      	adds	r3, #14
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8006eae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006eb2:	f113 0f11 	cmn.w	r3, #17
 8006eb6:	da01      	bge.n	8006ebc <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8006eb8:	23ef      	movs	r3, #239	@ 0xef
 8006eba:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8006ebc:	2118      	movs	r1, #24
 8006ebe:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8006ec2:	f000 fa61 	bl	8007388 <SUBGRF_WriteRegister>
 8006ec6:	e067      	b.n	8006f98 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8006ec8:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8006ecc:	f000 fa70 	bl	80073b0 <SUBGRF_ReadRegister>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f043 031e 	orr.w	r3, r3, #30
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8006ede:	f000 fa53 	bl	8007388 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	f7ff fce2 	bl	80068ac <RBI_GetRFOMaxPowerConfig>
 8006ee8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8006eea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	da01      	bge.n	8006ef8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b14      	cmp	r3, #20
 8006efc:	d10e      	bne.n	8006f1c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8006efe:	2301      	movs	r3, #1
 8006f00:	2200      	movs	r2, #0
 8006f02:	2105      	movs	r1, #5
 8006f04:	2003      	movs	r0, #3
 8006f06:	f7ff fe9f 	bl	8006c48 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006f0a:	79ba      	ldrb	r2, [r7, #6]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	3316      	adds	r3, #22
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	71bb      	strb	r3, [r7, #6]
 8006f1a:	e031      	b.n	8006f80 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b11      	cmp	r3, #17
 8006f20:	d10e      	bne.n	8006f40 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8006f22:	2301      	movs	r3, #1
 8006f24:	2200      	movs	r2, #0
 8006f26:	2103      	movs	r1, #3
 8006f28:	2002      	movs	r0, #2
 8006f2a:	f7ff fe8d 	bl	8006c48 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006f2e:	79ba      	ldrb	r2, [r7, #6]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	3316      	adds	r3, #22
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	71bb      	strb	r3, [r7, #6]
 8006f3e:	e01f      	b.n	8006f80 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b0e      	cmp	r3, #14
 8006f44:	d10e      	bne.n	8006f64 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8006f46:	2301      	movs	r3, #1
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	2002      	movs	r0, #2
 8006f4e:	f7ff fe7b 	bl	8006c48 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006f52:	79ba      	ldrb	r2, [r7, #6]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	330e      	adds	r3, #14
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	71bb      	strb	r3, [r7, #6]
 8006f62:	e00d      	b.n	8006f80 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8006f64:	2301      	movs	r3, #1
 8006f66:	2200      	movs	r2, #0
 8006f68:	2107      	movs	r1, #7
 8006f6a:	2004      	movs	r0, #4
 8006f6c:	f7ff fe6c 	bl	8006c48 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006f70:	79ba      	ldrb	r2, [r7, #6]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	3316      	adds	r3, #22
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8006f80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006f84:	f113 0f09 	cmn.w	r3, #9
 8006f88:	da01      	bge.n	8006f8e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8006f8a:	23f7      	movs	r3, #247	@ 0xf7
 8006f8c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8006f8e:	2138      	movs	r1, #56	@ 0x38
 8006f90:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8006f94:	f000 f9f8 	bl	8007388 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8006f98:	79bb      	ldrb	r3, [r7, #6]
 8006f9a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8006f9c:	797b      	ldrb	r3, [r7, #5]
 8006f9e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8006fa0:	f107 0308 	add.w	r3, r7, #8
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	208e      	movs	r0, #142	@ 0x8e
 8006faa:	f000 fa7b 	bl	80074a4 <SUBGRF_WriteCommand>
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8006fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006fbc:	b086      	sub	sp, #24
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006fc6:	f107 0308 	add.w	r3, r7, #8
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8007148 <SUBGRF_SetModulationParams+0x190>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d004      	beq.n	8006fe6 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff fef5 	bl	8006dd0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	f200 80a5 	bhi.w	800713a <SUBGRF_SetModulationParams+0x182>
 8006ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <SUBGRF_SetModulationParams+0x40>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	08007009 	.word	0x08007009
 8006ffc:	080070c9 	.word	0x080070c9
 8007000:	0800708b 	.word	0x0800708b
 8007004:	080070f7 	.word	0x080070f7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8007008:	2308      	movs	r3, #8
 800700a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	4a4e      	ldr	r2, [pc, #312]	@ (800714c <SUBGRF_SetModulationParams+0x194>)
 8007012:	fbb2 f3f3 	udiv	r3, r2, r3
 8007016:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	b2db      	uxtb	r3, r3
 800701e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	b2db      	uxtb	r3, r3
 8007026:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7b1b      	ldrb	r3, [r3, #12]
 8007032:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7b5b      	ldrb	r3, [r3, #13]
 8007038:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2200      	movs	r2, #0
 8007040:	461c      	mov	r4, r3
 8007042:	4615      	mov	r5, r2
 8007044:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8007048:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800704c:	4a40      	ldr	r2, [pc, #256]	@ (8007150 <SUBGRF_SetModulationParams+0x198>)
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	4640      	mov	r0, r8
 8007054:	4649      	mov	r1, r9
 8007056:	f7f9 fdef 	bl	8000c38 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4613      	mov	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	0c1b      	lsrs	r3, r3, #16
 8007066:	b2db      	uxtb	r3, r3
 8007068:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	0a1b      	lsrs	r3, r3, #8
 800706e:	b2db      	uxtb	r3, r3
 8007070:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007078:	7cfb      	ldrb	r3, [r7, #19]
 800707a:	b29a      	uxth	r2, r3
 800707c:	f107 0308 	add.w	r3, r7, #8
 8007080:	4619      	mov	r1, r3
 8007082:	208b      	movs	r0, #139	@ 0x8b
 8007084:	f000 fa0e 	bl	80074a4 <SUBGRF_WriteCommand>
        break;
 8007088:	e058      	b.n	800713c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 800708a:	2304      	movs	r3, #4
 800708c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	4a2e      	ldr	r2, [pc, #184]	@ (800714c <SUBGRF_SetModulationParams+0x194>)
 8007094:	fbb2 f3f3 	udiv	r3, r2, r3
 8007098:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	0c1b      	lsrs	r3, r3, #16
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	0a1b      	lsrs	r3, r3, #8
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7d1b      	ldrb	r3, [r3, #20]
 80070b4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80070b6:	7cfb      	ldrb	r3, [r7, #19]
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	f107 0308 	add.w	r3, r7, #8
 80070be:	4619      	mov	r1, r3
 80070c0:	208b      	movs	r0, #139	@ 0x8b
 80070c2:	f000 f9ef 	bl	80074a4 <SUBGRF_WriteCommand>
        break;
 80070c6:	e039      	b.n	800713c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 80070c8:	2304      	movs	r3, #4
 80070ca:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	7e1b      	ldrb	r3, [r3, #24]
 80070d0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	7e5b      	ldrb	r3, [r3, #25]
 80070d6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	7e9b      	ldrb	r3, [r3, #26]
 80070dc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	7edb      	ldrb	r3, [r3, #27]
 80070e2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	f107 0308 	add.w	r3, r7, #8
 80070ec:	4619      	mov	r1, r3
 80070ee:	208b      	movs	r0, #139	@ 0x8b
 80070f0:	f000 f9d8 	bl	80074a4 <SUBGRF_WriteCommand>

        break;
 80070f4:	e022      	b.n	800713c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 80070f6:	2305      	movs	r3, #5
 80070f8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	4a13      	ldr	r2, [pc, #76]	@ (800714c <SUBGRF_SetModulationParams+0x194>)
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	b2db      	uxtb	r3, r3
 800710c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	b2db      	uxtb	r3, r3
 8007114:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	7b1b      	ldrb	r3, [r3, #12]
 8007120:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7b5b      	ldrb	r3, [r3, #13]
 8007126:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007128:	7cfb      	ldrb	r3, [r7, #19]
 800712a:	b29a      	uxth	r2, r3
 800712c:	f107 0308 	add.w	r3, r7, #8
 8007130:	4619      	mov	r1, r3
 8007132:	208b      	movs	r0, #139	@ 0x8b
 8007134:	f000 f9b6 	bl	80074a4 <SUBGRF_WriteCommand>
        break;
 8007138:	e000      	b.n	800713c <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 800713a:	bf00      	nop
    }
}
 800713c:	bf00      	nop
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007146:	bf00      	nop
 8007148:	200005fd 	.word	0x200005fd
 800714c:	3d090000 	.word	0x3d090000
 8007150:	01e84800 	.word	0x01e84800

08007154 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007160:	f107 030c 	add.w	r3, r7, #12
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	781a      	ldrb	r2, [r3, #0]
 8007170:	4b44      	ldr	r3, [pc, #272]	@ (8007284 <SUBGRF_SetPacketParams+0x130>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	d004      	beq.n	8007182 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff fe27 	bl	8006dd0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b03      	cmp	r3, #3
 8007188:	d878      	bhi.n	800727c <SUBGRF_SetPacketParams+0x128>
 800718a:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <SUBGRF_SetPacketParams+0x3c>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071a1 	.word	0x080071a1
 8007194:	08007231 	.word	0x08007231
 8007198:	08007225 	.word	0x08007225
 800719c:	080071a1 	.word	0x080071a1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	7a5b      	ldrb	r3, [r3, #9]
 80071a4:	2bf1      	cmp	r3, #241	@ 0xf1
 80071a6:	d10a      	bne.n	80071be <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80071a8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80071ac:	f7ff fc19 	bl	80069e2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80071b0:	f248 0005 	movw	r0, #32773	@ 0x8005
 80071b4:	f7ff fc35 	bl	8006a22 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80071b8:	2302      	movs	r3, #2
 80071ba:	75bb      	strb	r3, [r7, #22]
 80071bc:	e011      	b.n	80071e2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7a5b      	ldrb	r3, [r3, #9]
 80071c2:	2bf2      	cmp	r3, #242	@ 0xf2
 80071c4:	d10a      	bne.n	80071dc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80071c6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80071ca:	f7ff fc0a 	bl	80069e2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80071ce:	f241 0021 	movw	r0, #4129	@ 0x1021
 80071d2:	f7ff fc26 	bl	8006a22 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80071d6:	2306      	movs	r3, #6
 80071d8:	75bb      	strb	r3, [r7, #22]
 80071da:	e002      	b.n	80071e2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7a5b      	ldrb	r3, [r3, #9]
 80071e0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80071e2:	2309      	movs	r3, #9
 80071e4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	885b      	ldrh	r3, [r3, #2]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	791b      	ldrb	r3, [r3, #4]
 80071fe:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	795b      	ldrb	r3, [r3, #5]
 8007204:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	799b      	ldrb	r3, [r3, #6]
 800720a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	79db      	ldrb	r3, [r3, #7]
 8007210:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7a1b      	ldrb	r3, [r3, #8]
 8007216:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007218:	7dbb      	ldrb	r3, [r7, #22]
 800721a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7a9b      	ldrb	r3, [r3, #10]
 8007220:	753b      	strb	r3, [r7, #20]
        break;
 8007222:	e022      	b.n	800726a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007224:	2301      	movs	r3, #1
 8007226:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7b1b      	ldrb	r3, [r3, #12]
 800722c:	733b      	strb	r3, [r7, #12]
        break;
 800722e:	e01c      	b.n	800726a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8007230:	2306      	movs	r3, #6
 8007232:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	89db      	ldrh	r3, [r3, #14]
 8007238:	0a1b      	lsrs	r3, r3, #8
 800723a:	b29b      	uxth	r3, r3
 800723c:	b2db      	uxtb	r3, r3
 800723e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	89db      	ldrh	r3, [r3, #14]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7c1a      	ldrb	r2, [r3, #16]
 800724c:	4b0e      	ldr	r3, [pc, #56]	@ (8007288 <SUBGRF_SetPacketParams+0x134>)
 800724e:	4611      	mov	r1, r2
 8007250:	7019      	strb	r1, [r3, #0]
 8007252:	4613      	mov	r3, r2
 8007254:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7c5b      	ldrb	r3, [r3, #17]
 800725a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	7c9b      	ldrb	r3, [r3, #18]
 8007260:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	7cdb      	ldrb	r3, [r3, #19]
 8007266:	747b      	strb	r3, [r7, #17]
        break;
 8007268:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	b29a      	uxth	r2, r3
 800726e:	f107 030c 	add.w	r3, r7, #12
 8007272:	4619      	mov	r1, r3
 8007274:	208c      	movs	r0, #140	@ 0x8c
 8007276:	f000 f915 	bl	80074a4 <SUBGRF_WriteCommand>
 800727a:	e000      	b.n	800727e <SUBGRF_SetPacketParams+0x12a>
        return;
 800727c:	bf00      	nop
}
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	200005fd 	.word	0x200005fd
 8007288:	200005fe 	.word	0x200005fe

0800728c <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007296:	f107 030c 	add.w	r3, r7, #12
 800729a:	2202      	movs	r2, #2
 800729c:	4619      	mov	r1, r3
 800729e:	2013      	movs	r0, #19
 80072a0:	f000 f922 	bl	80074e8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80072a4:	f7ff fdb0 	bl	8006e08 <SUBGRF_GetPacketType>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d10d      	bne.n	80072ca <SUBGRF_GetRxBufferStatus+0x3e>
 80072ae:	4b0c      	ldr	r3, [pc, #48]	@ (80072e0 <SUBGRF_GetRxBufferStatus+0x54>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d108      	bne.n	80072ca <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80072b8:	f240 7002 	movw	r0, #1794	@ 0x702
 80072bc:	f000 f878 	bl	80073b0 <SUBGRF_ReadRegister>
 80072c0:	4603      	mov	r3, r0
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	e002      	b.n	80072d0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80072ca:	7b3a      	ldrb	r2, [r7, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80072d0:	7b7a      	ldrb	r2, [r7, #13]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	701a      	strb	r2, [r3, #0]
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	200005fe 	.word	0x200005fe

080072e4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80072ec:	f107 030c 	add.w	r3, r7, #12
 80072f0:	2203      	movs	r2, #3
 80072f2:	4619      	mov	r1, r3
 80072f4:	2014      	movs	r0, #20
 80072f6:	f000 f8f7 	bl	80074e8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80072fa:	f7ff fd85 	bl	8006e08 <SUBGRF_GetPacketType>
 80072fe:	4603      	mov	r3, r0
 8007300:	461a      	mov	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <SUBGRF_GetPacketStatus+0x30>
 800730e:	2b01      	cmp	r3, #1
 8007310:	d013      	beq.n	800733a <SUBGRF_GetPacketStatus+0x56>
 8007312:	e02a      	b.n	800736a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007314:	7b3a      	ldrb	r2, [r7, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800731a:	7b7b      	ldrb	r3, [r7, #13]
 800731c:	425b      	negs	r3, r3
 800731e:	105b      	asrs	r3, r3, #1
 8007320:	b25a      	sxtb	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	425b      	negs	r3, r3
 800732a:	105b      	asrs	r3, r3, #1
 800732c:	b25a      	sxtb	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	609a      	str	r2, [r3, #8]
            break;
 8007338:	e020      	b.n	800737c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800733a:	7b3b      	ldrb	r3, [r7, #12]
 800733c:	425b      	negs	r3, r3
 800733e:	105b      	asrs	r3, r3, #1
 8007340:	b25a      	sxtb	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8007346:	7b7b      	ldrb	r3, [r7, #13]
 8007348:	b25b      	sxtb	r3, r3
 800734a:	3302      	adds	r3, #2
 800734c:	109b      	asrs	r3, r3, #2
 800734e:	b25a      	sxtb	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	425b      	negs	r3, r3
 8007358:	105b      	asrs	r3, r3, #1
 800735a:	b25a      	sxtb	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007360:	4b08      	ldr	r3, [pc, #32]	@ (8007384 <SUBGRF_GetPacketStatus+0xa0>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	611a      	str	r2, [r3, #16]
            break;
 8007368:	e008      	b.n	800737c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800736a:	2214      	movs	r2, #20
 800736c:	2100      	movs	r1, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f9d1 	bl	8007716 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	220f      	movs	r2, #15
 8007378:	701a      	strb	r2, [r3, #0]
            break;
 800737a:	bf00      	nop
    }
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000600 	.word	0x20000600

08007388 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	460a      	mov	r2, r1
 8007392:	80fb      	strh	r3, [r7, #6]
 8007394:	4613      	mov	r3, r2
 8007396:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007398:	1d7a      	adds	r2, r7, #5
 800739a:	88f9      	ldrh	r1, [r7, #6]
 800739c:	2301      	movs	r3, #1
 800739e:	4803      	ldr	r0, [pc, #12]	@ (80073ac <SUBGRF_WriteRegister+0x24>)
 80073a0:	f7fd fa36 	bl	8004810 <HAL_SUBGHZ_WriteRegisters>
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000340 	.word	0x20000340

080073b0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80073ba:	f107 020f 	add.w	r2, r7, #15
 80073be:	88f9      	ldrh	r1, [r7, #6]
 80073c0:	2301      	movs	r3, #1
 80073c2:	4804      	ldr	r0, [pc, #16]	@ (80073d4 <SUBGRF_ReadRegister+0x24>)
 80073c4:	f7fd fa83 	bl	80048ce <HAL_SUBGHZ_ReadRegisters>
    return data;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000340 	.word	0x20000340

080073d8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	80fb      	strh	r3, [r7, #6]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e8:	f3ef 8310 	mrs	r3, PRIMASK
 80073ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80073ee:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80073f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80073f2:	b672      	cpsid	i
}
 80073f4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80073f6:	88bb      	ldrh	r3, [r7, #4]
 80073f8:	88f9      	ldrh	r1, [r7, #6]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4806      	ldr	r0, [pc, #24]	@ (8007418 <SUBGRF_WriteRegisters+0x40>)
 80073fe:	f7fd fa07 	bl	8004810 <HAL_SUBGHZ_WriteRegisters>
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f383 8810 	msr	PRIMASK, r3
}
 800740c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800740e:	bf00      	nop
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000340 	.word	0x20000340

0800741c <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
 8007428:	4613      	mov	r3, r2
 800742a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800742c:	f3ef 8310 	mrs	r3, PRIMASK
 8007430:	60fb      	str	r3, [r7, #12]
  return(result);
 8007432:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007434:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007436:	b672      	cpsid	i
}
 8007438:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800743a:	79bb      	ldrb	r3, [r7, #6]
 800743c:	b29b      	uxth	r3, r3
 800743e:	79f9      	ldrb	r1, [r7, #7]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	4806      	ldr	r0, [pc, #24]	@ (800745c <SUBGRF_WriteBuffer+0x40>)
 8007444:	f7fd fb57 	bl	8004af6 <HAL_SUBGHZ_WriteBuffer>
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f383 8810 	msr	PRIMASK, r3
}
 8007452:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007454:	bf00      	nop
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000340 	.word	0x20000340

08007460 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	6039      	str	r1, [r7, #0]
 800746a:	71fb      	strb	r3, [r7, #7]
 800746c:	4613      	mov	r3, r2
 800746e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007470:	f3ef 8310 	mrs	r3, PRIMASK
 8007474:	60fb      	str	r3, [r7, #12]
  return(result);
 8007476:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007478:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800747a:	b672      	cpsid	i
}
 800747c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800747e:	79bb      	ldrb	r3, [r7, #6]
 8007480:	b29b      	uxth	r3, r3
 8007482:	79f9      	ldrb	r1, [r7, #7]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	4806      	ldr	r0, [pc, #24]	@ (80074a0 <SUBGRF_ReadBuffer+0x40>)
 8007488:	f7fd fb88 	bl	8004b9c <HAL_SUBGHZ_ReadBuffer>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f383 8810 	msr	PRIMASK, r3
}
 8007496:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007498:	bf00      	nop
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000340 	.word	0x20000340

080074a4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	6039      	str	r1, [r7, #0]
 80074ae:	71fb      	strb	r3, [r7, #7]
 80074b0:	4613      	mov	r3, r2
 80074b2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b4:	f3ef 8310 	mrs	r3, PRIMASK
 80074b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80074ba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80074bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80074be:	b672      	cpsid	i
}
 80074c0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80074c2:	88bb      	ldrh	r3, [r7, #4]
 80074c4:	79f9      	ldrb	r1, [r7, #7]
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	4806      	ldr	r0, [pc, #24]	@ (80074e4 <SUBGRF_WriteCommand+0x40>)
 80074ca:	f7fd fa61 	bl	8004990 <HAL_SUBGHZ_ExecSetCmd>
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f383 8810 	msr	PRIMASK, r3
}
 80074d8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80074da:	bf00      	nop
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000340 	.word	0x20000340

080074e8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	6039      	str	r1, [r7, #0]
 80074f2:	71fb      	strb	r3, [r7, #7]
 80074f4:	4613      	mov	r3, r2
 80074f6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f8:	f3ef 8310 	mrs	r3, PRIMASK
 80074fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80074fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007500:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007502:	b672      	cpsid	i
}
 8007504:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007506:	88bb      	ldrh	r3, [r7, #4]
 8007508:	79f9      	ldrb	r1, [r7, #7]
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	4806      	ldr	r0, [pc, #24]	@ (8007528 <SUBGRF_ReadCommand+0x40>)
 800750e:	f7fd fa9e 	bl	8004a4e <HAL_SUBGHZ_ExecGetCmd>
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f383 8810 	msr	PRIMASK, r3
}
 800751c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800751e:	bf00      	nop
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000340 	.word	0x20000340

0800752c <SUBGRF_SetRfTxPower>:
    }
    RBI_ConfigRFSwitch(state);
}

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007536:	2301      	movs	r3, #1
 8007538:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800753a:	f7ff f9a2 	bl	8006882 <RBI_GetTxConfig>
 800753e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d016      	beq.n	8007574 <SUBGRF_SetRfTxPower+0x48>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b02      	cmp	r3, #2
 800754a:	dc16      	bgt.n	800757a <SUBGRF_SetRfTxPower+0x4e>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <SUBGRF_SetRfTxPower+0x2e>
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d00a      	beq.n	800756e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8007558:	e00f      	b.n	800757a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800755a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800755e:	2b0f      	cmp	r3, #15
 8007560:	dd02      	ble.n	8007568 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8007562:	2302      	movs	r3, #2
 8007564:	73fb      	strb	r3, [r7, #15]
            break;
 8007566:	e009      	b.n	800757c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8007568:	2301      	movs	r3, #1
 800756a:	73fb      	strb	r3, [r7, #15]
            break;
 800756c:	e006      	b.n	800757c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800756e:	2301      	movs	r3, #1
 8007570:	73fb      	strb	r3, [r7, #15]
            break;
 8007572:	e003      	b.n	800757c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8007574:	2302      	movs	r3, #2
 8007576:	73fb      	strb	r3, [r7, #15]
            break;
 8007578:	e000      	b.n	800757c <SUBGRF_SetRfTxPower+0x50>
            break;
 800757a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800757c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	2202      	movs	r2, #2
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff fc49 	bl	8006e1c <SUBGRF_SetTxParams>

    return paSelect;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800759c:	4b03      	ldr	r3, [pc, #12]	@ (80075ac <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2001      	movs	r0, #1
 80075a2:	4798      	blx	r3
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000608 	.word	0x20000608

080075b0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80075b8:	4b03      	ldr	r3, [pc, #12]	@ (80075c8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2002      	movs	r0, #2
 80075be:	4798      	blx	r3
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000608 	.word	0x20000608

080075cc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80075d4:	4b03      	ldr	r3, [pc, #12]	@ (80075e4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2040      	movs	r0, #64	@ 0x40
 80075da:	4798      	blx	r3
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000608 	.word	0x20000608

080075e8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d005      	beq.n	800760a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80075fe:	e00a      	b.n	8007616 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007600:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2080      	movs	r0, #128	@ 0x80
 8007606:	4798      	blx	r3
            break;
 8007608:	e005      	b.n	8007616 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800760a:	4b05      	ldr	r3, [pc, #20]	@ (8007620 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007612:	4798      	blx	r3
            break;
 8007614:	bf00      	nop
    }
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000608 	.word	0x20000608

08007624 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800762c:	4b04      	ldr	r3, [pc, #16]	@ (8007640 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007634:	4798      	blx	r3
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000608 	.word	0x20000608

08007644 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800764c:	4b03      	ldr	r3, [pc, #12]	@ (800765c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2020      	movs	r0, #32
 8007652:	4798      	blx	r3
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20000608 	.word	0x20000608

08007660 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8007668:	4b03      	ldr	r3, [pc, #12]	@ (8007678 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2004      	movs	r0, #4
 800766e:	4798      	blx	r3
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20000608 	.word	0x20000608

0800767c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8007684:	4b03      	ldr	r3, [pc, #12]	@ (8007694 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2008      	movs	r0, #8
 800768a:	4798      	blx	r3
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20000608 	.word	0x20000608

08007698 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80076a0:	4b03      	ldr	r3, [pc, #12]	@ (80076b0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2010      	movs	r0, #16
 80076a6:	4798      	blx	r3
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20000608 	.word	0x20000608

080076b4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80076bc:	4b04      	ldr	r3, [pc, #16]	@ (80076d0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80076c4:	4798      	blx	r3
}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20000608 	.word	0x20000608

080076d4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80076de:	f7ff f8de 	bl	800689e <RBI_IsDCDC>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d112      	bne.n	800770e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80076e8:	f640 1023 	movw	r0, #2339	@ 0x923
 80076ec:	f7ff fe60 	bl	80073b0 <SUBGRF_ReadRegister>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	f023 0306 	bic.w	r3, r3, #6
 80076fa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80076fc:	7bfa      	ldrb	r2, [r7, #15]
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	4313      	orrs	r3, r2
 8007702:	b2db      	uxtb	r3, r3
 8007704:	4619      	mov	r1, r3
 8007706:	f640 1023 	movw	r0, #2339	@ 0x923
 800770a:	f7ff fe3d 	bl	8007388 <SUBGRF_WriteRegister>
  }
}
 800770e:	bf00      	nop
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
 8007722:	4613      	mov	r3, r2
 8007724:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800772a:	e004      	b.n	8007736 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	60fa      	str	r2, [r7, #12]
 8007732:	78fa      	ldrb	r2, [r7, #3]
 8007734:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8007736:	883b      	ldrh	r3, [r7, #0]
 8007738:	1e5a      	subs	r2, r3, #1
 800773a:	803a      	strh	r2, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f5      	bne.n	800772c <UTIL_MEM_set_8+0x16>
  }
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	bc80      	pop	{r7}
 800774a:	4770      	bx	lr

0800774c <__cvt>:
 800774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	b088      	sub	sp, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	461d      	mov	r5, r3
 8007756:	4614      	mov	r4, r2
 8007758:	bfbc      	itt	lt
 800775a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800775e:	4614      	movlt	r4, r2
 8007760:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007762:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007764:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007768:	bfb6      	itet	lt
 800776a:	461d      	movlt	r5, r3
 800776c:	2300      	movge	r3, #0
 800776e:	232d      	movlt	r3, #45	@ 0x2d
 8007770:	7013      	strb	r3, [r2, #0]
 8007772:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007774:	f023 0820 	bic.w	r8, r3, #32
 8007778:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800777c:	d005      	beq.n	800778a <__cvt+0x3e>
 800777e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007782:	d100      	bne.n	8007786 <__cvt+0x3a>
 8007784:	3601      	adds	r6, #1
 8007786:	2302      	movs	r3, #2
 8007788:	e000      	b.n	800778c <__cvt+0x40>
 800778a:	2303      	movs	r3, #3
 800778c:	aa07      	add	r2, sp, #28
 800778e:	9204      	str	r2, [sp, #16]
 8007790:	aa06      	add	r2, sp, #24
 8007792:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007796:	e9cd 3600 	strd	r3, r6, [sp]
 800779a:	4622      	mov	r2, r4
 800779c:	462b      	mov	r3, r5
 800779e:	f001 f96b 	bl	8008a78 <_dtoa_r>
 80077a2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80077a6:	4607      	mov	r7, r0
 80077a8:	d119      	bne.n	80077de <__cvt+0x92>
 80077aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80077ac:	07db      	lsls	r3, r3, #31
 80077ae:	d50e      	bpl.n	80077ce <__cvt+0x82>
 80077b0:	eb00 0906 	add.w	r9, r0, r6
 80077b4:	2200      	movs	r2, #0
 80077b6:	2300      	movs	r3, #0
 80077b8:	4620      	mov	r0, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f9 f95c 	bl	8000a78 <__aeabi_dcmpeq>
 80077c0:	b108      	cbz	r0, 80077c6 <__cvt+0x7a>
 80077c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80077c6:	2230      	movs	r2, #48	@ 0x30
 80077c8:	9b07      	ldr	r3, [sp, #28]
 80077ca:	454b      	cmp	r3, r9
 80077cc:	d31e      	bcc.n	800780c <__cvt+0xc0>
 80077ce:	9b07      	ldr	r3, [sp, #28]
 80077d0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80077d2:	1bdb      	subs	r3, r3, r7
 80077d4:	4638      	mov	r0, r7
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	b008      	add	sp, #32
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077e2:	eb00 0906 	add.w	r9, r0, r6
 80077e6:	d1e5      	bne.n	80077b4 <__cvt+0x68>
 80077e8:	7803      	ldrb	r3, [r0, #0]
 80077ea:	2b30      	cmp	r3, #48	@ 0x30
 80077ec:	d10a      	bne.n	8007804 <__cvt+0xb8>
 80077ee:	2200      	movs	r2, #0
 80077f0:	2300      	movs	r3, #0
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f9 f93f 	bl	8000a78 <__aeabi_dcmpeq>
 80077fa:	b918      	cbnz	r0, 8007804 <__cvt+0xb8>
 80077fc:	f1c6 0601 	rsb	r6, r6, #1
 8007800:	f8ca 6000 	str.w	r6, [sl]
 8007804:	f8da 3000 	ldr.w	r3, [sl]
 8007808:	4499      	add	r9, r3
 800780a:	e7d3      	b.n	80077b4 <__cvt+0x68>
 800780c:	1c59      	adds	r1, r3, #1
 800780e:	9107      	str	r1, [sp, #28]
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	e7d9      	b.n	80077c8 <__cvt+0x7c>

08007814 <__exponent>:
 8007814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007816:	2900      	cmp	r1, #0
 8007818:	bfba      	itte	lt
 800781a:	4249      	neglt	r1, r1
 800781c:	232d      	movlt	r3, #45	@ 0x2d
 800781e:	232b      	movge	r3, #43	@ 0x2b
 8007820:	2909      	cmp	r1, #9
 8007822:	7002      	strb	r2, [r0, #0]
 8007824:	7043      	strb	r3, [r0, #1]
 8007826:	dd29      	ble.n	800787c <__exponent+0x68>
 8007828:	f10d 0307 	add.w	r3, sp, #7
 800782c:	461d      	mov	r5, r3
 800782e:	270a      	movs	r7, #10
 8007830:	461a      	mov	r2, r3
 8007832:	fbb1 f6f7 	udiv	r6, r1, r7
 8007836:	fb07 1416 	mls	r4, r7, r6, r1
 800783a:	3430      	adds	r4, #48	@ 0x30
 800783c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007840:	460c      	mov	r4, r1
 8007842:	2c63      	cmp	r4, #99	@ 0x63
 8007844:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007848:	4631      	mov	r1, r6
 800784a:	dcf1      	bgt.n	8007830 <__exponent+0x1c>
 800784c:	3130      	adds	r1, #48	@ 0x30
 800784e:	1e94      	subs	r4, r2, #2
 8007850:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007854:	1c41      	adds	r1, r0, #1
 8007856:	4623      	mov	r3, r4
 8007858:	42ab      	cmp	r3, r5
 800785a:	d30a      	bcc.n	8007872 <__exponent+0x5e>
 800785c:	f10d 0309 	add.w	r3, sp, #9
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	42ac      	cmp	r4, r5
 8007864:	bf88      	it	hi
 8007866:	2300      	movhi	r3, #0
 8007868:	3302      	adds	r3, #2
 800786a:	4403      	add	r3, r0
 800786c:	1a18      	subs	r0, r3, r0
 800786e:	b003      	add	sp, #12
 8007870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007872:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007876:	f801 6f01 	strb.w	r6, [r1, #1]!
 800787a:	e7ed      	b.n	8007858 <__exponent+0x44>
 800787c:	2330      	movs	r3, #48	@ 0x30
 800787e:	3130      	adds	r1, #48	@ 0x30
 8007880:	7083      	strb	r3, [r0, #2]
 8007882:	70c1      	strb	r1, [r0, #3]
 8007884:	1d03      	adds	r3, r0, #4
 8007886:	e7f1      	b.n	800786c <__exponent+0x58>

08007888 <_printf_float>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	b091      	sub	sp, #68	@ 0x44
 800788e:	460c      	mov	r4, r1
 8007890:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007894:	4616      	mov	r6, r2
 8007896:	461f      	mov	r7, r3
 8007898:	4605      	mov	r5, r0
 800789a:	f000 ffe9 	bl	8008870 <_localeconv_r>
 800789e:	6803      	ldr	r3, [r0, #0]
 80078a0:	9308      	str	r3, [sp, #32]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7f8 fcbc 	bl	8000220 <strlen>
 80078a8:	2300      	movs	r3, #0
 80078aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80078ac:	f8d8 3000 	ldr.w	r3, [r8]
 80078b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80078b2:	3307      	adds	r3, #7
 80078b4:	f023 0307 	bic.w	r3, r3, #7
 80078b8:	f103 0208 	add.w	r2, r3, #8
 80078bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80078c0:	f8d4 b000 	ldr.w	fp, [r4]
 80078c4:	f8c8 2000 	str.w	r2, [r8]
 80078c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80078d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80078d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80078da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078de:	4b9d      	ldr	r3, [pc, #628]	@ (8007b54 <_printf_float+0x2cc>)
 80078e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078e4:	f7f9 f8fa 	bl	8000adc <__aeabi_dcmpun>
 80078e8:	bb70      	cbnz	r0, 8007948 <_printf_float+0xc0>
 80078ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078ee:	4b99      	ldr	r3, [pc, #612]	@ (8007b54 <_printf_float+0x2cc>)
 80078f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078f4:	f7f9 f8d4 	bl	8000aa0 <__aeabi_dcmple>
 80078f8:	bb30      	cbnz	r0, 8007948 <_printf_float+0xc0>
 80078fa:	2200      	movs	r2, #0
 80078fc:	2300      	movs	r3, #0
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	f7f9 f8c3 	bl	8000a8c <__aeabi_dcmplt>
 8007906:	b110      	cbz	r0, 800790e <_printf_float+0x86>
 8007908:	232d      	movs	r3, #45	@ 0x2d
 800790a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800790e:	4a92      	ldr	r2, [pc, #584]	@ (8007b58 <_printf_float+0x2d0>)
 8007910:	4b92      	ldr	r3, [pc, #584]	@ (8007b5c <_printf_float+0x2d4>)
 8007912:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007916:	bf8c      	ite	hi
 8007918:	4690      	movhi	r8, r2
 800791a:	4698      	movls	r8, r3
 800791c:	2303      	movs	r3, #3
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	f02b 0304 	bic.w	r3, fp, #4
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	f04f 0900 	mov.w	r9, #0
 800792a:	9700      	str	r7, [sp, #0]
 800792c:	4633      	mov	r3, r6
 800792e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007930:	4621      	mov	r1, r4
 8007932:	4628      	mov	r0, r5
 8007934:	f000 f9d4 	bl	8007ce0 <_printf_common>
 8007938:	3001      	adds	r0, #1
 800793a:	f040 808f 	bne.w	8007a5c <_printf_float+0x1d4>
 800793e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007942:	b011      	add	sp, #68	@ 0x44
 8007944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007948:	4642      	mov	r2, r8
 800794a:	464b      	mov	r3, r9
 800794c:	4640      	mov	r0, r8
 800794e:	4649      	mov	r1, r9
 8007950:	f7f9 f8c4 	bl	8000adc <__aeabi_dcmpun>
 8007954:	b140      	cbz	r0, 8007968 <_printf_float+0xe0>
 8007956:	464b      	mov	r3, r9
 8007958:	2b00      	cmp	r3, #0
 800795a:	bfbc      	itt	lt
 800795c:	232d      	movlt	r3, #45	@ 0x2d
 800795e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007962:	4a7f      	ldr	r2, [pc, #508]	@ (8007b60 <_printf_float+0x2d8>)
 8007964:	4b7f      	ldr	r3, [pc, #508]	@ (8007b64 <_printf_float+0x2dc>)
 8007966:	e7d4      	b.n	8007912 <_printf_float+0x8a>
 8007968:	6863      	ldr	r3, [r4, #4]
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007970:	d13f      	bne.n	80079f2 <_printf_float+0x16a>
 8007972:	2306      	movs	r3, #6
 8007974:	6063      	str	r3, [r4, #4]
 8007976:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800797a:	2200      	movs	r2, #0
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	9206      	str	r2, [sp, #24]
 8007980:	aa0e      	add	r2, sp, #56	@ 0x38
 8007982:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007986:	aa0d      	add	r2, sp, #52	@ 0x34
 8007988:	9203      	str	r2, [sp, #12]
 800798a:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800798e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007992:	6863      	ldr	r3, [r4, #4]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	4642      	mov	r2, r8
 8007998:	464b      	mov	r3, r9
 800799a:	4628      	mov	r0, r5
 800799c:	910a      	str	r1, [sp, #40]	@ 0x28
 800799e:	f7ff fed5 	bl	800774c <__cvt>
 80079a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079a4:	2947      	cmp	r1, #71	@ 0x47
 80079a6:	4680      	mov	r8, r0
 80079a8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80079aa:	d128      	bne.n	80079fe <_printf_float+0x176>
 80079ac:	1cc8      	adds	r0, r1, #3
 80079ae:	db02      	blt.n	80079b6 <_printf_float+0x12e>
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	4299      	cmp	r1, r3
 80079b4:	dd40      	ble.n	8007a38 <_printf_float+0x1b0>
 80079b6:	f1aa 0a02 	sub.w	sl, sl, #2
 80079ba:	fa5f fa8a 	uxtb.w	sl, sl
 80079be:	3901      	subs	r1, #1
 80079c0:	4652      	mov	r2, sl
 80079c2:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80079c6:	910d      	str	r1, [sp, #52]	@ 0x34
 80079c8:	f7ff ff24 	bl	8007814 <__exponent>
 80079cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079ce:	1813      	adds	r3, r2, r0
 80079d0:	2a01      	cmp	r2, #1
 80079d2:	4681      	mov	r9, r0
 80079d4:	6123      	str	r3, [r4, #16]
 80079d6:	dc02      	bgt.n	80079de <_printf_float+0x156>
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	07d2      	lsls	r2, r2, #31
 80079dc:	d501      	bpl.n	80079e2 <_printf_float+0x15a>
 80079de:	3301      	adds	r3, #1
 80079e0:	6123      	str	r3, [r4, #16]
 80079e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d09f      	beq.n	800792a <_printf_float+0xa2>
 80079ea:	232d      	movs	r3, #45	@ 0x2d
 80079ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f0:	e79b      	b.n	800792a <_printf_float+0xa2>
 80079f2:	2947      	cmp	r1, #71	@ 0x47
 80079f4:	d1bf      	bne.n	8007976 <_printf_float+0xee>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1bd      	bne.n	8007976 <_printf_float+0xee>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e7ba      	b.n	8007974 <_printf_float+0xec>
 80079fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a02:	d9dc      	bls.n	80079be <_printf_float+0x136>
 8007a04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a08:	d118      	bne.n	8007a3c <_printf_float+0x1b4>
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	dd0b      	ble.n	8007a28 <_printf_float+0x1a0>
 8007a10:	6121      	str	r1, [r4, #16]
 8007a12:	b913      	cbnz	r3, 8007a1a <_printf_float+0x192>
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	07d0      	lsls	r0, r2, #31
 8007a18:	d502      	bpl.n	8007a20 <_printf_float+0x198>
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	440b      	add	r3, r1
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a22:	f04f 0900 	mov.w	r9, #0
 8007a26:	e7dc      	b.n	80079e2 <_printf_float+0x15a>
 8007a28:	b913      	cbnz	r3, 8007a30 <_printf_float+0x1a8>
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	07d2      	lsls	r2, r2, #31
 8007a2e:	d501      	bpl.n	8007a34 <_printf_float+0x1ac>
 8007a30:	3302      	adds	r3, #2
 8007a32:	e7f4      	b.n	8007a1e <_printf_float+0x196>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e7f2      	b.n	8007a1e <_printf_float+0x196>
 8007a38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	db05      	blt.n	8007a4e <_printf_float+0x1c6>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	6121      	str	r1, [r4, #16]
 8007a46:	07d8      	lsls	r0, r3, #31
 8007a48:	d5ea      	bpl.n	8007a20 <_printf_float+0x198>
 8007a4a:	1c4b      	adds	r3, r1, #1
 8007a4c:	e7e7      	b.n	8007a1e <_printf_float+0x196>
 8007a4e:	2900      	cmp	r1, #0
 8007a50:	bfd4      	ite	le
 8007a52:	f1c1 0202 	rsble	r2, r1, #2
 8007a56:	2201      	movgt	r2, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	e7e0      	b.n	8007a1e <_printf_float+0x196>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	055a      	lsls	r2, r3, #21
 8007a60:	d407      	bmi.n	8007a72 <_printf_float+0x1ea>
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	4642      	mov	r2, r8
 8007a66:	4631      	mov	r1, r6
 8007a68:	4628      	mov	r0, r5
 8007a6a:	47b8      	blx	r7
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d12b      	bne.n	8007ac8 <_printf_float+0x240>
 8007a70:	e765      	b.n	800793e <_printf_float+0xb6>
 8007a72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a76:	f240 80dd 	bls.w	8007c34 <_printf_float+0x3ac>
 8007a7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2300      	movs	r3, #0
 8007a82:	f7f8 fff9 	bl	8000a78 <__aeabi_dcmpeq>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d033      	beq.n	8007af2 <_printf_float+0x26a>
 8007a8a:	4a37      	ldr	r2, [pc, #220]	@ (8007b68 <_printf_float+0x2e0>)
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b8      	blx	r7
 8007a94:	3001      	adds	r0, #1
 8007a96:	f43f af52 	beq.w	800793e <_printf_float+0xb6>
 8007a9a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007a9e:	4543      	cmp	r3, r8
 8007aa0:	db02      	blt.n	8007aa8 <_printf_float+0x220>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	07d8      	lsls	r0, r3, #31
 8007aa6:	d50f      	bpl.n	8007ac8 <_printf_float+0x240>
 8007aa8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f af43 	beq.w	800793e <_printf_float+0xb6>
 8007ab8:	f04f 0900 	mov.w	r9, #0
 8007abc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007ac0:	f104 0a1a 	add.w	sl, r4, #26
 8007ac4:	45c8      	cmp	r8, r9
 8007ac6:	dc09      	bgt.n	8007adc <_printf_float+0x254>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	079b      	lsls	r3, r3, #30
 8007acc:	f100 8103 	bmi.w	8007cd6 <_printf_float+0x44e>
 8007ad0:	68e0      	ldr	r0, [r4, #12]
 8007ad2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ad4:	4298      	cmp	r0, r3
 8007ad6:	bfb8      	it	lt
 8007ad8:	4618      	movlt	r0, r3
 8007ada:	e732      	b.n	8007942 <_printf_float+0xba>
 8007adc:	2301      	movs	r3, #1
 8007ade:	4652      	mov	r2, sl
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f43f af29 	beq.w	800793e <_printf_float+0xb6>
 8007aec:	f109 0901 	add.w	r9, r9, #1
 8007af0:	e7e8      	b.n	8007ac4 <_printf_float+0x23c>
 8007af2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dc39      	bgt.n	8007b6c <_printf_float+0x2e4>
 8007af8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b68 <_printf_float+0x2e0>)
 8007afa:	2301      	movs	r3, #1
 8007afc:	4631      	mov	r1, r6
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b8      	blx	r7
 8007b02:	3001      	adds	r0, #1
 8007b04:	f43f af1b 	beq.w	800793e <_printf_float+0xb6>
 8007b08:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007b0c:	ea59 0303 	orrs.w	r3, r9, r3
 8007b10:	d102      	bne.n	8007b18 <_printf_float+0x290>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	07d9      	lsls	r1, r3, #31
 8007b16:	d5d7      	bpl.n	8007ac8 <_printf_float+0x240>
 8007b18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f af0b 	beq.w	800793e <_printf_float+0xb6>
 8007b28:	f04f 0a00 	mov.w	sl, #0
 8007b2c:	f104 0b1a 	add.w	fp, r4, #26
 8007b30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b32:	425b      	negs	r3, r3
 8007b34:	4553      	cmp	r3, sl
 8007b36:	dc01      	bgt.n	8007b3c <_printf_float+0x2b4>
 8007b38:	464b      	mov	r3, r9
 8007b3a:	e793      	b.n	8007a64 <_printf_float+0x1dc>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	465a      	mov	r2, fp
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f aef9 	beq.w	800793e <_printf_float+0xb6>
 8007b4c:	f10a 0a01 	add.w	sl, sl, #1
 8007b50:	e7ee      	b.n	8007b30 <_printf_float+0x2a8>
 8007b52:	bf00      	nop
 8007b54:	7fefffff 	.word	0x7fefffff
 8007b58:	0800c314 	.word	0x0800c314
 8007b5c:	0800c310 	.word	0x0800c310
 8007b60:	0800c31c 	.word	0x0800c31c
 8007b64:	0800c318 	.word	0x0800c318
 8007b68:	0800c320 	.word	0x0800c320
 8007b6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b6e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007b72:	4553      	cmp	r3, sl
 8007b74:	bfa8      	it	ge
 8007b76:	4653      	movge	r3, sl
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	4699      	mov	r9, r3
 8007b7c:	dc36      	bgt.n	8007bec <_printf_float+0x364>
 8007b7e:	f04f 0b00 	mov.w	fp, #0
 8007b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b86:	f104 021a 	add.w	r2, r4, #26
 8007b8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b8e:	eba3 0309 	sub.w	r3, r3, r9
 8007b92:	455b      	cmp	r3, fp
 8007b94:	dc31      	bgt.n	8007bfa <_printf_float+0x372>
 8007b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b98:	459a      	cmp	sl, r3
 8007b9a:	dc3a      	bgt.n	8007c12 <_printf_float+0x38a>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	07da      	lsls	r2, r3, #31
 8007ba0:	d437      	bmi.n	8007c12 <_printf_float+0x38a>
 8007ba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ba4:	ebaa 0903 	sub.w	r9, sl, r3
 8007ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007baa:	ebaa 0303 	sub.w	r3, sl, r3
 8007bae:	4599      	cmp	r9, r3
 8007bb0:	bfa8      	it	ge
 8007bb2:	4699      	movge	r9, r3
 8007bb4:	f1b9 0f00 	cmp.w	r9, #0
 8007bb8:	dc33      	bgt.n	8007c22 <_printf_float+0x39a>
 8007bba:	f04f 0800 	mov.w	r8, #0
 8007bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bc2:	f104 0b1a 	add.w	fp, r4, #26
 8007bc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8007bcc:	eba3 0309 	sub.w	r3, r3, r9
 8007bd0:	4543      	cmp	r3, r8
 8007bd2:	f77f af79 	ble.w	8007ac8 <_printf_float+0x240>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	465a      	mov	r2, fp
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f aeac 	beq.w	800793e <_printf_float+0xb6>
 8007be6:	f108 0801 	add.w	r8, r8, #1
 8007bea:	e7ec      	b.n	8007bc6 <_printf_float+0x33e>
 8007bec:	4642      	mov	r2, r8
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d1c2      	bne.n	8007b7e <_printf_float+0x2f6>
 8007bf8:	e6a1      	b.n	800793e <_printf_float+0xb6>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	920a      	str	r2, [sp, #40]	@ 0x28
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f ae9a 	beq.w	800793e <_printf_float+0xb6>
 8007c0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c0c:	f10b 0b01 	add.w	fp, fp, #1
 8007c10:	e7bb      	b.n	8007b8a <_printf_float+0x302>
 8007c12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d1c0      	bne.n	8007ba2 <_printf_float+0x31a>
 8007c20:	e68d      	b.n	800793e <_printf_float+0xb6>
 8007c22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c24:	464b      	mov	r3, r9
 8007c26:	4442      	add	r2, r8
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d1c3      	bne.n	8007bba <_printf_float+0x332>
 8007c32:	e684      	b.n	800793e <_printf_float+0xb6>
 8007c34:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007c38:	f1ba 0f01 	cmp.w	sl, #1
 8007c3c:	dc01      	bgt.n	8007c42 <_printf_float+0x3ba>
 8007c3e:	07db      	lsls	r3, r3, #31
 8007c40:	d536      	bpl.n	8007cb0 <_printf_float+0x428>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4642      	mov	r2, r8
 8007c46:	4631      	mov	r1, r6
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f43f ae76 	beq.w	800793e <_printf_float+0xb6>
 8007c52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f43f ae6e 	beq.w	800793e <_printf_float+0xb6>
 8007c62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c66:	2200      	movs	r2, #0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007c6e:	f7f8 ff03 	bl	8000a78 <__aeabi_dcmpeq>
 8007c72:	b9c0      	cbnz	r0, 8007ca6 <_printf_float+0x41e>
 8007c74:	4653      	mov	r3, sl
 8007c76:	f108 0201 	add.w	r2, r8, #1
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	d10c      	bne.n	8007c9e <_printf_float+0x416>
 8007c84:	e65b      	b.n	800793e <_printf_float+0xb6>
 8007c86:	2301      	movs	r3, #1
 8007c88:	465a      	mov	r2, fp
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	47b8      	blx	r7
 8007c90:	3001      	adds	r0, #1
 8007c92:	f43f ae54 	beq.w	800793e <_printf_float+0xb6>
 8007c96:	f108 0801 	add.w	r8, r8, #1
 8007c9a:	45d0      	cmp	r8, sl
 8007c9c:	dbf3      	blt.n	8007c86 <_printf_float+0x3fe>
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ca4:	e6df      	b.n	8007a66 <_printf_float+0x1de>
 8007ca6:	f04f 0800 	mov.w	r8, #0
 8007caa:	f104 0b1a 	add.w	fp, r4, #26
 8007cae:	e7f4      	b.n	8007c9a <_printf_float+0x412>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4642      	mov	r2, r8
 8007cb4:	e7e1      	b.n	8007c7a <_printf_float+0x3f2>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	464a      	mov	r2, r9
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	f43f ae3c 	beq.w	800793e <_printf_float+0xb6>
 8007cc6:	f108 0801 	add.w	r8, r8, #1
 8007cca:	68e3      	ldr	r3, [r4, #12]
 8007ccc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007cce:	1a5b      	subs	r3, r3, r1
 8007cd0:	4543      	cmp	r3, r8
 8007cd2:	dcf0      	bgt.n	8007cb6 <_printf_float+0x42e>
 8007cd4:	e6fc      	b.n	8007ad0 <_printf_float+0x248>
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	f104 0919 	add.w	r9, r4, #25
 8007cde:	e7f4      	b.n	8007cca <_printf_float+0x442>

08007ce0 <_printf_common>:
 8007ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	4616      	mov	r6, r2
 8007ce6:	4698      	mov	r8, r3
 8007ce8:	688a      	ldr	r2, [r1, #8]
 8007cea:	690b      	ldr	r3, [r1, #16]
 8007cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	bfb8      	it	lt
 8007cf4:	4613      	movlt	r3, r2
 8007cf6:	6033      	str	r3, [r6, #0]
 8007cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	b10a      	cbz	r2, 8007d06 <_printf_common+0x26>
 8007d02:	3301      	adds	r3, #1
 8007d04:	6033      	str	r3, [r6, #0]
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	0699      	lsls	r1, r3, #26
 8007d0a:	bf42      	ittt	mi
 8007d0c:	6833      	ldrmi	r3, [r6, #0]
 8007d0e:	3302      	addmi	r3, #2
 8007d10:	6033      	strmi	r3, [r6, #0]
 8007d12:	6825      	ldr	r5, [r4, #0]
 8007d14:	f015 0506 	ands.w	r5, r5, #6
 8007d18:	d106      	bne.n	8007d28 <_printf_common+0x48>
 8007d1a:	f104 0a19 	add.w	sl, r4, #25
 8007d1e:	68e3      	ldr	r3, [r4, #12]
 8007d20:	6832      	ldr	r2, [r6, #0]
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	42ab      	cmp	r3, r5
 8007d26:	dc26      	bgt.n	8007d76 <_printf_common+0x96>
 8007d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d2c:	6822      	ldr	r2, [r4, #0]
 8007d2e:	3b00      	subs	r3, #0
 8007d30:	bf18      	it	ne
 8007d32:	2301      	movne	r3, #1
 8007d34:	0692      	lsls	r2, r2, #26
 8007d36:	d42b      	bmi.n	8007d90 <_printf_common+0xb0>
 8007d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d3c:	4641      	mov	r1, r8
 8007d3e:	4638      	mov	r0, r7
 8007d40:	47c8      	blx	r9
 8007d42:	3001      	adds	r0, #1
 8007d44:	d01e      	beq.n	8007d84 <_printf_common+0xa4>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	6922      	ldr	r2, [r4, #16]
 8007d4a:	f003 0306 	and.w	r3, r3, #6
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	bf02      	ittt	eq
 8007d52:	68e5      	ldreq	r5, [r4, #12]
 8007d54:	6833      	ldreq	r3, [r6, #0]
 8007d56:	1aed      	subeq	r5, r5, r3
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	bf0c      	ite	eq
 8007d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d60:	2500      	movne	r5, #0
 8007d62:	4293      	cmp	r3, r2
 8007d64:	bfc4      	itt	gt
 8007d66:	1a9b      	subgt	r3, r3, r2
 8007d68:	18ed      	addgt	r5, r5, r3
 8007d6a:	2600      	movs	r6, #0
 8007d6c:	341a      	adds	r4, #26
 8007d6e:	42b5      	cmp	r5, r6
 8007d70:	d11a      	bne.n	8007da8 <_printf_common+0xc8>
 8007d72:	2000      	movs	r0, #0
 8007d74:	e008      	b.n	8007d88 <_printf_common+0xa8>
 8007d76:	2301      	movs	r3, #1
 8007d78:	4652      	mov	r2, sl
 8007d7a:	4641      	mov	r1, r8
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	47c8      	blx	r9
 8007d80:	3001      	adds	r0, #1
 8007d82:	d103      	bne.n	8007d8c <_printf_common+0xac>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	e7c6      	b.n	8007d1e <_printf_common+0x3e>
 8007d90:	18e1      	adds	r1, r4, r3
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	2030      	movs	r0, #48	@ 0x30
 8007d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d9a:	4422      	add	r2, r4
 8007d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007da0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007da4:	3302      	adds	r3, #2
 8007da6:	e7c7      	b.n	8007d38 <_printf_common+0x58>
 8007da8:	2301      	movs	r3, #1
 8007daa:	4622      	mov	r2, r4
 8007dac:	4641      	mov	r1, r8
 8007dae:	4638      	mov	r0, r7
 8007db0:	47c8      	blx	r9
 8007db2:	3001      	adds	r0, #1
 8007db4:	d0e6      	beq.n	8007d84 <_printf_common+0xa4>
 8007db6:	3601      	adds	r6, #1
 8007db8:	e7d9      	b.n	8007d6e <_printf_common+0x8e>
	...

08007dbc <_printf_i>:
 8007dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	7e0f      	ldrb	r7, [r1, #24]
 8007dc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007dc4:	2f78      	cmp	r7, #120	@ 0x78
 8007dc6:	4691      	mov	r9, r2
 8007dc8:	4680      	mov	r8, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	469a      	mov	sl, r3
 8007dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dd2:	d807      	bhi.n	8007de4 <_printf_i+0x28>
 8007dd4:	2f62      	cmp	r7, #98	@ 0x62
 8007dd6:	d80a      	bhi.n	8007dee <_printf_i+0x32>
 8007dd8:	2f00      	cmp	r7, #0
 8007dda:	f000 80d1 	beq.w	8007f80 <_printf_i+0x1c4>
 8007dde:	2f58      	cmp	r7, #88	@ 0x58
 8007de0:	f000 80b8 	beq.w	8007f54 <_printf_i+0x198>
 8007de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007dec:	e03a      	b.n	8007e64 <_printf_i+0xa8>
 8007dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007df2:	2b15      	cmp	r3, #21
 8007df4:	d8f6      	bhi.n	8007de4 <_printf_i+0x28>
 8007df6:	a101      	add	r1, pc, #4	@ (adr r1, 8007dfc <_printf_i+0x40>)
 8007df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dfc:	08007e55 	.word	0x08007e55
 8007e00:	08007e69 	.word	0x08007e69
 8007e04:	08007de5 	.word	0x08007de5
 8007e08:	08007de5 	.word	0x08007de5
 8007e0c:	08007de5 	.word	0x08007de5
 8007e10:	08007de5 	.word	0x08007de5
 8007e14:	08007e69 	.word	0x08007e69
 8007e18:	08007de5 	.word	0x08007de5
 8007e1c:	08007de5 	.word	0x08007de5
 8007e20:	08007de5 	.word	0x08007de5
 8007e24:	08007de5 	.word	0x08007de5
 8007e28:	08007f67 	.word	0x08007f67
 8007e2c:	08007e93 	.word	0x08007e93
 8007e30:	08007f21 	.word	0x08007f21
 8007e34:	08007de5 	.word	0x08007de5
 8007e38:	08007de5 	.word	0x08007de5
 8007e3c:	08007f89 	.word	0x08007f89
 8007e40:	08007de5 	.word	0x08007de5
 8007e44:	08007e93 	.word	0x08007e93
 8007e48:	08007de5 	.word	0x08007de5
 8007e4c:	08007de5 	.word	0x08007de5
 8007e50:	08007f29 	.word	0x08007f29
 8007e54:	6833      	ldr	r3, [r6, #0]
 8007e56:	1d1a      	adds	r2, r3, #4
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6032      	str	r2, [r6, #0]
 8007e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e64:	2301      	movs	r3, #1
 8007e66:	e09c      	b.n	8007fa2 <_printf_i+0x1e6>
 8007e68:	6833      	ldr	r3, [r6, #0]
 8007e6a:	6820      	ldr	r0, [r4, #0]
 8007e6c:	1d19      	adds	r1, r3, #4
 8007e6e:	6031      	str	r1, [r6, #0]
 8007e70:	0606      	lsls	r6, r0, #24
 8007e72:	d501      	bpl.n	8007e78 <_printf_i+0xbc>
 8007e74:	681d      	ldr	r5, [r3, #0]
 8007e76:	e003      	b.n	8007e80 <_printf_i+0xc4>
 8007e78:	0645      	lsls	r5, r0, #25
 8007e7a:	d5fb      	bpl.n	8007e74 <_printf_i+0xb8>
 8007e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e80:	2d00      	cmp	r5, #0
 8007e82:	da03      	bge.n	8007e8c <_printf_i+0xd0>
 8007e84:	232d      	movs	r3, #45	@ 0x2d
 8007e86:	426d      	negs	r5, r5
 8007e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e8c:	4858      	ldr	r0, [pc, #352]	@ (8007ff0 <_printf_i+0x234>)
 8007e8e:	230a      	movs	r3, #10
 8007e90:	e011      	b.n	8007eb6 <_printf_i+0xfa>
 8007e92:	6821      	ldr	r1, [r4, #0]
 8007e94:	6833      	ldr	r3, [r6, #0]
 8007e96:	0608      	lsls	r0, r1, #24
 8007e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e9c:	d402      	bmi.n	8007ea4 <_printf_i+0xe8>
 8007e9e:	0649      	lsls	r1, r1, #25
 8007ea0:	bf48      	it	mi
 8007ea2:	b2ad      	uxthmi	r5, r5
 8007ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ea6:	4852      	ldr	r0, [pc, #328]	@ (8007ff0 <_printf_i+0x234>)
 8007ea8:	6033      	str	r3, [r6, #0]
 8007eaa:	bf14      	ite	ne
 8007eac:	230a      	movne	r3, #10
 8007eae:	2308      	moveq	r3, #8
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007eb6:	6866      	ldr	r6, [r4, #4]
 8007eb8:	60a6      	str	r6, [r4, #8]
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	db05      	blt.n	8007eca <_printf_i+0x10e>
 8007ebe:	6821      	ldr	r1, [r4, #0]
 8007ec0:	432e      	orrs	r6, r5
 8007ec2:	f021 0104 	bic.w	r1, r1, #4
 8007ec6:	6021      	str	r1, [r4, #0]
 8007ec8:	d04b      	beq.n	8007f62 <_printf_i+0x1a6>
 8007eca:	4616      	mov	r6, r2
 8007ecc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ed0:	fb03 5711 	mls	r7, r3, r1, r5
 8007ed4:	5dc7      	ldrb	r7, [r0, r7]
 8007ed6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007eda:	462f      	mov	r7, r5
 8007edc:	42bb      	cmp	r3, r7
 8007ede:	460d      	mov	r5, r1
 8007ee0:	d9f4      	bls.n	8007ecc <_printf_i+0x110>
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d10b      	bne.n	8007efe <_printf_i+0x142>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	07df      	lsls	r7, r3, #31
 8007eea:	d508      	bpl.n	8007efe <_printf_i+0x142>
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	6861      	ldr	r1, [r4, #4]
 8007ef0:	4299      	cmp	r1, r3
 8007ef2:	bfde      	ittt	le
 8007ef4:	2330      	movle	r3, #48	@ 0x30
 8007ef6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007efa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007efe:	1b92      	subs	r2, r2, r6
 8007f00:	6122      	str	r2, [r4, #16]
 8007f02:	f8cd a000 	str.w	sl, [sp]
 8007f06:	464b      	mov	r3, r9
 8007f08:	aa03      	add	r2, sp, #12
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	f7ff fee7 	bl	8007ce0 <_printf_common>
 8007f12:	3001      	adds	r0, #1
 8007f14:	d14a      	bne.n	8007fac <_printf_i+0x1f0>
 8007f16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f1a:	b004      	add	sp, #16
 8007f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	f043 0320 	orr.w	r3, r3, #32
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	4832      	ldr	r0, [pc, #200]	@ (8007ff4 <_printf_i+0x238>)
 8007f2a:	2778      	movs	r7, #120	@ 0x78
 8007f2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	6831      	ldr	r1, [r6, #0]
 8007f34:	061f      	lsls	r7, r3, #24
 8007f36:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f3a:	d402      	bmi.n	8007f42 <_printf_i+0x186>
 8007f3c:	065f      	lsls	r7, r3, #25
 8007f3e:	bf48      	it	mi
 8007f40:	b2ad      	uxthmi	r5, r5
 8007f42:	6031      	str	r1, [r6, #0]
 8007f44:	07d9      	lsls	r1, r3, #31
 8007f46:	bf44      	itt	mi
 8007f48:	f043 0320 	orrmi.w	r3, r3, #32
 8007f4c:	6023      	strmi	r3, [r4, #0]
 8007f4e:	b11d      	cbz	r5, 8007f58 <_printf_i+0x19c>
 8007f50:	2310      	movs	r3, #16
 8007f52:	e7ad      	b.n	8007eb0 <_printf_i+0xf4>
 8007f54:	4826      	ldr	r0, [pc, #152]	@ (8007ff0 <_printf_i+0x234>)
 8007f56:	e7e9      	b.n	8007f2c <_printf_i+0x170>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	f023 0320 	bic.w	r3, r3, #32
 8007f5e:	6023      	str	r3, [r4, #0]
 8007f60:	e7f6      	b.n	8007f50 <_printf_i+0x194>
 8007f62:	4616      	mov	r6, r2
 8007f64:	e7bd      	b.n	8007ee2 <_printf_i+0x126>
 8007f66:	6833      	ldr	r3, [r6, #0]
 8007f68:	6825      	ldr	r5, [r4, #0]
 8007f6a:	6961      	ldr	r1, [r4, #20]
 8007f6c:	1d18      	adds	r0, r3, #4
 8007f6e:	6030      	str	r0, [r6, #0]
 8007f70:	062e      	lsls	r6, r5, #24
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	d501      	bpl.n	8007f7a <_printf_i+0x1be>
 8007f76:	6019      	str	r1, [r3, #0]
 8007f78:	e002      	b.n	8007f80 <_printf_i+0x1c4>
 8007f7a:	0668      	lsls	r0, r5, #25
 8007f7c:	d5fb      	bpl.n	8007f76 <_printf_i+0x1ba>
 8007f7e:	8019      	strh	r1, [r3, #0]
 8007f80:	2300      	movs	r3, #0
 8007f82:	6123      	str	r3, [r4, #16]
 8007f84:	4616      	mov	r6, r2
 8007f86:	e7bc      	b.n	8007f02 <_printf_i+0x146>
 8007f88:	6833      	ldr	r3, [r6, #0]
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	6032      	str	r2, [r6, #0]
 8007f8e:	681e      	ldr	r6, [r3, #0]
 8007f90:	6862      	ldr	r2, [r4, #4]
 8007f92:	2100      	movs	r1, #0
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7f8 f8f3 	bl	8000180 <memchr>
 8007f9a:	b108      	cbz	r0, 8007fa0 <_printf_i+0x1e4>
 8007f9c:	1b80      	subs	r0, r0, r6
 8007f9e:	6060      	str	r0, [r4, #4]
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007faa:	e7aa      	b.n	8007f02 <_printf_i+0x146>
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	4632      	mov	r2, r6
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	47d0      	blx	sl
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d0ad      	beq.n	8007f16 <_printf_i+0x15a>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	079b      	lsls	r3, r3, #30
 8007fbe:	d413      	bmi.n	8007fe8 <_printf_i+0x22c>
 8007fc0:	68e0      	ldr	r0, [r4, #12]
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	4298      	cmp	r0, r3
 8007fc6:	bfb8      	it	lt
 8007fc8:	4618      	movlt	r0, r3
 8007fca:	e7a6      	b.n	8007f1a <_printf_i+0x15e>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4632      	mov	r2, r6
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	47d0      	blx	sl
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d09d      	beq.n	8007f16 <_printf_i+0x15a>
 8007fda:	3501      	adds	r5, #1
 8007fdc:	68e3      	ldr	r3, [r4, #12]
 8007fde:	9903      	ldr	r1, [sp, #12]
 8007fe0:	1a5b      	subs	r3, r3, r1
 8007fe2:	42ab      	cmp	r3, r5
 8007fe4:	dcf2      	bgt.n	8007fcc <_printf_i+0x210>
 8007fe6:	e7eb      	b.n	8007fc0 <_printf_i+0x204>
 8007fe8:	2500      	movs	r5, #0
 8007fea:	f104 0619 	add.w	r6, r4, #25
 8007fee:	e7f5      	b.n	8007fdc <_printf_i+0x220>
 8007ff0:	0800c322 	.word	0x0800c322
 8007ff4:	0800c333 	.word	0x0800c333

08007ff8 <_scanf_float>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	b087      	sub	sp, #28
 8007ffe:	4691      	mov	r9, r2
 8008000:	9303      	str	r3, [sp, #12]
 8008002:	688b      	ldr	r3, [r1, #8]
 8008004:	1e5a      	subs	r2, r3, #1
 8008006:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800800a:	bf81      	itttt	hi
 800800c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008010:	eb03 0b05 	addhi.w	fp, r3, r5
 8008014:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008018:	608b      	strhi	r3, [r1, #8]
 800801a:	680b      	ldr	r3, [r1, #0]
 800801c:	460a      	mov	r2, r1
 800801e:	f04f 0500 	mov.w	r5, #0
 8008022:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008026:	f842 3b1c 	str.w	r3, [r2], #28
 800802a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800802e:	4680      	mov	r8, r0
 8008030:	460c      	mov	r4, r1
 8008032:	bf98      	it	ls
 8008034:	f04f 0b00 	movls.w	fp, #0
 8008038:	9201      	str	r2, [sp, #4]
 800803a:	4616      	mov	r6, r2
 800803c:	46aa      	mov	sl, r5
 800803e:	462f      	mov	r7, r5
 8008040:	9502      	str	r5, [sp, #8]
 8008042:	68a2      	ldr	r2, [r4, #8]
 8008044:	b15a      	cbz	r2, 800805e <_scanf_float+0x66>
 8008046:	f8d9 3000 	ldr.w	r3, [r9]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b4e      	cmp	r3, #78	@ 0x4e
 800804e:	d863      	bhi.n	8008118 <_scanf_float+0x120>
 8008050:	2b40      	cmp	r3, #64	@ 0x40
 8008052:	d83b      	bhi.n	80080cc <_scanf_float+0xd4>
 8008054:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008058:	b2c8      	uxtb	r0, r1
 800805a:	280e      	cmp	r0, #14
 800805c:	d939      	bls.n	80080d2 <_scanf_float+0xda>
 800805e:	b11f      	cbz	r7, 8008068 <_scanf_float+0x70>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800806c:	f1ba 0f01 	cmp.w	sl, #1
 8008070:	f200 8114 	bhi.w	800829c <_scanf_float+0x2a4>
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	429e      	cmp	r6, r3
 8008078:	f200 8105 	bhi.w	8008286 <_scanf_float+0x28e>
 800807c:	2001      	movs	r0, #1
 800807e:	b007      	add	sp, #28
 8008080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008084:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008088:	2a0d      	cmp	r2, #13
 800808a:	d8e8      	bhi.n	800805e <_scanf_float+0x66>
 800808c:	a101      	add	r1, pc, #4	@ (adr r1, 8008094 <_scanf_float+0x9c>)
 800808e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008092:	bf00      	nop
 8008094:	080081dd 	.word	0x080081dd
 8008098:	0800805f 	.word	0x0800805f
 800809c:	0800805f 	.word	0x0800805f
 80080a0:	0800805f 	.word	0x0800805f
 80080a4:	08008239 	.word	0x08008239
 80080a8:	08008213 	.word	0x08008213
 80080ac:	0800805f 	.word	0x0800805f
 80080b0:	0800805f 	.word	0x0800805f
 80080b4:	080081eb 	.word	0x080081eb
 80080b8:	0800805f 	.word	0x0800805f
 80080bc:	0800805f 	.word	0x0800805f
 80080c0:	0800805f 	.word	0x0800805f
 80080c4:	0800805f 	.word	0x0800805f
 80080c8:	080081a7 	.word	0x080081a7
 80080cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80080d0:	e7da      	b.n	8008088 <_scanf_float+0x90>
 80080d2:	290e      	cmp	r1, #14
 80080d4:	d8c3      	bhi.n	800805e <_scanf_float+0x66>
 80080d6:	a001      	add	r0, pc, #4	@ (adr r0, 80080dc <_scanf_float+0xe4>)
 80080d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80080dc:	08008197 	.word	0x08008197
 80080e0:	0800805f 	.word	0x0800805f
 80080e4:	08008197 	.word	0x08008197
 80080e8:	08008227 	.word	0x08008227
 80080ec:	0800805f 	.word	0x0800805f
 80080f0:	08008139 	.word	0x08008139
 80080f4:	0800817d 	.word	0x0800817d
 80080f8:	0800817d 	.word	0x0800817d
 80080fc:	0800817d 	.word	0x0800817d
 8008100:	0800817d 	.word	0x0800817d
 8008104:	0800817d 	.word	0x0800817d
 8008108:	0800817d 	.word	0x0800817d
 800810c:	0800817d 	.word	0x0800817d
 8008110:	0800817d 	.word	0x0800817d
 8008114:	0800817d 	.word	0x0800817d
 8008118:	2b6e      	cmp	r3, #110	@ 0x6e
 800811a:	d809      	bhi.n	8008130 <_scanf_float+0x138>
 800811c:	2b60      	cmp	r3, #96	@ 0x60
 800811e:	d8b1      	bhi.n	8008084 <_scanf_float+0x8c>
 8008120:	2b54      	cmp	r3, #84	@ 0x54
 8008122:	d07b      	beq.n	800821c <_scanf_float+0x224>
 8008124:	2b59      	cmp	r3, #89	@ 0x59
 8008126:	d19a      	bne.n	800805e <_scanf_float+0x66>
 8008128:	2d07      	cmp	r5, #7
 800812a:	d198      	bne.n	800805e <_scanf_float+0x66>
 800812c:	2508      	movs	r5, #8
 800812e:	e02f      	b.n	8008190 <_scanf_float+0x198>
 8008130:	2b74      	cmp	r3, #116	@ 0x74
 8008132:	d073      	beq.n	800821c <_scanf_float+0x224>
 8008134:	2b79      	cmp	r3, #121	@ 0x79
 8008136:	e7f6      	b.n	8008126 <_scanf_float+0x12e>
 8008138:	6821      	ldr	r1, [r4, #0]
 800813a:	05c8      	lsls	r0, r1, #23
 800813c:	d51e      	bpl.n	800817c <_scanf_float+0x184>
 800813e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008142:	6021      	str	r1, [r4, #0]
 8008144:	3701      	adds	r7, #1
 8008146:	f1bb 0f00 	cmp.w	fp, #0
 800814a:	d003      	beq.n	8008154 <_scanf_float+0x15c>
 800814c:	3201      	adds	r2, #1
 800814e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008152:	60a2      	str	r2, [r4, #8]
 8008154:	68a3      	ldr	r3, [r4, #8]
 8008156:	3b01      	subs	r3, #1
 8008158:	60a3      	str	r3, [r4, #8]
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	3301      	adds	r3, #1
 800815e:	6123      	str	r3, [r4, #16]
 8008160:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008164:	3b01      	subs	r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	f8c9 3004 	str.w	r3, [r9, #4]
 800816c:	f340 8082 	ble.w	8008274 <_scanf_float+0x27c>
 8008170:	f8d9 3000 	ldr.w	r3, [r9]
 8008174:	3301      	adds	r3, #1
 8008176:	f8c9 3000 	str.w	r3, [r9]
 800817a:	e762      	b.n	8008042 <_scanf_float+0x4a>
 800817c:	eb1a 0105 	adds.w	r1, sl, r5
 8008180:	f47f af6d 	bne.w	800805e <_scanf_float+0x66>
 8008184:	6822      	ldr	r2, [r4, #0]
 8008186:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800818a:	6022      	str	r2, [r4, #0]
 800818c:	460d      	mov	r5, r1
 800818e:	468a      	mov	sl, r1
 8008190:	f806 3b01 	strb.w	r3, [r6], #1
 8008194:	e7de      	b.n	8008154 <_scanf_float+0x15c>
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	0610      	lsls	r0, r2, #24
 800819a:	f57f af60 	bpl.w	800805e <_scanf_float+0x66>
 800819e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	e7f4      	b.n	8008190 <_scanf_float+0x198>
 80081a6:	f1ba 0f00 	cmp.w	sl, #0
 80081aa:	d10c      	bne.n	80081c6 <_scanf_float+0x1ce>
 80081ac:	b977      	cbnz	r7, 80081cc <_scanf_float+0x1d4>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80081b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80081b8:	d108      	bne.n	80081cc <_scanf_float+0x1d4>
 80081ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	f04f 0a01 	mov.w	sl, #1
 80081c4:	e7e4      	b.n	8008190 <_scanf_float+0x198>
 80081c6:	f1ba 0f02 	cmp.w	sl, #2
 80081ca:	d050      	beq.n	800826e <_scanf_float+0x276>
 80081cc:	2d01      	cmp	r5, #1
 80081ce:	d002      	beq.n	80081d6 <_scanf_float+0x1de>
 80081d0:	2d04      	cmp	r5, #4
 80081d2:	f47f af44 	bne.w	800805e <_scanf_float+0x66>
 80081d6:	3501      	adds	r5, #1
 80081d8:	b2ed      	uxtb	r5, r5
 80081da:	e7d9      	b.n	8008190 <_scanf_float+0x198>
 80081dc:	f1ba 0f01 	cmp.w	sl, #1
 80081e0:	f47f af3d 	bne.w	800805e <_scanf_float+0x66>
 80081e4:	f04f 0a02 	mov.w	sl, #2
 80081e8:	e7d2      	b.n	8008190 <_scanf_float+0x198>
 80081ea:	b975      	cbnz	r5, 800820a <_scanf_float+0x212>
 80081ec:	2f00      	cmp	r7, #0
 80081ee:	f47f af37 	bne.w	8008060 <_scanf_float+0x68>
 80081f2:	6822      	ldr	r2, [r4, #0]
 80081f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80081f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80081fc:	f040 80fe 	bne.w	80083fc <_scanf_float+0x404>
 8008200:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008204:	6022      	str	r2, [r4, #0]
 8008206:	2501      	movs	r5, #1
 8008208:	e7c2      	b.n	8008190 <_scanf_float+0x198>
 800820a:	2d03      	cmp	r5, #3
 800820c:	d0e3      	beq.n	80081d6 <_scanf_float+0x1de>
 800820e:	2d05      	cmp	r5, #5
 8008210:	e7df      	b.n	80081d2 <_scanf_float+0x1da>
 8008212:	2d02      	cmp	r5, #2
 8008214:	f47f af23 	bne.w	800805e <_scanf_float+0x66>
 8008218:	2503      	movs	r5, #3
 800821a:	e7b9      	b.n	8008190 <_scanf_float+0x198>
 800821c:	2d06      	cmp	r5, #6
 800821e:	f47f af1e 	bne.w	800805e <_scanf_float+0x66>
 8008222:	2507      	movs	r5, #7
 8008224:	e7b4      	b.n	8008190 <_scanf_float+0x198>
 8008226:	6822      	ldr	r2, [r4, #0]
 8008228:	0591      	lsls	r1, r2, #22
 800822a:	f57f af18 	bpl.w	800805e <_scanf_float+0x66>
 800822e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008232:	6022      	str	r2, [r4, #0]
 8008234:	9702      	str	r7, [sp, #8]
 8008236:	e7ab      	b.n	8008190 <_scanf_float+0x198>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800823e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008242:	d005      	beq.n	8008250 <_scanf_float+0x258>
 8008244:	0550      	lsls	r0, r2, #21
 8008246:	f57f af0a 	bpl.w	800805e <_scanf_float+0x66>
 800824a:	2f00      	cmp	r7, #0
 800824c:	f000 80d6 	beq.w	80083fc <_scanf_float+0x404>
 8008250:	0591      	lsls	r1, r2, #22
 8008252:	bf58      	it	pl
 8008254:	9902      	ldrpl	r1, [sp, #8]
 8008256:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800825a:	bf58      	it	pl
 800825c:	1a79      	subpl	r1, r7, r1
 800825e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008262:	bf58      	it	pl
 8008264:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008268:	6022      	str	r2, [r4, #0]
 800826a:	2700      	movs	r7, #0
 800826c:	e790      	b.n	8008190 <_scanf_float+0x198>
 800826e:	f04f 0a03 	mov.w	sl, #3
 8008272:	e78d      	b.n	8008190 <_scanf_float+0x198>
 8008274:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008278:	4649      	mov	r1, r9
 800827a:	4640      	mov	r0, r8
 800827c:	4798      	blx	r3
 800827e:	2800      	cmp	r0, #0
 8008280:	f43f aedf 	beq.w	8008042 <_scanf_float+0x4a>
 8008284:	e6eb      	b.n	800805e <_scanf_float+0x66>
 8008286:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800828a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800828e:	464a      	mov	r2, r9
 8008290:	4640      	mov	r0, r8
 8008292:	4798      	blx	r3
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	3b01      	subs	r3, #1
 8008298:	6123      	str	r3, [r4, #16]
 800829a:	e6eb      	b.n	8008074 <_scanf_float+0x7c>
 800829c:	1e6b      	subs	r3, r5, #1
 800829e:	2b06      	cmp	r3, #6
 80082a0:	d824      	bhi.n	80082ec <_scanf_float+0x2f4>
 80082a2:	2d02      	cmp	r5, #2
 80082a4:	d836      	bhi.n	8008314 <_scanf_float+0x31c>
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	429e      	cmp	r6, r3
 80082aa:	f67f aee7 	bls.w	800807c <_scanf_float+0x84>
 80082ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082b6:	464a      	mov	r2, r9
 80082b8:	4640      	mov	r0, r8
 80082ba:	4798      	blx	r3
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	3b01      	subs	r3, #1
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	e7f0      	b.n	80082a6 <_scanf_float+0x2ae>
 80082c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082c8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80082cc:	464a      	mov	r2, r9
 80082ce:	4640      	mov	r0, r8
 80082d0:	4798      	blx	r3
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80082dc:	fa5f fa8a 	uxtb.w	sl, sl
 80082e0:	f1ba 0f02 	cmp.w	sl, #2
 80082e4:	d1ee      	bne.n	80082c4 <_scanf_float+0x2cc>
 80082e6:	3d03      	subs	r5, #3
 80082e8:	b2ed      	uxtb	r5, r5
 80082ea:	1b76      	subs	r6, r6, r5
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	05da      	lsls	r2, r3, #23
 80082f0:	d530      	bpl.n	8008354 <_scanf_float+0x35c>
 80082f2:	055b      	lsls	r3, r3, #21
 80082f4:	d511      	bpl.n	800831a <_scanf_float+0x322>
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	429e      	cmp	r6, r3
 80082fa:	f67f aebf 	bls.w	800807c <_scanf_float+0x84>
 80082fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008302:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008306:	464a      	mov	r2, r9
 8008308:	4640      	mov	r0, r8
 800830a:	4798      	blx	r3
 800830c:	6923      	ldr	r3, [r4, #16]
 800830e:	3b01      	subs	r3, #1
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	e7f0      	b.n	80082f6 <_scanf_float+0x2fe>
 8008314:	46aa      	mov	sl, r5
 8008316:	46b3      	mov	fp, r6
 8008318:	e7de      	b.n	80082d8 <_scanf_float+0x2e0>
 800831a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	2965      	cmp	r1, #101	@ 0x65
 8008322:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008326:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800832a:	6123      	str	r3, [r4, #16]
 800832c:	d00c      	beq.n	8008348 <_scanf_float+0x350>
 800832e:	2945      	cmp	r1, #69	@ 0x45
 8008330:	d00a      	beq.n	8008348 <_scanf_float+0x350>
 8008332:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008336:	464a      	mov	r2, r9
 8008338:	4640      	mov	r0, r8
 800833a:	4798      	blx	r3
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008342:	3b01      	subs	r3, #1
 8008344:	1eb5      	subs	r5, r6, #2
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800834c:	464a      	mov	r2, r9
 800834e:	4640      	mov	r0, r8
 8008350:	4798      	blx	r3
 8008352:	462e      	mov	r6, r5
 8008354:	6822      	ldr	r2, [r4, #0]
 8008356:	f012 0210 	ands.w	r2, r2, #16
 800835a:	d001      	beq.n	8008360 <_scanf_float+0x368>
 800835c:	2000      	movs	r0, #0
 800835e:	e68e      	b.n	800807e <_scanf_float+0x86>
 8008360:	7032      	strb	r2, [r6, #0]
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800836c:	d125      	bne.n	80083ba <_scanf_float+0x3c2>
 800836e:	9b02      	ldr	r3, [sp, #8]
 8008370:	429f      	cmp	r7, r3
 8008372:	d00a      	beq.n	800838a <_scanf_float+0x392>
 8008374:	1bda      	subs	r2, r3, r7
 8008376:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800837a:	429e      	cmp	r6, r3
 800837c:	bf28      	it	cs
 800837e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008382:	491f      	ldr	r1, [pc, #124]	@ (8008400 <_scanf_float+0x408>)
 8008384:	4630      	mov	r0, r6
 8008386:	f000 f971 	bl	800866c <siprintf>
 800838a:	2200      	movs	r2, #0
 800838c:	9901      	ldr	r1, [sp, #4]
 800838e:	4640      	mov	r0, r8
 8008390:	f002 fcda 	bl	800ad48 <_strtod_r>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	6825      	ldr	r5, [r4, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f015 0f02 	tst.w	r5, #2
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	f103 0204 	add.w	r2, r3, #4
 80083a6:	d015      	beq.n	80083d4 <_scanf_float+0x3dc>
 80083a8:	9903      	ldr	r1, [sp, #12]
 80083aa:	600a      	str	r2, [r1, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	e9c3 6700 	strd	r6, r7, [r3]
 80083b2:	68e3      	ldr	r3, [r4, #12]
 80083b4:	3301      	adds	r3, #1
 80083b6:	60e3      	str	r3, [r4, #12]
 80083b8:	e7d0      	b.n	800835c <_scanf_float+0x364>
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0e4      	beq.n	800838a <_scanf_float+0x392>
 80083c0:	9905      	ldr	r1, [sp, #20]
 80083c2:	230a      	movs	r3, #10
 80083c4:	3101      	adds	r1, #1
 80083c6:	4640      	mov	r0, r8
 80083c8:	f002 fd3e 	bl	800ae48 <_strtol_r>
 80083cc:	9b04      	ldr	r3, [sp, #16]
 80083ce:	9e05      	ldr	r6, [sp, #20]
 80083d0:	1ac2      	subs	r2, r0, r3
 80083d2:	e7d0      	b.n	8008376 <_scanf_float+0x37e>
 80083d4:	076d      	lsls	r5, r5, #29
 80083d6:	d4e7      	bmi.n	80083a8 <_scanf_float+0x3b0>
 80083d8:	9d03      	ldr	r5, [sp, #12]
 80083da:	602a      	str	r2, [r5, #0]
 80083dc:	681d      	ldr	r5, [r3, #0]
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	f7f8 fb7b 	bl	8000adc <__aeabi_dcmpun>
 80083e6:	b120      	cbz	r0, 80083f2 <_scanf_float+0x3fa>
 80083e8:	4806      	ldr	r0, [pc, #24]	@ (8008404 <_scanf_float+0x40c>)
 80083ea:	f000 fab9 	bl	8008960 <nanf>
 80083ee:	6028      	str	r0, [r5, #0]
 80083f0:	e7df      	b.n	80083b2 <_scanf_float+0x3ba>
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f8 fbcf 	bl	8000b98 <__aeabi_d2f>
 80083fa:	e7f8      	b.n	80083ee <_scanf_float+0x3f6>
 80083fc:	2700      	movs	r7, #0
 80083fe:	e633      	b.n	8008068 <_scanf_float+0x70>
 8008400:	0800c344 	.word	0x0800c344
 8008404:	0800c485 	.word	0x0800c485

08008408 <std>:
 8008408:	2300      	movs	r3, #0
 800840a:	b510      	push	{r4, lr}
 800840c:	4604      	mov	r4, r0
 800840e:	e9c0 3300 	strd	r3, r3, [r0]
 8008412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008416:	6083      	str	r3, [r0, #8]
 8008418:	8181      	strh	r1, [r0, #12]
 800841a:	6643      	str	r3, [r0, #100]	@ 0x64
 800841c:	81c2      	strh	r2, [r0, #14]
 800841e:	6183      	str	r3, [r0, #24]
 8008420:	4619      	mov	r1, r3
 8008422:	2208      	movs	r2, #8
 8008424:	305c      	adds	r0, #92	@ 0x5c
 8008426:	f000 fa1b 	bl	8008860 <memset>
 800842a:	4b0d      	ldr	r3, [pc, #52]	@ (8008460 <std+0x58>)
 800842c:	6263      	str	r3, [r4, #36]	@ 0x24
 800842e:	4b0d      	ldr	r3, [pc, #52]	@ (8008464 <std+0x5c>)
 8008430:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008432:	4b0d      	ldr	r3, [pc, #52]	@ (8008468 <std+0x60>)
 8008434:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008436:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <std+0x64>)
 8008438:	6323      	str	r3, [r4, #48]	@ 0x30
 800843a:	4b0d      	ldr	r3, [pc, #52]	@ (8008470 <std+0x68>)
 800843c:	6224      	str	r4, [r4, #32]
 800843e:	429c      	cmp	r4, r3
 8008440:	d006      	beq.n	8008450 <std+0x48>
 8008442:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008446:	4294      	cmp	r4, r2
 8008448:	d002      	beq.n	8008450 <std+0x48>
 800844a:	33d0      	adds	r3, #208	@ 0xd0
 800844c:	429c      	cmp	r4, r3
 800844e:	d105      	bne.n	800845c <std+0x54>
 8008450:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008458:	f000 ba7e 	b.w	8008958 <__retarget_lock_init_recursive>
 800845c:	bd10      	pop	{r4, pc}
 800845e:	bf00      	nop
 8008460:	080086b1 	.word	0x080086b1
 8008464:	080086d3 	.word	0x080086d3
 8008468:	0800870b 	.word	0x0800870b
 800846c:	0800872f 	.word	0x0800872f
 8008470:	2000060c 	.word	0x2000060c

08008474 <stdio_exit_handler>:
 8008474:	4a02      	ldr	r2, [pc, #8]	@ (8008480 <stdio_exit_handler+0xc>)
 8008476:	4903      	ldr	r1, [pc, #12]	@ (8008484 <stdio_exit_handler+0x10>)
 8008478:	4803      	ldr	r0, [pc, #12]	@ (8008488 <stdio_exit_handler+0x14>)
 800847a:	f000 b869 	b.w	8008550 <_fwalk_sglue>
 800847e:	bf00      	nop
 8008480:	20000018 	.word	0x20000018
 8008484:	0800b47d 	.word	0x0800b47d
 8008488:	20000028 	.word	0x20000028

0800848c <cleanup_stdio>:
 800848c:	6841      	ldr	r1, [r0, #4]
 800848e:	4b0c      	ldr	r3, [pc, #48]	@ (80084c0 <cleanup_stdio+0x34>)
 8008490:	4299      	cmp	r1, r3
 8008492:	b510      	push	{r4, lr}
 8008494:	4604      	mov	r4, r0
 8008496:	d001      	beq.n	800849c <cleanup_stdio+0x10>
 8008498:	f002 fff0 	bl	800b47c <_fflush_r>
 800849c:	68a1      	ldr	r1, [r4, #8]
 800849e:	4b09      	ldr	r3, [pc, #36]	@ (80084c4 <cleanup_stdio+0x38>)
 80084a0:	4299      	cmp	r1, r3
 80084a2:	d002      	beq.n	80084aa <cleanup_stdio+0x1e>
 80084a4:	4620      	mov	r0, r4
 80084a6:	f002 ffe9 	bl	800b47c <_fflush_r>
 80084aa:	68e1      	ldr	r1, [r4, #12]
 80084ac:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <cleanup_stdio+0x3c>)
 80084ae:	4299      	cmp	r1, r3
 80084b0:	d004      	beq.n	80084bc <cleanup_stdio+0x30>
 80084b2:	4620      	mov	r0, r4
 80084b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b8:	f002 bfe0 	b.w	800b47c <_fflush_r>
 80084bc:	bd10      	pop	{r4, pc}
 80084be:	bf00      	nop
 80084c0:	2000060c 	.word	0x2000060c
 80084c4:	20000674 	.word	0x20000674
 80084c8:	200006dc 	.word	0x200006dc

080084cc <global_stdio_init.part.0>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	4b0b      	ldr	r3, [pc, #44]	@ (80084fc <global_stdio_init.part.0+0x30>)
 80084d0:	4c0b      	ldr	r4, [pc, #44]	@ (8008500 <global_stdio_init.part.0+0x34>)
 80084d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008504 <global_stdio_init.part.0+0x38>)
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	4620      	mov	r0, r4
 80084d8:	2200      	movs	r2, #0
 80084da:	2104      	movs	r1, #4
 80084dc:	f7ff ff94 	bl	8008408 <std>
 80084e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084e4:	2201      	movs	r2, #1
 80084e6:	2109      	movs	r1, #9
 80084e8:	f7ff ff8e 	bl	8008408 <std>
 80084ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084f0:	2202      	movs	r2, #2
 80084f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f6:	2112      	movs	r1, #18
 80084f8:	f7ff bf86 	b.w	8008408 <std>
 80084fc:	20000744 	.word	0x20000744
 8008500:	2000060c 	.word	0x2000060c
 8008504:	08008475 	.word	0x08008475

08008508 <__sfp_lock_acquire>:
 8008508:	4801      	ldr	r0, [pc, #4]	@ (8008510 <__sfp_lock_acquire+0x8>)
 800850a:	f000 ba26 	b.w	800895a <__retarget_lock_acquire_recursive>
 800850e:	bf00      	nop
 8008510:	2000074d 	.word	0x2000074d

08008514 <__sfp_lock_release>:
 8008514:	4801      	ldr	r0, [pc, #4]	@ (800851c <__sfp_lock_release+0x8>)
 8008516:	f000 ba21 	b.w	800895c <__retarget_lock_release_recursive>
 800851a:	bf00      	nop
 800851c:	2000074d 	.word	0x2000074d

08008520 <__sinit>:
 8008520:	b510      	push	{r4, lr}
 8008522:	4604      	mov	r4, r0
 8008524:	f7ff fff0 	bl	8008508 <__sfp_lock_acquire>
 8008528:	6a23      	ldr	r3, [r4, #32]
 800852a:	b11b      	cbz	r3, 8008534 <__sinit+0x14>
 800852c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008530:	f7ff bff0 	b.w	8008514 <__sfp_lock_release>
 8008534:	4b04      	ldr	r3, [pc, #16]	@ (8008548 <__sinit+0x28>)
 8008536:	6223      	str	r3, [r4, #32]
 8008538:	4b04      	ldr	r3, [pc, #16]	@ (800854c <__sinit+0x2c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1f5      	bne.n	800852c <__sinit+0xc>
 8008540:	f7ff ffc4 	bl	80084cc <global_stdio_init.part.0>
 8008544:	e7f2      	b.n	800852c <__sinit+0xc>
 8008546:	bf00      	nop
 8008548:	0800848d 	.word	0x0800848d
 800854c:	20000744 	.word	0x20000744

08008550 <_fwalk_sglue>:
 8008550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008554:	4607      	mov	r7, r0
 8008556:	4688      	mov	r8, r1
 8008558:	4614      	mov	r4, r2
 800855a:	2600      	movs	r6, #0
 800855c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008560:	f1b9 0901 	subs.w	r9, r9, #1
 8008564:	d505      	bpl.n	8008572 <_fwalk_sglue+0x22>
 8008566:	6824      	ldr	r4, [r4, #0]
 8008568:	2c00      	cmp	r4, #0
 800856a:	d1f7      	bne.n	800855c <_fwalk_sglue+0xc>
 800856c:	4630      	mov	r0, r6
 800856e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d907      	bls.n	8008588 <_fwalk_sglue+0x38>
 8008578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800857c:	3301      	adds	r3, #1
 800857e:	d003      	beq.n	8008588 <_fwalk_sglue+0x38>
 8008580:	4629      	mov	r1, r5
 8008582:	4638      	mov	r0, r7
 8008584:	47c0      	blx	r8
 8008586:	4306      	orrs	r6, r0
 8008588:	3568      	adds	r5, #104	@ 0x68
 800858a:	e7e9      	b.n	8008560 <_fwalk_sglue+0x10>

0800858c <iprintf>:
 800858c:	b40f      	push	{r0, r1, r2, r3}
 800858e:	b507      	push	{r0, r1, r2, lr}
 8008590:	4906      	ldr	r1, [pc, #24]	@ (80085ac <iprintf+0x20>)
 8008592:	ab04      	add	r3, sp, #16
 8008594:	6808      	ldr	r0, [r1, #0]
 8008596:	f853 2b04 	ldr.w	r2, [r3], #4
 800859a:	6881      	ldr	r1, [r0, #8]
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	f002 fdd5 	bl	800b14c <_vfiprintf_r>
 80085a2:	b003      	add	sp, #12
 80085a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085a8:	b004      	add	sp, #16
 80085aa:	4770      	bx	lr
 80085ac:	20000024 	.word	0x20000024

080085b0 <_puts_r>:
 80085b0:	6a03      	ldr	r3, [r0, #32]
 80085b2:	b570      	push	{r4, r5, r6, lr}
 80085b4:	6884      	ldr	r4, [r0, #8]
 80085b6:	4605      	mov	r5, r0
 80085b8:	460e      	mov	r6, r1
 80085ba:	b90b      	cbnz	r3, 80085c0 <_puts_r+0x10>
 80085bc:	f7ff ffb0 	bl	8008520 <__sinit>
 80085c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085c2:	07db      	lsls	r3, r3, #31
 80085c4:	d405      	bmi.n	80085d2 <_puts_r+0x22>
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	0598      	lsls	r0, r3, #22
 80085ca:	d402      	bmi.n	80085d2 <_puts_r+0x22>
 80085cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085ce:	f000 f9c4 	bl	800895a <__retarget_lock_acquire_recursive>
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	0719      	lsls	r1, r3, #28
 80085d6:	d502      	bpl.n	80085de <_puts_r+0x2e>
 80085d8:	6923      	ldr	r3, [r4, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d135      	bne.n	800864a <_puts_r+0x9a>
 80085de:	4621      	mov	r1, r4
 80085e0:	4628      	mov	r0, r5
 80085e2:	f000 f8e7 	bl	80087b4 <__swsetup_r>
 80085e6:	b380      	cbz	r0, 800864a <_puts_r+0x9a>
 80085e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80085ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085ee:	07da      	lsls	r2, r3, #31
 80085f0:	d405      	bmi.n	80085fe <_puts_r+0x4e>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	059b      	lsls	r3, r3, #22
 80085f6:	d402      	bmi.n	80085fe <_puts_r+0x4e>
 80085f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085fa:	f000 f9af 	bl	800895c <__retarget_lock_release_recursive>
 80085fe:	4628      	mov	r0, r5
 8008600:	bd70      	pop	{r4, r5, r6, pc}
 8008602:	2b00      	cmp	r3, #0
 8008604:	da04      	bge.n	8008610 <_puts_r+0x60>
 8008606:	69a2      	ldr	r2, [r4, #24]
 8008608:	429a      	cmp	r2, r3
 800860a:	dc17      	bgt.n	800863c <_puts_r+0x8c>
 800860c:	290a      	cmp	r1, #10
 800860e:	d015      	beq.n	800863c <_puts_r+0x8c>
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	6022      	str	r2, [r4, #0]
 8008616:	7019      	strb	r1, [r3, #0]
 8008618:	68a3      	ldr	r3, [r4, #8]
 800861a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800861e:	3b01      	subs	r3, #1
 8008620:	60a3      	str	r3, [r4, #8]
 8008622:	2900      	cmp	r1, #0
 8008624:	d1ed      	bne.n	8008602 <_puts_r+0x52>
 8008626:	2b00      	cmp	r3, #0
 8008628:	da11      	bge.n	800864e <_puts_r+0x9e>
 800862a:	4622      	mov	r2, r4
 800862c:	210a      	movs	r1, #10
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f881 	bl	8008736 <__swbuf_r>
 8008634:	3001      	adds	r0, #1
 8008636:	d0d7      	beq.n	80085e8 <_puts_r+0x38>
 8008638:	250a      	movs	r5, #10
 800863a:	e7d7      	b.n	80085ec <_puts_r+0x3c>
 800863c:	4622      	mov	r2, r4
 800863e:	4628      	mov	r0, r5
 8008640:	f000 f879 	bl	8008736 <__swbuf_r>
 8008644:	3001      	adds	r0, #1
 8008646:	d1e7      	bne.n	8008618 <_puts_r+0x68>
 8008648:	e7ce      	b.n	80085e8 <_puts_r+0x38>
 800864a:	3e01      	subs	r6, #1
 800864c:	e7e4      	b.n	8008618 <_puts_r+0x68>
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	6022      	str	r2, [r4, #0]
 8008654:	220a      	movs	r2, #10
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	e7ee      	b.n	8008638 <_puts_r+0x88>
	...

0800865c <puts>:
 800865c:	4b02      	ldr	r3, [pc, #8]	@ (8008668 <puts+0xc>)
 800865e:	4601      	mov	r1, r0
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f7ff bfa5 	b.w	80085b0 <_puts_r>
 8008666:	bf00      	nop
 8008668:	20000024 	.word	0x20000024

0800866c <siprintf>:
 800866c:	b40e      	push	{r1, r2, r3}
 800866e:	b510      	push	{r4, lr}
 8008670:	b09d      	sub	sp, #116	@ 0x74
 8008672:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008674:	9002      	str	r0, [sp, #8]
 8008676:	9006      	str	r0, [sp, #24]
 8008678:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800867c:	480a      	ldr	r0, [pc, #40]	@ (80086a8 <siprintf+0x3c>)
 800867e:	9107      	str	r1, [sp, #28]
 8008680:	9104      	str	r1, [sp, #16]
 8008682:	490a      	ldr	r1, [pc, #40]	@ (80086ac <siprintf+0x40>)
 8008684:	f853 2b04 	ldr.w	r2, [r3], #4
 8008688:	9105      	str	r1, [sp, #20]
 800868a:	2400      	movs	r4, #0
 800868c:	a902      	add	r1, sp, #8
 800868e:	6800      	ldr	r0, [r0, #0]
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008694:	f002 fc36 	bl	800af04 <_svfiprintf_r>
 8008698:	9b02      	ldr	r3, [sp, #8]
 800869a:	701c      	strb	r4, [r3, #0]
 800869c:	b01d      	add	sp, #116	@ 0x74
 800869e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a2:	b003      	add	sp, #12
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000024 	.word	0x20000024
 80086ac:	ffff0208 	.word	0xffff0208

080086b0 <__sread>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	460c      	mov	r4, r1
 80086b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b8:	f000 f900 	bl	80088bc <_read_r>
 80086bc:	2800      	cmp	r0, #0
 80086be:	bfab      	itete	ge
 80086c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086c2:	89a3      	ldrhlt	r3, [r4, #12]
 80086c4:	181b      	addge	r3, r3, r0
 80086c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086ca:	bfac      	ite	ge
 80086cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086ce:	81a3      	strhlt	r3, [r4, #12]
 80086d0:	bd10      	pop	{r4, pc}

080086d2 <__swrite>:
 80086d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d6:	461f      	mov	r7, r3
 80086d8:	898b      	ldrh	r3, [r1, #12]
 80086da:	05db      	lsls	r3, r3, #23
 80086dc:	4605      	mov	r5, r0
 80086de:	460c      	mov	r4, r1
 80086e0:	4616      	mov	r6, r2
 80086e2:	d505      	bpl.n	80086f0 <__swrite+0x1e>
 80086e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e8:	2302      	movs	r3, #2
 80086ea:	2200      	movs	r2, #0
 80086ec:	f000 f8d4 	bl	8008898 <_lseek_r>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	4632      	mov	r2, r6
 80086fe:	463b      	mov	r3, r7
 8008700:	4628      	mov	r0, r5
 8008702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008706:	f000 b8eb 	b.w	80088e0 <_write_r>

0800870a <__sseek>:
 800870a:	b510      	push	{r4, lr}
 800870c:	460c      	mov	r4, r1
 800870e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008712:	f000 f8c1 	bl	8008898 <_lseek_r>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	bf15      	itete	ne
 800871c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800871e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008726:	81a3      	strheq	r3, [r4, #12]
 8008728:	bf18      	it	ne
 800872a:	81a3      	strhne	r3, [r4, #12]
 800872c:	bd10      	pop	{r4, pc}

0800872e <__sclose>:
 800872e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008732:	f000 b8a1 	b.w	8008878 <_close_r>

08008736 <__swbuf_r>:
 8008736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008738:	460e      	mov	r6, r1
 800873a:	4614      	mov	r4, r2
 800873c:	4605      	mov	r5, r0
 800873e:	b118      	cbz	r0, 8008748 <__swbuf_r+0x12>
 8008740:	6a03      	ldr	r3, [r0, #32]
 8008742:	b90b      	cbnz	r3, 8008748 <__swbuf_r+0x12>
 8008744:	f7ff feec 	bl	8008520 <__sinit>
 8008748:	69a3      	ldr	r3, [r4, #24]
 800874a:	60a3      	str	r3, [r4, #8]
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	071a      	lsls	r2, r3, #28
 8008750:	d501      	bpl.n	8008756 <__swbuf_r+0x20>
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	b943      	cbnz	r3, 8008768 <__swbuf_r+0x32>
 8008756:	4621      	mov	r1, r4
 8008758:	4628      	mov	r0, r5
 800875a:	f000 f82b 	bl	80087b4 <__swsetup_r>
 800875e:	b118      	cbz	r0, 8008768 <__swbuf_r+0x32>
 8008760:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008764:	4638      	mov	r0, r7
 8008766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	1a98      	subs	r0, r3, r2
 800876e:	6963      	ldr	r3, [r4, #20]
 8008770:	b2f6      	uxtb	r6, r6
 8008772:	4283      	cmp	r3, r0
 8008774:	4637      	mov	r7, r6
 8008776:	dc05      	bgt.n	8008784 <__swbuf_r+0x4e>
 8008778:	4621      	mov	r1, r4
 800877a:	4628      	mov	r0, r5
 800877c:	f002 fe7e 	bl	800b47c <_fflush_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	d1ed      	bne.n	8008760 <__swbuf_r+0x2a>
 8008784:	68a3      	ldr	r3, [r4, #8]
 8008786:	3b01      	subs	r3, #1
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	6022      	str	r2, [r4, #0]
 8008790:	701e      	strb	r6, [r3, #0]
 8008792:	6962      	ldr	r2, [r4, #20]
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	429a      	cmp	r2, r3
 8008798:	d004      	beq.n	80087a4 <__swbuf_r+0x6e>
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	07db      	lsls	r3, r3, #31
 800879e:	d5e1      	bpl.n	8008764 <__swbuf_r+0x2e>
 80087a0:	2e0a      	cmp	r6, #10
 80087a2:	d1df      	bne.n	8008764 <__swbuf_r+0x2e>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f002 fe68 	bl	800b47c <_fflush_r>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0d9      	beq.n	8008764 <__swbuf_r+0x2e>
 80087b0:	e7d6      	b.n	8008760 <__swbuf_r+0x2a>
	...

080087b4 <__swsetup_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4b29      	ldr	r3, [pc, #164]	@ (800885c <__swsetup_r+0xa8>)
 80087b8:	4605      	mov	r5, r0
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	460c      	mov	r4, r1
 80087be:	b118      	cbz	r0, 80087c8 <__swsetup_r+0x14>
 80087c0:	6a03      	ldr	r3, [r0, #32]
 80087c2:	b90b      	cbnz	r3, 80087c8 <__swsetup_r+0x14>
 80087c4:	f7ff feac 	bl	8008520 <__sinit>
 80087c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087cc:	0719      	lsls	r1, r3, #28
 80087ce:	d422      	bmi.n	8008816 <__swsetup_r+0x62>
 80087d0:	06da      	lsls	r2, r3, #27
 80087d2:	d407      	bmi.n	80087e4 <__swsetup_r+0x30>
 80087d4:	2209      	movs	r2, #9
 80087d6:	602a      	str	r2, [r5, #0]
 80087d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087e2:	e033      	b.n	800884c <__swsetup_r+0x98>
 80087e4:	0758      	lsls	r0, r3, #29
 80087e6:	d512      	bpl.n	800880e <__swsetup_r+0x5a>
 80087e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087ea:	b141      	cbz	r1, 80087fe <__swsetup_r+0x4a>
 80087ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087f0:	4299      	cmp	r1, r3
 80087f2:	d002      	beq.n	80087fa <__swsetup_r+0x46>
 80087f4:	4628      	mov	r0, r5
 80087f6:	f000 ff0f 	bl	8009618 <_free_r>
 80087fa:	2300      	movs	r3, #0
 80087fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	2300      	movs	r3, #0
 8008808:	6063      	str	r3, [r4, #4]
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f043 0308 	orr.w	r3, r3, #8
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	b94b      	cbnz	r3, 800882e <__swsetup_r+0x7a>
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008824:	d003      	beq.n	800882e <__swsetup_r+0x7a>
 8008826:	4621      	mov	r1, r4
 8008828:	4628      	mov	r0, r5
 800882a:	f002 fe75 	bl	800b518 <__smakebuf_r>
 800882e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008832:	f013 0201 	ands.w	r2, r3, #1
 8008836:	d00a      	beq.n	800884e <__swsetup_r+0x9a>
 8008838:	2200      	movs	r2, #0
 800883a:	60a2      	str	r2, [r4, #8]
 800883c:	6962      	ldr	r2, [r4, #20]
 800883e:	4252      	negs	r2, r2
 8008840:	61a2      	str	r2, [r4, #24]
 8008842:	6922      	ldr	r2, [r4, #16]
 8008844:	b942      	cbnz	r2, 8008858 <__swsetup_r+0xa4>
 8008846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800884a:	d1c5      	bne.n	80087d8 <__swsetup_r+0x24>
 800884c:	bd38      	pop	{r3, r4, r5, pc}
 800884e:	0799      	lsls	r1, r3, #30
 8008850:	bf58      	it	pl
 8008852:	6962      	ldrpl	r2, [r4, #20]
 8008854:	60a2      	str	r2, [r4, #8]
 8008856:	e7f4      	b.n	8008842 <__swsetup_r+0x8e>
 8008858:	2000      	movs	r0, #0
 800885a:	e7f7      	b.n	800884c <__swsetup_r+0x98>
 800885c:	20000024 	.word	0x20000024

08008860 <memset>:
 8008860:	4402      	add	r2, r0
 8008862:	4603      	mov	r3, r0
 8008864:	4293      	cmp	r3, r2
 8008866:	d100      	bne.n	800886a <memset+0xa>
 8008868:	4770      	bx	lr
 800886a:	f803 1b01 	strb.w	r1, [r3], #1
 800886e:	e7f9      	b.n	8008864 <memset+0x4>

08008870 <_localeconv_r>:
 8008870:	4800      	ldr	r0, [pc, #0]	@ (8008874 <_localeconv_r+0x4>)
 8008872:	4770      	bx	lr
 8008874:	20000164 	.word	0x20000164

08008878 <_close_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d06      	ldr	r5, [pc, #24]	@ (8008894 <_close_r+0x1c>)
 800887c:	2300      	movs	r3, #0
 800887e:	4604      	mov	r4, r0
 8008880:	4608      	mov	r0, r1
 8008882:	602b      	str	r3, [r5, #0]
 8008884:	f7f9 fa73 	bl	8001d6e <_close>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_close_r+0x1a>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_close_r+0x1a>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	20000748 	.word	0x20000748

08008898 <_lseek_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d07      	ldr	r5, [pc, #28]	@ (80088b8 <_lseek_r+0x20>)
 800889c:	4604      	mov	r4, r0
 800889e:	4608      	mov	r0, r1
 80088a0:	4611      	mov	r1, r2
 80088a2:	2200      	movs	r2, #0
 80088a4:	602a      	str	r2, [r5, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f7f9 fa85 	bl	8001db6 <_lseek>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d102      	bne.n	80088b6 <_lseek_r+0x1e>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	b103      	cbz	r3, 80088b6 <_lseek_r+0x1e>
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	20000748 	.word	0x20000748

080088bc <_read_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d07      	ldr	r5, [pc, #28]	@ (80088dc <_read_r+0x20>)
 80088c0:	4604      	mov	r4, r0
 80088c2:	4608      	mov	r0, r1
 80088c4:	4611      	mov	r1, r2
 80088c6:	2200      	movs	r2, #0
 80088c8:	602a      	str	r2, [r5, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f7f9 fa32 	bl	8001d34 <_read>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_read_r+0x1e>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_read_r+0x1e>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	20000748 	.word	0x20000748

080088e0 <_write_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4d07      	ldr	r5, [pc, #28]	@ (8008900 <_write_r+0x20>)
 80088e4:	4604      	mov	r4, r0
 80088e6:	4608      	mov	r0, r1
 80088e8:	4611      	mov	r1, r2
 80088ea:	2200      	movs	r2, #0
 80088ec:	602a      	str	r2, [r5, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f7f8 fc20 	bl	8001134 <_write>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_write_r+0x1e>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_write_r+0x1e>
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20000748 	.word	0x20000748

08008904 <__errno>:
 8008904:	4b01      	ldr	r3, [pc, #4]	@ (800890c <__errno+0x8>)
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	20000024 	.word	0x20000024

08008910 <__libc_init_array>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	4d0d      	ldr	r5, [pc, #52]	@ (8008948 <__libc_init_array+0x38>)
 8008914:	4c0d      	ldr	r4, [pc, #52]	@ (800894c <__libc_init_array+0x3c>)
 8008916:	1b64      	subs	r4, r4, r5
 8008918:	10a4      	asrs	r4, r4, #2
 800891a:	2600      	movs	r6, #0
 800891c:	42a6      	cmp	r6, r4
 800891e:	d109      	bne.n	8008934 <__libc_init_array+0x24>
 8008920:	4d0b      	ldr	r5, [pc, #44]	@ (8008950 <__libc_init_array+0x40>)
 8008922:	4c0c      	ldr	r4, [pc, #48]	@ (8008954 <__libc_init_array+0x44>)
 8008924:	f003 fac4 	bl	800beb0 <_init>
 8008928:	1b64      	subs	r4, r4, r5
 800892a:	10a4      	asrs	r4, r4, #2
 800892c:	2600      	movs	r6, #0
 800892e:	42a6      	cmp	r6, r4
 8008930:	d105      	bne.n	800893e <__libc_init_array+0x2e>
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	f855 3b04 	ldr.w	r3, [r5], #4
 8008938:	4798      	blx	r3
 800893a:	3601      	adds	r6, #1
 800893c:	e7ee      	b.n	800891c <__libc_init_array+0xc>
 800893e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008942:	4798      	blx	r3
 8008944:	3601      	adds	r6, #1
 8008946:	e7f2      	b.n	800892e <__libc_init_array+0x1e>
 8008948:	0800c744 	.word	0x0800c744
 800894c:	0800c744 	.word	0x0800c744
 8008950:	0800c744 	.word	0x0800c744
 8008954:	0800c748 	.word	0x0800c748

08008958 <__retarget_lock_init_recursive>:
 8008958:	4770      	bx	lr

0800895a <__retarget_lock_acquire_recursive>:
 800895a:	4770      	bx	lr

0800895c <__retarget_lock_release_recursive>:
 800895c:	4770      	bx	lr
	...

08008960 <nanf>:
 8008960:	4800      	ldr	r0, [pc, #0]	@ (8008964 <nanf+0x4>)
 8008962:	4770      	bx	lr
 8008964:	7fc00000 	.word	0x7fc00000

08008968 <quorem>:
 8008968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	6903      	ldr	r3, [r0, #16]
 800896e:	690c      	ldr	r4, [r1, #16]
 8008970:	42a3      	cmp	r3, r4
 8008972:	4607      	mov	r7, r0
 8008974:	db7e      	blt.n	8008a74 <quorem+0x10c>
 8008976:	3c01      	subs	r4, #1
 8008978:	f101 0814 	add.w	r8, r1, #20
 800897c:	00a3      	lsls	r3, r4, #2
 800897e:	f100 0514 	add.w	r5, r0, #20
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800898e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008992:	3301      	adds	r3, #1
 8008994:	429a      	cmp	r2, r3
 8008996:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800899a:	fbb2 f6f3 	udiv	r6, r2, r3
 800899e:	d32e      	bcc.n	80089fe <quorem+0x96>
 80089a0:	f04f 0a00 	mov.w	sl, #0
 80089a4:	46c4      	mov	ip, r8
 80089a6:	46ae      	mov	lr, r5
 80089a8:	46d3      	mov	fp, sl
 80089aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089ae:	b298      	uxth	r0, r3
 80089b0:	fb06 a000 	mla	r0, r6, r0, sl
 80089b4:	0c02      	lsrs	r2, r0, #16
 80089b6:	0c1b      	lsrs	r3, r3, #16
 80089b8:	fb06 2303 	mla	r3, r6, r3, r2
 80089bc:	f8de 2000 	ldr.w	r2, [lr]
 80089c0:	b280      	uxth	r0, r0
 80089c2:	b292      	uxth	r2, r2
 80089c4:	1a12      	subs	r2, r2, r0
 80089c6:	445a      	add	r2, fp
 80089c8:	f8de 0000 	ldr.w	r0, [lr]
 80089cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80089d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80089da:	b292      	uxth	r2, r2
 80089dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80089e0:	45e1      	cmp	r9, ip
 80089e2:	f84e 2b04 	str.w	r2, [lr], #4
 80089e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80089ea:	d2de      	bcs.n	80089aa <quorem+0x42>
 80089ec:	9b00      	ldr	r3, [sp, #0]
 80089ee:	58eb      	ldr	r3, [r5, r3]
 80089f0:	b92b      	cbnz	r3, 80089fe <quorem+0x96>
 80089f2:	9b01      	ldr	r3, [sp, #4]
 80089f4:	3b04      	subs	r3, #4
 80089f6:	429d      	cmp	r5, r3
 80089f8:	461a      	mov	r2, r3
 80089fa:	d32f      	bcc.n	8008a5c <quorem+0xf4>
 80089fc:	613c      	str	r4, [r7, #16]
 80089fe:	4638      	mov	r0, r7
 8008a00:	f001 f9c6 	bl	8009d90 <__mcmp>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	db25      	blt.n	8008a54 <quorem+0xec>
 8008a08:	4629      	mov	r1, r5
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a10:	f8d1 c000 	ldr.w	ip, [r1]
 8008a14:	fa1f fe82 	uxth.w	lr, r2
 8008a18:	fa1f f38c 	uxth.w	r3, ip
 8008a1c:	eba3 030e 	sub.w	r3, r3, lr
 8008a20:	4403      	add	r3, r0
 8008a22:	0c12      	lsrs	r2, r2, #16
 8008a24:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a28:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a32:	45c1      	cmp	r9, r8
 8008a34:	f841 3b04 	str.w	r3, [r1], #4
 8008a38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a3c:	d2e6      	bcs.n	8008a0c <quorem+0xa4>
 8008a3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a46:	b922      	cbnz	r2, 8008a52 <quorem+0xea>
 8008a48:	3b04      	subs	r3, #4
 8008a4a:	429d      	cmp	r5, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	d30b      	bcc.n	8008a68 <quorem+0x100>
 8008a50:	613c      	str	r4, [r7, #16]
 8008a52:	3601      	adds	r6, #1
 8008a54:	4630      	mov	r0, r6
 8008a56:	b003      	add	sp, #12
 8008a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5c:	6812      	ldr	r2, [r2, #0]
 8008a5e:	3b04      	subs	r3, #4
 8008a60:	2a00      	cmp	r2, #0
 8008a62:	d1cb      	bne.n	80089fc <quorem+0x94>
 8008a64:	3c01      	subs	r4, #1
 8008a66:	e7c6      	b.n	80089f6 <quorem+0x8e>
 8008a68:	6812      	ldr	r2, [r2, #0]
 8008a6a:	3b04      	subs	r3, #4
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	d1ef      	bne.n	8008a50 <quorem+0xe8>
 8008a70:	3c01      	subs	r4, #1
 8008a72:	e7ea      	b.n	8008a4a <quorem+0xe2>
 8008a74:	2000      	movs	r0, #0
 8008a76:	e7ee      	b.n	8008a56 <quorem+0xee>

08008a78 <_dtoa_r>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	69c7      	ldr	r7, [r0, #28]
 8008a7e:	b097      	sub	sp, #92	@ 0x5c
 8008a80:	4614      	mov	r4, r2
 8008a82:	461d      	mov	r5, r3
 8008a84:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008a88:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008a8a:	4681      	mov	r9, r0
 8008a8c:	b97f      	cbnz	r7, 8008aae <_dtoa_r+0x36>
 8008a8e:	2010      	movs	r0, #16
 8008a90:	f000 fe0c 	bl	80096ac <malloc>
 8008a94:	4602      	mov	r2, r0
 8008a96:	f8c9 001c 	str.w	r0, [r9, #28]
 8008a9a:	b920      	cbnz	r0, 8008aa6 <_dtoa_r+0x2e>
 8008a9c:	4baa      	ldr	r3, [pc, #680]	@ (8008d48 <_dtoa_r+0x2d0>)
 8008a9e:	21ef      	movs	r1, #239	@ 0xef
 8008aa0:	48aa      	ldr	r0, [pc, #680]	@ (8008d4c <_dtoa_r+0x2d4>)
 8008aa2:	f002 fde7 	bl	800b674 <__assert_func>
 8008aa6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008aaa:	6007      	str	r7, [r0, #0]
 8008aac:	60c7      	str	r7, [r0, #12]
 8008aae:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	b159      	cbz	r1, 8008ace <_dtoa_r+0x56>
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	604a      	str	r2, [r1, #4]
 8008aba:	2301      	movs	r3, #1
 8008abc:	4093      	lsls	r3, r2
 8008abe:	608b      	str	r3, [r1, #8]
 8008ac0:	4648      	mov	r0, r9
 8008ac2:	f000 fee9 	bl	8009898 <_Bfree>
 8008ac6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	1e2b      	subs	r3, r5, #0
 8008ad0:	bfb9      	ittee	lt
 8008ad2:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ad6:	9307      	strlt	r3, [sp, #28]
 8008ad8:	2300      	movge	r3, #0
 8008ada:	6033      	strge	r3, [r6, #0]
 8008adc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008ae0:	4b9b      	ldr	r3, [pc, #620]	@ (8008d50 <_dtoa_r+0x2d8>)
 8008ae2:	bfbc      	itt	lt
 8008ae4:	2201      	movlt	r2, #1
 8008ae6:	6032      	strlt	r2, [r6, #0]
 8008ae8:	ea33 0308 	bics.w	r3, r3, r8
 8008aec:	d112      	bne.n	8008b14 <_dtoa_r+0x9c>
 8008aee:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008af0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008afa:	4323      	orrs	r3, r4
 8008afc:	f000 855b 	beq.w	80095b6 <_dtoa_r+0xb3e>
 8008b00:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b02:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8008d54 <_dtoa_r+0x2dc>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 855d 	beq.w	80095c6 <_dtoa_r+0xb4e>
 8008b0c:	f10a 0303 	add.w	r3, sl, #3
 8008b10:	f000 bd57 	b.w	80095c2 <_dtoa_r+0xb4a>
 8008b14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b18:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b20:	2200      	movs	r2, #0
 8008b22:	2300      	movs	r3, #0
 8008b24:	f7f7 ffa8 	bl	8000a78 <__aeabi_dcmpeq>
 8008b28:	4607      	mov	r7, r0
 8008b2a:	b158      	cbz	r0, 8008b44 <_dtoa_r+0xcc>
 8008b2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008b2e:	2301      	movs	r3, #1
 8008b30:	6013      	str	r3, [r2, #0]
 8008b32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b34:	b113      	cbz	r3, 8008b3c <_dtoa_r+0xc4>
 8008b36:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008b38:	4b87      	ldr	r3, [pc, #540]	@ (8008d58 <_dtoa_r+0x2e0>)
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8008d5c <_dtoa_r+0x2e4>
 8008b40:	f000 bd41 	b.w	80095c6 <_dtoa_r+0xb4e>
 8008b44:	ab14      	add	r3, sp, #80	@ 0x50
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	ab15      	add	r3, sp, #84	@ 0x54
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	4648      	mov	r0, r9
 8008b4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b52:	f001 fa35 	bl	8009fc0 <__d2b>
 8008b56:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008b5a:	9003      	str	r0, [sp, #12]
 8008b5c:	2e00      	cmp	r6, #0
 8008b5e:	d077      	beq.n	8008c50 <_dtoa_r+0x1d8>
 8008b60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b62:	9712      	str	r7, [sp, #72]	@ 0x48
 8008b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b78:	4619      	mov	r1, r3
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4b78      	ldr	r3, [pc, #480]	@ (8008d60 <_dtoa_r+0x2e8>)
 8008b7e:	f7f7 fb5b 	bl	8000238 <__aeabi_dsub>
 8008b82:	a36b      	add	r3, pc, #428	@ (adr r3, 8008d30 <_dtoa_r+0x2b8>)
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f7f7 fd0e 	bl	80005a8 <__aeabi_dmul>
 8008b8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008d38 <_dtoa_r+0x2c0>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fb53 	bl	800023c <__adddf3>
 8008b96:	4604      	mov	r4, r0
 8008b98:	4630      	mov	r0, r6
 8008b9a:	460d      	mov	r5, r1
 8008b9c:	f7f7 fc9a 	bl	80004d4 <__aeabi_i2d>
 8008ba0:	a367      	add	r3, pc, #412	@ (adr r3, 8008d40 <_dtoa_r+0x2c8>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fcff 	bl	80005a8 <__aeabi_dmul>
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4620      	mov	r0, r4
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	f7f7 fb43 	bl	800023c <__adddf3>
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	460d      	mov	r5, r1
 8008bba:	f7f7 ffa5 	bl	8000b08 <__aeabi_d2iz>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f7f7 ff60 	bl	8000a8c <__aeabi_dcmplt>
 8008bcc:	b140      	cbz	r0, 8008be0 <_dtoa_r+0x168>
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f7f7 fc80 	bl	80004d4 <__aeabi_i2d>
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	f7f7 ff4e 	bl	8000a78 <__aeabi_dcmpeq>
 8008bdc:	b900      	cbnz	r0, 8008be0 <_dtoa_r+0x168>
 8008bde:	3f01      	subs	r7, #1
 8008be0:	2f16      	cmp	r7, #22
 8008be2:	d853      	bhi.n	8008c8c <_dtoa_r+0x214>
 8008be4:	4b5f      	ldr	r3, [pc, #380]	@ (8008d64 <_dtoa_r+0x2ec>)
 8008be6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bf2:	f7f7 ff4b 	bl	8000a8c <__aeabi_dcmplt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d04a      	beq.n	8008c90 <_dtoa_r+0x218>
 8008bfa:	3f01      	subs	r7, #1
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c02:	1b9b      	subs	r3, r3, r6
 8008c04:	1e5a      	subs	r2, r3, #1
 8008c06:	bf45      	ittet	mi
 8008c08:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c0c:	9304      	strmi	r3, [sp, #16]
 8008c0e:	2300      	movpl	r3, #0
 8008c10:	2300      	movmi	r3, #0
 8008c12:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c14:	bf54      	ite	pl
 8008c16:	9304      	strpl	r3, [sp, #16]
 8008c18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	db3a      	blt.n	8008c94 <_dtoa_r+0x21c>
 8008c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c20:	970e      	str	r7, [sp, #56]	@ 0x38
 8008c22:	443b      	add	r3, r7
 8008c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c26:	2300      	movs	r3, #0
 8008c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c2c:	2b09      	cmp	r3, #9
 8008c2e:	d864      	bhi.n	8008cfa <_dtoa_r+0x282>
 8008c30:	2b05      	cmp	r3, #5
 8008c32:	bfc4      	itt	gt
 8008c34:	3b04      	subgt	r3, #4
 8008c36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008c38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c3a:	f1a3 0302 	sub.w	r3, r3, #2
 8008c3e:	bfcc      	ite	gt
 8008c40:	2400      	movgt	r4, #0
 8008c42:	2401      	movle	r4, #1
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d864      	bhi.n	8008d12 <_dtoa_r+0x29a>
 8008c48:	e8df f003 	tbb	[pc, r3]
 8008c4c:	2c385553 	.word	0x2c385553
 8008c50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008c54:	441e      	add	r6, r3
 8008c56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c5a:	2b20      	cmp	r3, #32
 8008c5c:	bfc1      	itttt	gt
 8008c5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c62:	fa08 f803 	lslgt.w	r8, r8, r3
 8008c66:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c6a:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c6e:	bfd6      	itet	le
 8008c70:	f1c3 0320 	rsble	r3, r3, #32
 8008c74:	ea48 0003 	orrgt.w	r0, r8, r3
 8008c78:	fa04 f003 	lslle.w	r0, r4, r3
 8008c7c:	f7f7 fc1a 	bl	80004b4 <__aeabi_ui2d>
 8008c80:	2201      	movs	r2, #1
 8008c82:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008c86:	3e01      	subs	r6, #1
 8008c88:	9212      	str	r2, [sp, #72]	@ 0x48
 8008c8a:	e775      	b.n	8008b78 <_dtoa_r+0x100>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e7b6      	b.n	8008bfe <_dtoa_r+0x186>
 8008c90:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008c92:	e7b5      	b.n	8008c00 <_dtoa_r+0x188>
 8008c94:	9b04      	ldr	r3, [sp, #16]
 8008c96:	1bdb      	subs	r3, r3, r7
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	427b      	negs	r3, r7
 8008c9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ca2:	e7c2      	b.n	8008c2a <_dtoa_r+0x1b2>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ca8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008caa:	eb07 0b03 	add.w	fp, r7, r3
 8008cae:	f10b 0301 	add.w	r3, fp, #1
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	9308      	str	r3, [sp, #32]
 8008cb6:	bfb8      	it	lt
 8008cb8:	2301      	movlt	r3, #1
 8008cba:	e006      	b.n	8008cca <_dtoa_r+0x252>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dd28      	ble.n	8008d18 <_dtoa_r+0x2a0>
 8008cc6:	469b      	mov	fp, r3
 8008cc8:	9308      	str	r3, [sp, #32]
 8008cca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008cce:	2100      	movs	r1, #0
 8008cd0:	2204      	movs	r2, #4
 8008cd2:	f102 0514 	add.w	r5, r2, #20
 8008cd6:	429d      	cmp	r5, r3
 8008cd8:	d926      	bls.n	8008d28 <_dtoa_r+0x2b0>
 8008cda:	6041      	str	r1, [r0, #4]
 8008cdc:	4648      	mov	r0, r9
 8008cde:	f000 fd9b 	bl	8009818 <_Balloc>
 8008ce2:	4682      	mov	sl, r0
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d141      	bne.n	8008d6c <_dtoa_r+0x2f4>
 8008ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8008d68 <_dtoa_r+0x2f0>)
 8008cea:	4602      	mov	r2, r0
 8008cec:	f240 11af 	movw	r1, #431	@ 0x1af
 8008cf0:	e6d6      	b.n	8008aa0 <_dtoa_r+0x28>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e7e3      	b.n	8008cbe <_dtoa_r+0x246>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	e7d5      	b.n	8008ca6 <_dtoa_r+0x22e>
 8008cfa:	2401      	movs	r4, #1
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9320      	str	r3, [sp, #128]	@ 0x80
 8008d00:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d02:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8cd b020 	str.w	fp, [sp, #32]
 8008d0c:	2312      	movs	r3, #18
 8008d0e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008d10:	e7db      	b.n	8008cca <_dtoa_r+0x252>
 8008d12:	2301      	movs	r3, #1
 8008d14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d16:	e7f4      	b.n	8008d02 <_dtoa_r+0x28a>
 8008d18:	f04f 0b01 	mov.w	fp, #1
 8008d1c:	f8cd b020 	str.w	fp, [sp, #32]
 8008d20:	465b      	mov	r3, fp
 8008d22:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008d26:	e7d0      	b.n	8008cca <_dtoa_r+0x252>
 8008d28:	3101      	adds	r1, #1
 8008d2a:	0052      	lsls	r2, r2, #1
 8008d2c:	e7d1      	b.n	8008cd2 <_dtoa_r+0x25a>
 8008d2e:	bf00      	nop
 8008d30:	636f4361 	.word	0x636f4361
 8008d34:	3fd287a7 	.word	0x3fd287a7
 8008d38:	8b60c8b3 	.word	0x8b60c8b3
 8008d3c:	3fc68a28 	.word	0x3fc68a28
 8008d40:	509f79fb 	.word	0x509f79fb
 8008d44:	3fd34413 	.word	0x3fd34413
 8008d48:	0800c356 	.word	0x0800c356
 8008d4c:	0800c36d 	.word	0x0800c36d
 8008d50:	7ff00000 	.word	0x7ff00000
 8008d54:	0800c352 	.word	0x0800c352
 8008d58:	0800c321 	.word	0x0800c321
 8008d5c:	0800c320 	.word	0x0800c320
 8008d60:	3ff80000 	.word	0x3ff80000
 8008d64:	0800c520 	.word	0x0800c520
 8008d68:	0800c3c5 	.word	0x0800c3c5
 8008d6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d70:	6018      	str	r0, [r3, #0]
 8008d72:	9b08      	ldr	r3, [sp, #32]
 8008d74:	2b0e      	cmp	r3, #14
 8008d76:	f200 80a1 	bhi.w	8008ebc <_dtoa_r+0x444>
 8008d7a:	2c00      	cmp	r4, #0
 8008d7c:	f000 809e 	beq.w	8008ebc <_dtoa_r+0x444>
 8008d80:	2f00      	cmp	r7, #0
 8008d82:	dd33      	ble.n	8008dec <_dtoa_r+0x374>
 8008d84:	4b9c      	ldr	r3, [pc, #624]	@ (8008ff8 <_dtoa_r+0x580>)
 8008d86:	f007 020f 	and.w	r2, r7, #15
 8008d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d92:	05f8      	lsls	r0, r7, #23
 8008d94:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008d98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008d9c:	d516      	bpl.n	8008dcc <_dtoa_r+0x354>
 8008d9e:	4b97      	ldr	r3, [pc, #604]	@ (8008ffc <_dtoa_r+0x584>)
 8008da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008da4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008da8:	f7f7 fd28 	bl	80007fc <__aeabi_ddiv>
 8008dac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008db0:	f004 040f 	and.w	r4, r4, #15
 8008db4:	2603      	movs	r6, #3
 8008db6:	4d91      	ldr	r5, [pc, #580]	@ (8008ffc <_dtoa_r+0x584>)
 8008db8:	b954      	cbnz	r4, 8008dd0 <_dtoa_r+0x358>
 8008dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dc2:	f7f7 fd1b 	bl	80007fc <__aeabi_ddiv>
 8008dc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008dca:	e028      	b.n	8008e1e <_dtoa_r+0x3a6>
 8008dcc:	2602      	movs	r6, #2
 8008dce:	e7f2      	b.n	8008db6 <_dtoa_r+0x33e>
 8008dd0:	07e1      	lsls	r1, r4, #31
 8008dd2:	d508      	bpl.n	8008de6 <_dtoa_r+0x36e>
 8008dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008dd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ddc:	f7f7 fbe4 	bl	80005a8 <__aeabi_dmul>
 8008de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008de4:	3601      	adds	r6, #1
 8008de6:	1064      	asrs	r4, r4, #1
 8008de8:	3508      	adds	r5, #8
 8008dea:	e7e5      	b.n	8008db8 <_dtoa_r+0x340>
 8008dec:	f000 80af 	beq.w	8008f4e <_dtoa_r+0x4d6>
 8008df0:	427c      	negs	r4, r7
 8008df2:	4b81      	ldr	r3, [pc, #516]	@ (8008ff8 <_dtoa_r+0x580>)
 8008df4:	4d81      	ldr	r5, [pc, #516]	@ (8008ffc <_dtoa_r+0x584>)
 8008df6:	f004 020f 	and.w	r2, r4, #15
 8008dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e06:	f7f7 fbcf 	bl	80005a8 <__aeabi_dmul>
 8008e0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e0e:	1124      	asrs	r4, r4, #4
 8008e10:	2300      	movs	r3, #0
 8008e12:	2602      	movs	r6, #2
 8008e14:	2c00      	cmp	r4, #0
 8008e16:	f040 808f 	bne.w	8008f38 <_dtoa_r+0x4c0>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1d3      	bne.n	8008dc6 <_dtoa_r+0x34e>
 8008e1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e20:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 8094 	beq.w	8008f52 <_dtoa_r+0x4da>
 8008e2a:	4b75      	ldr	r3, [pc, #468]	@ (8009000 <_dtoa_r+0x588>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	f7f7 fe2b 	bl	8000a8c <__aeabi_dcmplt>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	f000 808b 	beq.w	8008f52 <_dtoa_r+0x4da>
 8008e3c:	9b08      	ldr	r3, [sp, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 8087 	beq.w	8008f52 <_dtoa_r+0x4da>
 8008e44:	f1bb 0f00 	cmp.w	fp, #0
 8008e48:	dd34      	ble.n	8008eb4 <_dtoa_r+0x43c>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8009004 <_dtoa_r+0x58c>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4629      	mov	r1, r5
 8008e52:	f7f7 fba9 	bl	80005a8 <__aeabi_dmul>
 8008e56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e5a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008e5e:	3601      	adds	r6, #1
 8008e60:	465c      	mov	r4, fp
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7f7 fb36 	bl	80004d4 <__aeabi_i2d>
 8008e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e6c:	f7f7 fb9c 	bl	80005a8 <__aeabi_dmul>
 8008e70:	4b65      	ldr	r3, [pc, #404]	@ (8009008 <_dtoa_r+0x590>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	f7f7 f9e2 	bl	800023c <__adddf3>
 8008e78:	4605      	mov	r5, r0
 8008e7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e7e:	2c00      	cmp	r4, #0
 8008e80:	d16a      	bne.n	8008f58 <_dtoa_r+0x4e0>
 8008e82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e86:	4b61      	ldr	r3, [pc, #388]	@ (800900c <_dtoa_r+0x594>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f7f7 f9d5 	bl	8000238 <__aeabi_dsub>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e96:	462a      	mov	r2, r5
 8008e98:	4633      	mov	r3, r6
 8008e9a:	f7f7 fe15 	bl	8000ac8 <__aeabi_dcmpgt>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f040 8298 	bne.w	80093d4 <_dtoa_r+0x95c>
 8008ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008eae:	f7f7 fded 	bl	8000a8c <__aeabi_dcmplt>
 8008eb2:	bb38      	cbnz	r0, 8008f04 <_dtoa_r+0x48c>
 8008eb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008eb8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008ebc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f2c0 8157 	blt.w	8009172 <_dtoa_r+0x6fa>
 8008ec4:	2f0e      	cmp	r7, #14
 8008ec6:	f300 8154 	bgt.w	8009172 <_dtoa_r+0x6fa>
 8008eca:	4b4b      	ldr	r3, [pc, #300]	@ (8008ff8 <_dtoa_r+0x580>)
 8008ecc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ed0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ed4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ed8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f280 80e5 	bge.w	80090aa <_dtoa_r+0x632>
 8008ee0:	9b08      	ldr	r3, [sp, #32]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f300 80e1 	bgt.w	80090aa <_dtoa_r+0x632>
 8008ee8:	d10c      	bne.n	8008f04 <_dtoa_r+0x48c>
 8008eea:	4b48      	ldr	r3, [pc, #288]	@ (800900c <_dtoa_r+0x594>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ef2:	f7f7 fb59 	bl	80005a8 <__aeabi_dmul>
 8008ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008efa:	f7f7 fddb 	bl	8000ab4 <__aeabi_dcmpge>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f000 8266 	beq.w	80093d0 <_dtoa_r+0x958>
 8008f04:	2400      	movs	r4, #0
 8008f06:	4625      	mov	r5, r4
 8008f08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f0a:	4656      	mov	r6, sl
 8008f0c:	ea6f 0803 	mvn.w	r8, r3
 8008f10:	2700      	movs	r7, #0
 8008f12:	4621      	mov	r1, r4
 8008f14:	4648      	mov	r0, r9
 8008f16:	f000 fcbf 	bl	8009898 <_Bfree>
 8008f1a:	2d00      	cmp	r5, #0
 8008f1c:	f000 80bd 	beq.w	800909a <_dtoa_r+0x622>
 8008f20:	b12f      	cbz	r7, 8008f2e <_dtoa_r+0x4b6>
 8008f22:	42af      	cmp	r7, r5
 8008f24:	d003      	beq.n	8008f2e <_dtoa_r+0x4b6>
 8008f26:	4639      	mov	r1, r7
 8008f28:	4648      	mov	r0, r9
 8008f2a:	f000 fcb5 	bl	8009898 <_Bfree>
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4648      	mov	r0, r9
 8008f32:	f000 fcb1 	bl	8009898 <_Bfree>
 8008f36:	e0b0      	b.n	800909a <_dtoa_r+0x622>
 8008f38:	07e2      	lsls	r2, r4, #31
 8008f3a:	d505      	bpl.n	8008f48 <_dtoa_r+0x4d0>
 8008f3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f40:	f7f7 fb32 	bl	80005a8 <__aeabi_dmul>
 8008f44:	3601      	adds	r6, #1
 8008f46:	2301      	movs	r3, #1
 8008f48:	1064      	asrs	r4, r4, #1
 8008f4a:	3508      	adds	r5, #8
 8008f4c:	e762      	b.n	8008e14 <_dtoa_r+0x39c>
 8008f4e:	2602      	movs	r6, #2
 8008f50:	e765      	b.n	8008e1e <_dtoa_r+0x3a6>
 8008f52:	9c08      	ldr	r4, [sp, #32]
 8008f54:	46b8      	mov	r8, r7
 8008f56:	e784      	b.n	8008e62 <_dtoa_r+0x3ea>
 8008f58:	4b27      	ldr	r3, [pc, #156]	@ (8008ff8 <_dtoa_r+0x580>)
 8008f5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f64:	4454      	add	r4, sl
 8008f66:	2900      	cmp	r1, #0
 8008f68:	d054      	beq.n	8009014 <_dtoa_r+0x59c>
 8008f6a:	4929      	ldr	r1, [pc, #164]	@ (8009010 <_dtoa_r+0x598>)
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f7f7 fc45 	bl	80007fc <__aeabi_ddiv>
 8008f72:	4633      	mov	r3, r6
 8008f74:	462a      	mov	r2, r5
 8008f76:	f7f7 f95f 	bl	8000238 <__aeabi_dsub>
 8008f7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f7e:	4656      	mov	r6, sl
 8008f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f84:	f7f7 fdc0 	bl	8000b08 <__aeabi_d2iz>
 8008f88:	4605      	mov	r5, r0
 8008f8a:	f7f7 faa3 	bl	80004d4 <__aeabi_i2d>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f96:	f7f7 f94f 	bl	8000238 <__aeabi_dsub>
 8008f9a:	3530      	adds	r5, #48	@ 0x30
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008fa4:	f806 5b01 	strb.w	r5, [r6], #1
 8008fa8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fac:	f7f7 fd6e 	bl	8000a8c <__aeabi_dcmplt>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d172      	bne.n	800909a <_dtoa_r+0x622>
 8008fb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fb8:	4911      	ldr	r1, [pc, #68]	@ (8009000 <_dtoa_r+0x588>)
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f7f7 f93c 	bl	8000238 <__aeabi_dsub>
 8008fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fc4:	f7f7 fd62 	bl	8000a8c <__aeabi_dcmplt>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f040 80b4 	bne.w	8009136 <_dtoa_r+0x6be>
 8008fce:	42a6      	cmp	r6, r4
 8008fd0:	f43f af70 	beq.w	8008eb4 <_dtoa_r+0x43c>
 8008fd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009004 <_dtoa_r+0x58c>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f7f7 fae4 	bl	80005a8 <__aeabi_dmul>
 8008fe0:	4b08      	ldr	r3, [pc, #32]	@ (8009004 <_dtoa_r+0x58c>)
 8008fe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fec:	f7f7 fadc 	bl	80005a8 <__aeabi_dmul>
 8008ff0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ff4:	e7c4      	b.n	8008f80 <_dtoa_r+0x508>
 8008ff6:	bf00      	nop
 8008ff8:	0800c520 	.word	0x0800c520
 8008ffc:	0800c4f8 	.word	0x0800c4f8
 8009000:	3ff00000 	.word	0x3ff00000
 8009004:	40240000 	.word	0x40240000
 8009008:	401c0000 	.word	0x401c0000
 800900c:	40140000 	.word	0x40140000
 8009010:	3fe00000 	.word	0x3fe00000
 8009014:	4631      	mov	r1, r6
 8009016:	4628      	mov	r0, r5
 8009018:	f7f7 fac6 	bl	80005a8 <__aeabi_dmul>
 800901c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009020:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009022:	4656      	mov	r6, sl
 8009024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009028:	f7f7 fd6e 	bl	8000b08 <__aeabi_d2iz>
 800902c:	4605      	mov	r5, r0
 800902e:	f7f7 fa51 	bl	80004d4 <__aeabi_i2d>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800903a:	f7f7 f8fd 	bl	8000238 <__aeabi_dsub>
 800903e:	3530      	adds	r5, #48	@ 0x30
 8009040:	f806 5b01 	strb.w	r5, [r6], #1
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	42a6      	cmp	r6, r4
 800904a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	d124      	bne.n	800909e <_dtoa_r+0x626>
 8009054:	4baf      	ldr	r3, [pc, #700]	@ (8009314 <_dtoa_r+0x89c>)
 8009056:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800905a:	f7f7 f8ef 	bl	800023c <__adddf3>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009066:	f7f7 fd2f 	bl	8000ac8 <__aeabi_dcmpgt>
 800906a:	2800      	cmp	r0, #0
 800906c:	d163      	bne.n	8009136 <_dtoa_r+0x6be>
 800906e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009072:	49a8      	ldr	r1, [pc, #672]	@ (8009314 <_dtoa_r+0x89c>)
 8009074:	2000      	movs	r0, #0
 8009076:	f7f7 f8df 	bl	8000238 <__aeabi_dsub>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009082:	f7f7 fd03 	bl	8000a8c <__aeabi_dcmplt>
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f af14 	beq.w	8008eb4 <_dtoa_r+0x43c>
 800908c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800908e:	1e73      	subs	r3, r6, #1
 8009090:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009092:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009096:	2b30      	cmp	r3, #48	@ 0x30
 8009098:	d0f8      	beq.n	800908c <_dtoa_r+0x614>
 800909a:	4647      	mov	r7, r8
 800909c:	e03b      	b.n	8009116 <_dtoa_r+0x69e>
 800909e:	4b9e      	ldr	r3, [pc, #632]	@ (8009318 <_dtoa_r+0x8a0>)
 80090a0:	f7f7 fa82 	bl	80005a8 <__aeabi_dmul>
 80090a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090a8:	e7bc      	b.n	8009024 <_dtoa_r+0x5ac>
 80090aa:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80090ae:	4656      	mov	r6, sl
 80090b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090b4:	4620      	mov	r0, r4
 80090b6:	4629      	mov	r1, r5
 80090b8:	f7f7 fba0 	bl	80007fc <__aeabi_ddiv>
 80090bc:	f7f7 fd24 	bl	8000b08 <__aeabi_d2iz>
 80090c0:	4680      	mov	r8, r0
 80090c2:	f7f7 fa07 	bl	80004d4 <__aeabi_i2d>
 80090c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ca:	f7f7 fa6d 	bl	80005a8 <__aeabi_dmul>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4620      	mov	r0, r4
 80090d4:	4629      	mov	r1, r5
 80090d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80090da:	f7f7 f8ad 	bl	8000238 <__aeabi_dsub>
 80090de:	f806 4b01 	strb.w	r4, [r6], #1
 80090e2:	9d08      	ldr	r5, [sp, #32]
 80090e4:	eba6 040a 	sub.w	r4, r6, sl
 80090e8:	42a5      	cmp	r5, r4
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	d133      	bne.n	8009158 <_dtoa_r+0x6e0>
 80090f0:	f7f7 f8a4 	bl	800023c <__adddf3>
 80090f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	f7f7 fce4 	bl	8000ac8 <__aeabi_dcmpgt>
 8009100:	b9c0      	cbnz	r0, 8009134 <_dtoa_r+0x6bc>
 8009102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009106:	4620      	mov	r0, r4
 8009108:	4629      	mov	r1, r5
 800910a:	f7f7 fcb5 	bl	8000a78 <__aeabi_dcmpeq>
 800910e:	b110      	cbz	r0, 8009116 <_dtoa_r+0x69e>
 8009110:	f018 0f01 	tst.w	r8, #1
 8009114:	d10e      	bne.n	8009134 <_dtoa_r+0x6bc>
 8009116:	9903      	ldr	r1, [sp, #12]
 8009118:	4648      	mov	r0, r9
 800911a:	f000 fbbd 	bl	8009898 <_Bfree>
 800911e:	2300      	movs	r3, #0
 8009120:	7033      	strb	r3, [r6, #0]
 8009122:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009124:	3701      	adds	r7, #1
 8009126:	601f      	str	r7, [r3, #0]
 8009128:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 824b 	beq.w	80095c6 <_dtoa_r+0xb4e>
 8009130:	601e      	str	r6, [r3, #0]
 8009132:	e248      	b.n	80095c6 <_dtoa_r+0xb4e>
 8009134:	46b8      	mov	r8, r7
 8009136:	4633      	mov	r3, r6
 8009138:	461e      	mov	r6, r3
 800913a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800913e:	2a39      	cmp	r2, #57	@ 0x39
 8009140:	d106      	bne.n	8009150 <_dtoa_r+0x6d8>
 8009142:	459a      	cmp	sl, r3
 8009144:	d1f8      	bne.n	8009138 <_dtoa_r+0x6c0>
 8009146:	2230      	movs	r2, #48	@ 0x30
 8009148:	f108 0801 	add.w	r8, r8, #1
 800914c:	f88a 2000 	strb.w	r2, [sl]
 8009150:	781a      	ldrb	r2, [r3, #0]
 8009152:	3201      	adds	r2, #1
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	e7a0      	b.n	800909a <_dtoa_r+0x622>
 8009158:	4b6f      	ldr	r3, [pc, #444]	@ (8009318 <_dtoa_r+0x8a0>)
 800915a:	2200      	movs	r2, #0
 800915c:	f7f7 fa24 	bl	80005a8 <__aeabi_dmul>
 8009160:	2200      	movs	r2, #0
 8009162:	2300      	movs	r3, #0
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	f7f7 fc86 	bl	8000a78 <__aeabi_dcmpeq>
 800916c:	2800      	cmp	r0, #0
 800916e:	d09f      	beq.n	80090b0 <_dtoa_r+0x638>
 8009170:	e7d1      	b.n	8009116 <_dtoa_r+0x69e>
 8009172:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009174:	2a00      	cmp	r2, #0
 8009176:	f000 80ea 	beq.w	800934e <_dtoa_r+0x8d6>
 800917a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800917c:	2a01      	cmp	r2, #1
 800917e:	f300 80cd 	bgt.w	800931c <_dtoa_r+0x8a4>
 8009182:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009184:	2a00      	cmp	r2, #0
 8009186:	f000 80c1 	beq.w	800930c <_dtoa_r+0x894>
 800918a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800918e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009190:	9e04      	ldr	r6, [sp, #16]
 8009192:	9a04      	ldr	r2, [sp, #16]
 8009194:	441a      	add	r2, r3
 8009196:	9204      	str	r2, [sp, #16]
 8009198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800919a:	2101      	movs	r1, #1
 800919c:	441a      	add	r2, r3
 800919e:	4648      	mov	r0, r9
 80091a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a2:	f000 fc77 	bl	8009a94 <__i2b>
 80091a6:	4605      	mov	r5, r0
 80091a8:	b166      	cbz	r6, 80091c4 <_dtoa_r+0x74c>
 80091aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	dd09      	ble.n	80091c4 <_dtoa_r+0x74c>
 80091b0:	42b3      	cmp	r3, r6
 80091b2:	9a04      	ldr	r2, [sp, #16]
 80091b4:	bfa8      	it	ge
 80091b6:	4633      	movge	r3, r6
 80091b8:	1ad2      	subs	r2, r2, r3
 80091ba:	9204      	str	r2, [sp, #16]
 80091bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091be:	1af6      	subs	r6, r6, r3
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091c6:	b30b      	cbz	r3, 800920c <_dtoa_r+0x794>
 80091c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 80c6 	beq.w	800935c <_dtoa_r+0x8e4>
 80091d0:	2c00      	cmp	r4, #0
 80091d2:	f000 80c0 	beq.w	8009356 <_dtoa_r+0x8de>
 80091d6:	4629      	mov	r1, r5
 80091d8:	4622      	mov	r2, r4
 80091da:	4648      	mov	r0, r9
 80091dc:	f000 fd12 	bl	8009c04 <__pow5mult>
 80091e0:	9a03      	ldr	r2, [sp, #12]
 80091e2:	4601      	mov	r1, r0
 80091e4:	4605      	mov	r5, r0
 80091e6:	4648      	mov	r0, r9
 80091e8:	f000 fc6a 	bl	8009ac0 <__multiply>
 80091ec:	9903      	ldr	r1, [sp, #12]
 80091ee:	4680      	mov	r8, r0
 80091f0:	4648      	mov	r0, r9
 80091f2:	f000 fb51 	bl	8009898 <_Bfree>
 80091f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091f8:	1b1b      	subs	r3, r3, r4
 80091fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80091fc:	f000 80b1 	beq.w	8009362 <_dtoa_r+0x8ea>
 8009200:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009202:	4641      	mov	r1, r8
 8009204:	4648      	mov	r0, r9
 8009206:	f000 fcfd 	bl	8009c04 <__pow5mult>
 800920a:	9003      	str	r0, [sp, #12]
 800920c:	2101      	movs	r1, #1
 800920e:	4648      	mov	r0, r9
 8009210:	f000 fc40 	bl	8009a94 <__i2b>
 8009214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009216:	4604      	mov	r4, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 81d8 	beq.w	80095ce <_dtoa_r+0xb56>
 800921e:	461a      	mov	r2, r3
 8009220:	4601      	mov	r1, r0
 8009222:	4648      	mov	r0, r9
 8009224:	f000 fcee 	bl	8009c04 <__pow5mult>
 8009228:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800922a:	2b01      	cmp	r3, #1
 800922c:	4604      	mov	r4, r0
 800922e:	f300 809f 	bgt.w	8009370 <_dtoa_r+0x8f8>
 8009232:	9b06      	ldr	r3, [sp, #24]
 8009234:	2b00      	cmp	r3, #0
 8009236:	f040 8097 	bne.w	8009368 <_dtoa_r+0x8f0>
 800923a:	9b07      	ldr	r3, [sp, #28]
 800923c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009240:	2b00      	cmp	r3, #0
 8009242:	f040 8093 	bne.w	800936c <_dtoa_r+0x8f4>
 8009246:	9b07      	ldr	r3, [sp, #28]
 8009248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800924c:	0d1b      	lsrs	r3, r3, #20
 800924e:	051b      	lsls	r3, r3, #20
 8009250:	b133      	cbz	r3, 8009260 <_dtoa_r+0x7e8>
 8009252:	9b04      	ldr	r3, [sp, #16]
 8009254:	3301      	adds	r3, #1
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925a:	3301      	adds	r3, #1
 800925c:	9309      	str	r3, [sp, #36]	@ 0x24
 800925e:	2301      	movs	r3, #1
 8009260:	930a      	str	r3, [sp, #40]	@ 0x28
 8009262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 81b8 	beq.w	80095da <_dtoa_r+0xb62>
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009270:	6918      	ldr	r0, [r3, #16]
 8009272:	f000 fbc3 	bl	80099fc <__hi0bits>
 8009276:	f1c0 0020 	rsb	r0, r0, #32
 800927a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800927c:	4418      	add	r0, r3
 800927e:	f010 001f 	ands.w	r0, r0, #31
 8009282:	f000 8082 	beq.w	800938a <_dtoa_r+0x912>
 8009286:	f1c0 0320 	rsb	r3, r0, #32
 800928a:	2b04      	cmp	r3, #4
 800928c:	dd73      	ble.n	8009376 <_dtoa_r+0x8fe>
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	f1c0 001c 	rsb	r0, r0, #28
 8009294:	4403      	add	r3, r0
 8009296:	9304      	str	r3, [sp, #16]
 8009298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929a:	4403      	add	r3, r0
 800929c:	4406      	add	r6, r0
 800929e:	9309      	str	r3, [sp, #36]	@ 0x24
 80092a0:	9b04      	ldr	r3, [sp, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	dd05      	ble.n	80092b2 <_dtoa_r+0x83a>
 80092a6:	9903      	ldr	r1, [sp, #12]
 80092a8:	461a      	mov	r2, r3
 80092aa:	4648      	mov	r0, r9
 80092ac:	f000 fd04 	bl	8009cb8 <__lshift>
 80092b0:	9003      	str	r0, [sp, #12]
 80092b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dd05      	ble.n	80092c4 <_dtoa_r+0x84c>
 80092b8:	4621      	mov	r1, r4
 80092ba:	461a      	mov	r2, r3
 80092bc:	4648      	mov	r0, r9
 80092be:	f000 fcfb 	bl	8009cb8 <__lshift>
 80092c2:	4604      	mov	r4, r0
 80092c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d061      	beq.n	800938e <_dtoa_r+0x916>
 80092ca:	9803      	ldr	r0, [sp, #12]
 80092cc:	4621      	mov	r1, r4
 80092ce:	f000 fd5f 	bl	8009d90 <__mcmp>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	da5b      	bge.n	800938e <_dtoa_r+0x916>
 80092d6:	2300      	movs	r3, #0
 80092d8:	9903      	ldr	r1, [sp, #12]
 80092da:	220a      	movs	r2, #10
 80092dc:	4648      	mov	r0, r9
 80092de:	f000 fafd 	bl	80098dc <__multadd>
 80092e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092e4:	9003      	str	r0, [sp, #12]
 80092e6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 8177 	beq.w	80095de <_dtoa_r+0xb66>
 80092f0:	4629      	mov	r1, r5
 80092f2:	2300      	movs	r3, #0
 80092f4:	220a      	movs	r2, #10
 80092f6:	4648      	mov	r0, r9
 80092f8:	f000 faf0 	bl	80098dc <__multadd>
 80092fc:	f1bb 0f00 	cmp.w	fp, #0
 8009300:	4605      	mov	r5, r0
 8009302:	dc6f      	bgt.n	80093e4 <_dtoa_r+0x96c>
 8009304:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009306:	2b02      	cmp	r3, #2
 8009308:	dc49      	bgt.n	800939e <_dtoa_r+0x926>
 800930a:	e06b      	b.n	80093e4 <_dtoa_r+0x96c>
 800930c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800930e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009312:	e73c      	b.n	800918e <_dtoa_r+0x716>
 8009314:	3fe00000 	.word	0x3fe00000
 8009318:	40240000 	.word	0x40240000
 800931c:	9b08      	ldr	r3, [sp, #32]
 800931e:	1e5c      	subs	r4, r3, #1
 8009320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009322:	42a3      	cmp	r3, r4
 8009324:	db09      	blt.n	800933a <_dtoa_r+0x8c2>
 8009326:	1b1c      	subs	r4, r3, r4
 8009328:	9b08      	ldr	r3, [sp, #32]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f6bf af30 	bge.w	8009190 <_dtoa_r+0x718>
 8009330:	9b04      	ldr	r3, [sp, #16]
 8009332:	9a08      	ldr	r2, [sp, #32]
 8009334:	1a9e      	subs	r6, r3, r2
 8009336:	2300      	movs	r3, #0
 8009338:	e72b      	b.n	8009192 <_dtoa_r+0x71a>
 800933a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800933c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800933e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009340:	1ae3      	subs	r3, r4, r3
 8009342:	441a      	add	r2, r3
 8009344:	9e04      	ldr	r6, [sp, #16]
 8009346:	9b08      	ldr	r3, [sp, #32]
 8009348:	920e      	str	r2, [sp, #56]	@ 0x38
 800934a:	2400      	movs	r4, #0
 800934c:	e721      	b.n	8009192 <_dtoa_r+0x71a>
 800934e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009350:	9e04      	ldr	r6, [sp, #16]
 8009352:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009354:	e728      	b.n	80091a8 <_dtoa_r+0x730>
 8009356:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800935a:	e751      	b.n	8009200 <_dtoa_r+0x788>
 800935c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800935e:	9903      	ldr	r1, [sp, #12]
 8009360:	e750      	b.n	8009204 <_dtoa_r+0x78c>
 8009362:	f8cd 800c 	str.w	r8, [sp, #12]
 8009366:	e751      	b.n	800920c <_dtoa_r+0x794>
 8009368:	2300      	movs	r3, #0
 800936a:	e779      	b.n	8009260 <_dtoa_r+0x7e8>
 800936c:	9b06      	ldr	r3, [sp, #24]
 800936e:	e777      	b.n	8009260 <_dtoa_r+0x7e8>
 8009370:	2300      	movs	r3, #0
 8009372:	930a      	str	r3, [sp, #40]	@ 0x28
 8009374:	e779      	b.n	800926a <_dtoa_r+0x7f2>
 8009376:	d093      	beq.n	80092a0 <_dtoa_r+0x828>
 8009378:	9a04      	ldr	r2, [sp, #16]
 800937a:	331c      	adds	r3, #28
 800937c:	441a      	add	r2, r3
 800937e:	9204      	str	r2, [sp, #16]
 8009380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009382:	441a      	add	r2, r3
 8009384:	441e      	add	r6, r3
 8009386:	9209      	str	r2, [sp, #36]	@ 0x24
 8009388:	e78a      	b.n	80092a0 <_dtoa_r+0x828>
 800938a:	4603      	mov	r3, r0
 800938c:	e7f4      	b.n	8009378 <_dtoa_r+0x900>
 800938e:	9b08      	ldr	r3, [sp, #32]
 8009390:	2b00      	cmp	r3, #0
 8009392:	46b8      	mov	r8, r7
 8009394:	dc20      	bgt.n	80093d8 <_dtoa_r+0x960>
 8009396:	469b      	mov	fp, r3
 8009398:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800939a:	2b02      	cmp	r3, #2
 800939c:	dd1e      	ble.n	80093dc <_dtoa_r+0x964>
 800939e:	f1bb 0f00 	cmp.w	fp, #0
 80093a2:	f47f adb1 	bne.w	8008f08 <_dtoa_r+0x490>
 80093a6:	4621      	mov	r1, r4
 80093a8:	465b      	mov	r3, fp
 80093aa:	2205      	movs	r2, #5
 80093ac:	4648      	mov	r0, r9
 80093ae:	f000 fa95 	bl	80098dc <__multadd>
 80093b2:	4601      	mov	r1, r0
 80093b4:	4604      	mov	r4, r0
 80093b6:	9803      	ldr	r0, [sp, #12]
 80093b8:	f000 fcea 	bl	8009d90 <__mcmp>
 80093bc:	2800      	cmp	r0, #0
 80093be:	f77f ada3 	ble.w	8008f08 <_dtoa_r+0x490>
 80093c2:	4656      	mov	r6, sl
 80093c4:	2331      	movs	r3, #49	@ 0x31
 80093c6:	f806 3b01 	strb.w	r3, [r6], #1
 80093ca:	f108 0801 	add.w	r8, r8, #1
 80093ce:	e59f      	b.n	8008f10 <_dtoa_r+0x498>
 80093d0:	9c08      	ldr	r4, [sp, #32]
 80093d2:	46b8      	mov	r8, r7
 80093d4:	4625      	mov	r5, r4
 80093d6:	e7f4      	b.n	80093c2 <_dtoa_r+0x94a>
 80093d8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80093dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 8101 	beq.w	80095e6 <_dtoa_r+0xb6e>
 80093e4:	2e00      	cmp	r6, #0
 80093e6:	dd05      	ble.n	80093f4 <_dtoa_r+0x97c>
 80093e8:	4629      	mov	r1, r5
 80093ea:	4632      	mov	r2, r6
 80093ec:	4648      	mov	r0, r9
 80093ee:	f000 fc63 	bl	8009cb8 <__lshift>
 80093f2:	4605      	mov	r5, r0
 80093f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d05c      	beq.n	80094b4 <_dtoa_r+0xa3c>
 80093fa:	6869      	ldr	r1, [r5, #4]
 80093fc:	4648      	mov	r0, r9
 80093fe:	f000 fa0b 	bl	8009818 <_Balloc>
 8009402:	4606      	mov	r6, r0
 8009404:	b928      	cbnz	r0, 8009412 <_dtoa_r+0x99a>
 8009406:	4b82      	ldr	r3, [pc, #520]	@ (8009610 <_dtoa_r+0xb98>)
 8009408:	4602      	mov	r2, r0
 800940a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800940e:	f7ff bb47 	b.w	8008aa0 <_dtoa_r+0x28>
 8009412:	692a      	ldr	r2, [r5, #16]
 8009414:	3202      	adds	r2, #2
 8009416:	0092      	lsls	r2, r2, #2
 8009418:	f105 010c 	add.w	r1, r5, #12
 800941c:	300c      	adds	r0, #12
 800941e:	f002 f915 	bl	800b64c <memcpy>
 8009422:	2201      	movs	r2, #1
 8009424:	4631      	mov	r1, r6
 8009426:	4648      	mov	r0, r9
 8009428:	f000 fc46 	bl	8009cb8 <__lshift>
 800942c:	f10a 0301 	add.w	r3, sl, #1
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	eb0a 030b 	add.w	r3, sl, fp
 8009436:	930a      	str	r3, [sp, #40]	@ 0x28
 8009438:	9b06      	ldr	r3, [sp, #24]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	462f      	mov	r7, r5
 8009440:	9309      	str	r3, [sp, #36]	@ 0x24
 8009442:	4605      	mov	r5, r0
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	9803      	ldr	r0, [sp, #12]
 8009448:	4621      	mov	r1, r4
 800944a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800944e:	f7ff fa8b 	bl	8008968 <quorem>
 8009452:	4603      	mov	r3, r0
 8009454:	3330      	adds	r3, #48	@ 0x30
 8009456:	9006      	str	r0, [sp, #24]
 8009458:	4639      	mov	r1, r7
 800945a:	9803      	ldr	r0, [sp, #12]
 800945c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800945e:	f000 fc97 	bl	8009d90 <__mcmp>
 8009462:	462a      	mov	r2, r5
 8009464:	9008      	str	r0, [sp, #32]
 8009466:	4621      	mov	r1, r4
 8009468:	4648      	mov	r0, r9
 800946a:	f000 fcad 	bl	8009dc8 <__mdiff>
 800946e:	68c2      	ldr	r2, [r0, #12]
 8009470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009472:	4606      	mov	r6, r0
 8009474:	bb02      	cbnz	r2, 80094b8 <_dtoa_r+0xa40>
 8009476:	4601      	mov	r1, r0
 8009478:	9803      	ldr	r0, [sp, #12]
 800947a:	f000 fc89 	bl	8009d90 <__mcmp>
 800947e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009480:	4602      	mov	r2, r0
 8009482:	4631      	mov	r1, r6
 8009484:	4648      	mov	r0, r9
 8009486:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800948a:	f000 fa05 	bl	8009898 <_Bfree>
 800948e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009490:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009492:	9e04      	ldr	r6, [sp, #16]
 8009494:	ea42 0103 	orr.w	r1, r2, r3
 8009498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800949a:	4319      	orrs	r1, r3
 800949c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800949e:	d10d      	bne.n	80094bc <_dtoa_r+0xa44>
 80094a0:	2b39      	cmp	r3, #57	@ 0x39
 80094a2:	d027      	beq.n	80094f4 <_dtoa_r+0xa7c>
 80094a4:	9a08      	ldr	r2, [sp, #32]
 80094a6:	2a00      	cmp	r2, #0
 80094a8:	dd01      	ble.n	80094ae <_dtoa_r+0xa36>
 80094aa:	9b06      	ldr	r3, [sp, #24]
 80094ac:	3331      	adds	r3, #49	@ 0x31
 80094ae:	f88b 3000 	strb.w	r3, [fp]
 80094b2:	e52e      	b.n	8008f12 <_dtoa_r+0x49a>
 80094b4:	4628      	mov	r0, r5
 80094b6:	e7b9      	b.n	800942c <_dtoa_r+0x9b4>
 80094b8:	2201      	movs	r2, #1
 80094ba:	e7e2      	b.n	8009482 <_dtoa_r+0xa0a>
 80094bc:	9908      	ldr	r1, [sp, #32]
 80094be:	2900      	cmp	r1, #0
 80094c0:	db04      	blt.n	80094cc <_dtoa_r+0xa54>
 80094c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80094c4:	4301      	orrs	r1, r0
 80094c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094c8:	4301      	orrs	r1, r0
 80094ca:	d120      	bne.n	800950e <_dtoa_r+0xa96>
 80094cc:	2a00      	cmp	r2, #0
 80094ce:	ddee      	ble.n	80094ae <_dtoa_r+0xa36>
 80094d0:	9903      	ldr	r1, [sp, #12]
 80094d2:	9304      	str	r3, [sp, #16]
 80094d4:	2201      	movs	r2, #1
 80094d6:	4648      	mov	r0, r9
 80094d8:	f000 fbee 	bl	8009cb8 <__lshift>
 80094dc:	4621      	mov	r1, r4
 80094de:	9003      	str	r0, [sp, #12]
 80094e0:	f000 fc56 	bl	8009d90 <__mcmp>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	dc02      	bgt.n	80094f0 <_dtoa_r+0xa78>
 80094ea:	d1e0      	bne.n	80094ae <_dtoa_r+0xa36>
 80094ec:	07da      	lsls	r2, r3, #31
 80094ee:	d5de      	bpl.n	80094ae <_dtoa_r+0xa36>
 80094f0:	2b39      	cmp	r3, #57	@ 0x39
 80094f2:	d1da      	bne.n	80094aa <_dtoa_r+0xa32>
 80094f4:	2339      	movs	r3, #57	@ 0x39
 80094f6:	f88b 3000 	strb.w	r3, [fp]
 80094fa:	4633      	mov	r3, r6
 80094fc:	461e      	mov	r6, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009504:	2a39      	cmp	r2, #57	@ 0x39
 8009506:	d04e      	beq.n	80095a6 <_dtoa_r+0xb2e>
 8009508:	3201      	adds	r2, #1
 800950a:	701a      	strb	r2, [r3, #0]
 800950c:	e501      	b.n	8008f12 <_dtoa_r+0x49a>
 800950e:	2a00      	cmp	r2, #0
 8009510:	dd03      	ble.n	800951a <_dtoa_r+0xaa2>
 8009512:	2b39      	cmp	r3, #57	@ 0x39
 8009514:	d0ee      	beq.n	80094f4 <_dtoa_r+0xa7c>
 8009516:	3301      	adds	r3, #1
 8009518:	e7c9      	b.n	80094ae <_dtoa_r+0xa36>
 800951a:	9a04      	ldr	r2, [sp, #16]
 800951c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800951e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009522:	428a      	cmp	r2, r1
 8009524:	d028      	beq.n	8009578 <_dtoa_r+0xb00>
 8009526:	9903      	ldr	r1, [sp, #12]
 8009528:	2300      	movs	r3, #0
 800952a:	220a      	movs	r2, #10
 800952c:	4648      	mov	r0, r9
 800952e:	f000 f9d5 	bl	80098dc <__multadd>
 8009532:	42af      	cmp	r7, r5
 8009534:	9003      	str	r0, [sp, #12]
 8009536:	f04f 0300 	mov.w	r3, #0
 800953a:	f04f 020a 	mov.w	r2, #10
 800953e:	4639      	mov	r1, r7
 8009540:	4648      	mov	r0, r9
 8009542:	d107      	bne.n	8009554 <_dtoa_r+0xadc>
 8009544:	f000 f9ca 	bl	80098dc <__multadd>
 8009548:	4607      	mov	r7, r0
 800954a:	4605      	mov	r5, r0
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	3301      	adds	r3, #1
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	e777      	b.n	8009444 <_dtoa_r+0x9cc>
 8009554:	f000 f9c2 	bl	80098dc <__multadd>
 8009558:	4629      	mov	r1, r5
 800955a:	4607      	mov	r7, r0
 800955c:	2300      	movs	r3, #0
 800955e:	220a      	movs	r2, #10
 8009560:	4648      	mov	r0, r9
 8009562:	f000 f9bb 	bl	80098dc <__multadd>
 8009566:	4605      	mov	r5, r0
 8009568:	e7f0      	b.n	800954c <_dtoa_r+0xad4>
 800956a:	f1bb 0f00 	cmp.w	fp, #0
 800956e:	bfcc      	ite	gt
 8009570:	465e      	movgt	r6, fp
 8009572:	2601      	movle	r6, #1
 8009574:	4456      	add	r6, sl
 8009576:	2700      	movs	r7, #0
 8009578:	9903      	ldr	r1, [sp, #12]
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	2201      	movs	r2, #1
 800957e:	4648      	mov	r0, r9
 8009580:	f000 fb9a 	bl	8009cb8 <__lshift>
 8009584:	4621      	mov	r1, r4
 8009586:	9003      	str	r0, [sp, #12]
 8009588:	f000 fc02 	bl	8009d90 <__mcmp>
 800958c:	2800      	cmp	r0, #0
 800958e:	dcb4      	bgt.n	80094fa <_dtoa_r+0xa82>
 8009590:	d102      	bne.n	8009598 <_dtoa_r+0xb20>
 8009592:	9b04      	ldr	r3, [sp, #16]
 8009594:	07db      	lsls	r3, r3, #31
 8009596:	d4b0      	bmi.n	80094fa <_dtoa_r+0xa82>
 8009598:	4633      	mov	r3, r6
 800959a:	461e      	mov	r6, r3
 800959c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095a0:	2a30      	cmp	r2, #48	@ 0x30
 80095a2:	d0fa      	beq.n	800959a <_dtoa_r+0xb22>
 80095a4:	e4b5      	b.n	8008f12 <_dtoa_r+0x49a>
 80095a6:	459a      	cmp	sl, r3
 80095a8:	d1a8      	bne.n	80094fc <_dtoa_r+0xa84>
 80095aa:	2331      	movs	r3, #49	@ 0x31
 80095ac:	f108 0801 	add.w	r8, r8, #1
 80095b0:	f88a 3000 	strb.w	r3, [sl]
 80095b4:	e4ad      	b.n	8008f12 <_dtoa_r+0x49a>
 80095b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80095b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009614 <_dtoa_r+0xb9c>
 80095bc:	b11b      	cbz	r3, 80095c6 <_dtoa_r+0xb4e>
 80095be:	f10a 0308 	add.w	r3, sl, #8
 80095c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80095c4:	6013      	str	r3, [r2, #0]
 80095c6:	4650      	mov	r0, sl
 80095c8:	b017      	add	sp, #92	@ 0x5c
 80095ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	f77f ae2e 	ble.w	8009232 <_dtoa_r+0x7ba>
 80095d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80095da:	2001      	movs	r0, #1
 80095dc:	e64d      	b.n	800927a <_dtoa_r+0x802>
 80095de:	f1bb 0f00 	cmp.w	fp, #0
 80095e2:	f77f aed9 	ble.w	8009398 <_dtoa_r+0x920>
 80095e6:	4656      	mov	r6, sl
 80095e8:	9803      	ldr	r0, [sp, #12]
 80095ea:	4621      	mov	r1, r4
 80095ec:	f7ff f9bc 	bl	8008968 <quorem>
 80095f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80095f4:	f806 3b01 	strb.w	r3, [r6], #1
 80095f8:	eba6 020a 	sub.w	r2, r6, sl
 80095fc:	4593      	cmp	fp, r2
 80095fe:	ddb4      	ble.n	800956a <_dtoa_r+0xaf2>
 8009600:	9903      	ldr	r1, [sp, #12]
 8009602:	2300      	movs	r3, #0
 8009604:	220a      	movs	r2, #10
 8009606:	4648      	mov	r0, r9
 8009608:	f000 f968 	bl	80098dc <__multadd>
 800960c:	9003      	str	r0, [sp, #12]
 800960e:	e7eb      	b.n	80095e8 <_dtoa_r+0xb70>
 8009610:	0800c3c5 	.word	0x0800c3c5
 8009614:	0800c349 	.word	0x0800c349

08009618 <_free_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4605      	mov	r5, r0
 800961c:	2900      	cmp	r1, #0
 800961e:	d041      	beq.n	80096a4 <_free_r+0x8c>
 8009620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009624:	1f0c      	subs	r4, r1, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	bfb8      	it	lt
 800962a:	18e4      	addlt	r4, r4, r3
 800962c:	f000 f8e8 	bl	8009800 <__malloc_lock>
 8009630:	4a1d      	ldr	r2, [pc, #116]	@ (80096a8 <_free_r+0x90>)
 8009632:	6813      	ldr	r3, [r2, #0]
 8009634:	b933      	cbnz	r3, 8009644 <_free_r+0x2c>
 8009636:	6063      	str	r3, [r4, #4]
 8009638:	6014      	str	r4, [r2, #0]
 800963a:	4628      	mov	r0, r5
 800963c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009640:	f000 b8e4 	b.w	800980c <__malloc_unlock>
 8009644:	42a3      	cmp	r3, r4
 8009646:	d908      	bls.n	800965a <_free_r+0x42>
 8009648:	6820      	ldr	r0, [r4, #0]
 800964a:	1821      	adds	r1, r4, r0
 800964c:	428b      	cmp	r3, r1
 800964e:	bf01      	itttt	eq
 8009650:	6819      	ldreq	r1, [r3, #0]
 8009652:	685b      	ldreq	r3, [r3, #4]
 8009654:	1809      	addeq	r1, r1, r0
 8009656:	6021      	streq	r1, [r4, #0]
 8009658:	e7ed      	b.n	8009636 <_free_r+0x1e>
 800965a:	461a      	mov	r2, r3
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	b10b      	cbz	r3, 8009664 <_free_r+0x4c>
 8009660:	42a3      	cmp	r3, r4
 8009662:	d9fa      	bls.n	800965a <_free_r+0x42>
 8009664:	6811      	ldr	r1, [r2, #0]
 8009666:	1850      	adds	r0, r2, r1
 8009668:	42a0      	cmp	r0, r4
 800966a:	d10b      	bne.n	8009684 <_free_r+0x6c>
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	4401      	add	r1, r0
 8009670:	1850      	adds	r0, r2, r1
 8009672:	4283      	cmp	r3, r0
 8009674:	6011      	str	r1, [r2, #0]
 8009676:	d1e0      	bne.n	800963a <_free_r+0x22>
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	6053      	str	r3, [r2, #4]
 800967e:	4408      	add	r0, r1
 8009680:	6010      	str	r0, [r2, #0]
 8009682:	e7da      	b.n	800963a <_free_r+0x22>
 8009684:	d902      	bls.n	800968c <_free_r+0x74>
 8009686:	230c      	movs	r3, #12
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	e7d6      	b.n	800963a <_free_r+0x22>
 800968c:	6820      	ldr	r0, [r4, #0]
 800968e:	1821      	adds	r1, r4, r0
 8009690:	428b      	cmp	r3, r1
 8009692:	bf04      	itt	eq
 8009694:	6819      	ldreq	r1, [r3, #0]
 8009696:	685b      	ldreq	r3, [r3, #4]
 8009698:	6063      	str	r3, [r4, #4]
 800969a:	bf04      	itt	eq
 800969c:	1809      	addeq	r1, r1, r0
 800969e:	6021      	streq	r1, [r4, #0]
 80096a0:	6054      	str	r4, [r2, #4]
 80096a2:	e7ca      	b.n	800963a <_free_r+0x22>
 80096a4:	bd38      	pop	{r3, r4, r5, pc}
 80096a6:	bf00      	nop
 80096a8:	20000754 	.word	0x20000754

080096ac <malloc>:
 80096ac:	4b02      	ldr	r3, [pc, #8]	@ (80096b8 <malloc+0xc>)
 80096ae:	4601      	mov	r1, r0
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	f000 b825 	b.w	8009700 <_malloc_r>
 80096b6:	bf00      	nop
 80096b8:	20000024 	.word	0x20000024

080096bc <sbrk_aligned>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	4e0f      	ldr	r6, [pc, #60]	@ (80096fc <sbrk_aligned+0x40>)
 80096c0:	460c      	mov	r4, r1
 80096c2:	6831      	ldr	r1, [r6, #0]
 80096c4:	4605      	mov	r5, r0
 80096c6:	b911      	cbnz	r1, 80096ce <sbrk_aligned+0x12>
 80096c8:	f001 ffb0 	bl	800b62c <_sbrk_r>
 80096cc:	6030      	str	r0, [r6, #0]
 80096ce:	4621      	mov	r1, r4
 80096d0:	4628      	mov	r0, r5
 80096d2:	f001 ffab 	bl	800b62c <_sbrk_r>
 80096d6:	1c43      	adds	r3, r0, #1
 80096d8:	d103      	bne.n	80096e2 <sbrk_aligned+0x26>
 80096da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80096de:	4620      	mov	r0, r4
 80096e0:	bd70      	pop	{r4, r5, r6, pc}
 80096e2:	1cc4      	adds	r4, r0, #3
 80096e4:	f024 0403 	bic.w	r4, r4, #3
 80096e8:	42a0      	cmp	r0, r4
 80096ea:	d0f8      	beq.n	80096de <sbrk_aligned+0x22>
 80096ec:	1a21      	subs	r1, r4, r0
 80096ee:	4628      	mov	r0, r5
 80096f0:	f001 ff9c 	bl	800b62c <_sbrk_r>
 80096f4:	3001      	adds	r0, #1
 80096f6:	d1f2      	bne.n	80096de <sbrk_aligned+0x22>
 80096f8:	e7ef      	b.n	80096da <sbrk_aligned+0x1e>
 80096fa:	bf00      	nop
 80096fc:	20000750 	.word	0x20000750

08009700 <_malloc_r>:
 8009700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009704:	1ccd      	adds	r5, r1, #3
 8009706:	f025 0503 	bic.w	r5, r5, #3
 800970a:	3508      	adds	r5, #8
 800970c:	2d0c      	cmp	r5, #12
 800970e:	bf38      	it	cc
 8009710:	250c      	movcc	r5, #12
 8009712:	2d00      	cmp	r5, #0
 8009714:	4606      	mov	r6, r0
 8009716:	db01      	blt.n	800971c <_malloc_r+0x1c>
 8009718:	42a9      	cmp	r1, r5
 800971a:	d904      	bls.n	8009726 <_malloc_r+0x26>
 800971c:	230c      	movs	r3, #12
 800971e:	6033      	str	r3, [r6, #0]
 8009720:	2000      	movs	r0, #0
 8009722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80097fc <_malloc_r+0xfc>
 800972a:	f000 f869 	bl	8009800 <__malloc_lock>
 800972e:	f8d8 3000 	ldr.w	r3, [r8]
 8009732:	461c      	mov	r4, r3
 8009734:	bb44      	cbnz	r4, 8009788 <_malloc_r+0x88>
 8009736:	4629      	mov	r1, r5
 8009738:	4630      	mov	r0, r6
 800973a:	f7ff ffbf 	bl	80096bc <sbrk_aligned>
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	4604      	mov	r4, r0
 8009742:	d158      	bne.n	80097f6 <_malloc_r+0xf6>
 8009744:	f8d8 4000 	ldr.w	r4, [r8]
 8009748:	4627      	mov	r7, r4
 800974a:	2f00      	cmp	r7, #0
 800974c:	d143      	bne.n	80097d6 <_malloc_r+0xd6>
 800974e:	2c00      	cmp	r4, #0
 8009750:	d04b      	beq.n	80097ea <_malloc_r+0xea>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	4639      	mov	r1, r7
 8009756:	4630      	mov	r0, r6
 8009758:	eb04 0903 	add.w	r9, r4, r3
 800975c:	f001 ff66 	bl	800b62c <_sbrk_r>
 8009760:	4581      	cmp	r9, r0
 8009762:	d142      	bne.n	80097ea <_malloc_r+0xea>
 8009764:	6821      	ldr	r1, [r4, #0]
 8009766:	1a6d      	subs	r5, r5, r1
 8009768:	4629      	mov	r1, r5
 800976a:	4630      	mov	r0, r6
 800976c:	f7ff ffa6 	bl	80096bc <sbrk_aligned>
 8009770:	3001      	adds	r0, #1
 8009772:	d03a      	beq.n	80097ea <_malloc_r+0xea>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	442b      	add	r3, r5
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	f8d8 3000 	ldr.w	r3, [r8]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	bb62      	cbnz	r2, 80097dc <_malloc_r+0xdc>
 8009782:	f8c8 7000 	str.w	r7, [r8]
 8009786:	e00f      	b.n	80097a8 <_malloc_r+0xa8>
 8009788:	6822      	ldr	r2, [r4, #0]
 800978a:	1b52      	subs	r2, r2, r5
 800978c:	d420      	bmi.n	80097d0 <_malloc_r+0xd0>
 800978e:	2a0b      	cmp	r2, #11
 8009790:	d917      	bls.n	80097c2 <_malloc_r+0xc2>
 8009792:	1961      	adds	r1, r4, r5
 8009794:	42a3      	cmp	r3, r4
 8009796:	6025      	str	r5, [r4, #0]
 8009798:	bf18      	it	ne
 800979a:	6059      	strne	r1, [r3, #4]
 800979c:	6863      	ldr	r3, [r4, #4]
 800979e:	bf08      	it	eq
 80097a0:	f8c8 1000 	streq.w	r1, [r8]
 80097a4:	5162      	str	r2, [r4, r5]
 80097a6:	604b      	str	r3, [r1, #4]
 80097a8:	4630      	mov	r0, r6
 80097aa:	f000 f82f 	bl	800980c <__malloc_unlock>
 80097ae:	f104 000b 	add.w	r0, r4, #11
 80097b2:	1d23      	adds	r3, r4, #4
 80097b4:	f020 0007 	bic.w	r0, r0, #7
 80097b8:	1ac2      	subs	r2, r0, r3
 80097ba:	bf1c      	itt	ne
 80097bc:	1a1b      	subne	r3, r3, r0
 80097be:	50a3      	strne	r3, [r4, r2]
 80097c0:	e7af      	b.n	8009722 <_malloc_r+0x22>
 80097c2:	6862      	ldr	r2, [r4, #4]
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	bf0c      	ite	eq
 80097c8:	f8c8 2000 	streq.w	r2, [r8]
 80097cc:	605a      	strne	r2, [r3, #4]
 80097ce:	e7eb      	b.n	80097a8 <_malloc_r+0xa8>
 80097d0:	4623      	mov	r3, r4
 80097d2:	6864      	ldr	r4, [r4, #4]
 80097d4:	e7ae      	b.n	8009734 <_malloc_r+0x34>
 80097d6:	463c      	mov	r4, r7
 80097d8:	687f      	ldr	r7, [r7, #4]
 80097da:	e7b6      	b.n	800974a <_malloc_r+0x4a>
 80097dc:	461a      	mov	r2, r3
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	42a3      	cmp	r3, r4
 80097e2:	d1fb      	bne.n	80097dc <_malloc_r+0xdc>
 80097e4:	2300      	movs	r3, #0
 80097e6:	6053      	str	r3, [r2, #4]
 80097e8:	e7de      	b.n	80097a8 <_malloc_r+0xa8>
 80097ea:	230c      	movs	r3, #12
 80097ec:	6033      	str	r3, [r6, #0]
 80097ee:	4630      	mov	r0, r6
 80097f0:	f000 f80c 	bl	800980c <__malloc_unlock>
 80097f4:	e794      	b.n	8009720 <_malloc_r+0x20>
 80097f6:	6005      	str	r5, [r0, #0]
 80097f8:	e7d6      	b.n	80097a8 <_malloc_r+0xa8>
 80097fa:	bf00      	nop
 80097fc:	20000754 	.word	0x20000754

08009800 <__malloc_lock>:
 8009800:	4801      	ldr	r0, [pc, #4]	@ (8009808 <__malloc_lock+0x8>)
 8009802:	f7ff b8aa 	b.w	800895a <__retarget_lock_acquire_recursive>
 8009806:	bf00      	nop
 8009808:	2000074c 	.word	0x2000074c

0800980c <__malloc_unlock>:
 800980c:	4801      	ldr	r0, [pc, #4]	@ (8009814 <__malloc_unlock+0x8>)
 800980e:	f7ff b8a5 	b.w	800895c <__retarget_lock_release_recursive>
 8009812:	bf00      	nop
 8009814:	2000074c 	.word	0x2000074c

08009818 <_Balloc>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	69c6      	ldr	r6, [r0, #28]
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	b976      	cbnz	r6, 8009840 <_Balloc+0x28>
 8009822:	2010      	movs	r0, #16
 8009824:	f7ff ff42 	bl	80096ac <malloc>
 8009828:	4602      	mov	r2, r0
 800982a:	61e0      	str	r0, [r4, #28]
 800982c:	b920      	cbnz	r0, 8009838 <_Balloc+0x20>
 800982e:	4b18      	ldr	r3, [pc, #96]	@ (8009890 <_Balloc+0x78>)
 8009830:	4818      	ldr	r0, [pc, #96]	@ (8009894 <_Balloc+0x7c>)
 8009832:	216b      	movs	r1, #107	@ 0x6b
 8009834:	f001 ff1e 	bl	800b674 <__assert_func>
 8009838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800983c:	6006      	str	r6, [r0, #0]
 800983e:	60c6      	str	r6, [r0, #12]
 8009840:	69e6      	ldr	r6, [r4, #28]
 8009842:	68f3      	ldr	r3, [r6, #12]
 8009844:	b183      	cbz	r3, 8009868 <_Balloc+0x50>
 8009846:	69e3      	ldr	r3, [r4, #28]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800984e:	b9b8      	cbnz	r0, 8009880 <_Balloc+0x68>
 8009850:	2101      	movs	r1, #1
 8009852:	fa01 f605 	lsl.w	r6, r1, r5
 8009856:	1d72      	adds	r2, r6, #5
 8009858:	0092      	lsls	r2, r2, #2
 800985a:	4620      	mov	r0, r4
 800985c:	f001 ff28 	bl	800b6b0 <_calloc_r>
 8009860:	b160      	cbz	r0, 800987c <_Balloc+0x64>
 8009862:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009866:	e00e      	b.n	8009886 <_Balloc+0x6e>
 8009868:	2221      	movs	r2, #33	@ 0x21
 800986a:	2104      	movs	r1, #4
 800986c:	4620      	mov	r0, r4
 800986e:	f001 ff1f 	bl	800b6b0 <_calloc_r>
 8009872:	69e3      	ldr	r3, [r4, #28]
 8009874:	60f0      	str	r0, [r6, #12]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1e4      	bne.n	8009846 <_Balloc+0x2e>
 800987c:	2000      	movs	r0, #0
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	6802      	ldr	r2, [r0, #0]
 8009882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009886:	2300      	movs	r3, #0
 8009888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800988c:	e7f7      	b.n	800987e <_Balloc+0x66>
 800988e:	bf00      	nop
 8009890:	0800c356 	.word	0x0800c356
 8009894:	0800c3d6 	.word	0x0800c3d6

08009898 <_Bfree>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	69c6      	ldr	r6, [r0, #28]
 800989c:	4605      	mov	r5, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	b976      	cbnz	r6, 80098c0 <_Bfree+0x28>
 80098a2:	2010      	movs	r0, #16
 80098a4:	f7ff ff02 	bl	80096ac <malloc>
 80098a8:	4602      	mov	r2, r0
 80098aa:	61e8      	str	r0, [r5, #28]
 80098ac:	b920      	cbnz	r0, 80098b8 <_Bfree+0x20>
 80098ae:	4b09      	ldr	r3, [pc, #36]	@ (80098d4 <_Bfree+0x3c>)
 80098b0:	4809      	ldr	r0, [pc, #36]	@ (80098d8 <_Bfree+0x40>)
 80098b2:	218f      	movs	r1, #143	@ 0x8f
 80098b4:	f001 fede 	bl	800b674 <__assert_func>
 80098b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098bc:	6006      	str	r6, [r0, #0]
 80098be:	60c6      	str	r6, [r0, #12]
 80098c0:	b13c      	cbz	r4, 80098d2 <_Bfree+0x3a>
 80098c2:	69eb      	ldr	r3, [r5, #28]
 80098c4:	6862      	ldr	r2, [r4, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098cc:	6021      	str	r1, [r4, #0]
 80098ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098d2:	bd70      	pop	{r4, r5, r6, pc}
 80098d4:	0800c356 	.word	0x0800c356
 80098d8:	0800c3d6 	.word	0x0800c3d6

080098dc <__multadd>:
 80098dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e0:	690d      	ldr	r5, [r1, #16]
 80098e2:	4607      	mov	r7, r0
 80098e4:	460c      	mov	r4, r1
 80098e6:	461e      	mov	r6, r3
 80098e8:	f101 0c14 	add.w	ip, r1, #20
 80098ec:	2000      	movs	r0, #0
 80098ee:	f8dc 3000 	ldr.w	r3, [ip]
 80098f2:	b299      	uxth	r1, r3
 80098f4:	fb02 6101 	mla	r1, r2, r1, r6
 80098f8:	0c1e      	lsrs	r6, r3, #16
 80098fa:	0c0b      	lsrs	r3, r1, #16
 80098fc:	fb02 3306 	mla	r3, r2, r6, r3
 8009900:	b289      	uxth	r1, r1
 8009902:	3001      	adds	r0, #1
 8009904:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009908:	4285      	cmp	r5, r0
 800990a:	f84c 1b04 	str.w	r1, [ip], #4
 800990e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009912:	dcec      	bgt.n	80098ee <__multadd+0x12>
 8009914:	b30e      	cbz	r6, 800995a <__multadd+0x7e>
 8009916:	68a3      	ldr	r3, [r4, #8]
 8009918:	42ab      	cmp	r3, r5
 800991a:	dc19      	bgt.n	8009950 <__multadd+0x74>
 800991c:	6861      	ldr	r1, [r4, #4]
 800991e:	4638      	mov	r0, r7
 8009920:	3101      	adds	r1, #1
 8009922:	f7ff ff79 	bl	8009818 <_Balloc>
 8009926:	4680      	mov	r8, r0
 8009928:	b928      	cbnz	r0, 8009936 <__multadd+0x5a>
 800992a:	4602      	mov	r2, r0
 800992c:	4b0c      	ldr	r3, [pc, #48]	@ (8009960 <__multadd+0x84>)
 800992e:	480d      	ldr	r0, [pc, #52]	@ (8009964 <__multadd+0x88>)
 8009930:	21ba      	movs	r1, #186	@ 0xba
 8009932:	f001 fe9f 	bl	800b674 <__assert_func>
 8009936:	6922      	ldr	r2, [r4, #16]
 8009938:	3202      	adds	r2, #2
 800993a:	f104 010c 	add.w	r1, r4, #12
 800993e:	0092      	lsls	r2, r2, #2
 8009940:	300c      	adds	r0, #12
 8009942:	f001 fe83 	bl	800b64c <memcpy>
 8009946:	4621      	mov	r1, r4
 8009948:	4638      	mov	r0, r7
 800994a:	f7ff ffa5 	bl	8009898 <_Bfree>
 800994e:	4644      	mov	r4, r8
 8009950:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009954:	3501      	adds	r5, #1
 8009956:	615e      	str	r6, [r3, #20]
 8009958:	6125      	str	r5, [r4, #16]
 800995a:	4620      	mov	r0, r4
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	0800c3c5 	.word	0x0800c3c5
 8009964:	0800c3d6 	.word	0x0800c3d6

08009968 <__s2b>:
 8009968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800996c:	460c      	mov	r4, r1
 800996e:	4615      	mov	r5, r2
 8009970:	461f      	mov	r7, r3
 8009972:	2209      	movs	r2, #9
 8009974:	3308      	adds	r3, #8
 8009976:	4606      	mov	r6, r0
 8009978:	fb93 f3f2 	sdiv	r3, r3, r2
 800997c:	2100      	movs	r1, #0
 800997e:	2201      	movs	r2, #1
 8009980:	429a      	cmp	r2, r3
 8009982:	db09      	blt.n	8009998 <__s2b+0x30>
 8009984:	4630      	mov	r0, r6
 8009986:	f7ff ff47 	bl	8009818 <_Balloc>
 800998a:	b940      	cbnz	r0, 800999e <__s2b+0x36>
 800998c:	4602      	mov	r2, r0
 800998e:	4b19      	ldr	r3, [pc, #100]	@ (80099f4 <__s2b+0x8c>)
 8009990:	4819      	ldr	r0, [pc, #100]	@ (80099f8 <__s2b+0x90>)
 8009992:	21d3      	movs	r1, #211	@ 0xd3
 8009994:	f001 fe6e 	bl	800b674 <__assert_func>
 8009998:	0052      	lsls	r2, r2, #1
 800999a:	3101      	adds	r1, #1
 800999c:	e7f0      	b.n	8009980 <__s2b+0x18>
 800999e:	9b08      	ldr	r3, [sp, #32]
 80099a0:	6143      	str	r3, [r0, #20]
 80099a2:	2d09      	cmp	r5, #9
 80099a4:	f04f 0301 	mov.w	r3, #1
 80099a8:	6103      	str	r3, [r0, #16]
 80099aa:	dd16      	ble.n	80099da <__s2b+0x72>
 80099ac:	f104 0909 	add.w	r9, r4, #9
 80099b0:	46c8      	mov	r8, r9
 80099b2:	442c      	add	r4, r5
 80099b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80099b8:	4601      	mov	r1, r0
 80099ba:	3b30      	subs	r3, #48	@ 0x30
 80099bc:	220a      	movs	r2, #10
 80099be:	4630      	mov	r0, r6
 80099c0:	f7ff ff8c 	bl	80098dc <__multadd>
 80099c4:	45a0      	cmp	r8, r4
 80099c6:	d1f5      	bne.n	80099b4 <__s2b+0x4c>
 80099c8:	f1a5 0408 	sub.w	r4, r5, #8
 80099cc:	444c      	add	r4, r9
 80099ce:	1b2d      	subs	r5, r5, r4
 80099d0:	1963      	adds	r3, r4, r5
 80099d2:	42bb      	cmp	r3, r7
 80099d4:	db04      	blt.n	80099e0 <__s2b+0x78>
 80099d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099da:	340a      	adds	r4, #10
 80099dc:	2509      	movs	r5, #9
 80099de:	e7f6      	b.n	80099ce <__s2b+0x66>
 80099e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099e4:	4601      	mov	r1, r0
 80099e6:	3b30      	subs	r3, #48	@ 0x30
 80099e8:	220a      	movs	r2, #10
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7ff ff76 	bl	80098dc <__multadd>
 80099f0:	e7ee      	b.n	80099d0 <__s2b+0x68>
 80099f2:	bf00      	nop
 80099f4:	0800c3c5 	.word	0x0800c3c5
 80099f8:	0800c3d6 	.word	0x0800c3d6

080099fc <__hi0bits>:
 80099fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a00:	4603      	mov	r3, r0
 8009a02:	bf36      	itet	cc
 8009a04:	0403      	lslcc	r3, r0, #16
 8009a06:	2000      	movcs	r0, #0
 8009a08:	2010      	movcc	r0, #16
 8009a0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a0e:	bf3c      	itt	cc
 8009a10:	021b      	lslcc	r3, r3, #8
 8009a12:	3008      	addcc	r0, #8
 8009a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a18:	bf3c      	itt	cc
 8009a1a:	011b      	lslcc	r3, r3, #4
 8009a1c:	3004      	addcc	r0, #4
 8009a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a22:	bf3c      	itt	cc
 8009a24:	009b      	lslcc	r3, r3, #2
 8009a26:	3002      	addcc	r0, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	db05      	blt.n	8009a38 <__hi0bits+0x3c>
 8009a2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a30:	f100 0001 	add.w	r0, r0, #1
 8009a34:	bf08      	it	eq
 8009a36:	2020      	moveq	r0, #32
 8009a38:	4770      	bx	lr

08009a3a <__lo0bits>:
 8009a3a:	6803      	ldr	r3, [r0, #0]
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	f013 0007 	ands.w	r0, r3, #7
 8009a42:	d00b      	beq.n	8009a5c <__lo0bits+0x22>
 8009a44:	07d9      	lsls	r1, r3, #31
 8009a46:	d421      	bmi.n	8009a8c <__lo0bits+0x52>
 8009a48:	0798      	lsls	r0, r3, #30
 8009a4a:	bf49      	itett	mi
 8009a4c:	085b      	lsrmi	r3, r3, #1
 8009a4e:	089b      	lsrpl	r3, r3, #2
 8009a50:	2001      	movmi	r0, #1
 8009a52:	6013      	strmi	r3, [r2, #0]
 8009a54:	bf5c      	itt	pl
 8009a56:	6013      	strpl	r3, [r2, #0]
 8009a58:	2002      	movpl	r0, #2
 8009a5a:	4770      	bx	lr
 8009a5c:	b299      	uxth	r1, r3
 8009a5e:	b909      	cbnz	r1, 8009a64 <__lo0bits+0x2a>
 8009a60:	0c1b      	lsrs	r3, r3, #16
 8009a62:	2010      	movs	r0, #16
 8009a64:	b2d9      	uxtb	r1, r3
 8009a66:	b909      	cbnz	r1, 8009a6c <__lo0bits+0x32>
 8009a68:	3008      	adds	r0, #8
 8009a6a:	0a1b      	lsrs	r3, r3, #8
 8009a6c:	0719      	lsls	r1, r3, #28
 8009a6e:	bf04      	itt	eq
 8009a70:	091b      	lsreq	r3, r3, #4
 8009a72:	3004      	addeq	r0, #4
 8009a74:	0799      	lsls	r1, r3, #30
 8009a76:	bf04      	itt	eq
 8009a78:	089b      	lsreq	r3, r3, #2
 8009a7a:	3002      	addeq	r0, #2
 8009a7c:	07d9      	lsls	r1, r3, #31
 8009a7e:	d403      	bmi.n	8009a88 <__lo0bits+0x4e>
 8009a80:	085b      	lsrs	r3, r3, #1
 8009a82:	f100 0001 	add.w	r0, r0, #1
 8009a86:	d003      	beq.n	8009a90 <__lo0bits+0x56>
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	4770      	bx	lr
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	4770      	bx	lr
 8009a90:	2020      	movs	r0, #32
 8009a92:	4770      	bx	lr

08009a94 <__i2b>:
 8009a94:	b510      	push	{r4, lr}
 8009a96:	460c      	mov	r4, r1
 8009a98:	2101      	movs	r1, #1
 8009a9a:	f7ff febd 	bl	8009818 <_Balloc>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	b928      	cbnz	r0, 8009aae <__i2b+0x1a>
 8009aa2:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <__i2b+0x24>)
 8009aa4:	4805      	ldr	r0, [pc, #20]	@ (8009abc <__i2b+0x28>)
 8009aa6:	f240 1145 	movw	r1, #325	@ 0x145
 8009aaa:	f001 fde3 	bl	800b674 <__assert_func>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	6144      	str	r4, [r0, #20]
 8009ab2:	6103      	str	r3, [r0, #16]
 8009ab4:	bd10      	pop	{r4, pc}
 8009ab6:	bf00      	nop
 8009ab8:	0800c3c5 	.word	0x0800c3c5
 8009abc:	0800c3d6 	.word	0x0800c3d6

08009ac0 <__multiply>:
 8009ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	4617      	mov	r7, r2
 8009ac6:	690a      	ldr	r2, [r1, #16]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	bfa8      	it	ge
 8009ace:	463b      	movge	r3, r7
 8009ad0:	4689      	mov	r9, r1
 8009ad2:	bfa4      	itt	ge
 8009ad4:	460f      	movge	r7, r1
 8009ad6:	4699      	movge	r9, r3
 8009ad8:	693d      	ldr	r5, [r7, #16]
 8009ada:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	eb05 060a 	add.w	r6, r5, sl
 8009ae6:	42b3      	cmp	r3, r6
 8009ae8:	b085      	sub	sp, #20
 8009aea:	bfb8      	it	lt
 8009aec:	3101      	addlt	r1, #1
 8009aee:	f7ff fe93 	bl	8009818 <_Balloc>
 8009af2:	b930      	cbnz	r0, 8009b02 <__multiply+0x42>
 8009af4:	4602      	mov	r2, r0
 8009af6:	4b41      	ldr	r3, [pc, #260]	@ (8009bfc <__multiply+0x13c>)
 8009af8:	4841      	ldr	r0, [pc, #260]	@ (8009c00 <__multiply+0x140>)
 8009afa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009afe:	f001 fdb9 	bl	800b674 <__assert_func>
 8009b02:	f100 0414 	add.w	r4, r0, #20
 8009b06:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009b0a:	4623      	mov	r3, r4
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4573      	cmp	r3, lr
 8009b10:	d320      	bcc.n	8009b54 <__multiply+0x94>
 8009b12:	f107 0814 	add.w	r8, r7, #20
 8009b16:	f109 0114 	add.w	r1, r9, #20
 8009b1a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009b1e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009b22:	9302      	str	r3, [sp, #8]
 8009b24:	1beb      	subs	r3, r5, r7
 8009b26:	3b15      	subs	r3, #21
 8009b28:	f023 0303 	bic.w	r3, r3, #3
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	3715      	adds	r7, #21
 8009b30:	42bd      	cmp	r5, r7
 8009b32:	bf38      	it	cc
 8009b34:	2304      	movcc	r3, #4
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	9b02      	ldr	r3, [sp, #8]
 8009b3a:	9103      	str	r1, [sp, #12]
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	d80c      	bhi.n	8009b5a <__multiply+0x9a>
 8009b40:	2e00      	cmp	r6, #0
 8009b42:	dd03      	ble.n	8009b4c <__multiply+0x8c>
 8009b44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d055      	beq.n	8009bf8 <__multiply+0x138>
 8009b4c:	6106      	str	r6, [r0, #16]
 8009b4e:	b005      	add	sp, #20
 8009b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b54:	f843 2b04 	str.w	r2, [r3], #4
 8009b58:	e7d9      	b.n	8009b0e <__multiply+0x4e>
 8009b5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b5e:	f1ba 0f00 	cmp.w	sl, #0
 8009b62:	d01f      	beq.n	8009ba4 <__multiply+0xe4>
 8009b64:	46c4      	mov	ip, r8
 8009b66:	46a1      	mov	r9, r4
 8009b68:	2700      	movs	r7, #0
 8009b6a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b6e:	f8d9 3000 	ldr.w	r3, [r9]
 8009b72:	fa1f fb82 	uxth.w	fp, r2
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b7c:	443b      	add	r3, r7
 8009b7e:	f8d9 7000 	ldr.w	r7, [r9]
 8009b82:	0c12      	lsrs	r2, r2, #16
 8009b84:	0c3f      	lsrs	r7, r7, #16
 8009b86:	fb0a 7202 	mla	r2, sl, r2, r7
 8009b8a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b94:	4565      	cmp	r5, ip
 8009b96:	f849 3b04 	str.w	r3, [r9], #4
 8009b9a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009b9e:	d8e4      	bhi.n	8009b6a <__multiply+0xaa>
 8009ba0:	9b01      	ldr	r3, [sp, #4]
 8009ba2:	50e7      	str	r7, [r4, r3]
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009baa:	3104      	adds	r1, #4
 8009bac:	f1b9 0f00 	cmp.w	r9, #0
 8009bb0:	d020      	beq.n	8009bf4 <__multiply+0x134>
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	4647      	mov	r7, r8
 8009bb6:	46a4      	mov	ip, r4
 8009bb8:	f04f 0a00 	mov.w	sl, #0
 8009bbc:	f8b7 b000 	ldrh.w	fp, [r7]
 8009bc0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009bc4:	fb09 220b 	mla	r2, r9, fp, r2
 8009bc8:	4452      	add	r2, sl
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd0:	f84c 3b04 	str.w	r3, [ip], #4
 8009bd4:	f857 3b04 	ldr.w	r3, [r7], #4
 8009bd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bdc:	f8bc 3000 	ldrh.w	r3, [ip]
 8009be0:	fb09 330a 	mla	r3, r9, sl, r3
 8009be4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009be8:	42bd      	cmp	r5, r7
 8009bea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bee:	d8e5      	bhi.n	8009bbc <__multiply+0xfc>
 8009bf0:	9a01      	ldr	r2, [sp, #4]
 8009bf2:	50a3      	str	r3, [r4, r2]
 8009bf4:	3404      	adds	r4, #4
 8009bf6:	e79f      	b.n	8009b38 <__multiply+0x78>
 8009bf8:	3e01      	subs	r6, #1
 8009bfa:	e7a1      	b.n	8009b40 <__multiply+0x80>
 8009bfc:	0800c3c5 	.word	0x0800c3c5
 8009c00:	0800c3d6 	.word	0x0800c3d6

08009c04 <__pow5mult>:
 8009c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c08:	4615      	mov	r5, r2
 8009c0a:	f012 0203 	ands.w	r2, r2, #3
 8009c0e:	4607      	mov	r7, r0
 8009c10:	460e      	mov	r6, r1
 8009c12:	d007      	beq.n	8009c24 <__pow5mult+0x20>
 8009c14:	4c25      	ldr	r4, [pc, #148]	@ (8009cac <__pow5mult+0xa8>)
 8009c16:	3a01      	subs	r2, #1
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c1e:	f7ff fe5d 	bl	80098dc <__multadd>
 8009c22:	4606      	mov	r6, r0
 8009c24:	10ad      	asrs	r5, r5, #2
 8009c26:	d03d      	beq.n	8009ca4 <__pow5mult+0xa0>
 8009c28:	69fc      	ldr	r4, [r7, #28]
 8009c2a:	b97c      	cbnz	r4, 8009c4c <__pow5mult+0x48>
 8009c2c:	2010      	movs	r0, #16
 8009c2e:	f7ff fd3d 	bl	80096ac <malloc>
 8009c32:	4602      	mov	r2, r0
 8009c34:	61f8      	str	r0, [r7, #28]
 8009c36:	b928      	cbnz	r0, 8009c44 <__pow5mult+0x40>
 8009c38:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb0 <__pow5mult+0xac>)
 8009c3a:	481e      	ldr	r0, [pc, #120]	@ (8009cb4 <__pow5mult+0xb0>)
 8009c3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c40:	f001 fd18 	bl	800b674 <__assert_func>
 8009c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c48:	6004      	str	r4, [r0, #0]
 8009c4a:	60c4      	str	r4, [r0, #12]
 8009c4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c54:	b94c      	cbnz	r4, 8009c6a <__pow5mult+0x66>
 8009c56:	f240 2171 	movw	r1, #625	@ 0x271
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	f7ff ff1a 	bl	8009a94 <__i2b>
 8009c60:	2300      	movs	r3, #0
 8009c62:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c66:	4604      	mov	r4, r0
 8009c68:	6003      	str	r3, [r0, #0]
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	07eb      	lsls	r3, r5, #31
 8009c70:	d50a      	bpl.n	8009c88 <__pow5mult+0x84>
 8009c72:	4631      	mov	r1, r6
 8009c74:	4622      	mov	r2, r4
 8009c76:	4638      	mov	r0, r7
 8009c78:	f7ff ff22 	bl	8009ac0 <__multiply>
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4680      	mov	r8, r0
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff fe09 	bl	8009898 <_Bfree>
 8009c86:	4646      	mov	r6, r8
 8009c88:	106d      	asrs	r5, r5, #1
 8009c8a:	d00b      	beq.n	8009ca4 <__pow5mult+0xa0>
 8009c8c:	6820      	ldr	r0, [r4, #0]
 8009c8e:	b938      	cbnz	r0, 8009ca0 <__pow5mult+0x9c>
 8009c90:	4622      	mov	r2, r4
 8009c92:	4621      	mov	r1, r4
 8009c94:	4638      	mov	r0, r7
 8009c96:	f7ff ff13 	bl	8009ac0 <__multiply>
 8009c9a:	6020      	str	r0, [r4, #0]
 8009c9c:	f8c0 9000 	str.w	r9, [r0]
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	e7e4      	b.n	8009c6e <__pow5mult+0x6a>
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009caa:	bf00      	nop
 8009cac:	0800c4e8 	.word	0x0800c4e8
 8009cb0:	0800c356 	.word	0x0800c356
 8009cb4:	0800c3d6 	.word	0x0800c3d6

08009cb8 <__lshift>:
 8009cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	6849      	ldr	r1, [r1, #4]
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cc6:	68a3      	ldr	r3, [r4, #8]
 8009cc8:	4607      	mov	r7, r0
 8009cca:	4691      	mov	r9, r2
 8009ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cd0:	f108 0601 	add.w	r6, r8, #1
 8009cd4:	42b3      	cmp	r3, r6
 8009cd6:	db0b      	blt.n	8009cf0 <__lshift+0x38>
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f7ff fd9d 	bl	8009818 <_Balloc>
 8009cde:	4605      	mov	r5, r0
 8009ce0:	b948      	cbnz	r0, 8009cf6 <__lshift+0x3e>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	4b28      	ldr	r3, [pc, #160]	@ (8009d88 <__lshift+0xd0>)
 8009ce6:	4829      	ldr	r0, [pc, #164]	@ (8009d8c <__lshift+0xd4>)
 8009ce8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009cec:	f001 fcc2 	bl	800b674 <__assert_func>
 8009cf0:	3101      	adds	r1, #1
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	e7ee      	b.n	8009cd4 <__lshift+0x1c>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f100 0114 	add.w	r1, r0, #20
 8009cfc:	f100 0210 	add.w	r2, r0, #16
 8009d00:	4618      	mov	r0, r3
 8009d02:	4553      	cmp	r3, sl
 8009d04:	db33      	blt.n	8009d6e <__lshift+0xb6>
 8009d06:	6920      	ldr	r0, [r4, #16]
 8009d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d0c:	f104 0314 	add.w	r3, r4, #20
 8009d10:	f019 091f 	ands.w	r9, r9, #31
 8009d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d1c:	d02b      	beq.n	8009d76 <__lshift+0xbe>
 8009d1e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d22:	468a      	mov	sl, r1
 8009d24:	2200      	movs	r2, #0
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	fa00 f009 	lsl.w	r0, r0, r9
 8009d2c:	4310      	orrs	r0, r2
 8009d2e:	f84a 0b04 	str.w	r0, [sl], #4
 8009d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d36:	459c      	cmp	ip, r3
 8009d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d3c:	d8f3      	bhi.n	8009d26 <__lshift+0x6e>
 8009d3e:	ebac 0304 	sub.w	r3, ip, r4
 8009d42:	3b15      	subs	r3, #21
 8009d44:	f023 0303 	bic.w	r3, r3, #3
 8009d48:	3304      	adds	r3, #4
 8009d4a:	f104 0015 	add.w	r0, r4, #21
 8009d4e:	4560      	cmp	r0, ip
 8009d50:	bf88      	it	hi
 8009d52:	2304      	movhi	r3, #4
 8009d54:	50ca      	str	r2, [r1, r3]
 8009d56:	b10a      	cbz	r2, 8009d5c <__lshift+0xa4>
 8009d58:	f108 0602 	add.w	r6, r8, #2
 8009d5c:	3e01      	subs	r6, #1
 8009d5e:	4638      	mov	r0, r7
 8009d60:	612e      	str	r6, [r5, #16]
 8009d62:	4621      	mov	r1, r4
 8009d64:	f7ff fd98 	bl	8009898 <_Bfree>
 8009d68:	4628      	mov	r0, r5
 8009d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d72:	3301      	adds	r3, #1
 8009d74:	e7c5      	b.n	8009d02 <__lshift+0x4a>
 8009d76:	3904      	subs	r1, #4
 8009d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d80:	459c      	cmp	ip, r3
 8009d82:	d8f9      	bhi.n	8009d78 <__lshift+0xc0>
 8009d84:	e7ea      	b.n	8009d5c <__lshift+0xa4>
 8009d86:	bf00      	nop
 8009d88:	0800c3c5 	.word	0x0800c3c5
 8009d8c:	0800c3d6 	.word	0x0800c3d6

08009d90 <__mcmp>:
 8009d90:	690a      	ldr	r2, [r1, #16]
 8009d92:	4603      	mov	r3, r0
 8009d94:	6900      	ldr	r0, [r0, #16]
 8009d96:	1a80      	subs	r0, r0, r2
 8009d98:	b530      	push	{r4, r5, lr}
 8009d9a:	d10e      	bne.n	8009dba <__mcmp+0x2a>
 8009d9c:	3314      	adds	r3, #20
 8009d9e:	3114      	adds	r1, #20
 8009da0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009da4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009db0:	4295      	cmp	r5, r2
 8009db2:	d003      	beq.n	8009dbc <__mcmp+0x2c>
 8009db4:	d205      	bcs.n	8009dc2 <__mcmp+0x32>
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dba:	bd30      	pop	{r4, r5, pc}
 8009dbc:	42a3      	cmp	r3, r4
 8009dbe:	d3f3      	bcc.n	8009da8 <__mcmp+0x18>
 8009dc0:	e7fb      	b.n	8009dba <__mcmp+0x2a>
 8009dc2:	2001      	movs	r0, #1
 8009dc4:	e7f9      	b.n	8009dba <__mcmp+0x2a>
	...

08009dc8 <__mdiff>:
 8009dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dcc:	4689      	mov	r9, r1
 8009dce:	4606      	mov	r6, r0
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4648      	mov	r0, r9
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	f7ff ffdb 	bl	8009d90 <__mcmp>
 8009dda:	1e05      	subs	r5, r0, #0
 8009ddc:	d112      	bne.n	8009e04 <__mdiff+0x3c>
 8009dde:	4629      	mov	r1, r5
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff fd19 	bl	8009818 <_Balloc>
 8009de6:	4602      	mov	r2, r0
 8009de8:	b928      	cbnz	r0, 8009df6 <__mdiff+0x2e>
 8009dea:	4b3e      	ldr	r3, [pc, #248]	@ (8009ee4 <__mdiff+0x11c>)
 8009dec:	f240 2137 	movw	r1, #567	@ 0x237
 8009df0:	483d      	ldr	r0, [pc, #244]	@ (8009ee8 <__mdiff+0x120>)
 8009df2:	f001 fc3f 	bl	800b674 <__assert_func>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	b003      	add	sp, #12
 8009e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e04:	bfbc      	itt	lt
 8009e06:	464b      	movlt	r3, r9
 8009e08:	46a1      	movlt	r9, r4
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e10:	bfba      	itte	lt
 8009e12:	461c      	movlt	r4, r3
 8009e14:	2501      	movlt	r5, #1
 8009e16:	2500      	movge	r5, #0
 8009e18:	f7ff fcfe 	bl	8009818 <_Balloc>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	b918      	cbnz	r0, 8009e28 <__mdiff+0x60>
 8009e20:	4b30      	ldr	r3, [pc, #192]	@ (8009ee4 <__mdiff+0x11c>)
 8009e22:	f240 2145 	movw	r1, #581	@ 0x245
 8009e26:	e7e3      	b.n	8009df0 <__mdiff+0x28>
 8009e28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e2c:	6926      	ldr	r6, [r4, #16]
 8009e2e:	60c5      	str	r5, [r0, #12]
 8009e30:	f109 0310 	add.w	r3, r9, #16
 8009e34:	f109 0514 	add.w	r5, r9, #20
 8009e38:	f104 0e14 	add.w	lr, r4, #20
 8009e3c:	f100 0b14 	add.w	fp, r0, #20
 8009e40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	46d9      	mov	r9, fp
 8009e4c:	f04f 0c00 	mov.w	ip, #0
 8009e50:	9b01      	ldr	r3, [sp, #4]
 8009e52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e5a:	9301      	str	r3, [sp, #4]
 8009e5c:	b281      	uxth	r1, r0
 8009e5e:	fa1f f38a 	uxth.w	r3, sl
 8009e62:	1a5b      	subs	r3, r3, r1
 8009e64:	0c00      	lsrs	r0, r0, #16
 8009e66:	4463      	add	r3, ip
 8009e68:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e6c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e76:	4576      	cmp	r6, lr
 8009e78:	f849 3b04 	str.w	r3, [r9], #4
 8009e7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e80:	d8e6      	bhi.n	8009e50 <__mdiff+0x88>
 8009e82:	1b33      	subs	r3, r6, r4
 8009e84:	3b15      	subs	r3, #21
 8009e86:	f023 0303 	bic.w	r3, r3, #3
 8009e8a:	3415      	adds	r4, #21
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	42a6      	cmp	r6, r4
 8009e90:	bf38      	it	cc
 8009e92:	2304      	movcc	r3, #4
 8009e94:	441d      	add	r5, r3
 8009e96:	445b      	add	r3, fp
 8009e98:	461e      	mov	r6, r3
 8009e9a:	462c      	mov	r4, r5
 8009e9c:	4544      	cmp	r4, r8
 8009e9e:	d30e      	bcc.n	8009ebe <__mdiff+0xf6>
 8009ea0:	f108 0103 	add.w	r1, r8, #3
 8009ea4:	1b49      	subs	r1, r1, r5
 8009ea6:	f021 0103 	bic.w	r1, r1, #3
 8009eaa:	3d03      	subs	r5, #3
 8009eac:	45a8      	cmp	r8, r5
 8009eae:	bf38      	it	cc
 8009eb0:	2100      	movcc	r1, #0
 8009eb2:	440b      	add	r3, r1
 8009eb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009eb8:	b191      	cbz	r1, 8009ee0 <__mdiff+0x118>
 8009eba:	6117      	str	r7, [r2, #16]
 8009ebc:	e79e      	b.n	8009dfc <__mdiff+0x34>
 8009ebe:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ec2:	46e6      	mov	lr, ip
 8009ec4:	0c08      	lsrs	r0, r1, #16
 8009ec6:	fa1c fc81 	uxtah	ip, ip, r1
 8009eca:	4471      	add	r1, lr
 8009ecc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ed0:	b289      	uxth	r1, r1
 8009ed2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ed6:	f846 1b04 	str.w	r1, [r6], #4
 8009eda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ede:	e7dd      	b.n	8009e9c <__mdiff+0xd4>
 8009ee0:	3f01      	subs	r7, #1
 8009ee2:	e7e7      	b.n	8009eb4 <__mdiff+0xec>
 8009ee4:	0800c3c5 	.word	0x0800c3c5
 8009ee8:	0800c3d6 	.word	0x0800c3d6

08009eec <__ulp>:
 8009eec:	4b0e      	ldr	r3, [pc, #56]	@ (8009f28 <__ulp+0x3c>)
 8009eee:	400b      	ands	r3, r1
 8009ef0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	dc08      	bgt.n	8009f0a <__ulp+0x1e>
 8009ef8:	425b      	negs	r3, r3
 8009efa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009efe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f02:	da04      	bge.n	8009f0e <__ulp+0x22>
 8009f04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f08:	4113      	asrs	r3, r2
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	e008      	b.n	8009f20 <__ulp+0x34>
 8009f0e:	f1a2 0314 	sub.w	r3, r2, #20
 8009f12:	2b1e      	cmp	r3, #30
 8009f14:	bfda      	itte	le
 8009f16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f1a:	40da      	lsrle	r2, r3
 8009f1c:	2201      	movgt	r2, #1
 8009f1e:	2300      	movs	r3, #0
 8009f20:	4619      	mov	r1, r3
 8009f22:	4610      	mov	r0, r2
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	7ff00000 	.word	0x7ff00000

08009f2c <__b2d>:
 8009f2c:	6902      	ldr	r2, [r0, #16]
 8009f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f30:	f100 0614 	add.w	r6, r0, #20
 8009f34:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009f38:	4f20      	ldr	r7, [pc, #128]	@ (8009fbc <__b2d+0x90>)
 8009f3a:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f7ff fd5c 	bl	80099fc <__hi0bits>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b0a      	cmp	r3, #10
 8009f48:	f1c0 0020 	rsb	r0, r0, #32
 8009f4c:	f1a2 0504 	sub.w	r5, r2, #4
 8009f50:	6008      	str	r0, [r1, #0]
 8009f52:	dc13      	bgt.n	8009f7c <__b2d+0x50>
 8009f54:	42ae      	cmp	r6, r5
 8009f56:	bf38      	it	cc
 8009f58:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009f5c:	f1c3 0c0b 	rsb	ip, r3, #11
 8009f60:	bf28      	it	cs
 8009f62:	2200      	movcs	r2, #0
 8009f64:	3315      	adds	r3, #21
 8009f66:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009f6a:	fa04 f303 	lsl.w	r3, r4, r3
 8009f6e:	fa22 f20c 	lsr.w	r2, r2, ip
 8009f72:	ea4e 0107 	orr.w	r1, lr, r7
 8009f76:	431a      	orrs	r2, r3
 8009f78:	4610      	mov	r0, r2
 8009f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f7c:	42ae      	cmp	r6, r5
 8009f7e:	bf36      	itet	cc
 8009f80:	f1a2 0508 	subcc.w	r5, r2, #8
 8009f84:	2200      	movcs	r2, #0
 8009f86:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009f8a:	3b0b      	subs	r3, #11
 8009f8c:	d012      	beq.n	8009fb4 <__b2d+0x88>
 8009f8e:	f1c3 0720 	rsb	r7, r3, #32
 8009f92:	fa22 f107 	lsr.w	r1, r2, r7
 8009f96:	409c      	lsls	r4, r3
 8009f98:	430c      	orrs	r4, r1
 8009f9a:	42b5      	cmp	r5, r6
 8009f9c:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009fa0:	bf8c      	ite	hi
 8009fa2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009fa6:	2400      	movls	r4, #0
 8009fa8:	409a      	lsls	r2, r3
 8009faa:	40fc      	lsrs	r4, r7
 8009fac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009fb0:	4322      	orrs	r2, r4
 8009fb2:	e7e1      	b.n	8009f78 <__b2d+0x4c>
 8009fb4:	ea44 0107 	orr.w	r1, r4, r7
 8009fb8:	e7de      	b.n	8009f78 <__b2d+0x4c>
 8009fba:	bf00      	nop
 8009fbc:	3ff00000 	.word	0x3ff00000

08009fc0 <__d2b>:
 8009fc0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	9e08      	ldr	r6, [sp, #32]
 8009fc8:	4690      	mov	r8, r2
 8009fca:	4699      	mov	r9, r3
 8009fcc:	f7ff fc24 	bl	8009818 <_Balloc>
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	b930      	cbnz	r0, 8009fe2 <__d2b+0x22>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	4b24      	ldr	r3, [pc, #144]	@ (800a068 <__d2b+0xa8>)
 8009fd8:	4824      	ldr	r0, [pc, #144]	@ (800a06c <__d2b+0xac>)
 8009fda:	f240 310f 	movw	r1, #783	@ 0x30f
 8009fde:	f001 fb49 	bl	800b674 <__assert_func>
 8009fe2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fe6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fea:	b10d      	cbz	r5, 8009ff0 <__d2b+0x30>
 8009fec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	f1b8 0300 	subs.w	r3, r8, #0
 8009ff6:	d024      	beq.n	800a042 <__d2b+0x82>
 8009ff8:	4668      	mov	r0, sp
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	f7ff fd1d 	bl	8009a3a <__lo0bits>
 800a000:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a004:	b1d8      	cbz	r0, 800a03e <__d2b+0x7e>
 800a006:	f1c0 0320 	rsb	r3, r0, #32
 800a00a:	fa02 f303 	lsl.w	r3, r2, r3
 800a00e:	430b      	orrs	r3, r1
 800a010:	40c2      	lsrs	r2, r0
 800a012:	6163      	str	r3, [r4, #20]
 800a014:	9201      	str	r2, [sp, #4]
 800a016:	9b01      	ldr	r3, [sp, #4]
 800a018:	61a3      	str	r3, [r4, #24]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bf0c      	ite	eq
 800a01e:	2201      	moveq	r2, #1
 800a020:	2202      	movne	r2, #2
 800a022:	6122      	str	r2, [r4, #16]
 800a024:	b1ad      	cbz	r5, 800a052 <__d2b+0x92>
 800a026:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a02a:	4405      	add	r5, r0
 800a02c:	6035      	str	r5, [r6, #0]
 800a02e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a034:	6018      	str	r0, [r3, #0]
 800a036:	4620      	mov	r0, r4
 800a038:	b002      	add	sp, #8
 800a03a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a03e:	6161      	str	r1, [r4, #20]
 800a040:	e7e9      	b.n	800a016 <__d2b+0x56>
 800a042:	a801      	add	r0, sp, #4
 800a044:	f7ff fcf9 	bl	8009a3a <__lo0bits>
 800a048:	9b01      	ldr	r3, [sp, #4]
 800a04a:	6163      	str	r3, [r4, #20]
 800a04c:	3020      	adds	r0, #32
 800a04e:	2201      	movs	r2, #1
 800a050:	e7e7      	b.n	800a022 <__d2b+0x62>
 800a052:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a056:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a05a:	6030      	str	r0, [r6, #0]
 800a05c:	6918      	ldr	r0, [r3, #16]
 800a05e:	f7ff fccd 	bl	80099fc <__hi0bits>
 800a062:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a066:	e7e4      	b.n	800a032 <__d2b+0x72>
 800a068:	0800c3c5 	.word	0x0800c3c5
 800a06c:	0800c3d6 	.word	0x0800c3d6

0800a070 <__ratio>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	b085      	sub	sp, #20
 800a076:	e9cd 1000 	strd	r1, r0, [sp]
 800a07a:	a902      	add	r1, sp, #8
 800a07c:	f7ff ff56 	bl	8009f2c <__b2d>
 800a080:	468b      	mov	fp, r1
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	9800      	ldr	r0, [sp, #0]
 800a088:	a903      	add	r1, sp, #12
 800a08a:	f7ff ff4f 	bl	8009f2c <__b2d>
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	4689      	mov	r9, r1
 800a092:	460d      	mov	r5, r1
 800a094:	6919      	ldr	r1, [r3, #16]
 800a096:	9b00      	ldr	r3, [sp, #0]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	1ac9      	subs	r1, r1, r3
 800a09c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a0a0:	1a9b      	subs	r3, r3, r2
 800a0a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	bfcd      	iteet	gt
 800a0aa:	463a      	movgt	r2, r7
 800a0ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0b0:	462a      	movle	r2, r5
 800a0b2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a0b6:	bfd8      	it	le
 800a0b8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a0bc:	4604      	mov	r4, r0
 800a0be:	4622      	mov	r2, r4
 800a0c0:	464b      	mov	r3, r9
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	4659      	mov	r1, fp
 800a0c6:	f7f6 fb99 	bl	80007fc <__aeabi_ddiv>
 800a0ca:	b005      	add	sp, #20
 800a0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0d0 <__copybits>:
 800a0d0:	3901      	subs	r1, #1
 800a0d2:	b570      	push	{r4, r5, r6, lr}
 800a0d4:	1149      	asrs	r1, r1, #5
 800a0d6:	6914      	ldr	r4, [r2, #16]
 800a0d8:	3101      	adds	r1, #1
 800a0da:	f102 0314 	add.w	r3, r2, #20
 800a0de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a0e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a0e6:	1f05      	subs	r5, r0, #4
 800a0e8:	42a3      	cmp	r3, r4
 800a0ea:	d30c      	bcc.n	800a106 <__copybits+0x36>
 800a0ec:	1aa3      	subs	r3, r4, r2
 800a0ee:	3b11      	subs	r3, #17
 800a0f0:	f023 0303 	bic.w	r3, r3, #3
 800a0f4:	3211      	adds	r2, #17
 800a0f6:	42a2      	cmp	r2, r4
 800a0f8:	bf88      	it	hi
 800a0fa:	2300      	movhi	r3, #0
 800a0fc:	4418      	add	r0, r3
 800a0fe:	2300      	movs	r3, #0
 800a100:	4288      	cmp	r0, r1
 800a102:	d305      	bcc.n	800a110 <__copybits+0x40>
 800a104:	bd70      	pop	{r4, r5, r6, pc}
 800a106:	f853 6b04 	ldr.w	r6, [r3], #4
 800a10a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a10e:	e7eb      	b.n	800a0e8 <__copybits+0x18>
 800a110:	f840 3b04 	str.w	r3, [r0], #4
 800a114:	e7f4      	b.n	800a100 <__copybits+0x30>

0800a116 <__any_on>:
 800a116:	f100 0214 	add.w	r2, r0, #20
 800a11a:	6900      	ldr	r0, [r0, #16]
 800a11c:	114b      	asrs	r3, r1, #5
 800a11e:	4298      	cmp	r0, r3
 800a120:	b510      	push	{r4, lr}
 800a122:	db11      	blt.n	800a148 <__any_on+0x32>
 800a124:	dd0a      	ble.n	800a13c <__any_on+0x26>
 800a126:	f011 011f 	ands.w	r1, r1, #31
 800a12a:	d007      	beq.n	800a13c <__any_on+0x26>
 800a12c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a130:	fa24 f001 	lsr.w	r0, r4, r1
 800a134:	fa00 f101 	lsl.w	r1, r0, r1
 800a138:	428c      	cmp	r4, r1
 800a13a:	d10b      	bne.n	800a154 <__any_on+0x3e>
 800a13c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a140:	4293      	cmp	r3, r2
 800a142:	d803      	bhi.n	800a14c <__any_on+0x36>
 800a144:	2000      	movs	r0, #0
 800a146:	bd10      	pop	{r4, pc}
 800a148:	4603      	mov	r3, r0
 800a14a:	e7f7      	b.n	800a13c <__any_on+0x26>
 800a14c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a150:	2900      	cmp	r1, #0
 800a152:	d0f5      	beq.n	800a140 <__any_on+0x2a>
 800a154:	2001      	movs	r0, #1
 800a156:	e7f6      	b.n	800a146 <__any_on+0x30>

0800a158 <sulp>:
 800a158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a15c:	460f      	mov	r7, r1
 800a15e:	4690      	mov	r8, r2
 800a160:	f7ff fec4 	bl	8009eec <__ulp>
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	f1b8 0f00 	cmp.w	r8, #0
 800a16c:	d011      	beq.n	800a192 <sulp+0x3a>
 800a16e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a172:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a176:	2b00      	cmp	r3, #0
 800a178:	dd0b      	ble.n	800a192 <sulp+0x3a>
 800a17a:	051b      	lsls	r3, r3, #20
 800a17c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a180:	2400      	movs	r4, #0
 800a182:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a186:	4622      	mov	r2, r4
 800a188:	462b      	mov	r3, r5
 800a18a:	f7f6 fa0d 	bl	80005a8 <__aeabi_dmul>
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
 800a192:	4620      	mov	r0, r4
 800a194:	4629      	mov	r1, r5
 800a196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a19a:	0000      	movs	r0, r0
 800a19c:	0000      	movs	r0, r0
	...

0800a1a0 <_strtod_l>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	b09f      	sub	sp, #124	@ 0x7c
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800a1ae:	9005      	str	r0, [sp, #20]
 800a1b0:	f04f 0a00 	mov.w	sl, #0
 800a1b4:	f04f 0b00 	mov.w	fp, #0
 800a1b8:	460a      	mov	r2, r1
 800a1ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1bc:	7811      	ldrb	r1, [r2, #0]
 800a1be:	292b      	cmp	r1, #43	@ 0x2b
 800a1c0:	d048      	beq.n	800a254 <_strtod_l+0xb4>
 800a1c2:	d836      	bhi.n	800a232 <_strtod_l+0x92>
 800a1c4:	290d      	cmp	r1, #13
 800a1c6:	d830      	bhi.n	800a22a <_strtod_l+0x8a>
 800a1c8:	2908      	cmp	r1, #8
 800a1ca:	d830      	bhi.n	800a22e <_strtod_l+0x8e>
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	d039      	beq.n	800a244 <_strtod_l+0xa4>
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a1d6:	782a      	ldrb	r2, [r5, #0]
 800a1d8:	2a30      	cmp	r2, #48	@ 0x30
 800a1da:	f040 80b0 	bne.w	800a33e <_strtod_l+0x19e>
 800a1de:	786a      	ldrb	r2, [r5, #1]
 800a1e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a1e4:	2a58      	cmp	r2, #88	@ 0x58
 800a1e6:	d16c      	bne.n	800a2c2 <_strtod_l+0x122>
 800a1e8:	9302      	str	r3, [sp, #8]
 800a1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	ab1a      	add	r3, sp, #104	@ 0x68
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	4a8e      	ldr	r2, [pc, #568]	@ (800a42c <_strtod_l+0x28c>)
 800a1f4:	9805      	ldr	r0, [sp, #20]
 800a1f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a1f8:	a919      	add	r1, sp, #100	@ 0x64
 800a1fa:	f001 fad5 	bl	800b7a8 <__gethex>
 800a1fe:	f010 060f 	ands.w	r6, r0, #15
 800a202:	4604      	mov	r4, r0
 800a204:	d005      	beq.n	800a212 <_strtod_l+0x72>
 800a206:	2e06      	cmp	r6, #6
 800a208:	d126      	bne.n	800a258 <_strtod_l+0xb8>
 800a20a:	3501      	adds	r5, #1
 800a20c:	2300      	movs	r3, #0
 800a20e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a210:	930e      	str	r3, [sp, #56]	@ 0x38
 800a212:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a214:	2b00      	cmp	r3, #0
 800a216:	f040 857e 	bne.w	800ad16 <_strtod_l+0xb76>
 800a21a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a21c:	b1bb      	cbz	r3, 800a24e <_strtod_l+0xae>
 800a21e:	4650      	mov	r0, sl
 800a220:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a224:	b01f      	add	sp, #124	@ 0x7c
 800a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22a:	2920      	cmp	r1, #32
 800a22c:	d1d0      	bne.n	800a1d0 <_strtod_l+0x30>
 800a22e:	3201      	adds	r2, #1
 800a230:	e7c3      	b.n	800a1ba <_strtod_l+0x1a>
 800a232:	292d      	cmp	r1, #45	@ 0x2d
 800a234:	d1cc      	bne.n	800a1d0 <_strtod_l+0x30>
 800a236:	2101      	movs	r1, #1
 800a238:	910e      	str	r1, [sp, #56]	@ 0x38
 800a23a:	1c51      	adds	r1, r2, #1
 800a23c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a23e:	7852      	ldrb	r2, [r2, #1]
 800a240:	2a00      	cmp	r2, #0
 800a242:	d1c7      	bne.n	800a1d4 <_strtod_l+0x34>
 800a244:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a246:	9419      	str	r4, [sp, #100]	@ 0x64
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f040 8562 	bne.w	800ad12 <_strtod_l+0xb72>
 800a24e:	4650      	mov	r0, sl
 800a250:	4659      	mov	r1, fp
 800a252:	e7e7      	b.n	800a224 <_strtod_l+0x84>
 800a254:	2100      	movs	r1, #0
 800a256:	e7ef      	b.n	800a238 <_strtod_l+0x98>
 800a258:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a25a:	b13a      	cbz	r2, 800a26c <_strtod_l+0xcc>
 800a25c:	2135      	movs	r1, #53	@ 0x35
 800a25e:	a81c      	add	r0, sp, #112	@ 0x70
 800a260:	f7ff ff36 	bl	800a0d0 <__copybits>
 800a264:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a266:	9805      	ldr	r0, [sp, #20]
 800a268:	f7ff fb16 	bl	8009898 <_Bfree>
 800a26c:	3e01      	subs	r6, #1
 800a26e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a270:	2e04      	cmp	r6, #4
 800a272:	d806      	bhi.n	800a282 <_strtod_l+0xe2>
 800a274:	e8df f006 	tbb	[pc, r6]
 800a278:	201d0314 	.word	0x201d0314
 800a27c:	14          	.byte	0x14
 800a27d:	00          	.byte	0x00
 800a27e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a282:	05e1      	lsls	r1, r4, #23
 800a284:	bf48      	it	mi
 800a286:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a28a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a28e:	0d1b      	lsrs	r3, r3, #20
 800a290:	051b      	lsls	r3, r3, #20
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1bd      	bne.n	800a212 <_strtod_l+0x72>
 800a296:	f7fe fb35 	bl	8008904 <__errno>
 800a29a:	2322      	movs	r3, #34	@ 0x22
 800a29c:	6003      	str	r3, [r0, #0]
 800a29e:	e7b8      	b.n	800a212 <_strtod_l+0x72>
 800a2a0:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a2a4:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a2a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a2ac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a2b0:	e7e7      	b.n	800a282 <_strtod_l+0xe2>
 800a2b2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a430 <_strtod_l+0x290>
 800a2b6:	e7e4      	b.n	800a282 <_strtod_l+0xe2>
 800a2b8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a2bc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a2c0:	e7df      	b.n	800a282 <_strtod_l+0xe2>
 800a2c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	2b30      	cmp	r3, #48	@ 0x30
 800a2cc:	d0f9      	beq.n	800a2c2 <_strtod_l+0x122>
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d09f      	beq.n	800a212 <_strtod_l+0x72>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	2700      	movs	r7, #0
 800a2d6:	9308      	str	r3, [sp, #32]
 800a2d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2da:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2dc:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a2de:	46b9      	mov	r9, r7
 800a2e0:	220a      	movs	r2, #10
 800a2e2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a2e4:	7805      	ldrb	r5, [r0, #0]
 800a2e6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a2ea:	b2d9      	uxtb	r1, r3
 800a2ec:	2909      	cmp	r1, #9
 800a2ee:	d928      	bls.n	800a342 <_strtod_l+0x1a2>
 800a2f0:	4950      	ldr	r1, [pc, #320]	@ (800a434 <_strtod_l+0x294>)
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f001 f966 	bl	800b5c4 <strncmp>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d032      	beq.n	800a362 <_strtod_l+0x1c2>
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	462a      	mov	r2, r5
 800a300:	900a      	str	r0, [sp, #40]	@ 0x28
 800a302:	464d      	mov	r5, r9
 800a304:	4603      	mov	r3, r0
 800a306:	2a65      	cmp	r2, #101	@ 0x65
 800a308:	d001      	beq.n	800a30e <_strtod_l+0x16e>
 800a30a:	2a45      	cmp	r2, #69	@ 0x45
 800a30c:	d114      	bne.n	800a338 <_strtod_l+0x198>
 800a30e:	b91d      	cbnz	r5, 800a318 <_strtod_l+0x178>
 800a310:	9a08      	ldr	r2, [sp, #32]
 800a312:	4302      	orrs	r2, r0
 800a314:	d096      	beq.n	800a244 <_strtod_l+0xa4>
 800a316:	2500      	movs	r5, #0
 800a318:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a31a:	1c62      	adds	r2, r4, #1
 800a31c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a31e:	7862      	ldrb	r2, [r4, #1]
 800a320:	2a2b      	cmp	r2, #43	@ 0x2b
 800a322:	d07a      	beq.n	800a41a <_strtod_l+0x27a>
 800a324:	2a2d      	cmp	r2, #45	@ 0x2d
 800a326:	d07e      	beq.n	800a426 <_strtod_l+0x286>
 800a328:	f04f 0c00 	mov.w	ip, #0
 800a32c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a330:	2909      	cmp	r1, #9
 800a332:	f240 8085 	bls.w	800a440 <_strtod_l+0x2a0>
 800a336:	9419      	str	r4, [sp, #100]	@ 0x64
 800a338:	f04f 0800 	mov.w	r8, #0
 800a33c:	e0a5      	b.n	800a48a <_strtod_l+0x2ea>
 800a33e:	2300      	movs	r3, #0
 800a340:	e7c8      	b.n	800a2d4 <_strtod_l+0x134>
 800a342:	f1b9 0f08 	cmp.w	r9, #8
 800a346:	bfd8      	it	le
 800a348:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a34a:	f100 0001 	add.w	r0, r0, #1
 800a34e:	bfda      	itte	le
 800a350:	fb02 3301 	mlale	r3, r2, r1, r3
 800a354:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a356:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a35a:	f109 0901 	add.w	r9, r9, #1
 800a35e:	9019      	str	r0, [sp, #100]	@ 0x64
 800a360:	e7bf      	b.n	800a2e2 <_strtod_l+0x142>
 800a362:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	9219      	str	r2, [sp, #100]	@ 0x64
 800a368:	785a      	ldrb	r2, [r3, #1]
 800a36a:	f1b9 0f00 	cmp.w	r9, #0
 800a36e:	d03b      	beq.n	800a3e8 <_strtod_l+0x248>
 800a370:	900a      	str	r0, [sp, #40]	@ 0x28
 800a372:	464d      	mov	r5, r9
 800a374:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a378:	2b09      	cmp	r3, #9
 800a37a:	d912      	bls.n	800a3a2 <_strtod_l+0x202>
 800a37c:	2301      	movs	r3, #1
 800a37e:	e7c2      	b.n	800a306 <_strtod_l+0x166>
 800a380:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a382:	1c5a      	adds	r2, r3, #1
 800a384:	9219      	str	r2, [sp, #100]	@ 0x64
 800a386:	785a      	ldrb	r2, [r3, #1]
 800a388:	3001      	adds	r0, #1
 800a38a:	2a30      	cmp	r2, #48	@ 0x30
 800a38c:	d0f8      	beq.n	800a380 <_strtod_l+0x1e0>
 800a38e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a392:	2b08      	cmp	r3, #8
 800a394:	f200 84c4 	bhi.w	800ad20 <_strtod_l+0xb80>
 800a398:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a39a:	900a      	str	r0, [sp, #40]	@ 0x28
 800a39c:	2000      	movs	r0, #0
 800a39e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	3a30      	subs	r2, #48	@ 0x30
 800a3a4:	f100 0301 	add.w	r3, r0, #1
 800a3a8:	d018      	beq.n	800a3dc <_strtod_l+0x23c>
 800a3aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3ac:	4419      	add	r1, r3
 800a3ae:	910a      	str	r1, [sp, #40]	@ 0x28
 800a3b0:	462e      	mov	r6, r5
 800a3b2:	f04f 0e0a 	mov.w	lr, #10
 800a3b6:	1c71      	adds	r1, r6, #1
 800a3b8:	eba1 0c05 	sub.w	ip, r1, r5
 800a3bc:	4563      	cmp	r3, ip
 800a3be:	dc15      	bgt.n	800a3ec <_strtod_l+0x24c>
 800a3c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a3c4:	182b      	adds	r3, r5, r0
 800a3c6:	2b08      	cmp	r3, #8
 800a3c8:	f105 0501 	add.w	r5, r5, #1
 800a3cc:	4405      	add	r5, r0
 800a3ce:	dc1a      	bgt.n	800a406 <_strtod_l+0x266>
 800a3d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	fb03 2301 	mla	r3, r3, r1, r2
 800a3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3de:	1c51      	adds	r1, r2, #1
 800a3e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3e2:	7852      	ldrb	r2, [r2, #1]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	e7c5      	b.n	800a374 <_strtod_l+0x1d4>
 800a3e8:	4648      	mov	r0, r9
 800a3ea:	e7ce      	b.n	800a38a <_strtod_l+0x1ea>
 800a3ec:	2e08      	cmp	r6, #8
 800a3ee:	dc05      	bgt.n	800a3fc <_strtod_l+0x25c>
 800a3f0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a3f2:	fb0e f606 	mul.w	r6, lr, r6
 800a3f6:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a3f8:	460e      	mov	r6, r1
 800a3fa:	e7dc      	b.n	800a3b6 <_strtod_l+0x216>
 800a3fc:	2910      	cmp	r1, #16
 800a3fe:	bfd8      	it	le
 800a400:	fb0e f707 	mulle.w	r7, lr, r7
 800a404:	e7f8      	b.n	800a3f8 <_strtod_l+0x258>
 800a406:	2b0f      	cmp	r3, #15
 800a408:	bfdc      	itt	le
 800a40a:	230a      	movle	r3, #10
 800a40c:	fb03 2707 	mlale	r7, r3, r7, r2
 800a410:	e7e3      	b.n	800a3da <_strtod_l+0x23a>
 800a412:	2300      	movs	r3, #0
 800a414:	930a      	str	r3, [sp, #40]	@ 0x28
 800a416:	2301      	movs	r3, #1
 800a418:	e77a      	b.n	800a310 <_strtod_l+0x170>
 800a41a:	f04f 0c00 	mov.w	ip, #0
 800a41e:	1ca2      	adds	r2, r4, #2
 800a420:	9219      	str	r2, [sp, #100]	@ 0x64
 800a422:	78a2      	ldrb	r2, [r4, #2]
 800a424:	e782      	b.n	800a32c <_strtod_l+0x18c>
 800a426:	f04f 0c01 	mov.w	ip, #1
 800a42a:	e7f8      	b.n	800a41e <_strtod_l+0x27e>
 800a42c:	0800c5fc 	.word	0x0800c5fc
 800a430:	7ff00000 	.word	0x7ff00000
 800a434:	0800c42f 	.word	0x0800c42f
 800a438:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a43a:	1c51      	adds	r1, r2, #1
 800a43c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a43e:	7852      	ldrb	r2, [r2, #1]
 800a440:	2a30      	cmp	r2, #48	@ 0x30
 800a442:	d0f9      	beq.n	800a438 <_strtod_l+0x298>
 800a444:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a448:	2908      	cmp	r1, #8
 800a44a:	f63f af75 	bhi.w	800a338 <_strtod_l+0x198>
 800a44e:	3a30      	subs	r2, #48	@ 0x30
 800a450:	9209      	str	r2, [sp, #36]	@ 0x24
 800a452:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a454:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a456:	f04f 080a 	mov.w	r8, #10
 800a45a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a45c:	1c56      	adds	r6, r2, #1
 800a45e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a460:	7852      	ldrb	r2, [r2, #1]
 800a462:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a466:	f1be 0f09 	cmp.w	lr, #9
 800a46a:	d939      	bls.n	800a4e0 <_strtod_l+0x340>
 800a46c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a46e:	1a76      	subs	r6, r6, r1
 800a470:	2e08      	cmp	r6, #8
 800a472:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a476:	dc03      	bgt.n	800a480 <_strtod_l+0x2e0>
 800a478:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a47a:	4588      	cmp	r8, r1
 800a47c:	bfa8      	it	ge
 800a47e:	4688      	movge	r8, r1
 800a480:	f1bc 0f00 	cmp.w	ip, #0
 800a484:	d001      	beq.n	800a48a <_strtod_l+0x2ea>
 800a486:	f1c8 0800 	rsb	r8, r8, #0
 800a48a:	2d00      	cmp	r5, #0
 800a48c:	d14e      	bne.n	800a52c <_strtod_l+0x38c>
 800a48e:	9908      	ldr	r1, [sp, #32]
 800a490:	4308      	orrs	r0, r1
 800a492:	f47f aebe 	bne.w	800a212 <_strtod_l+0x72>
 800a496:	2b00      	cmp	r3, #0
 800a498:	f47f aed4 	bne.w	800a244 <_strtod_l+0xa4>
 800a49c:	2a69      	cmp	r2, #105	@ 0x69
 800a49e:	d028      	beq.n	800a4f2 <_strtod_l+0x352>
 800a4a0:	dc25      	bgt.n	800a4ee <_strtod_l+0x34e>
 800a4a2:	2a49      	cmp	r2, #73	@ 0x49
 800a4a4:	d025      	beq.n	800a4f2 <_strtod_l+0x352>
 800a4a6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a4a8:	f47f aecc 	bne.w	800a244 <_strtod_l+0xa4>
 800a4ac:	4999      	ldr	r1, [pc, #612]	@ (800a714 <_strtod_l+0x574>)
 800a4ae:	a819      	add	r0, sp, #100	@ 0x64
 800a4b0:	f001 fb9c 	bl	800bbec <__match>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f43f aec5 	beq.w	800a244 <_strtod_l+0xa4>
 800a4ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	2b28      	cmp	r3, #40	@ 0x28
 800a4c0:	d12e      	bne.n	800a520 <_strtod_l+0x380>
 800a4c2:	4995      	ldr	r1, [pc, #596]	@ (800a718 <_strtod_l+0x578>)
 800a4c4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4c6:	a819      	add	r0, sp, #100	@ 0x64
 800a4c8:	f001 fba4 	bl	800bc14 <__hexnan>
 800a4cc:	2805      	cmp	r0, #5
 800a4ce:	d127      	bne.n	800a520 <_strtod_l+0x380>
 800a4d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a4d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a4d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a4da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a4de:	e698      	b.n	800a212 <_strtod_l+0x72>
 800a4e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4e2:	fb08 2101 	mla	r1, r8, r1, r2
 800a4e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a4ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4ec:	e7b5      	b.n	800a45a <_strtod_l+0x2ba>
 800a4ee:	2a6e      	cmp	r2, #110	@ 0x6e
 800a4f0:	e7da      	b.n	800a4a8 <_strtod_l+0x308>
 800a4f2:	498a      	ldr	r1, [pc, #552]	@ (800a71c <_strtod_l+0x57c>)
 800a4f4:	a819      	add	r0, sp, #100	@ 0x64
 800a4f6:	f001 fb79 	bl	800bbec <__match>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f43f aea2 	beq.w	800a244 <_strtod_l+0xa4>
 800a500:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a502:	4987      	ldr	r1, [pc, #540]	@ (800a720 <_strtod_l+0x580>)
 800a504:	3b01      	subs	r3, #1
 800a506:	a819      	add	r0, sp, #100	@ 0x64
 800a508:	9319      	str	r3, [sp, #100]	@ 0x64
 800a50a:	f001 fb6f 	bl	800bbec <__match>
 800a50e:	b910      	cbnz	r0, 800a516 <_strtod_l+0x376>
 800a510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a512:	3301      	adds	r3, #1
 800a514:	9319      	str	r3, [sp, #100]	@ 0x64
 800a516:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a724 <_strtod_l+0x584>
 800a51a:	f04f 0a00 	mov.w	sl, #0
 800a51e:	e678      	b.n	800a212 <_strtod_l+0x72>
 800a520:	4881      	ldr	r0, [pc, #516]	@ (800a728 <_strtod_l+0x588>)
 800a522:	f001 f8a1 	bl	800b668 <nan>
 800a526:	4682      	mov	sl, r0
 800a528:	468b      	mov	fp, r1
 800a52a:	e672      	b.n	800a212 <_strtod_l+0x72>
 800a52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a52e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a530:	eba8 0303 	sub.w	r3, r8, r3
 800a534:	f1b9 0f00 	cmp.w	r9, #0
 800a538:	bf08      	it	eq
 800a53a:	46a9      	moveq	r9, r5
 800a53c:	2d10      	cmp	r5, #16
 800a53e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a540:	462c      	mov	r4, r5
 800a542:	bfa8      	it	ge
 800a544:	2410      	movge	r4, #16
 800a546:	f7f5 ffb5 	bl	80004b4 <__aeabi_ui2d>
 800a54a:	2d09      	cmp	r5, #9
 800a54c:	4682      	mov	sl, r0
 800a54e:	468b      	mov	fp, r1
 800a550:	dc11      	bgt.n	800a576 <_strtod_l+0x3d6>
 800a552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a554:	2b00      	cmp	r3, #0
 800a556:	f43f ae5c 	beq.w	800a212 <_strtod_l+0x72>
 800a55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a55c:	dd76      	ble.n	800a64c <_strtod_l+0x4ac>
 800a55e:	2b16      	cmp	r3, #22
 800a560:	dc5d      	bgt.n	800a61e <_strtod_l+0x47e>
 800a562:	4972      	ldr	r1, [pc, #456]	@ (800a72c <_strtod_l+0x58c>)
 800a564:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a56c:	4652      	mov	r2, sl
 800a56e:	465b      	mov	r3, fp
 800a570:	f7f6 f81a 	bl	80005a8 <__aeabi_dmul>
 800a574:	e7d7      	b.n	800a526 <_strtod_l+0x386>
 800a576:	4b6d      	ldr	r3, [pc, #436]	@ (800a72c <_strtod_l+0x58c>)
 800a578:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a57c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a580:	f7f6 f812 	bl	80005a8 <__aeabi_dmul>
 800a584:	4682      	mov	sl, r0
 800a586:	4638      	mov	r0, r7
 800a588:	468b      	mov	fp, r1
 800a58a:	f7f5 ff93 	bl	80004b4 <__aeabi_ui2d>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	4650      	mov	r0, sl
 800a594:	4659      	mov	r1, fp
 800a596:	f7f5 fe51 	bl	800023c <__adddf3>
 800a59a:	2d0f      	cmp	r5, #15
 800a59c:	4682      	mov	sl, r0
 800a59e:	468b      	mov	fp, r1
 800a5a0:	ddd7      	ble.n	800a552 <_strtod_l+0x3b2>
 800a5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a4:	1b2c      	subs	r4, r5, r4
 800a5a6:	441c      	add	r4, r3
 800a5a8:	2c00      	cmp	r4, #0
 800a5aa:	f340 8093 	ble.w	800a6d4 <_strtod_l+0x534>
 800a5ae:	f014 030f 	ands.w	r3, r4, #15
 800a5b2:	d00a      	beq.n	800a5ca <_strtod_l+0x42a>
 800a5b4:	495d      	ldr	r1, [pc, #372]	@ (800a72c <_strtod_l+0x58c>)
 800a5b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	465b      	mov	r3, fp
 800a5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5c2:	f7f5 fff1 	bl	80005a8 <__aeabi_dmul>
 800a5c6:	4682      	mov	sl, r0
 800a5c8:	468b      	mov	fp, r1
 800a5ca:	f034 040f 	bics.w	r4, r4, #15
 800a5ce:	d073      	beq.n	800a6b8 <_strtod_l+0x518>
 800a5d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a5d4:	dd49      	ble.n	800a66a <_strtod_l+0x4ca>
 800a5d6:	2400      	movs	r4, #0
 800a5d8:	46a0      	mov	r8, r4
 800a5da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a5dc:	46a1      	mov	r9, r4
 800a5de:	9a05      	ldr	r2, [sp, #20]
 800a5e0:	f8df b140 	ldr.w	fp, [pc, #320]	@ 800a724 <_strtod_l+0x584>
 800a5e4:	2322      	movs	r3, #34	@ 0x22
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	f04f 0a00 	mov.w	sl, #0
 800a5ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f43f ae0f 	beq.w	800a212 <_strtod_l+0x72>
 800a5f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5f6:	9805      	ldr	r0, [sp, #20]
 800a5f8:	f7ff f94e 	bl	8009898 <_Bfree>
 800a5fc:	9805      	ldr	r0, [sp, #20]
 800a5fe:	4649      	mov	r1, r9
 800a600:	f7ff f94a 	bl	8009898 <_Bfree>
 800a604:	9805      	ldr	r0, [sp, #20]
 800a606:	4641      	mov	r1, r8
 800a608:	f7ff f946 	bl	8009898 <_Bfree>
 800a60c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a60e:	9805      	ldr	r0, [sp, #20]
 800a610:	f7ff f942 	bl	8009898 <_Bfree>
 800a614:	9805      	ldr	r0, [sp, #20]
 800a616:	4621      	mov	r1, r4
 800a618:	f7ff f93e 	bl	8009898 <_Bfree>
 800a61c:	e5f9      	b.n	800a212 <_strtod_l+0x72>
 800a61e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a620:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a624:	4293      	cmp	r3, r2
 800a626:	dbbc      	blt.n	800a5a2 <_strtod_l+0x402>
 800a628:	4c40      	ldr	r4, [pc, #256]	@ (800a72c <_strtod_l+0x58c>)
 800a62a:	f1c5 050f 	rsb	r5, r5, #15
 800a62e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a632:	4652      	mov	r2, sl
 800a634:	465b      	mov	r3, fp
 800a636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a63a:	f7f5 ffb5 	bl	80005a8 <__aeabi_dmul>
 800a63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a640:	1b5d      	subs	r5, r3, r5
 800a642:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a646:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a64a:	e791      	b.n	800a570 <_strtod_l+0x3d0>
 800a64c:	3316      	adds	r3, #22
 800a64e:	dba8      	blt.n	800a5a2 <_strtod_l+0x402>
 800a650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a652:	eba3 0808 	sub.w	r8, r3, r8
 800a656:	4b35      	ldr	r3, [pc, #212]	@ (800a72c <_strtod_l+0x58c>)
 800a658:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a65c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7f6 f8ca 	bl	80007fc <__aeabi_ddiv>
 800a668:	e75d      	b.n	800a526 <_strtod_l+0x386>
 800a66a:	2300      	movs	r3, #0
 800a66c:	4f30      	ldr	r7, [pc, #192]	@ (800a730 <_strtod_l+0x590>)
 800a66e:	1124      	asrs	r4, r4, #4
 800a670:	4650      	mov	r0, sl
 800a672:	4659      	mov	r1, fp
 800a674:	461e      	mov	r6, r3
 800a676:	2c01      	cmp	r4, #1
 800a678:	dc21      	bgt.n	800a6be <_strtod_l+0x51e>
 800a67a:	b10b      	cbz	r3, 800a680 <_strtod_l+0x4e0>
 800a67c:	4682      	mov	sl, r0
 800a67e:	468b      	mov	fp, r1
 800a680:	492b      	ldr	r1, [pc, #172]	@ (800a730 <_strtod_l+0x590>)
 800a682:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a686:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a68a:	4652      	mov	r2, sl
 800a68c:	465b      	mov	r3, fp
 800a68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a692:	f7f5 ff89 	bl	80005a8 <__aeabi_dmul>
 800a696:	4b23      	ldr	r3, [pc, #140]	@ (800a724 <_strtod_l+0x584>)
 800a698:	460a      	mov	r2, r1
 800a69a:	400b      	ands	r3, r1
 800a69c:	4925      	ldr	r1, [pc, #148]	@ (800a734 <_strtod_l+0x594>)
 800a69e:	428b      	cmp	r3, r1
 800a6a0:	4682      	mov	sl, r0
 800a6a2:	d898      	bhi.n	800a5d6 <_strtod_l+0x436>
 800a6a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a6a8:	428b      	cmp	r3, r1
 800a6aa:	bf86      	itte	hi
 800a6ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a738 <_strtod_l+0x598>
 800a6b0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a6b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	9308      	str	r3, [sp, #32]
 800a6bc:	e076      	b.n	800a7ac <_strtod_l+0x60c>
 800a6be:	07e2      	lsls	r2, r4, #31
 800a6c0:	d504      	bpl.n	800a6cc <_strtod_l+0x52c>
 800a6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6c6:	f7f5 ff6f 	bl	80005a8 <__aeabi_dmul>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	3601      	adds	r6, #1
 800a6ce:	1064      	asrs	r4, r4, #1
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	e7d0      	b.n	800a676 <_strtod_l+0x4d6>
 800a6d4:	d0f0      	beq.n	800a6b8 <_strtod_l+0x518>
 800a6d6:	4264      	negs	r4, r4
 800a6d8:	f014 020f 	ands.w	r2, r4, #15
 800a6dc:	d00a      	beq.n	800a6f4 <_strtod_l+0x554>
 800a6de:	4b13      	ldr	r3, [pc, #76]	@ (800a72c <_strtod_l+0x58c>)
 800a6e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6e4:	4650      	mov	r0, sl
 800a6e6:	4659      	mov	r1, fp
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f7f6 f886 	bl	80007fc <__aeabi_ddiv>
 800a6f0:	4682      	mov	sl, r0
 800a6f2:	468b      	mov	fp, r1
 800a6f4:	1124      	asrs	r4, r4, #4
 800a6f6:	d0df      	beq.n	800a6b8 <_strtod_l+0x518>
 800a6f8:	2c1f      	cmp	r4, #31
 800a6fa:	dd1f      	ble.n	800a73c <_strtod_l+0x59c>
 800a6fc:	2400      	movs	r4, #0
 800a6fe:	46a0      	mov	r8, r4
 800a700:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a702:	46a1      	mov	r9, r4
 800a704:	9a05      	ldr	r2, [sp, #20]
 800a706:	2322      	movs	r3, #34	@ 0x22
 800a708:	f04f 0a00 	mov.w	sl, #0
 800a70c:	f04f 0b00 	mov.w	fp, #0
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	e76b      	b.n	800a5ec <_strtod_l+0x44c>
 800a714:	0800c31d 	.word	0x0800c31d
 800a718:	0800c5e8 	.word	0x0800c5e8
 800a71c:	0800c315 	.word	0x0800c315
 800a720:	0800c34c 	.word	0x0800c34c
 800a724:	7ff00000 	.word	0x7ff00000
 800a728:	0800c485 	.word	0x0800c485
 800a72c:	0800c520 	.word	0x0800c520
 800a730:	0800c4f8 	.word	0x0800c4f8
 800a734:	7ca00000 	.word	0x7ca00000
 800a738:	7fefffff 	.word	0x7fefffff
 800a73c:	f014 0310 	ands.w	r3, r4, #16
 800a740:	bf18      	it	ne
 800a742:	236a      	movne	r3, #106	@ 0x6a
 800a744:	4e78      	ldr	r6, [pc, #480]	@ (800a928 <_strtod_l+0x788>)
 800a746:	9308      	str	r3, [sp, #32]
 800a748:	4650      	mov	r0, sl
 800a74a:	4659      	mov	r1, fp
 800a74c:	2300      	movs	r3, #0
 800a74e:	07e7      	lsls	r7, r4, #31
 800a750:	d504      	bpl.n	800a75c <_strtod_l+0x5bc>
 800a752:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a756:	f7f5 ff27 	bl	80005a8 <__aeabi_dmul>
 800a75a:	2301      	movs	r3, #1
 800a75c:	1064      	asrs	r4, r4, #1
 800a75e:	f106 0608 	add.w	r6, r6, #8
 800a762:	d1f4      	bne.n	800a74e <_strtod_l+0x5ae>
 800a764:	b10b      	cbz	r3, 800a76a <_strtod_l+0x5ca>
 800a766:	4682      	mov	sl, r0
 800a768:	468b      	mov	fp, r1
 800a76a:	9b08      	ldr	r3, [sp, #32]
 800a76c:	b1b3      	cbz	r3, 800a79c <_strtod_l+0x5fc>
 800a76e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a772:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a776:	2b00      	cmp	r3, #0
 800a778:	4659      	mov	r1, fp
 800a77a:	dd0f      	ble.n	800a79c <_strtod_l+0x5fc>
 800a77c:	2b1f      	cmp	r3, #31
 800a77e:	dd58      	ble.n	800a832 <_strtod_l+0x692>
 800a780:	2b34      	cmp	r3, #52	@ 0x34
 800a782:	bfde      	ittt	le
 800a784:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a788:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a78c:	4093      	lslle	r3, r2
 800a78e:	f04f 0a00 	mov.w	sl, #0
 800a792:	bfcc      	ite	gt
 800a794:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a798:	ea03 0b01 	andle.w	fp, r3, r1
 800a79c:	2200      	movs	r2, #0
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4650      	mov	r0, sl
 800a7a2:	4659      	mov	r1, fp
 800a7a4:	f7f6 f968 	bl	8000a78 <__aeabi_dcmpeq>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d1a7      	bne.n	800a6fc <_strtod_l+0x55c>
 800a7ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a7b2:	9805      	ldr	r0, [sp, #20]
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	464a      	mov	r2, r9
 800a7b8:	f7ff f8d6 	bl	8009968 <__s2b>
 800a7bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f43f af09 	beq.w	800a5d6 <_strtod_l+0x436>
 800a7c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7c8:	2a00      	cmp	r2, #0
 800a7ca:	eba3 0308 	sub.w	r3, r3, r8
 800a7ce:	bfa8      	it	ge
 800a7d0:	2300      	movge	r3, #0
 800a7d2:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7d4:	2400      	movs	r4, #0
 800a7d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a7da:	9316      	str	r3, [sp, #88]	@ 0x58
 800a7dc:	46a0      	mov	r8, r4
 800a7de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7e0:	9805      	ldr	r0, [sp, #20]
 800a7e2:	6859      	ldr	r1, [r3, #4]
 800a7e4:	f7ff f818 	bl	8009818 <_Balloc>
 800a7e8:	4681      	mov	r9, r0
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	f43f aef7 	beq.w	800a5de <_strtod_l+0x43e>
 800a7f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7f2:	691a      	ldr	r2, [r3, #16]
 800a7f4:	3202      	adds	r2, #2
 800a7f6:	f103 010c 	add.w	r1, r3, #12
 800a7fa:	0092      	lsls	r2, r2, #2
 800a7fc:	300c      	adds	r0, #12
 800a7fe:	f000 ff25 	bl	800b64c <memcpy>
 800a802:	ab1c      	add	r3, sp, #112	@ 0x70
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	9805      	ldr	r0, [sp, #20]
 800a80c:	4652      	mov	r2, sl
 800a80e:	465b      	mov	r3, fp
 800a810:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a814:	f7ff fbd4 	bl	8009fc0 <__d2b>
 800a818:	901a      	str	r0, [sp, #104]	@ 0x68
 800a81a:	2800      	cmp	r0, #0
 800a81c:	f43f aedf 	beq.w	800a5de <_strtod_l+0x43e>
 800a820:	9805      	ldr	r0, [sp, #20]
 800a822:	2101      	movs	r1, #1
 800a824:	f7ff f936 	bl	8009a94 <__i2b>
 800a828:	4680      	mov	r8, r0
 800a82a:	b948      	cbnz	r0, 800a840 <_strtod_l+0x6a0>
 800a82c:	f04f 0800 	mov.w	r8, #0
 800a830:	e6d5      	b.n	800a5de <_strtod_l+0x43e>
 800a832:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a836:	fa02 f303 	lsl.w	r3, r2, r3
 800a83a:	ea03 0a0a 	and.w	sl, r3, sl
 800a83e:	e7ad      	b.n	800a79c <_strtod_l+0x5fc>
 800a840:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a842:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a844:	2d00      	cmp	r5, #0
 800a846:	bfab      	itete	ge
 800a848:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a84a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a84c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a84e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a850:	bfac      	ite	ge
 800a852:	18ef      	addge	r7, r5, r3
 800a854:	1b5e      	sublt	r6, r3, r5
 800a856:	9b08      	ldr	r3, [sp, #32]
 800a858:	1aed      	subs	r5, r5, r3
 800a85a:	4415      	add	r5, r2
 800a85c:	4b33      	ldr	r3, [pc, #204]	@ (800a92c <_strtod_l+0x78c>)
 800a85e:	3d01      	subs	r5, #1
 800a860:	429d      	cmp	r5, r3
 800a862:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a866:	da50      	bge.n	800a90a <_strtod_l+0x76a>
 800a868:	1b5b      	subs	r3, r3, r5
 800a86a:	2b1f      	cmp	r3, #31
 800a86c:	eba2 0203 	sub.w	r2, r2, r3
 800a870:	f04f 0101 	mov.w	r1, #1
 800a874:	dc3d      	bgt.n	800a8f2 <_strtod_l+0x752>
 800a876:	fa01 f303 	lsl.w	r3, r1, r3
 800a87a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a87c:	2300      	movs	r3, #0
 800a87e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a880:	18bd      	adds	r5, r7, r2
 800a882:	9b08      	ldr	r3, [sp, #32]
 800a884:	42af      	cmp	r7, r5
 800a886:	4416      	add	r6, r2
 800a888:	441e      	add	r6, r3
 800a88a:	463b      	mov	r3, r7
 800a88c:	bfa8      	it	ge
 800a88e:	462b      	movge	r3, r5
 800a890:	42b3      	cmp	r3, r6
 800a892:	bfa8      	it	ge
 800a894:	4633      	movge	r3, r6
 800a896:	2b00      	cmp	r3, #0
 800a898:	bfc2      	ittt	gt
 800a89a:	1aed      	subgt	r5, r5, r3
 800a89c:	1af6      	subgt	r6, r6, r3
 800a89e:	1aff      	subgt	r7, r7, r3
 800a8a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	dd16      	ble.n	800a8d4 <_strtod_l+0x734>
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	9805      	ldr	r0, [sp, #20]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	f7ff f9aa 	bl	8009c04 <__pow5mult>
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d0ba      	beq.n	800a82c <_strtod_l+0x68c>
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8ba:	9805      	ldr	r0, [sp, #20]
 800a8bc:	f7ff f900 	bl	8009ac0 <__multiply>
 800a8c0:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	f43f ae8b 	beq.w	800a5de <_strtod_l+0x43e>
 800a8c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8ca:	9805      	ldr	r0, [sp, #20]
 800a8cc:	f7fe ffe4 	bl	8009898 <_Bfree>
 800a8d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8d4:	2d00      	cmp	r5, #0
 800a8d6:	dc1d      	bgt.n	800a914 <_strtod_l+0x774>
 800a8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	dd28      	ble.n	800a930 <_strtod_l+0x790>
 800a8de:	4649      	mov	r1, r9
 800a8e0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a8e2:	9805      	ldr	r0, [sp, #20]
 800a8e4:	f7ff f98e 	bl	8009c04 <__pow5mult>
 800a8e8:	4681      	mov	r9, r0
 800a8ea:	bb08      	cbnz	r0, 800a930 <_strtod_l+0x790>
 800a8ec:	f04f 0900 	mov.w	r9, #0
 800a8f0:	e675      	b.n	800a5de <_strtod_l+0x43e>
 800a8f2:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a8f6:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a8fa:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a8fe:	35e2      	adds	r5, #226	@ 0xe2
 800a900:	fa01 f305 	lsl.w	r3, r1, r5
 800a904:	9310      	str	r3, [sp, #64]	@ 0x40
 800a906:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a908:	e7ba      	b.n	800a880 <_strtod_l+0x6e0>
 800a90a:	2300      	movs	r3, #0
 800a90c:	9310      	str	r3, [sp, #64]	@ 0x40
 800a90e:	2301      	movs	r3, #1
 800a910:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a912:	e7b5      	b.n	800a880 <_strtod_l+0x6e0>
 800a914:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a916:	9805      	ldr	r0, [sp, #20]
 800a918:	462a      	mov	r2, r5
 800a91a:	f7ff f9cd 	bl	8009cb8 <__lshift>
 800a91e:	901a      	str	r0, [sp, #104]	@ 0x68
 800a920:	2800      	cmp	r0, #0
 800a922:	d1d9      	bne.n	800a8d8 <_strtod_l+0x738>
 800a924:	e65b      	b.n	800a5de <_strtod_l+0x43e>
 800a926:	bf00      	nop
 800a928:	0800c610 	.word	0x0800c610
 800a92c:	fffffc02 	.word	0xfffffc02
 800a930:	2e00      	cmp	r6, #0
 800a932:	dd07      	ble.n	800a944 <_strtod_l+0x7a4>
 800a934:	4649      	mov	r1, r9
 800a936:	9805      	ldr	r0, [sp, #20]
 800a938:	4632      	mov	r2, r6
 800a93a:	f7ff f9bd 	bl	8009cb8 <__lshift>
 800a93e:	4681      	mov	r9, r0
 800a940:	2800      	cmp	r0, #0
 800a942:	d0d3      	beq.n	800a8ec <_strtod_l+0x74c>
 800a944:	2f00      	cmp	r7, #0
 800a946:	dd08      	ble.n	800a95a <_strtod_l+0x7ba>
 800a948:	4641      	mov	r1, r8
 800a94a:	9805      	ldr	r0, [sp, #20]
 800a94c:	463a      	mov	r2, r7
 800a94e:	f7ff f9b3 	bl	8009cb8 <__lshift>
 800a952:	4680      	mov	r8, r0
 800a954:	2800      	cmp	r0, #0
 800a956:	f43f ae42 	beq.w	800a5de <_strtod_l+0x43e>
 800a95a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a95c:	9805      	ldr	r0, [sp, #20]
 800a95e:	464a      	mov	r2, r9
 800a960:	f7ff fa32 	bl	8009dc8 <__mdiff>
 800a964:	4604      	mov	r4, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	f43f ae39 	beq.w	800a5de <_strtod_l+0x43e>
 800a96c:	68c3      	ldr	r3, [r0, #12]
 800a96e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a970:	2300      	movs	r3, #0
 800a972:	60c3      	str	r3, [r0, #12]
 800a974:	4641      	mov	r1, r8
 800a976:	f7ff fa0b 	bl	8009d90 <__mcmp>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	da3d      	bge.n	800a9fa <_strtod_l+0x85a>
 800a97e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a980:	ea53 030a 	orrs.w	r3, r3, sl
 800a984:	d163      	bne.n	800aa4e <_strtod_l+0x8ae>
 800a986:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d15f      	bne.n	800aa4e <_strtod_l+0x8ae>
 800a98e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a992:	0d1b      	lsrs	r3, r3, #20
 800a994:	051b      	lsls	r3, r3, #20
 800a996:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a99a:	d958      	bls.n	800aa4e <_strtod_l+0x8ae>
 800a99c:	6963      	ldr	r3, [r4, #20]
 800a99e:	b913      	cbnz	r3, 800a9a6 <_strtod_l+0x806>
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	dd53      	ble.n	800aa4e <_strtod_l+0x8ae>
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	9805      	ldr	r0, [sp, #20]
 800a9ac:	f7ff f984 	bl	8009cb8 <__lshift>
 800a9b0:	4641      	mov	r1, r8
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	f7ff f9ec 	bl	8009d90 <__mcmp>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	dd48      	ble.n	800aa4e <_strtod_l+0x8ae>
 800a9bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9c0:	9a08      	ldr	r2, [sp, #32]
 800a9c2:	0d1b      	lsrs	r3, r3, #20
 800a9c4:	051b      	lsls	r3, r3, #20
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	d062      	beq.n	800aa90 <_strtod_l+0x8f0>
 800a9ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9ce:	d85f      	bhi.n	800aa90 <_strtod_l+0x8f0>
 800a9d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a9d4:	f67f ae96 	bls.w	800a704 <_strtod_l+0x564>
 800a9d8:	4ba3      	ldr	r3, [pc, #652]	@ (800ac68 <_strtod_l+0xac8>)
 800a9da:	4650      	mov	r0, sl
 800a9dc:	4659      	mov	r1, fp
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f7f5 fde2 	bl	80005a8 <__aeabi_dmul>
 800a9e4:	4ba1      	ldr	r3, [pc, #644]	@ (800ac6c <_strtod_l+0xacc>)
 800a9e6:	400b      	ands	r3, r1
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	468b      	mov	fp, r1
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f47f ae01 	bne.w	800a5f4 <_strtod_l+0x454>
 800a9f2:	9a05      	ldr	r2, [sp, #20]
 800a9f4:	2322      	movs	r3, #34	@ 0x22
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	e5fc      	b.n	800a5f4 <_strtod_l+0x454>
 800a9fa:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a9fe:	d165      	bne.n	800aacc <_strtod_l+0x92c>
 800aa00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa06:	b35a      	cbz	r2, 800aa60 <_strtod_l+0x8c0>
 800aa08:	4a99      	ldr	r2, [pc, #612]	@ (800ac70 <_strtod_l+0xad0>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d12b      	bne.n	800aa66 <_strtod_l+0x8c6>
 800aa0e:	9b08      	ldr	r3, [sp, #32]
 800aa10:	4651      	mov	r1, sl
 800aa12:	b303      	cbz	r3, 800aa56 <_strtod_l+0x8b6>
 800aa14:	4b95      	ldr	r3, [pc, #596]	@ (800ac6c <_strtod_l+0xacc>)
 800aa16:	465a      	mov	r2, fp
 800aa18:	4013      	ands	r3, r2
 800aa1a:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aa1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa22:	d81b      	bhi.n	800aa5c <_strtod_l+0x8bc>
 800aa24:	0d1b      	lsrs	r3, r3, #20
 800aa26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa2a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa2e:	4299      	cmp	r1, r3
 800aa30:	d119      	bne.n	800aa66 <_strtod_l+0x8c6>
 800aa32:	4b90      	ldr	r3, [pc, #576]	@ (800ac74 <_strtod_l+0xad4>)
 800aa34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d102      	bne.n	800aa40 <_strtod_l+0x8a0>
 800aa3a:	3101      	adds	r1, #1
 800aa3c:	f43f adcf 	beq.w	800a5de <_strtod_l+0x43e>
 800aa40:	4b8a      	ldr	r3, [pc, #552]	@ (800ac6c <_strtod_l+0xacc>)
 800aa42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa44:	401a      	ands	r2, r3
 800aa46:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aa4a:	f04f 0a00 	mov.w	sl, #0
 800aa4e:	9b08      	ldr	r3, [sp, #32]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1c1      	bne.n	800a9d8 <_strtod_l+0x838>
 800aa54:	e5ce      	b.n	800a5f4 <_strtod_l+0x454>
 800aa56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa5a:	e7e8      	b.n	800aa2e <_strtod_l+0x88e>
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	e7e6      	b.n	800aa2e <_strtod_l+0x88e>
 800aa60:	ea53 030a 	orrs.w	r3, r3, sl
 800aa64:	d0aa      	beq.n	800a9bc <_strtod_l+0x81c>
 800aa66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa68:	b1db      	cbz	r3, 800aaa2 <_strtod_l+0x902>
 800aa6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa6c:	4213      	tst	r3, r2
 800aa6e:	d0ee      	beq.n	800aa4e <_strtod_l+0x8ae>
 800aa70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa72:	9a08      	ldr	r2, [sp, #32]
 800aa74:	4650      	mov	r0, sl
 800aa76:	4659      	mov	r1, fp
 800aa78:	b1bb      	cbz	r3, 800aaaa <_strtod_l+0x90a>
 800aa7a:	f7ff fb6d 	bl	800a158 <sulp>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa86:	f7f5 fbd9 	bl	800023c <__adddf3>
 800aa8a:	4682      	mov	sl, r0
 800aa8c:	468b      	mov	fp, r1
 800aa8e:	e7de      	b.n	800aa4e <_strtod_l+0x8ae>
 800aa90:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aa94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa9c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800aaa0:	e7d5      	b.n	800aa4e <_strtod_l+0x8ae>
 800aaa2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aaa4:	ea13 0f0a 	tst.w	r3, sl
 800aaa8:	e7e1      	b.n	800aa6e <_strtod_l+0x8ce>
 800aaaa:	f7ff fb55 	bl	800a158 <sulp>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aab6:	f7f5 fbbf 	bl	8000238 <__aeabi_dsub>
 800aaba:	2200      	movs	r2, #0
 800aabc:	2300      	movs	r3, #0
 800aabe:	4682      	mov	sl, r0
 800aac0:	468b      	mov	fp, r1
 800aac2:	f7f5 ffd9 	bl	8000a78 <__aeabi_dcmpeq>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d0c1      	beq.n	800aa4e <_strtod_l+0x8ae>
 800aaca:	e61b      	b.n	800a704 <_strtod_l+0x564>
 800aacc:	4641      	mov	r1, r8
 800aace:	4620      	mov	r0, r4
 800aad0:	f7ff face 	bl	800a070 <__ratio>
 800aad4:	2200      	movs	r2, #0
 800aad6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aada:	4606      	mov	r6, r0
 800aadc:	460f      	mov	r7, r1
 800aade:	f7f5 ffdf 	bl	8000aa0 <__aeabi_dcmple>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d06d      	beq.n	800abc2 <_strtod_l+0xa22>
 800aae6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d178      	bne.n	800abde <_strtod_l+0xa3e>
 800aaec:	f1ba 0f00 	cmp.w	sl, #0
 800aaf0:	d156      	bne.n	800aba0 <_strtod_l+0xa00>
 800aaf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d158      	bne.n	800abae <_strtod_l+0xa0e>
 800aafc:	4b5e      	ldr	r3, [pc, #376]	@ (800ac78 <_strtod_l+0xad8>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	4630      	mov	r0, r6
 800ab02:	4639      	mov	r1, r7
 800ab04:	f7f5 ffc2 	bl	8000a8c <__aeabi_dcmplt>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d157      	bne.n	800abbc <_strtod_l+0xa1c>
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	4639      	mov	r1, r7
 800ab10:	4b5a      	ldr	r3, [pc, #360]	@ (800ac7c <_strtod_l+0xadc>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	f7f5 fd48 	bl	80005a8 <__aeabi_dmul>
 800ab18:	4606      	mov	r6, r0
 800ab1a:	460f      	mov	r7, r1
 800ab1c:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ab20:	9606      	str	r6, [sp, #24]
 800ab22:	9307      	str	r3, [sp, #28]
 800ab24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab28:	4d50      	ldr	r5, [pc, #320]	@ (800ac6c <_strtod_l+0xacc>)
 800ab2a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab30:	401d      	ands	r5, r3
 800ab32:	4b53      	ldr	r3, [pc, #332]	@ (800ac80 <_strtod_l+0xae0>)
 800ab34:	429d      	cmp	r5, r3
 800ab36:	f040 80a9 	bne.w	800ac8c <_strtod_l+0xaec>
 800ab3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab3c:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ab40:	4650      	mov	r0, sl
 800ab42:	4659      	mov	r1, fp
 800ab44:	f7ff f9d2 	bl	8009eec <__ulp>
 800ab48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab4c:	f7f5 fd2c 	bl	80005a8 <__aeabi_dmul>
 800ab50:	4652      	mov	r2, sl
 800ab52:	465b      	mov	r3, fp
 800ab54:	f7f5 fb72 	bl	800023c <__adddf3>
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4944      	ldr	r1, [pc, #272]	@ (800ac6c <_strtod_l+0xacc>)
 800ab5c:	4a49      	ldr	r2, [pc, #292]	@ (800ac84 <_strtod_l+0xae4>)
 800ab5e:	4019      	ands	r1, r3
 800ab60:	4291      	cmp	r1, r2
 800ab62:	4682      	mov	sl, r0
 800ab64:	d942      	bls.n	800abec <_strtod_l+0xa4c>
 800ab66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab68:	4b42      	ldr	r3, [pc, #264]	@ (800ac74 <_strtod_l+0xad4>)
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d103      	bne.n	800ab76 <_strtod_l+0x9d6>
 800ab6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab70:	3301      	adds	r3, #1
 800ab72:	f43f ad34 	beq.w	800a5de <_strtod_l+0x43e>
 800ab76:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800ac74 <_strtod_l+0xad4>
 800ab7a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ab7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab80:	9805      	ldr	r0, [sp, #20]
 800ab82:	f7fe fe89 	bl	8009898 <_Bfree>
 800ab86:	9805      	ldr	r0, [sp, #20]
 800ab88:	4649      	mov	r1, r9
 800ab8a:	f7fe fe85 	bl	8009898 <_Bfree>
 800ab8e:	9805      	ldr	r0, [sp, #20]
 800ab90:	4641      	mov	r1, r8
 800ab92:	f7fe fe81 	bl	8009898 <_Bfree>
 800ab96:	9805      	ldr	r0, [sp, #20]
 800ab98:	4621      	mov	r1, r4
 800ab9a:	f7fe fe7d 	bl	8009898 <_Bfree>
 800ab9e:	e61e      	b.n	800a7de <_strtod_l+0x63e>
 800aba0:	f1ba 0f01 	cmp.w	sl, #1
 800aba4:	d103      	bne.n	800abae <_strtod_l+0xa0e>
 800aba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f43f adab 	beq.w	800a704 <_strtod_l+0x564>
 800abae:	4b36      	ldr	r3, [pc, #216]	@ (800ac88 <_strtod_l+0xae8>)
 800abb0:	4f31      	ldr	r7, [pc, #196]	@ (800ac78 <_strtod_l+0xad8>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abb8:	2600      	movs	r6, #0
 800abba:	e7b3      	b.n	800ab24 <_strtod_l+0x984>
 800abbc:	4f2f      	ldr	r7, [pc, #188]	@ (800ac7c <_strtod_l+0xadc>)
 800abbe:	2600      	movs	r6, #0
 800abc0:	e7ac      	b.n	800ab1c <_strtod_l+0x97c>
 800abc2:	4b2e      	ldr	r3, [pc, #184]	@ (800ac7c <_strtod_l+0xadc>)
 800abc4:	4630      	mov	r0, r6
 800abc6:	4639      	mov	r1, r7
 800abc8:	2200      	movs	r2, #0
 800abca:	f7f5 fced 	bl	80005a8 <__aeabi_dmul>
 800abce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abd0:	4606      	mov	r6, r0
 800abd2:	460f      	mov	r7, r1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0a1      	beq.n	800ab1c <_strtod_l+0x97c>
 800abd8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800abdc:	e7a2      	b.n	800ab24 <_strtod_l+0x984>
 800abde:	4b26      	ldr	r3, [pc, #152]	@ (800ac78 <_strtod_l+0xad8>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abe6:	4616      	mov	r6, r2
 800abe8:	461f      	mov	r7, r3
 800abea:	e79b      	b.n	800ab24 <_strtod_l+0x984>
 800abec:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800abf0:	9b08      	ldr	r3, [sp, #32]
 800abf2:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1c1      	bne.n	800ab7e <_strtod_l+0x9de>
 800abfa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abfe:	0d1b      	lsrs	r3, r3, #20
 800ac00:	051b      	lsls	r3, r3, #20
 800ac02:	429d      	cmp	r5, r3
 800ac04:	d1bb      	bne.n	800ab7e <_strtod_l+0x9de>
 800ac06:	4630      	mov	r0, r6
 800ac08:	4639      	mov	r1, r7
 800ac0a:	f7f6 f82d 	bl	8000c68 <__aeabi_d2lz>
 800ac0e:	f7f5 fc9d 	bl	800054c <__aeabi_l2d>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4630      	mov	r0, r6
 800ac18:	4639      	mov	r1, r7
 800ac1a:	f7f5 fb0d 	bl	8000238 <__aeabi_dsub>
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4602      	mov	r2, r0
 800ac22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ac26:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ac2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac2c:	ea46 060a 	orr.w	r6, r6, sl
 800ac30:	431e      	orrs	r6, r3
 800ac32:	d068      	beq.n	800ad06 <_strtod_l+0xb66>
 800ac34:	a308      	add	r3, pc, #32	@ (adr r3, 800ac58 <_strtod_l+0xab8>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f7f5 ff27 	bl	8000a8c <__aeabi_dcmplt>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f47f acd8 	bne.w	800a5f4 <_strtod_l+0x454>
 800ac44:	a306      	add	r3, pc, #24	@ (adr r3, 800ac60 <_strtod_l+0xac0>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac4e:	f7f5 ff3b 	bl	8000ac8 <__aeabi_dcmpgt>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d093      	beq.n	800ab7e <_strtod_l+0x9de>
 800ac56:	e4cd      	b.n	800a5f4 <_strtod_l+0x454>
 800ac58:	94a03595 	.word	0x94a03595
 800ac5c:	3fdfffff 	.word	0x3fdfffff
 800ac60:	35afe535 	.word	0x35afe535
 800ac64:	3fe00000 	.word	0x3fe00000
 800ac68:	39500000 	.word	0x39500000
 800ac6c:	7ff00000 	.word	0x7ff00000
 800ac70:	000fffff 	.word	0x000fffff
 800ac74:	7fefffff 	.word	0x7fefffff
 800ac78:	3ff00000 	.word	0x3ff00000
 800ac7c:	3fe00000 	.word	0x3fe00000
 800ac80:	7fe00000 	.word	0x7fe00000
 800ac84:	7c9fffff 	.word	0x7c9fffff
 800ac88:	bff00000 	.word	0xbff00000
 800ac8c:	9b08      	ldr	r3, [sp, #32]
 800ac8e:	b323      	cbz	r3, 800acda <_strtod_l+0xb3a>
 800ac90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ac94:	d821      	bhi.n	800acda <_strtod_l+0xb3a>
 800ac96:	a328      	add	r3, pc, #160	@ (adr r3, 800ad38 <_strtod_l+0xb98>)
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	4639      	mov	r1, r7
 800aca0:	f7f5 fefe 	bl	8000aa0 <__aeabi_dcmple>
 800aca4:	b1a0      	cbz	r0, 800acd0 <_strtod_l+0xb30>
 800aca6:	4639      	mov	r1, r7
 800aca8:	4630      	mov	r0, r6
 800acaa:	f7f5 ff55 	bl	8000b58 <__aeabi_d2uiz>
 800acae:	2801      	cmp	r0, #1
 800acb0:	bf38      	it	cc
 800acb2:	2001      	movcc	r0, #1
 800acb4:	f7f5 fbfe 	bl	80004b4 <__aeabi_ui2d>
 800acb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acba:	4606      	mov	r6, r0
 800acbc:	460f      	mov	r7, r1
 800acbe:	b9fb      	cbnz	r3, 800ad00 <_strtod_l+0xb60>
 800acc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acc4:	9014      	str	r0, [sp, #80]	@ 0x50
 800acc6:	9315      	str	r3, [sp, #84]	@ 0x54
 800acc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800accc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800acd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800acd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800acd6:	1b5b      	subs	r3, r3, r5
 800acd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800acda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ace2:	f7ff f903 	bl	8009eec <__ulp>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4650      	mov	r0, sl
 800acec:	4659      	mov	r1, fp
 800acee:	f7f5 fc5b 	bl	80005a8 <__aeabi_dmul>
 800acf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800acf6:	f7f5 faa1 	bl	800023c <__adddf3>
 800acfa:	4682      	mov	sl, r0
 800acfc:	468b      	mov	fp, r1
 800acfe:	e777      	b.n	800abf0 <_strtod_l+0xa50>
 800ad00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ad04:	e7e0      	b.n	800acc8 <_strtod_l+0xb28>
 800ad06:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad40 <_strtod_l+0xba0>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f7f5 febe 	bl	8000a8c <__aeabi_dcmplt>
 800ad10:	e79f      	b.n	800ac52 <_strtod_l+0xab2>
 800ad12:	2300      	movs	r3, #0
 800ad14:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ad18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	f7ff ba7d 	b.w	800a21a <_strtod_l+0x7a>
 800ad20:	2a65      	cmp	r2, #101	@ 0x65
 800ad22:	f43f ab76 	beq.w	800a412 <_strtod_l+0x272>
 800ad26:	2a45      	cmp	r2, #69	@ 0x45
 800ad28:	f43f ab73 	beq.w	800a412 <_strtod_l+0x272>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	f7ff bbae 	b.w	800a48e <_strtod_l+0x2ee>
 800ad32:	bf00      	nop
 800ad34:	f3af 8000 	nop.w
 800ad38:	ffc00000 	.word	0xffc00000
 800ad3c:	41dfffff 	.word	0x41dfffff
 800ad40:	94a03595 	.word	0x94a03595
 800ad44:	3fcfffff 	.word	0x3fcfffff

0800ad48 <_strtod_r>:
 800ad48:	4b01      	ldr	r3, [pc, #4]	@ (800ad50 <_strtod_r+0x8>)
 800ad4a:	f7ff ba29 	b.w	800a1a0 <_strtod_l>
 800ad4e:	bf00      	nop
 800ad50:	20000074 	.word	0x20000074

0800ad54 <_strtol_l.isra.0>:
 800ad54:	2b24      	cmp	r3, #36	@ 0x24
 800ad56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad5a:	4686      	mov	lr, r0
 800ad5c:	4690      	mov	r8, r2
 800ad5e:	d801      	bhi.n	800ad64 <_strtol_l.isra.0+0x10>
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d106      	bne.n	800ad72 <_strtol_l.isra.0+0x1e>
 800ad64:	f7fd fdce 	bl	8008904 <__errno>
 800ad68:	2316      	movs	r3, #22
 800ad6a:	6003      	str	r3, [r0, #0]
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad72:	4834      	ldr	r0, [pc, #208]	@ (800ae44 <_strtol_l.isra.0+0xf0>)
 800ad74:	460d      	mov	r5, r1
 800ad76:	462a      	mov	r2, r5
 800ad78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad7c:	5d06      	ldrb	r6, [r0, r4]
 800ad7e:	f016 0608 	ands.w	r6, r6, #8
 800ad82:	d1f8      	bne.n	800ad76 <_strtol_l.isra.0+0x22>
 800ad84:	2c2d      	cmp	r4, #45	@ 0x2d
 800ad86:	d110      	bne.n	800adaa <_strtol_l.isra.0+0x56>
 800ad88:	782c      	ldrb	r4, [r5, #0]
 800ad8a:	2601      	movs	r6, #1
 800ad8c:	1c95      	adds	r5, r2, #2
 800ad8e:	f033 0210 	bics.w	r2, r3, #16
 800ad92:	d115      	bne.n	800adc0 <_strtol_l.isra.0+0x6c>
 800ad94:	2c30      	cmp	r4, #48	@ 0x30
 800ad96:	d10d      	bne.n	800adb4 <_strtol_l.isra.0+0x60>
 800ad98:	782a      	ldrb	r2, [r5, #0]
 800ad9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad9e:	2a58      	cmp	r2, #88	@ 0x58
 800ada0:	d108      	bne.n	800adb4 <_strtol_l.isra.0+0x60>
 800ada2:	786c      	ldrb	r4, [r5, #1]
 800ada4:	3502      	adds	r5, #2
 800ada6:	2310      	movs	r3, #16
 800ada8:	e00a      	b.n	800adc0 <_strtol_l.isra.0+0x6c>
 800adaa:	2c2b      	cmp	r4, #43	@ 0x2b
 800adac:	bf04      	itt	eq
 800adae:	782c      	ldrbeq	r4, [r5, #0]
 800adb0:	1c95      	addeq	r5, r2, #2
 800adb2:	e7ec      	b.n	800ad8e <_strtol_l.isra.0+0x3a>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1f6      	bne.n	800ada6 <_strtol_l.isra.0+0x52>
 800adb8:	2c30      	cmp	r4, #48	@ 0x30
 800adba:	bf14      	ite	ne
 800adbc:	230a      	movne	r3, #10
 800adbe:	2308      	moveq	r3, #8
 800adc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800adc4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800adc8:	2200      	movs	r2, #0
 800adca:	fbbc f9f3 	udiv	r9, ip, r3
 800adce:	4610      	mov	r0, r2
 800add0:	fb03 ca19 	mls	sl, r3, r9, ip
 800add4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800add8:	2f09      	cmp	r7, #9
 800adda:	d80f      	bhi.n	800adfc <_strtol_l.isra.0+0xa8>
 800addc:	463c      	mov	r4, r7
 800adde:	42a3      	cmp	r3, r4
 800ade0:	dd1b      	ble.n	800ae1a <_strtol_l.isra.0+0xc6>
 800ade2:	1c57      	adds	r7, r2, #1
 800ade4:	d007      	beq.n	800adf6 <_strtol_l.isra.0+0xa2>
 800ade6:	4581      	cmp	r9, r0
 800ade8:	d314      	bcc.n	800ae14 <_strtol_l.isra.0+0xc0>
 800adea:	d101      	bne.n	800adf0 <_strtol_l.isra.0+0x9c>
 800adec:	45a2      	cmp	sl, r4
 800adee:	db11      	blt.n	800ae14 <_strtol_l.isra.0+0xc0>
 800adf0:	fb00 4003 	mla	r0, r0, r3, r4
 800adf4:	2201      	movs	r2, #1
 800adf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adfa:	e7eb      	b.n	800add4 <_strtol_l.isra.0+0x80>
 800adfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae00:	2f19      	cmp	r7, #25
 800ae02:	d801      	bhi.n	800ae08 <_strtol_l.isra.0+0xb4>
 800ae04:	3c37      	subs	r4, #55	@ 0x37
 800ae06:	e7ea      	b.n	800adde <_strtol_l.isra.0+0x8a>
 800ae08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae0c:	2f19      	cmp	r7, #25
 800ae0e:	d804      	bhi.n	800ae1a <_strtol_l.isra.0+0xc6>
 800ae10:	3c57      	subs	r4, #87	@ 0x57
 800ae12:	e7e4      	b.n	800adde <_strtol_l.isra.0+0x8a>
 800ae14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae18:	e7ed      	b.n	800adf6 <_strtol_l.isra.0+0xa2>
 800ae1a:	1c53      	adds	r3, r2, #1
 800ae1c:	d108      	bne.n	800ae30 <_strtol_l.isra.0+0xdc>
 800ae1e:	2322      	movs	r3, #34	@ 0x22
 800ae20:	f8ce 3000 	str.w	r3, [lr]
 800ae24:	4660      	mov	r0, ip
 800ae26:	f1b8 0f00 	cmp.w	r8, #0
 800ae2a:	d0a0      	beq.n	800ad6e <_strtol_l.isra.0+0x1a>
 800ae2c:	1e69      	subs	r1, r5, #1
 800ae2e:	e006      	b.n	800ae3e <_strtol_l.isra.0+0xea>
 800ae30:	b106      	cbz	r6, 800ae34 <_strtol_l.isra.0+0xe0>
 800ae32:	4240      	negs	r0, r0
 800ae34:	f1b8 0f00 	cmp.w	r8, #0
 800ae38:	d099      	beq.n	800ad6e <_strtol_l.isra.0+0x1a>
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	d1f6      	bne.n	800ae2c <_strtol_l.isra.0+0xd8>
 800ae3e:	f8c8 1000 	str.w	r1, [r8]
 800ae42:	e794      	b.n	800ad6e <_strtol_l.isra.0+0x1a>
 800ae44:	0800c639 	.word	0x0800c639

0800ae48 <_strtol_r>:
 800ae48:	f7ff bf84 	b.w	800ad54 <_strtol_l.isra.0>

0800ae4c <__ssputs_r>:
 800ae4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae50:	688e      	ldr	r6, [r1, #8]
 800ae52:	461f      	mov	r7, r3
 800ae54:	42be      	cmp	r6, r7
 800ae56:	680b      	ldr	r3, [r1, #0]
 800ae58:	4682      	mov	sl, r0
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	4690      	mov	r8, r2
 800ae5e:	d82d      	bhi.n	800aebc <__ssputs_r+0x70>
 800ae60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae68:	d026      	beq.n	800aeb8 <__ssputs_r+0x6c>
 800ae6a:	6965      	ldr	r5, [r4, #20]
 800ae6c:	6909      	ldr	r1, [r1, #16]
 800ae6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae72:	eba3 0901 	sub.w	r9, r3, r1
 800ae76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae7a:	1c7b      	adds	r3, r7, #1
 800ae7c:	444b      	add	r3, r9
 800ae7e:	106d      	asrs	r5, r5, #1
 800ae80:	429d      	cmp	r5, r3
 800ae82:	bf38      	it	cc
 800ae84:	461d      	movcc	r5, r3
 800ae86:	0553      	lsls	r3, r2, #21
 800ae88:	d527      	bpl.n	800aeda <__ssputs_r+0x8e>
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	f7fe fc38 	bl	8009700 <_malloc_r>
 800ae90:	4606      	mov	r6, r0
 800ae92:	b360      	cbz	r0, 800aeee <__ssputs_r+0xa2>
 800ae94:	6921      	ldr	r1, [r4, #16]
 800ae96:	464a      	mov	r2, r9
 800ae98:	f000 fbd8 	bl	800b64c <memcpy>
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aea6:	81a3      	strh	r3, [r4, #12]
 800aea8:	6126      	str	r6, [r4, #16]
 800aeaa:	6165      	str	r5, [r4, #20]
 800aeac:	444e      	add	r6, r9
 800aeae:	eba5 0509 	sub.w	r5, r5, r9
 800aeb2:	6026      	str	r6, [r4, #0]
 800aeb4:	60a5      	str	r5, [r4, #8]
 800aeb6:	463e      	mov	r6, r7
 800aeb8:	42be      	cmp	r6, r7
 800aeba:	d900      	bls.n	800aebe <__ssputs_r+0x72>
 800aebc:	463e      	mov	r6, r7
 800aebe:	6820      	ldr	r0, [r4, #0]
 800aec0:	4632      	mov	r2, r6
 800aec2:	4641      	mov	r1, r8
 800aec4:	f000 fb64 	bl	800b590 <memmove>
 800aec8:	68a3      	ldr	r3, [r4, #8]
 800aeca:	1b9b      	subs	r3, r3, r6
 800aecc:	60a3      	str	r3, [r4, #8]
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	4433      	add	r3, r6
 800aed2:	6023      	str	r3, [r4, #0]
 800aed4:	2000      	movs	r0, #0
 800aed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeda:	462a      	mov	r2, r5
 800aedc:	f000 ff47 	bl	800bd6e <_realloc_r>
 800aee0:	4606      	mov	r6, r0
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d1e0      	bne.n	800aea8 <__ssputs_r+0x5c>
 800aee6:	6921      	ldr	r1, [r4, #16]
 800aee8:	4650      	mov	r0, sl
 800aeea:	f7fe fb95 	bl	8009618 <_free_r>
 800aeee:	230c      	movs	r3, #12
 800aef0:	f8ca 3000 	str.w	r3, [sl]
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aefa:	81a3      	strh	r3, [r4, #12]
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af00:	e7e9      	b.n	800aed6 <__ssputs_r+0x8a>
	...

0800af04 <_svfiprintf_r>:
 800af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af08:	4698      	mov	r8, r3
 800af0a:	898b      	ldrh	r3, [r1, #12]
 800af0c:	061b      	lsls	r3, r3, #24
 800af0e:	b09d      	sub	sp, #116	@ 0x74
 800af10:	4607      	mov	r7, r0
 800af12:	460d      	mov	r5, r1
 800af14:	4614      	mov	r4, r2
 800af16:	d510      	bpl.n	800af3a <_svfiprintf_r+0x36>
 800af18:	690b      	ldr	r3, [r1, #16]
 800af1a:	b973      	cbnz	r3, 800af3a <_svfiprintf_r+0x36>
 800af1c:	2140      	movs	r1, #64	@ 0x40
 800af1e:	f7fe fbef 	bl	8009700 <_malloc_r>
 800af22:	6028      	str	r0, [r5, #0]
 800af24:	6128      	str	r0, [r5, #16]
 800af26:	b930      	cbnz	r0, 800af36 <_svfiprintf_r+0x32>
 800af28:	230c      	movs	r3, #12
 800af2a:	603b      	str	r3, [r7, #0]
 800af2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af30:	b01d      	add	sp, #116	@ 0x74
 800af32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af36:	2340      	movs	r3, #64	@ 0x40
 800af38:	616b      	str	r3, [r5, #20]
 800af3a:	2300      	movs	r3, #0
 800af3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af3e:	2320      	movs	r3, #32
 800af40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af44:	f8cd 800c 	str.w	r8, [sp, #12]
 800af48:	2330      	movs	r3, #48	@ 0x30
 800af4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0e8 <_svfiprintf_r+0x1e4>
 800af4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af52:	f04f 0901 	mov.w	r9, #1
 800af56:	4623      	mov	r3, r4
 800af58:	469a      	mov	sl, r3
 800af5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af5e:	b10a      	cbz	r2, 800af64 <_svfiprintf_r+0x60>
 800af60:	2a25      	cmp	r2, #37	@ 0x25
 800af62:	d1f9      	bne.n	800af58 <_svfiprintf_r+0x54>
 800af64:	ebba 0b04 	subs.w	fp, sl, r4
 800af68:	d00b      	beq.n	800af82 <_svfiprintf_r+0x7e>
 800af6a:	465b      	mov	r3, fp
 800af6c:	4622      	mov	r2, r4
 800af6e:	4629      	mov	r1, r5
 800af70:	4638      	mov	r0, r7
 800af72:	f7ff ff6b 	bl	800ae4c <__ssputs_r>
 800af76:	3001      	adds	r0, #1
 800af78:	f000 80a7 	beq.w	800b0ca <_svfiprintf_r+0x1c6>
 800af7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af7e:	445a      	add	r2, fp
 800af80:	9209      	str	r2, [sp, #36]	@ 0x24
 800af82:	f89a 3000 	ldrb.w	r3, [sl]
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 809f 	beq.w	800b0ca <_svfiprintf_r+0x1c6>
 800af8c:	2300      	movs	r3, #0
 800af8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af96:	f10a 0a01 	add.w	sl, sl, #1
 800af9a:	9304      	str	r3, [sp, #16]
 800af9c:	9307      	str	r3, [sp, #28]
 800af9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afa2:	931a      	str	r3, [sp, #104]	@ 0x68
 800afa4:	4654      	mov	r4, sl
 800afa6:	2205      	movs	r2, #5
 800afa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afac:	484e      	ldr	r0, [pc, #312]	@ (800b0e8 <_svfiprintf_r+0x1e4>)
 800afae:	f7f5 f8e7 	bl	8000180 <memchr>
 800afb2:	9a04      	ldr	r2, [sp, #16]
 800afb4:	b9d8      	cbnz	r0, 800afee <_svfiprintf_r+0xea>
 800afb6:	06d0      	lsls	r0, r2, #27
 800afb8:	bf44      	itt	mi
 800afba:	2320      	movmi	r3, #32
 800afbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afc0:	0711      	lsls	r1, r2, #28
 800afc2:	bf44      	itt	mi
 800afc4:	232b      	movmi	r3, #43	@ 0x2b
 800afc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afca:	f89a 3000 	ldrb.w	r3, [sl]
 800afce:	2b2a      	cmp	r3, #42	@ 0x2a
 800afd0:	d015      	beq.n	800affe <_svfiprintf_r+0xfa>
 800afd2:	9a07      	ldr	r2, [sp, #28]
 800afd4:	4654      	mov	r4, sl
 800afd6:	2000      	movs	r0, #0
 800afd8:	f04f 0c0a 	mov.w	ip, #10
 800afdc:	4621      	mov	r1, r4
 800afde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afe2:	3b30      	subs	r3, #48	@ 0x30
 800afe4:	2b09      	cmp	r3, #9
 800afe6:	d94b      	bls.n	800b080 <_svfiprintf_r+0x17c>
 800afe8:	b1b0      	cbz	r0, 800b018 <_svfiprintf_r+0x114>
 800afea:	9207      	str	r2, [sp, #28]
 800afec:	e014      	b.n	800b018 <_svfiprintf_r+0x114>
 800afee:	eba0 0308 	sub.w	r3, r0, r8
 800aff2:	fa09 f303 	lsl.w	r3, r9, r3
 800aff6:	4313      	orrs	r3, r2
 800aff8:	9304      	str	r3, [sp, #16]
 800affa:	46a2      	mov	sl, r4
 800affc:	e7d2      	b.n	800afa4 <_svfiprintf_r+0xa0>
 800affe:	9b03      	ldr	r3, [sp, #12]
 800b000:	1d19      	adds	r1, r3, #4
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	9103      	str	r1, [sp, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	bfbb      	ittet	lt
 800b00a:	425b      	neglt	r3, r3
 800b00c:	f042 0202 	orrlt.w	r2, r2, #2
 800b010:	9307      	strge	r3, [sp, #28]
 800b012:	9307      	strlt	r3, [sp, #28]
 800b014:	bfb8      	it	lt
 800b016:	9204      	strlt	r2, [sp, #16]
 800b018:	7823      	ldrb	r3, [r4, #0]
 800b01a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b01c:	d10a      	bne.n	800b034 <_svfiprintf_r+0x130>
 800b01e:	7863      	ldrb	r3, [r4, #1]
 800b020:	2b2a      	cmp	r3, #42	@ 0x2a
 800b022:	d132      	bne.n	800b08a <_svfiprintf_r+0x186>
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	1d1a      	adds	r2, r3, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	9203      	str	r2, [sp, #12]
 800b02c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b030:	3402      	adds	r4, #2
 800b032:	9305      	str	r3, [sp, #20]
 800b034:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b0ec <_svfiprintf_r+0x1e8>
 800b038:	7821      	ldrb	r1, [r4, #0]
 800b03a:	2203      	movs	r2, #3
 800b03c:	4650      	mov	r0, sl
 800b03e:	f7f5 f89f 	bl	8000180 <memchr>
 800b042:	b138      	cbz	r0, 800b054 <_svfiprintf_r+0x150>
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	eba0 000a 	sub.w	r0, r0, sl
 800b04a:	2240      	movs	r2, #64	@ 0x40
 800b04c:	4082      	lsls	r2, r0
 800b04e:	4313      	orrs	r3, r2
 800b050:	3401      	adds	r4, #1
 800b052:	9304      	str	r3, [sp, #16]
 800b054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b058:	4825      	ldr	r0, [pc, #148]	@ (800b0f0 <_svfiprintf_r+0x1ec>)
 800b05a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b05e:	2206      	movs	r2, #6
 800b060:	f7f5 f88e 	bl	8000180 <memchr>
 800b064:	2800      	cmp	r0, #0
 800b066:	d036      	beq.n	800b0d6 <_svfiprintf_r+0x1d2>
 800b068:	4b22      	ldr	r3, [pc, #136]	@ (800b0f4 <_svfiprintf_r+0x1f0>)
 800b06a:	bb1b      	cbnz	r3, 800b0b4 <_svfiprintf_r+0x1b0>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	3307      	adds	r3, #7
 800b070:	f023 0307 	bic.w	r3, r3, #7
 800b074:	3308      	adds	r3, #8
 800b076:	9303      	str	r3, [sp, #12]
 800b078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b07a:	4433      	add	r3, r6
 800b07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b07e:	e76a      	b.n	800af56 <_svfiprintf_r+0x52>
 800b080:	fb0c 3202 	mla	r2, ip, r2, r3
 800b084:	460c      	mov	r4, r1
 800b086:	2001      	movs	r0, #1
 800b088:	e7a8      	b.n	800afdc <_svfiprintf_r+0xd8>
 800b08a:	2300      	movs	r3, #0
 800b08c:	3401      	adds	r4, #1
 800b08e:	9305      	str	r3, [sp, #20]
 800b090:	4619      	mov	r1, r3
 800b092:	f04f 0c0a 	mov.w	ip, #10
 800b096:	4620      	mov	r0, r4
 800b098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b09c:	3a30      	subs	r2, #48	@ 0x30
 800b09e:	2a09      	cmp	r2, #9
 800b0a0:	d903      	bls.n	800b0aa <_svfiprintf_r+0x1a6>
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d0c6      	beq.n	800b034 <_svfiprintf_r+0x130>
 800b0a6:	9105      	str	r1, [sp, #20]
 800b0a8:	e7c4      	b.n	800b034 <_svfiprintf_r+0x130>
 800b0aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e7f0      	b.n	800b096 <_svfiprintf_r+0x192>
 800b0b4:	ab03      	add	r3, sp, #12
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	462a      	mov	r2, r5
 800b0ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f8 <_svfiprintf_r+0x1f4>)
 800b0bc:	a904      	add	r1, sp, #16
 800b0be:	4638      	mov	r0, r7
 800b0c0:	f7fc fbe2 	bl	8007888 <_printf_float>
 800b0c4:	1c42      	adds	r2, r0, #1
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	d1d6      	bne.n	800b078 <_svfiprintf_r+0x174>
 800b0ca:	89ab      	ldrh	r3, [r5, #12]
 800b0cc:	065b      	lsls	r3, r3, #25
 800b0ce:	f53f af2d 	bmi.w	800af2c <_svfiprintf_r+0x28>
 800b0d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0d4:	e72c      	b.n	800af30 <_svfiprintf_r+0x2c>
 800b0d6:	ab03      	add	r3, sp, #12
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	462a      	mov	r2, r5
 800b0dc:	4b06      	ldr	r3, [pc, #24]	@ (800b0f8 <_svfiprintf_r+0x1f4>)
 800b0de:	a904      	add	r1, sp, #16
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f7fc fe6b 	bl	8007dbc <_printf_i>
 800b0e6:	e7ed      	b.n	800b0c4 <_svfiprintf_r+0x1c0>
 800b0e8:	0800c431 	.word	0x0800c431
 800b0ec:	0800c437 	.word	0x0800c437
 800b0f0:	0800c43b 	.word	0x0800c43b
 800b0f4:	08007889 	.word	0x08007889
 800b0f8:	0800ae4d 	.word	0x0800ae4d

0800b0fc <__sfputc_r>:
 800b0fc:	6893      	ldr	r3, [r2, #8]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	2b00      	cmp	r3, #0
 800b102:	b410      	push	{r4}
 800b104:	6093      	str	r3, [r2, #8]
 800b106:	da07      	bge.n	800b118 <__sfputc_r+0x1c>
 800b108:	6994      	ldr	r4, [r2, #24]
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	db01      	blt.n	800b112 <__sfputc_r+0x16>
 800b10e:	290a      	cmp	r1, #10
 800b110:	d102      	bne.n	800b118 <__sfputc_r+0x1c>
 800b112:	bc10      	pop	{r4}
 800b114:	f7fd bb0f 	b.w	8008736 <__swbuf_r>
 800b118:	6813      	ldr	r3, [r2, #0]
 800b11a:	1c58      	adds	r0, r3, #1
 800b11c:	6010      	str	r0, [r2, #0]
 800b11e:	7019      	strb	r1, [r3, #0]
 800b120:	4608      	mov	r0, r1
 800b122:	bc10      	pop	{r4}
 800b124:	4770      	bx	lr

0800b126 <__sfputs_r>:
 800b126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b128:	4606      	mov	r6, r0
 800b12a:	460f      	mov	r7, r1
 800b12c:	4614      	mov	r4, r2
 800b12e:	18d5      	adds	r5, r2, r3
 800b130:	42ac      	cmp	r4, r5
 800b132:	d101      	bne.n	800b138 <__sfputs_r+0x12>
 800b134:	2000      	movs	r0, #0
 800b136:	e007      	b.n	800b148 <__sfputs_r+0x22>
 800b138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13c:	463a      	mov	r2, r7
 800b13e:	4630      	mov	r0, r6
 800b140:	f7ff ffdc 	bl	800b0fc <__sfputc_r>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d1f3      	bne.n	800b130 <__sfputs_r+0xa>
 800b148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b14c <_vfiprintf_r>:
 800b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b150:	460d      	mov	r5, r1
 800b152:	b09d      	sub	sp, #116	@ 0x74
 800b154:	4614      	mov	r4, r2
 800b156:	4698      	mov	r8, r3
 800b158:	4606      	mov	r6, r0
 800b15a:	b118      	cbz	r0, 800b164 <_vfiprintf_r+0x18>
 800b15c:	6a03      	ldr	r3, [r0, #32]
 800b15e:	b90b      	cbnz	r3, 800b164 <_vfiprintf_r+0x18>
 800b160:	f7fd f9de 	bl	8008520 <__sinit>
 800b164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b166:	07d9      	lsls	r1, r3, #31
 800b168:	d405      	bmi.n	800b176 <_vfiprintf_r+0x2a>
 800b16a:	89ab      	ldrh	r3, [r5, #12]
 800b16c:	059a      	lsls	r2, r3, #22
 800b16e:	d402      	bmi.n	800b176 <_vfiprintf_r+0x2a>
 800b170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b172:	f7fd fbf2 	bl	800895a <__retarget_lock_acquire_recursive>
 800b176:	89ab      	ldrh	r3, [r5, #12]
 800b178:	071b      	lsls	r3, r3, #28
 800b17a:	d501      	bpl.n	800b180 <_vfiprintf_r+0x34>
 800b17c:	692b      	ldr	r3, [r5, #16]
 800b17e:	b99b      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x5c>
 800b180:	4629      	mov	r1, r5
 800b182:	4630      	mov	r0, r6
 800b184:	f7fd fb16 	bl	80087b4 <__swsetup_r>
 800b188:	b170      	cbz	r0, 800b1a8 <_vfiprintf_r+0x5c>
 800b18a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b18c:	07dc      	lsls	r4, r3, #31
 800b18e:	d504      	bpl.n	800b19a <_vfiprintf_r+0x4e>
 800b190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b194:	b01d      	add	sp, #116	@ 0x74
 800b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19a:	89ab      	ldrh	r3, [r5, #12]
 800b19c:	0598      	lsls	r0, r3, #22
 800b19e:	d4f7      	bmi.n	800b190 <_vfiprintf_r+0x44>
 800b1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1a2:	f7fd fbdb 	bl	800895c <__retarget_lock_release_recursive>
 800b1a6:	e7f3      	b.n	800b190 <_vfiprintf_r+0x44>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ac:	2320      	movs	r3, #32
 800b1ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b6:	2330      	movs	r3, #48	@ 0x30
 800b1b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b368 <_vfiprintf_r+0x21c>
 800b1bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1c0:	f04f 0901 	mov.w	r9, #1
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	469a      	mov	sl, r3
 800b1c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1cc:	b10a      	cbz	r2, 800b1d2 <_vfiprintf_r+0x86>
 800b1ce:	2a25      	cmp	r2, #37	@ 0x25
 800b1d0:	d1f9      	bne.n	800b1c6 <_vfiprintf_r+0x7a>
 800b1d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d6:	d00b      	beq.n	800b1f0 <_vfiprintf_r+0xa4>
 800b1d8:	465b      	mov	r3, fp
 800b1da:	4622      	mov	r2, r4
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7ff ffa1 	bl	800b126 <__sfputs_r>
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	f000 80a7 	beq.w	800b338 <_vfiprintf_r+0x1ec>
 800b1ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1ec:	445a      	add	r2, fp
 800b1ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 809f 	beq.w	800b338 <_vfiprintf_r+0x1ec>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b204:	f10a 0a01 	add.w	sl, sl, #1
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	9307      	str	r3, [sp, #28]
 800b20c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b210:	931a      	str	r3, [sp, #104]	@ 0x68
 800b212:	4654      	mov	r4, sl
 800b214:	2205      	movs	r2, #5
 800b216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21a:	4853      	ldr	r0, [pc, #332]	@ (800b368 <_vfiprintf_r+0x21c>)
 800b21c:	f7f4 ffb0 	bl	8000180 <memchr>
 800b220:	9a04      	ldr	r2, [sp, #16]
 800b222:	b9d8      	cbnz	r0, 800b25c <_vfiprintf_r+0x110>
 800b224:	06d1      	lsls	r1, r2, #27
 800b226:	bf44      	itt	mi
 800b228:	2320      	movmi	r3, #32
 800b22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b22e:	0713      	lsls	r3, r2, #28
 800b230:	bf44      	itt	mi
 800b232:	232b      	movmi	r3, #43	@ 0x2b
 800b234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b238:	f89a 3000 	ldrb.w	r3, [sl]
 800b23c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b23e:	d015      	beq.n	800b26c <_vfiprintf_r+0x120>
 800b240:	9a07      	ldr	r2, [sp, #28]
 800b242:	4654      	mov	r4, sl
 800b244:	2000      	movs	r0, #0
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	4621      	mov	r1, r4
 800b24c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b250:	3b30      	subs	r3, #48	@ 0x30
 800b252:	2b09      	cmp	r3, #9
 800b254:	d94b      	bls.n	800b2ee <_vfiprintf_r+0x1a2>
 800b256:	b1b0      	cbz	r0, 800b286 <_vfiprintf_r+0x13a>
 800b258:	9207      	str	r2, [sp, #28]
 800b25a:	e014      	b.n	800b286 <_vfiprintf_r+0x13a>
 800b25c:	eba0 0308 	sub.w	r3, r0, r8
 800b260:	fa09 f303 	lsl.w	r3, r9, r3
 800b264:	4313      	orrs	r3, r2
 800b266:	9304      	str	r3, [sp, #16]
 800b268:	46a2      	mov	sl, r4
 800b26a:	e7d2      	b.n	800b212 <_vfiprintf_r+0xc6>
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	1d19      	adds	r1, r3, #4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	9103      	str	r1, [sp, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	bfbb      	ittet	lt
 800b278:	425b      	neglt	r3, r3
 800b27a:	f042 0202 	orrlt.w	r2, r2, #2
 800b27e:	9307      	strge	r3, [sp, #28]
 800b280:	9307      	strlt	r3, [sp, #28]
 800b282:	bfb8      	it	lt
 800b284:	9204      	strlt	r2, [sp, #16]
 800b286:	7823      	ldrb	r3, [r4, #0]
 800b288:	2b2e      	cmp	r3, #46	@ 0x2e
 800b28a:	d10a      	bne.n	800b2a2 <_vfiprintf_r+0x156>
 800b28c:	7863      	ldrb	r3, [r4, #1]
 800b28e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b290:	d132      	bne.n	800b2f8 <_vfiprintf_r+0x1ac>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	1d1a      	adds	r2, r3, #4
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	9203      	str	r2, [sp, #12]
 800b29a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b29e:	3402      	adds	r4, #2
 800b2a0:	9305      	str	r3, [sp, #20]
 800b2a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b36c <_vfiprintf_r+0x220>
 800b2a6:	7821      	ldrb	r1, [r4, #0]
 800b2a8:	2203      	movs	r2, #3
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	f7f4 ff68 	bl	8000180 <memchr>
 800b2b0:	b138      	cbz	r0, 800b2c2 <_vfiprintf_r+0x176>
 800b2b2:	9b04      	ldr	r3, [sp, #16]
 800b2b4:	eba0 000a 	sub.w	r0, r0, sl
 800b2b8:	2240      	movs	r2, #64	@ 0x40
 800b2ba:	4082      	lsls	r2, r0
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	3401      	adds	r4, #1
 800b2c0:	9304      	str	r3, [sp, #16]
 800b2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c6:	482a      	ldr	r0, [pc, #168]	@ (800b370 <_vfiprintf_r+0x224>)
 800b2c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2cc:	2206      	movs	r2, #6
 800b2ce:	f7f4 ff57 	bl	8000180 <memchr>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d03f      	beq.n	800b356 <_vfiprintf_r+0x20a>
 800b2d6:	4b27      	ldr	r3, [pc, #156]	@ (800b374 <_vfiprintf_r+0x228>)
 800b2d8:	bb1b      	cbnz	r3, 800b322 <_vfiprintf_r+0x1d6>
 800b2da:	9b03      	ldr	r3, [sp, #12]
 800b2dc:	3307      	adds	r3, #7
 800b2de:	f023 0307 	bic.w	r3, r3, #7
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	9303      	str	r3, [sp, #12]
 800b2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e8:	443b      	add	r3, r7
 800b2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2ec:	e76a      	b.n	800b1c4 <_vfiprintf_r+0x78>
 800b2ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	e7a8      	b.n	800b24a <_vfiprintf_r+0xfe>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	3401      	adds	r4, #1
 800b2fc:	9305      	str	r3, [sp, #20]
 800b2fe:	4619      	mov	r1, r3
 800b300:	f04f 0c0a 	mov.w	ip, #10
 800b304:	4620      	mov	r0, r4
 800b306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b30a:	3a30      	subs	r2, #48	@ 0x30
 800b30c:	2a09      	cmp	r2, #9
 800b30e:	d903      	bls.n	800b318 <_vfiprintf_r+0x1cc>
 800b310:	2b00      	cmp	r3, #0
 800b312:	d0c6      	beq.n	800b2a2 <_vfiprintf_r+0x156>
 800b314:	9105      	str	r1, [sp, #20]
 800b316:	e7c4      	b.n	800b2a2 <_vfiprintf_r+0x156>
 800b318:	fb0c 2101 	mla	r1, ip, r1, r2
 800b31c:	4604      	mov	r4, r0
 800b31e:	2301      	movs	r3, #1
 800b320:	e7f0      	b.n	800b304 <_vfiprintf_r+0x1b8>
 800b322:	ab03      	add	r3, sp, #12
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	462a      	mov	r2, r5
 800b328:	4b13      	ldr	r3, [pc, #76]	@ (800b378 <_vfiprintf_r+0x22c>)
 800b32a:	a904      	add	r1, sp, #16
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7fc faab 	bl	8007888 <_printf_float>
 800b332:	4607      	mov	r7, r0
 800b334:	1c78      	adds	r0, r7, #1
 800b336:	d1d6      	bne.n	800b2e6 <_vfiprintf_r+0x19a>
 800b338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b33a:	07d9      	lsls	r1, r3, #31
 800b33c:	d405      	bmi.n	800b34a <_vfiprintf_r+0x1fe>
 800b33e:	89ab      	ldrh	r3, [r5, #12]
 800b340:	059a      	lsls	r2, r3, #22
 800b342:	d402      	bmi.n	800b34a <_vfiprintf_r+0x1fe>
 800b344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b346:	f7fd fb09 	bl	800895c <__retarget_lock_release_recursive>
 800b34a:	89ab      	ldrh	r3, [r5, #12]
 800b34c:	065b      	lsls	r3, r3, #25
 800b34e:	f53f af1f 	bmi.w	800b190 <_vfiprintf_r+0x44>
 800b352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b354:	e71e      	b.n	800b194 <_vfiprintf_r+0x48>
 800b356:	ab03      	add	r3, sp, #12
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	462a      	mov	r2, r5
 800b35c:	4b06      	ldr	r3, [pc, #24]	@ (800b378 <_vfiprintf_r+0x22c>)
 800b35e:	a904      	add	r1, sp, #16
 800b360:	4630      	mov	r0, r6
 800b362:	f7fc fd2b 	bl	8007dbc <_printf_i>
 800b366:	e7e4      	b.n	800b332 <_vfiprintf_r+0x1e6>
 800b368:	0800c431 	.word	0x0800c431
 800b36c:	0800c437 	.word	0x0800c437
 800b370:	0800c43b 	.word	0x0800c43b
 800b374:	08007889 	.word	0x08007889
 800b378:	0800b127 	.word	0x0800b127

0800b37c <__sflush_r>:
 800b37c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	0716      	lsls	r6, r2, #28
 800b384:	4605      	mov	r5, r0
 800b386:	460c      	mov	r4, r1
 800b388:	d454      	bmi.n	800b434 <__sflush_r+0xb8>
 800b38a:	684b      	ldr	r3, [r1, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	dc02      	bgt.n	800b396 <__sflush_r+0x1a>
 800b390:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b392:	2b00      	cmp	r3, #0
 800b394:	dd48      	ble.n	800b428 <__sflush_r+0xac>
 800b396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b398:	2e00      	cmp	r6, #0
 800b39a:	d045      	beq.n	800b428 <__sflush_r+0xac>
 800b39c:	2300      	movs	r3, #0
 800b39e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b3a2:	682f      	ldr	r7, [r5, #0]
 800b3a4:	6a21      	ldr	r1, [r4, #32]
 800b3a6:	602b      	str	r3, [r5, #0]
 800b3a8:	d030      	beq.n	800b40c <__sflush_r+0x90>
 800b3aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	0759      	lsls	r1, r3, #29
 800b3b0:	d505      	bpl.n	800b3be <__sflush_r+0x42>
 800b3b2:	6863      	ldr	r3, [r4, #4]
 800b3b4:	1ad2      	subs	r2, r2, r3
 800b3b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3b8:	b10b      	cbz	r3, 800b3be <__sflush_r+0x42>
 800b3ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b3bc:	1ad2      	subs	r2, r2, r3
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3c2:	6a21      	ldr	r1, [r4, #32]
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b0      	blx	r6
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	d106      	bne.n	800b3dc <__sflush_r+0x60>
 800b3ce:	6829      	ldr	r1, [r5, #0]
 800b3d0:	291d      	cmp	r1, #29
 800b3d2:	d82b      	bhi.n	800b42c <__sflush_r+0xb0>
 800b3d4:	4a28      	ldr	r2, [pc, #160]	@ (800b478 <__sflush_r+0xfc>)
 800b3d6:	40ca      	lsrs	r2, r1
 800b3d8:	07d6      	lsls	r6, r2, #31
 800b3da:	d527      	bpl.n	800b42c <__sflush_r+0xb0>
 800b3dc:	2200      	movs	r2, #0
 800b3de:	6062      	str	r2, [r4, #4]
 800b3e0:	04d9      	lsls	r1, r3, #19
 800b3e2:	6922      	ldr	r2, [r4, #16]
 800b3e4:	6022      	str	r2, [r4, #0]
 800b3e6:	d504      	bpl.n	800b3f2 <__sflush_r+0x76>
 800b3e8:	1c42      	adds	r2, r0, #1
 800b3ea:	d101      	bne.n	800b3f0 <__sflush_r+0x74>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b903      	cbnz	r3, 800b3f2 <__sflush_r+0x76>
 800b3f0:	6560      	str	r0, [r4, #84]	@ 0x54
 800b3f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3f4:	602f      	str	r7, [r5, #0]
 800b3f6:	b1b9      	cbz	r1, 800b428 <__sflush_r+0xac>
 800b3f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3fc:	4299      	cmp	r1, r3
 800b3fe:	d002      	beq.n	800b406 <__sflush_r+0x8a>
 800b400:	4628      	mov	r0, r5
 800b402:	f7fe f909 	bl	8009618 <_free_r>
 800b406:	2300      	movs	r3, #0
 800b408:	6363      	str	r3, [r4, #52]	@ 0x34
 800b40a:	e00d      	b.n	800b428 <__sflush_r+0xac>
 800b40c:	2301      	movs	r3, #1
 800b40e:	4628      	mov	r0, r5
 800b410:	47b0      	blx	r6
 800b412:	4602      	mov	r2, r0
 800b414:	1c50      	adds	r0, r2, #1
 800b416:	d1c9      	bne.n	800b3ac <__sflush_r+0x30>
 800b418:	682b      	ldr	r3, [r5, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d0c6      	beq.n	800b3ac <__sflush_r+0x30>
 800b41e:	2b1d      	cmp	r3, #29
 800b420:	d001      	beq.n	800b426 <__sflush_r+0xaa>
 800b422:	2b16      	cmp	r3, #22
 800b424:	d11d      	bne.n	800b462 <__sflush_r+0xe6>
 800b426:	602f      	str	r7, [r5, #0]
 800b428:	2000      	movs	r0, #0
 800b42a:	e021      	b.n	800b470 <__sflush_r+0xf4>
 800b42c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b430:	b21b      	sxth	r3, r3
 800b432:	e01a      	b.n	800b46a <__sflush_r+0xee>
 800b434:	690f      	ldr	r7, [r1, #16]
 800b436:	2f00      	cmp	r7, #0
 800b438:	d0f6      	beq.n	800b428 <__sflush_r+0xac>
 800b43a:	0793      	lsls	r3, r2, #30
 800b43c:	680e      	ldr	r6, [r1, #0]
 800b43e:	bf08      	it	eq
 800b440:	694b      	ldreq	r3, [r1, #20]
 800b442:	600f      	str	r7, [r1, #0]
 800b444:	bf18      	it	ne
 800b446:	2300      	movne	r3, #0
 800b448:	1bf6      	subs	r6, r6, r7
 800b44a:	608b      	str	r3, [r1, #8]
 800b44c:	2e00      	cmp	r6, #0
 800b44e:	ddeb      	ble.n	800b428 <__sflush_r+0xac>
 800b450:	6a21      	ldr	r1, [r4, #32]
 800b452:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b456:	4633      	mov	r3, r6
 800b458:	463a      	mov	r2, r7
 800b45a:	4628      	mov	r0, r5
 800b45c:	47e0      	blx	ip
 800b45e:	2800      	cmp	r0, #0
 800b460:	dc07      	bgt.n	800b472 <__sflush_r+0xf6>
 800b462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b46a:	81a3      	strh	r3, [r4, #12]
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b472:	4407      	add	r7, r0
 800b474:	1a36      	subs	r6, r6, r0
 800b476:	e7e9      	b.n	800b44c <__sflush_r+0xd0>
 800b478:	20400001 	.word	0x20400001

0800b47c <_fflush_r>:
 800b47c:	b538      	push	{r3, r4, r5, lr}
 800b47e:	690b      	ldr	r3, [r1, #16]
 800b480:	4605      	mov	r5, r0
 800b482:	460c      	mov	r4, r1
 800b484:	b913      	cbnz	r3, 800b48c <_fflush_r+0x10>
 800b486:	2500      	movs	r5, #0
 800b488:	4628      	mov	r0, r5
 800b48a:	bd38      	pop	{r3, r4, r5, pc}
 800b48c:	b118      	cbz	r0, 800b496 <_fflush_r+0x1a>
 800b48e:	6a03      	ldr	r3, [r0, #32]
 800b490:	b90b      	cbnz	r3, 800b496 <_fflush_r+0x1a>
 800b492:	f7fd f845 	bl	8008520 <__sinit>
 800b496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d0f3      	beq.n	800b486 <_fflush_r+0xa>
 800b49e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4a0:	07d0      	lsls	r0, r2, #31
 800b4a2:	d404      	bmi.n	800b4ae <_fflush_r+0x32>
 800b4a4:	0599      	lsls	r1, r3, #22
 800b4a6:	d402      	bmi.n	800b4ae <_fflush_r+0x32>
 800b4a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4aa:	f7fd fa56 	bl	800895a <__retarget_lock_acquire_recursive>
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	f7ff ff63 	bl	800b37c <__sflush_r>
 800b4b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4b8:	07da      	lsls	r2, r3, #31
 800b4ba:	4605      	mov	r5, r0
 800b4bc:	d4e4      	bmi.n	800b488 <_fflush_r+0xc>
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	059b      	lsls	r3, r3, #22
 800b4c2:	d4e1      	bmi.n	800b488 <_fflush_r+0xc>
 800b4c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4c6:	f7fd fa49 	bl	800895c <__retarget_lock_release_recursive>
 800b4ca:	e7dd      	b.n	800b488 <_fflush_r+0xc>

0800b4cc <__swhatbuf_r>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d4:	2900      	cmp	r1, #0
 800b4d6:	b096      	sub	sp, #88	@ 0x58
 800b4d8:	4615      	mov	r5, r2
 800b4da:	461e      	mov	r6, r3
 800b4dc:	da0d      	bge.n	800b4fa <__swhatbuf_r+0x2e>
 800b4de:	89a3      	ldrh	r3, [r4, #12]
 800b4e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4e4:	f04f 0100 	mov.w	r1, #0
 800b4e8:	bf14      	ite	ne
 800b4ea:	2340      	movne	r3, #64	@ 0x40
 800b4ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	6031      	str	r1, [r6, #0]
 800b4f4:	602b      	str	r3, [r5, #0]
 800b4f6:	b016      	add	sp, #88	@ 0x58
 800b4f8:	bd70      	pop	{r4, r5, r6, pc}
 800b4fa:	466a      	mov	r2, sp
 800b4fc:	f000 f874 	bl	800b5e8 <_fstat_r>
 800b500:	2800      	cmp	r0, #0
 800b502:	dbec      	blt.n	800b4de <__swhatbuf_r+0x12>
 800b504:	9901      	ldr	r1, [sp, #4]
 800b506:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b50a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b50e:	4259      	negs	r1, r3
 800b510:	4159      	adcs	r1, r3
 800b512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b516:	e7eb      	b.n	800b4f0 <__swhatbuf_r+0x24>

0800b518 <__smakebuf_r>:
 800b518:	898b      	ldrh	r3, [r1, #12]
 800b51a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b51c:	079d      	lsls	r5, r3, #30
 800b51e:	4606      	mov	r6, r0
 800b520:	460c      	mov	r4, r1
 800b522:	d507      	bpl.n	800b534 <__smakebuf_r+0x1c>
 800b524:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	6123      	str	r3, [r4, #16]
 800b52c:	2301      	movs	r3, #1
 800b52e:	6163      	str	r3, [r4, #20]
 800b530:	b003      	add	sp, #12
 800b532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b534:	ab01      	add	r3, sp, #4
 800b536:	466a      	mov	r2, sp
 800b538:	f7ff ffc8 	bl	800b4cc <__swhatbuf_r>
 800b53c:	9f00      	ldr	r7, [sp, #0]
 800b53e:	4605      	mov	r5, r0
 800b540:	4639      	mov	r1, r7
 800b542:	4630      	mov	r0, r6
 800b544:	f7fe f8dc 	bl	8009700 <_malloc_r>
 800b548:	b948      	cbnz	r0, 800b55e <__smakebuf_r+0x46>
 800b54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54e:	059a      	lsls	r2, r3, #22
 800b550:	d4ee      	bmi.n	800b530 <__smakebuf_r+0x18>
 800b552:	f023 0303 	bic.w	r3, r3, #3
 800b556:	f043 0302 	orr.w	r3, r3, #2
 800b55a:	81a3      	strh	r3, [r4, #12]
 800b55c:	e7e2      	b.n	800b524 <__smakebuf_r+0xc>
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	6020      	str	r0, [r4, #0]
 800b562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b566:	81a3      	strh	r3, [r4, #12]
 800b568:	9b01      	ldr	r3, [sp, #4]
 800b56a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b56e:	b15b      	cbz	r3, 800b588 <__smakebuf_r+0x70>
 800b570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b574:	4630      	mov	r0, r6
 800b576:	f000 f849 	bl	800b60c <_isatty_r>
 800b57a:	b128      	cbz	r0, 800b588 <__smakebuf_r+0x70>
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	f023 0303 	bic.w	r3, r3, #3
 800b582:	f043 0301 	orr.w	r3, r3, #1
 800b586:	81a3      	strh	r3, [r4, #12]
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	431d      	orrs	r5, r3
 800b58c:	81a5      	strh	r5, [r4, #12]
 800b58e:	e7cf      	b.n	800b530 <__smakebuf_r+0x18>

0800b590 <memmove>:
 800b590:	4288      	cmp	r0, r1
 800b592:	b510      	push	{r4, lr}
 800b594:	eb01 0402 	add.w	r4, r1, r2
 800b598:	d902      	bls.n	800b5a0 <memmove+0x10>
 800b59a:	4284      	cmp	r4, r0
 800b59c:	4623      	mov	r3, r4
 800b59e:	d807      	bhi.n	800b5b0 <memmove+0x20>
 800b5a0:	1e43      	subs	r3, r0, #1
 800b5a2:	42a1      	cmp	r1, r4
 800b5a4:	d008      	beq.n	800b5b8 <memmove+0x28>
 800b5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5ae:	e7f8      	b.n	800b5a2 <memmove+0x12>
 800b5b0:	4402      	add	r2, r0
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	428a      	cmp	r2, r1
 800b5b6:	d100      	bne.n	800b5ba <memmove+0x2a>
 800b5b8:	bd10      	pop	{r4, pc}
 800b5ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5c2:	e7f7      	b.n	800b5b4 <memmove+0x24>

0800b5c4 <strncmp>:
 800b5c4:	b510      	push	{r4, lr}
 800b5c6:	b16a      	cbz	r2, 800b5e4 <strncmp+0x20>
 800b5c8:	3901      	subs	r1, #1
 800b5ca:	1884      	adds	r4, r0, r2
 800b5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d103      	bne.n	800b5e0 <strncmp+0x1c>
 800b5d8:	42a0      	cmp	r0, r4
 800b5da:	d001      	beq.n	800b5e0 <strncmp+0x1c>
 800b5dc:	2a00      	cmp	r2, #0
 800b5de:	d1f5      	bne.n	800b5cc <strncmp+0x8>
 800b5e0:	1ad0      	subs	r0, r2, r3
 800b5e2:	bd10      	pop	{r4, pc}
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	e7fc      	b.n	800b5e2 <strncmp+0x1e>

0800b5e8 <_fstat_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4d07      	ldr	r5, [pc, #28]	@ (800b608 <_fstat_r+0x20>)
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	602b      	str	r3, [r5, #0]
 800b5f6:	f7f6 fbc5 	bl	8001d84 <_fstat>
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	d102      	bne.n	800b604 <_fstat_r+0x1c>
 800b5fe:	682b      	ldr	r3, [r5, #0]
 800b600:	b103      	cbz	r3, 800b604 <_fstat_r+0x1c>
 800b602:	6023      	str	r3, [r4, #0]
 800b604:	bd38      	pop	{r3, r4, r5, pc}
 800b606:	bf00      	nop
 800b608:	20000748 	.word	0x20000748

0800b60c <_isatty_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d06      	ldr	r5, [pc, #24]	@ (800b628 <_isatty_r+0x1c>)
 800b610:	2300      	movs	r3, #0
 800b612:	4604      	mov	r4, r0
 800b614:	4608      	mov	r0, r1
 800b616:	602b      	str	r3, [r5, #0]
 800b618:	f7f6 fbc3 	bl	8001da2 <_isatty>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d102      	bne.n	800b626 <_isatty_r+0x1a>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	b103      	cbz	r3, 800b626 <_isatty_r+0x1a>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	20000748 	.word	0x20000748

0800b62c <_sbrk_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4d06      	ldr	r5, [pc, #24]	@ (800b648 <_sbrk_r+0x1c>)
 800b630:	2300      	movs	r3, #0
 800b632:	4604      	mov	r4, r0
 800b634:	4608      	mov	r0, r1
 800b636:	602b      	str	r3, [r5, #0]
 800b638:	f7f6 fbca 	bl	8001dd0 <_sbrk>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d102      	bne.n	800b646 <_sbrk_r+0x1a>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	b103      	cbz	r3, 800b646 <_sbrk_r+0x1a>
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	20000748 	.word	0x20000748

0800b64c <memcpy>:
 800b64c:	440a      	add	r2, r1
 800b64e:	4291      	cmp	r1, r2
 800b650:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b654:	d100      	bne.n	800b658 <memcpy+0xc>
 800b656:	4770      	bx	lr
 800b658:	b510      	push	{r4, lr}
 800b65a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b65e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b662:	4291      	cmp	r1, r2
 800b664:	d1f9      	bne.n	800b65a <memcpy+0xe>
 800b666:	bd10      	pop	{r4, pc}

0800b668 <nan>:
 800b668:	4901      	ldr	r1, [pc, #4]	@ (800b670 <nan+0x8>)
 800b66a:	2000      	movs	r0, #0
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	7ff80000 	.word	0x7ff80000

0800b674 <__assert_func>:
 800b674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b676:	4614      	mov	r4, r2
 800b678:	461a      	mov	r2, r3
 800b67a:	4b09      	ldr	r3, [pc, #36]	@ (800b6a0 <__assert_func+0x2c>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4605      	mov	r5, r0
 800b680:	68d8      	ldr	r0, [r3, #12]
 800b682:	b14c      	cbz	r4, 800b698 <__assert_func+0x24>
 800b684:	4b07      	ldr	r3, [pc, #28]	@ (800b6a4 <__assert_func+0x30>)
 800b686:	9100      	str	r1, [sp, #0]
 800b688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b68c:	4906      	ldr	r1, [pc, #24]	@ (800b6a8 <__assert_func+0x34>)
 800b68e:	462b      	mov	r3, r5
 800b690:	f000 fba8 	bl	800bde4 <fiprintf>
 800b694:	f000 fbb8 	bl	800be08 <abort>
 800b698:	4b04      	ldr	r3, [pc, #16]	@ (800b6ac <__assert_func+0x38>)
 800b69a:	461c      	mov	r4, r3
 800b69c:	e7f3      	b.n	800b686 <__assert_func+0x12>
 800b69e:	bf00      	nop
 800b6a0:	20000024 	.word	0x20000024
 800b6a4:	0800c44a 	.word	0x0800c44a
 800b6a8:	0800c457 	.word	0x0800c457
 800b6ac:	0800c485 	.word	0x0800c485

0800b6b0 <_calloc_r>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	fba1 5402 	umull	r5, r4, r1, r2
 800b6b6:	b934      	cbnz	r4, 800b6c6 <_calloc_r+0x16>
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7fe f821 	bl	8009700 <_malloc_r>
 800b6be:	4606      	mov	r6, r0
 800b6c0:	b928      	cbnz	r0, 800b6ce <_calloc_r+0x1e>
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	bd70      	pop	{r4, r5, r6, pc}
 800b6c6:	220c      	movs	r2, #12
 800b6c8:	6002      	str	r2, [r0, #0]
 800b6ca:	2600      	movs	r6, #0
 800b6cc:	e7f9      	b.n	800b6c2 <_calloc_r+0x12>
 800b6ce:	462a      	mov	r2, r5
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	f7fd f8c5 	bl	8008860 <memset>
 800b6d6:	e7f4      	b.n	800b6c2 <_calloc_r+0x12>

0800b6d8 <rshift>:
 800b6d8:	6903      	ldr	r3, [r0, #16]
 800b6da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b6de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b6e6:	f100 0414 	add.w	r4, r0, #20
 800b6ea:	dd45      	ble.n	800b778 <rshift+0xa0>
 800b6ec:	f011 011f 	ands.w	r1, r1, #31
 800b6f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b6f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b6f8:	d10c      	bne.n	800b714 <rshift+0x3c>
 800b6fa:	f100 0710 	add.w	r7, r0, #16
 800b6fe:	4629      	mov	r1, r5
 800b700:	42b1      	cmp	r1, r6
 800b702:	d334      	bcc.n	800b76e <rshift+0x96>
 800b704:	1a9b      	subs	r3, r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	1eea      	subs	r2, r5, #3
 800b70a:	4296      	cmp	r6, r2
 800b70c:	bf38      	it	cc
 800b70e:	2300      	movcc	r3, #0
 800b710:	4423      	add	r3, r4
 800b712:	e015      	b.n	800b740 <rshift+0x68>
 800b714:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b718:	f1c1 0820 	rsb	r8, r1, #32
 800b71c:	40cf      	lsrs	r7, r1
 800b71e:	f105 0e04 	add.w	lr, r5, #4
 800b722:	46a1      	mov	r9, r4
 800b724:	4576      	cmp	r6, lr
 800b726:	46f4      	mov	ip, lr
 800b728:	d815      	bhi.n	800b756 <rshift+0x7e>
 800b72a:	1a9a      	subs	r2, r3, r2
 800b72c:	0092      	lsls	r2, r2, #2
 800b72e:	3a04      	subs	r2, #4
 800b730:	3501      	adds	r5, #1
 800b732:	42ae      	cmp	r6, r5
 800b734:	bf38      	it	cc
 800b736:	2200      	movcc	r2, #0
 800b738:	18a3      	adds	r3, r4, r2
 800b73a:	50a7      	str	r7, [r4, r2]
 800b73c:	b107      	cbz	r7, 800b740 <rshift+0x68>
 800b73e:	3304      	adds	r3, #4
 800b740:	1b1a      	subs	r2, r3, r4
 800b742:	42a3      	cmp	r3, r4
 800b744:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b748:	bf08      	it	eq
 800b74a:	2300      	moveq	r3, #0
 800b74c:	6102      	str	r2, [r0, #16]
 800b74e:	bf08      	it	eq
 800b750:	6143      	streq	r3, [r0, #20]
 800b752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b756:	f8dc c000 	ldr.w	ip, [ip]
 800b75a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b75e:	ea4c 0707 	orr.w	r7, ip, r7
 800b762:	f849 7b04 	str.w	r7, [r9], #4
 800b766:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b76a:	40cf      	lsrs	r7, r1
 800b76c:	e7da      	b.n	800b724 <rshift+0x4c>
 800b76e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b772:	f847 cf04 	str.w	ip, [r7, #4]!
 800b776:	e7c3      	b.n	800b700 <rshift+0x28>
 800b778:	4623      	mov	r3, r4
 800b77a:	e7e1      	b.n	800b740 <rshift+0x68>

0800b77c <__hexdig_fun>:
 800b77c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b780:	2b09      	cmp	r3, #9
 800b782:	d802      	bhi.n	800b78a <__hexdig_fun+0xe>
 800b784:	3820      	subs	r0, #32
 800b786:	b2c0      	uxtb	r0, r0
 800b788:	4770      	bx	lr
 800b78a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b78e:	2b05      	cmp	r3, #5
 800b790:	d801      	bhi.n	800b796 <__hexdig_fun+0x1a>
 800b792:	3847      	subs	r0, #71	@ 0x47
 800b794:	e7f7      	b.n	800b786 <__hexdig_fun+0xa>
 800b796:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b79a:	2b05      	cmp	r3, #5
 800b79c:	d801      	bhi.n	800b7a2 <__hexdig_fun+0x26>
 800b79e:	3827      	subs	r0, #39	@ 0x27
 800b7a0:	e7f1      	b.n	800b786 <__hexdig_fun+0xa>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	4770      	bx	lr
	...

0800b7a8 <__gethex>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	b085      	sub	sp, #20
 800b7ae:	468a      	mov	sl, r1
 800b7b0:	9302      	str	r3, [sp, #8]
 800b7b2:	680b      	ldr	r3, [r1, #0]
 800b7b4:	9001      	str	r0, [sp, #4]
 800b7b6:	4690      	mov	r8, r2
 800b7b8:	1c9c      	adds	r4, r3, #2
 800b7ba:	46a1      	mov	r9, r4
 800b7bc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b7c0:	2830      	cmp	r0, #48	@ 0x30
 800b7c2:	d0fa      	beq.n	800b7ba <__gethex+0x12>
 800b7c4:	eba9 0303 	sub.w	r3, r9, r3
 800b7c8:	f1a3 0b02 	sub.w	fp, r3, #2
 800b7cc:	f7ff ffd6 	bl	800b77c <__hexdig_fun>
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d168      	bne.n	800b8a8 <__gethex+0x100>
 800b7d6:	49a0      	ldr	r1, [pc, #640]	@ (800ba58 <__gethex+0x2b0>)
 800b7d8:	2201      	movs	r2, #1
 800b7da:	4648      	mov	r0, r9
 800b7dc:	f7ff fef2 	bl	800b5c4 <strncmp>
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d167      	bne.n	800b8b6 <__gethex+0x10e>
 800b7e6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b7ea:	4626      	mov	r6, r4
 800b7ec:	f7ff ffc6 	bl	800b77c <__hexdig_fun>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d062      	beq.n	800b8ba <__gethex+0x112>
 800b7f4:	4623      	mov	r3, r4
 800b7f6:	7818      	ldrb	r0, [r3, #0]
 800b7f8:	2830      	cmp	r0, #48	@ 0x30
 800b7fa:	4699      	mov	r9, r3
 800b7fc:	f103 0301 	add.w	r3, r3, #1
 800b800:	d0f9      	beq.n	800b7f6 <__gethex+0x4e>
 800b802:	f7ff ffbb 	bl	800b77c <__hexdig_fun>
 800b806:	fab0 f580 	clz	r5, r0
 800b80a:	096d      	lsrs	r5, r5, #5
 800b80c:	f04f 0b01 	mov.w	fp, #1
 800b810:	464a      	mov	r2, r9
 800b812:	4616      	mov	r6, r2
 800b814:	3201      	adds	r2, #1
 800b816:	7830      	ldrb	r0, [r6, #0]
 800b818:	f7ff ffb0 	bl	800b77c <__hexdig_fun>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d1f8      	bne.n	800b812 <__gethex+0x6a>
 800b820:	498d      	ldr	r1, [pc, #564]	@ (800ba58 <__gethex+0x2b0>)
 800b822:	2201      	movs	r2, #1
 800b824:	4630      	mov	r0, r6
 800b826:	f7ff fecd 	bl	800b5c4 <strncmp>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d13f      	bne.n	800b8ae <__gethex+0x106>
 800b82e:	b944      	cbnz	r4, 800b842 <__gethex+0x9a>
 800b830:	1c74      	adds	r4, r6, #1
 800b832:	4622      	mov	r2, r4
 800b834:	4616      	mov	r6, r2
 800b836:	3201      	adds	r2, #1
 800b838:	7830      	ldrb	r0, [r6, #0]
 800b83a:	f7ff ff9f 	bl	800b77c <__hexdig_fun>
 800b83e:	2800      	cmp	r0, #0
 800b840:	d1f8      	bne.n	800b834 <__gethex+0x8c>
 800b842:	1ba4      	subs	r4, r4, r6
 800b844:	00a7      	lsls	r7, r4, #2
 800b846:	7833      	ldrb	r3, [r6, #0]
 800b848:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b84c:	2b50      	cmp	r3, #80	@ 0x50
 800b84e:	d13e      	bne.n	800b8ce <__gethex+0x126>
 800b850:	7873      	ldrb	r3, [r6, #1]
 800b852:	2b2b      	cmp	r3, #43	@ 0x2b
 800b854:	d033      	beq.n	800b8be <__gethex+0x116>
 800b856:	2b2d      	cmp	r3, #45	@ 0x2d
 800b858:	d034      	beq.n	800b8c4 <__gethex+0x11c>
 800b85a:	1c71      	adds	r1, r6, #1
 800b85c:	2400      	movs	r4, #0
 800b85e:	7808      	ldrb	r0, [r1, #0]
 800b860:	f7ff ff8c 	bl	800b77c <__hexdig_fun>
 800b864:	1e43      	subs	r3, r0, #1
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b18      	cmp	r3, #24
 800b86a:	d830      	bhi.n	800b8ce <__gethex+0x126>
 800b86c:	f1a0 0210 	sub.w	r2, r0, #16
 800b870:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b874:	f7ff ff82 	bl	800b77c <__hexdig_fun>
 800b878:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b87c:	fa5f fc8c 	uxtb.w	ip, ip
 800b880:	f1bc 0f18 	cmp.w	ip, #24
 800b884:	f04f 030a 	mov.w	r3, #10
 800b888:	d91e      	bls.n	800b8c8 <__gethex+0x120>
 800b88a:	b104      	cbz	r4, 800b88e <__gethex+0xe6>
 800b88c:	4252      	negs	r2, r2
 800b88e:	4417      	add	r7, r2
 800b890:	f8ca 1000 	str.w	r1, [sl]
 800b894:	b1ed      	cbz	r5, 800b8d2 <__gethex+0x12a>
 800b896:	f1bb 0f00 	cmp.w	fp, #0
 800b89a:	bf0c      	ite	eq
 800b89c:	2506      	moveq	r5, #6
 800b89e:	2500      	movne	r5, #0
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	b005      	add	sp, #20
 800b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a8:	2500      	movs	r5, #0
 800b8aa:	462c      	mov	r4, r5
 800b8ac:	e7b0      	b.n	800b810 <__gethex+0x68>
 800b8ae:	2c00      	cmp	r4, #0
 800b8b0:	d1c7      	bne.n	800b842 <__gethex+0x9a>
 800b8b2:	4627      	mov	r7, r4
 800b8b4:	e7c7      	b.n	800b846 <__gethex+0x9e>
 800b8b6:	464e      	mov	r6, r9
 800b8b8:	462f      	mov	r7, r5
 800b8ba:	2501      	movs	r5, #1
 800b8bc:	e7c3      	b.n	800b846 <__gethex+0x9e>
 800b8be:	2400      	movs	r4, #0
 800b8c0:	1cb1      	adds	r1, r6, #2
 800b8c2:	e7cc      	b.n	800b85e <__gethex+0xb6>
 800b8c4:	2401      	movs	r4, #1
 800b8c6:	e7fb      	b.n	800b8c0 <__gethex+0x118>
 800b8c8:	fb03 0002 	mla	r0, r3, r2, r0
 800b8cc:	e7ce      	b.n	800b86c <__gethex+0xc4>
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	e7de      	b.n	800b890 <__gethex+0xe8>
 800b8d2:	eba6 0309 	sub.w	r3, r6, r9
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	4629      	mov	r1, r5
 800b8da:	2b07      	cmp	r3, #7
 800b8dc:	dc0a      	bgt.n	800b8f4 <__gethex+0x14c>
 800b8de:	9801      	ldr	r0, [sp, #4]
 800b8e0:	f7fd ff9a 	bl	8009818 <_Balloc>
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	b940      	cbnz	r0, 800b8fa <__gethex+0x152>
 800b8e8:	4b5c      	ldr	r3, [pc, #368]	@ (800ba5c <__gethex+0x2b4>)
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	21e4      	movs	r1, #228	@ 0xe4
 800b8ee:	485c      	ldr	r0, [pc, #368]	@ (800ba60 <__gethex+0x2b8>)
 800b8f0:	f7ff fec0 	bl	800b674 <__assert_func>
 800b8f4:	3101      	adds	r1, #1
 800b8f6:	105b      	asrs	r3, r3, #1
 800b8f8:	e7ef      	b.n	800b8da <__gethex+0x132>
 800b8fa:	f100 0a14 	add.w	sl, r0, #20
 800b8fe:	2300      	movs	r3, #0
 800b900:	4655      	mov	r5, sl
 800b902:	469b      	mov	fp, r3
 800b904:	45b1      	cmp	r9, r6
 800b906:	d337      	bcc.n	800b978 <__gethex+0x1d0>
 800b908:	f845 bb04 	str.w	fp, [r5], #4
 800b90c:	eba5 050a 	sub.w	r5, r5, sl
 800b910:	10ad      	asrs	r5, r5, #2
 800b912:	6125      	str	r5, [r4, #16]
 800b914:	4658      	mov	r0, fp
 800b916:	f7fe f871 	bl	80099fc <__hi0bits>
 800b91a:	016d      	lsls	r5, r5, #5
 800b91c:	f8d8 6000 	ldr.w	r6, [r8]
 800b920:	1a2d      	subs	r5, r5, r0
 800b922:	42b5      	cmp	r5, r6
 800b924:	dd54      	ble.n	800b9d0 <__gethex+0x228>
 800b926:	1bad      	subs	r5, r5, r6
 800b928:	4629      	mov	r1, r5
 800b92a:	4620      	mov	r0, r4
 800b92c:	f7fe fbf3 	bl	800a116 <__any_on>
 800b930:	4681      	mov	r9, r0
 800b932:	b178      	cbz	r0, 800b954 <__gethex+0x1ac>
 800b934:	1e6b      	subs	r3, r5, #1
 800b936:	1159      	asrs	r1, r3, #5
 800b938:	f003 021f 	and.w	r2, r3, #31
 800b93c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b940:	f04f 0901 	mov.w	r9, #1
 800b944:	fa09 f202 	lsl.w	r2, r9, r2
 800b948:	420a      	tst	r2, r1
 800b94a:	d003      	beq.n	800b954 <__gethex+0x1ac>
 800b94c:	454b      	cmp	r3, r9
 800b94e:	dc36      	bgt.n	800b9be <__gethex+0x216>
 800b950:	f04f 0902 	mov.w	r9, #2
 800b954:	4629      	mov	r1, r5
 800b956:	4620      	mov	r0, r4
 800b958:	f7ff febe 	bl	800b6d8 <rshift>
 800b95c:	442f      	add	r7, r5
 800b95e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b962:	42bb      	cmp	r3, r7
 800b964:	da42      	bge.n	800b9ec <__gethex+0x244>
 800b966:	9801      	ldr	r0, [sp, #4]
 800b968:	4621      	mov	r1, r4
 800b96a:	f7fd ff95 	bl	8009898 <_Bfree>
 800b96e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b970:	2300      	movs	r3, #0
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	25a3      	movs	r5, #163	@ 0xa3
 800b976:	e793      	b.n	800b8a0 <__gethex+0xf8>
 800b978:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b97c:	2a2e      	cmp	r2, #46	@ 0x2e
 800b97e:	d012      	beq.n	800b9a6 <__gethex+0x1fe>
 800b980:	2b20      	cmp	r3, #32
 800b982:	d104      	bne.n	800b98e <__gethex+0x1e6>
 800b984:	f845 bb04 	str.w	fp, [r5], #4
 800b988:	f04f 0b00 	mov.w	fp, #0
 800b98c:	465b      	mov	r3, fp
 800b98e:	7830      	ldrb	r0, [r6, #0]
 800b990:	9303      	str	r3, [sp, #12]
 800b992:	f7ff fef3 	bl	800b77c <__hexdig_fun>
 800b996:	9b03      	ldr	r3, [sp, #12]
 800b998:	f000 000f 	and.w	r0, r0, #15
 800b99c:	4098      	lsls	r0, r3
 800b99e:	ea4b 0b00 	orr.w	fp, fp, r0
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	e7ae      	b.n	800b904 <__gethex+0x15c>
 800b9a6:	45b1      	cmp	r9, r6
 800b9a8:	d8ea      	bhi.n	800b980 <__gethex+0x1d8>
 800b9aa:	492b      	ldr	r1, [pc, #172]	@ (800ba58 <__gethex+0x2b0>)
 800b9ac:	9303      	str	r3, [sp, #12]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f7ff fe07 	bl	800b5c4 <strncmp>
 800b9b6:	9b03      	ldr	r3, [sp, #12]
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d1e1      	bne.n	800b980 <__gethex+0x1d8>
 800b9bc:	e7a2      	b.n	800b904 <__gethex+0x15c>
 800b9be:	1ea9      	subs	r1, r5, #2
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f7fe fba8 	bl	800a116 <__any_on>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d0c2      	beq.n	800b950 <__gethex+0x1a8>
 800b9ca:	f04f 0903 	mov.w	r9, #3
 800b9ce:	e7c1      	b.n	800b954 <__gethex+0x1ac>
 800b9d0:	da09      	bge.n	800b9e6 <__gethex+0x23e>
 800b9d2:	1b75      	subs	r5, r6, r5
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	9801      	ldr	r0, [sp, #4]
 800b9d8:	462a      	mov	r2, r5
 800b9da:	f7fe f96d 	bl	8009cb8 <__lshift>
 800b9de:	1b7f      	subs	r7, r7, r5
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	f100 0a14 	add.w	sl, r0, #20
 800b9e6:	f04f 0900 	mov.w	r9, #0
 800b9ea:	e7b8      	b.n	800b95e <__gethex+0x1b6>
 800b9ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b9f0:	42bd      	cmp	r5, r7
 800b9f2:	dd6f      	ble.n	800bad4 <__gethex+0x32c>
 800b9f4:	1bed      	subs	r5, r5, r7
 800b9f6:	42ae      	cmp	r6, r5
 800b9f8:	dc34      	bgt.n	800ba64 <__gethex+0x2bc>
 800b9fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d022      	beq.n	800ba48 <__gethex+0x2a0>
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d024      	beq.n	800ba50 <__gethex+0x2a8>
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d115      	bne.n	800ba36 <__gethex+0x28e>
 800ba0a:	42ae      	cmp	r6, r5
 800ba0c:	d113      	bne.n	800ba36 <__gethex+0x28e>
 800ba0e:	2e01      	cmp	r6, #1
 800ba10:	d10b      	bne.n	800ba2a <__gethex+0x282>
 800ba12:	9a02      	ldr	r2, [sp, #8]
 800ba14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba18:	6013      	str	r3, [r2, #0]
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	6123      	str	r3, [r4, #16]
 800ba1e:	f8ca 3000 	str.w	r3, [sl]
 800ba22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba24:	2562      	movs	r5, #98	@ 0x62
 800ba26:	601c      	str	r4, [r3, #0]
 800ba28:	e73a      	b.n	800b8a0 <__gethex+0xf8>
 800ba2a:	1e71      	subs	r1, r6, #1
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7fe fb72 	bl	800a116 <__any_on>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d1ed      	bne.n	800ba12 <__gethex+0x26a>
 800ba36:	9801      	ldr	r0, [sp, #4]
 800ba38:	4621      	mov	r1, r4
 800ba3a:	f7fd ff2d 	bl	8009898 <_Bfree>
 800ba3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba40:	2300      	movs	r3, #0
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	2550      	movs	r5, #80	@ 0x50
 800ba46:	e72b      	b.n	800b8a0 <__gethex+0xf8>
 800ba48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1f3      	bne.n	800ba36 <__gethex+0x28e>
 800ba4e:	e7e0      	b.n	800ba12 <__gethex+0x26a>
 800ba50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1dd      	bne.n	800ba12 <__gethex+0x26a>
 800ba56:	e7ee      	b.n	800ba36 <__gethex+0x28e>
 800ba58:	0800c42f 	.word	0x0800c42f
 800ba5c:	0800c3c5 	.word	0x0800c3c5
 800ba60:	0800c486 	.word	0x0800c486
 800ba64:	1e6f      	subs	r7, r5, #1
 800ba66:	f1b9 0f00 	cmp.w	r9, #0
 800ba6a:	d130      	bne.n	800bace <__gethex+0x326>
 800ba6c:	b127      	cbz	r7, 800ba78 <__gethex+0x2d0>
 800ba6e:	4639      	mov	r1, r7
 800ba70:	4620      	mov	r0, r4
 800ba72:	f7fe fb50 	bl	800a116 <__any_on>
 800ba76:	4681      	mov	r9, r0
 800ba78:	117a      	asrs	r2, r7, #5
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ba80:	f007 071f 	and.w	r7, r7, #31
 800ba84:	40bb      	lsls	r3, r7
 800ba86:	4213      	tst	r3, r2
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	bf18      	it	ne
 800ba8e:	f049 0902 	orrne.w	r9, r9, #2
 800ba92:	f7ff fe21 	bl	800b6d8 <rshift>
 800ba96:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ba9a:	1b76      	subs	r6, r6, r5
 800ba9c:	2502      	movs	r5, #2
 800ba9e:	f1b9 0f00 	cmp.w	r9, #0
 800baa2:	d047      	beq.n	800bb34 <__gethex+0x38c>
 800baa4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d015      	beq.n	800bad8 <__gethex+0x330>
 800baac:	2b03      	cmp	r3, #3
 800baae:	d017      	beq.n	800bae0 <__gethex+0x338>
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d109      	bne.n	800bac8 <__gethex+0x320>
 800bab4:	f019 0f02 	tst.w	r9, #2
 800bab8:	d006      	beq.n	800bac8 <__gethex+0x320>
 800baba:	f8da 3000 	ldr.w	r3, [sl]
 800babe:	ea49 0903 	orr.w	r9, r9, r3
 800bac2:	f019 0f01 	tst.w	r9, #1
 800bac6:	d10e      	bne.n	800bae6 <__gethex+0x33e>
 800bac8:	f045 0510 	orr.w	r5, r5, #16
 800bacc:	e032      	b.n	800bb34 <__gethex+0x38c>
 800bace:	f04f 0901 	mov.w	r9, #1
 800bad2:	e7d1      	b.n	800ba78 <__gethex+0x2d0>
 800bad4:	2501      	movs	r5, #1
 800bad6:	e7e2      	b.n	800ba9e <__gethex+0x2f6>
 800bad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bada:	f1c3 0301 	rsb	r3, r3, #1
 800bade:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d0f0      	beq.n	800bac8 <__gethex+0x320>
 800bae6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800baea:	f104 0314 	add.w	r3, r4, #20
 800baee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800baf2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800baf6:	f04f 0c00 	mov.w	ip, #0
 800bafa:	4618      	mov	r0, r3
 800bafc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb00:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800bb04:	d01b      	beq.n	800bb3e <__gethex+0x396>
 800bb06:	3201      	adds	r2, #1
 800bb08:	6002      	str	r2, [r0, #0]
 800bb0a:	2d02      	cmp	r5, #2
 800bb0c:	f104 0314 	add.w	r3, r4, #20
 800bb10:	d13c      	bne.n	800bb8c <__gethex+0x3e4>
 800bb12:	f8d8 2000 	ldr.w	r2, [r8]
 800bb16:	3a01      	subs	r2, #1
 800bb18:	42b2      	cmp	r2, r6
 800bb1a:	d109      	bne.n	800bb30 <__gethex+0x388>
 800bb1c:	1171      	asrs	r1, r6, #5
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb24:	f006 061f 	and.w	r6, r6, #31
 800bb28:	fa02 f606 	lsl.w	r6, r2, r6
 800bb2c:	421e      	tst	r6, r3
 800bb2e:	d13a      	bne.n	800bba6 <__gethex+0x3fe>
 800bb30:	f045 0520 	orr.w	r5, r5, #32
 800bb34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb36:	601c      	str	r4, [r3, #0]
 800bb38:	9b02      	ldr	r3, [sp, #8]
 800bb3a:	601f      	str	r7, [r3, #0]
 800bb3c:	e6b0      	b.n	800b8a0 <__gethex+0xf8>
 800bb3e:	4299      	cmp	r1, r3
 800bb40:	f843 cc04 	str.w	ip, [r3, #-4]
 800bb44:	d8d9      	bhi.n	800bafa <__gethex+0x352>
 800bb46:	68a3      	ldr	r3, [r4, #8]
 800bb48:	459b      	cmp	fp, r3
 800bb4a:	db17      	blt.n	800bb7c <__gethex+0x3d4>
 800bb4c:	6861      	ldr	r1, [r4, #4]
 800bb4e:	9801      	ldr	r0, [sp, #4]
 800bb50:	3101      	adds	r1, #1
 800bb52:	f7fd fe61 	bl	8009818 <_Balloc>
 800bb56:	4681      	mov	r9, r0
 800bb58:	b918      	cbnz	r0, 800bb62 <__gethex+0x3ba>
 800bb5a:	4b1a      	ldr	r3, [pc, #104]	@ (800bbc4 <__gethex+0x41c>)
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	2184      	movs	r1, #132	@ 0x84
 800bb60:	e6c5      	b.n	800b8ee <__gethex+0x146>
 800bb62:	6922      	ldr	r2, [r4, #16]
 800bb64:	3202      	adds	r2, #2
 800bb66:	f104 010c 	add.w	r1, r4, #12
 800bb6a:	0092      	lsls	r2, r2, #2
 800bb6c:	300c      	adds	r0, #12
 800bb6e:	f7ff fd6d 	bl	800b64c <memcpy>
 800bb72:	4621      	mov	r1, r4
 800bb74:	9801      	ldr	r0, [sp, #4]
 800bb76:	f7fd fe8f 	bl	8009898 <_Bfree>
 800bb7a:	464c      	mov	r4, r9
 800bb7c:	6923      	ldr	r3, [r4, #16]
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb84:	6122      	str	r2, [r4, #16]
 800bb86:	2201      	movs	r2, #1
 800bb88:	615a      	str	r2, [r3, #20]
 800bb8a:	e7be      	b.n	800bb0a <__gethex+0x362>
 800bb8c:	6922      	ldr	r2, [r4, #16]
 800bb8e:	455a      	cmp	r2, fp
 800bb90:	dd0b      	ble.n	800bbaa <__gethex+0x402>
 800bb92:	2101      	movs	r1, #1
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7ff fd9f 	bl	800b6d8 <rshift>
 800bb9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb9e:	3701      	adds	r7, #1
 800bba0:	42bb      	cmp	r3, r7
 800bba2:	f6ff aee0 	blt.w	800b966 <__gethex+0x1be>
 800bba6:	2501      	movs	r5, #1
 800bba8:	e7c2      	b.n	800bb30 <__gethex+0x388>
 800bbaa:	f016 061f 	ands.w	r6, r6, #31
 800bbae:	d0fa      	beq.n	800bba6 <__gethex+0x3fe>
 800bbb0:	4453      	add	r3, sl
 800bbb2:	f1c6 0620 	rsb	r6, r6, #32
 800bbb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bbba:	f7fd ff1f 	bl	80099fc <__hi0bits>
 800bbbe:	42b0      	cmp	r0, r6
 800bbc0:	dbe7      	blt.n	800bb92 <__gethex+0x3ea>
 800bbc2:	e7f0      	b.n	800bba6 <__gethex+0x3fe>
 800bbc4:	0800c3c5 	.word	0x0800c3c5

0800bbc8 <L_shift>:
 800bbc8:	f1c2 0208 	rsb	r2, r2, #8
 800bbcc:	0092      	lsls	r2, r2, #2
 800bbce:	b570      	push	{r4, r5, r6, lr}
 800bbd0:	f1c2 0620 	rsb	r6, r2, #32
 800bbd4:	6843      	ldr	r3, [r0, #4]
 800bbd6:	6804      	ldr	r4, [r0, #0]
 800bbd8:	fa03 f506 	lsl.w	r5, r3, r6
 800bbdc:	432c      	orrs	r4, r5
 800bbde:	40d3      	lsrs	r3, r2
 800bbe0:	6004      	str	r4, [r0, #0]
 800bbe2:	f840 3f04 	str.w	r3, [r0, #4]!
 800bbe6:	4288      	cmp	r0, r1
 800bbe8:	d3f4      	bcc.n	800bbd4 <L_shift+0xc>
 800bbea:	bd70      	pop	{r4, r5, r6, pc}

0800bbec <__match>:
 800bbec:	b530      	push	{r4, r5, lr}
 800bbee:	6803      	ldr	r3, [r0, #0]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbf6:	b914      	cbnz	r4, 800bbfe <__match+0x12>
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	bd30      	pop	{r4, r5, pc}
 800bbfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc02:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bc06:	2d19      	cmp	r5, #25
 800bc08:	bf98      	it	ls
 800bc0a:	3220      	addls	r2, #32
 800bc0c:	42a2      	cmp	r2, r4
 800bc0e:	d0f0      	beq.n	800bbf2 <__match+0x6>
 800bc10:	2000      	movs	r0, #0
 800bc12:	e7f3      	b.n	800bbfc <__match+0x10>

0800bc14 <__hexnan>:
 800bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	680b      	ldr	r3, [r1, #0]
 800bc1a:	6801      	ldr	r1, [r0, #0]
 800bc1c:	115e      	asrs	r6, r3, #5
 800bc1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bc22:	f013 031f 	ands.w	r3, r3, #31
 800bc26:	b087      	sub	sp, #28
 800bc28:	bf18      	it	ne
 800bc2a:	3604      	addne	r6, #4
 800bc2c:	2500      	movs	r5, #0
 800bc2e:	1f37      	subs	r7, r6, #4
 800bc30:	4682      	mov	sl, r0
 800bc32:	4690      	mov	r8, r2
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	f846 5c04 	str.w	r5, [r6, #-4]
 800bc3a:	46b9      	mov	r9, r7
 800bc3c:	463c      	mov	r4, r7
 800bc3e:	9502      	str	r5, [sp, #8]
 800bc40:	46ab      	mov	fp, r5
 800bc42:	784a      	ldrb	r2, [r1, #1]
 800bc44:	1c4b      	adds	r3, r1, #1
 800bc46:	9303      	str	r3, [sp, #12]
 800bc48:	b342      	cbz	r2, 800bc9c <__hexnan+0x88>
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	9105      	str	r1, [sp, #20]
 800bc4e:	9204      	str	r2, [sp, #16]
 800bc50:	f7ff fd94 	bl	800b77c <__hexdig_fun>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d151      	bne.n	800bcfc <__hexnan+0xe8>
 800bc58:	9a04      	ldr	r2, [sp, #16]
 800bc5a:	9905      	ldr	r1, [sp, #20]
 800bc5c:	2a20      	cmp	r2, #32
 800bc5e:	d818      	bhi.n	800bc92 <__hexnan+0x7e>
 800bc60:	9b02      	ldr	r3, [sp, #8]
 800bc62:	459b      	cmp	fp, r3
 800bc64:	dd13      	ble.n	800bc8e <__hexnan+0x7a>
 800bc66:	454c      	cmp	r4, r9
 800bc68:	d206      	bcs.n	800bc78 <__hexnan+0x64>
 800bc6a:	2d07      	cmp	r5, #7
 800bc6c:	dc04      	bgt.n	800bc78 <__hexnan+0x64>
 800bc6e:	462a      	mov	r2, r5
 800bc70:	4649      	mov	r1, r9
 800bc72:	4620      	mov	r0, r4
 800bc74:	f7ff ffa8 	bl	800bbc8 <L_shift>
 800bc78:	4544      	cmp	r4, r8
 800bc7a:	d952      	bls.n	800bd22 <__hexnan+0x10e>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f1a4 0904 	sub.w	r9, r4, #4
 800bc82:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc86:	f8cd b008 	str.w	fp, [sp, #8]
 800bc8a:	464c      	mov	r4, r9
 800bc8c:	461d      	mov	r5, r3
 800bc8e:	9903      	ldr	r1, [sp, #12]
 800bc90:	e7d7      	b.n	800bc42 <__hexnan+0x2e>
 800bc92:	2a29      	cmp	r2, #41	@ 0x29
 800bc94:	d157      	bne.n	800bd46 <__hexnan+0x132>
 800bc96:	3102      	adds	r1, #2
 800bc98:	f8ca 1000 	str.w	r1, [sl]
 800bc9c:	f1bb 0f00 	cmp.w	fp, #0
 800bca0:	d051      	beq.n	800bd46 <__hexnan+0x132>
 800bca2:	454c      	cmp	r4, r9
 800bca4:	d206      	bcs.n	800bcb4 <__hexnan+0xa0>
 800bca6:	2d07      	cmp	r5, #7
 800bca8:	dc04      	bgt.n	800bcb4 <__hexnan+0xa0>
 800bcaa:	462a      	mov	r2, r5
 800bcac:	4649      	mov	r1, r9
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7ff ff8a 	bl	800bbc8 <L_shift>
 800bcb4:	4544      	cmp	r4, r8
 800bcb6:	d936      	bls.n	800bd26 <__hexnan+0x112>
 800bcb8:	f1a8 0204 	sub.w	r2, r8, #4
 800bcbc:	4623      	mov	r3, r4
 800bcbe:	f853 1b04 	ldr.w	r1, [r3], #4
 800bcc2:	f842 1f04 	str.w	r1, [r2, #4]!
 800bcc6:	429f      	cmp	r7, r3
 800bcc8:	d2f9      	bcs.n	800bcbe <__hexnan+0xaa>
 800bcca:	1b3b      	subs	r3, r7, r4
 800bccc:	f023 0303 	bic.w	r3, r3, #3
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	3401      	adds	r4, #1
 800bcd4:	3e03      	subs	r6, #3
 800bcd6:	42b4      	cmp	r4, r6
 800bcd8:	bf88      	it	hi
 800bcda:	2304      	movhi	r3, #4
 800bcdc:	4443      	add	r3, r8
 800bcde:	2200      	movs	r2, #0
 800bce0:	f843 2b04 	str.w	r2, [r3], #4
 800bce4:	429f      	cmp	r7, r3
 800bce6:	d2fb      	bcs.n	800bce0 <__hexnan+0xcc>
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	b91b      	cbnz	r3, 800bcf4 <__hexnan+0xe0>
 800bcec:	4547      	cmp	r7, r8
 800bcee:	d128      	bne.n	800bd42 <__hexnan+0x12e>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	2005      	movs	r0, #5
 800bcf6:	b007      	add	sp, #28
 800bcf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcfc:	3501      	adds	r5, #1
 800bcfe:	2d08      	cmp	r5, #8
 800bd00:	f10b 0b01 	add.w	fp, fp, #1
 800bd04:	dd06      	ble.n	800bd14 <__hexnan+0x100>
 800bd06:	4544      	cmp	r4, r8
 800bd08:	d9c1      	bls.n	800bc8e <__hexnan+0x7a>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd10:	2501      	movs	r5, #1
 800bd12:	3c04      	subs	r4, #4
 800bd14:	6822      	ldr	r2, [r4, #0]
 800bd16:	f000 000f 	and.w	r0, r0, #15
 800bd1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bd1e:	6020      	str	r0, [r4, #0]
 800bd20:	e7b5      	b.n	800bc8e <__hexnan+0x7a>
 800bd22:	2508      	movs	r5, #8
 800bd24:	e7b3      	b.n	800bc8e <__hexnan+0x7a>
 800bd26:	9b01      	ldr	r3, [sp, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0dd      	beq.n	800bce8 <__hexnan+0xd4>
 800bd2c:	f1c3 0320 	rsb	r3, r3, #32
 800bd30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd34:	40da      	lsrs	r2, r3
 800bd36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	f846 3c04 	str.w	r3, [r6, #-4]
 800bd40:	e7d2      	b.n	800bce8 <__hexnan+0xd4>
 800bd42:	3f04      	subs	r7, #4
 800bd44:	e7d0      	b.n	800bce8 <__hexnan+0xd4>
 800bd46:	2004      	movs	r0, #4
 800bd48:	e7d5      	b.n	800bcf6 <__hexnan+0xe2>

0800bd4a <__ascii_mbtowc>:
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	b901      	cbnz	r1, 800bd50 <__ascii_mbtowc+0x6>
 800bd4e:	a901      	add	r1, sp, #4
 800bd50:	b142      	cbz	r2, 800bd64 <__ascii_mbtowc+0x1a>
 800bd52:	b14b      	cbz	r3, 800bd68 <__ascii_mbtowc+0x1e>
 800bd54:	7813      	ldrb	r3, [r2, #0]
 800bd56:	600b      	str	r3, [r1, #0]
 800bd58:	7812      	ldrb	r2, [r2, #0]
 800bd5a:	1e10      	subs	r0, r2, #0
 800bd5c:	bf18      	it	ne
 800bd5e:	2001      	movne	r0, #1
 800bd60:	b002      	add	sp, #8
 800bd62:	4770      	bx	lr
 800bd64:	4610      	mov	r0, r2
 800bd66:	e7fb      	b.n	800bd60 <__ascii_mbtowc+0x16>
 800bd68:	f06f 0001 	mvn.w	r0, #1
 800bd6c:	e7f8      	b.n	800bd60 <__ascii_mbtowc+0x16>

0800bd6e <_realloc_r>:
 800bd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd72:	4607      	mov	r7, r0
 800bd74:	4614      	mov	r4, r2
 800bd76:	460d      	mov	r5, r1
 800bd78:	b921      	cbnz	r1, 800bd84 <_realloc_r+0x16>
 800bd7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd7e:	4611      	mov	r1, r2
 800bd80:	f7fd bcbe 	b.w	8009700 <_malloc_r>
 800bd84:	b92a      	cbnz	r2, 800bd92 <_realloc_r+0x24>
 800bd86:	f7fd fc47 	bl	8009618 <_free_r>
 800bd8a:	4625      	mov	r5, r4
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd92:	f000 f840 	bl	800be16 <_malloc_usable_size_r>
 800bd96:	4284      	cmp	r4, r0
 800bd98:	4606      	mov	r6, r0
 800bd9a:	d802      	bhi.n	800bda2 <_realloc_r+0x34>
 800bd9c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bda0:	d8f4      	bhi.n	800bd8c <_realloc_r+0x1e>
 800bda2:	4621      	mov	r1, r4
 800bda4:	4638      	mov	r0, r7
 800bda6:	f7fd fcab 	bl	8009700 <_malloc_r>
 800bdaa:	4680      	mov	r8, r0
 800bdac:	b908      	cbnz	r0, 800bdb2 <_realloc_r+0x44>
 800bdae:	4645      	mov	r5, r8
 800bdb0:	e7ec      	b.n	800bd8c <_realloc_r+0x1e>
 800bdb2:	42b4      	cmp	r4, r6
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	bf28      	it	cs
 800bdba:	4632      	movcs	r2, r6
 800bdbc:	f7ff fc46 	bl	800b64c <memcpy>
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	4638      	mov	r0, r7
 800bdc4:	f7fd fc28 	bl	8009618 <_free_r>
 800bdc8:	e7f1      	b.n	800bdae <_realloc_r+0x40>

0800bdca <__ascii_wctomb>:
 800bdca:	4603      	mov	r3, r0
 800bdcc:	4608      	mov	r0, r1
 800bdce:	b141      	cbz	r1, 800bde2 <__ascii_wctomb+0x18>
 800bdd0:	2aff      	cmp	r2, #255	@ 0xff
 800bdd2:	d904      	bls.n	800bdde <__ascii_wctomb+0x14>
 800bdd4:	228a      	movs	r2, #138	@ 0x8a
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bddc:	4770      	bx	lr
 800bdde:	700a      	strb	r2, [r1, #0]
 800bde0:	2001      	movs	r0, #1
 800bde2:	4770      	bx	lr

0800bde4 <fiprintf>:
 800bde4:	b40e      	push	{r1, r2, r3}
 800bde6:	b503      	push	{r0, r1, lr}
 800bde8:	4601      	mov	r1, r0
 800bdea:	ab03      	add	r3, sp, #12
 800bdec:	4805      	ldr	r0, [pc, #20]	@ (800be04 <fiprintf+0x20>)
 800bdee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf2:	6800      	ldr	r0, [r0, #0]
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	f7ff f9a9 	bl	800b14c <_vfiprintf_r>
 800bdfa:	b002      	add	sp, #8
 800bdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800be00:	b003      	add	sp, #12
 800be02:	4770      	bx	lr
 800be04:	20000024 	.word	0x20000024

0800be08 <abort>:
 800be08:	b508      	push	{r3, lr}
 800be0a:	2006      	movs	r0, #6
 800be0c:	f000 f834 	bl	800be78 <raise>
 800be10:	2001      	movs	r0, #1
 800be12:	f7f5 ff84 	bl	8001d1e <_exit>

0800be16 <_malloc_usable_size_r>:
 800be16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be1a:	1f18      	subs	r0, r3, #4
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	bfbc      	itt	lt
 800be20:	580b      	ldrlt	r3, [r1, r0]
 800be22:	18c0      	addlt	r0, r0, r3
 800be24:	4770      	bx	lr

0800be26 <_raise_r>:
 800be26:	291f      	cmp	r1, #31
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	4605      	mov	r5, r0
 800be2c:	460c      	mov	r4, r1
 800be2e:	d904      	bls.n	800be3a <_raise_r+0x14>
 800be30:	2316      	movs	r3, #22
 800be32:	6003      	str	r3, [r0, #0]
 800be34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be38:	bd38      	pop	{r3, r4, r5, pc}
 800be3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be3c:	b112      	cbz	r2, 800be44 <_raise_r+0x1e>
 800be3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be42:	b94b      	cbnz	r3, 800be58 <_raise_r+0x32>
 800be44:	4628      	mov	r0, r5
 800be46:	f000 f831 	bl	800beac <_getpid_r>
 800be4a:	4622      	mov	r2, r4
 800be4c:	4601      	mov	r1, r0
 800be4e:	4628      	mov	r0, r5
 800be50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be54:	f000 b818 	b.w	800be88 <_kill_r>
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d00a      	beq.n	800be72 <_raise_r+0x4c>
 800be5c:	1c59      	adds	r1, r3, #1
 800be5e:	d103      	bne.n	800be68 <_raise_r+0x42>
 800be60:	2316      	movs	r3, #22
 800be62:	6003      	str	r3, [r0, #0]
 800be64:	2001      	movs	r0, #1
 800be66:	e7e7      	b.n	800be38 <_raise_r+0x12>
 800be68:	2100      	movs	r1, #0
 800be6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be6e:	4620      	mov	r0, r4
 800be70:	4798      	blx	r3
 800be72:	2000      	movs	r0, #0
 800be74:	e7e0      	b.n	800be38 <_raise_r+0x12>
	...

0800be78 <raise>:
 800be78:	4b02      	ldr	r3, [pc, #8]	@ (800be84 <raise+0xc>)
 800be7a:	4601      	mov	r1, r0
 800be7c:	6818      	ldr	r0, [r3, #0]
 800be7e:	f7ff bfd2 	b.w	800be26 <_raise_r>
 800be82:	bf00      	nop
 800be84:	20000024 	.word	0x20000024

0800be88 <_kill_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4d07      	ldr	r5, [pc, #28]	@ (800bea8 <_kill_r+0x20>)
 800be8c:	2300      	movs	r3, #0
 800be8e:	4604      	mov	r4, r0
 800be90:	4608      	mov	r0, r1
 800be92:	4611      	mov	r1, r2
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	f7f5 ff32 	bl	8001cfe <_kill>
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	d102      	bne.n	800bea4 <_kill_r+0x1c>
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	b103      	cbz	r3, 800bea4 <_kill_r+0x1c>
 800bea2:	6023      	str	r3, [r4, #0]
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
 800bea6:	bf00      	nop
 800bea8:	20000748 	.word	0x20000748

0800beac <_getpid_r>:
 800beac:	f7f5 bf20 	b.w	8001cf0 <_getpid>

0800beb0 <_init>:
 800beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb2:	bf00      	nop
 800beb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beb6:	bc08      	pop	{r3}
 800beb8:	469e      	mov	lr, r3
 800beba:	4770      	bx	lr

0800bebc <_fini>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	bf00      	nop
 800bec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec2:	bc08      	pop	{r3}
 800bec4:	469e      	mov	lr, r3
 800bec6:	4770      	bx	lr
