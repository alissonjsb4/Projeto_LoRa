
LoRa_RS41.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800b838  0800b838  0000c838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bedc  0800bedc  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bedc  0800bedc  0000cedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee4  0800bee4  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee4  0800bee4  0000cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bee8  0800bee8  0000cee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800beec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  200001e4  0800c0d0  0000d1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  0800c0d0  0000d730  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a7f  00000000  00000000  0000d20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038fa  00000000  00000000  00023c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00027588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c9  00000000  00000000  00028bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217b6  00000000  00000000  00029ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a977  00000000  00000000  0004b457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8d79  00000000  00000000  00065dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011eb47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007040  00000000  00000000  0011eb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00125bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b820 	.word	0x0800b820

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800b820 	.word	0x0800b820

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c4c:	f000 b9be 	b.w	8000fcc <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	468e      	mov	lr, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	4688      	mov	r8, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	d962      	bls.n	8000db0 <__udivmoddi4+0xdc>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	b14e      	cbz	r6, 8000d04 <__udivmoddi4+0x30>
 8000cf0:	f1c6 0320 	rsb	r3, r6, #32
 8000cf4:	fa01 f806 	lsl.w	r8, r1, r6
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	40b7      	lsls	r7, r6
 8000cfe:	ea43 0808 	orr.w	r8, r3, r8
 8000d02:	40b4      	lsls	r4, r6
 8000d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d08:	fa1f fc87 	uxth.w	ip, r7
 8000d0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d10:	0c23      	lsrs	r3, r4, #16
 8000d12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d28:	f080 80ea 	bcs.w	8000f00 <__udivmoddi4+0x22c>
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f240 80e7 	bls.w	8000f00 <__udivmoddi4+0x22c>
 8000d32:	3902      	subs	r1, #2
 8000d34:	443b      	add	r3, r7
 8000d36:	1a9a      	subs	r2, r3, r2
 8000d38:	b2a3      	uxth	r3, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4a:	459c      	cmp	ip, r3
 8000d4c:	d909      	bls.n	8000d62 <__udivmoddi4+0x8e>
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d54:	f080 80d6 	bcs.w	8000f04 <__udivmoddi4+0x230>
 8000d58:	459c      	cmp	ip, r3
 8000d5a:	f240 80d3 	bls.w	8000f04 <__udivmoddi4+0x230>
 8000d5e:	443b      	add	r3, r7
 8000d60:	3802      	subs	r0, #2
 8000d62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d66:	eba3 030c 	sub.w	r3, r3, ip
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11d      	cbz	r5, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40f3      	lsrs	r3, r6
 8000d70:	2200      	movs	r2, #0
 8000d72:	e9c5 3200 	strd	r3, r2, [r5]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d905      	bls.n	8000d8a <__udivmoddi4+0xb6>
 8000d7e:	b10d      	cbz	r5, 8000d84 <__udivmoddi4+0xb0>
 8000d80:	e9c5 0100 	strd	r0, r1, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	4608      	mov	r0, r1
 8000d88:	e7f5      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000d8a:	fab3 f183 	clz	r1, r3
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d146      	bne.n	8000e20 <__udivmoddi4+0x14c>
 8000d92:	4573      	cmp	r3, lr
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xc8>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 8105 	bhi.w	8000fa6 <__udivmoddi4+0x2d2>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	4690      	mov	r8, r2
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e5      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000daa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dae:	e7e2      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	2a00      	cmp	r2, #0
 8000db2:	f000 8090 	beq.w	8000ed6 <__udivmoddi4+0x202>
 8000db6:	fab2 f682 	clz	r6, r2
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	f040 80a4 	bne.w	8000f08 <__udivmoddi4+0x234>
 8000dc0:	1a8a      	subs	r2, r1, r2
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	b2bc      	uxth	r4, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dda:	fb04 f20c 	mul.w	r2, r4, ip
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x11e>
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x11c>
 8000dea:	429a      	cmp	r2, r3
 8000dec:	f200 80e0 	bhi.w	8000fb0 <__udivmoddi4+0x2dc>
 8000df0:	46c4      	mov	ip, r8
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000df8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dfc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e00:	fb02 f404 	mul.w	r4, r2, r4
 8000e04:	429c      	cmp	r4, r3
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0x144>
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x142>
 8000e10:	429c      	cmp	r4, r3
 8000e12:	f200 80ca 	bhi.w	8000faa <__udivmoddi4+0x2d6>
 8000e16:	4602      	mov	r2, r0
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e1e:	e7a5      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e20:	f1c1 0620 	rsb	r6, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e30:	fa20 f306 	lsr.w	r3, r0, r6
 8000e34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	fa1f fc87 	uxth.w	ip, r7
 8000e46:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x1a0>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e66:	f080 809c 	bcs.w	8000fa2 <__udivmoddi4+0x2ce>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f240 8099 	bls.w	8000fa2 <__udivmoddi4+0x2ce>
 8000e70:	3802      	subs	r0, #2
 8000e72:	443c      	add	r4, r7
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	fa1f fe83 	uxth.w	lr, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e8c:	45a4      	cmp	ip, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1ce>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e96:	f080 8082 	bcs.w	8000f9e <__udivmoddi4+0x2ca>
 8000e9a:	45a4      	cmp	ip, r4
 8000e9c:	d97f      	bls.n	8000f9e <__udivmoddi4+0x2ca>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	443c      	add	r4, r7
 8000ea2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ea6:	eba4 040c 	sub.w	r4, r4, ip
 8000eaa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eae:	4564      	cmp	r4, ip
 8000eb0:	4673      	mov	r3, lr
 8000eb2:	46e1      	mov	r9, ip
 8000eb4:	d362      	bcc.n	8000f7c <__udivmoddi4+0x2a8>
 8000eb6:	d05f      	beq.n	8000f78 <__udivmoddi4+0x2a4>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x1fe>
 8000eba:	ebb8 0203 	subs.w	r2, r8, r3
 8000ebe:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ec6:	fa22 f301 	lsr.w	r3, r2, r1
 8000eca:	431e      	orrs	r6, r3
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e74f      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000ed6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eda:	0c01      	lsrs	r1, r0, #16
 8000edc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee0:	b280      	uxth	r0, r0
 8000ee2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4638      	mov	r0, r7
 8000eea:	463c      	mov	r4, r7
 8000eec:	46b8      	mov	r8, r7
 8000eee:	46be      	mov	lr, r7
 8000ef0:	2620      	movs	r6, #32
 8000ef2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ef6:	eba2 0208 	sub.w	r2, r2, r8
 8000efa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000efe:	e766      	b.n	8000dce <__udivmoddi4+0xfa>
 8000f00:	4601      	mov	r1, r0
 8000f02:	e718      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f04:	4610      	mov	r0, r2
 8000f06:	e72c      	b.n	8000d62 <__udivmoddi4+0x8e>
 8000f08:	f1c6 0220 	rsb	r2, r6, #32
 8000f0c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f10:	40b7      	lsls	r7, r6
 8000f12:	40b1      	lsls	r1, r6
 8000f14:	fa20 f202 	lsr.w	r2, r0, r2
 8000f18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f22:	b2bc      	uxth	r4, r7
 8000f24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f28:	0c11      	lsrs	r1, r2, #16
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb08 f904 	mul.w	r9, r8, r4
 8000f32:	40b0      	lsls	r0, r6
 8000f34:	4589      	cmp	r9, r1
 8000f36:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3a:	b280      	uxth	r0, r0
 8000f3c:	d93e      	bls.n	8000fbc <__udivmoddi4+0x2e8>
 8000f3e:	1879      	adds	r1, r7, r1
 8000f40:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f44:	d201      	bcs.n	8000f4a <__udivmoddi4+0x276>
 8000f46:	4589      	cmp	r9, r1
 8000f48:	d81f      	bhi.n	8000f8a <__udivmoddi4+0x2b6>
 8000f4a:	eba1 0109 	sub.w	r1, r1, r9
 8000f4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f52:	fb09 f804 	mul.w	r8, r9, r4
 8000f56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d229      	bcs.n	8000fb8 <__udivmoddi4+0x2e4>
 8000f64:	18ba      	adds	r2, r7, r2
 8000f66:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f6a:	d2c4      	bcs.n	8000ef6 <__udivmoddi4+0x222>
 8000f6c:	4542      	cmp	r2, r8
 8000f6e:	d2c2      	bcs.n	8000ef6 <__udivmoddi4+0x222>
 8000f70:	f1a9 0102 	sub.w	r1, r9, #2
 8000f74:	443a      	add	r2, r7
 8000f76:	e7be      	b.n	8000ef6 <__udivmoddi4+0x222>
 8000f78:	45f0      	cmp	r8, lr
 8000f7a:	d29d      	bcs.n	8000eb8 <__udivmoddi4+0x1e4>
 8000f7c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f80:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f84:	3801      	subs	r0, #1
 8000f86:	46e1      	mov	r9, ip
 8000f88:	e796      	b.n	8000eb8 <__udivmoddi4+0x1e4>
 8000f8a:	eba7 0909 	sub.w	r9, r7, r9
 8000f8e:	4449      	add	r1, r9
 8000f90:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f98:	fb09 f804 	mul.w	r8, r9, r4
 8000f9c:	e7db      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f9e:	4673      	mov	r3, lr
 8000fa0:	e77f      	b.n	8000ea2 <__udivmoddi4+0x1ce>
 8000fa2:	4650      	mov	r0, sl
 8000fa4:	e766      	b.n	8000e74 <__udivmoddi4+0x1a0>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e6fd      	b.n	8000da6 <__udivmoddi4+0xd2>
 8000faa:	443b      	add	r3, r7
 8000fac:	3a02      	subs	r2, #2
 8000fae:	e733      	b.n	8000e18 <__udivmoddi4+0x144>
 8000fb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb4:	443b      	add	r3, r7
 8000fb6:	e71c      	b.n	8000df2 <__udivmoddi4+0x11e>
 8000fb8:	4649      	mov	r1, r9
 8000fba:	e79c      	b.n	8000ef6 <__udivmoddi4+0x222>
 8000fbc:	eba1 0109 	sub.w	r1, r1, r9
 8000fc0:	46c4      	mov	ip, r8
 8000fc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc6:	fb09 f804 	mul.w	r8, r9, r4
 8000fca:	e7c4      	b.n	8000f56 <__udivmoddi4+0x282>

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000fde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001004:	2004      	movs	r0, #4
 8001006:	f7ff ffe3 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ffe0 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	200b      	movs	r0, #11
 8001016:	f001 f8b6 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800101a:	200b      	movs	r0, #11
 800101c:	f001 f8cd 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	200c      	movs	r0, #12
 8001026:	f001 f8ae 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800102a:	200c      	movs	r0, #12
 800102c:	f001 f8c5 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	200d      	movs	r0, #13
 8001036:	f001 f8a6 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800103a:	200d      	movs	r0, #13
 800103c:	f001 f8bd 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	200e      	movs	r0, #14
 8001046:	f001 f89e 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800104a:	200e      	movs	r0, #14
 800104c:	f001 f8b5 	bl	80021ba <HAL_NVIC_EnableIRQ>

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001060:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001062:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001070:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001078:	68fb      	ldr	r3, [r7, #12]
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff ffdb 	bl	8001054 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff ffd8 	bl	8001054 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ffd5 	bl	8001054 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b0:	4813      	ldr	r0, [pc, #76]	@ (8001100 <MX_GPIO_Init+0x7c>)
 80010b2:	f001 fd7f 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2138      	movs	r1, #56	@ 0x38
 80010ba:	4812      	ldr	r0, [pc, #72]	@ (8001104 <MX_GPIO_Init+0x80>)
 80010bc:	f001 fd7a 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80010c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	480a      	ldr	r0, [pc, #40]	@ (8001100 <MX_GPIO_Init+0x7c>)
 80010d8:	f001 fc0c 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80010dc:	2338      	movs	r3, #56	@ 0x38
 80010de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_GPIO_Init+0x80>)
 80010f2:	f001 fbff 	bl	80028f4 <HAL_GPIO_Init>

}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800

08001108 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redireciona a saída do printf para a USART2 (nossa porta de debug para o PC)
int _write(int file, char *ptr, int len)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	b29a      	uxth	r2, r3
 8001118:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	4804      	ldr	r0, [pc, #16]	@ (8001130 <_write+0x28>)
 8001120:	f003 fd89 	bl	8004c36 <HAL_UART_Transmit>
  return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200003c4 	.word	0x200003c4

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f000 feb3 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f879 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f7ff ff9f 	bl	8001084 <MX_GPIO_Init>
  MX_DMA_Init();
 8001146:	f7ff ff5b 	bl	8001000 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800114a:	f000 fcff 	bl	8001b4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800114e:	f000 fd49 	bl	8001be4 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 8001152:	f000 fc3d 	bl	80019d0 <MX_SUBGHZ_Init>

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8001156:	2001      	movs	r0, #1
 8001158:	f000 fdd2 	bl	8001d00 <BSP_LED_Init>

  printf("\r\n--- Placa 1: Parser Radiosonda & Tx LoRa ---\r\n");
 800115c:	482f      	ldr	r0, [pc, #188]	@ (800121c <main+0xe8>)
 800115e:	f006 ff35 	bl	8007fcc <puts>

  Radio_Init();
 8001162:	f000 f93f 	bl	80013e4 <Radio_Init>
  printf("Radio LoRa inicializado.\r\n");
 8001166:	482e      	ldr	r0, [pc, #184]	@ (8001220 <main+0xec>)
 8001168:	f006 ff30 	bl	8007fcc <puts>

  printf("Estado: Aguardando SYNC_WORD (0xAA) da radiosonda na USART1...\r\n");
 800116c:	482d      	ldr	r0, [pc, #180]	@ (8001224 <main+0xf0>)
 800116e:	f006 ff2d 	bl	8007fcc <puts>

  // Inicia a recepção via DMA na USART1 (rádiosonda)
  HAL_UART_Receive_DMA(&huart1, radiosonde_rx_buffer, RADIOSONDE_UART_BUFFER_SIZE);
 8001172:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001176:	492c      	ldr	r1, [pc, #176]	@ (8001228 <main+0xf4>)
 8001178:	482c      	ldr	r0, [pc, #176]	@ (800122c <main+0xf8>)
 800117a:	f003 fde3 	bl	8004d44 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint16_t new_pos = RADIOSONDE_UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <main+0xf8>)
 8001180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	b29b      	uxth	r3, r3
 800118a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800118e:	807b      	strh	r3, [r7, #2]
    if (new_pos != old_pos)
 8001190:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <main+0xfc>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	887a      	ldrh	r2, [r7, #2]
 8001196:	429a      	cmp	r2, r3
 8001198:	d03c      	beq.n	8001214 <main+0xe0>
    {
      if (new_pos > old_pos) {
 800119a:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <main+0xfc>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d912      	bls.n	80011ca <main+0x96>
        for (int i = old_pos; i < new_pos; i++) {
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <main+0xfc>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e009      	b.n	80011c0 <main+0x8c>
          ProcessByte(radiosonde_rx_buffer[i]);
 80011ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001228 <main+0xf4>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f88f 	bl	80012d8 <ProcessByte>
        for (int i = old_pos; i < new_pos; i++) {
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbf1      	blt.n	80011ac <main+0x78>
 80011c8:	e021      	b.n	800120e <main+0xda>
        }
      } else { // Wrap-around
        for (int i = old_pos; i < RADIOSONDE_UART_BUFFER_SIZE; i++) {
 80011ca:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <main+0xfc>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	e009      	b.n	80011e6 <main+0xb2>
          ProcessByte(radiosonde_rx_buffer[i]);
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <main+0xf4>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f87c 	bl	80012d8 <ProcessByte>
        for (int i = old_pos; i < RADIOSONDE_UART_BUFFER_SIZE; i++) {
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2bff      	cmp	r3, #255	@ 0xff
 80011ea:	ddf2      	ble.n	80011d2 <main+0x9e>
        }
        for (int i = 0; i < new_pos; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	e009      	b.n	8001206 <main+0xd2>
          ProcessByte(radiosonde_rx_buffer[i]);
 80011f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <main+0xf4>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f86c 	bl	80012d8 <ProcessByte>
        for (int i = 0; i < new_pos; i++) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3301      	adds	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	429a      	cmp	r2, r3
 800120c:	dbf1      	blt.n	80011f2 <main+0xbe>
        }
      }
      old_pos = new_pos;
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <main+0xfc>)
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	8013      	strh	r3, [r2, #0]
    }

    // Pequeno delay para evitar sobrecarga da CPU
    HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f000 febb 	bl	8001f90 <HAL_Delay>
  {
 800121a:	e7b0      	b.n	800117e <main+0x4a>
 800121c:	0800b838 	.word	0x0800b838
 8001220:	0800b868 	.word	0x0800b868
 8001224:	0800b884 	.word	0x0800b884
 8001228:	20000200 	.word	0x20000200
 800122c:	20000330 	.word	0x20000330
 8001230:	20000300 	.word	0x20000300

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b09a      	sub	sp, #104	@ 0x68
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2248      	movs	r2, #72	@ 0x48
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f006 ffc4 	bl	80081d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <SystemClock_Config+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001262:	4a1c      	ldr	r2, [pc, #112]	@ (80012d4 <SystemClock_Config+0xa0>)
 8001264:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <SystemClock_Config+0xa0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001276:	2320      	movs	r3, #32
 8001278:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800127a:	2301      	movs	r3, #1
 800127c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800127e:	2300      	movs	r3, #0
 8001280:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001282:	2360      	movs	r3, #96	@ 0x60
 8001284:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001286:	2300      	movs	r3, #0
 8001288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	4618      	mov	r0, r3
 8001290:	f001 ff92 	bl	80031b8 <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800129a:	f000 f939 	bl	8001510 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800129e:	234f      	movs	r3, #79	@ 0x4f
 80012a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fafe 	bl	80038bc <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012c6:	f000 f923 	bl	8001510 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3768      	adds	r7, #104	@ 0x68
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	58000400 	.word	0x58000400

080012d8 <ProcessByte>:

/* USER CODE BEGIN 4 */
// --- Nossas funções de apoio ---

void ProcessByte(uint8_t receivedByte)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  switch (currentState)
 80012e2:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <ProcessByte+0xac>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d025      	beq.n	8001336 <ProcessByte+0x5e>
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	dc46      	bgt.n	800137c <ProcessByte+0xa4>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <ProcessByte+0x20>
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d00b      	beq.n	800130e <ProcessByte+0x36>
        }
        currentState = AWAITING_SYNC;
      }
      break;
  }
}
 80012f6:	e041      	b.n	800137c <ProcessByte+0xa4>
      if (receivedByte == SYNC_WORD) {
 80012f8:	22aa      	movs	r2, #170	@ 0xaa
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d13a      	bne.n	8001376 <ProcessByte+0x9e>
        byteCounter = 0;
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <ProcessByte+0xb0>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
        currentState = RECEIVING_PAYLOAD;
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <ProcessByte+0xac>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
      break;
 800130c:	e033      	b.n	8001376 <ProcessByte+0x9e>
      if (byteCounter < PAYLOAD_SIZE) {
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <ProcessByte+0xb0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b13      	cmp	r3, #19
 8001314:	d807      	bhi.n	8001326 <ProcessByte+0x4e>
        payloadBuffer[byteCounter++] = receivedByte;
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <ProcessByte+0xb0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	491a      	ldr	r1, [pc, #104]	@ (8001388 <ProcessByte+0xb0>)
 800131e:	600a      	str	r2, [r1, #0]
 8001320:	491a      	ldr	r1, [pc, #104]	@ (800138c <ProcessByte+0xb4>)
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	54ca      	strb	r2, [r1, r3]
      if (byteCounter >= PAYLOAD_SIZE) {
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <ProcessByte+0xb0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b13      	cmp	r3, #19
 800132c:	d925      	bls.n	800137a <ProcessByte+0xa2>
        currentState = AWAITING_CHECKSUM;
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <ProcessByte+0xac>)
 8001330:	2202      	movs	r2, #2
 8001332:	701a      	strb	r2, [r3, #0]
      break;
 8001334:	e021      	b.n	800137a <ProcessByte+0xa2>
        uint8_t receivedChecksum = receivedByte;
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	73fb      	strb	r3, [r7, #15]
        uint8_t calculatedChecksum = calculate_checksum(payloadBuffer, PAYLOAD_SIZE);
 800133a:	2114      	movs	r1, #20
 800133c:	4813      	ldr	r0, [pc, #76]	@ (800138c <ProcessByte+0xb4>)
 800133e:	f000 f8c9 	bl	80014d4 <calculate_checksum>
 8001342:	4603      	mov	r3, r0
 8001344:	73bb      	strb	r3, [r7, #14]
        if (receivedChecksum == calculatedChecksum) {
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	429a      	cmp	r2, r3
 800134c:	d109      	bne.n	8001362 <ProcessByte+0x8a>
          printf("Checksum OK. Pacote da radiosonda validado.\r\n");
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <ProcessByte+0xb8>)
 8001350:	f006 fe3c 	bl	8007fcc <puts>
          BSP_LED_Toggle(LED_GREEN);
 8001354:	2001      	movs	r0, #1
 8001356:	f000 fd0d 	bl	8001d74 <BSP_LED_Toggle>
          SendLoRaPacket((LoRaPayload_t*)payloadBuffer);
 800135a:	480c      	ldr	r0, [pc, #48]	@ (800138c <ProcessByte+0xb4>)
 800135c:	f000 f81c 	bl	8001398 <SendLoRaPacket>
 8001360:	e005      	b.n	800136e <ProcessByte+0x96>
          printf("Falha no Checksum! Esperado: 0x%02X, Recebido: 0x%02X\r\n", calculatedChecksum, receivedChecksum);
 8001362:	7bbb      	ldrb	r3, [r7, #14]
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	4619      	mov	r1, r3
 8001368:	480a      	ldr	r0, [pc, #40]	@ (8001394 <ProcessByte+0xbc>)
 800136a:	f006 fdc7 	bl	8007efc <iprintf>
        currentState = AWAITING_SYNC;
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <ProcessByte+0xac>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
      break;
 8001374:	e002      	b.n	800137c <ProcessByte+0xa4>
      break;
 8001376:	bf00      	nop
 8001378:	e000      	b.n	800137c <ProcessByte+0xa4>
      break;
 800137a:	bf00      	nop
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000031c 	.word	0x2000031c
 8001388:	20000318 	.word	0x20000318
 800138c:	20000304 	.word	0x20000304
 8001390:	0800b8c4 	.word	0x0800b8c4
 8001394:	0800b8f4 	.word	0x0800b8f4

08001398 <SendLoRaPacket>:

void SendLoRaPacket(LoRaPayload_t* payload)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    if (tx_done == true) // Só transmite se a transmissão anterior já terminou
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <SendLoRaPacket+0x40>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00e      	beq.n	80013c8 <SendLoRaPacket+0x30>
    {
        tx_done = false; // Bloqueia novas transmissões
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <SendLoRaPacket+0x40>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
        printf("Transmitindo pacote LoRa ID: %lu\r\n", payload->packet_id);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4809      	ldr	r0, [pc, #36]	@ (80013dc <SendLoRaPacket+0x44>)
 80013b8:	f006 fda0 	bl	8007efc <iprintf>
        SUBGRF_SendPayload((uint8_t*)payload, PAYLOAD_SIZE, 0); // Timeout 0 para não bloquear
 80013bc:	2200      	movs	r2, #0
 80013be:	2114      	movs	r1, #20
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f005 f8af 	bl	8006524 <SUBGRF_SendPayload>
    }
    else
    {
        printf("WARN: Rádio ocupado, pacote descartado.\r\n");
    }
}
 80013c6:	e002      	b.n	80013ce <SendLoRaPacket+0x36>
        printf("WARN: Rádio ocupado, pacote descartado.\r\n");
 80013c8:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <SendLoRaPacket+0x48>)
 80013ca:	f006 fdff 	bl	8007fcc <puts>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000
 80013dc:	0800b92c 	.word	0x0800b92c
 80013e0:	0800b950 	.word	0x0800b950

080013e4 <Radio_Init>:

void Radio_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	@ 0x30
 80013e8:	af00      	add	r7, sp, #0
    SUBGRF_Init(RadioOnDioIrq);
 80013ea:	481f      	ldr	r0, [pc, #124]	@ (8001468 <Radio_Init+0x84>)
 80013ec:	f005 f842 	bl	8006474 <SUBGRF_Init>

    SUBGRF_SetStandby(STDBY_RC);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f005 f8eb 	bl	80065cc <SUBGRF_SetStandby>
    SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f005 fa7e 	bl	80068f8 <SUBGRF_SetPacketType>
    SUBGRF_SetRfFrequency(RF_FREQUENCY);
 80013fc:	481b      	ldr	r0, [pc, #108]	@ (800146c <Radio_Init+0x88>)
 80013fe:	f005 fa35 	bl	800686c <SUBGRF_SetRfFrequency>
    SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8001402:	2016      	movs	r0, #22
 8001404:	f005 fd64 	bl	8006ed0 <SUBGRF_SetRfTxPower>

    ModulationParams_t modulationParams;
    modulationParams.PacketType = PACKET_TYPE_LORA;
 8001408:	2301      	movs	r3, #1
 800140a:	753b      	strb	r3, [r7, #20]
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 800140c:	230a      	movs	r3, #10
 800140e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 8001412:	2304      	movs	r3, #4
 8001414:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    modulationParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 8001418:	2304      	movs	r3, #4
 800141a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    SUBGRF_SetModulationParams(&modulationParams);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f005 fb59 	bl	8006ae0 <SUBGRF_SetModulationParams>

    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 800142e:	2301      	movs	r3, #1
 8001430:	703b      	strb	r3, [r7, #0]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8001432:	2308      	movs	r3, #8
 8001434:	81fb      	strh	r3, [r7, #14]
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001436:	2301      	movs	r3, #1
 8001438:	743b      	strb	r3, [r7, #16]
    packetParams.Params.LoRa.PayloadLength = PAYLOAD_SIZE;
 800143a:	2314      	movs	r3, #20
 800143c:	747b      	strb	r3, [r7, #17]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 800143e:	2301      	movs	r3, #1
 8001440:	74bb      	strb	r3, [r7, #18]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001442:	2300      	movs	r3, #0
 8001444:	74fb      	strb	r3, [r7, #19]
    SUBGRF_SetPacketParams(&packetParams);
 8001446:	463b      	mov	r3, r7
 8001448:	4618      	mov	r0, r3
 800144a:	f005 fc17 	bl	8006c7c <SUBGRF_SetPacketParams>

    // Configura as interrupções do rádio que queremos ouvir (TX_DONE e TIMEOUT)
    SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 800144e:	2300      	movs	r3, #0
 8001450:	2200      	movs	r2, #0
 8001452:	f240 2101 	movw	r1, #513	@ 0x201
 8001456:	f240 2001 	movw	r0, #513	@ 0x201
 800145a:	f005 f9ab 	bl	80067b4 <SUBGRF_SetDioIrqParams>
}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	@ 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	08001471 	.word	0x08001471
 800146c:	3689cac0 	.word	0x3689cac0

08001470 <RadioOnDioIrq>:

// Callback para os eventos de interrupção do rádio
void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq)
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001480:	d011      	beq.n	80014a6 <RadioOnDioIrq+0x36>
 8001482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001486:	dc18      	bgt.n	80014ba <RadioOnDioIrq+0x4a>
 8001488:	2b01      	cmp	r3, #1
 800148a:	d002      	beq.n	8001492 <RadioOnDioIrq+0x22>
 800148c:	2b02      	cmp	r3, #2
 800148e:	d016      	beq.n	80014be <RadioOnDioIrq+0x4e>
            printf("WARN: LoRa TX Timeout.\r\n");
            tx_done = true; // Libera para tentar de novo
            SUBGRF_SetStandby(STDBY_RC);
            break;
        default:
            break;
 8001490:	e013      	b.n	80014ba <RadioOnDioIrq+0x4a>
            printf("LoRa TX Done.\r\n");
 8001492:	480d      	ldr	r0, [pc, #52]	@ (80014c8 <RadioOnDioIrq+0x58>)
 8001494:	f006 fd9a 	bl	8007fcc <puts>
            tx_done = true; // Libera para a próxima transmissão
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <RadioOnDioIrq+0x5c>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
            SUBGRF_SetStandby(STDBY_RC); // Volta para standby para economizar energia
 800149e:	2000      	movs	r0, #0
 80014a0:	f005 f894 	bl	80065cc <SUBGRF_SetStandby>
            break;
 80014a4:	e00c      	b.n	80014c0 <RadioOnDioIrq+0x50>
            printf("WARN: LoRa TX Timeout.\r\n");
 80014a6:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <RadioOnDioIrq+0x60>)
 80014a8:	f006 fd90 	bl	8007fcc <puts>
            tx_done = true; // Libera para tentar de novo
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <RadioOnDioIrq+0x5c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
            SUBGRF_SetStandby(STDBY_RC);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f005 f88a 	bl	80065cc <SUBGRF_SetStandby>
            break;
 80014b8:	e002      	b.n	80014c0 <RadioOnDioIrq+0x50>
            break;
 80014ba:	bf00      	nop
 80014bc:	e000      	b.n	80014c0 <RadioOnDioIrq+0x50>
            break;
 80014be:	bf00      	nop
    }
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800b97c 	.word	0x0800b97c
 80014cc:	20000000 	.word	0x20000000
 80014d0:	0800b98c 	.word	0x0800b98c

080014d4 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t* data, int length) {
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    uint8_t checksum = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	e009      	b.n	80014fc <calculate_checksum+0x28>
        checksum ^= data[i];
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	4053      	eors	r3, r2
 80014f4:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	dbf1      	blt.n	80014e8 <calculate_checksum+0x14>
    }
    return checksum;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  printf("ERROR: Error_Handler chamado!\r\n");
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <Error_Handler+0x20>)
 800151a:	f006 fd57 	bl	8007fcc <puts>
  while (1)
  {
    BSP_LED_Toggle(LED_GREEN);
 800151e:	2001      	movs	r0, #1
 8001520:	f000 fc28 	bl	8001d74 <BSP_LED_Toggle>
    HAL_Delay(200); // LED piscando rapidamente indica erro
 8001524:	20c8      	movs	r0, #200	@ 0xc8
 8001526:	f000 fd33 	bl	8001f90 <HAL_Delay>
    BSP_LED_Toggle(LED_GREEN);
 800152a:	bf00      	nop
 800152c:	e7f7      	b.n	800151e <Error_Handler+0xe>
 800152e:	bf00      	nop
 8001530:	0800b9a4 	.word	0x0800b9a4

08001534 <LL_AHB2_GRP1_EnableClock>:
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001540:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001542:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4313      	orrs	r3, r2
 800154a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800154c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001550:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001558:	68fb      	ldr	r3, [r7, #12]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001570:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001580:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001588:	68fb      	ldr	r3, [r7, #12]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015b8:	68fb      	ldr	r3, [r7, #12]
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4313      	orrs	r3, r2
 80015da:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015e8:	68fb      	ldr	r3, [r7, #12]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_SUBGHZ_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsubghz: SUBGHZ handle pointer
  * @retval None
  */
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN SUBGHZ_MspInit 0 */

    /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff ffdb 	bl	80015c4 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2032      	movs	r0, #50	@ 0x32
 8001614:	f000 fdb7 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001618:	2032      	movs	r0, #50	@ 0x32
 800161a:	f000 fdce 	bl	80021ba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SUBGHZ_MspInit 1 */

    /* USER CODE END SUBGHZ_MspInit 1 */

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b096      	sub	sp, #88	@ 0x58
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2238      	movs	r2, #56	@ 0x38
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f006 fdc1 	bl	80081d0 <memset>
  if(huart->Instance==USART1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a9b      	ldr	r2, [pc, #620]	@ (80018c0 <HAL_UART_MspInit+0x298>)
 8001654:	4293      	cmp	r3, r2
 8001656:	f040 8094 	bne.w	8001782 <HAL_UART_MspInit+0x15a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800165a:	2301      	movs	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800165e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001662:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fce7 	bl	800403c <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001674:	f7ff ff4c 	bl	8001510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001678:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800167c:	f7ff ff8a 	bl	8001594 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	2002      	movs	r0, #2
 8001682:	f7ff ff57 	bl	8001534 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001686:	23c0      	movs	r3, #192	@ 0xc0
 8001688:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001696:	2307      	movs	r3, #7
 8001698:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800169e:	4619      	mov	r1, r3
 80016a0:	4888      	ldr	r0, [pc, #544]	@ (80018c4 <HAL_UART_MspInit+0x29c>)
 80016a2:	f001 f927 	bl	80028f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80016a6:	4b88      	ldr	r3, [pc, #544]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016a8:	4a88      	ldr	r2, [pc, #544]	@ (80018cc <HAL_UART_MspInit+0x2a4>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80016ac:	4b86      	ldr	r3, [pc, #536]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016ae:	2212      	movs	r2, #18
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b2:	4b85      	ldr	r3, [pc, #532]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016b4:	2210      	movs	r2, #16
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b83      	ldr	r3, [pc, #524]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b82      	ldr	r3, [pc, #520]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c4:	4b80      	ldr	r3, [pc, #512]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ca:	4b7f      	ldr	r3, [pc, #508]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80016d0:	4b7d      	ldr	r3, [pc, #500]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016d2:	2220      	movs	r2, #32
 80016d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016d6:	4b7c      	ldr	r3, [pc, #496]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016dc:	487a      	ldr	r0, [pc, #488]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016de:	f000 fd87 	bl	80021f0 <HAL_DMA_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80016e8:	f7ff ff12 	bl	8001510 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80016ec:	2110      	movs	r1, #16
 80016ee:	4876      	ldr	r0, [pc, #472]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 80016f0:	f001 f828 	bl	8002744 <HAL_DMA_ConfigChannelAttributes>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 80016fa:	f7ff ff09 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a71      	ldr	r2, [pc, #452]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 8001702:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001704:	4a70      	ldr	r2, [pc, #448]	@ (80018c8 <HAL_UART_MspInit+0x2a0>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800170a:	4b71      	ldr	r3, [pc, #452]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 800170c:	4a71      	ldr	r2, [pc, #452]	@ (80018d4 <HAL_UART_MspInit+0x2ac>)
 800170e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001710:	4b6f      	ldr	r3, [pc, #444]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 8001712:	2211      	movs	r2, #17
 8001714:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001716:	4b6e      	ldr	r3, [pc, #440]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171c:	4b6c      	ldr	r3, [pc, #432]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001722:	4b6b      	ldr	r3, [pc, #428]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001728:	4b69      	ldr	r3, [pc, #420]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172e:	4b68      	ldr	r3, [pc, #416]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001734:	4b66      	ldr	r3, [pc, #408]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 8001736:	2220      	movs	r2, #32
 8001738:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800173a:	4b65      	ldr	r3, [pc, #404]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001740:	4863      	ldr	r0, [pc, #396]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 8001742:	f000 fd55 	bl	80021f0 <HAL_DMA_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800174c:	f7ff fee0 	bl	8001510 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001750:	2110      	movs	r1, #16
 8001752:	485f      	ldr	r0, [pc, #380]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 8001754:	f000 fff6 	bl	8002744 <HAL_DMA_ConfigChannelAttributes>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800175e:	f7ff fed7 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a5a      	ldr	r2, [pc, #360]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 8001766:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800176a:	4a59      	ldr	r2, [pc, #356]	@ (80018d0 <HAL_UART_MspInit+0x2a8>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2024      	movs	r0, #36	@ 0x24
 8001776:	f000 fd06 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800177a:	2024      	movs	r0, #36	@ 0x24
 800177c:	f000 fd1d 	bl	80021ba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001780:	e099      	b.n	80018b6 <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART2)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a54      	ldr	r2, [pc, #336]	@ (80018d8 <HAL_UART_MspInit+0x2b0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	f040 8094 	bne.w	80018b6 <HAL_UART_MspInit+0x28e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800178e:	2302      	movs	r3, #2
 8001790:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001792:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001796:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	4618      	mov	r0, r3
 800179e:	f002 fc4d 	bl	800403c <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_UART_MspInit+0x184>
      Error_Handler();
 80017a8:	f7ff feb2 	bl	8001510 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80017b0:	f7ff fed8 	bl	8001564 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff febd 	bl	8001534 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80017ba:	230c      	movs	r3, #12
 80017bc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ca:	2307      	movs	r3, #7
 80017cc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d8:	f001 f88c 	bl	80028f4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80017dc:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 80017de:	4a40      	ldr	r2, [pc, #256]	@ (80018e0 <HAL_UART_MspInit+0x2b8>)
 80017e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80017e2:	4b3e      	ldr	r3, [pc, #248]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 80017e4:	2213      	movs	r2, #19
 80017e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e8:	4b3c      	ldr	r3, [pc, #240]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017f4:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 80017f6:	2280      	movs	r2, #128	@ 0x80
 80017f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017fa:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001800:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001806:	4b35      	ldr	r3, [pc, #212]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 8001808:	2220      	movs	r2, #32
 800180a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800180c:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001812:	4832      	ldr	r0, [pc, #200]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 8001814:	f000 fcec 	bl	80021f0 <HAL_DMA_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 800181e:	f7ff fe77 	bl	8001510 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001822:	2110      	movs	r1, #16
 8001824:	482d      	ldr	r0, [pc, #180]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 8001826:	f000 ff8d 	bl	8002744 <HAL_DMA_ConfigChannelAttributes>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8001830:	f7ff fe6e 	bl	8001510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 8001838:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800183c:	4a27      	ldr	r2, [pc, #156]	@ (80018dc <HAL_UART_MspInit+0x2b4>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001842:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 8001844:	4a28      	ldr	r2, [pc, #160]	@ (80018e8 <HAL_UART_MspInit+0x2c0>)
 8001846:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001848:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 800184a:	2214      	movs	r2, #20
 800184c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800184e:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 8001850:	2210      	movs	r2, #16
 8001852:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800185a:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 800185c:	2280      	movs	r2, #128	@ 0x80
 800185e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001860:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001866:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800186c:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 800186e:	2220      	movs	r2, #32
 8001870:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001878:	481a      	ldr	r0, [pc, #104]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 800187a:	f000 fcb9 	bl	80021f0 <HAL_DMA_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8001884:	f7ff fe44 	bl	8001510 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001888:	2110      	movs	r1, #16
 800188a:	4816      	ldr	r0, [pc, #88]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 800188c:	f000 ff5a 	bl	8002744 <HAL_DMA_ConfigChannelAttributes>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001896:	f7ff fe3b 	bl	8001510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 800189e:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018a0:	4a10      	ldr	r2, [pc, #64]	@ (80018e4 <HAL_UART_MspInit+0x2bc>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2025      	movs	r0, #37	@ 0x25
 80018ac:	f000 fc6b 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018b0:	2025      	movs	r0, #37	@ 0x25
 80018b2:	f000 fc82 	bl	80021ba <HAL_NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3758      	adds	r7, #88	@ 0x58
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40013800 	.word	0x40013800
 80018c4:	48000400 	.word	0x48000400
 80018c8:	200004b8 	.word	0x200004b8
 80018cc:	40020008 	.word	0x40020008
 80018d0:	20000458 	.word	0x20000458
 80018d4:	4002001c 	.word	0x4002001c
 80018d8:	40004400 	.word	0x40004400
 80018dc:	20000518 	.word	0x20000518
 80018e0:	40020030 	.word	0x40020030
 80018e4:	20000578 	.word	0x20000578
 80018e8:	40020044 	.word	0x40020044

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <NMI_Handler+0x4>

080018f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <MemManage_Handler+0x4>

08001904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <UsageFault_Handler+0x4>

08001914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 fb0c 	bl	8001f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <DMA1_Channel1_IRQHandler+0x10>)
 800194a:	f000 fe35 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200004b8 	.word	0x200004b8

08001958 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <DMA1_Channel2_IRQHandler+0x10>)
 800195e:	f000 fe2b 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000458 	.word	0x20000458

0800196c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <DMA1_Channel3_IRQHandler+0x10>)
 8001972:	f000 fe21 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000518 	.word	0x20000518

08001980 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <DMA1_Channel4_IRQHandler+0x10>)
 8001986:	f000 fe17 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000578 	.word	0x20000578

08001994 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <USART1_IRQHandler+0x10>)
 800199a:	f003 fa1f 	bl	8004ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000330 	.word	0x20000330

080019a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <USART2_IRQHandler+0x10>)
 80019ae:	f003 fa15 	bl	8004ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200003c4 	.word	0x200003c4

080019bc <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <SUBGHZ_Radio_IRQHandler+0x10>)
 80019c2:	f002 ff19 	bl	80047f8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000320 	.word	0x20000320

080019d0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_SUBGHZ_Init+0x20>)
 80019d6:	2208      	movs	r2, #8
 80019d8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_SUBGHZ_Init+0x20>)
 80019dc:	f002 fce2 	bl	80043a4 <HAL_SUBGHZ_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80019e6:	f7ff fd93 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000320 	.word	0x20000320

080019f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <_kill>:

int _kill(int pid, int sig)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0c:	f006 fc32 	bl	8008274 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2216      	movs	r2, #22
 8001a14:	601a      	str	r2, [r3, #0]
  return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_exit>:

void _exit (int status)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a2a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffe7 	bl	8001a02 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <_exit+0x12>

08001a38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e00a      	b.n	8001a60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a4a:	f3af 8000 	nop.w
 8001a4e:	4601      	mov	r1, r0
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	60ba      	str	r2, [r7, #8]
 8001a56:	b2ca      	uxtb	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbf0      	blt.n	8001a4a <_read+0x12>
  }

  return len;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a98:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
	...

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f006 fbb6 	bl	8008274 <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20010000 	.word	0x20010000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	2000032c 	.word	0x2000032c
 8001b3c:	20000730 	.word	0x20000730

08001b40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b52:	4a23      	ldr	r2, [pc, #140]	@ (8001be0 <MX_USART1_UART_Init+0x94>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b58:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001b5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b94:	4811      	ldr	r0, [pc, #68]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001b96:	f002 fffe 	bl	8004b96 <HAL_UART_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ba0:	f7ff fcb6 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001ba8:	f004 fb72 	bl	8006290 <HAL_UARTEx_SetTxFifoThreshold>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bb2:	f7ff fcad 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001bba:	f004 fba7 	bl	800630c <HAL_UARTEx_SetRxFifoThreshold>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc4:	f7ff fca4 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <MX_USART1_UART_Init+0x90>)
 8001bca:	f004 fb29 	bl	8006220 <HAL_UARTEx_DisableFifoMode>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd4:	f7ff fc9c 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000330 	.word	0x20000330
 8001be0:	40013800 	.word	0x40013800

08001be4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001bea:	4a23      	ldr	r2, [pc, #140]	@ (8001c78 <MX_USART2_UART_Init+0x94>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bee:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c20:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c26:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c2c:	4811      	ldr	r0, [pc, #68]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c2e:	f002 ffb2 	bl	8004b96 <HAL_UART_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c38:	f7ff fc6a 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c40:	f004 fb26 	bl	8006290 <HAL_UARTEx_SetTxFifoThreshold>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c4a:	f7ff fc61 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4808      	ldr	r0, [pc, #32]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c52:	f004 fb5b 	bl	800630c <HAL_UARTEx_SetRxFifoThreshold>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c5c:	f7ff fc58 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	@ (8001c74 <MX_USART2_UART_Init+0x90>)
 8001c62:	f004 fadd 	bl	8006220 <HAL_UARTEx_DisableFifoMode>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c6c:	f7ff fc50 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200003c4 	.word	0x200003c4
 8001c78:	40004400 	.word	0x40004400

08001c7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c7c:	480d      	ldr	r0, [pc, #52]	@ (8001cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c80:	f7ff ff5e 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c86:	490d      	ldr	r1, [pc, #52]	@ (8001cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c88:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc0 <LoopForever+0xe>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc8 <LoopForever+0x16>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001caa:	f006 fae9 	bl	8008280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cae:	f7ff fa41 	bl	8001134 <main>

08001cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb2:	e7fe      	b.n	8001cb2 <LoopForever>
  ldr   r0, =_estack
 8001cb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001cc0:	0800beec 	.word	0x0800beec
  ldr r2, =_sbss
 8001cc4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001cc8:	20000730 	.word	0x20000730

08001ccc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>

08001cce <LL_AHB2_GRP1_EnableClock>:
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
	...

08001d00 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f7ff ffd7 	bl	8001cce <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <BSP_LED_Init+0x6c>)
 8001d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d28:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <BSP_LED_Init+0x70>)
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fdd5 	bl	80028f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4a08      	ldr	r2, [pc, #32]	@ (8001d70 <BSP_LED_Init+0x70>)
 8001d4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <BSP_LED_Init+0x6c>)
 8001d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f000 ff29 	bl	8002bb4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	0800ba80 	.word	0x0800ba80
 8001d70:	20000008 	.word	0x20000008

08001d74 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	4a07      	ldr	r2, [pc, #28]	@ (8001da0 <BSP_LED_Toggle+0x2c>)
 8001d82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	4906      	ldr	r1, [pc, #24]	@ (8001da4 <BSP_LED_Toggle+0x30>)
 8001d8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f000 ff26 	bl	8002be2 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000008 	.word	0x20000008
 8001da4:	0800ba80 	.word	0x0800ba80

08001da8 <LL_AHB2_GRP1_EnableClock>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001db6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001dec:	2004      	movs	r0, #4
 8001dee:	f7ff ffdb 	bl	8001da8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001df2:	2310      	movs	r3, #16
 8001df4:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4812      	ldr	r0, [pc, #72]	@ (8001e50 <BSP_RADIO_Init+0x78>)
 8001e08:	f000 fd74 	bl	80028f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	480e      	ldr	r0, [pc, #56]	@ (8001e50 <BSP_RADIO_Init+0x78>)
 8001e16:	f000 fd6d 	bl	80028f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	480b      	ldr	r0, [pc, #44]	@ (8001e50 <BSP_RADIO_Init+0x78>)
 8001e24:	f000 fd66 	bl	80028f4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2120      	movs	r1, #32
 8001e2c:	4808      	ldr	r0, [pc, #32]	@ (8001e50 <BSP_RADIO_Init+0x78>)
 8001e2e:	f000 fec1 	bl	8002bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001e32:	2200      	movs	r2, #0
 8001e34:	2110      	movs	r1, #16
 8001e36:	4806      	ldr	r0, [pc, #24]	@ (8001e50 <BSP_RADIO_Init+0x78>)
 8001e38:	f000 febc 	bl	8002bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2108      	movs	r1, #8
 8001e40:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <BSP_RADIO_Init+0x78>)
 8001e42:	f000 feb7 	bl	8002bb4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	48000800 	.word	0x48000800

08001e54 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001e8e:	230f      	movs	r3, #15
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e001      	b.n	8001e98 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001e94:	2316      	movs	r3, #22
 8001e96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eae:	2003      	movs	r0, #3
 8001eb0:	f000 f95e 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001eb4:	f001 fee4 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4a09      	ldr	r2, [pc, #36]	@ (8001ee0 <HAL_Init+0x3c>)
 8001ebc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 f810 	bl	8001ee4 <HAL_InitTick>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	71fb      	strb	r3, [r7, #7]
 8001ece:	e001      	b.n	8001ed4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ed0:	f7ff fb90 	bl	80015f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <HAL_InitTick+0x6c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d024      	beq.n	8001f42 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ef8:	f001 fec2 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <HAL_InitTick+0x6c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4619      	mov	r1, r3
 8001f04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f08:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 f960 	bl	80021d6 <HAL_SYSTICK_Config>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10f      	bne.n	8001f3c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	d809      	bhi.n	8001f36 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f22:	2200      	movs	r2, #0
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f2a:	f000 f92c 	bl	8002186 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <HAL_InitTick+0x70>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e007      	b.n	8001f46 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	e004      	b.n	8001f46 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e001      	b.n	8001f46 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000018 	.word	0x20000018
 8001f54:	20000014 	.word	0x20000014

08001f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_IncTick+0x1c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <HAL_IncTick+0x20>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a03      	ldr	r2, [pc, #12]	@ (8001f78 <HAL_IncTick+0x20>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	20000018 	.word	0x20000018
 8001f78:	200005d8 	.word	0x200005d8

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b02      	ldr	r3, [pc, #8]	@ (8001f8c <HAL_GetTick+0x10>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	200005d8 	.word	0x200005d8

08001f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff fff0 	bl	8001f7c <HAL_GetTick>
 8001f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fa8:	d005      	beq.n	8001fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_Delay+0x44>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb6:	bf00      	nop
 8001fb8:	f7ff ffe0 	bl	8001f7c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d8f7      	bhi.n	8001fb8 <HAL_Delay+0x28>
  {
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000018 	.word	0x20000018

08001fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <__NVIC_SetPriorityGrouping+0x44>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200a:	4a04      	ldr	r2, [pc, #16]	@ (800201c <__NVIC_SetPriorityGrouping+0x44>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	60d3      	str	r3, [r2, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002024:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <__NVIC_GetPriorityGrouping+0x18>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	f003 0307 	and.w	r3, r3, #7
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db0b      	blt.n	8002066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	4906      	ldr	r1, [pc, #24]	@ (8002070 <__NVIC_EnableIRQ+0x34>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f202 	lsl.w	r2, r0, r2
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	@ (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	@ 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002150:	f7ff ff90 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff2d 	bl	8001fd8 <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff44 	bl	8002020 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff92 	bl	80020c8 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff61 	bl	8002074 <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff37 	bl	800203c <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa4 	bl	800212c <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e08e      	b.n	8002320 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <HAL_DMA_Init+0x138>)
 800220a:	429a      	cmp	r2, r3
 800220c:	d80f      	bhi.n	800222e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	4b45      	ldr	r3, [pc, #276]	@ (800232c <HAL_DMA_Init+0x13c>)
 8002216:	4413      	add	r3, r2
 8002218:	4a45      	ldr	r2, [pc, #276]	@ (8002330 <HAL_DMA_Init+0x140>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	009a      	lsls	r2, r3, #2
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a42      	ldr	r2, [pc, #264]	@ (8002334 <HAL_DMA_Init+0x144>)
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40
 800222c:	e00e      	b.n	800224c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	4b40      	ldr	r3, [pc, #256]	@ (8002338 <HAL_DMA_Init+0x148>)
 8002236:	4413      	add	r3, r2
 8002238:	4a3d      	ldr	r2, [pc, #244]	@ (8002330 <HAL_DMA_Init+0x140>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	009a      	lsls	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a3c      	ldr	r2, [pc, #240]	@ (800233c <HAL_DMA_Init+0x14c>)
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002266:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fabc 	bl	800281c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022ac:	d102      	bne.n	80022b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d010      	beq.n	80022f6 <HAL_DMA_Init+0x106>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d80c      	bhi.n	80022f6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fae5 	bl	80028ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	e008      	b.n	8002308 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40020407 	.word	0x40020407
 800232c:	bffdfff8 	.word	0xbffdfff8
 8002330:	cccccccd 	.word	0xcccccccd
 8002334:	40020000 	.word	0x40020000
 8002338:	bffdfbf8 	.word	0xbffdfbf8
 800233c:	40020400 	.word	0x40020400

08002340 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_DMA_Start_IT+0x20>
 800235c:	2302      	movs	r3, #2
 800235e:	e069      	b.n	8002434 <HAL_DMA_Start_IT+0xf4>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d155      	bne.n	8002420 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fa02 	bl	80027a2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 020e 	orr.w	r2, r2, #14
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e00f      	b.n	80023d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0204 	bic.w	r2, r2, #4
 80023c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 020a 	orr.w	r2, r2, #10
 80023d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800240c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e008      	b.n	8002432 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e04f      	b.n	80024ee <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d008      	beq.n	800246c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2204      	movs	r2, #4
 800245e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e040      	b.n	80024ee <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 020e 	bic.w	r2, r2, #14
 800247a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002486:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800248a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	f003 021c 	and.w	r2, r3, #28
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f202 	lsl.w	r2, r1, r2
 80024ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00c      	beq.n	80024dc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d005      	beq.n	800251c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2204      	movs	r2, #4
 8002514:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	e047      	b.n	80025ac <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 020e 	bic.w	r2, r2, #14
 800252a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002546:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002550:	f003 021c 	and.w	r2, r3, #28
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	2101      	movs	r1, #1
 800255a:	fa01 f202 	lsl.w	r2, r1, r2
 800255e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002568:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00c      	beq.n	800258c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002580:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800258a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
    }
  }
  return status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d4:	f003 031c 	and.w	r3, r3, #28
 80025d8:	2204      	movs	r2, #4
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d027      	beq.n	8002634 <HAL_DMA_IRQHandler+0x7c>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d022      	beq.n	8002634 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0204 	bic.w	r2, r2, #4
 800260a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002610:	f003 021c 	and.w	r2, r3, #28
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2104      	movs	r1, #4
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8081 	beq.w	800272c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002632:	e07b      	b.n	800272c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002638:	f003 031c 	and.w	r3, r3, #28
 800263c:	2202      	movs	r2, #2
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d03d      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x10c>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d038      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 020a 	bic.w	r2, r2, #10
 800266e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b2e      	ldr	r3, [pc, #184]	@ (8002738 <HAL_DMA_IRQHandler+0x180>)
 8002680:	429a      	cmp	r2, r3
 8002682:	d909      	bls.n	8002698 <HAL_DMA_IRQHandler+0xe0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002688:	f003 031c 	and.w	r3, r3, #28
 800268c:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <HAL_DMA_IRQHandler+0x184>)
 800268e:	2102      	movs	r1, #2
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	6053      	str	r3, [r2, #4]
 8002696:	e008      	b.n	80026aa <HAL_DMA_IRQHandler+0xf2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	f003 031c 	and.w	r3, r3, #28
 80026a0:	4a27      	ldr	r2, [pc, #156]	@ (8002740 <HAL_DMA_IRQHandler+0x188>)
 80026a2:	2102      	movs	r1, #2
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d038      	beq.n	800272c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80026c2:	e033      	b.n	800272c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c8:	f003 031c 	and.w	r3, r3, #28
 80026cc:	2208      	movs	r2, #8
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02a      	beq.n	800272e <HAL_DMA_IRQHandler+0x176>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d025      	beq.n	800272e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 020e 	bic.w	r2, r2, #14
 80026f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f003 021c 	and.w	r2, r3, #28
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800272c:	bf00      	nop
 800272e:	bf00      	nop
}
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40020080 	.word	0x40020080
 800273c:	40020400 	.word	0x40020400
 8002740:	40020000 	.word	0x40020000

08002744 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d103      	bne.n	8002760 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	72fb      	strb	r3, [r7, #11]
    return status;
 800275c:	7afb      	ldrb	r3, [r7, #11]
 800275e:	e01b      	b.n	8002798 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00d      	beq.n	800278e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e003      	b.n	800278e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800278c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	601a      	str	r2, [r3, #0]

  return status;
 8002796:	7afb      	ldrb	r3, [r7, #11]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027b8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027ca:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d0:	f003 021c 	and.w	r2, r3, #28
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d108      	bne.n	8002802 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002800:	e007      	b.n	8002812 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	60da      	str	r2, [r3, #12]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d813      	bhi.n	8002858 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800283c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3b08      	subs	r3, #8
 800284c:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e011      	b.n	800287c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	009a      	lsls	r2, r3, #2
 8002860:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002862:	4413      	add	r3, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	3b08      	subs	r3, #8
 8002870:	4a0b      	ldr	r2, [pc, #44]	@ (80028a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	3307      	adds	r3, #7
 800287a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002880:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2201      	movs	r2, #1
 800288a:	409a      	lsls	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40020407 	.word	0x40020407
 80028a0:	cccccccd 	.word	0xcccccccd
 80028a4:	4002081c 	.word	0x4002081c
 80028a8:	40020880 	.word	0x40020880

080028ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4b0a      	ldr	r3, [pc, #40]	@ (80028ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	461a      	mov	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a08      	ldr	r2, [pc, #32]	@ (80028f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80028d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2201      	movs	r2, #1
 80028dc:	409a      	lsls	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	1000823f 	.word	0x1000823f
 80028f0:	40020940 	.word	0x40020940

080028f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002902:	e140      	b.n	8002b86 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8132 	beq.w	8002b80 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d005      	beq.n	8002934 <HAL_GPIO_Init+0x40>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d130      	bne.n	8002996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800296a:	2201      	movs	r2, #1
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	f003 0201 	and.w	r2, r3, #1
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d017      	beq.n	80029d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d123      	bne.n	8002a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	08da      	lsrs	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3208      	adds	r2, #8
 80029e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	220f      	movs	r2, #15
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	08da      	lsrs	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3208      	adds	r2, #8
 8002a20:	6939      	ldr	r1, [r7, #16]
 8002a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	2203      	movs	r2, #3
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0203 	and.w	r2, r3, #3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 808c 	beq.w	8002b80 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a68:	4a4e      	ldr	r2, [pc, #312]	@ (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	2207      	movs	r2, #7
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a92:	d00d      	beq.n	8002ab0 <HAL_GPIO_Init+0x1bc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a44      	ldr	r2, [pc, #272]	@ (8002ba8 <HAL_GPIO_Init+0x2b4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <HAL_GPIO_Init+0x1b8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a43      	ldr	r2, [pc, #268]	@ (8002bac <HAL_GPIO_Init+0x2b8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_GPIO_Init+0x1b4>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e004      	b.n	8002ab2 <HAL_GPIO_Init+0x1be>
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0x1be>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_GPIO_Init+0x1be>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	f002 0203 	and.w	r2, r2, #3
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	4093      	lsls	r3, r2
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ac2:	4938      	ldr	r1, [pc, #224]	@ (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ad0:	4b37      	ldr	r3, [pc, #220]	@ (8002bb0 <HAL_GPIO_Init+0x2bc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002af4:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb0 <HAL_GPIO_Init+0x2bc>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <HAL_GPIO_Init+0x2bc>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b1e:	4a24      	ldr	r2, [pc, #144]	@ (8002bb0 <HAL_GPIO_Init+0x2bc>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002b24:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <HAL_GPIO_Init+0x2bc>)
 8002b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b2a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002b4a:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <HAL_GPIO_Init+0x2bc>)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002b52:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <HAL_GPIO_Init+0x2bc>)
 8002b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b58:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002b78:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <HAL_GPIO_Init+0x2bc>)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3301      	adds	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f47f aeb7 	bne.w	8002904 <HAL_GPIO_Init+0x10>
  }
}
 8002b96:	bf00      	nop
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	48000400 	.word	0x48000400
 8002bac:	48000800 	.word	0x48000800
 8002bb0:	58000800 	.word	0x58000800

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	041a      	lsls	r2, r3, #16
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	400b      	ands	r3, r1
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a03      	ldr	r2, [pc, #12]	@ (8002c2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c22:	6013      	str	r3, [r2, #0]
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	58000400 	.word	0x58000400

08002c30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c34:	4b03      	ldr	r3, [pc, #12]	@ (8002c44 <HAL_PWREx_GetVoltageRange+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	58000400 	.word	0x58000400

08002c48 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002c4c:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c58:	d101      	bne.n	8002c5e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	58000400 	.word	0x58000400

08002c6c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cb6:	d101      	bne.n	8002cbc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d10:	d101      	bne.n	8002d16 <LL_RCC_HSE_IsReady+0x18>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_RCC_HSE_IsReady+0x1a>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d6a:	d101      	bne.n	8002d70 <LL_RCC_HSI_IsReady+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_RCC_HSI_IsReady+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	061b      	lsls	r3, r3, #24
 8002d90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d101      	bne.n	8002dba <LL_RCC_LSE_IsReady+0x18>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_RCC_LSE_IsReady+0x1a>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d101      	bne.n	8002e1c <LL_RCC_LSI_IsReady+0x18>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <LL_RCC_LSI_IsReady+0x1a>
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6013      	str	r3, [r2, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6013      	str	r3, [r2, #0]
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d101      	bne.n	8002e74 <LL_RCC_MSI_IsReady+0x16>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_RCC_MSI_IsReady+0x18>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d101      	bne.n	8002e94 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f90:	f023 020f 	bic.w	r2, r3, #15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003016:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003082:	6013      	str	r3, [r2, #0]
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800309e:	d101      	bne.n	80030a4 <LL_RCC_PLL_IsReady+0x18>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <LL_RCC_PLL_IsReady+0x1a>
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0303 	and.w	r3, r3, #3
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311a:	d101      	bne.n	8003120 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800312e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003132:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800313e:	d101      	bne.n	8003144 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003156:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800315a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800315e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003162:	d101      	bne.n	8003168 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003184:	d101      	bne.n	800318a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031a6:	d101      	bne.n	80031ac <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e36f      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ca:	f7ff fea6 	bl	8002f1a <LL_RCC_GetSysClkSource>
 80031ce:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d0:	f7ff ff8f 	bl	80030f2 <LL_RCC_PLL_GetMainSource>
 80031d4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80c4 	beq.w	800336c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x3e>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d176      	bne.n	80032de <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d173      	bne.n	80032de <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e353      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_OscConfig+0x68>
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800321e:	e006      	b.n	800322e <HAL_RCC_OscConfig+0x76>
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800322e:	4293      	cmp	r3, r2
 8003230:	d222      	bcs.n	8003278 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fd5a 	bl	8003cf0 <RCC_SetFlashLatencyFromMSIRange>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e331      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003268:	4313      	orrs	r3, r2
 800326a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fe2b 	bl	8002ecc <LL_RCC_MSI_SetCalibTrimming>
 8003276:	e021      	b.n	80032bc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003282:	f043 0308 	orr.w	r3, r3, #8
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003296:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fe12 	bl	8002ecc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fd1f 	bl	8003cf0 <RCC_SetFlashLatencyFromMSIRange>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e2f6      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80032bc:	f000 fce0 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4aa7      	ldr	r2, [pc, #668]	@ (8003560 <HAL_RCC_OscConfig+0x3a8>)
 80032c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80032c6:	4ba7      	ldr	r3, [pc, #668]	@ (8003564 <HAL_RCC_OscConfig+0x3ac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fe0a 	bl	8001ee4 <HAL_InitTick>
 80032d0:	4603      	mov	r3, r0
 80032d2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d047      	beq.n	800336a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	e2e5      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02c      	beq.n	8003340 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032e6:	f7ff fd9e 	bl	8002e26 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032ea:	f7fe fe47 	bl	8001f7c <HAL_GetTick>
 80032ee:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032f2:	f7fe fe43 	bl	8001f7c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e2d2      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003304:	f7ff fdab 	bl	8002e5e <LL_RCC_MSI_IsReady>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f1      	beq.n	80032f2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003318:	f043 0308 	orr.w	r3, r3, #8
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fdc7 	bl	8002ecc <LL_RCC_MSI_SetCalibTrimming>
 800333e:	e015      	b.n	800336c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003340:	f7ff fd7f 	bl	8002e42 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003344:	f7fe fe1a 	bl	8001f7c <HAL_GetTick>
 8003348:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800334c:	f7fe fe16 	bl	8001f7c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e2a5      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800335e:	f7ff fd7e 	bl	8002e5e <LL_RCC_MSI_IsReady>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f1      	bne.n	800334c <HAL_RCC_OscConfig+0x194>
 8003368:	e000      	b.n	800336c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800336a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d058      	beq.n	800342a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b08      	cmp	r3, #8
 800337c:	d005      	beq.n	800338a <HAL_RCC_OscConfig+0x1d2>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d108      	bne.n	8003396 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d105      	bne.n	8003396 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d14b      	bne.n	800342a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e289      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b4:	d102      	bne.n	80033bc <HAL_RCC_OscConfig+0x204>
 80033b6:	f7ff fc86 	bl	8002cc6 <LL_RCC_HSE_Enable>
 80033ba:	e00d      	b.n	80033d8 <HAL_RCC_OscConfig+0x220>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80033c4:	d104      	bne.n	80033d0 <HAL_RCC_OscConfig+0x218>
 80033c6:	f7ff fc51 	bl	8002c6c <LL_RCC_HSE_EnableTcxo>
 80033ca:	f7ff fc7c 	bl	8002cc6 <LL_RCC_HSE_Enable>
 80033ce:	e003      	b.n	80033d8 <HAL_RCC_OscConfig+0x220>
 80033d0:	f7ff fc87 	bl	8002ce2 <LL_RCC_HSE_Disable>
 80033d4:	f7ff fc58 	bl	8002c88 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d012      	beq.n	8003406 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe fdcc 	bl	8001f7c <HAL_GetTick>
 80033e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fdc8 	bl	8001f7c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e257      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80033fa:	f7ff fc80 	bl	8002cfe <LL_RCC_HSE_IsReady>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f1      	beq.n	80033e8 <HAL_RCC_OscConfig+0x230>
 8003404:	e011      	b.n	800342a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fe fdb9 	bl	8001f7c <HAL_GetTick>
 800340a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340e:	f7fe fdb5 	bl	8001f7c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b64      	cmp	r3, #100	@ 0x64
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e244      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003420:	f7ff fc6d 	bl	8002cfe <LL_RCC_HSE_IsReady>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f1      	bne.n	800340e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d046      	beq.n	80034c4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d005      	beq.n	8003448 <HAL_RCC_OscConfig+0x290>
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d10e      	bne.n	8003460 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d10b      	bne.n	8003460 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e22a      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fc8e 	bl	8002d7a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800345e:	e031      	b.n	80034c4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d019      	beq.n	800349c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003468:	f7ff fc5a 	bl	8002d20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe fd86 	bl	8001f7c <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003474:	f7fe fd82 	bl	8001f7c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e211      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003486:	f7ff fc67 	bl	8002d58 <LL_RCC_HSI_IsReady>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f1      	beq.n	8003474 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fc70 	bl	8002d7a <LL_RCC_HSI_SetCalibTrimming>
 800349a:	e013      	b.n	80034c4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349c:	f7ff fc4e 	bl	8002d3c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe fd6c 	bl	8001f7c <HAL_GetTick>
 80034a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fe fd68 	bl	8001f7c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e1f7      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80034ba:	f7ff fc4d 	bl	8002d58 <LL_RCC_HSI_IsReady>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f1      	bne.n	80034a8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d06e      	beq.n	80035ae <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d056      	beq.n	8003586 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80034d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d031      	beq.n	8003554 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d006      	beq.n	8003508 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e1d0      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d013      	beq.n	800353a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003512:	f7ff fc67 	bl	8002de4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003516:	f7fe fd31 	bl	8001f7c <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351e:	f7fe fd2d 	bl	8001f7c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b11      	cmp	r3, #17
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e1bc      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003530:	f7ff fc68 	bl	8002e04 <LL_RCC_LSI_IsReady>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f1      	bne.n	800351e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003542:	f023 0210 	bic.w	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003554:	f7ff fc36 	bl	8002dc4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003558:	f7fe fd10 	bl	8001f7c <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800355e:	e00c      	b.n	800357a <HAL_RCC_OscConfig+0x3c2>
 8003560:	20000004 	.word	0x20000004
 8003564:	20000014 	.word	0x20000014
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003568:	f7fe fd08 	bl	8001f7c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b11      	cmp	r3, #17
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e197      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800357a:	f7ff fc43 	bl	8002e04 <LL_RCC_LSI_IsReady>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f1      	beq.n	8003568 <HAL_RCC_OscConfig+0x3b0>
 8003584:	e013      	b.n	80035ae <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003586:	f7ff fc2d 	bl	8002de4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fe fcf7 	bl	8001f7c <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7fe fcf3 	bl	8001f7c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b11      	cmp	r3, #17
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e182      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80035a4:	f7ff fc2e 	bl	8002e04 <LL_RCC_LSI_IsReady>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f1      	bne.n	8003592 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80d8 	beq.w	800376c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80035bc:	f7ff fb44 	bl	8002c48 <LL_PWR_IsEnabledBkUpAccess>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d113      	bne.n	80035ee <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80035c6:	f7ff fb25 	bl	8002c14 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ca:	f7fe fcd7 	bl	8001f7c <HAL_GetTick>
 80035ce:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d2:	f7fe fcd3 	bl	8001f7c <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e162      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80035e4:	f7ff fb30 	bl	8002c48 <LL_PWR_IsEnabledBkUpAccess>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f1      	beq.n	80035d2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d07b      	beq.n	80036ee <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b85      	cmp	r3, #133	@ 0x85
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2b05      	cmp	r3, #5
 8003604:	d109      	bne.n	800361a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7fe fcaf 	bl	8001f7c <HAL_GetTick>
 800361e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003628:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe fca1 	bl	8001f7c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e12e      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800364c:	f7ff fba9 	bl	8002da2 <LL_RCC_LSE_IsReady>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ef      	beq.n	8003636 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b81      	cmp	r3, #129	@ 0x81
 800365c:	d003      	beq.n	8003666 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b85      	cmp	r3, #133	@ 0x85
 8003664:	d121      	bne.n	80036aa <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fc89 	bl	8001f7c <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe fc7b 	bl	8001f7c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e108      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ec      	beq.n	8003682 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80036a8:	e060      	b.n	800376c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe fc67 	bl	8001f7c <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe fc59 	bl	8001f7c <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0e6      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ec      	bne.n	80036c6 <HAL_RCC_OscConfig+0x50e>
 80036ec:	e03e      	b.n	800376c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fe fc45 	bl	8001f7c <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe fc37 	bl	8001f7c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0c4      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ec      	bne.n	800370a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003730:	f7fe fc24 	bl	8001f7c <HAL_GetTick>
 8003734:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800374a:	e00a      	b.n	8003762 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fe fc16 	bl	8001f7c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e0a3      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003762:	f7ff fb1e 	bl	8002da2 <LL_RCC_LSE_IsReady>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ef      	bne.n	800374c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8099 	beq.w	80038a8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	d06c      	beq.n	8003856 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	2b02      	cmp	r3, #2
 8003782:	d14b      	bne.n	800381c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	f7ff fc74 	bl	8003070 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe fbf8 	bl	8001f7c <HAL_GetTick>
 800378c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003790:	f7fe fbf4 	bl	8001f7c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b0a      	cmp	r3, #10
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e083      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80037a2:	f7ff fc73 	bl	800308c <LL_RCC_PLL_IsReady>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f1      	bne.n	8003790 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	4b40      	ldr	r3, [pc, #256]	@ (80038b4 <HAL_RCC_OscConfig+0x6fc>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037c4:	0212      	lsls	r2, r2, #8
 80037c6:	4311      	orrs	r1, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037cc:	4311      	orrs	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80037d8:	430a      	orrs	r2, r1
 80037da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037de:	4313      	orrs	r3, r2
 80037e0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e2:	f7ff fc37 	bl	8003054 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fe fbc1 	bl	8001f7c <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fe fbbd 	bl	8001f7c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b0a      	cmp	r3, #10
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e04c      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003810:	f7ff fc3c 	bl	800308c <LL_RCC_PLL_IsReady>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f1      	beq.n	80037fe <HAL_RCC_OscConfig+0x646>
 800381a:	e045      	b.n	80038a8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381c:	f7ff fc28 	bl	8003070 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe fbac 	bl	8001f7c <HAL_GetTick>
 8003824:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003828:	f7fe fba8 	bl	8001f7c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b0a      	cmp	r3, #10
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e037      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800383a:	f7ff fc27 	bl	800308c <LL_RCC_PLL_IsReady>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f1      	bne.n	8003828 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800384e:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <HAL_RCC_OscConfig+0x700>)
 8003850:	4013      	ands	r3, r2
 8003852:	60cb      	str	r3, [r1, #12]
 8003854:	e028      	b.n	80038a8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e023      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f003 0203 	and.w	r2, r3, #3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	429a      	cmp	r2, r3
 8003876:	d115      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003882:	429a      	cmp	r2, r3
 8003884:	d10e      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	429a      	cmp	r2, r3
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	11c1808c 	.word	0x11c1808c
 80038b8:	eefefffc 	.word	0xeefefffc

080038bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e12c      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b98      	ldr	r3, [pc, #608]	@ (8003b34 <HAL_RCC_ClockConfig+0x278>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d91b      	bls.n	8003916 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b95      	ldr	r3, [pc, #596]	@ (8003b34 <HAL_RCC_ClockConfig+0x278>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 0207 	bic.w	r2, r3, #7
 80038e6:	4993      	ldr	r1, [pc, #588]	@ (8003b34 <HAL_RCC_ClockConfig+0x278>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ee:	f7fe fb45 	bl	8001f7c <HAL_GetTick>
 80038f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038f6:	f7fe fb41 	bl	8001f7c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e110      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003908:	4b8a      	ldr	r3, [pc, #552]	@ (8003b34 <HAL_RCC_ClockConfig+0x278>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d1ef      	bne.n	80038f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fb02 	bl	8002f30 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800392c:	f7fe fb26 	bl	8001f7c <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003934:	f7fe fb22 	bl	8001f7c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0f1      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003946:	f7ff fbdf 	bl	8003108 <LL_RCC_IsActiveFlag_HPRE>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f1      	beq.n	8003934 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d016      	beq.n	800398a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff faf8 	bl	8002f56 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003966:	f7fe fb09 	bl	8001f7c <HAL_GetTick>
 800396a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800396e:	f7fe fb05 	bl	8001f7c <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e0d4      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003980:	f7ff fbd3 	bl	800312a <LL_RCC_IsActiveFlag_C2HPRE>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f1      	beq.n	800396e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d016      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff faf0 	bl	8002f80 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039a0:	f7fe faec 	bl	8001f7c <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039a8:	f7fe fae8 	bl	8001f7c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0b7      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80039ba:	f7ff fbc8 	bl	800314e <LL_RCC_IsActiveFlag_SHDHPRE>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f1      	beq.n	80039a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d016      	beq.n	80039fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fae9 	bl	8002fac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039da:	f7fe facf 	bl	8001f7c <HAL_GetTick>
 80039de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039e2:	f7fe facb 	bl	8001f7c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e09a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039f4:	f7ff fbbd 	bl	8003172 <LL_RCC_IsActiveFlag_PPRE1>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f1      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d017      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fade 	bl	8002fd2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a16:	f7fe fab1 	bl	8001f7c <HAL_GetTick>
 8003a1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a1e:	f7fe faad 	bl	8001f7c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e07c      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a30:	f7ff fbb0 	bl	8003194 <LL_RCC_IsActiveFlag_PPRE2>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f1      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d043      	beq.n	8003ace <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d106      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003a4e:	f7ff f956 	bl	8002cfe <LL_RCC_HSE_IsReady>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d11e      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e066      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003a64:	f7ff fb12 	bl	800308c <LL_RCC_PLL_IsReady>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d113      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e05b      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a7a:	f7ff f9f0 	bl	8002e5e <LL_RCC_MSI_IsReady>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d108      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e050      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a88:	f7ff f966 	bl	8002d58 <LL_RCC_HSI_IsReady>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e049      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fa2a 	bl	8002ef4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe fa6c 	bl	8001f7c <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fe fa68 	bl	8001f7c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e035      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	f7ff fa2c 	bl	8002f1a <LL_RCC_GetSysClkSource>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d1ec      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ace:	4b19      	ldr	r3, [pc, #100]	@ (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d21b      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003adc:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 0207 	bic.w	r2, r3, #7
 8003ae4:	4913      	ldr	r1, [pc, #76]	@ (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aec:	f7fe fa46 	bl	8001f7c <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003af4:	f7fe fa42 	bl	8001f7c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e011      	b.n	8003b2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1ef      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b14:	f000 f8b4 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4a07      	ldr	r2, [pc, #28]	@ (8003b38 <HAL_RCC_ClockConfig+0x27c>)
 8003b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003b1e:	4b07      	ldr	r3, [pc, #28]	@ (8003b3c <HAL_RCC_ClockConfig+0x280>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe f9de 	bl	8001ee4 <HAL_InitTick>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	58004000 	.word	0x58004000
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	20000014 	.word	0x20000014

08003b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4e:	f7ff f9e4 	bl	8002f1a <LL_RCC_GetSysClkSource>
 8003b52:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b54:	f7ff facd 	bl	80030f2 <LL_RCC_PLL_GetMainSource>
 8003b58:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x2c>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d139      	bne.n	8003bda <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d136      	bne.n	8003bda <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003b6c:	f7ff f987 	bl	8002e7e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d115      	bne.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x62>
 8003b76:	f7ff f982 	bl	8002e7e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x4e>
 8003b80:	f7ff f98d 	bl	8002e9e <LL_RCC_MSI_GetRange>
 8003b84:	4603      	mov	r3, r0
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	e005      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x5a>
 8003b8e:	f7ff f991 	bl	8002eb4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003b92:	4603      	mov	r3, r0
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	4a36      	ldr	r2, [pc, #216]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x134>)
 8003b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba0:	e014      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x8c>
 8003ba2:	f7ff f96c 	bl	8002e7e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d106      	bne.n	8003bba <HAL_RCC_GetSysClockFreq+0x7a>
 8003bac:	f7ff f977 	bl	8002e9e <LL_RCC_MSI_GetRange>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	e005      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x86>
 8003bba:	f7ff f97b 	bl	8002eb4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x134>)
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d115      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bd8:	e012      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003be0:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x138>)
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	e00c      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d109      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003bec:	f7ff f85a 	bl	8002ca4 <LL_RCC_HSE_IsEnabledDiv2>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003bf6:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x138>)
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e001      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003bfe:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c00:	f7ff f98b 	bl	8002f1a <LL_RCC_GetSysClkSource>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d12f      	bne.n	8003c6a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003c0a:	f7ff fa72 	bl	80030f2 <LL_RCC_PLL_GetMainSource>
 8003c0e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0xde>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0xe4>
 8003c1c:	e00d      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003c1e:	4b16      	ldr	r3, [pc, #88]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c20:	60fb      	str	r3, [r7, #12]
        break;
 8003c22:	e00d      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c24:	f7ff f83e 	bl	8002ca4 <LL_RCC_HSE_IsEnabledDiv2>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c30:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003c32:	e005      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003c36:	60fb      	str	r3, [r7, #12]
        break;
 8003c38:	e002      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	60fb      	str	r3, [r7, #12]
        break;
 8003c3e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003c40:	f7ff fa35 	bl	80030ae <LL_RCC_PLL_GetN>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	fb03 f402 	mul.w	r4, r3, r2
 8003c4c:	f7ff fa46 	bl	80030dc <LL_RCC_PLL_GetDivider>
 8003c50:	4603      	mov	r3, r0
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	3301      	adds	r3, #1
 8003c56:	fbb4 f4f3 	udiv	r4, r4, r3
 8003c5a:	f7ff fa34 	bl	80030c6 <LL_RCC_PLL_GetR>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	0f5b      	lsrs	r3, r3, #29
 8003c62:	3301      	adds	r3, #1
 8003c64:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c68:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003c6a:	697b      	ldr	r3, [r7, #20]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd90      	pop	{r4, r7, pc}
 8003c74:	0800ba40 	.word	0x0800ba40
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	01e84800 	.word	0x01e84800

08003c80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c80:	b598      	push	{r3, r4, r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003c84:	f7ff ff5c 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8003c88:	4604      	mov	r4, r0
 8003c8a:	f7ff f9b5 	bl	8002ff8 <LL_RCC_GetAHBPrescaler>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	4a03      	ldr	r2, [pc, #12]	@ (8003ca4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd98      	pop	{r3, r4, r7, pc}
 8003ca4:	0800b9e0 	.word	0x0800b9e0

08003ca8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca8:	b598      	push	{r3, r4, r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003cac:	f7ff ffe8 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	f7ff f9b9 	bl	8003028 <LL_RCC_GetAPB1Prescaler>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	4a03      	ldr	r2, [pc, #12]	@ (8003cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd98      	pop	{r3, r4, r7, pc}
 8003cc8:	0800ba20 	.word	0x0800ba20

08003ccc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ccc:	b598      	push	{r3, r4, r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003cd0:	f7ff ffd6 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	f7ff f9b2 	bl	800303e <LL_RCC_GetAPB2Prescaler>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	0adb      	lsrs	r3, r3, #11
 8003cde:	4a03      	ldr	r2, [pc, #12]	@ (8003cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd98      	pop	{r3, r4, r7, pc}
 8003cec:	0800ba20 	.word	0x0800ba20

08003cf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	4a10      	ldr	r2, [pc, #64]	@ (8003d44 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d06:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003d08:	f7ff f981 	bl	800300e <LL_RCC_GetAHB3Prescaler>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	4a0c      	ldr	r2, [pc, #48]	@ (8003d48 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0c9c      	lsrs	r4, r3, #18
 8003d2c:	f7fe ff80 	bl	8002c30 <HAL_PWREx_GetVoltageRange>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4619      	mov	r1, r3
 8003d34:	4620      	mov	r0, r4
 8003d36:	f000 f80b 	bl	8003d50 <RCC_SetFlashLatency>
 8003d3a:	4603      	mov	r3, r0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd90      	pop	{r4, r7, pc}
 8003d44:	0800ba40 	.word	0x0800ba40
 8003d48:	0800b9e0 	.word	0x0800b9e0
 8003d4c:	431bde83 	.word	0x431bde83

08003d50 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08e      	sub	sp, #56	@ 0x38
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003d5a:	4a3a      	ldr	r2, [pc, #232]	@ (8003e44 <RCC_SetFlashLatency+0xf4>)
 8003d5c:	f107 0320 	add.w	r3, r7, #32
 8003d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d64:	6018      	str	r0, [r3, #0]
 8003d66:	3304      	adds	r3, #4
 8003d68:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003d6a:	4a37      	ldr	r2, [pc, #220]	@ (8003e48 <RCC_SetFlashLatency+0xf8>)
 8003d6c:	f107 0318 	add.w	r3, r7, #24
 8003d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d74:	6018      	str	r0, [r3, #0]
 8003d76:	3304      	adds	r3, #4
 8003d78:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003d7a:	4a34      	ldr	r2, [pc, #208]	@ (8003e4c <RCC_SetFlashLatency+0xfc>)
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003d86:	2300      	movs	r3, #0
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d90:	d11b      	bne.n	8003dca <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d96:	e014      	b.n	8003dc2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	3338      	adds	r3, #56	@ 0x38
 8003d9e:	443b      	add	r3, r7
 8003da0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d807      	bhi.n	8003dbc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	3338      	adds	r3, #56	@ 0x38
 8003db2:	443b      	add	r3, r7
 8003db4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003db8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dba:	e021      	b.n	8003e00 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d9e7      	bls.n	8003d98 <RCC_SetFlashLatency+0x48>
 8003dc8:	e01a      	b.n	8003e00 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dce:	e014      	b.n	8003dfa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	3338      	adds	r3, #56	@ 0x38
 8003dd6:	443b      	add	r3, r7
 8003dd8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d807      	bhi.n	8003df4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	3338      	adds	r3, #56	@ 0x38
 8003dea:	443b      	add	r3, r7
 8003dec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003df0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003df2:	e005      	b.n	8003e00 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df6:	3301      	adds	r3, #1
 8003df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d9e7      	bls.n	8003dd0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e00:	4b13      	ldr	r3, [pc, #76]	@ (8003e50 <RCC_SetFlashLatency+0x100>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 0207 	bic.w	r2, r3, #7
 8003e08:	4911      	ldr	r1, [pc, #68]	@ (8003e50 <RCC_SetFlashLatency+0x100>)
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e10:	f7fe f8b4 	bl	8001f7c <HAL_GetTick>
 8003e14:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e16:	e008      	b.n	8003e2a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e18:	f7fe f8b0 	bl	8001f7c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e007      	b.n	8003e3a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e2a:	4b09      	ldr	r3, [pc, #36]	@ (8003e50 <RCC_SetFlashLatency+0x100>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1ef      	bne.n	8003e18 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3738      	adds	r7, #56	@ 0x38
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	0800b9c4 	.word	0x0800b9c4
 8003e48:	0800b9cc 	.word	0x0800b9cc
 8003e4c:	0800b9d4 	.word	0x0800b9d4
 8003e50:	58004000 	.word	0x58004000

08003e54 <LL_RCC_LSE_IsReady>:
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d101      	bne.n	8003e6c <LL_RCC_LSE_IsReady+0x18>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <LL_RCC_LSE_IsReady+0x1a>
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <LL_RCC_SetUSARTClockSource>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e82:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	401a      	ands	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <LL_RCC_SetI2SClockSource>:
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <LL_RCC_SetLPUARTClockSource>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ee4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_SetI2CClockSource>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f06:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f12:	43db      	mvns	r3, r3
 8003f14:	401a      	ands	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <LL_RCC_SetLPTIMClockSource>:
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <LL_RCC_SetRNGClockSource>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_SetADCClockSource>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <LL_RCC_SetRTCClockSource>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <LL_RCC_GetRTCClockSource>:
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_ForceBackupDomainReset>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800400a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <LL_RCC_ReleaseBackupDomainReset>:
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800402a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
	...

0800403c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004048:	2300      	movs	r3, #0
 800404a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800404c:	2300      	movs	r3, #0
 800404e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d058      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800405c:	f7fe fdda 	bl	8002c14 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004060:	f7fd ff8c 	bl	8001f7c <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004066:	e009      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004068:	f7fd ff88 	bl	8001f7c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d902      	bls.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	74fb      	strb	r3, [r7, #19]
        break;
 800407a:	e006      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800407c:	4b7b      	ldr	r3, [pc, #492]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004088:	d1ee      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800408a:	7cfb      	ldrb	r3, [r7, #19]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d13c      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004090:	f7ff ffa7 	bl	8003fe2 <LL_RCC_GetRTCClockSource>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409a:	429a      	cmp	r2, r3
 800409c:	d00f      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040aa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ac:	f7ff ffa5 	bl	8003ffa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b0:	f7ff ffb3 	bl	800401a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d014      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fd ff58 	bl	8001f7c <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80040ce:	e00b      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d0:	f7fd ff54 	bl	8001f7c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d902      	bls.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	74fb      	strb	r3, [r7, #19]
            break;
 80040e6:	e004      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80040e8:	f7ff feb4 	bl	8003e54 <LL_RCC_LSE_IsReady>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d1ee      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff5b 	bl	8003fb8 <LL_RCC_SetRTCClockSource>
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	74bb      	strb	r3, [r7, #18]
 8004108:	e001      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fea9 	bl	8003e76 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d004      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fe9e 	bl	8003e76 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fec0 	bl	8003ed0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fee6 	bl	8003f32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416e:	2b00      	cmp	r3, #0
 8004170:	d004      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fedb 	bl	8003f32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fed0 	bl	8003f32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fea9 	bl	8003efa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fe9e 	bl	8003efa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d004      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fe93 	bl	8003efa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d011      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fe5e 	bl	8003ea6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f2:	d107      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004202:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d010      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fea5 	bl	8003f64 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800422c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004230:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d011      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fea3 	bl	8003f8e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004250:	d107      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004262:	7cbb      	ldrb	r3, [r7, #18]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	58000400 	.word	0x58000400

08004270 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004278:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004280:	4904      	ldr	r1, [pc, #16]	@ (8004294 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	58000400 	.word	0x58000400

08004298 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800429c:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a2:	4a04      	ldr	r2, [pc, #16]	@ (80042b4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80042a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	58000400 	.word	0x58000400

080042b8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80042bc:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c2:	4a04      	ldr	r2, [pc, #16]	@ (80042d4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80042c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	58000400 	.word	0x58000400

080042d8 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80042dc:	4b03      	ldr	r3, [pc, #12]	@ (80042ec <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80042de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042e2:	619a      	str	r2, [r3, #24]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	58000400 	.word	0x58000400

080042f0 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80042f4:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d101      	bne.n	8004304 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	58000400 	.word	0x58000400

08004314 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d101      	bne.n	8004328 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	58000400 	.word	0x58000400

08004338 <LL_RCC_RF_DisableReset>:
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004344:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004348:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800434c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <LL_RCC_IsRFUnderReset>:
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800435c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800436c:	d101      	bne.n	8004372 <LL_RCC_IsRFUnderReset+0x1a>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <LL_RCC_IsRFUnderReset+0x1c>
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004384:	4b06      	ldr	r3, [pc, #24]	@ (80043a0 <LL_EXTI_EnableIT_32_63+0x24>)
 8004386:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800438a:	4905      	ldr	r1, [pc, #20]	@ (80043a0 <LL_EXTI_EnableIT_32_63+0x24>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	58000800 	.word	0x58000800

080043a4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
    return status;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	e052      	b.n	8004460 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	799b      	ldrb	r3, [r3, #6]
 80043c2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80043c4:	7bbb      	ldrb	r3, [r7, #14]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_SUBGHZ_Init+0x2c>
 80043ca:	7bbb      	ldrb	r3, [r7, #14]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d109      	bne.n	80043e4 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd f912 	bl	8001600 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80043dc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80043e0:	f7ff ffcc 	bl	800437c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80043e4:	7bbb      	ldrb	r3, [r7, #14]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d126      	bne.n	8004438 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80043f0:	f7ff ffa2 	bl	8004338 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80043f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <HAL_SUBGHZ_Init+0xc4>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	0cdb      	lsrs	r3, r3, #19
 8004402:	2264      	movs	r2, #100	@ 0x64
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	609a      	str	r2, [r3, #8]
        break;
 800441a:	e007      	b.n	800442c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	3b01      	subs	r3, #1
 8004420:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004422:	f7ff ff99 	bl	8004358 <LL_RCC_IsRFUnderReset>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ee      	bne.n	800440a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800442c:	f7ff ff34 	bl	8004298 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004430:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004434:	f7ff ff1c 	bl	8004270 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004438:	f7ff ff4e 	bl	80042d8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fa64 	bl	8004914 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	719a      	strb	r2, [r3, #6]

  return status;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000004 	.word	0x20000004

0800446c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	461a      	mov	r2, r3
 8004478:	460b      	mov	r3, r1
 800447a:	817b      	strh	r3, [r7, #10]
 800447c:	4613      	mov	r3, r2
 800447e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	799b      	ldrb	r3, [r3, #6]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d14a      	bne.n	8004520 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	795b      	ldrb	r3, [r3, #5]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004492:	2302      	movs	r3, #2
 8004494:	e045      	b.n	8004522 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2202      	movs	r2, #2
 80044a0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fb04 	bl	8004ab0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044a8:	f7ff ff06 	bl	80042b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80044ac:	210d      	movs	r1, #13
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fa50 	bl	8004954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80044b4:	897b      	ldrh	r3, [r7, #10]
 80044b6:	0a1b      	lsrs	r3, r3, #8
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	4619      	mov	r1, r3
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fa48 	bl	8004954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80044c4:	897b      	ldrh	r3, [r7, #10]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	4619      	mov	r1, r3
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fa42 	bl	8004954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	82bb      	strh	r3, [r7, #20]
 80044d4:	e00a      	b.n	80044ec <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80044d6:	8abb      	ldrh	r3, [r7, #20]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	4413      	add	r3, r2
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	4619      	mov	r1, r3
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fa37 	bl	8004954 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80044e6:	8abb      	ldrh	r3, [r7, #20]
 80044e8:	3301      	adds	r3, #1
 80044ea:	82bb      	strh	r3, [r7, #20]
 80044ec:	8aba      	ldrh	r2, [r7, #20]
 80044ee:	893b      	ldrh	r3, [r7, #8]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d3f0      	bcc.n	80044d6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044f4:	f7ff fed0 	bl	8004298 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fafd 	bl	8004af8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
 800450a:	e001      	b.n	8004510 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	715a      	strb	r2, [r3, #5]

    return status;
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	e000      	b.n	8004522 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004520:	2302      	movs	r3, #2
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b088      	sub	sp, #32
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	461a      	mov	r2, r3
 8004536:	460b      	mov	r3, r1
 8004538:	817b      	strh	r3, [r7, #10]
 800453a:	4613      	mov	r3, r2
 800453c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	799b      	ldrb	r3, [r3, #6]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d14a      	bne.n	80045e2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	795b      	ldrb	r3, [r3, #5]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004554:	2302      	movs	r3, #2
 8004556:	e045      	b.n	80045e4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 faa6 	bl	8004ab0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004564:	f7ff fea8 	bl	80042b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004568:	211d      	movs	r1, #29
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f9f2 	bl	8004954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004570:	897b      	ldrh	r3, [r7, #10]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	b29b      	uxth	r3, r3
 8004576:	b2db      	uxtb	r3, r3
 8004578:	4619      	mov	r1, r3
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f9ea 	bl	8004954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004580:	897b      	ldrh	r3, [r7, #10]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	4619      	mov	r1, r3
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f9e4 	bl	8004954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800458c:	2100      	movs	r1, #0
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f9e0 	bl	8004954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004594:	2300      	movs	r3, #0
 8004596:	82fb      	strh	r3, [r7, #22]
 8004598:	e009      	b.n	80045ae <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800459a:	69b9      	ldr	r1, [r7, #24]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fa2f 	bl	8004a00 <SUBGHZSPI_Receive>
      pData++;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80045a8:	8afb      	ldrh	r3, [r7, #22]
 80045aa:	3301      	adds	r3, #1
 80045ac:	82fb      	strh	r3, [r7, #22]
 80045ae:	8afa      	ldrh	r2, [r7, #22]
 80045b0:	893b      	ldrh	r3, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d3f1      	bcc.n	800459a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80045b6:	f7ff fe6f 	bl	8004298 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fa9c 	bl	8004af8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e001      	b.n	80045d2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	715a      	strb	r2, [r3, #5]

    return status;
 80045de:	7ffb      	ldrb	r3, [r7, #31]
 80045e0:	e000      	b.n	80045e4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	461a      	mov	r2, r3
 80045f8:	460b      	mov	r3, r1
 80045fa:	72fb      	strb	r3, [r7, #11]
 80045fc:	4613      	mov	r3, r2
 80045fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	799b      	ldrb	r3, [r3, #6]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	d14a      	bne.n	80046a0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	795b      	ldrb	r3, [r3, #5]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004612:	2302      	movs	r3, #2
 8004614:	e045      	b.n	80046a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fa47 	bl	8004ab0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004622:	7afb      	ldrb	r3, [r7, #11]
 8004624:	2b84      	cmp	r3, #132	@ 0x84
 8004626:	d002      	beq.n	800462e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	2b94      	cmp	r3, #148	@ 0x94
 800462c:	d103      	bne.n	8004636 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	711a      	strb	r2, [r3, #4]
 8004634:	e002      	b.n	800463c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800463c:	f7ff fe3c 	bl	80042b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004640:	7afb      	ldrb	r3, [r7, #11]
 8004642:	4619      	mov	r1, r3
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f985 	bl	8004954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	82bb      	strh	r3, [r7, #20]
 800464e:	e00a      	b.n	8004666 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004650:	8abb      	ldrh	r3, [r7, #20]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f97a 	bl	8004954 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004660:	8abb      	ldrh	r3, [r7, #20]
 8004662:	3301      	adds	r3, #1
 8004664:	82bb      	strh	r3, [r7, #20]
 8004666:	8aba      	ldrh	r2, [r7, #20]
 8004668:	893b      	ldrh	r3, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d3f0      	bcc.n	8004650 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800466e:	f7ff fe13 	bl	8004298 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004672:	7afb      	ldrb	r3, [r7, #11]
 8004674:	2b84      	cmp	r3, #132	@ 0x84
 8004676:	d002      	beq.n	800467e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fa3d 	bl	8004af8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
 800468a:	e001      	b.n	8004690 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2201      	movs	r2, #1
 8004694:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	715a      	strb	r2, [r3, #5]

    return status;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	e000      	b.n	80046a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b088      	sub	sp, #32
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	461a      	mov	r2, r3
 80046b6:	460b      	mov	r3, r1
 80046b8:	72fb      	strb	r3, [r7, #11]
 80046ba:	4613      	mov	r3, r2
 80046bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	799b      	ldrb	r3, [r3, #6]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d13d      	bne.n	8004748 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	795b      	ldrb	r3, [r3, #5]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e038      	b.n	800474a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f9e6 	bl	8004ab0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046e4:	f7ff fde8 	bl	80042b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80046e8:	7afb      	ldrb	r3, [r7, #11]
 80046ea:	4619      	mov	r1, r3
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f931 	bl	8004954 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80046f2:	2100      	movs	r1, #0
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f92d 	bl	8004954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	82fb      	strh	r3, [r7, #22]
 80046fe:	e009      	b.n	8004714 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004700:	69b9      	ldr	r1, [r7, #24]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f97c 	bl	8004a00 <SUBGHZSPI_Receive>
      pData++;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	3301      	adds	r3, #1
 800470c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800470e:	8afb      	ldrh	r3, [r7, #22]
 8004710:	3301      	adds	r3, #1
 8004712:	82fb      	strh	r3, [r7, #22]
 8004714:	8afa      	ldrh	r2, [r7, #22]
 8004716:	893b      	ldrh	r3, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3f1      	bcc.n	8004700 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800471c:	f7ff fdbc 	bl	8004298 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f9e9 	bl	8004af8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e001      	b.n	8004738 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	715a      	strb	r2, [r3, #5]

    return status;
 8004744:	7ffb      	ldrb	r3, [r7, #31]
 8004746:	e000      	b.n	800474a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	461a      	mov	r2, r3
 800475e:	460b      	mov	r3, r1
 8004760:	72fb      	strb	r3, [r7, #11]
 8004762:	4613      	mov	r3, r2
 8004764:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	799b      	ldrb	r3, [r3, #6]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d13e      	bne.n	80047ee <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	795b      	ldrb	r3, [r3, #5]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004778:	2302      	movs	r3, #2
 800477a:	e039      	b.n	80047f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f994 	bl	8004ab0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004788:	f7ff fd96 	bl	80042b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800478c:	210e      	movs	r1, #14
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f8e0 	bl	8004954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004794:	7afb      	ldrb	r3, [r7, #11]
 8004796:	4619      	mov	r1, r3
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f8db 	bl	8004954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800479e:	2300      	movs	r3, #0
 80047a0:	82bb      	strh	r3, [r7, #20]
 80047a2:	e00a      	b.n	80047ba <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80047a4:	8abb      	ldrh	r3, [r7, #20]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4413      	add	r3, r2
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	4619      	mov	r1, r3
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f8d0 	bl	8004954 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80047b4:	8abb      	ldrh	r3, [r7, #20]
 80047b6:	3301      	adds	r3, #1
 80047b8:	82bb      	strh	r3, [r7, #20]
 80047ba:	8aba      	ldrh	r2, [r7, #20]
 80047bc:	893b      	ldrh	r3, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d3f0      	bcc.n	80047a4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047c2:	f7ff fd69 	bl	8004298 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f996 	bl	8004af8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	75fb      	strb	r3, [r7, #23]
 80047d8:	e001      	b.n	80047de <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	715a      	strb	r2, [r3, #5]

    return status;
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	e000      	b.n	80047f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
  }
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004800:	2300      	movs	r3, #0
 8004802:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004804:	f107 020c 	add.w	r2, r7, #12
 8004808:	2302      	movs	r3, #2
 800480a:	2112      	movs	r1, #18
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff4c 	bl	80046aa <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004812:	7b3b      	ldrb	r3, [r7, #12]
 8004814:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004816:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	b21a      	sxth	r2, r3
 800481e:	7b7b      	ldrb	r3, [r7, #13]
 8004820:	b21b      	sxth	r3, r3
 8004822:	4313      	orrs	r3, r2
 8004824:	b21b      	sxth	r3, r3
 8004826:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004828:	f107 020c 	add.w	r2, r7, #12
 800482c:	2302      	movs	r3, #2
 800482e:	2102      	movs	r1, #2
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fedb 	bl	80045ec <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004836:	89fb      	ldrh	r3, [r7, #14]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f002 fb79 	bl	8006f38 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004846:	89fb      	ldrh	r3, [r7, #14]
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004852:	89fb      	ldrh	r3, [r7, #14]
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f002 fb78 	bl	8006f54 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004864:	89fb      	ldrh	r3, [r7, #14]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f002 fbc7 	bl	8007004 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004876:	89fb      	ldrh	r3, [r7, #14]
 8004878:	08db      	lsrs	r3, r3, #3
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f002 fbcc 	bl	8007020 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004888:	89fb      	ldrh	r3, [r7, #14]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f002 fbd1 	bl	800703c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f002 fb9e 	bl	8006fe8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80048ac:	89fb      	ldrh	r3, [r7, #14]
 80048ae:	099b      	lsrs	r3, r3, #6
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f002 fb59 	bl	8006f70 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80048be:	89fb      	ldrh	r3, [r7, #14]
 80048c0:	09db      	lsrs	r3, r3, #7
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00e      	beq.n	80048e8 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80048ca:	89fb      	ldrh	r3, [r7, #14]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80048d6:	2101      	movs	r1, #1
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f002 fb57 	bl	8006f8c <HAL_SUBGHZ_CADStatusCallback>
 80048de:	e003      	b.n	80048e8 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80048e0:	2100      	movs	r1, #0
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f002 fb52 	bl	8006f8c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80048e8:	89fb      	ldrh	r3, [r7, #14]
 80048ea:	0a5b      	lsrs	r3, r3, #9
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f002 fb67 	bl	8006fc8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80048fa:	89fb      	ldrh	r3, [r7, #14]
 80048fc:	0b9b      	lsrs	r3, r3, #14
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f002 fba6 	bl	8007058 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800491c:	4b0c      	ldr	r3, [pc, #48]	@ (8004950 <SUBGHZSPI_Init+0x3c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0b      	ldr	r2, [pc, #44]	@ (8004950 <SUBGHZSPI_Init+0x3c>)
 8004922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004926:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004928:	4a09      	ldr	r2, [pc, #36]	@ (8004950 <SUBGHZSPI_Init+0x3c>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004930:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004932:	4b07      	ldr	r3, [pc, #28]	@ (8004950 <SUBGHZSPI_Init+0x3c>)
 8004934:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004938:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800493a:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <SUBGHZSPI_Init+0x3c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a04      	ldr	r2, [pc, #16]	@ (8004950 <SUBGHZSPI_Init+0x3c>)
 8004940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004944:	6013      	str	r3, [r2, #0]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr
 8004950:	58010000 	.word	0x58010000

08004954 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004964:	4b23      	ldr	r3, [pc, #140]	@ (80049f4 <SUBGHZSPI_Transmit+0xa0>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	0cdb      	lsrs	r3, r3, #19
 8004972:	2264      	movs	r2, #100	@ 0x64
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	609a      	str	r2, [r3, #8]
      break;
 800498a:	e008      	b.n	800499e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3b01      	subs	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004992:	4b19      	ldr	r3, [pc, #100]	@ (80049f8 <SUBGHZSPI_Transmit+0xa4>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d1ed      	bne.n	800497a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800499e:	4b17      	ldr	r3, [pc, #92]	@ (80049fc <SUBGHZSPI_Transmit+0xa8>)
 80049a0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049a8:	4b12      	ldr	r3, [pc, #72]	@ (80049f4 <SUBGHZSPI_Transmit+0xa0>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	0cdb      	lsrs	r3, r3, #19
 80049b6:	2264      	movs	r2, #100	@ 0x64
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	609a      	str	r2, [r3, #8]
      break;
 80049ce:	e008      	b.n	80049e2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80049d6:	4b08      	ldr	r3, [pc, #32]	@ (80049f8 <SUBGHZSPI_Transmit+0xa4>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d1ed      	bne.n	80049be <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80049e2:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <SUBGHZSPI_Transmit+0xa4>)
 80049e4:	68db      	ldr	r3, [r3, #12]

  return status;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000004 	.word	0x20000004
 80049f8:	58010000 	.word	0x58010000
 80049fc:	5801000c 	.word	0x5801000c

08004a00 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a0e:	4b25      	ldr	r3, [pc, #148]	@ (8004aa4 <SUBGHZSPI_Receive+0xa4>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	0cdb      	lsrs	r3, r3, #19
 8004a1c:	2264      	movs	r2, #100	@ 0x64
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	609a      	str	r2, [r3, #8]
      break;
 8004a34:	e008      	b.n	8004a48 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa8 <SUBGHZSPI_Receive+0xa8>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d1ed      	bne.n	8004a24 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004a48:	4b18      	ldr	r3, [pc, #96]	@ (8004aac <SUBGHZSPI_Receive+0xac>)
 8004a4a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	22ff      	movs	r2, #255	@ 0xff
 8004a50:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a52:	4b14      	ldr	r3, [pc, #80]	@ (8004aa4 <SUBGHZSPI_Receive+0xa4>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	0cdb      	lsrs	r3, r3, #19
 8004a60:	2264      	movs	r2, #100	@ 0x64
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	609a      	str	r2, [r3, #8]
      break;
 8004a78:	e008      	b.n	8004a8c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a80:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <SUBGHZSPI_Receive+0xa8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d1ed      	bne.n	8004a68 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <SUBGHZSPI_Receive+0xa8>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	701a      	strb	r2, [r3, #0]

  return status;
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000004 	.word	0x20000004
 8004aa8:	58010000 	.word	0x58010000
 8004aac:	5801000c 	.word	0x5801000c

08004ab0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	791b      	ldrb	r3, [r3, #4]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d111      	bne.n	8004ae4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <SUBGHZ_CheckDeviceReady+0x44>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ad0:	f7ff fbf2 	bl	80042b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f9      	bne.n	8004ad4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004ae0:	f7ff fbda 	bl	8004298 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f807 	bl	8004af8 <SUBGHZ_WaitOnBusy>
 8004aea:	4603      	mov	r3, r0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20000004 	.word	0x20000004

08004af8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004b04:	4b12      	ldr	r3, [pc, #72]	@ (8004b50 <SUBGHZ_WaitOnBusy+0x58>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	4413      	add	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	0d1b      	lsrs	r3, r3, #20
 8004b12:	2264      	movs	r2, #100	@ 0x64
 8004b14:	fb02 f303 	mul.w	r3, r2, r3
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004b1a:	f7ff fbfb 	bl	8004314 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004b1e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	609a      	str	r2, [r3, #8]
      break;
 8004b30:	e009      	b.n	8004b46 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004b38:	f7ff fbda 	bl	80042f0 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d0e9      	beq.n	8004b1a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000004 	.word	0x20000004

08004b54 <LL_RCC_GetUSARTClockSource>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b60:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	401a      	ands	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	4313      	orrs	r3, r2
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_GetLPUARTClockSource>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4013      	ands	r3, r2
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e042      	b.n	8004c2e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc fd34 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	@ 0x24
 8004bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fec3 	bl	800596c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fc4c 	bl	8005484 <UART_SetConfig>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e01b      	b.n	8004c2e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0201 	orr.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 ff41 	bl	8005aae <UART_CheckIdleState>
 8004c2c:	4603      	mov	r3, r0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b08a      	sub	sp, #40	@ 0x28
 8004c3a:	af02      	add	r7, sp, #8
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d173      	bne.n	8004d38 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_UART_Transmit+0x26>
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e06c      	b.n	8004d3a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2221      	movs	r2, #33	@ 0x21
 8004c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c70:	f7fd f984 	bl	8001f7c <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	88fa      	ldrh	r2, [r7, #6]
 8004c7a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8e:	d108      	bne.n	8004ca2 <HAL_UART_Transmit+0x6c>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	e003      	b.n	8004caa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004caa:	e02c      	b.n	8004d06 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2180      	movs	r1, #128	@ 0x80
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 ff47 	bl	8005b4a <UART_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e039      	b.n	8004d3a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	3302      	adds	r3, #2
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	e007      	b.n	8004cf4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	781a      	ldrb	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1cc      	bne.n	8004cac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2140      	movs	r1, #64	@ 0x40
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 ff14 	bl	8005b4a <UART_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e006      	b.n	8004d3a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e000      	b.n	8004d3a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
  }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	@ 0x28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d137      	bne.n	8004dcc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_UART_Receive_DMA+0x24>
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e030      	b.n	8004dce <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a18      	ldr	r2, [pc, #96]	@ (8004dd8 <HAL_UART_Receive_DMA+0x94>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01f      	beq.n	8004dbc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d018      	beq.n	8004dbc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	613b      	str	r3, [r7, #16]
   return(result);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	69f9      	ldr	r1, [r7, #28]
 8004dae:	6a3a      	ldr	r2, [r7, #32]
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e6      	bne.n	8004d8a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 ff90 	bl	8005ce8 <UART_Start_Receive_DMA>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	e000      	b.n	8004dce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
  }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3728      	adds	r7, #40	@ 0x28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40008000 	.word	0x40008000

08004ddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b0ba      	sub	sp, #232	@ 0xe8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004e06:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11b      	bne.n	8004e50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 82e3 	beq.w	800540c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
      }
      return;
 8004e4e:	e2dd      	b.n	800540c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8123 	beq.w	80050a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005094 <HAL_UART_IRQHandler+0x2b8>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e6a:	4b8b      	ldr	r3, [pc, #556]	@ (8005098 <HAL_UART_IRQHandler+0x2bc>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8116 	beq.w	80050a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d011      	beq.n	8004ea4 <HAL_UART_IRQHandler+0xc8>
 8004e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2201      	movs	r2, #1
 8004e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	f043 0201 	orr.w	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d011      	beq.n	8004ed4 <HAL_UART_IRQHandler+0xf8>
 8004eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	f043 0204 	orr.w	r2, r3, #4
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d011      	beq.n	8004f04 <HAL_UART_IRQHandler+0x128>
 8004ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efa:	f043 0202 	orr.w	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d017      	beq.n	8004f40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d105      	bne.n	8004f28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f20:	4b5c      	ldr	r3, [pc, #368]	@ (8005094 <HAL_UART_IRQHandler+0x2b8>)
 8004f22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f36:	f043 0208 	orr.w	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d012      	beq.n	8004f72 <HAL_UART_IRQHandler+0x196>
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f68:	f043 0220 	orr.w	r2, r3, #32
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8249 	beq.w	8005410 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d013      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc6:	2b40      	cmp	r3, #64	@ 0x40
 8004fc8:	d005      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d054      	beq.n	8005080 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 ff6c 	bl	8005eb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe6:	2b40      	cmp	r3, #64	@ 0x40
 8004fe8:	d146      	bne.n	8005078 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005000:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3308      	adds	r3, #8
 8005012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005016:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800501a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800502e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1d9      	bne.n	8004fea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d017      	beq.n	8005070 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005046:	4a15      	ldr	r2, [pc, #84]	@ (800509c <HAL_UART_IRQHandler+0x2c0>)
 8005048:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd fa51 	bl	80024f8 <HAL_DMA_Abort_IT>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d019      	beq.n	8005090 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800506a:	4610      	mov	r0, r2
 800506c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506e:	e00f      	b.n	8005090 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f9f2 	bl	800545a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005076:	e00b      	b.n	8005090 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f9ee 	bl	800545a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507e:	e007      	b.n	8005090 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f9ea 	bl	800545a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800508e:	e1bf      	b.n	8005410 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	bf00      	nop
    return;
 8005092:	e1bd      	b.n	8005410 <HAL_UART_IRQHandler+0x634>
 8005094:	10000001 	.word	0x10000001
 8005098:	04000120 	.word	0x04000120
 800509c:	08006169 	.word	0x08006169

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f040 8153 	bne.w	8005350 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 814c 	beq.w	8005350 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8145 	beq.w	8005350 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2210      	movs	r2, #16
 80050cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b40      	cmp	r3, #64	@ 0x40
 80050da:	f040 80bb 	bne.w	8005254 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 818f 	beq.w	8005414 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005100:	429a      	cmp	r2, r3
 8005102:	f080 8187 	bcs.w	8005414 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800510c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	f040 8087 	bne.w	8005232 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800513c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800514e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005152:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800515a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1da      	bne.n	8005124 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3308      	adds	r3, #8
 8005174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800517e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005192:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005196:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800519a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e1      	bne.n	800516e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3308      	adds	r3, #8
 80051b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e3      	bne.n	80051aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005200:	f023 0310 	bic.w	r3, r3, #16
 8005204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005212:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005214:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005218:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e4      	bne.n	80051f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800522c:	4618      	mov	r0, r3
 800522e:	f7fd f905 	bl	800243c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005244:	b29b      	uxth	r3, r3
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	b29b      	uxth	r3, r3
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f90d 	bl	800546c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005252:	e0df      	b.n	8005414 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005260:	b29b      	uxth	r3, r3
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80d1 	beq.w	8005418 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80cc 	beq.w	8005418 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800528e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005294:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e4      	bne.n	8005280 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	623b      	str	r3, [r7, #32]
   return(result);
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3308      	adds	r3, #8
 80052da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052de:	633a      	str	r2, [r7, #48]	@ 0x30
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e1      	bne.n	80052b6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	60fb      	str	r3, [r7, #12]
   return(result);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0310 	bic.w	r3, r3, #16
 800531a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	617b      	str	r3, [r7, #20]
   return(result);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e4      	bne.n	8005306 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f88f 	bl	800546c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800534e:	e063      	b.n	8005418 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005354:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00e      	beq.n	800537a <HAL_UART_IRQHandler+0x59e>
 800535c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 ff39 	bl	80061ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005378:	e051      	b.n	800541e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800537a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800537e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d014      	beq.n	80053b0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800538a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d105      	bne.n	800539e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d008      	beq.n	80053b0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d03a      	beq.n	800541c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	4798      	blx	r3
    }
    return;
 80053ae:	e035      	b.n	800541c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d009      	beq.n	80053d0 <HAL_UART_IRQHandler+0x5f4>
 80053bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fee3 	bl	8006194 <UART_EndTransmit_IT>
    return;
 80053ce:	e026      	b.n	800541e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_UART_IRQHandler+0x614>
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 ff10 	bl	800620e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053ee:	e016      	b.n	800541e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d010      	beq.n	800541e <HAL_UART_IRQHandler+0x642>
 80053fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005400:	2b00      	cmp	r3, #0
 8005402:	da0c      	bge.n	800541e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fef9 	bl	80061fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800540a:	e008      	b.n	800541e <HAL_UART_IRQHandler+0x642>
      return;
 800540c:	bf00      	nop
 800540e:	e006      	b.n	800541e <HAL_UART_IRQHandler+0x642>
    return;
 8005410:	bf00      	nop
 8005412:	e004      	b.n	800541e <HAL_UART_IRQHandler+0x642>
      return;
 8005414:	bf00      	nop
 8005416:	e002      	b.n	800541e <HAL_UART_IRQHandler+0x642>
      return;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <HAL_UART_IRQHandler+0x642>
    return;
 800541c:	bf00      	nop
  }
}
 800541e:	37e8      	adds	r7, #232	@ 0xe8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
	...

08005484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005488:	b08c      	sub	sp, #48	@ 0x30
 800548a:	af00      	add	r7, sp, #0
 800548c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	431a      	orrs	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b94      	ldr	r3, [pc, #592]	@ (8005704 <UART_SetConfig+0x280>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a89      	ldr	r2, [pc, #548]	@ (8005708 <UART_SetConfig+0x284>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ec:	4313      	orrs	r3, r2
 80054ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80054fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005504:	430b      	orrs	r3, r1
 8005506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	f023 010f 	bic.w	r1, r3, #15
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a7a      	ldr	r2, [pc, #488]	@ (800570c <UART_SetConfig+0x288>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d127      	bne.n	8005578 <UART_SetConfig+0xf4>
 8005528:	2003      	movs	r0, #3
 800552a:	f7ff fb13 	bl	8004b54 <LL_RCC_GetUSARTClockSource>
 800552e:	4603      	mov	r3, r0
 8005530:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005534:	2b03      	cmp	r3, #3
 8005536:	d81b      	bhi.n	8005570 <UART_SetConfig+0xec>
 8005538:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <UART_SetConfig+0xbc>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005551 	.word	0x08005551
 8005544:	08005561 	.word	0x08005561
 8005548:	08005559 	.word	0x08005559
 800554c:	08005569 	.word	0x08005569
 8005550:	2301      	movs	r3, #1
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005556:	e080      	b.n	800565a <UART_SetConfig+0x1d6>
 8005558:	2302      	movs	r3, #2
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555e:	e07c      	b.n	800565a <UART_SetConfig+0x1d6>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005566:	e078      	b.n	800565a <UART_SetConfig+0x1d6>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556e:	e074      	b.n	800565a <UART_SetConfig+0x1d6>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005576:	e070      	b.n	800565a <UART_SetConfig+0x1d6>
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a64      	ldr	r2, [pc, #400]	@ (8005710 <UART_SetConfig+0x28c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d138      	bne.n	80055f4 <UART_SetConfig+0x170>
 8005582:	200c      	movs	r0, #12
 8005584:	f7ff fae6 	bl	8004b54 <LL_RCC_GetUSARTClockSource>
 8005588:	4603      	mov	r3, r0
 800558a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800558e:	2b0c      	cmp	r3, #12
 8005590:	d82c      	bhi.n	80055ec <UART_SetConfig+0x168>
 8005592:	a201      	add	r2, pc, #4	@ (adr r2, 8005598 <UART_SetConfig+0x114>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055cd 	.word	0x080055cd
 800559c:	080055ed 	.word	0x080055ed
 80055a0:	080055ed 	.word	0x080055ed
 80055a4:	080055ed 	.word	0x080055ed
 80055a8:	080055dd 	.word	0x080055dd
 80055ac:	080055ed 	.word	0x080055ed
 80055b0:	080055ed 	.word	0x080055ed
 80055b4:	080055ed 	.word	0x080055ed
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055ed 	.word	0x080055ed
 80055c0:	080055ed 	.word	0x080055ed
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	080055e5 	.word	0x080055e5
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d2:	e042      	b.n	800565a <UART_SetConfig+0x1d6>
 80055d4:	2302      	movs	r3, #2
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055da:	e03e      	b.n	800565a <UART_SetConfig+0x1d6>
 80055dc:	2304      	movs	r3, #4
 80055de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e2:	e03a      	b.n	800565a <UART_SetConfig+0x1d6>
 80055e4:	2308      	movs	r3, #8
 80055e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ea:	e036      	b.n	800565a <UART_SetConfig+0x1d6>
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f2:	e032      	b.n	800565a <UART_SetConfig+0x1d6>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a43      	ldr	r2, [pc, #268]	@ (8005708 <UART_SetConfig+0x284>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d12a      	bne.n	8005654 <UART_SetConfig+0x1d0>
 80055fe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005602:	f7ff fab9 	bl	8004b78 <LL_RCC_GetLPUARTClockSource>
 8005606:	4603      	mov	r3, r0
 8005608:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800560c:	d01a      	beq.n	8005644 <UART_SetConfig+0x1c0>
 800560e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005612:	d81b      	bhi.n	800564c <UART_SetConfig+0x1c8>
 8005614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005618:	d00c      	beq.n	8005634 <UART_SetConfig+0x1b0>
 800561a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800561e:	d815      	bhi.n	800564c <UART_SetConfig+0x1c8>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <UART_SetConfig+0x1a8>
 8005624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005628:	d008      	beq.n	800563c <UART_SetConfig+0x1b8>
 800562a:	e00f      	b.n	800564c <UART_SetConfig+0x1c8>
 800562c:	2300      	movs	r3, #0
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005632:	e012      	b.n	800565a <UART_SetConfig+0x1d6>
 8005634:	2302      	movs	r3, #2
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563a:	e00e      	b.n	800565a <UART_SetConfig+0x1d6>
 800563c:	2304      	movs	r3, #4
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005642:	e00a      	b.n	800565a <UART_SetConfig+0x1d6>
 8005644:	2308      	movs	r3, #8
 8005646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564a:	e006      	b.n	800565a <UART_SetConfig+0x1d6>
 800564c:	2310      	movs	r3, #16
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005652:	e002      	b.n	800565a <UART_SetConfig+0x1d6>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2a      	ldr	r2, [pc, #168]	@ (8005708 <UART_SetConfig+0x284>)
 8005660:	4293      	cmp	r3, r2
 8005662:	f040 80a4 	bne.w	80057ae <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005666:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800566a:	2b08      	cmp	r3, #8
 800566c:	d823      	bhi.n	80056b6 <UART_SetConfig+0x232>
 800566e:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <UART_SetConfig+0x1f0>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	08005699 	.word	0x08005699
 8005678:	080056b7 	.word	0x080056b7
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056b7 	.word	0x080056b7
 8005684:	080056a7 	.word	0x080056a7
 8005688:	080056b7 	.word	0x080056b7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056b7 	.word	0x080056b7
 8005694:	080056af 	.word	0x080056af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005698:	f7fe fb06 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 800569c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800569e:	e010      	b.n	80056c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005714 <UART_SetConfig+0x290>)
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056a4:	e00d      	b.n	80056c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a6:	f7fe fa4b 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 80056aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056ac:	e009      	b.n	80056c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056b4:	e005      	b.n	80056c2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8137 	beq.w	8005938 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <UART_SetConfig+0x294>)
 80056d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	4413      	add	r3, r2
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d305      	bcc.n	80056fa <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d910      	bls.n	800571c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005700:	e11a      	b.n	8005938 <UART_SetConfig+0x4b4>
 8005702:	bf00      	nop
 8005704:	cfff69f3 	.word	0xcfff69f3
 8005708:	40008000 	.word	0x40008000
 800570c:	40013800 	.word	0x40013800
 8005710:	40004400 	.word	0x40004400
 8005714:	00f42400 	.word	0x00f42400
 8005718:	0800ba88 	.word	0x0800ba88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	2200      	movs	r2, #0
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	60fa      	str	r2, [r7, #12]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	4a8e      	ldr	r2, [pc, #568]	@ (8005964 <UART_SetConfig+0x4e0>)
 800572a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800572e:	b29b      	uxth	r3, r3
 8005730:	2200      	movs	r2, #0
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800573a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800573e:	f7fb fa7b 	bl	8000c38 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	020b      	lsls	r3, r1, #8
 8005754:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005758:	0202      	lsls	r2, r0, #8
 800575a:	6979      	ldr	r1, [r7, #20]
 800575c:	6849      	ldr	r1, [r1, #4]
 800575e:	0849      	lsrs	r1, r1, #1
 8005760:	2000      	movs	r0, #0
 8005762:	460c      	mov	r4, r1
 8005764:	4605      	mov	r5, r0
 8005766:	eb12 0804 	adds.w	r8, r2, r4
 800576a:	eb43 0905 	adc.w	r9, r3, r5
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	469a      	mov	sl, r3
 8005776:	4693      	mov	fp, r2
 8005778:	4652      	mov	r2, sl
 800577a:	465b      	mov	r3, fp
 800577c:	4640      	mov	r0, r8
 800577e:	4649      	mov	r1, r9
 8005780:	f7fb fa5a 	bl	8000c38 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4613      	mov	r3, r2
 800578a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005792:	d308      	bcc.n	80057a6 <UART_SetConfig+0x322>
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800579a:	d204      	bcs.n	80057a6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	e0c8      	b.n	8005938 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057ac:	e0c4      	b.n	8005938 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b6:	d167      	bne.n	8005888 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80057b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d828      	bhi.n	8005812 <UART_SetConfig+0x38e>
 80057c0:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <UART_SetConfig+0x344>)
 80057c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c6:	bf00      	nop
 80057c8:	080057ed 	.word	0x080057ed
 80057cc:	080057f5 	.word	0x080057f5
 80057d0:	080057fd 	.word	0x080057fd
 80057d4:	08005813 	.word	0x08005813
 80057d8:	08005803 	.word	0x08005803
 80057dc:	08005813 	.word	0x08005813
 80057e0:	08005813 	.word	0x08005813
 80057e4:	08005813 	.word	0x08005813
 80057e8:	0800580b 	.word	0x0800580b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ec:	f7fe fa5c 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 80057f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057f2:	e014      	b.n	800581e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f4:	f7fe fa6a 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 80057f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057fa:	e010      	b.n	800581e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005968 <UART_SetConfig+0x4e4>)
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005800:	e00d      	b.n	800581e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005802:	f7fe f99d 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8005806:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005808:	e009      	b.n	800581e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005810:	e005      	b.n	800581e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800581c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8089 	beq.w	8005938 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	4a4e      	ldr	r2, [pc, #312]	@ (8005964 <UART_SetConfig+0x4e0>)
 800582c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005830:	461a      	mov	r2, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	fbb3 f3f2 	udiv	r3, r3, r2
 8005838:	005a      	lsls	r2, r3, #1
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	441a      	add	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2b0f      	cmp	r3, #15
 8005850:	d916      	bls.n	8005880 <UART_SetConfig+0x3fc>
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005858:	d212      	bcs.n	8005880 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f023 030f 	bic.w	r3, r3, #15
 8005862:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	b29a      	uxth	r2, r3
 8005870:	8bfb      	ldrh	r3, [r7, #30]
 8005872:	4313      	orrs	r3, r2
 8005874:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	8bfa      	ldrh	r2, [r7, #30]
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	e05b      	b.n	8005938 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005886:	e057      	b.n	8005938 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005888:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800588c:	2b08      	cmp	r3, #8
 800588e:	d828      	bhi.n	80058e2 <UART_SetConfig+0x45e>
 8005890:	a201      	add	r2, pc, #4	@ (adr r2, 8005898 <UART_SetConfig+0x414>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	080058e3 	.word	0x080058e3
 80058a8:	080058d3 	.word	0x080058d3
 80058ac:	080058e3 	.word	0x080058e3
 80058b0:	080058e3 	.word	0x080058e3
 80058b4:	080058e3 	.word	0x080058e3
 80058b8:	080058db 	.word	0x080058db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058bc:	f7fe f9f4 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 80058c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058c2:	e014      	b.n	80058ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c4:	f7fe fa02 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ca:	e010      	b.n	80058ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058cc:	4b26      	ldr	r3, [pc, #152]	@ (8005968 <UART_SetConfig+0x4e4>)
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058d0:	e00d      	b.n	80058ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d2:	f7fe f935 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 80058d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058d8:	e009      	b.n	80058ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058e0:	e005      	b.n	80058ee <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058ec:	bf00      	nop
    }

    if (pclk != 0U)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d021      	beq.n	8005938 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005964 <UART_SetConfig+0x4e0>)
 80058fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058fe:	461a      	mov	r2, r3
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	fbb3 f2f2 	udiv	r2, r3, r2
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	441a      	add	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d909      	bls.n	8005932 <UART_SetConfig+0x4ae>
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005924:	d205      	bcs.n	8005932 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	b29a      	uxth	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	e002      	b.n	8005938 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2201      	movs	r2, #1
 800593c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2201      	movs	r2, #1
 8005944:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005954:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005958:	4618      	mov	r0, r3
 800595a:	3730      	adds	r7, #48	@ 0x30
 800595c:	46bd      	mov	sp, r7
 800595e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005962:	bf00      	nop
 8005964:	0800ba88 	.word	0x0800ba88
 8005968:	00f42400 	.word	0x00f42400

0800596c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01a      	beq.n	8005a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6a:	d10a      	bne.n	8005a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	605a      	str	r2, [r3, #4]
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b086      	sub	sp, #24
 8005ab2:	af02      	add	r7, sp, #8
 8005ab4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005abe:	f7fc fa5d 	bl	8001f7c <HAL_GetTick>
 8005ac2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d10e      	bne.n	8005af0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f832 	bl	8005b4a <UART_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e028      	b.n	8005b42 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d10e      	bne.n	8005b1c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f81c 	bl	8005b4a <UART_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e012      	b.n	8005b42 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b09c      	sub	sp, #112	@ 0x70
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	4613      	mov	r3, r2
 8005b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5a:	e0af      	b.n	8005cbc <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b62:	f000 80ab 	beq.w	8005cbc <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b66:	f7fc fa09 	bl	8001f7c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x32>
 8005b76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d140      	bne.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b9c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ba0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e6      	bne.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	f023 0301 	bic.w	r3, r3, #1
 8005bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3308      	adds	r3, #8
 8005bcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005bce:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005bd0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e5      	bne.n	8005bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e06f      	b.n	8005cde <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d057      	beq.n	8005cbc <UART_WaitOnFlagUntilTimeout+0x172>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b80      	cmp	r3, #128	@ 0x80
 8005c10:	d054      	beq.n	8005cbc <UART_WaitOnFlagUntilTimeout+0x172>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b40      	cmp	r3, #64	@ 0x40
 8005c16:	d051      	beq.n	8005cbc <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c26:	d149      	bne.n	8005cbc <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c52:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e6      	bne.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3308      	adds	r3, #8
 8005c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	e853 3f00 	ldrex	r3, [r3]
 8005c72:	613b      	str	r3, [r7, #16]
   return(result);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005c84:	623a      	str	r2, [r7, #32]
 8005c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	69f9      	ldr	r1, [r7, #28]
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e5      	bne.n	8005c64 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e010      	b.n	8005cde <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69da      	ldr	r2, [r3, #28]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	bf0c      	ite	eq
 8005ccc:	2301      	moveq	r3, #1
 8005cce:	2300      	movne	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	f43f af40 	beq.w	8005b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3770      	adds	r7, #112	@ 0x70
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b096      	sub	sp, #88	@ 0x58
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2222      	movs	r2, #34	@ 0x22
 8005d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02d      	beq.n	8005d7a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d24:	4a40      	ldr	r2, [pc, #256]	@ (8005e28 <UART_Start_Receive_DMA+0x140>)
 8005d26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e2c <UART_Start_Receive_DMA+0x144>)
 8005d30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d38:	4a3d      	ldr	r2, [pc, #244]	@ (8005e30 <UART_Start_Receive_DMA+0x148>)
 8005d3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d42:	2200      	movs	r2, #0
 8005d44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3324      	adds	r3, #36	@ 0x24
 8005d52:	4619      	mov	r1, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d58:	461a      	mov	r2, r3
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	f7fc faf0 	bl	8002340 <HAL_DMA_Start_IT>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2210      	movs	r2, #16
 8005d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e051      	b.n	8005e1e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d018      	beq.n	8005db4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d96:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005da2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	f043 0301 	orr.w	r3, r3, #1
 8005dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005dd4:	637a      	str	r2, [r7, #52]	@ 0x34
 8005dd6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e5      	bne.n	8005db4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3308      	adds	r3, #8
 8005dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	613b      	str	r3, [r7, #16]
   return(result);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3308      	adds	r3, #8
 8005e06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e08:	623a      	str	r2, [r7, #32]
 8005e0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	69f9      	ldr	r1, [r7, #28]
 8005e0e:	6a3a      	ldr	r2, [r7, #32]
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e5      	bne.n	8005de8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3758      	adds	r7, #88	@ 0x58
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	08005f7f 	.word	0x08005f7f
 8005e2c:	080060ab 	.word	0x080060ab
 8005e30:	080060e9 	.word	0x080060e9

08005e34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b08f      	sub	sp, #60	@ 0x3c
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e5c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e6      	bne.n	8005e3c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3308      	adds	r3, #8
 8005e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8e:	61ba      	str	r2, [r7, #24]
 8005e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6979      	ldr	r1, [r7, #20]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e5      	bne.n	8005e6e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005eaa:	bf00      	nop
 8005eac:	373c      	adds	r7, #60	@ 0x3c
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr

08005eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b095      	sub	sp, #84	@ 0x54
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8005edc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ee0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e6      	bne.n	8005ebc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e3      	bne.n	8005eee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d118      	bne.n	8005f60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f023 0310 	bic.w	r3, r3, #16
 8005f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	6979      	ldr	r1, [r7, #20]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	613b      	str	r3, [r7, #16]
   return(result);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e6      	bne.n	8005f2e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f74:	bf00      	nop
 8005f76:	3754      	adds	r7, #84	@ 0x54
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr

08005f7e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b09c      	sub	sp, #112	@ 0x70
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d171      	bne.n	800607e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fc2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e6      	bne.n	8005fa2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe6:	f023 0301 	bic.w	r3, r3, #1
 8005fea:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005ff4:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ff6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e5      	bne.n	8005fd4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3308      	adds	r3, #8
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	623b      	str	r3, [r7, #32]
   return(result);
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800601e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3308      	adds	r3, #8
 8006026:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006028:	633a      	str	r2, [r7, #48]	@ 0x30
 800602a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800602e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e5      	bne.n	8006008 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800603c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800603e:	2220      	movs	r2, #32
 8006040:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d118      	bne.n	800607e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	60fb      	str	r3, [r7, #12]
   return(result);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f023 0310 	bic.w	r3, r3, #16
 8006060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	69b9      	ldr	r1, [r7, #24]
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	617b      	str	r3, [r7, #20]
   return(result);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e6      	bne.n	800604c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800607e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006080:	2200      	movs	r2, #0
 8006082:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d107      	bne.n	800609c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800608c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800608e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006092:	4619      	mov	r1, r3
 8006094:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006096:	f7ff f9e9 	bl	800546c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800609a:	e002      	b.n	80060a2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800609c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800609e:	f7ff f9ca 	bl	8005436 <HAL_UART_RxCpltCallback>
}
 80060a2:	bf00      	nop
 80060a4:	3770      	adds	r7, #112	@ 0x70
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d109      	bne.n	80060da <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80060cc:	085b      	lsrs	r3, r3, #1
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4619      	mov	r1, r3
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff f9ca 	bl	800546c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060d8:	e002      	b.n	80060e0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff f9b4 	bl	8005448 <HAL_UART_RxHalfCpltCallback>
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006104:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006110:	2b80      	cmp	r3, #128	@ 0x80
 8006112:	d109      	bne.n	8006128 <UART_DMAError+0x40>
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b21      	cmp	r3, #33	@ 0x21
 8006118:	d106      	bne.n	8006128 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2200      	movs	r2, #0
 800611e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006122:	6978      	ldr	r0, [r7, #20]
 8006124:	f7ff fe86 	bl	8005e34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006132:	2b40      	cmp	r3, #64	@ 0x40
 8006134:	d109      	bne.n	800614a <UART_DMAError+0x62>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b22      	cmp	r3, #34	@ 0x22
 800613a:	d106      	bne.n	800614a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006144:	6978      	ldr	r0, [r7, #20]
 8006146:	f7ff feb5 	bl	8005eb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006150:	f043 0210 	orr.w	r2, r3, #16
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800615a:	6978      	ldr	r0, [r7, #20]
 800615c:	f7ff f97d 	bl	800545a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006160:	bf00      	nop
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff f967 	bl	800545a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6979      	ldr	r1, [r7, #20]
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	613b      	str	r3, [r7, #16]
   return(result);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e6      	bne.n	800619c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff f921 	bl	8005424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061e2:	bf00      	nop
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr

0800620e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_UARTEx_DisableFifoMode+0x16>
 8006232:	2302      	movs	r3, #2
 8006234:	e027      	b.n	8006286 <HAL_UARTEx_DisableFifoMode+0x66>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2224      	movs	r2, #36	@ 0x24
 8006242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006264:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr

08006290 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e02d      	b.n	8006304 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2224      	movs	r2, #36	@ 0x24
 80062b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0201 	bic.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f84f 	bl	8006388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006320:	2302      	movs	r3, #2
 8006322:	e02d      	b.n	8006380 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2224      	movs	r2, #36	@ 0x24
 8006330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f811 	bl	8006388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063a8:	e031      	b.n	800640e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063aa:	2308      	movs	r3, #8
 80063ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ae:	2308      	movs	r3, #8
 80063b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	0e5b      	lsrs	r3, r3, #25
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	0f5b      	lsrs	r3, r3, #29
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	7b3a      	ldrb	r2, [r7, #12]
 80063d6:	4910      	ldr	r1, [pc, #64]	@ (8006418 <UARTEx_SetNbDataToProcess+0x90>)
 80063d8:	5c8a      	ldrb	r2, [r1, r2]
 80063da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063de:	7b3a      	ldrb	r2, [r7, #12]
 80063e0:	490e      	ldr	r1, [pc, #56]	@ (800641c <UARTEx_SetNbDataToProcess+0x94>)
 80063e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	7b7a      	ldrb	r2, [r7, #13]
 80063f4:	4908      	ldr	r1, [pc, #32]	@ (8006418 <UARTEx_SetNbDataToProcess+0x90>)
 80063f6:	5c8a      	ldrb	r2, [r1, r2]
 80063f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063fc:	7b7a      	ldrb	r2, [r7, #13]
 80063fe:	4907      	ldr	r1, [pc, #28]	@ (800641c <UARTEx_SetNbDataToProcess+0x94>)
 8006400:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006402:	fb93 f3f2 	sdiv	r3, r3, r2
 8006406:	b29a      	uxth	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800640e:	bf00      	nop
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr
 8006418:	0800baa0 	.word	0x0800baa0
 800641c:	0800baa8 	.word	0x0800baa8

08006420 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8006424:	f7fb fcd8 	bl	8001dd8 <BSP_RADIO_Init>
 8006428:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800642a:	4618      	mov	r0, r3
 800642c:	bd80      	pop	{r7, pc}

0800642e <RBI_GetTxConfig>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_GetTxConfig(void)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8006432:	f7fb fd0f 	bl	8001e54 <BSP_RADIO_GetTxConfig>
 8006436:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8006438:	4618      	mov	r0, r3
 800643a:	bd80      	pop	{r7, pc}

0800643c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8006440:	f7fb fd0f 	bl	8001e62 <BSP_RADIO_IsTCXO>
 8006444:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8006446:	4618      	mov	r0, r3
 8006448:	bd80      	pop	{r7, pc}

0800644a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800644e:	f7fb fd0f 	bl	8001e70 <BSP_RADIO_IsDCDC>
 8006452:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8006454:	4618      	mov	r0, r3
 8006456:	bd80      	pop	{r7, pc}

08006458 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	4618      	mov	r0, r3
 8006466:	f7fb fd0a 	bl	8001e7e <BSP_RADIO_GetRFOMaxPowerConfig>
 800646a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006482:	4a1d      	ldr	r2, [pc, #116]	@ (80064f8 <SUBGRF_Init+0x84>)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8006488:	f7fb faa2 	bl	80019d0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800648c:	2002      	movs	r0, #2
 800648e:	f000 fdf3 	bl	8007078 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006492:	4b1a      	ldr	r3, [pc, #104]	@ (80064fc <SUBGRF_Init+0x88>)
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006498:	2000      	movs	r0, #0
 800649a:	f000 f897 	bl	80065cc <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800649e:	f7ff ffcd 	bl	800643c <RBI_IsTCXO>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d10e      	bne.n	80064c6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80064a8:	2140      	movs	r1, #64	@ 0x40
 80064aa:	2001      	movs	r0, #1
 80064ac:	f000 f9bc 	bl	8006828 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80064b0:	2100      	movs	r1, #0
 80064b2:	f640 1011 	movw	r0, #2321	@ 0x911
 80064b6:	f000 fc7d 	bl	8006db4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80064ba:	237f      	movs	r3, #127	@ 0x7f
 80064bc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80064be:	7b38      	ldrb	r0, [r7, #12]
 80064c0:	f000 f8c0 	bl	8006644 <SUBGRF_Calibrate>
 80064c4:	e009      	b.n	80064da <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80064c6:	2120      	movs	r1, #32
 80064c8:	f640 1011 	movw	r0, #2321	@ 0x911
 80064cc:	f000 fc72 	bl	8006db4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80064d0:	2120      	movs	r1, #32
 80064d2:	f640 1012 	movw	r0, #2322	@ 0x912
 80064d6:	f000 fc6d 	bl	8006db4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80064da:	210e      	movs	r1, #14
 80064dc:	f640 101f 	movw	r0, #2335	@ 0x91f
 80064e0:	f000 fc68 	bl	8006db4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80064e4:	f7ff ff9c 	bl	8006420 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80064e8:	4b05      	ldr	r3, [pc, #20]	@ (8006500 <SUBGRF_Init+0x8c>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]
}
 80064ee:	bf00      	nop
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	200005e0 	.word	0x200005e0
 80064fc:	200005df 	.word	0x200005df
 8006500:	200005dc 	.word	0x200005dc

08006504 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	461a      	mov	r2, r3
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	2000      	movs	r0, #0
 8006518:	f000 fc96 	bl	8006e48 <SUBGRF_WriteBuffer>
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <SUBGRF_SendPayload>:

    return 0;
}

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	460b      	mov	r3, r1
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8006532:	7afb      	ldrb	r3, [r7, #11]
 8006534:	4619      	mov	r1, r3
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff ffe4 	bl	8006504 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f861 	bl	8006604 <SUBGRF_SetTx>
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	4603      	mov	r3, r0
 8006552:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	0a1b      	lsrs	r3, r3, #8
 8006558:	b29b      	uxth	r3, r3
 800655a:	b2db      	uxtb	r3, r3
 800655c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006564:	f000 f9e4 	bl	8006930 <SUBGRF_GetPacketType>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d108      	bne.n	8006580 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800656e:	f107 030c 	add.w	r3, r7, #12
 8006572:	2202      	movs	r2, #2
 8006574:	4619      	mov	r1, r3
 8006576:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800657a:	f000 fc43 	bl	8006e04 <SUBGRF_WriteRegisters>
            break;
 800657e:	e000      	b.n	8006582 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006580:	bf00      	nop
    }
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	4603      	mov	r3, r0
 8006592:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	b29b      	uxth	r3, r3
 800659a:	b2db      	uxtb	r3, r3
 800659c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80065a4:	f000 f9c4 	bl	8006930 <SUBGRF_GetPacketType>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d108      	bne.n	80065c0 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80065ae:	f107 030c 	add.w	r3, r7, #12
 80065b2:	2202      	movs	r2, #2
 80065b4:	4619      	mov	r1, r3
 80065b6:	f240 60be 	movw	r0, #1726	@ 0x6be
 80065ba:	f000 fc23 	bl	8006e04 <SUBGRF_WriteRegisters>
            break;
 80065be:	e000      	b.n	80065c2 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80065c0:	bf00      	nop
    }
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80065d6:	1dfb      	adds	r3, r7, #7
 80065d8:	2201      	movs	r2, #1
 80065da:	4619      	mov	r1, r3
 80065dc:	2080      	movs	r0, #128	@ 0x80
 80065de:	f000 fc55 	bl	8006e8c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80065e8:	4b05      	ldr	r3, [pc, #20]	@ (8006600 <SUBGRF_SetStandby+0x34>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80065ee:	e002      	b.n	80065f6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80065f0:	4b03      	ldr	r3, [pc, #12]	@ (8006600 <SUBGRF_SetStandby+0x34>)
 80065f2:	2202      	movs	r2, #2
 80065f4:	701a      	strb	r2, [r3, #0]
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200005dc 	.word	0x200005dc

08006604 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800660c:	4b0c      	ldr	r3, [pc, #48]	@ (8006640 <SUBGRF_SetTx+0x3c>)
 800660e:	2204      	movs	r2, #4
 8006610:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0c1b      	lsrs	r3, r3, #16
 8006616:	b2db      	uxtb	r3, r3
 8006618:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	0a1b      	lsrs	r3, r3, #8
 800661e:	b2db      	uxtb	r3, r3
 8006620:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006628:	f107 030c 	add.w	r3, r7, #12
 800662c:	2203      	movs	r2, #3
 800662e:	4619      	mov	r1, r3
 8006630:	2083      	movs	r0, #131	@ 0x83
 8006632:	f000 fc2b 	bl	8006e8c <SUBGRF_WriteCommand>
}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200005dc 	.word	0x200005dc

08006644 <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800664c:	793b      	ldrb	r3, [r7, #4]
 800664e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006652:	b2db      	uxtb	r3, r3
 8006654:	b25b      	sxtb	r3, r3
 8006656:	019b      	lsls	r3, r3, #6
 8006658:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800665a:	793b      	ldrb	r3, [r7, #4]
 800665c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006660:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006662:	b25b      	sxtb	r3, r3
 8006664:	015b      	lsls	r3, r3, #5
 8006666:	b25b      	sxtb	r3, r3
 8006668:	4313      	orrs	r3, r2
 800666a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800666c:	793b      	ldrb	r3, [r7, #4]
 800666e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006672:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006674:	b25b      	sxtb	r3, r3
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	b25b      	sxtb	r3, r3
 800667a:	4313      	orrs	r3, r2
 800667c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800667e:	793b      	ldrb	r3, [r7, #4]
 8006680:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006684:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006686:	b25b      	sxtb	r3, r3
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	b25b      	sxtb	r3, r3
 800668c:	4313      	orrs	r3, r2
 800668e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006690:	793b      	ldrb	r3, [r7, #4]
 8006692:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006696:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006698:	b25b      	sxtb	r3, r3
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	b25b      	sxtb	r3, r3
 800669e:	4313      	orrs	r3, r2
 80066a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80066a2:	793b      	ldrb	r3, [r7, #4]
 80066a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80066a8:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80066aa:	b25b      	sxtb	r3, r3
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	b25b      	sxtb	r3, r3
 80066b0:	4313      	orrs	r3, r2
 80066b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80066b4:	793b      	ldrb	r3, [r7, #4]
 80066b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80066be:	4313      	orrs	r3, r2
 80066c0:	b25b      	sxtb	r3, r3
 80066c2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80066c4:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80066c6:	f107 030f 	add.w	r3, r7, #15
 80066ca:	2201      	movs	r2, #1
 80066cc:	4619      	mov	r1, r3
 80066ce:	2089      	movs	r0, #137	@ 0x89
 80066d0:	f000 fbdc 	bl	8006e8c <SUBGRF_WriteCommand>
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <SUBGRF_CalibrateImage+0x80>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d904      	bls.n	80066f6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80066ec:	23e1      	movs	r3, #225	@ 0xe1
 80066ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80066f0:	23e9      	movs	r3, #233	@ 0xe9
 80066f2:	737b      	strb	r3, [r7, #13]
 80066f4:	e027      	b.n	8006746 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a19      	ldr	r2, [pc, #100]	@ (8006760 <SUBGRF_CalibrateImage+0x84>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d904      	bls.n	8006708 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80066fe:	23d7      	movs	r3, #215	@ 0xd7
 8006700:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8006702:	23db      	movs	r3, #219	@ 0xdb
 8006704:	737b      	strb	r3, [r7, #13]
 8006706:	e01e      	b.n	8006746 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a16      	ldr	r2, [pc, #88]	@ (8006764 <SUBGRF_CalibrateImage+0x88>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d904      	bls.n	800671a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8006710:	23c1      	movs	r3, #193	@ 0xc1
 8006712:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8006714:	23c5      	movs	r3, #197	@ 0xc5
 8006716:	737b      	strb	r3, [r7, #13]
 8006718:	e015      	b.n	8006746 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a12      	ldr	r2, [pc, #72]	@ (8006768 <SUBGRF_CalibrateImage+0x8c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d904      	bls.n	800672c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8006722:	2375      	movs	r3, #117	@ 0x75
 8006724:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8006726:	2381      	movs	r3, #129	@ 0x81
 8006728:	737b      	strb	r3, [r7, #13]
 800672a:	e00c      	b.n	8006746 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a0f      	ldr	r2, [pc, #60]	@ (800676c <SUBGRF_CalibrateImage+0x90>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d904      	bls.n	800673e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8006734:	236b      	movs	r3, #107	@ 0x6b
 8006736:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8006738:	236f      	movs	r3, #111	@ 0x6f
 800673a:	737b      	strb	r3, [r7, #13]
 800673c:	e003      	b.n	8006746 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800673e:	2329      	movs	r3, #41	@ 0x29
 8006740:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8006742:	232b      	movs	r3, #43	@ 0x2b
 8006744:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8006746:	f107 030c 	add.w	r3, r7, #12
 800674a:	2202      	movs	r2, #2
 800674c:	4619      	mov	r1, r3
 800674e:	2098      	movs	r0, #152	@ 0x98
 8006750:	f000 fb9c 	bl	8006e8c <SUBGRF_WriteCommand>
}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	35a4e900 	.word	0x35a4e900
 8006760:	32a9f880 	.word	0x32a9f880
 8006764:	2de54480 	.word	0x2de54480
 8006768:	1b6b0b00 	.word	0x1b6b0b00
 800676c:	1954fc40 	.word	0x1954fc40

08006770 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	4611      	mov	r1, r2
 800677c:	461a      	mov	r2, r3
 800677e:	4623      	mov	r3, r4
 8006780:	71fb      	strb	r3, [r7, #7]
 8006782:	4603      	mov	r3, r0
 8006784:	71bb      	strb	r3, [r7, #6]
 8006786:	460b      	mov	r3, r1
 8006788:	717b      	strb	r3, [r7, #5]
 800678a:	4613      	mov	r3, r2
 800678c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8006792:	79bb      	ldrb	r3, [r7, #6]
 8006794:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8006796:	797b      	ldrb	r3, [r7, #5]
 8006798:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800679a:	793b      	ldrb	r3, [r7, #4]
 800679c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800679e:	f107 030c 	add.w	r3, r7, #12
 80067a2:	2204      	movs	r2, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	2095      	movs	r0, #149	@ 0x95
 80067a8:	f000 fb70 	bl	8006e8c <SUBGRF_WriteCommand>
}
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd90      	pop	{r4, r7, pc}

080067b4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80067b4:	b590      	push	{r4, r7, lr}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4604      	mov	r4, r0
 80067bc:	4608      	mov	r0, r1
 80067be:	4611      	mov	r1, r2
 80067c0:	461a      	mov	r2, r3
 80067c2:	4623      	mov	r3, r4
 80067c4:	80fb      	strh	r3, [r7, #6]
 80067c6:	4603      	mov	r3, r0
 80067c8:	80bb      	strh	r3, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	807b      	strh	r3, [r7, #2]
 80067ce:	4613      	mov	r3, r2
 80067d0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	0a1b      	lsrs	r3, r3, #8
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80067dc:	88fb      	ldrh	r3, [r7, #6]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80067e2:	88bb      	ldrh	r3, [r7, #4]
 80067e4:	0a1b      	lsrs	r3, r3, #8
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80067ec:	88bb      	ldrh	r3, [r7, #4]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80067f2:	887b      	ldrh	r3, [r7, #2]
 80067f4:	0a1b      	lsrs	r3, r3, #8
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80067fc:	887b      	ldrh	r3, [r7, #2]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8006802:	883b      	ldrh	r3, [r7, #0]
 8006804:	0a1b      	lsrs	r3, r3, #8
 8006806:	b29b      	uxth	r3, r3
 8006808:	b2db      	uxtb	r3, r3
 800680a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800680c:	883b      	ldrh	r3, [r7, #0]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8006812:	f107 0308 	add.w	r3, r7, #8
 8006816:	2208      	movs	r2, #8
 8006818:	4619      	mov	r1, r3
 800681a:	2008      	movs	r0, #8
 800681c:	f000 fb36 	bl	8006e8c <SUBGRF_WriteCommand>
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}

08006828 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	6039      	str	r1, [r7, #0]
 8006832:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	b2db      	uxtb	r3, r3
 800683c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	0c1b      	lsrs	r3, r3, #16
 8006842:	b2db      	uxtb	r3, r3
 8006844:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	0a1b      	lsrs	r3, r3, #8
 800684a:	b2db      	uxtb	r3, r3
 800684c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8006854:	f107 030c 	add.w	r3, r7, #12
 8006858:	2204      	movs	r2, #4
 800685a:	4619      	mov	r1, r3
 800685c:	2097      	movs	r0, #151	@ 0x97
 800685e:	f000 fb15 	bl	8006e8c <SUBGRF_WriteCommand>
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800686c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800687a:	4b1d      	ldr	r3, [pc, #116]	@ (80068f0 <SUBGRF_SetRfFrequency+0x84>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f083 0301 	eor.w	r3, r3, #1
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ff27 	bl	80066dc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800688e:	4b18      	ldr	r3, [pc, #96]	@ (80068f0 <SUBGRF_SetRfFrequency+0x84>)
 8006890:	2201      	movs	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	461c      	mov	r4, r3
 800689a:	4615      	mov	r5, r2
 800689c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80068a0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80068a4:	4a13      	ldr	r2, [pc, #76]	@ (80068f4 <SUBGRF_SetRfFrequency+0x88>)
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	4640      	mov	r0, r8
 80068ac:	4649      	mov	r1, r9
 80068ae:	f7fa f9c3 	bl	8000c38 <__aeabi_uldivmod>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4613      	mov	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	0e1b      	lsrs	r3, r3, #24
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	0c1b      	lsrs	r3, r3, #16
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	0a1b      	lsrs	r3, r3, #8
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	2204      	movs	r2, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	2086      	movs	r0, #134	@ 0x86
 80068e2:	f000 fad3 	bl	8006e8c <SUBGRF_WriteCommand>
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068f0:	200005df 	.word	0x200005df
 80068f4:	01e84800 	.word	0x01e84800

080068f8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8006902:	79fa      	ldrb	r2, [r7, #7]
 8006904:	4b09      	ldr	r3, [pc, #36]	@ (800692c <SUBGRF_SetPacketType+0x34>)
 8006906:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800690e:	2100      	movs	r1, #0
 8006910:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8006914:	f000 fa4e 	bl	8006db4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006918:	1dfb      	adds	r3, r7, #7
 800691a:	2201      	movs	r2, #1
 800691c:	4619      	mov	r1, r3
 800691e:	208a      	movs	r0, #138	@ 0x8a
 8006920:	f000 fab4 	bl	8006e8c <SUBGRF_WriteCommand>
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200005dd 	.word	0x200005dd

08006930 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
    return PacketType;
 8006934:	4b02      	ldr	r3, [pc, #8]	@ (8006940 <SUBGRF_GetPacketType+0x10>)
 8006936:	781b      	ldrb	r3, [r3, #0]
}
 8006938:	4618      	mov	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr
 8006940:	200005dd 	.word	0x200005dd

08006944 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	71fb      	strb	r3, [r7, #7]
 800694e:	460b      	mov	r3, r1
 8006950:	71bb      	strb	r3, [r7, #6]
 8006952:	4613      	mov	r3, r2
 8006954:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d149      	bne.n	80069f0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800695c:	2000      	movs	r0, #0
 800695e:	f7ff fd7b 	bl	8006458 <RBI_GetRFOMaxPowerConfig>
 8006962:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8006964:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	429a      	cmp	r2, r3
 800696c:	da01      	bge.n	8006972 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b0e      	cmp	r3, #14
 8006976:	d10e      	bne.n	8006996 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8006978:	2301      	movs	r3, #1
 800697a:	2201      	movs	r2, #1
 800697c:	2100      	movs	r1, #0
 800697e:	2004      	movs	r0, #4
 8006980:	f7ff fef6 	bl	8006770 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006984:	79ba      	ldrb	r2, [r7, #6]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	b2db      	uxtb	r3, r3
 800698e:	330e      	adds	r3, #14
 8006990:	b2db      	uxtb	r3, r3
 8006992:	71bb      	strb	r3, [r7, #6]
 8006994:	e01f      	b.n	80069d6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b0a      	cmp	r3, #10
 800699a:	d10e      	bne.n	80069ba <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800699c:	2301      	movs	r3, #1
 800699e:	2201      	movs	r2, #1
 80069a0:	2100      	movs	r1, #0
 80069a2:	2001      	movs	r0, #1
 80069a4:	f7ff fee4 	bl	8006770 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80069a8:	79ba      	ldrb	r2, [r7, #6]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	330d      	adds	r3, #13
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	71bb      	strb	r3, [r7, #6]
 80069b8:	e00d      	b.n	80069d6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80069ba:	2301      	movs	r3, #1
 80069bc:	2201      	movs	r2, #1
 80069be:	2100      	movs	r1, #0
 80069c0:	2007      	movs	r0, #7
 80069c2:	f7ff fed5 	bl	8006770 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80069c6:	79ba      	ldrb	r2, [r7, #6]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	330e      	adds	r3, #14
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80069d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80069da:	f113 0f11 	cmn.w	r3, #17
 80069de:	da01      	bge.n	80069e4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80069e0:	23ef      	movs	r3, #239	@ 0xef
 80069e2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80069e4:	2118      	movs	r1, #24
 80069e6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80069ea:	f000 f9e3 	bl	8006db4 <SUBGRF_WriteRegister>
 80069ee:	e067      	b.n	8006ac0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80069f0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80069f4:	f000 f9f2 	bl	8006ddc <SUBGRF_ReadRegister>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f043 031e 	orr.w	r3, r3, #30
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	4619      	mov	r1, r3
 8006a02:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8006a06:	f000 f9d5 	bl	8006db4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	f7ff fd24 	bl	8006458 <RBI_GetRFOMaxPowerConfig>
 8006a10:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8006a12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	da01      	bge.n	8006a20 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b14      	cmp	r3, #20
 8006a24:	d10e      	bne.n	8006a44 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8006a26:	2301      	movs	r3, #1
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2105      	movs	r1, #5
 8006a2c:	2003      	movs	r0, #3
 8006a2e:	f7ff fe9f 	bl	8006770 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006a32:	79ba      	ldrb	r2, [r7, #6]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	3316      	adds	r3, #22
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	71bb      	strb	r3, [r7, #6]
 8006a42:	e031      	b.n	8006aa8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b11      	cmp	r3, #17
 8006a48:	d10e      	bne.n	8006a68 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2103      	movs	r1, #3
 8006a50:	2002      	movs	r0, #2
 8006a52:	f7ff fe8d 	bl	8006770 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006a56:	79ba      	ldrb	r2, [r7, #6]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	3316      	adds	r3, #22
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	71bb      	strb	r3, [r7, #6]
 8006a66:	e01f      	b.n	8006aa8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b0e      	cmp	r3, #14
 8006a6c:	d10e      	bne.n	8006a8c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8006a6e:	2301      	movs	r3, #1
 8006a70:	2200      	movs	r2, #0
 8006a72:	2102      	movs	r1, #2
 8006a74:	2002      	movs	r0, #2
 8006a76:	f7ff fe7b 	bl	8006770 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006a7a:	79ba      	ldrb	r2, [r7, #6]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	330e      	adds	r3, #14
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	71bb      	strb	r3, [r7, #6]
 8006a8a:	e00d      	b.n	8006aa8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2107      	movs	r1, #7
 8006a92:	2004      	movs	r0, #4
 8006a94:	f7ff fe6c 	bl	8006770 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006a98:	79ba      	ldrb	r2, [r7, #6]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	3316      	adds	r3, #22
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8006aa8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006aac:	f113 0f09 	cmn.w	r3, #9
 8006ab0:	da01      	bge.n	8006ab6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8006ab2:	23f7      	movs	r3, #247	@ 0xf7
 8006ab4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8006ab6:	2138      	movs	r1, #56	@ 0x38
 8006ab8:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8006abc:	f000 f97a 	bl	8006db4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8006ac0:	79bb      	ldrb	r3, [r7, #6]
 8006ac2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8006ac4:	797b      	ldrb	r3, [r7, #5]
 8006ac6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8006ac8:	f107 0308 	add.w	r3, r7, #8
 8006acc:	2202      	movs	r2, #2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	208e      	movs	r0, #142	@ 0x8e
 8006ad2:	f000 f9db 	bl	8006e8c <SUBGRF_WriteCommand>
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8006ae0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ae4:	b086      	sub	sp, #24
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006aee:	f107 0308 	add.w	r3, r7, #8
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	781a      	ldrb	r2, [r3, #0]
 8006afc:	4b5c      	ldr	r3, [pc, #368]	@ (8006c70 <SUBGRF_SetModulationParams+0x190>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d004      	beq.n	8006b0e <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff fef5 	bl	80068f8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	f200 80a5 	bhi.w	8006c62 <SUBGRF_SetModulationParams+0x182>
 8006b18:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <SUBGRF_SetModulationParams+0x40>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006bf1 	.word	0x08006bf1
 8006b28:	08006bb3 	.word	0x08006bb3
 8006b2c:	08006c1f 	.word	0x08006c1f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8006b30:	2308      	movs	r3, #8
 8006b32:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a4e      	ldr	r2, [pc, #312]	@ (8006c74 <SUBGRF_SetModulationParams+0x194>)
 8006b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	0c1b      	lsrs	r3, r3, #16
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	7b1b      	ldrb	r3, [r3, #12]
 8006b5a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	7b5b      	ldrb	r3, [r3, #13]
 8006b60:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	461c      	mov	r4, r3
 8006b6a:	4615      	mov	r5, r2
 8006b6c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8006b70:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8006b74:	4a40      	ldr	r2, [pc, #256]	@ (8006c78 <SUBGRF_SetModulationParams+0x198>)
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	f7fa f85b 	bl	8000c38 <__aeabi_uldivmod>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4613      	mov	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	0c1b      	lsrs	r3, r3, #16
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	0a1b      	lsrs	r3, r3, #8
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006ba0:	7cfb      	ldrb	r3, [r7, #19]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	f107 0308 	add.w	r3, r7, #8
 8006ba8:	4619      	mov	r1, r3
 8006baa:	208b      	movs	r0, #139	@ 0x8b
 8006bac:	f000 f96e 	bl	8006e8c <SUBGRF_WriteCommand>
        break;
 8006bb0:	e058      	b.n	8006c64 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	4a2e      	ldr	r2, [pc, #184]	@ (8006c74 <SUBGRF_SetModulationParams+0x194>)
 8006bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	0c1b      	lsrs	r3, r3, #16
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	0a1b      	lsrs	r3, r3, #8
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	7d1b      	ldrb	r3, [r3, #20]
 8006bdc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006bde:	7cfb      	ldrb	r3, [r7, #19]
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	4619      	mov	r1, r3
 8006be8:	208b      	movs	r0, #139	@ 0x8b
 8006bea:	f000 f94f 	bl	8006e8c <SUBGRF_WriteCommand>
        break;
 8006bee:	e039      	b.n	8006c64 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	7e1b      	ldrb	r3, [r3, #24]
 8006bf8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	7e5b      	ldrb	r3, [r3, #25]
 8006bfe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	7e9b      	ldrb	r3, [r3, #26]
 8006c04:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	7edb      	ldrb	r3, [r3, #27]
 8006c0a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006c0c:	7cfb      	ldrb	r3, [r7, #19]
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f107 0308 	add.w	r3, r7, #8
 8006c14:	4619      	mov	r1, r3
 8006c16:	208b      	movs	r0, #139	@ 0x8b
 8006c18:	f000 f938 	bl	8006e8c <SUBGRF_WriteCommand>

        break;
 8006c1c:	e022      	b.n	8006c64 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8006c1e:	2305      	movs	r3, #5
 8006c20:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4a13      	ldr	r2, [pc, #76]	@ (8006c74 <SUBGRF_SetModulationParams+0x194>)
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	0c1b      	lsrs	r3, r3, #16
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	7b1b      	ldrb	r3, [r3, #12]
 8006c48:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	7b5b      	ldrb	r3, [r3, #13]
 8006c4e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006c50:	7cfb      	ldrb	r3, [r7, #19]
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	f107 0308 	add.w	r3, r7, #8
 8006c58:	4619      	mov	r1, r3
 8006c5a:	208b      	movs	r0, #139	@ 0x8b
 8006c5c:	f000 f916 	bl	8006e8c <SUBGRF_WriteCommand>
        break;
 8006c60:	e000      	b.n	8006c64 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8006c62:	bf00      	nop
    }
}
 8006c64:	bf00      	nop
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c6e:	bf00      	nop
 8006c70:	200005dd 	.word	0x200005dd
 8006c74:	3d090000 	.word	0x3d090000
 8006c78:	01e84800 	.word	0x01e84800

08006c7c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006c88:	f107 030c 	add.w	r3, r7, #12
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	4b44      	ldr	r3, [pc, #272]	@ (8006dac <SUBGRF_SetPacketParams+0x130>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d004      	beq.n	8006caa <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fe27 	bl	80068f8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d878      	bhi.n	8006da4 <SUBGRF_SetPacketParams+0x128>
 8006cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <SUBGRF_SetPacketParams+0x3c>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cc9 	.word	0x08006cc9
 8006cbc:	08006d59 	.word	0x08006d59
 8006cc0:	08006d4d 	.word	0x08006d4d
 8006cc4:	08006cc9 	.word	0x08006cc9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7a5b      	ldrb	r3, [r3, #9]
 8006ccc:	2bf1      	cmp	r3, #241	@ 0xf1
 8006cce:	d10a      	bne.n	8006ce6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8006cd0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006cd4:	f7ff fc39 	bl	800654a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006cd8:	f248 0005 	movw	r0, #32773	@ 0x8005
 8006cdc:	f7ff fc55 	bl	800658a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	75bb      	strb	r3, [r7, #22]
 8006ce4:	e011      	b.n	8006d0a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	7a5b      	ldrb	r3, [r3, #9]
 8006cea:	2bf2      	cmp	r3, #242	@ 0xf2
 8006cec:	d10a      	bne.n	8006d04 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8006cee:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8006cf2:	f7ff fc2a 	bl	800654a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8006cf6:	f241 0021 	movw	r0, #4129	@ 0x1021
 8006cfa:	f7ff fc46 	bl	800658a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8006cfe:	2306      	movs	r3, #6
 8006d00:	75bb      	strb	r3, [r7, #22]
 8006d02:	e002      	b.n	8006d0a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	7a5b      	ldrb	r3, [r3, #9]
 8006d08:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8006d0a:	2309      	movs	r3, #9
 8006d0c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	885b      	ldrh	r3, [r3, #2]
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	885b      	ldrh	r3, [r3, #2]
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	791b      	ldrb	r3, [r3, #4]
 8006d26:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	795b      	ldrb	r3, [r3, #5]
 8006d2c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	799b      	ldrb	r3, [r3, #6]
 8006d32:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	79db      	ldrb	r3, [r3, #7]
 8006d38:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	7a1b      	ldrb	r3, [r3, #8]
 8006d3e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8006d40:	7dbb      	ldrb	r3, [r7, #22]
 8006d42:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	7a9b      	ldrb	r3, [r3, #10]
 8006d48:	753b      	strb	r3, [r7, #20]
        break;
 8006d4a:	e022      	b.n	8006d92 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7b1b      	ldrb	r3, [r3, #12]
 8006d54:	733b      	strb	r3, [r7, #12]
        break;
 8006d56:	e01c      	b.n	8006d92 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8006d58:	2306      	movs	r3, #6
 8006d5a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	89db      	ldrh	r3, [r3, #14]
 8006d60:	0a1b      	lsrs	r3, r3, #8
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	89db      	ldrh	r3, [r3, #14]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	7c1a      	ldrb	r2, [r3, #16]
 8006d74:	4b0e      	ldr	r3, [pc, #56]	@ (8006db0 <SUBGRF_SetPacketParams+0x134>)
 8006d76:	4611      	mov	r1, r2
 8006d78:	7019      	strb	r1, [r3, #0]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7c5b      	ldrb	r3, [r3, #17]
 8006d82:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	7c9b      	ldrb	r3, [r3, #18]
 8006d88:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7cdb      	ldrb	r3, [r3, #19]
 8006d8e:	747b      	strb	r3, [r7, #17]
        break;
 8006d90:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	f107 030c 	add.w	r3, r7, #12
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	208c      	movs	r0, #140	@ 0x8c
 8006d9e:	f000 f875 	bl	8006e8c <SUBGRF_WriteCommand>
 8006da2:	e000      	b.n	8006da6 <SUBGRF_SetPacketParams+0x12a>
        return;
 8006da4:	bf00      	nop
}
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	200005dd 	.word	0x200005dd
 8006db0:	200005de 	.word	0x200005de

08006db4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	460a      	mov	r2, r1
 8006dbe:	80fb      	strh	r3, [r7, #6]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006dc4:	1d7a      	adds	r2, r7, #5
 8006dc6:	88f9      	ldrh	r1, [r7, #6]
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4803      	ldr	r0, [pc, #12]	@ (8006dd8 <SUBGRF_WriteRegister+0x24>)
 8006dcc:	f7fd fb4e 	bl	800446c <HAL_SUBGHZ_WriteRegisters>
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20000320 	.word	0x20000320

08006ddc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8006de6:	f107 020f 	add.w	r2, r7, #15
 8006dea:	88f9      	ldrh	r1, [r7, #6]
 8006dec:	2301      	movs	r3, #1
 8006dee:	4804      	ldr	r0, [pc, #16]	@ (8006e00 <SUBGRF_ReadRegister+0x24>)
 8006df0:	f7fd fb9b 	bl	800452a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000320 	.word	0x20000320

08006e04 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	6039      	str	r1, [r7, #0]
 8006e0e:	80fb      	strh	r3, [r7, #6]
 8006e10:	4613      	mov	r3, r2
 8006e12:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e14:	f3ef 8310 	mrs	r3, PRIMASK
 8006e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006e1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e1e:	b672      	cpsid	i
}
 8006e20:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8006e22:	88bb      	ldrh	r3, [r7, #4]
 8006e24:	88f9      	ldrh	r1, [r7, #6]
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	4806      	ldr	r0, [pc, #24]	@ (8006e44 <SUBGRF_WriteRegisters+0x40>)
 8006e2a:	f7fd fb1f 	bl	800446c <HAL_SUBGHZ_WriteRegisters>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f383 8810 	msr	PRIMASK, r3
}
 8006e38:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006e3a:	bf00      	nop
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20000320 	.word	0x20000320

08006e48 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	71fb      	strb	r3, [r7, #7]
 8006e54:	4613      	mov	r3, r2
 8006e56:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e58:	f3ef 8310 	mrs	r3, PRIMASK
 8006e5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006e60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e62:	b672      	cpsid	i
}
 8006e64:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8006e66:	79bb      	ldrb	r3, [r7, #6]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	79f9      	ldrb	r1, [r7, #7]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	4806      	ldr	r0, [pc, #24]	@ (8006e88 <SUBGRF_WriteBuffer+0x40>)
 8006e70:	f7fd fc6f 	bl	8004752 <HAL_SUBGHZ_WriteBuffer>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f383 8810 	msr	PRIMASK, r3
}
 8006e7e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006e80:	bf00      	nop
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000320 	.word	0x20000320

08006e8c <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	6039      	str	r1, [r7, #0]
 8006e96:	71fb      	strb	r3, [r7, #7]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006ea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ea6:	b672      	cpsid	i
}
 8006ea8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8006eaa:	88bb      	ldrh	r3, [r7, #4]
 8006eac:	79f9      	ldrb	r1, [r7, #7]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4806      	ldr	r0, [pc, #24]	@ (8006ecc <SUBGRF_WriteCommand+0x40>)
 8006eb2:	f7fd fb9b 	bl	80045ec <HAL_SUBGHZ_ExecSetCmd>
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f383 8810 	msr	PRIMASK, r3
}
 8006ec0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006ec2:	bf00      	nop
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000320 	.word	0x20000320

08006ed0 <SUBGRF_SetRfTxPower>:
    }
    RBI_ConfigRFSwitch(state);
}

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8006eda:	2301      	movs	r3, #1
 8006edc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8006ede:	f7ff faa6 	bl	800642e <RBI_GetTxConfig>
 8006ee2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d016      	beq.n	8006f18 <SUBGRF_SetRfTxPower+0x48>
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	dc16      	bgt.n	8006f1e <SUBGRF_SetRfTxPower+0x4e>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <SUBGRF_SetRfTxPower+0x2e>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d00a      	beq.n	8006f12 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8006efc:	e00f      	b.n	8006f1e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8006efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f02:	2b0f      	cmp	r3, #15
 8006f04:	dd02      	ble.n	8006f0c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8006f06:	2302      	movs	r3, #2
 8006f08:	73fb      	strb	r3, [r7, #15]
            break;
 8006f0a:	e009      	b.n	8006f20 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
            break;
 8006f10:	e006      	b.n	8006f20 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8006f12:	2301      	movs	r3, #1
 8006f14:	73fb      	strb	r3, [r7, #15]
            break;
 8006f16:	e003      	b.n	8006f20 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	73fb      	strb	r3, [r7, #15]
            break;
 8006f1c:	e000      	b.n	8006f20 <SUBGRF_SetRfTxPower+0x50>
            break;
 8006f1e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8006f20:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2202      	movs	r2, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fd0b 	bl	8006944 <SUBGRF_SetTxParams>

    return paSelect;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8006f40:	4b03      	ldr	r3, [pc, #12]	@ (8006f50 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2001      	movs	r0, #1
 8006f46:	4798      	blx	r3
}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	200005e0 	.word	0x200005e0

08006f54 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8006f5c:	4b03      	ldr	r3, [pc, #12]	@ (8006f6c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2002      	movs	r0, #2
 8006f62:	4798      	blx	r3
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	200005e0 	.word	0x200005e0

08006f70 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8006f78:	4b03      	ldr	r3, [pc, #12]	@ (8006f88 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2040      	movs	r0, #64	@ 0x40
 8006f7e:	4798      	blx	r3
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200005e0 	.word	0x200005e0

08006f8c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d005      	beq.n	8006fae <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8006fa2:	e00a      	b.n	8006fba <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8006fa4:	4b07      	ldr	r3, [pc, #28]	@ (8006fc4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2080      	movs	r0, #128	@ 0x80
 8006faa:	4798      	blx	r3
            break;
 8006fac:	e005      	b.n	8006fba <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8006fae:	4b05      	ldr	r3, [pc, #20]	@ (8006fc4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006fb6:	4798      	blx	r3
            break;
 8006fb8:	bf00      	nop
    }
}
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	200005e0 	.word	0x200005e0

08006fc8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8006fd0:	4b04      	ldr	r3, [pc, #16]	@ (8006fe4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006fd8:	4798      	blx	r3
}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200005e0 	.word	0x200005e0

08006fe8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8006ff0:	4b03      	ldr	r3, [pc, #12]	@ (8007000 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2020      	movs	r0, #32
 8006ff6:	4798      	blx	r3
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	200005e0 	.word	0x200005e0

08007004 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800700c:	4b03      	ldr	r3, [pc, #12]	@ (800701c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2004      	movs	r0, #4
 8007012:	4798      	blx	r3
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	200005e0 	.word	0x200005e0

08007020 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8007028:	4b03      	ldr	r3, [pc, #12]	@ (8007038 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2008      	movs	r0, #8
 800702e:	4798      	blx	r3
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	200005e0 	.word	0x200005e0

0800703c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8007044:	4b03      	ldr	r3, [pc, #12]	@ (8007054 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2010      	movs	r0, #16
 800704a:	4798      	blx	r3
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	200005e0 	.word	0x200005e0

08007058 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8007060:	4b04      	ldr	r3, [pc, #16]	@ (8007074 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007068:	4798      	blx	r3
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200005e0 	.word	0x200005e0

08007078 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8007082:	f7ff f9e2 	bl	800644a <RBI_IsDCDC>
 8007086:	4603      	mov	r3, r0
 8007088:	2b01      	cmp	r3, #1
 800708a:	d112      	bne.n	80070b2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800708c:	f640 1023 	movw	r0, #2339	@ 0x923
 8007090:	f7ff fea4 	bl	8006ddc <SUBGRF_ReadRegister>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	f023 0306 	bic.w	r3, r3, #6
 800709e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80070a0:	7bfa      	ldrb	r2, [r7, #15]
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	4619      	mov	r1, r3
 80070aa:	f640 1023 	movw	r0, #2339	@ 0x923
 80070ae:	f7ff fe81 	bl	8006db4 <SUBGRF_WriteRegister>
  }
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <__cvt>:
 80070ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	461d      	mov	r5, r3
 80070c4:	4614      	mov	r4, r2
 80070c6:	bfbc      	itt	lt
 80070c8:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80070cc:	4614      	movlt	r4, r2
 80070ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80070d0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80070d2:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80070d6:	bfb6      	itet	lt
 80070d8:	461d      	movlt	r5, r3
 80070da:	2300      	movge	r3, #0
 80070dc:	232d      	movlt	r3, #45	@ 0x2d
 80070de:	7013      	strb	r3, [r2, #0]
 80070e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070e2:	f023 0820 	bic.w	r8, r3, #32
 80070e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070ea:	d005      	beq.n	80070f8 <__cvt+0x3e>
 80070ec:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80070f0:	d100      	bne.n	80070f4 <__cvt+0x3a>
 80070f2:	3601      	adds	r6, #1
 80070f4:	2302      	movs	r3, #2
 80070f6:	e000      	b.n	80070fa <__cvt+0x40>
 80070f8:	2303      	movs	r3, #3
 80070fa:	aa07      	add	r2, sp, #28
 80070fc:	9204      	str	r2, [sp, #16]
 80070fe:	aa06      	add	r2, sp, #24
 8007100:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007104:	e9cd 3600 	strd	r3, r6, [sp]
 8007108:	4622      	mov	r2, r4
 800710a:	462b      	mov	r3, r5
 800710c:	f001 f96c 	bl	80083e8 <_dtoa_r>
 8007110:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007114:	4607      	mov	r7, r0
 8007116:	d119      	bne.n	800714c <__cvt+0x92>
 8007118:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800711a:	07db      	lsls	r3, r3, #31
 800711c:	d50e      	bpl.n	800713c <__cvt+0x82>
 800711e:	eb00 0906 	add.w	r9, r0, r6
 8007122:	2200      	movs	r2, #0
 8007124:	2300      	movs	r3, #0
 8007126:	4620      	mov	r0, r4
 8007128:	4629      	mov	r1, r5
 800712a:	f7f9 fca5 	bl	8000a78 <__aeabi_dcmpeq>
 800712e:	b108      	cbz	r0, 8007134 <__cvt+0x7a>
 8007130:	f8cd 901c 	str.w	r9, [sp, #28]
 8007134:	2230      	movs	r2, #48	@ 0x30
 8007136:	9b07      	ldr	r3, [sp, #28]
 8007138:	454b      	cmp	r3, r9
 800713a:	d31e      	bcc.n	800717a <__cvt+0xc0>
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007140:	1bdb      	subs	r3, r3, r7
 8007142:	4638      	mov	r0, r7
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	b008      	add	sp, #32
 8007148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007150:	eb00 0906 	add.w	r9, r0, r6
 8007154:	d1e5      	bne.n	8007122 <__cvt+0x68>
 8007156:	7803      	ldrb	r3, [r0, #0]
 8007158:	2b30      	cmp	r3, #48	@ 0x30
 800715a:	d10a      	bne.n	8007172 <__cvt+0xb8>
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	4620      	mov	r0, r4
 8007162:	4629      	mov	r1, r5
 8007164:	f7f9 fc88 	bl	8000a78 <__aeabi_dcmpeq>
 8007168:	b918      	cbnz	r0, 8007172 <__cvt+0xb8>
 800716a:	f1c6 0601 	rsb	r6, r6, #1
 800716e:	f8ca 6000 	str.w	r6, [sl]
 8007172:	f8da 3000 	ldr.w	r3, [sl]
 8007176:	4499      	add	r9, r3
 8007178:	e7d3      	b.n	8007122 <__cvt+0x68>
 800717a:	1c59      	adds	r1, r3, #1
 800717c:	9107      	str	r1, [sp, #28]
 800717e:	701a      	strb	r2, [r3, #0]
 8007180:	e7d9      	b.n	8007136 <__cvt+0x7c>

08007182 <__exponent>:
 8007182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007184:	2900      	cmp	r1, #0
 8007186:	bfba      	itte	lt
 8007188:	4249      	neglt	r1, r1
 800718a:	232d      	movlt	r3, #45	@ 0x2d
 800718c:	232b      	movge	r3, #43	@ 0x2b
 800718e:	2909      	cmp	r1, #9
 8007190:	7002      	strb	r2, [r0, #0]
 8007192:	7043      	strb	r3, [r0, #1]
 8007194:	dd29      	ble.n	80071ea <__exponent+0x68>
 8007196:	f10d 0307 	add.w	r3, sp, #7
 800719a:	461d      	mov	r5, r3
 800719c:	270a      	movs	r7, #10
 800719e:	461a      	mov	r2, r3
 80071a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80071a4:	fb07 1416 	mls	r4, r7, r6, r1
 80071a8:	3430      	adds	r4, #48	@ 0x30
 80071aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80071ae:	460c      	mov	r4, r1
 80071b0:	2c63      	cmp	r4, #99	@ 0x63
 80071b2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80071b6:	4631      	mov	r1, r6
 80071b8:	dcf1      	bgt.n	800719e <__exponent+0x1c>
 80071ba:	3130      	adds	r1, #48	@ 0x30
 80071bc:	1e94      	subs	r4, r2, #2
 80071be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80071c2:	1c41      	adds	r1, r0, #1
 80071c4:	4623      	mov	r3, r4
 80071c6:	42ab      	cmp	r3, r5
 80071c8:	d30a      	bcc.n	80071e0 <__exponent+0x5e>
 80071ca:	f10d 0309 	add.w	r3, sp, #9
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	42ac      	cmp	r4, r5
 80071d2:	bf88      	it	hi
 80071d4:	2300      	movhi	r3, #0
 80071d6:	3302      	adds	r3, #2
 80071d8:	4403      	add	r3, r0
 80071da:	1a18      	subs	r0, r3, r0
 80071dc:	b003      	add	sp, #12
 80071de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80071e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80071e8:	e7ed      	b.n	80071c6 <__exponent+0x44>
 80071ea:	2330      	movs	r3, #48	@ 0x30
 80071ec:	3130      	adds	r1, #48	@ 0x30
 80071ee:	7083      	strb	r3, [r0, #2]
 80071f0:	70c1      	strb	r1, [r0, #3]
 80071f2:	1d03      	adds	r3, r0, #4
 80071f4:	e7f1      	b.n	80071da <__exponent+0x58>
	...

080071f8 <_printf_float>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	b091      	sub	sp, #68	@ 0x44
 80071fe:	460c      	mov	r4, r1
 8007200:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007204:	4616      	mov	r6, r2
 8007206:	461f      	mov	r7, r3
 8007208:	4605      	mov	r5, r0
 800720a:	f000 ffe9 	bl	80081e0 <_localeconv_r>
 800720e:	6803      	ldr	r3, [r0, #0]
 8007210:	9308      	str	r3, [sp, #32]
 8007212:	4618      	mov	r0, r3
 8007214:	f7f9 f804 	bl	8000220 <strlen>
 8007218:	2300      	movs	r3, #0
 800721a:	930e      	str	r3, [sp, #56]	@ 0x38
 800721c:	f8d8 3000 	ldr.w	r3, [r8]
 8007220:	9009      	str	r0, [sp, #36]	@ 0x24
 8007222:	3307      	adds	r3, #7
 8007224:	f023 0307 	bic.w	r3, r3, #7
 8007228:	f103 0208 	add.w	r2, r3, #8
 800722c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007230:	f8d4 b000 	ldr.w	fp, [r4]
 8007234:	f8c8 2000 	str.w	r2, [r8]
 8007238:	e9d3 8900 	ldrd	r8, r9, [r3]
 800723c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007240:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007242:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007246:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800724a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800724e:	4b9d      	ldr	r3, [pc, #628]	@ (80074c4 <_printf_float+0x2cc>)
 8007250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007254:	f7f9 fc42 	bl	8000adc <__aeabi_dcmpun>
 8007258:	bb70      	cbnz	r0, 80072b8 <_printf_float+0xc0>
 800725a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800725e:	4b99      	ldr	r3, [pc, #612]	@ (80074c4 <_printf_float+0x2cc>)
 8007260:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007264:	f7f9 fc1c 	bl	8000aa0 <__aeabi_dcmple>
 8007268:	bb30      	cbnz	r0, 80072b8 <_printf_float+0xc0>
 800726a:	2200      	movs	r2, #0
 800726c:	2300      	movs	r3, #0
 800726e:	4640      	mov	r0, r8
 8007270:	4649      	mov	r1, r9
 8007272:	f7f9 fc0b 	bl	8000a8c <__aeabi_dcmplt>
 8007276:	b110      	cbz	r0, 800727e <_printf_float+0x86>
 8007278:	232d      	movs	r3, #45	@ 0x2d
 800727a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800727e:	4a92      	ldr	r2, [pc, #584]	@ (80074c8 <_printf_float+0x2d0>)
 8007280:	4b92      	ldr	r3, [pc, #584]	@ (80074cc <_printf_float+0x2d4>)
 8007282:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007286:	bf8c      	ite	hi
 8007288:	4690      	movhi	r8, r2
 800728a:	4698      	movls	r8, r3
 800728c:	2303      	movs	r3, #3
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	f02b 0304 	bic.w	r3, fp, #4
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	f04f 0900 	mov.w	r9, #0
 800729a:	9700      	str	r7, [sp, #0]
 800729c:	4633      	mov	r3, r6
 800729e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80072a0:	4621      	mov	r1, r4
 80072a2:	4628      	mov	r0, r5
 80072a4:	f000 f9d4 	bl	8007650 <_printf_common>
 80072a8:	3001      	adds	r0, #1
 80072aa:	f040 808f 	bne.w	80073cc <_printf_float+0x1d4>
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072b2:	b011      	add	sp, #68	@ 0x44
 80072b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	4640      	mov	r0, r8
 80072be:	4649      	mov	r1, r9
 80072c0:	f7f9 fc0c 	bl	8000adc <__aeabi_dcmpun>
 80072c4:	b140      	cbz	r0, 80072d8 <_printf_float+0xe0>
 80072c6:	464b      	mov	r3, r9
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfbc      	itt	lt
 80072cc:	232d      	movlt	r3, #45	@ 0x2d
 80072ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80072d2:	4a7f      	ldr	r2, [pc, #508]	@ (80074d0 <_printf_float+0x2d8>)
 80072d4:	4b7f      	ldr	r3, [pc, #508]	@ (80074d4 <_printf_float+0x2dc>)
 80072d6:	e7d4      	b.n	8007282 <_printf_float+0x8a>
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80072e0:	d13f      	bne.n	8007362 <_printf_float+0x16a>
 80072e2:	2306      	movs	r3, #6
 80072e4:	6063      	str	r3, [r4, #4]
 80072e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80072ea:	2200      	movs	r2, #0
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	9206      	str	r2, [sp, #24]
 80072f0:	aa0e      	add	r2, sp, #56	@ 0x38
 80072f2:	e9cd a204 	strd	sl, r2, [sp, #16]
 80072f6:	aa0d      	add	r2, sp, #52	@ 0x34
 80072f8:	9203      	str	r2, [sp, #12]
 80072fa:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80072fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007302:	6863      	ldr	r3, [r4, #4]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	4642      	mov	r2, r8
 8007308:	464b      	mov	r3, r9
 800730a:	4628      	mov	r0, r5
 800730c:	910a      	str	r1, [sp, #40]	@ 0x28
 800730e:	f7ff fed4 	bl	80070ba <__cvt>
 8007312:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007314:	2947      	cmp	r1, #71	@ 0x47
 8007316:	4680      	mov	r8, r0
 8007318:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800731a:	d128      	bne.n	800736e <_printf_float+0x176>
 800731c:	1cc8      	adds	r0, r1, #3
 800731e:	db02      	blt.n	8007326 <_printf_float+0x12e>
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	4299      	cmp	r1, r3
 8007324:	dd40      	ble.n	80073a8 <_printf_float+0x1b0>
 8007326:	f1aa 0a02 	sub.w	sl, sl, #2
 800732a:	fa5f fa8a 	uxtb.w	sl, sl
 800732e:	3901      	subs	r1, #1
 8007330:	4652      	mov	r2, sl
 8007332:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007336:	910d      	str	r1, [sp, #52]	@ 0x34
 8007338:	f7ff ff23 	bl	8007182 <__exponent>
 800733c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800733e:	1813      	adds	r3, r2, r0
 8007340:	2a01      	cmp	r2, #1
 8007342:	4681      	mov	r9, r0
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	dc02      	bgt.n	800734e <_printf_float+0x156>
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	07d2      	lsls	r2, r2, #31
 800734c:	d501      	bpl.n	8007352 <_printf_float+0x15a>
 800734e:	3301      	adds	r3, #1
 8007350:	6123      	str	r3, [r4, #16]
 8007352:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007356:	2b00      	cmp	r3, #0
 8007358:	d09f      	beq.n	800729a <_printf_float+0xa2>
 800735a:	232d      	movs	r3, #45	@ 0x2d
 800735c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007360:	e79b      	b.n	800729a <_printf_float+0xa2>
 8007362:	2947      	cmp	r1, #71	@ 0x47
 8007364:	d1bf      	bne.n	80072e6 <_printf_float+0xee>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1bd      	bne.n	80072e6 <_printf_float+0xee>
 800736a:	2301      	movs	r3, #1
 800736c:	e7ba      	b.n	80072e4 <_printf_float+0xec>
 800736e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007372:	d9dc      	bls.n	800732e <_printf_float+0x136>
 8007374:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007378:	d118      	bne.n	80073ac <_printf_float+0x1b4>
 800737a:	2900      	cmp	r1, #0
 800737c:	6863      	ldr	r3, [r4, #4]
 800737e:	dd0b      	ble.n	8007398 <_printf_float+0x1a0>
 8007380:	6121      	str	r1, [r4, #16]
 8007382:	b913      	cbnz	r3, 800738a <_printf_float+0x192>
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	07d0      	lsls	r0, r2, #31
 8007388:	d502      	bpl.n	8007390 <_printf_float+0x198>
 800738a:	3301      	adds	r3, #1
 800738c:	440b      	add	r3, r1
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007392:	f04f 0900 	mov.w	r9, #0
 8007396:	e7dc      	b.n	8007352 <_printf_float+0x15a>
 8007398:	b913      	cbnz	r3, 80073a0 <_printf_float+0x1a8>
 800739a:	6822      	ldr	r2, [r4, #0]
 800739c:	07d2      	lsls	r2, r2, #31
 800739e:	d501      	bpl.n	80073a4 <_printf_float+0x1ac>
 80073a0:	3302      	adds	r3, #2
 80073a2:	e7f4      	b.n	800738e <_printf_float+0x196>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e7f2      	b.n	800738e <_printf_float+0x196>
 80073a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80073ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ae:	4299      	cmp	r1, r3
 80073b0:	db05      	blt.n	80073be <_printf_float+0x1c6>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	6121      	str	r1, [r4, #16]
 80073b6:	07d8      	lsls	r0, r3, #31
 80073b8:	d5ea      	bpl.n	8007390 <_printf_float+0x198>
 80073ba:	1c4b      	adds	r3, r1, #1
 80073bc:	e7e7      	b.n	800738e <_printf_float+0x196>
 80073be:	2900      	cmp	r1, #0
 80073c0:	bfd4      	ite	le
 80073c2:	f1c1 0202 	rsble	r2, r1, #2
 80073c6:	2201      	movgt	r2, #1
 80073c8:	4413      	add	r3, r2
 80073ca:	e7e0      	b.n	800738e <_printf_float+0x196>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	055a      	lsls	r2, r3, #21
 80073d0:	d407      	bmi.n	80073e2 <_printf_float+0x1ea>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	4642      	mov	r2, r8
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	d12b      	bne.n	8007438 <_printf_float+0x240>
 80073e0:	e765      	b.n	80072ae <_printf_float+0xb6>
 80073e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073e6:	f240 80dd 	bls.w	80075a4 <_printf_float+0x3ac>
 80073ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073ee:	2200      	movs	r2, #0
 80073f0:	2300      	movs	r3, #0
 80073f2:	f7f9 fb41 	bl	8000a78 <__aeabi_dcmpeq>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d033      	beq.n	8007462 <_printf_float+0x26a>
 80073fa:	4a37      	ldr	r2, [pc, #220]	@ (80074d8 <_printf_float+0x2e0>)
 80073fc:	2301      	movs	r3, #1
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	f43f af52 	beq.w	80072ae <_printf_float+0xb6>
 800740a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800740e:	4543      	cmp	r3, r8
 8007410:	db02      	blt.n	8007418 <_printf_float+0x220>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	07d8      	lsls	r0, r3, #31
 8007416:	d50f      	bpl.n	8007438 <_printf_float+0x240>
 8007418:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800741c:	4631      	mov	r1, r6
 800741e:	4628      	mov	r0, r5
 8007420:	47b8      	blx	r7
 8007422:	3001      	adds	r0, #1
 8007424:	f43f af43 	beq.w	80072ae <_printf_float+0xb6>
 8007428:	f04f 0900 	mov.w	r9, #0
 800742c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007430:	f104 0a1a 	add.w	sl, r4, #26
 8007434:	45c8      	cmp	r8, r9
 8007436:	dc09      	bgt.n	800744c <_printf_float+0x254>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	079b      	lsls	r3, r3, #30
 800743c:	f100 8103 	bmi.w	8007646 <_printf_float+0x44e>
 8007440:	68e0      	ldr	r0, [r4, #12]
 8007442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007444:	4298      	cmp	r0, r3
 8007446:	bfb8      	it	lt
 8007448:	4618      	movlt	r0, r3
 800744a:	e732      	b.n	80072b2 <_printf_float+0xba>
 800744c:	2301      	movs	r3, #1
 800744e:	4652      	mov	r2, sl
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	f43f af29 	beq.w	80072ae <_printf_float+0xb6>
 800745c:	f109 0901 	add.w	r9, r9, #1
 8007460:	e7e8      	b.n	8007434 <_printf_float+0x23c>
 8007462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007464:	2b00      	cmp	r3, #0
 8007466:	dc39      	bgt.n	80074dc <_printf_float+0x2e4>
 8007468:	4a1b      	ldr	r2, [pc, #108]	@ (80074d8 <_printf_float+0x2e0>)
 800746a:	2301      	movs	r3, #1
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f af1b 	beq.w	80072ae <_printf_float+0xb6>
 8007478:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800747c:	ea59 0303 	orrs.w	r3, r9, r3
 8007480:	d102      	bne.n	8007488 <_printf_float+0x290>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	07d9      	lsls	r1, r3, #31
 8007486:	d5d7      	bpl.n	8007438 <_printf_float+0x240>
 8007488:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800748c:	4631      	mov	r1, r6
 800748e:	4628      	mov	r0, r5
 8007490:	47b8      	blx	r7
 8007492:	3001      	adds	r0, #1
 8007494:	f43f af0b 	beq.w	80072ae <_printf_float+0xb6>
 8007498:	f04f 0a00 	mov.w	sl, #0
 800749c:	f104 0b1a 	add.w	fp, r4, #26
 80074a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074a2:	425b      	negs	r3, r3
 80074a4:	4553      	cmp	r3, sl
 80074a6:	dc01      	bgt.n	80074ac <_printf_float+0x2b4>
 80074a8:	464b      	mov	r3, r9
 80074aa:	e793      	b.n	80073d4 <_printf_float+0x1dc>
 80074ac:	2301      	movs	r3, #1
 80074ae:	465a      	mov	r2, fp
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f aef9 	beq.w	80072ae <_printf_float+0xb6>
 80074bc:	f10a 0a01 	add.w	sl, sl, #1
 80074c0:	e7ee      	b.n	80074a0 <_printf_float+0x2a8>
 80074c2:	bf00      	nop
 80074c4:	7fefffff 	.word	0x7fefffff
 80074c8:	0800bab4 	.word	0x0800bab4
 80074cc:	0800bab0 	.word	0x0800bab0
 80074d0:	0800babc 	.word	0x0800babc
 80074d4:	0800bab8 	.word	0x0800bab8
 80074d8:	0800bac0 	.word	0x0800bac0
 80074dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80074e2:	4553      	cmp	r3, sl
 80074e4:	bfa8      	it	ge
 80074e6:	4653      	movge	r3, sl
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	4699      	mov	r9, r3
 80074ec:	dc36      	bgt.n	800755c <_printf_float+0x364>
 80074ee:	f04f 0b00 	mov.w	fp, #0
 80074f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f6:	f104 021a 	add.w	r2, r4, #26
 80074fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80074fe:	eba3 0309 	sub.w	r3, r3, r9
 8007502:	455b      	cmp	r3, fp
 8007504:	dc31      	bgt.n	800756a <_printf_float+0x372>
 8007506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007508:	459a      	cmp	sl, r3
 800750a:	dc3a      	bgt.n	8007582 <_printf_float+0x38a>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	07da      	lsls	r2, r3, #31
 8007510:	d437      	bmi.n	8007582 <_printf_float+0x38a>
 8007512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007514:	ebaa 0903 	sub.w	r9, sl, r3
 8007518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800751a:	ebaa 0303 	sub.w	r3, sl, r3
 800751e:	4599      	cmp	r9, r3
 8007520:	bfa8      	it	ge
 8007522:	4699      	movge	r9, r3
 8007524:	f1b9 0f00 	cmp.w	r9, #0
 8007528:	dc33      	bgt.n	8007592 <_printf_float+0x39a>
 800752a:	f04f 0800 	mov.w	r8, #0
 800752e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007532:	f104 0b1a 	add.w	fp, r4, #26
 8007536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007538:	ebaa 0303 	sub.w	r3, sl, r3
 800753c:	eba3 0309 	sub.w	r3, r3, r9
 8007540:	4543      	cmp	r3, r8
 8007542:	f77f af79 	ble.w	8007438 <_printf_float+0x240>
 8007546:	2301      	movs	r3, #1
 8007548:	465a      	mov	r2, fp
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f aeac 	beq.w	80072ae <_printf_float+0xb6>
 8007556:	f108 0801 	add.w	r8, r8, #1
 800755a:	e7ec      	b.n	8007536 <_printf_float+0x33e>
 800755c:	4642      	mov	r2, r8
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	d1c2      	bne.n	80074ee <_printf_float+0x2f6>
 8007568:	e6a1      	b.n	80072ae <_printf_float+0xb6>
 800756a:	2301      	movs	r3, #1
 800756c:	4631      	mov	r1, r6
 800756e:	4628      	mov	r0, r5
 8007570:	920a      	str	r2, [sp, #40]	@ 0x28
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f ae9a 	beq.w	80072ae <_printf_float+0xb6>
 800757a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800757c:	f10b 0b01 	add.w	fp, fp, #1
 8007580:	e7bb      	b.n	80074fa <_printf_float+0x302>
 8007582:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007586:	4631      	mov	r1, r6
 8007588:	4628      	mov	r0, r5
 800758a:	47b8      	blx	r7
 800758c:	3001      	adds	r0, #1
 800758e:	d1c0      	bne.n	8007512 <_printf_float+0x31a>
 8007590:	e68d      	b.n	80072ae <_printf_float+0xb6>
 8007592:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007594:	464b      	mov	r3, r9
 8007596:	4442      	add	r2, r8
 8007598:	4631      	mov	r1, r6
 800759a:	4628      	mov	r0, r5
 800759c:	47b8      	blx	r7
 800759e:	3001      	adds	r0, #1
 80075a0:	d1c3      	bne.n	800752a <_printf_float+0x332>
 80075a2:	e684      	b.n	80072ae <_printf_float+0xb6>
 80075a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80075a8:	f1ba 0f01 	cmp.w	sl, #1
 80075ac:	dc01      	bgt.n	80075b2 <_printf_float+0x3ba>
 80075ae:	07db      	lsls	r3, r3, #31
 80075b0:	d536      	bpl.n	8007620 <_printf_float+0x428>
 80075b2:	2301      	movs	r3, #1
 80075b4:	4642      	mov	r2, r8
 80075b6:	4631      	mov	r1, r6
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b8      	blx	r7
 80075bc:	3001      	adds	r0, #1
 80075be:	f43f ae76 	beq.w	80072ae <_printf_float+0xb6>
 80075c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075c6:	4631      	mov	r1, r6
 80075c8:	4628      	mov	r0, r5
 80075ca:	47b8      	blx	r7
 80075cc:	3001      	adds	r0, #1
 80075ce:	f43f ae6e 	beq.w	80072ae <_printf_float+0xb6>
 80075d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075d6:	2200      	movs	r2, #0
 80075d8:	2300      	movs	r3, #0
 80075da:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80075de:	f7f9 fa4b 	bl	8000a78 <__aeabi_dcmpeq>
 80075e2:	b9c0      	cbnz	r0, 8007616 <_printf_float+0x41e>
 80075e4:	4653      	mov	r3, sl
 80075e6:	f108 0201 	add.w	r2, r8, #1
 80075ea:	4631      	mov	r1, r6
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	d10c      	bne.n	800760e <_printf_float+0x416>
 80075f4:	e65b      	b.n	80072ae <_printf_float+0xb6>
 80075f6:	2301      	movs	r3, #1
 80075f8:	465a      	mov	r2, fp
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	47b8      	blx	r7
 8007600:	3001      	adds	r0, #1
 8007602:	f43f ae54 	beq.w	80072ae <_printf_float+0xb6>
 8007606:	f108 0801 	add.w	r8, r8, #1
 800760a:	45d0      	cmp	r8, sl
 800760c:	dbf3      	blt.n	80075f6 <_printf_float+0x3fe>
 800760e:	464b      	mov	r3, r9
 8007610:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007614:	e6df      	b.n	80073d6 <_printf_float+0x1de>
 8007616:	f04f 0800 	mov.w	r8, #0
 800761a:	f104 0b1a 	add.w	fp, r4, #26
 800761e:	e7f4      	b.n	800760a <_printf_float+0x412>
 8007620:	2301      	movs	r3, #1
 8007622:	4642      	mov	r2, r8
 8007624:	e7e1      	b.n	80075ea <_printf_float+0x3f2>
 8007626:	2301      	movs	r3, #1
 8007628:	464a      	mov	r2, r9
 800762a:	4631      	mov	r1, r6
 800762c:	4628      	mov	r0, r5
 800762e:	47b8      	blx	r7
 8007630:	3001      	adds	r0, #1
 8007632:	f43f ae3c 	beq.w	80072ae <_printf_float+0xb6>
 8007636:	f108 0801 	add.w	r8, r8, #1
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800763e:	1a5b      	subs	r3, r3, r1
 8007640:	4543      	cmp	r3, r8
 8007642:	dcf0      	bgt.n	8007626 <_printf_float+0x42e>
 8007644:	e6fc      	b.n	8007440 <_printf_float+0x248>
 8007646:	f04f 0800 	mov.w	r8, #0
 800764a:	f104 0919 	add.w	r9, r4, #25
 800764e:	e7f4      	b.n	800763a <_printf_float+0x442>

08007650 <_printf_common>:
 8007650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007654:	4616      	mov	r6, r2
 8007656:	4698      	mov	r8, r3
 8007658:	688a      	ldr	r2, [r1, #8]
 800765a:	690b      	ldr	r3, [r1, #16]
 800765c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007660:	4293      	cmp	r3, r2
 8007662:	bfb8      	it	lt
 8007664:	4613      	movlt	r3, r2
 8007666:	6033      	str	r3, [r6, #0]
 8007668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800766c:	4607      	mov	r7, r0
 800766e:	460c      	mov	r4, r1
 8007670:	b10a      	cbz	r2, 8007676 <_printf_common+0x26>
 8007672:	3301      	adds	r3, #1
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	0699      	lsls	r1, r3, #26
 800767a:	bf42      	ittt	mi
 800767c:	6833      	ldrmi	r3, [r6, #0]
 800767e:	3302      	addmi	r3, #2
 8007680:	6033      	strmi	r3, [r6, #0]
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	f015 0506 	ands.w	r5, r5, #6
 8007688:	d106      	bne.n	8007698 <_printf_common+0x48>
 800768a:	f104 0a19 	add.w	sl, r4, #25
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	6832      	ldr	r2, [r6, #0]
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	42ab      	cmp	r3, r5
 8007696:	dc26      	bgt.n	80076e6 <_printf_common+0x96>
 8007698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800769c:	6822      	ldr	r2, [r4, #0]
 800769e:	3b00      	subs	r3, #0
 80076a0:	bf18      	it	ne
 80076a2:	2301      	movne	r3, #1
 80076a4:	0692      	lsls	r2, r2, #26
 80076a6:	d42b      	bmi.n	8007700 <_printf_common+0xb0>
 80076a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076ac:	4641      	mov	r1, r8
 80076ae:	4638      	mov	r0, r7
 80076b0:	47c8      	blx	r9
 80076b2:	3001      	adds	r0, #1
 80076b4:	d01e      	beq.n	80076f4 <_printf_common+0xa4>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	6922      	ldr	r2, [r4, #16]
 80076ba:	f003 0306 	and.w	r3, r3, #6
 80076be:	2b04      	cmp	r3, #4
 80076c0:	bf02      	ittt	eq
 80076c2:	68e5      	ldreq	r5, [r4, #12]
 80076c4:	6833      	ldreq	r3, [r6, #0]
 80076c6:	1aed      	subeq	r5, r5, r3
 80076c8:	68a3      	ldr	r3, [r4, #8]
 80076ca:	bf0c      	ite	eq
 80076cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d0:	2500      	movne	r5, #0
 80076d2:	4293      	cmp	r3, r2
 80076d4:	bfc4      	itt	gt
 80076d6:	1a9b      	subgt	r3, r3, r2
 80076d8:	18ed      	addgt	r5, r5, r3
 80076da:	2600      	movs	r6, #0
 80076dc:	341a      	adds	r4, #26
 80076de:	42b5      	cmp	r5, r6
 80076e0:	d11a      	bne.n	8007718 <_printf_common+0xc8>
 80076e2:	2000      	movs	r0, #0
 80076e4:	e008      	b.n	80076f8 <_printf_common+0xa8>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4652      	mov	r2, sl
 80076ea:	4641      	mov	r1, r8
 80076ec:	4638      	mov	r0, r7
 80076ee:	47c8      	blx	r9
 80076f0:	3001      	adds	r0, #1
 80076f2:	d103      	bne.n	80076fc <_printf_common+0xac>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fc:	3501      	adds	r5, #1
 80076fe:	e7c6      	b.n	800768e <_printf_common+0x3e>
 8007700:	18e1      	adds	r1, r4, r3
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	2030      	movs	r0, #48	@ 0x30
 8007706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800770a:	4422      	add	r2, r4
 800770c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007714:	3302      	adds	r3, #2
 8007716:	e7c7      	b.n	80076a8 <_printf_common+0x58>
 8007718:	2301      	movs	r3, #1
 800771a:	4622      	mov	r2, r4
 800771c:	4641      	mov	r1, r8
 800771e:	4638      	mov	r0, r7
 8007720:	47c8      	blx	r9
 8007722:	3001      	adds	r0, #1
 8007724:	d0e6      	beq.n	80076f4 <_printf_common+0xa4>
 8007726:	3601      	adds	r6, #1
 8007728:	e7d9      	b.n	80076de <_printf_common+0x8e>
	...

0800772c <_printf_i>:
 800772c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007730:	7e0f      	ldrb	r7, [r1, #24]
 8007732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007734:	2f78      	cmp	r7, #120	@ 0x78
 8007736:	4691      	mov	r9, r2
 8007738:	4680      	mov	r8, r0
 800773a:	460c      	mov	r4, r1
 800773c:	469a      	mov	sl, r3
 800773e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007742:	d807      	bhi.n	8007754 <_printf_i+0x28>
 8007744:	2f62      	cmp	r7, #98	@ 0x62
 8007746:	d80a      	bhi.n	800775e <_printf_i+0x32>
 8007748:	2f00      	cmp	r7, #0
 800774a:	f000 80d1 	beq.w	80078f0 <_printf_i+0x1c4>
 800774e:	2f58      	cmp	r7, #88	@ 0x58
 8007750:	f000 80b8 	beq.w	80078c4 <_printf_i+0x198>
 8007754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800775c:	e03a      	b.n	80077d4 <_printf_i+0xa8>
 800775e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007762:	2b15      	cmp	r3, #21
 8007764:	d8f6      	bhi.n	8007754 <_printf_i+0x28>
 8007766:	a101      	add	r1, pc, #4	@ (adr r1, 800776c <_printf_i+0x40>)
 8007768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800776c:	080077c5 	.word	0x080077c5
 8007770:	080077d9 	.word	0x080077d9
 8007774:	08007755 	.word	0x08007755
 8007778:	08007755 	.word	0x08007755
 800777c:	08007755 	.word	0x08007755
 8007780:	08007755 	.word	0x08007755
 8007784:	080077d9 	.word	0x080077d9
 8007788:	08007755 	.word	0x08007755
 800778c:	08007755 	.word	0x08007755
 8007790:	08007755 	.word	0x08007755
 8007794:	08007755 	.word	0x08007755
 8007798:	080078d7 	.word	0x080078d7
 800779c:	08007803 	.word	0x08007803
 80077a0:	08007891 	.word	0x08007891
 80077a4:	08007755 	.word	0x08007755
 80077a8:	08007755 	.word	0x08007755
 80077ac:	080078f9 	.word	0x080078f9
 80077b0:	08007755 	.word	0x08007755
 80077b4:	08007803 	.word	0x08007803
 80077b8:	08007755 	.word	0x08007755
 80077bc:	08007755 	.word	0x08007755
 80077c0:	08007899 	.word	0x08007899
 80077c4:	6833      	ldr	r3, [r6, #0]
 80077c6:	1d1a      	adds	r2, r3, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6032      	str	r2, [r6, #0]
 80077cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077d4:	2301      	movs	r3, #1
 80077d6:	e09c      	b.n	8007912 <_printf_i+0x1e6>
 80077d8:	6833      	ldr	r3, [r6, #0]
 80077da:	6820      	ldr	r0, [r4, #0]
 80077dc:	1d19      	adds	r1, r3, #4
 80077de:	6031      	str	r1, [r6, #0]
 80077e0:	0606      	lsls	r6, r0, #24
 80077e2:	d501      	bpl.n	80077e8 <_printf_i+0xbc>
 80077e4:	681d      	ldr	r5, [r3, #0]
 80077e6:	e003      	b.n	80077f0 <_printf_i+0xc4>
 80077e8:	0645      	lsls	r5, r0, #25
 80077ea:	d5fb      	bpl.n	80077e4 <_printf_i+0xb8>
 80077ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	da03      	bge.n	80077fc <_printf_i+0xd0>
 80077f4:	232d      	movs	r3, #45	@ 0x2d
 80077f6:	426d      	negs	r5, r5
 80077f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077fc:	4858      	ldr	r0, [pc, #352]	@ (8007960 <_printf_i+0x234>)
 80077fe:	230a      	movs	r3, #10
 8007800:	e011      	b.n	8007826 <_printf_i+0xfa>
 8007802:	6821      	ldr	r1, [r4, #0]
 8007804:	6833      	ldr	r3, [r6, #0]
 8007806:	0608      	lsls	r0, r1, #24
 8007808:	f853 5b04 	ldr.w	r5, [r3], #4
 800780c:	d402      	bmi.n	8007814 <_printf_i+0xe8>
 800780e:	0649      	lsls	r1, r1, #25
 8007810:	bf48      	it	mi
 8007812:	b2ad      	uxthmi	r5, r5
 8007814:	2f6f      	cmp	r7, #111	@ 0x6f
 8007816:	4852      	ldr	r0, [pc, #328]	@ (8007960 <_printf_i+0x234>)
 8007818:	6033      	str	r3, [r6, #0]
 800781a:	bf14      	ite	ne
 800781c:	230a      	movne	r3, #10
 800781e:	2308      	moveq	r3, #8
 8007820:	2100      	movs	r1, #0
 8007822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007826:	6866      	ldr	r6, [r4, #4]
 8007828:	60a6      	str	r6, [r4, #8]
 800782a:	2e00      	cmp	r6, #0
 800782c:	db05      	blt.n	800783a <_printf_i+0x10e>
 800782e:	6821      	ldr	r1, [r4, #0]
 8007830:	432e      	orrs	r6, r5
 8007832:	f021 0104 	bic.w	r1, r1, #4
 8007836:	6021      	str	r1, [r4, #0]
 8007838:	d04b      	beq.n	80078d2 <_printf_i+0x1a6>
 800783a:	4616      	mov	r6, r2
 800783c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007840:	fb03 5711 	mls	r7, r3, r1, r5
 8007844:	5dc7      	ldrb	r7, [r0, r7]
 8007846:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800784a:	462f      	mov	r7, r5
 800784c:	42bb      	cmp	r3, r7
 800784e:	460d      	mov	r5, r1
 8007850:	d9f4      	bls.n	800783c <_printf_i+0x110>
 8007852:	2b08      	cmp	r3, #8
 8007854:	d10b      	bne.n	800786e <_printf_i+0x142>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	07df      	lsls	r7, r3, #31
 800785a:	d508      	bpl.n	800786e <_printf_i+0x142>
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	6861      	ldr	r1, [r4, #4]
 8007860:	4299      	cmp	r1, r3
 8007862:	bfde      	ittt	le
 8007864:	2330      	movle	r3, #48	@ 0x30
 8007866:	f806 3c01 	strble.w	r3, [r6, #-1]
 800786a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800786e:	1b92      	subs	r2, r2, r6
 8007870:	6122      	str	r2, [r4, #16]
 8007872:	f8cd a000 	str.w	sl, [sp]
 8007876:	464b      	mov	r3, r9
 8007878:	aa03      	add	r2, sp, #12
 800787a:	4621      	mov	r1, r4
 800787c:	4640      	mov	r0, r8
 800787e:	f7ff fee7 	bl	8007650 <_printf_common>
 8007882:	3001      	adds	r0, #1
 8007884:	d14a      	bne.n	800791c <_printf_i+0x1f0>
 8007886:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800788a:	b004      	add	sp, #16
 800788c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	f043 0320 	orr.w	r3, r3, #32
 8007896:	6023      	str	r3, [r4, #0]
 8007898:	4832      	ldr	r0, [pc, #200]	@ (8007964 <_printf_i+0x238>)
 800789a:	2778      	movs	r7, #120	@ 0x78
 800789c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	6831      	ldr	r1, [r6, #0]
 80078a4:	061f      	lsls	r7, r3, #24
 80078a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80078aa:	d402      	bmi.n	80078b2 <_printf_i+0x186>
 80078ac:	065f      	lsls	r7, r3, #25
 80078ae:	bf48      	it	mi
 80078b0:	b2ad      	uxthmi	r5, r5
 80078b2:	6031      	str	r1, [r6, #0]
 80078b4:	07d9      	lsls	r1, r3, #31
 80078b6:	bf44      	itt	mi
 80078b8:	f043 0320 	orrmi.w	r3, r3, #32
 80078bc:	6023      	strmi	r3, [r4, #0]
 80078be:	b11d      	cbz	r5, 80078c8 <_printf_i+0x19c>
 80078c0:	2310      	movs	r3, #16
 80078c2:	e7ad      	b.n	8007820 <_printf_i+0xf4>
 80078c4:	4826      	ldr	r0, [pc, #152]	@ (8007960 <_printf_i+0x234>)
 80078c6:	e7e9      	b.n	800789c <_printf_i+0x170>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	f023 0320 	bic.w	r3, r3, #32
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	e7f6      	b.n	80078c0 <_printf_i+0x194>
 80078d2:	4616      	mov	r6, r2
 80078d4:	e7bd      	b.n	8007852 <_printf_i+0x126>
 80078d6:	6833      	ldr	r3, [r6, #0]
 80078d8:	6825      	ldr	r5, [r4, #0]
 80078da:	6961      	ldr	r1, [r4, #20]
 80078dc:	1d18      	adds	r0, r3, #4
 80078de:	6030      	str	r0, [r6, #0]
 80078e0:	062e      	lsls	r6, r5, #24
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	d501      	bpl.n	80078ea <_printf_i+0x1be>
 80078e6:	6019      	str	r1, [r3, #0]
 80078e8:	e002      	b.n	80078f0 <_printf_i+0x1c4>
 80078ea:	0668      	lsls	r0, r5, #25
 80078ec:	d5fb      	bpl.n	80078e6 <_printf_i+0x1ba>
 80078ee:	8019      	strh	r1, [r3, #0]
 80078f0:	2300      	movs	r3, #0
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	4616      	mov	r6, r2
 80078f6:	e7bc      	b.n	8007872 <_printf_i+0x146>
 80078f8:	6833      	ldr	r3, [r6, #0]
 80078fa:	1d1a      	adds	r2, r3, #4
 80078fc:	6032      	str	r2, [r6, #0]
 80078fe:	681e      	ldr	r6, [r3, #0]
 8007900:	6862      	ldr	r2, [r4, #4]
 8007902:	2100      	movs	r1, #0
 8007904:	4630      	mov	r0, r6
 8007906:	f7f8 fc3b 	bl	8000180 <memchr>
 800790a:	b108      	cbz	r0, 8007910 <_printf_i+0x1e4>
 800790c:	1b80      	subs	r0, r0, r6
 800790e:	6060      	str	r0, [r4, #4]
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	6123      	str	r3, [r4, #16]
 8007914:	2300      	movs	r3, #0
 8007916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800791a:	e7aa      	b.n	8007872 <_printf_i+0x146>
 800791c:	6923      	ldr	r3, [r4, #16]
 800791e:	4632      	mov	r2, r6
 8007920:	4649      	mov	r1, r9
 8007922:	4640      	mov	r0, r8
 8007924:	47d0      	blx	sl
 8007926:	3001      	adds	r0, #1
 8007928:	d0ad      	beq.n	8007886 <_printf_i+0x15a>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	079b      	lsls	r3, r3, #30
 800792e:	d413      	bmi.n	8007958 <_printf_i+0x22c>
 8007930:	68e0      	ldr	r0, [r4, #12]
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	4298      	cmp	r0, r3
 8007936:	bfb8      	it	lt
 8007938:	4618      	movlt	r0, r3
 800793a:	e7a6      	b.n	800788a <_printf_i+0x15e>
 800793c:	2301      	movs	r3, #1
 800793e:	4632      	mov	r2, r6
 8007940:	4649      	mov	r1, r9
 8007942:	4640      	mov	r0, r8
 8007944:	47d0      	blx	sl
 8007946:	3001      	adds	r0, #1
 8007948:	d09d      	beq.n	8007886 <_printf_i+0x15a>
 800794a:	3501      	adds	r5, #1
 800794c:	68e3      	ldr	r3, [r4, #12]
 800794e:	9903      	ldr	r1, [sp, #12]
 8007950:	1a5b      	subs	r3, r3, r1
 8007952:	42ab      	cmp	r3, r5
 8007954:	dcf2      	bgt.n	800793c <_printf_i+0x210>
 8007956:	e7eb      	b.n	8007930 <_printf_i+0x204>
 8007958:	2500      	movs	r5, #0
 800795a:	f104 0619 	add.w	r6, r4, #25
 800795e:	e7f5      	b.n	800794c <_printf_i+0x220>
 8007960:	0800bac2 	.word	0x0800bac2
 8007964:	0800bad3 	.word	0x0800bad3

08007968 <_scanf_float>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	b087      	sub	sp, #28
 800796e:	4691      	mov	r9, r2
 8007970:	9303      	str	r3, [sp, #12]
 8007972:	688b      	ldr	r3, [r1, #8]
 8007974:	1e5a      	subs	r2, r3, #1
 8007976:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800797a:	bf81      	itttt	hi
 800797c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007980:	eb03 0b05 	addhi.w	fp, r3, r5
 8007984:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007988:	608b      	strhi	r3, [r1, #8]
 800798a:	680b      	ldr	r3, [r1, #0]
 800798c:	460a      	mov	r2, r1
 800798e:	f04f 0500 	mov.w	r5, #0
 8007992:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007996:	f842 3b1c 	str.w	r3, [r2], #28
 800799a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800799e:	4680      	mov	r8, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	bf98      	it	ls
 80079a4:	f04f 0b00 	movls.w	fp, #0
 80079a8:	9201      	str	r2, [sp, #4]
 80079aa:	4616      	mov	r6, r2
 80079ac:	46aa      	mov	sl, r5
 80079ae:	462f      	mov	r7, r5
 80079b0:	9502      	str	r5, [sp, #8]
 80079b2:	68a2      	ldr	r2, [r4, #8]
 80079b4:	b15a      	cbz	r2, 80079ce <_scanf_float+0x66>
 80079b6:	f8d9 3000 	ldr.w	r3, [r9]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80079be:	d863      	bhi.n	8007a88 <_scanf_float+0x120>
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	d83b      	bhi.n	8007a3c <_scanf_float+0xd4>
 80079c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80079c8:	b2c8      	uxtb	r0, r1
 80079ca:	280e      	cmp	r0, #14
 80079cc:	d939      	bls.n	8007a42 <_scanf_float+0xda>
 80079ce:	b11f      	cbz	r7, 80079d8 <_scanf_float+0x70>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80079dc:	f1ba 0f01 	cmp.w	sl, #1
 80079e0:	f200 8114 	bhi.w	8007c0c <_scanf_float+0x2a4>
 80079e4:	9b01      	ldr	r3, [sp, #4]
 80079e6:	429e      	cmp	r6, r3
 80079e8:	f200 8105 	bhi.w	8007bf6 <_scanf_float+0x28e>
 80079ec:	2001      	movs	r0, #1
 80079ee:	b007      	add	sp, #28
 80079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80079f8:	2a0d      	cmp	r2, #13
 80079fa:	d8e8      	bhi.n	80079ce <_scanf_float+0x66>
 80079fc:	a101      	add	r1, pc, #4	@ (adr r1, 8007a04 <_scanf_float+0x9c>)
 80079fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007b4d 	.word	0x08007b4d
 8007a08:	080079cf 	.word	0x080079cf
 8007a0c:	080079cf 	.word	0x080079cf
 8007a10:	080079cf 	.word	0x080079cf
 8007a14:	08007ba9 	.word	0x08007ba9
 8007a18:	08007b83 	.word	0x08007b83
 8007a1c:	080079cf 	.word	0x080079cf
 8007a20:	080079cf 	.word	0x080079cf
 8007a24:	08007b5b 	.word	0x08007b5b
 8007a28:	080079cf 	.word	0x080079cf
 8007a2c:	080079cf 	.word	0x080079cf
 8007a30:	080079cf 	.word	0x080079cf
 8007a34:	080079cf 	.word	0x080079cf
 8007a38:	08007b17 	.word	0x08007b17
 8007a3c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007a40:	e7da      	b.n	80079f8 <_scanf_float+0x90>
 8007a42:	290e      	cmp	r1, #14
 8007a44:	d8c3      	bhi.n	80079ce <_scanf_float+0x66>
 8007a46:	a001      	add	r0, pc, #4	@ (adr r0, 8007a4c <_scanf_float+0xe4>)
 8007a48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007a4c:	08007b07 	.word	0x08007b07
 8007a50:	080079cf 	.word	0x080079cf
 8007a54:	08007b07 	.word	0x08007b07
 8007a58:	08007b97 	.word	0x08007b97
 8007a5c:	080079cf 	.word	0x080079cf
 8007a60:	08007aa9 	.word	0x08007aa9
 8007a64:	08007aed 	.word	0x08007aed
 8007a68:	08007aed 	.word	0x08007aed
 8007a6c:	08007aed 	.word	0x08007aed
 8007a70:	08007aed 	.word	0x08007aed
 8007a74:	08007aed 	.word	0x08007aed
 8007a78:	08007aed 	.word	0x08007aed
 8007a7c:	08007aed 	.word	0x08007aed
 8007a80:	08007aed 	.word	0x08007aed
 8007a84:	08007aed 	.word	0x08007aed
 8007a88:	2b6e      	cmp	r3, #110	@ 0x6e
 8007a8a:	d809      	bhi.n	8007aa0 <_scanf_float+0x138>
 8007a8c:	2b60      	cmp	r3, #96	@ 0x60
 8007a8e:	d8b1      	bhi.n	80079f4 <_scanf_float+0x8c>
 8007a90:	2b54      	cmp	r3, #84	@ 0x54
 8007a92:	d07b      	beq.n	8007b8c <_scanf_float+0x224>
 8007a94:	2b59      	cmp	r3, #89	@ 0x59
 8007a96:	d19a      	bne.n	80079ce <_scanf_float+0x66>
 8007a98:	2d07      	cmp	r5, #7
 8007a9a:	d198      	bne.n	80079ce <_scanf_float+0x66>
 8007a9c:	2508      	movs	r5, #8
 8007a9e:	e02f      	b.n	8007b00 <_scanf_float+0x198>
 8007aa0:	2b74      	cmp	r3, #116	@ 0x74
 8007aa2:	d073      	beq.n	8007b8c <_scanf_float+0x224>
 8007aa4:	2b79      	cmp	r3, #121	@ 0x79
 8007aa6:	e7f6      	b.n	8007a96 <_scanf_float+0x12e>
 8007aa8:	6821      	ldr	r1, [r4, #0]
 8007aaa:	05c8      	lsls	r0, r1, #23
 8007aac:	d51e      	bpl.n	8007aec <_scanf_float+0x184>
 8007aae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007ab2:	6021      	str	r1, [r4, #0]
 8007ab4:	3701      	adds	r7, #1
 8007ab6:	f1bb 0f00 	cmp.w	fp, #0
 8007aba:	d003      	beq.n	8007ac4 <_scanf_float+0x15c>
 8007abc:	3201      	adds	r2, #1
 8007abe:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007ac2:	60a2      	str	r2, [r4, #8]
 8007ac4:	68a3      	ldr	r3, [r4, #8]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	3301      	adds	r3, #1
 8007ace:	6123      	str	r3, [r4, #16]
 8007ad0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f8c9 3004 	str.w	r3, [r9, #4]
 8007adc:	f340 8082 	ble.w	8007be4 <_scanf_float+0x27c>
 8007ae0:	f8d9 3000 	ldr.w	r3, [r9]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	f8c9 3000 	str.w	r3, [r9]
 8007aea:	e762      	b.n	80079b2 <_scanf_float+0x4a>
 8007aec:	eb1a 0105 	adds.w	r1, sl, r5
 8007af0:	f47f af6d 	bne.w	80079ce <_scanf_float+0x66>
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007afa:	6022      	str	r2, [r4, #0]
 8007afc:	460d      	mov	r5, r1
 8007afe:	468a      	mov	sl, r1
 8007b00:	f806 3b01 	strb.w	r3, [r6], #1
 8007b04:	e7de      	b.n	8007ac4 <_scanf_float+0x15c>
 8007b06:	6822      	ldr	r2, [r4, #0]
 8007b08:	0610      	lsls	r0, r2, #24
 8007b0a:	f57f af60 	bpl.w	80079ce <_scanf_float+0x66>
 8007b0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b12:	6022      	str	r2, [r4, #0]
 8007b14:	e7f4      	b.n	8007b00 <_scanf_float+0x198>
 8007b16:	f1ba 0f00 	cmp.w	sl, #0
 8007b1a:	d10c      	bne.n	8007b36 <_scanf_float+0x1ce>
 8007b1c:	b977      	cbnz	r7, 8007b3c <_scanf_float+0x1d4>
 8007b1e:	6822      	ldr	r2, [r4, #0]
 8007b20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007b24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007b28:	d108      	bne.n	8007b3c <_scanf_float+0x1d4>
 8007b2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b2e:	6022      	str	r2, [r4, #0]
 8007b30:	f04f 0a01 	mov.w	sl, #1
 8007b34:	e7e4      	b.n	8007b00 <_scanf_float+0x198>
 8007b36:	f1ba 0f02 	cmp.w	sl, #2
 8007b3a:	d050      	beq.n	8007bde <_scanf_float+0x276>
 8007b3c:	2d01      	cmp	r5, #1
 8007b3e:	d002      	beq.n	8007b46 <_scanf_float+0x1de>
 8007b40:	2d04      	cmp	r5, #4
 8007b42:	f47f af44 	bne.w	80079ce <_scanf_float+0x66>
 8007b46:	3501      	adds	r5, #1
 8007b48:	b2ed      	uxtb	r5, r5
 8007b4a:	e7d9      	b.n	8007b00 <_scanf_float+0x198>
 8007b4c:	f1ba 0f01 	cmp.w	sl, #1
 8007b50:	f47f af3d 	bne.w	80079ce <_scanf_float+0x66>
 8007b54:	f04f 0a02 	mov.w	sl, #2
 8007b58:	e7d2      	b.n	8007b00 <_scanf_float+0x198>
 8007b5a:	b975      	cbnz	r5, 8007b7a <_scanf_float+0x212>
 8007b5c:	2f00      	cmp	r7, #0
 8007b5e:	f47f af37 	bne.w	80079d0 <_scanf_float+0x68>
 8007b62:	6822      	ldr	r2, [r4, #0]
 8007b64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007b68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007b6c:	f040 80fe 	bne.w	8007d6c <_scanf_float+0x404>
 8007b70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b74:	6022      	str	r2, [r4, #0]
 8007b76:	2501      	movs	r5, #1
 8007b78:	e7c2      	b.n	8007b00 <_scanf_float+0x198>
 8007b7a:	2d03      	cmp	r5, #3
 8007b7c:	d0e3      	beq.n	8007b46 <_scanf_float+0x1de>
 8007b7e:	2d05      	cmp	r5, #5
 8007b80:	e7df      	b.n	8007b42 <_scanf_float+0x1da>
 8007b82:	2d02      	cmp	r5, #2
 8007b84:	f47f af23 	bne.w	80079ce <_scanf_float+0x66>
 8007b88:	2503      	movs	r5, #3
 8007b8a:	e7b9      	b.n	8007b00 <_scanf_float+0x198>
 8007b8c:	2d06      	cmp	r5, #6
 8007b8e:	f47f af1e 	bne.w	80079ce <_scanf_float+0x66>
 8007b92:	2507      	movs	r5, #7
 8007b94:	e7b4      	b.n	8007b00 <_scanf_float+0x198>
 8007b96:	6822      	ldr	r2, [r4, #0]
 8007b98:	0591      	lsls	r1, r2, #22
 8007b9a:	f57f af18 	bpl.w	80079ce <_scanf_float+0x66>
 8007b9e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007ba2:	6022      	str	r2, [r4, #0]
 8007ba4:	9702      	str	r7, [sp, #8]
 8007ba6:	e7ab      	b.n	8007b00 <_scanf_float+0x198>
 8007ba8:	6822      	ldr	r2, [r4, #0]
 8007baa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007bae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007bb2:	d005      	beq.n	8007bc0 <_scanf_float+0x258>
 8007bb4:	0550      	lsls	r0, r2, #21
 8007bb6:	f57f af0a 	bpl.w	80079ce <_scanf_float+0x66>
 8007bba:	2f00      	cmp	r7, #0
 8007bbc:	f000 80d6 	beq.w	8007d6c <_scanf_float+0x404>
 8007bc0:	0591      	lsls	r1, r2, #22
 8007bc2:	bf58      	it	pl
 8007bc4:	9902      	ldrpl	r1, [sp, #8]
 8007bc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007bca:	bf58      	it	pl
 8007bcc:	1a79      	subpl	r1, r7, r1
 8007bce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007bd2:	bf58      	it	pl
 8007bd4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	2700      	movs	r7, #0
 8007bdc:	e790      	b.n	8007b00 <_scanf_float+0x198>
 8007bde:	f04f 0a03 	mov.w	sl, #3
 8007be2:	e78d      	b.n	8007b00 <_scanf_float+0x198>
 8007be4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007be8:	4649      	mov	r1, r9
 8007bea:	4640      	mov	r0, r8
 8007bec:	4798      	blx	r3
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f43f aedf 	beq.w	80079b2 <_scanf_float+0x4a>
 8007bf4:	e6eb      	b.n	80079ce <_scanf_float+0x66>
 8007bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bfe:	464a      	mov	r2, r9
 8007c00:	4640      	mov	r0, r8
 8007c02:	4798      	blx	r3
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	6123      	str	r3, [r4, #16]
 8007c0a:	e6eb      	b.n	80079e4 <_scanf_float+0x7c>
 8007c0c:	1e6b      	subs	r3, r5, #1
 8007c0e:	2b06      	cmp	r3, #6
 8007c10:	d824      	bhi.n	8007c5c <_scanf_float+0x2f4>
 8007c12:	2d02      	cmp	r5, #2
 8007c14:	d836      	bhi.n	8007c84 <_scanf_float+0x31c>
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	429e      	cmp	r6, r3
 8007c1a:	f67f aee7 	bls.w	80079ec <_scanf_float+0x84>
 8007c1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c26:	464a      	mov	r2, r9
 8007c28:	4640      	mov	r0, r8
 8007c2a:	4798      	blx	r3
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	6123      	str	r3, [r4, #16]
 8007c32:	e7f0      	b.n	8007c16 <_scanf_float+0x2ae>
 8007c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007c3c:	464a      	mov	r2, r9
 8007c3e:	4640      	mov	r0, r8
 8007c40:	4798      	blx	r3
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007c4c:	fa5f fa8a 	uxtb.w	sl, sl
 8007c50:	f1ba 0f02 	cmp.w	sl, #2
 8007c54:	d1ee      	bne.n	8007c34 <_scanf_float+0x2cc>
 8007c56:	3d03      	subs	r5, #3
 8007c58:	b2ed      	uxtb	r5, r5
 8007c5a:	1b76      	subs	r6, r6, r5
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	05da      	lsls	r2, r3, #23
 8007c60:	d530      	bpl.n	8007cc4 <_scanf_float+0x35c>
 8007c62:	055b      	lsls	r3, r3, #21
 8007c64:	d511      	bpl.n	8007c8a <_scanf_float+0x322>
 8007c66:	9b01      	ldr	r3, [sp, #4]
 8007c68:	429e      	cmp	r6, r3
 8007c6a:	f67f aebf 	bls.w	80079ec <_scanf_float+0x84>
 8007c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c76:	464a      	mov	r2, r9
 8007c78:	4640      	mov	r0, r8
 8007c7a:	4798      	blx	r3
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	e7f0      	b.n	8007c66 <_scanf_float+0x2fe>
 8007c84:	46aa      	mov	sl, r5
 8007c86:	46b3      	mov	fp, r6
 8007c88:	e7de      	b.n	8007c48 <_scanf_float+0x2e0>
 8007c8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	2965      	cmp	r1, #101	@ 0x65
 8007c92:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007c96:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007c9a:	6123      	str	r3, [r4, #16]
 8007c9c:	d00c      	beq.n	8007cb8 <_scanf_float+0x350>
 8007c9e:	2945      	cmp	r1, #69	@ 0x45
 8007ca0:	d00a      	beq.n	8007cb8 <_scanf_float+0x350>
 8007ca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ca6:	464a      	mov	r2, r9
 8007ca8:	4640      	mov	r0, r8
 8007caa:	4798      	blx	r3
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	1eb5      	subs	r5, r6, #2
 8007cb6:	6123      	str	r3, [r4, #16]
 8007cb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007cbc:	464a      	mov	r2, r9
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	4798      	blx	r3
 8007cc2:	462e      	mov	r6, r5
 8007cc4:	6822      	ldr	r2, [r4, #0]
 8007cc6:	f012 0210 	ands.w	r2, r2, #16
 8007cca:	d001      	beq.n	8007cd0 <_scanf_float+0x368>
 8007ccc:	2000      	movs	r0, #0
 8007cce:	e68e      	b.n	80079ee <_scanf_float+0x86>
 8007cd0:	7032      	strb	r2, [r6, #0]
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cdc:	d125      	bne.n	8007d2a <_scanf_float+0x3c2>
 8007cde:	9b02      	ldr	r3, [sp, #8]
 8007ce0:	429f      	cmp	r7, r3
 8007ce2:	d00a      	beq.n	8007cfa <_scanf_float+0x392>
 8007ce4:	1bda      	subs	r2, r3, r7
 8007ce6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007cea:	429e      	cmp	r6, r3
 8007cec:	bf28      	it	cs
 8007cee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007cf2:	491f      	ldr	r1, [pc, #124]	@ (8007d70 <_scanf_float+0x408>)
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f000 f971 	bl	8007fdc <siprintf>
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	9901      	ldr	r1, [sp, #4]
 8007cfe:	4640      	mov	r0, r8
 8007d00:	f002 fcda 	bl	800a6b8 <_strtod_r>
 8007d04:	9b03      	ldr	r3, [sp, #12]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f015 0f02 	tst.w	r5, #2
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460f      	mov	r7, r1
 8007d12:	f103 0204 	add.w	r2, r3, #4
 8007d16:	d015      	beq.n	8007d44 <_scanf_float+0x3dc>
 8007d18:	9903      	ldr	r1, [sp, #12]
 8007d1a:	600a      	str	r2, [r1, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	e9c3 6700 	strd	r6, r7, [r3]
 8007d22:	68e3      	ldr	r3, [r4, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	60e3      	str	r3, [r4, #12]
 8007d28:	e7d0      	b.n	8007ccc <_scanf_float+0x364>
 8007d2a:	9b04      	ldr	r3, [sp, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0e4      	beq.n	8007cfa <_scanf_float+0x392>
 8007d30:	9905      	ldr	r1, [sp, #20]
 8007d32:	230a      	movs	r3, #10
 8007d34:	3101      	adds	r1, #1
 8007d36:	4640      	mov	r0, r8
 8007d38:	f002 fd3e 	bl	800a7b8 <_strtol_r>
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	9e05      	ldr	r6, [sp, #20]
 8007d40:	1ac2      	subs	r2, r0, r3
 8007d42:	e7d0      	b.n	8007ce6 <_scanf_float+0x37e>
 8007d44:	076d      	lsls	r5, r5, #29
 8007d46:	d4e7      	bmi.n	8007d18 <_scanf_float+0x3b0>
 8007d48:	9d03      	ldr	r5, [sp, #12]
 8007d4a:	602a      	str	r2, [r5, #0]
 8007d4c:	681d      	ldr	r5, [r3, #0]
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	f7f8 fec3 	bl	8000adc <__aeabi_dcmpun>
 8007d56:	b120      	cbz	r0, 8007d62 <_scanf_float+0x3fa>
 8007d58:	4806      	ldr	r0, [pc, #24]	@ (8007d74 <_scanf_float+0x40c>)
 8007d5a:	f000 fab9 	bl	80082d0 <nanf>
 8007d5e:	6028      	str	r0, [r5, #0]
 8007d60:	e7df      	b.n	8007d22 <_scanf_float+0x3ba>
 8007d62:	4630      	mov	r0, r6
 8007d64:	4639      	mov	r1, r7
 8007d66:	f7f8 ff17 	bl	8000b98 <__aeabi_d2f>
 8007d6a:	e7f8      	b.n	8007d5e <_scanf_float+0x3f6>
 8007d6c:	2700      	movs	r7, #0
 8007d6e:	e633      	b.n	80079d8 <_scanf_float+0x70>
 8007d70:	0800bae4 	.word	0x0800bae4
 8007d74:	0800bc25 	.word	0x0800bc25

08007d78 <std>:
 8007d78:	2300      	movs	r3, #0
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d86:	6083      	str	r3, [r0, #8]
 8007d88:	8181      	strh	r1, [r0, #12]
 8007d8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d8c:	81c2      	strh	r2, [r0, #14]
 8007d8e:	6183      	str	r3, [r0, #24]
 8007d90:	4619      	mov	r1, r3
 8007d92:	2208      	movs	r2, #8
 8007d94:	305c      	adds	r0, #92	@ 0x5c
 8007d96:	f000 fa1b 	bl	80081d0 <memset>
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd0 <std+0x58>)
 8007d9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd4 <std+0x5c>)
 8007da0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <std+0x60>)
 8007da4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007da6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ddc <std+0x64>)
 8007da8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007daa:	4b0d      	ldr	r3, [pc, #52]	@ (8007de0 <std+0x68>)
 8007dac:	6224      	str	r4, [r4, #32]
 8007dae:	429c      	cmp	r4, r3
 8007db0:	d006      	beq.n	8007dc0 <std+0x48>
 8007db2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007db6:	4294      	cmp	r4, r2
 8007db8:	d002      	beq.n	8007dc0 <std+0x48>
 8007dba:	33d0      	adds	r3, #208	@ 0xd0
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	d105      	bne.n	8007dcc <std+0x54>
 8007dc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc8:	f000 ba7e 	b.w	80082c8 <__retarget_lock_init_recursive>
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	bf00      	nop
 8007dd0:	08008021 	.word	0x08008021
 8007dd4:	08008043 	.word	0x08008043
 8007dd8:	0800807b 	.word	0x0800807b
 8007ddc:	0800809f 	.word	0x0800809f
 8007de0:	200005e4 	.word	0x200005e4

08007de4 <stdio_exit_handler>:
 8007de4:	4a02      	ldr	r2, [pc, #8]	@ (8007df0 <stdio_exit_handler+0xc>)
 8007de6:	4903      	ldr	r1, [pc, #12]	@ (8007df4 <stdio_exit_handler+0x10>)
 8007de8:	4803      	ldr	r0, [pc, #12]	@ (8007df8 <stdio_exit_handler+0x14>)
 8007dea:	f000 b869 	b.w	8007ec0 <_fwalk_sglue>
 8007dee:	bf00      	nop
 8007df0:	2000001c 	.word	0x2000001c
 8007df4:	0800aded 	.word	0x0800aded
 8007df8:	2000002c 	.word	0x2000002c

08007dfc <cleanup_stdio>:
 8007dfc:	6841      	ldr	r1, [r0, #4]
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8007e30 <cleanup_stdio+0x34>)
 8007e00:	4299      	cmp	r1, r3
 8007e02:	b510      	push	{r4, lr}
 8007e04:	4604      	mov	r4, r0
 8007e06:	d001      	beq.n	8007e0c <cleanup_stdio+0x10>
 8007e08:	f002 fff0 	bl	800adec <_fflush_r>
 8007e0c:	68a1      	ldr	r1, [r4, #8]
 8007e0e:	4b09      	ldr	r3, [pc, #36]	@ (8007e34 <cleanup_stdio+0x38>)
 8007e10:	4299      	cmp	r1, r3
 8007e12:	d002      	beq.n	8007e1a <cleanup_stdio+0x1e>
 8007e14:	4620      	mov	r0, r4
 8007e16:	f002 ffe9 	bl	800adec <_fflush_r>
 8007e1a:	68e1      	ldr	r1, [r4, #12]
 8007e1c:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <cleanup_stdio+0x3c>)
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d004      	beq.n	8007e2c <cleanup_stdio+0x30>
 8007e22:	4620      	mov	r0, r4
 8007e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e28:	f002 bfe0 	b.w	800adec <_fflush_r>
 8007e2c:	bd10      	pop	{r4, pc}
 8007e2e:	bf00      	nop
 8007e30:	200005e4 	.word	0x200005e4
 8007e34:	2000064c 	.word	0x2000064c
 8007e38:	200006b4 	.word	0x200006b4

08007e3c <global_stdio_init.part.0>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <global_stdio_init.part.0+0x30>)
 8007e40:	4c0b      	ldr	r4, [pc, #44]	@ (8007e70 <global_stdio_init.part.0+0x34>)
 8007e42:	4a0c      	ldr	r2, [pc, #48]	@ (8007e74 <global_stdio_init.part.0+0x38>)
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	4620      	mov	r0, r4
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2104      	movs	r1, #4
 8007e4c:	f7ff ff94 	bl	8007d78 <std>
 8007e50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e54:	2201      	movs	r2, #1
 8007e56:	2109      	movs	r1, #9
 8007e58:	f7ff ff8e 	bl	8007d78 <std>
 8007e5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e60:	2202      	movs	r2, #2
 8007e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e66:	2112      	movs	r1, #18
 8007e68:	f7ff bf86 	b.w	8007d78 <std>
 8007e6c:	2000071c 	.word	0x2000071c
 8007e70:	200005e4 	.word	0x200005e4
 8007e74:	08007de5 	.word	0x08007de5

08007e78 <__sfp_lock_acquire>:
 8007e78:	4801      	ldr	r0, [pc, #4]	@ (8007e80 <__sfp_lock_acquire+0x8>)
 8007e7a:	f000 ba26 	b.w	80082ca <__retarget_lock_acquire_recursive>
 8007e7e:	bf00      	nop
 8007e80:	20000725 	.word	0x20000725

08007e84 <__sfp_lock_release>:
 8007e84:	4801      	ldr	r0, [pc, #4]	@ (8007e8c <__sfp_lock_release+0x8>)
 8007e86:	f000 ba21 	b.w	80082cc <__retarget_lock_release_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	20000725 	.word	0x20000725

08007e90 <__sinit>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	4604      	mov	r4, r0
 8007e94:	f7ff fff0 	bl	8007e78 <__sfp_lock_acquire>
 8007e98:	6a23      	ldr	r3, [r4, #32]
 8007e9a:	b11b      	cbz	r3, 8007ea4 <__sinit+0x14>
 8007e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea0:	f7ff bff0 	b.w	8007e84 <__sfp_lock_release>
 8007ea4:	4b04      	ldr	r3, [pc, #16]	@ (8007eb8 <__sinit+0x28>)
 8007ea6:	6223      	str	r3, [r4, #32]
 8007ea8:	4b04      	ldr	r3, [pc, #16]	@ (8007ebc <__sinit+0x2c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1f5      	bne.n	8007e9c <__sinit+0xc>
 8007eb0:	f7ff ffc4 	bl	8007e3c <global_stdio_init.part.0>
 8007eb4:	e7f2      	b.n	8007e9c <__sinit+0xc>
 8007eb6:	bf00      	nop
 8007eb8:	08007dfd 	.word	0x08007dfd
 8007ebc:	2000071c 	.word	0x2000071c

08007ec0 <_fwalk_sglue>:
 8007ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	4688      	mov	r8, r1
 8007ec8:	4614      	mov	r4, r2
 8007eca:	2600      	movs	r6, #0
 8007ecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ed0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ed4:	d505      	bpl.n	8007ee2 <_fwalk_sglue+0x22>
 8007ed6:	6824      	ldr	r4, [r4, #0]
 8007ed8:	2c00      	cmp	r4, #0
 8007eda:	d1f7      	bne.n	8007ecc <_fwalk_sglue+0xc>
 8007edc:	4630      	mov	r0, r6
 8007ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee2:	89ab      	ldrh	r3, [r5, #12]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d907      	bls.n	8007ef8 <_fwalk_sglue+0x38>
 8007ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eec:	3301      	adds	r3, #1
 8007eee:	d003      	beq.n	8007ef8 <_fwalk_sglue+0x38>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	47c0      	blx	r8
 8007ef6:	4306      	orrs	r6, r0
 8007ef8:	3568      	adds	r5, #104	@ 0x68
 8007efa:	e7e9      	b.n	8007ed0 <_fwalk_sglue+0x10>

08007efc <iprintf>:
 8007efc:	b40f      	push	{r0, r1, r2, r3}
 8007efe:	b507      	push	{r0, r1, r2, lr}
 8007f00:	4906      	ldr	r1, [pc, #24]	@ (8007f1c <iprintf+0x20>)
 8007f02:	ab04      	add	r3, sp, #16
 8007f04:	6808      	ldr	r0, [r1, #0]
 8007f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0a:	6881      	ldr	r1, [r0, #8]
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	f002 fdd5 	bl	800aabc <_vfiprintf_r>
 8007f12:	b003      	add	sp, #12
 8007f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f18:	b004      	add	sp, #16
 8007f1a:	4770      	bx	lr
 8007f1c:	20000028 	.word	0x20000028

08007f20 <_puts_r>:
 8007f20:	6a03      	ldr	r3, [r0, #32]
 8007f22:	b570      	push	{r4, r5, r6, lr}
 8007f24:	6884      	ldr	r4, [r0, #8]
 8007f26:	4605      	mov	r5, r0
 8007f28:	460e      	mov	r6, r1
 8007f2a:	b90b      	cbnz	r3, 8007f30 <_puts_r+0x10>
 8007f2c:	f7ff ffb0 	bl	8007e90 <__sinit>
 8007f30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f32:	07db      	lsls	r3, r3, #31
 8007f34:	d405      	bmi.n	8007f42 <_puts_r+0x22>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	0598      	lsls	r0, r3, #22
 8007f3a:	d402      	bmi.n	8007f42 <_puts_r+0x22>
 8007f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f3e:	f000 f9c4 	bl	80082ca <__retarget_lock_acquire_recursive>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	0719      	lsls	r1, r3, #28
 8007f46:	d502      	bpl.n	8007f4e <_puts_r+0x2e>
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d135      	bne.n	8007fba <_puts_r+0x9a>
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 f8e7 	bl	8008124 <__swsetup_r>
 8007f56:	b380      	cbz	r0, 8007fba <_puts_r+0x9a>
 8007f58:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007f5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f5e:	07da      	lsls	r2, r3, #31
 8007f60:	d405      	bmi.n	8007f6e <_puts_r+0x4e>
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	059b      	lsls	r3, r3, #22
 8007f66:	d402      	bmi.n	8007f6e <_puts_r+0x4e>
 8007f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f6a:	f000 f9af 	bl	80082cc <__retarget_lock_release_recursive>
 8007f6e:	4628      	mov	r0, r5
 8007f70:	bd70      	pop	{r4, r5, r6, pc}
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	da04      	bge.n	8007f80 <_puts_r+0x60>
 8007f76:	69a2      	ldr	r2, [r4, #24]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	dc17      	bgt.n	8007fac <_puts_r+0x8c>
 8007f7c:	290a      	cmp	r1, #10
 8007f7e:	d015      	beq.n	8007fac <_puts_r+0x8c>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	6022      	str	r2, [r4, #0]
 8007f86:	7019      	strb	r1, [r3, #0]
 8007f88:	68a3      	ldr	r3, [r4, #8]
 8007f8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	60a3      	str	r3, [r4, #8]
 8007f92:	2900      	cmp	r1, #0
 8007f94:	d1ed      	bne.n	8007f72 <_puts_r+0x52>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da11      	bge.n	8007fbe <_puts_r+0x9e>
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	210a      	movs	r1, #10
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 f881 	bl	80080a6 <__swbuf_r>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d0d7      	beq.n	8007f58 <_puts_r+0x38>
 8007fa8:	250a      	movs	r5, #10
 8007faa:	e7d7      	b.n	8007f5c <_puts_r+0x3c>
 8007fac:	4622      	mov	r2, r4
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f000 f879 	bl	80080a6 <__swbuf_r>
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d1e7      	bne.n	8007f88 <_puts_r+0x68>
 8007fb8:	e7ce      	b.n	8007f58 <_puts_r+0x38>
 8007fba:	3e01      	subs	r6, #1
 8007fbc:	e7e4      	b.n	8007f88 <_puts_r+0x68>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	6022      	str	r2, [r4, #0]
 8007fc4:	220a      	movs	r2, #10
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e7ee      	b.n	8007fa8 <_puts_r+0x88>
	...

08007fcc <puts>:
 8007fcc:	4b02      	ldr	r3, [pc, #8]	@ (8007fd8 <puts+0xc>)
 8007fce:	4601      	mov	r1, r0
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	f7ff bfa5 	b.w	8007f20 <_puts_r>
 8007fd6:	bf00      	nop
 8007fd8:	20000028 	.word	0x20000028

08007fdc <siprintf>:
 8007fdc:	b40e      	push	{r1, r2, r3}
 8007fde:	b510      	push	{r4, lr}
 8007fe0:	b09d      	sub	sp, #116	@ 0x74
 8007fe2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007fe4:	9002      	str	r0, [sp, #8]
 8007fe6:	9006      	str	r0, [sp, #24]
 8007fe8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007fec:	480a      	ldr	r0, [pc, #40]	@ (8008018 <siprintf+0x3c>)
 8007fee:	9107      	str	r1, [sp, #28]
 8007ff0:	9104      	str	r1, [sp, #16]
 8007ff2:	490a      	ldr	r1, [pc, #40]	@ (800801c <siprintf+0x40>)
 8007ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff8:	9105      	str	r1, [sp, #20]
 8007ffa:	2400      	movs	r4, #0
 8007ffc:	a902      	add	r1, sp, #8
 8007ffe:	6800      	ldr	r0, [r0, #0]
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008004:	f002 fc36 	bl	800a874 <_svfiprintf_r>
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	701c      	strb	r4, [r3, #0]
 800800c:	b01d      	add	sp, #116	@ 0x74
 800800e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008012:	b003      	add	sp, #12
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	20000028 	.word	0x20000028
 800801c:	ffff0208 	.word	0xffff0208

08008020 <__sread>:
 8008020:	b510      	push	{r4, lr}
 8008022:	460c      	mov	r4, r1
 8008024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008028:	f000 f900 	bl	800822c <_read_r>
 800802c:	2800      	cmp	r0, #0
 800802e:	bfab      	itete	ge
 8008030:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008032:	89a3      	ldrhlt	r3, [r4, #12]
 8008034:	181b      	addge	r3, r3, r0
 8008036:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800803a:	bfac      	ite	ge
 800803c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800803e:	81a3      	strhlt	r3, [r4, #12]
 8008040:	bd10      	pop	{r4, pc}

08008042 <__swrite>:
 8008042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008046:	461f      	mov	r7, r3
 8008048:	898b      	ldrh	r3, [r1, #12]
 800804a:	05db      	lsls	r3, r3, #23
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	4616      	mov	r6, r2
 8008052:	d505      	bpl.n	8008060 <__swrite+0x1e>
 8008054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008058:	2302      	movs	r3, #2
 800805a:	2200      	movs	r2, #0
 800805c:	f000 f8d4 	bl	8008208 <_lseek_r>
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008066:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	4632      	mov	r2, r6
 800806e:	463b      	mov	r3, r7
 8008070:	4628      	mov	r0, r5
 8008072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	f000 b8eb 	b.w	8008250 <_write_r>

0800807a <__sseek>:
 800807a:	b510      	push	{r4, lr}
 800807c:	460c      	mov	r4, r1
 800807e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008082:	f000 f8c1 	bl	8008208 <_lseek_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	bf15      	itete	ne
 800808c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800808e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008092:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008096:	81a3      	strheq	r3, [r4, #12]
 8008098:	bf18      	it	ne
 800809a:	81a3      	strhne	r3, [r4, #12]
 800809c:	bd10      	pop	{r4, pc}

0800809e <__sclose>:
 800809e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a2:	f000 b8a1 	b.w	80081e8 <_close_r>

080080a6 <__swbuf_r>:
 80080a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a8:	460e      	mov	r6, r1
 80080aa:	4614      	mov	r4, r2
 80080ac:	4605      	mov	r5, r0
 80080ae:	b118      	cbz	r0, 80080b8 <__swbuf_r+0x12>
 80080b0:	6a03      	ldr	r3, [r0, #32]
 80080b2:	b90b      	cbnz	r3, 80080b8 <__swbuf_r+0x12>
 80080b4:	f7ff feec 	bl	8007e90 <__sinit>
 80080b8:	69a3      	ldr	r3, [r4, #24]
 80080ba:	60a3      	str	r3, [r4, #8]
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	071a      	lsls	r2, r3, #28
 80080c0:	d501      	bpl.n	80080c6 <__swbuf_r+0x20>
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	b943      	cbnz	r3, 80080d8 <__swbuf_r+0x32>
 80080c6:	4621      	mov	r1, r4
 80080c8:	4628      	mov	r0, r5
 80080ca:	f000 f82b 	bl	8008124 <__swsetup_r>
 80080ce:	b118      	cbz	r0, 80080d8 <__swbuf_r+0x32>
 80080d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80080d4:	4638      	mov	r0, r7
 80080d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	6922      	ldr	r2, [r4, #16]
 80080dc:	1a98      	subs	r0, r3, r2
 80080de:	6963      	ldr	r3, [r4, #20]
 80080e0:	b2f6      	uxtb	r6, r6
 80080e2:	4283      	cmp	r3, r0
 80080e4:	4637      	mov	r7, r6
 80080e6:	dc05      	bgt.n	80080f4 <__swbuf_r+0x4e>
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f002 fe7e 	bl	800adec <_fflush_r>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d1ed      	bne.n	80080d0 <__swbuf_r+0x2a>
 80080f4:	68a3      	ldr	r3, [r4, #8]
 80080f6:	3b01      	subs	r3, #1
 80080f8:	60a3      	str	r3, [r4, #8]
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	6022      	str	r2, [r4, #0]
 8008100:	701e      	strb	r6, [r3, #0]
 8008102:	6962      	ldr	r2, [r4, #20]
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	429a      	cmp	r2, r3
 8008108:	d004      	beq.n	8008114 <__swbuf_r+0x6e>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	07db      	lsls	r3, r3, #31
 800810e:	d5e1      	bpl.n	80080d4 <__swbuf_r+0x2e>
 8008110:	2e0a      	cmp	r6, #10
 8008112:	d1df      	bne.n	80080d4 <__swbuf_r+0x2e>
 8008114:	4621      	mov	r1, r4
 8008116:	4628      	mov	r0, r5
 8008118:	f002 fe68 	bl	800adec <_fflush_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	d0d9      	beq.n	80080d4 <__swbuf_r+0x2e>
 8008120:	e7d6      	b.n	80080d0 <__swbuf_r+0x2a>
	...

08008124 <__swsetup_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4b29      	ldr	r3, [pc, #164]	@ (80081cc <__swsetup_r+0xa8>)
 8008128:	4605      	mov	r5, r0
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	460c      	mov	r4, r1
 800812e:	b118      	cbz	r0, 8008138 <__swsetup_r+0x14>
 8008130:	6a03      	ldr	r3, [r0, #32]
 8008132:	b90b      	cbnz	r3, 8008138 <__swsetup_r+0x14>
 8008134:	f7ff feac 	bl	8007e90 <__sinit>
 8008138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800813c:	0719      	lsls	r1, r3, #28
 800813e:	d422      	bmi.n	8008186 <__swsetup_r+0x62>
 8008140:	06da      	lsls	r2, r3, #27
 8008142:	d407      	bmi.n	8008154 <__swsetup_r+0x30>
 8008144:	2209      	movs	r2, #9
 8008146:	602a      	str	r2, [r5, #0]
 8008148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800814c:	81a3      	strh	r3, [r4, #12]
 800814e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008152:	e033      	b.n	80081bc <__swsetup_r+0x98>
 8008154:	0758      	lsls	r0, r3, #29
 8008156:	d512      	bpl.n	800817e <__swsetup_r+0x5a>
 8008158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800815a:	b141      	cbz	r1, 800816e <__swsetup_r+0x4a>
 800815c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008160:	4299      	cmp	r1, r3
 8008162:	d002      	beq.n	800816a <__swsetup_r+0x46>
 8008164:	4628      	mov	r0, r5
 8008166:	f000 ff0f 	bl	8008f88 <_free_r>
 800816a:	2300      	movs	r3, #0
 800816c:	6363      	str	r3, [r4, #52]	@ 0x34
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	2300      	movs	r3, #0
 8008178:	6063      	str	r3, [r4, #4]
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f043 0308 	orr.w	r3, r3, #8
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	b94b      	cbnz	r3, 800819e <__swsetup_r+0x7a>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008194:	d003      	beq.n	800819e <__swsetup_r+0x7a>
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	f002 fe75 	bl	800ae88 <__smakebuf_r>
 800819e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a2:	f013 0201 	ands.w	r2, r3, #1
 80081a6:	d00a      	beq.n	80081be <__swsetup_r+0x9a>
 80081a8:	2200      	movs	r2, #0
 80081aa:	60a2      	str	r2, [r4, #8]
 80081ac:	6962      	ldr	r2, [r4, #20]
 80081ae:	4252      	negs	r2, r2
 80081b0:	61a2      	str	r2, [r4, #24]
 80081b2:	6922      	ldr	r2, [r4, #16]
 80081b4:	b942      	cbnz	r2, 80081c8 <__swsetup_r+0xa4>
 80081b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081ba:	d1c5      	bne.n	8008148 <__swsetup_r+0x24>
 80081bc:	bd38      	pop	{r3, r4, r5, pc}
 80081be:	0799      	lsls	r1, r3, #30
 80081c0:	bf58      	it	pl
 80081c2:	6962      	ldrpl	r2, [r4, #20]
 80081c4:	60a2      	str	r2, [r4, #8]
 80081c6:	e7f4      	b.n	80081b2 <__swsetup_r+0x8e>
 80081c8:	2000      	movs	r0, #0
 80081ca:	e7f7      	b.n	80081bc <__swsetup_r+0x98>
 80081cc:	20000028 	.word	0x20000028

080081d0 <memset>:
 80081d0:	4402      	add	r2, r0
 80081d2:	4603      	mov	r3, r0
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d100      	bne.n	80081da <memset+0xa>
 80081d8:	4770      	bx	lr
 80081da:	f803 1b01 	strb.w	r1, [r3], #1
 80081de:	e7f9      	b.n	80081d4 <memset+0x4>

080081e0 <_localeconv_r>:
 80081e0:	4800      	ldr	r0, [pc, #0]	@ (80081e4 <_localeconv_r+0x4>)
 80081e2:	4770      	bx	lr
 80081e4:	20000168 	.word	0x20000168

080081e8 <_close_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4d06      	ldr	r5, [pc, #24]	@ (8008204 <_close_r+0x1c>)
 80081ec:	2300      	movs	r3, #0
 80081ee:	4604      	mov	r4, r0
 80081f0:	4608      	mov	r0, r1
 80081f2:	602b      	str	r3, [r5, #0]
 80081f4:	f7f9 fc3d 	bl	8001a72 <_close>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d102      	bne.n	8008202 <_close_r+0x1a>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	b103      	cbz	r3, 8008202 <_close_r+0x1a>
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	20000720 	.word	0x20000720

08008208 <_lseek_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d07      	ldr	r5, [pc, #28]	@ (8008228 <_lseek_r+0x20>)
 800820c:	4604      	mov	r4, r0
 800820e:	4608      	mov	r0, r1
 8008210:	4611      	mov	r1, r2
 8008212:	2200      	movs	r2, #0
 8008214:	602a      	str	r2, [r5, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	f7f9 fc4f 	bl	8001aba <_lseek>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_lseek_r+0x1e>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_lseek_r+0x1e>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	20000720 	.word	0x20000720

0800822c <_read_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d07      	ldr	r5, [pc, #28]	@ (800824c <_read_r+0x20>)
 8008230:	4604      	mov	r4, r0
 8008232:	4608      	mov	r0, r1
 8008234:	4611      	mov	r1, r2
 8008236:	2200      	movs	r2, #0
 8008238:	602a      	str	r2, [r5, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	f7f9 fbfc 	bl	8001a38 <_read>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_read_r+0x1e>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_read_r+0x1e>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	20000720 	.word	0x20000720

08008250 <_write_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d07      	ldr	r5, [pc, #28]	@ (8008270 <_write_r+0x20>)
 8008254:	4604      	mov	r4, r0
 8008256:	4608      	mov	r0, r1
 8008258:	4611      	mov	r1, r2
 800825a:	2200      	movs	r2, #0
 800825c:	602a      	str	r2, [r5, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	f7f8 ff52 	bl	8001108 <_write>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_write_r+0x1e>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_write_r+0x1e>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	20000720 	.word	0x20000720

08008274 <__errno>:
 8008274:	4b01      	ldr	r3, [pc, #4]	@ (800827c <__errno+0x8>)
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	20000028 	.word	0x20000028

08008280 <__libc_init_array>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	4d0d      	ldr	r5, [pc, #52]	@ (80082b8 <__libc_init_array+0x38>)
 8008284:	4c0d      	ldr	r4, [pc, #52]	@ (80082bc <__libc_init_array+0x3c>)
 8008286:	1b64      	subs	r4, r4, r5
 8008288:	10a4      	asrs	r4, r4, #2
 800828a:	2600      	movs	r6, #0
 800828c:	42a6      	cmp	r6, r4
 800828e:	d109      	bne.n	80082a4 <__libc_init_array+0x24>
 8008290:	4d0b      	ldr	r5, [pc, #44]	@ (80082c0 <__libc_init_array+0x40>)
 8008292:	4c0c      	ldr	r4, [pc, #48]	@ (80082c4 <__libc_init_array+0x44>)
 8008294:	f003 fac4 	bl	800b820 <_init>
 8008298:	1b64      	subs	r4, r4, r5
 800829a:	10a4      	asrs	r4, r4, #2
 800829c:	2600      	movs	r6, #0
 800829e:	42a6      	cmp	r6, r4
 80082a0:	d105      	bne.n	80082ae <__libc_init_array+0x2e>
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a8:	4798      	blx	r3
 80082aa:	3601      	adds	r6, #1
 80082ac:	e7ee      	b.n	800828c <__libc_init_array+0xc>
 80082ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b2:	4798      	blx	r3
 80082b4:	3601      	adds	r6, #1
 80082b6:	e7f2      	b.n	800829e <__libc_init_array+0x1e>
 80082b8:	0800bee4 	.word	0x0800bee4
 80082bc:	0800bee4 	.word	0x0800bee4
 80082c0:	0800bee4 	.word	0x0800bee4
 80082c4:	0800bee8 	.word	0x0800bee8

080082c8 <__retarget_lock_init_recursive>:
 80082c8:	4770      	bx	lr

080082ca <__retarget_lock_acquire_recursive>:
 80082ca:	4770      	bx	lr

080082cc <__retarget_lock_release_recursive>:
 80082cc:	4770      	bx	lr
	...

080082d0 <nanf>:
 80082d0:	4800      	ldr	r0, [pc, #0]	@ (80082d4 <nanf+0x4>)
 80082d2:	4770      	bx	lr
 80082d4:	7fc00000 	.word	0x7fc00000

080082d8 <quorem>:
 80082d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	6903      	ldr	r3, [r0, #16]
 80082de:	690c      	ldr	r4, [r1, #16]
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	4607      	mov	r7, r0
 80082e4:	db7e      	blt.n	80083e4 <quorem+0x10c>
 80082e6:	3c01      	subs	r4, #1
 80082e8:	f101 0814 	add.w	r8, r1, #20
 80082ec:	00a3      	lsls	r3, r4, #2
 80082ee:	f100 0514 	add.w	r5, r0, #20
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008302:	3301      	adds	r3, #1
 8008304:	429a      	cmp	r2, r3
 8008306:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800830a:	fbb2 f6f3 	udiv	r6, r2, r3
 800830e:	d32e      	bcc.n	800836e <quorem+0x96>
 8008310:	f04f 0a00 	mov.w	sl, #0
 8008314:	46c4      	mov	ip, r8
 8008316:	46ae      	mov	lr, r5
 8008318:	46d3      	mov	fp, sl
 800831a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800831e:	b298      	uxth	r0, r3
 8008320:	fb06 a000 	mla	r0, r6, r0, sl
 8008324:	0c02      	lsrs	r2, r0, #16
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	fb06 2303 	mla	r3, r6, r3, r2
 800832c:	f8de 2000 	ldr.w	r2, [lr]
 8008330:	b280      	uxth	r0, r0
 8008332:	b292      	uxth	r2, r2
 8008334:	1a12      	subs	r2, r2, r0
 8008336:	445a      	add	r2, fp
 8008338:	f8de 0000 	ldr.w	r0, [lr]
 800833c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008340:	b29b      	uxth	r3, r3
 8008342:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008346:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800834a:	b292      	uxth	r2, r2
 800834c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008350:	45e1      	cmp	r9, ip
 8008352:	f84e 2b04 	str.w	r2, [lr], #4
 8008356:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800835a:	d2de      	bcs.n	800831a <quorem+0x42>
 800835c:	9b00      	ldr	r3, [sp, #0]
 800835e:	58eb      	ldr	r3, [r5, r3]
 8008360:	b92b      	cbnz	r3, 800836e <quorem+0x96>
 8008362:	9b01      	ldr	r3, [sp, #4]
 8008364:	3b04      	subs	r3, #4
 8008366:	429d      	cmp	r5, r3
 8008368:	461a      	mov	r2, r3
 800836a:	d32f      	bcc.n	80083cc <quorem+0xf4>
 800836c:	613c      	str	r4, [r7, #16]
 800836e:	4638      	mov	r0, r7
 8008370:	f001 f9c6 	bl	8009700 <__mcmp>
 8008374:	2800      	cmp	r0, #0
 8008376:	db25      	blt.n	80083c4 <quorem+0xec>
 8008378:	4629      	mov	r1, r5
 800837a:	2000      	movs	r0, #0
 800837c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008380:	f8d1 c000 	ldr.w	ip, [r1]
 8008384:	fa1f fe82 	uxth.w	lr, r2
 8008388:	fa1f f38c 	uxth.w	r3, ip
 800838c:	eba3 030e 	sub.w	r3, r3, lr
 8008390:	4403      	add	r3, r0
 8008392:	0c12      	lsrs	r2, r2, #16
 8008394:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008398:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800839c:	b29b      	uxth	r3, r3
 800839e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083a2:	45c1      	cmp	r9, r8
 80083a4:	f841 3b04 	str.w	r3, [r1], #4
 80083a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80083ac:	d2e6      	bcs.n	800837c <quorem+0xa4>
 80083ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083b6:	b922      	cbnz	r2, 80083c2 <quorem+0xea>
 80083b8:	3b04      	subs	r3, #4
 80083ba:	429d      	cmp	r5, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	d30b      	bcc.n	80083d8 <quorem+0x100>
 80083c0:	613c      	str	r4, [r7, #16]
 80083c2:	3601      	adds	r6, #1
 80083c4:	4630      	mov	r0, r6
 80083c6:	b003      	add	sp, #12
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	6812      	ldr	r2, [r2, #0]
 80083ce:	3b04      	subs	r3, #4
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	d1cb      	bne.n	800836c <quorem+0x94>
 80083d4:	3c01      	subs	r4, #1
 80083d6:	e7c6      	b.n	8008366 <quorem+0x8e>
 80083d8:	6812      	ldr	r2, [r2, #0]
 80083da:	3b04      	subs	r3, #4
 80083dc:	2a00      	cmp	r2, #0
 80083de:	d1ef      	bne.n	80083c0 <quorem+0xe8>
 80083e0:	3c01      	subs	r4, #1
 80083e2:	e7ea      	b.n	80083ba <quorem+0xe2>
 80083e4:	2000      	movs	r0, #0
 80083e6:	e7ee      	b.n	80083c6 <quorem+0xee>

080083e8 <_dtoa_r>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	69c7      	ldr	r7, [r0, #28]
 80083ee:	b097      	sub	sp, #92	@ 0x5c
 80083f0:	4614      	mov	r4, r2
 80083f2:	461d      	mov	r5, r3
 80083f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80083f8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80083fa:	4681      	mov	r9, r0
 80083fc:	b97f      	cbnz	r7, 800841e <_dtoa_r+0x36>
 80083fe:	2010      	movs	r0, #16
 8008400:	f000 fe0c 	bl	800901c <malloc>
 8008404:	4602      	mov	r2, r0
 8008406:	f8c9 001c 	str.w	r0, [r9, #28]
 800840a:	b920      	cbnz	r0, 8008416 <_dtoa_r+0x2e>
 800840c:	4baa      	ldr	r3, [pc, #680]	@ (80086b8 <_dtoa_r+0x2d0>)
 800840e:	21ef      	movs	r1, #239	@ 0xef
 8008410:	48aa      	ldr	r0, [pc, #680]	@ (80086bc <_dtoa_r+0x2d4>)
 8008412:	f002 fde7 	bl	800afe4 <__assert_func>
 8008416:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800841a:	6007      	str	r7, [r0, #0]
 800841c:	60c7      	str	r7, [r0, #12]
 800841e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	b159      	cbz	r1, 800843e <_dtoa_r+0x56>
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	604a      	str	r2, [r1, #4]
 800842a:	2301      	movs	r3, #1
 800842c:	4093      	lsls	r3, r2
 800842e:	608b      	str	r3, [r1, #8]
 8008430:	4648      	mov	r0, r9
 8008432:	f000 fee9 	bl	8009208 <_Bfree>
 8008436:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	1e2b      	subs	r3, r5, #0
 8008440:	bfb9      	ittee	lt
 8008442:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008446:	9307      	strlt	r3, [sp, #28]
 8008448:	2300      	movge	r3, #0
 800844a:	6033      	strge	r3, [r6, #0]
 800844c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008450:	4b9b      	ldr	r3, [pc, #620]	@ (80086c0 <_dtoa_r+0x2d8>)
 8008452:	bfbc      	itt	lt
 8008454:	2201      	movlt	r2, #1
 8008456:	6032      	strlt	r2, [r6, #0]
 8008458:	ea33 0308 	bics.w	r3, r3, r8
 800845c:	d112      	bne.n	8008484 <_dtoa_r+0x9c>
 800845e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008460:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800846a:	4323      	orrs	r3, r4
 800846c:	f000 855b 	beq.w	8008f26 <_dtoa_r+0xb3e>
 8008470:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008472:	f8df a250 	ldr.w	sl, [pc, #592]	@ 80086c4 <_dtoa_r+0x2dc>
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 855d 	beq.w	8008f36 <_dtoa_r+0xb4e>
 800847c:	f10a 0303 	add.w	r3, sl, #3
 8008480:	f000 bd57 	b.w	8008f32 <_dtoa_r+0xb4a>
 8008484:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008488:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800848c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008490:	2200      	movs	r2, #0
 8008492:	2300      	movs	r3, #0
 8008494:	f7f8 faf0 	bl	8000a78 <__aeabi_dcmpeq>
 8008498:	4607      	mov	r7, r0
 800849a:	b158      	cbz	r0, 80084b4 <_dtoa_r+0xcc>
 800849c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800849e:	2301      	movs	r3, #1
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80084a4:	b113      	cbz	r3, 80084ac <_dtoa_r+0xc4>
 80084a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80084a8:	4b87      	ldr	r3, [pc, #540]	@ (80086c8 <_dtoa_r+0x2e0>)
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80086cc <_dtoa_r+0x2e4>
 80084b0:	f000 bd41 	b.w	8008f36 <_dtoa_r+0xb4e>
 80084b4:	ab14      	add	r3, sp, #80	@ 0x50
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	ab15      	add	r3, sp, #84	@ 0x54
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4648      	mov	r0, r9
 80084be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80084c2:	f001 fa35 	bl	8009930 <__d2b>
 80084c6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80084ca:	9003      	str	r0, [sp, #12]
 80084cc:	2e00      	cmp	r6, #0
 80084ce:	d077      	beq.n	80085c0 <_dtoa_r+0x1d8>
 80084d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084d2:	9712      	str	r7, [sp, #72]	@ 0x48
 80084d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80084e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80084e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80084e8:	4619      	mov	r1, r3
 80084ea:	2200      	movs	r2, #0
 80084ec:	4b78      	ldr	r3, [pc, #480]	@ (80086d0 <_dtoa_r+0x2e8>)
 80084ee:	f7f7 fea3 	bl	8000238 <__aeabi_dsub>
 80084f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80086a0 <_dtoa_r+0x2b8>)
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f7f8 f856 	bl	80005a8 <__aeabi_dmul>
 80084fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80086a8 <_dtoa_r+0x2c0>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f7f7 fe9b 	bl	800023c <__adddf3>
 8008506:	4604      	mov	r4, r0
 8008508:	4630      	mov	r0, r6
 800850a:	460d      	mov	r5, r1
 800850c:	f7f7 ffe2 	bl	80004d4 <__aeabi_i2d>
 8008510:	a367      	add	r3, pc, #412	@ (adr r3, 80086b0 <_dtoa_r+0x2c8>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f7f8 f847 	bl	80005a8 <__aeabi_dmul>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4620      	mov	r0, r4
 8008520:	4629      	mov	r1, r5
 8008522:	f7f7 fe8b 	bl	800023c <__adddf3>
 8008526:	4604      	mov	r4, r0
 8008528:	460d      	mov	r5, r1
 800852a:	f7f8 faed 	bl	8000b08 <__aeabi_d2iz>
 800852e:	2200      	movs	r2, #0
 8008530:	4607      	mov	r7, r0
 8008532:	2300      	movs	r3, #0
 8008534:	4620      	mov	r0, r4
 8008536:	4629      	mov	r1, r5
 8008538:	f7f8 faa8 	bl	8000a8c <__aeabi_dcmplt>
 800853c:	b140      	cbz	r0, 8008550 <_dtoa_r+0x168>
 800853e:	4638      	mov	r0, r7
 8008540:	f7f7 ffc8 	bl	80004d4 <__aeabi_i2d>
 8008544:	4622      	mov	r2, r4
 8008546:	462b      	mov	r3, r5
 8008548:	f7f8 fa96 	bl	8000a78 <__aeabi_dcmpeq>
 800854c:	b900      	cbnz	r0, 8008550 <_dtoa_r+0x168>
 800854e:	3f01      	subs	r7, #1
 8008550:	2f16      	cmp	r7, #22
 8008552:	d853      	bhi.n	80085fc <_dtoa_r+0x214>
 8008554:	4b5f      	ldr	r3, [pc, #380]	@ (80086d4 <_dtoa_r+0x2ec>)
 8008556:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008562:	f7f8 fa93 	bl	8000a8c <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	d04a      	beq.n	8008600 <_dtoa_r+0x218>
 800856a:	3f01      	subs	r7, #1
 800856c:	2300      	movs	r3, #0
 800856e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008570:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008572:	1b9b      	subs	r3, r3, r6
 8008574:	1e5a      	subs	r2, r3, #1
 8008576:	bf45      	ittet	mi
 8008578:	f1c3 0301 	rsbmi	r3, r3, #1
 800857c:	9304      	strmi	r3, [sp, #16]
 800857e:	2300      	movpl	r3, #0
 8008580:	2300      	movmi	r3, #0
 8008582:	9209      	str	r2, [sp, #36]	@ 0x24
 8008584:	bf54      	ite	pl
 8008586:	9304      	strpl	r3, [sp, #16]
 8008588:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800858a:	2f00      	cmp	r7, #0
 800858c:	db3a      	blt.n	8008604 <_dtoa_r+0x21c>
 800858e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008590:	970e      	str	r7, [sp, #56]	@ 0x38
 8008592:	443b      	add	r3, r7
 8008594:	9309      	str	r3, [sp, #36]	@ 0x24
 8008596:	2300      	movs	r3, #0
 8008598:	930a      	str	r3, [sp, #40]	@ 0x28
 800859a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800859c:	2b09      	cmp	r3, #9
 800859e:	d864      	bhi.n	800866a <_dtoa_r+0x282>
 80085a0:	2b05      	cmp	r3, #5
 80085a2:	bfc4      	itt	gt
 80085a4:	3b04      	subgt	r3, #4
 80085a6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80085a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085aa:	f1a3 0302 	sub.w	r3, r3, #2
 80085ae:	bfcc      	ite	gt
 80085b0:	2400      	movgt	r4, #0
 80085b2:	2401      	movle	r4, #1
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d864      	bhi.n	8008682 <_dtoa_r+0x29a>
 80085b8:	e8df f003 	tbb	[pc, r3]
 80085bc:	2c385553 	.word	0x2c385553
 80085c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80085c4:	441e      	add	r6, r3
 80085c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80085ca:	2b20      	cmp	r3, #32
 80085cc:	bfc1      	itttt	gt
 80085ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80085d2:	fa08 f803 	lslgt.w	r8, r8, r3
 80085d6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80085da:	fa24 f303 	lsrgt.w	r3, r4, r3
 80085de:	bfd6      	itet	le
 80085e0:	f1c3 0320 	rsble	r3, r3, #32
 80085e4:	ea48 0003 	orrgt.w	r0, r8, r3
 80085e8:	fa04 f003 	lslle.w	r0, r4, r3
 80085ec:	f7f7 ff62 	bl	80004b4 <__aeabi_ui2d>
 80085f0:	2201      	movs	r2, #1
 80085f2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80085f6:	3e01      	subs	r6, #1
 80085f8:	9212      	str	r2, [sp, #72]	@ 0x48
 80085fa:	e775      	b.n	80084e8 <_dtoa_r+0x100>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e7b6      	b.n	800856e <_dtoa_r+0x186>
 8008600:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008602:	e7b5      	b.n	8008570 <_dtoa_r+0x188>
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	1bdb      	subs	r3, r3, r7
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	427b      	negs	r3, r7
 800860c:	930a      	str	r3, [sp, #40]	@ 0x28
 800860e:	2300      	movs	r3, #0
 8008610:	930e      	str	r3, [sp, #56]	@ 0x38
 8008612:	e7c2      	b.n	800859a <_dtoa_r+0x1b2>
 8008614:	2301      	movs	r3, #1
 8008616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008618:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800861a:	eb07 0b03 	add.w	fp, r7, r3
 800861e:	f10b 0301 	add.w	r3, fp, #1
 8008622:	2b01      	cmp	r3, #1
 8008624:	9308      	str	r3, [sp, #32]
 8008626:	bfb8      	it	lt
 8008628:	2301      	movlt	r3, #1
 800862a:	e006      	b.n	800863a <_dtoa_r+0x252>
 800862c:	2301      	movs	r3, #1
 800862e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008630:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008632:	2b00      	cmp	r3, #0
 8008634:	dd28      	ble.n	8008688 <_dtoa_r+0x2a0>
 8008636:	469b      	mov	fp, r3
 8008638:	9308      	str	r3, [sp, #32]
 800863a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800863e:	2100      	movs	r1, #0
 8008640:	2204      	movs	r2, #4
 8008642:	f102 0514 	add.w	r5, r2, #20
 8008646:	429d      	cmp	r5, r3
 8008648:	d926      	bls.n	8008698 <_dtoa_r+0x2b0>
 800864a:	6041      	str	r1, [r0, #4]
 800864c:	4648      	mov	r0, r9
 800864e:	f000 fd9b 	bl	8009188 <_Balloc>
 8008652:	4682      	mov	sl, r0
 8008654:	2800      	cmp	r0, #0
 8008656:	d141      	bne.n	80086dc <_dtoa_r+0x2f4>
 8008658:	4b1f      	ldr	r3, [pc, #124]	@ (80086d8 <_dtoa_r+0x2f0>)
 800865a:	4602      	mov	r2, r0
 800865c:	f240 11af 	movw	r1, #431	@ 0x1af
 8008660:	e6d6      	b.n	8008410 <_dtoa_r+0x28>
 8008662:	2300      	movs	r3, #0
 8008664:	e7e3      	b.n	800862e <_dtoa_r+0x246>
 8008666:	2300      	movs	r3, #0
 8008668:	e7d5      	b.n	8008616 <_dtoa_r+0x22e>
 800866a:	2401      	movs	r4, #1
 800866c:	2300      	movs	r3, #0
 800866e:	9320      	str	r3, [sp, #128]	@ 0x80
 8008670:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008672:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008676:	2200      	movs	r2, #0
 8008678:	f8cd b020 	str.w	fp, [sp, #32]
 800867c:	2312      	movs	r3, #18
 800867e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008680:	e7db      	b.n	800863a <_dtoa_r+0x252>
 8008682:	2301      	movs	r3, #1
 8008684:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008686:	e7f4      	b.n	8008672 <_dtoa_r+0x28a>
 8008688:	f04f 0b01 	mov.w	fp, #1
 800868c:	f8cd b020 	str.w	fp, [sp, #32]
 8008690:	465b      	mov	r3, fp
 8008692:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008696:	e7d0      	b.n	800863a <_dtoa_r+0x252>
 8008698:	3101      	adds	r1, #1
 800869a:	0052      	lsls	r2, r2, #1
 800869c:	e7d1      	b.n	8008642 <_dtoa_r+0x25a>
 800869e:	bf00      	nop
 80086a0:	636f4361 	.word	0x636f4361
 80086a4:	3fd287a7 	.word	0x3fd287a7
 80086a8:	8b60c8b3 	.word	0x8b60c8b3
 80086ac:	3fc68a28 	.word	0x3fc68a28
 80086b0:	509f79fb 	.word	0x509f79fb
 80086b4:	3fd34413 	.word	0x3fd34413
 80086b8:	0800baf6 	.word	0x0800baf6
 80086bc:	0800bb0d 	.word	0x0800bb0d
 80086c0:	7ff00000 	.word	0x7ff00000
 80086c4:	0800baf2 	.word	0x0800baf2
 80086c8:	0800bac1 	.word	0x0800bac1
 80086cc:	0800bac0 	.word	0x0800bac0
 80086d0:	3ff80000 	.word	0x3ff80000
 80086d4:	0800bcc0 	.word	0x0800bcc0
 80086d8:	0800bb65 	.word	0x0800bb65
 80086dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80086e0:	6018      	str	r0, [r3, #0]
 80086e2:	9b08      	ldr	r3, [sp, #32]
 80086e4:	2b0e      	cmp	r3, #14
 80086e6:	f200 80a1 	bhi.w	800882c <_dtoa_r+0x444>
 80086ea:	2c00      	cmp	r4, #0
 80086ec:	f000 809e 	beq.w	800882c <_dtoa_r+0x444>
 80086f0:	2f00      	cmp	r7, #0
 80086f2:	dd33      	ble.n	800875c <_dtoa_r+0x374>
 80086f4:	4b9c      	ldr	r3, [pc, #624]	@ (8008968 <_dtoa_r+0x580>)
 80086f6:	f007 020f 	and.w	r2, r7, #15
 80086fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008702:	05f8      	lsls	r0, r7, #23
 8008704:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008708:	ea4f 1427 	mov.w	r4, r7, asr #4
 800870c:	d516      	bpl.n	800873c <_dtoa_r+0x354>
 800870e:	4b97      	ldr	r3, [pc, #604]	@ (800896c <_dtoa_r+0x584>)
 8008710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008714:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008718:	f7f8 f870 	bl	80007fc <__aeabi_ddiv>
 800871c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008720:	f004 040f 	and.w	r4, r4, #15
 8008724:	2603      	movs	r6, #3
 8008726:	4d91      	ldr	r5, [pc, #580]	@ (800896c <_dtoa_r+0x584>)
 8008728:	b954      	cbnz	r4, 8008740 <_dtoa_r+0x358>
 800872a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800872e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008732:	f7f8 f863 	bl	80007fc <__aeabi_ddiv>
 8008736:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800873a:	e028      	b.n	800878e <_dtoa_r+0x3a6>
 800873c:	2602      	movs	r6, #2
 800873e:	e7f2      	b.n	8008726 <_dtoa_r+0x33e>
 8008740:	07e1      	lsls	r1, r4, #31
 8008742:	d508      	bpl.n	8008756 <_dtoa_r+0x36e>
 8008744:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800874c:	f7f7 ff2c 	bl	80005a8 <__aeabi_dmul>
 8008750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008754:	3601      	adds	r6, #1
 8008756:	1064      	asrs	r4, r4, #1
 8008758:	3508      	adds	r5, #8
 800875a:	e7e5      	b.n	8008728 <_dtoa_r+0x340>
 800875c:	f000 80af 	beq.w	80088be <_dtoa_r+0x4d6>
 8008760:	427c      	negs	r4, r7
 8008762:	4b81      	ldr	r3, [pc, #516]	@ (8008968 <_dtoa_r+0x580>)
 8008764:	4d81      	ldr	r5, [pc, #516]	@ (800896c <_dtoa_r+0x584>)
 8008766:	f004 020f 	and.w	r2, r4, #15
 800876a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008776:	f7f7 ff17 	bl	80005a8 <__aeabi_dmul>
 800877a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800877e:	1124      	asrs	r4, r4, #4
 8008780:	2300      	movs	r3, #0
 8008782:	2602      	movs	r6, #2
 8008784:	2c00      	cmp	r4, #0
 8008786:	f040 808f 	bne.w	80088a8 <_dtoa_r+0x4c0>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1d3      	bne.n	8008736 <_dtoa_r+0x34e>
 800878e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008790:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8094 	beq.w	80088c2 <_dtoa_r+0x4da>
 800879a:	4b75      	ldr	r3, [pc, #468]	@ (8008970 <_dtoa_r+0x588>)
 800879c:	2200      	movs	r2, #0
 800879e:	4620      	mov	r0, r4
 80087a0:	4629      	mov	r1, r5
 80087a2:	f7f8 f973 	bl	8000a8c <__aeabi_dcmplt>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f000 808b 	beq.w	80088c2 <_dtoa_r+0x4da>
 80087ac:	9b08      	ldr	r3, [sp, #32]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f000 8087 	beq.w	80088c2 <_dtoa_r+0x4da>
 80087b4:	f1bb 0f00 	cmp.w	fp, #0
 80087b8:	dd34      	ble.n	8008824 <_dtoa_r+0x43c>
 80087ba:	4620      	mov	r0, r4
 80087bc:	4b6d      	ldr	r3, [pc, #436]	@ (8008974 <_dtoa_r+0x58c>)
 80087be:	2200      	movs	r2, #0
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7f7 fef1 	bl	80005a8 <__aeabi_dmul>
 80087c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80087ca:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80087ce:	3601      	adds	r6, #1
 80087d0:	465c      	mov	r4, fp
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7f7 fe7e 	bl	80004d4 <__aeabi_i2d>
 80087d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087dc:	f7f7 fee4 	bl	80005a8 <__aeabi_dmul>
 80087e0:	4b65      	ldr	r3, [pc, #404]	@ (8008978 <_dtoa_r+0x590>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	f7f7 fd2a 	bl	800023c <__adddf3>
 80087e8:	4605      	mov	r5, r0
 80087ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80087ee:	2c00      	cmp	r4, #0
 80087f0:	d16a      	bne.n	80088c8 <_dtoa_r+0x4e0>
 80087f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087f6:	4b61      	ldr	r3, [pc, #388]	@ (800897c <_dtoa_r+0x594>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	f7f7 fd1d 	bl	8000238 <__aeabi_dsub>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008806:	462a      	mov	r2, r5
 8008808:	4633      	mov	r3, r6
 800880a:	f7f8 f95d 	bl	8000ac8 <__aeabi_dcmpgt>
 800880e:	2800      	cmp	r0, #0
 8008810:	f040 8298 	bne.w	8008d44 <_dtoa_r+0x95c>
 8008814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008818:	462a      	mov	r2, r5
 800881a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800881e:	f7f8 f935 	bl	8000a8c <__aeabi_dcmplt>
 8008822:	bb38      	cbnz	r0, 8008874 <_dtoa_r+0x48c>
 8008824:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008828:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800882c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800882e:	2b00      	cmp	r3, #0
 8008830:	f2c0 8157 	blt.w	8008ae2 <_dtoa_r+0x6fa>
 8008834:	2f0e      	cmp	r7, #14
 8008836:	f300 8154 	bgt.w	8008ae2 <_dtoa_r+0x6fa>
 800883a:	4b4b      	ldr	r3, [pc, #300]	@ (8008968 <_dtoa_r+0x580>)
 800883c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008840:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008844:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008848:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800884a:	2b00      	cmp	r3, #0
 800884c:	f280 80e5 	bge.w	8008a1a <_dtoa_r+0x632>
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f300 80e1 	bgt.w	8008a1a <_dtoa_r+0x632>
 8008858:	d10c      	bne.n	8008874 <_dtoa_r+0x48c>
 800885a:	4b48      	ldr	r3, [pc, #288]	@ (800897c <_dtoa_r+0x594>)
 800885c:	2200      	movs	r2, #0
 800885e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008862:	f7f7 fea1 	bl	80005a8 <__aeabi_dmul>
 8008866:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800886a:	f7f8 f923 	bl	8000ab4 <__aeabi_dcmpge>
 800886e:	2800      	cmp	r0, #0
 8008870:	f000 8266 	beq.w	8008d40 <_dtoa_r+0x958>
 8008874:	2400      	movs	r4, #0
 8008876:	4625      	mov	r5, r4
 8008878:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800887a:	4656      	mov	r6, sl
 800887c:	ea6f 0803 	mvn.w	r8, r3
 8008880:	2700      	movs	r7, #0
 8008882:	4621      	mov	r1, r4
 8008884:	4648      	mov	r0, r9
 8008886:	f000 fcbf 	bl	8009208 <_Bfree>
 800888a:	2d00      	cmp	r5, #0
 800888c:	f000 80bd 	beq.w	8008a0a <_dtoa_r+0x622>
 8008890:	b12f      	cbz	r7, 800889e <_dtoa_r+0x4b6>
 8008892:	42af      	cmp	r7, r5
 8008894:	d003      	beq.n	800889e <_dtoa_r+0x4b6>
 8008896:	4639      	mov	r1, r7
 8008898:	4648      	mov	r0, r9
 800889a:	f000 fcb5 	bl	8009208 <_Bfree>
 800889e:	4629      	mov	r1, r5
 80088a0:	4648      	mov	r0, r9
 80088a2:	f000 fcb1 	bl	8009208 <_Bfree>
 80088a6:	e0b0      	b.n	8008a0a <_dtoa_r+0x622>
 80088a8:	07e2      	lsls	r2, r4, #31
 80088aa:	d505      	bpl.n	80088b8 <_dtoa_r+0x4d0>
 80088ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088b0:	f7f7 fe7a 	bl	80005a8 <__aeabi_dmul>
 80088b4:	3601      	adds	r6, #1
 80088b6:	2301      	movs	r3, #1
 80088b8:	1064      	asrs	r4, r4, #1
 80088ba:	3508      	adds	r5, #8
 80088bc:	e762      	b.n	8008784 <_dtoa_r+0x39c>
 80088be:	2602      	movs	r6, #2
 80088c0:	e765      	b.n	800878e <_dtoa_r+0x3a6>
 80088c2:	9c08      	ldr	r4, [sp, #32]
 80088c4:	46b8      	mov	r8, r7
 80088c6:	e784      	b.n	80087d2 <_dtoa_r+0x3ea>
 80088c8:	4b27      	ldr	r3, [pc, #156]	@ (8008968 <_dtoa_r+0x580>)
 80088ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088d4:	4454      	add	r4, sl
 80088d6:	2900      	cmp	r1, #0
 80088d8:	d054      	beq.n	8008984 <_dtoa_r+0x59c>
 80088da:	4929      	ldr	r1, [pc, #164]	@ (8008980 <_dtoa_r+0x598>)
 80088dc:	2000      	movs	r0, #0
 80088de:	f7f7 ff8d 	bl	80007fc <__aeabi_ddiv>
 80088e2:	4633      	mov	r3, r6
 80088e4:	462a      	mov	r2, r5
 80088e6:	f7f7 fca7 	bl	8000238 <__aeabi_dsub>
 80088ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088ee:	4656      	mov	r6, sl
 80088f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088f4:	f7f8 f908 	bl	8000b08 <__aeabi_d2iz>
 80088f8:	4605      	mov	r5, r0
 80088fa:	f7f7 fdeb 	bl	80004d4 <__aeabi_i2d>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008906:	f7f7 fc97 	bl	8000238 <__aeabi_dsub>
 800890a:	3530      	adds	r5, #48	@ 0x30
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008914:	f806 5b01 	strb.w	r5, [r6], #1
 8008918:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800891c:	f7f8 f8b6 	bl	8000a8c <__aeabi_dcmplt>
 8008920:	2800      	cmp	r0, #0
 8008922:	d172      	bne.n	8008a0a <_dtoa_r+0x622>
 8008924:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008928:	4911      	ldr	r1, [pc, #68]	@ (8008970 <_dtoa_r+0x588>)
 800892a:	2000      	movs	r0, #0
 800892c:	f7f7 fc84 	bl	8000238 <__aeabi_dsub>
 8008930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008934:	f7f8 f8aa 	bl	8000a8c <__aeabi_dcmplt>
 8008938:	2800      	cmp	r0, #0
 800893a:	f040 80b4 	bne.w	8008aa6 <_dtoa_r+0x6be>
 800893e:	42a6      	cmp	r6, r4
 8008940:	f43f af70 	beq.w	8008824 <_dtoa_r+0x43c>
 8008944:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008948:	4b0a      	ldr	r3, [pc, #40]	@ (8008974 <_dtoa_r+0x58c>)
 800894a:	2200      	movs	r2, #0
 800894c:	f7f7 fe2c 	bl	80005a8 <__aeabi_dmul>
 8008950:	4b08      	ldr	r3, [pc, #32]	@ (8008974 <_dtoa_r+0x58c>)
 8008952:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008956:	2200      	movs	r2, #0
 8008958:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800895c:	f7f7 fe24 	bl	80005a8 <__aeabi_dmul>
 8008960:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008964:	e7c4      	b.n	80088f0 <_dtoa_r+0x508>
 8008966:	bf00      	nop
 8008968:	0800bcc0 	.word	0x0800bcc0
 800896c:	0800bc98 	.word	0x0800bc98
 8008970:	3ff00000 	.word	0x3ff00000
 8008974:	40240000 	.word	0x40240000
 8008978:	401c0000 	.word	0x401c0000
 800897c:	40140000 	.word	0x40140000
 8008980:	3fe00000 	.word	0x3fe00000
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	f7f7 fe0e 	bl	80005a8 <__aeabi_dmul>
 800898c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008990:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008992:	4656      	mov	r6, sl
 8008994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008998:	f7f8 f8b6 	bl	8000b08 <__aeabi_d2iz>
 800899c:	4605      	mov	r5, r0
 800899e:	f7f7 fd99 	bl	80004d4 <__aeabi_i2d>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089aa:	f7f7 fc45 	bl	8000238 <__aeabi_dsub>
 80089ae:	3530      	adds	r5, #48	@ 0x30
 80089b0:	f806 5b01 	strb.w	r5, [r6], #1
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	42a6      	cmp	r6, r4
 80089ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80089be:	f04f 0200 	mov.w	r2, #0
 80089c2:	d124      	bne.n	8008a0e <_dtoa_r+0x626>
 80089c4:	4baf      	ldr	r3, [pc, #700]	@ (8008c84 <_dtoa_r+0x89c>)
 80089c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089ca:	f7f7 fc37 	bl	800023c <__adddf3>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089d6:	f7f8 f877 	bl	8000ac8 <__aeabi_dcmpgt>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d163      	bne.n	8008aa6 <_dtoa_r+0x6be>
 80089de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089e2:	49a8      	ldr	r1, [pc, #672]	@ (8008c84 <_dtoa_r+0x89c>)
 80089e4:	2000      	movs	r0, #0
 80089e6:	f7f7 fc27 	bl	8000238 <__aeabi_dsub>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089f2:	f7f8 f84b 	bl	8000a8c <__aeabi_dcmplt>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f43f af14 	beq.w	8008824 <_dtoa_r+0x43c>
 80089fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80089fe:	1e73      	subs	r3, r6, #1
 8008a00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a06:	2b30      	cmp	r3, #48	@ 0x30
 8008a08:	d0f8      	beq.n	80089fc <_dtoa_r+0x614>
 8008a0a:	4647      	mov	r7, r8
 8008a0c:	e03b      	b.n	8008a86 <_dtoa_r+0x69e>
 8008a0e:	4b9e      	ldr	r3, [pc, #632]	@ (8008c88 <_dtoa_r+0x8a0>)
 8008a10:	f7f7 fdca 	bl	80005a8 <__aeabi_dmul>
 8008a14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a18:	e7bc      	b.n	8008994 <_dtoa_r+0x5ac>
 8008a1a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008a1e:	4656      	mov	r6, sl
 8008a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a24:	4620      	mov	r0, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	f7f7 fee8 	bl	80007fc <__aeabi_ddiv>
 8008a2c:	f7f8 f86c 	bl	8000b08 <__aeabi_d2iz>
 8008a30:	4680      	mov	r8, r0
 8008a32:	f7f7 fd4f 	bl	80004d4 <__aeabi_i2d>
 8008a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a3a:	f7f7 fdb5 	bl	80005a8 <__aeabi_dmul>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a4a:	f7f7 fbf5 	bl	8000238 <__aeabi_dsub>
 8008a4e:	f806 4b01 	strb.w	r4, [r6], #1
 8008a52:	9d08      	ldr	r5, [sp, #32]
 8008a54:	eba6 040a 	sub.w	r4, r6, sl
 8008a58:	42a5      	cmp	r5, r4
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	d133      	bne.n	8008ac8 <_dtoa_r+0x6e0>
 8008a60:	f7f7 fbec 	bl	800023c <__adddf3>
 8008a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a68:	4604      	mov	r4, r0
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	f7f8 f82c 	bl	8000ac8 <__aeabi_dcmpgt>
 8008a70:	b9c0      	cbnz	r0, 8008aa4 <_dtoa_r+0x6bc>
 8008a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a76:	4620      	mov	r0, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7f7 fffd 	bl	8000a78 <__aeabi_dcmpeq>
 8008a7e:	b110      	cbz	r0, 8008a86 <_dtoa_r+0x69e>
 8008a80:	f018 0f01 	tst.w	r8, #1
 8008a84:	d10e      	bne.n	8008aa4 <_dtoa_r+0x6bc>
 8008a86:	9903      	ldr	r1, [sp, #12]
 8008a88:	4648      	mov	r0, r9
 8008a8a:	f000 fbbd 	bl	8009208 <_Bfree>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	7033      	strb	r3, [r6, #0]
 8008a92:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008a94:	3701      	adds	r7, #1
 8008a96:	601f      	str	r7, [r3, #0]
 8008a98:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 824b 	beq.w	8008f36 <_dtoa_r+0xb4e>
 8008aa0:	601e      	str	r6, [r3, #0]
 8008aa2:	e248      	b.n	8008f36 <_dtoa_r+0xb4e>
 8008aa4:	46b8      	mov	r8, r7
 8008aa6:	4633      	mov	r3, r6
 8008aa8:	461e      	mov	r6, r3
 8008aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aae:	2a39      	cmp	r2, #57	@ 0x39
 8008ab0:	d106      	bne.n	8008ac0 <_dtoa_r+0x6d8>
 8008ab2:	459a      	cmp	sl, r3
 8008ab4:	d1f8      	bne.n	8008aa8 <_dtoa_r+0x6c0>
 8008ab6:	2230      	movs	r2, #48	@ 0x30
 8008ab8:	f108 0801 	add.w	r8, r8, #1
 8008abc:	f88a 2000 	strb.w	r2, [sl]
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	3201      	adds	r2, #1
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	e7a0      	b.n	8008a0a <_dtoa_r+0x622>
 8008ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8008c88 <_dtoa_r+0x8a0>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	f7f7 fd6c 	bl	80005a8 <__aeabi_dmul>
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	460d      	mov	r5, r1
 8008ad8:	f7f7 ffce 	bl	8000a78 <__aeabi_dcmpeq>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d09f      	beq.n	8008a20 <_dtoa_r+0x638>
 8008ae0:	e7d1      	b.n	8008a86 <_dtoa_r+0x69e>
 8008ae2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ae4:	2a00      	cmp	r2, #0
 8008ae6:	f000 80ea 	beq.w	8008cbe <_dtoa_r+0x8d6>
 8008aea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008aec:	2a01      	cmp	r2, #1
 8008aee:	f300 80cd 	bgt.w	8008c8c <_dtoa_r+0x8a4>
 8008af2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	f000 80c1 	beq.w	8008c7c <_dtoa_r+0x894>
 8008afa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008afe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b00:	9e04      	ldr	r6, [sp, #16]
 8008b02:	9a04      	ldr	r2, [sp, #16]
 8008b04:	441a      	add	r2, r3
 8008b06:	9204      	str	r2, [sp, #16]
 8008b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	441a      	add	r2, r3
 8008b0e:	4648      	mov	r0, r9
 8008b10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b12:	f000 fc77 	bl	8009404 <__i2b>
 8008b16:	4605      	mov	r5, r0
 8008b18:	b166      	cbz	r6, 8008b34 <_dtoa_r+0x74c>
 8008b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dd09      	ble.n	8008b34 <_dtoa_r+0x74c>
 8008b20:	42b3      	cmp	r3, r6
 8008b22:	9a04      	ldr	r2, [sp, #16]
 8008b24:	bfa8      	it	ge
 8008b26:	4633      	movge	r3, r6
 8008b28:	1ad2      	subs	r2, r2, r3
 8008b2a:	9204      	str	r2, [sp, #16]
 8008b2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b2e:	1af6      	subs	r6, r6, r3
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b36:	b30b      	cbz	r3, 8008b7c <_dtoa_r+0x794>
 8008b38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 80c6 	beq.w	8008ccc <_dtoa_r+0x8e4>
 8008b40:	2c00      	cmp	r4, #0
 8008b42:	f000 80c0 	beq.w	8008cc6 <_dtoa_r+0x8de>
 8008b46:	4629      	mov	r1, r5
 8008b48:	4622      	mov	r2, r4
 8008b4a:	4648      	mov	r0, r9
 8008b4c:	f000 fd12 	bl	8009574 <__pow5mult>
 8008b50:	9a03      	ldr	r2, [sp, #12]
 8008b52:	4601      	mov	r1, r0
 8008b54:	4605      	mov	r5, r0
 8008b56:	4648      	mov	r0, r9
 8008b58:	f000 fc6a 	bl	8009430 <__multiply>
 8008b5c:	9903      	ldr	r1, [sp, #12]
 8008b5e:	4680      	mov	r8, r0
 8008b60:	4648      	mov	r0, r9
 8008b62:	f000 fb51 	bl	8009208 <_Bfree>
 8008b66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b68:	1b1b      	subs	r3, r3, r4
 8008b6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b6c:	f000 80b1 	beq.w	8008cd2 <_dtoa_r+0x8ea>
 8008b70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b72:	4641      	mov	r1, r8
 8008b74:	4648      	mov	r0, r9
 8008b76:	f000 fcfd 	bl	8009574 <__pow5mult>
 8008b7a:	9003      	str	r0, [sp, #12]
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	4648      	mov	r0, r9
 8008b80:	f000 fc40 	bl	8009404 <__i2b>
 8008b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b86:	4604      	mov	r4, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 81d8 	beq.w	8008f3e <_dtoa_r+0xb56>
 8008b8e:	461a      	mov	r2, r3
 8008b90:	4601      	mov	r1, r0
 8008b92:	4648      	mov	r0, r9
 8008b94:	f000 fcee 	bl	8009574 <__pow5mult>
 8008b98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	f300 809f 	bgt.w	8008ce0 <_dtoa_r+0x8f8>
 8008ba2:	9b06      	ldr	r3, [sp, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f040 8097 	bne.w	8008cd8 <_dtoa_r+0x8f0>
 8008baa:	9b07      	ldr	r3, [sp, #28]
 8008bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f040 8093 	bne.w	8008cdc <_dtoa_r+0x8f4>
 8008bb6:	9b07      	ldr	r3, [sp, #28]
 8008bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bbc:	0d1b      	lsrs	r3, r3, #20
 8008bbe:	051b      	lsls	r3, r3, #20
 8008bc0:	b133      	cbz	r3, 8008bd0 <_dtoa_r+0x7e8>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	9304      	str	r3, [sp, #16]
 8008bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bca:	3301      	adds	r3, #1
 8008bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bce:	2301      	movs	r3, #1
 8008bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 81b8 	beq.w	8008f4a <_dtoa_r+0xb62>
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008be0:	6918      	ldr	r0, [r3, #16]
 8008be2:	f000 fbc3 	bl	800936c <__hi0bits>
 8008be6:	f1c0 0020 	rsb	r0, r0, #32
 8008bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bec:	4418      	add	r0, r3
 8008bee:	f010 001f 	ands.w	r0, r0, #31
 8008bf2:	f000 8082 	beq.w	8008cfa <_dtoa_r+0x912>
 8008bf6:	f1c0 0320 	rsb	r3, r0, #32
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	dd73      	ble.n	8008ce6 <_dtoa_r+0x8fe>
 8008bfe:	9b04      	ldr	r3, [sp, #16]
 8008c00:	f1c0 001c 	rsb	r0, r0, #28
 8008c04:	4403      	add	r3, r0
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c0a:	4403      	add	r3, r0
 8008c0c:	4406      	add	r6, r0
 8008c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c10:	9b04      	ldr	r3, [sp, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	dd05      	ble.n	8008c22 <_dtoa_r+0x83a>
 8008c16:	9903      	ldr	r1, [sp, #12]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4648      	mov	r0, r9
 8008c1c:	f000 fd04 	bl	8009628 <__lshift>
 8008c20:	9003      	str	r0, [sp, #12]
 8008c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	dd05      	ble.n	8008c34 <_dtoa_r+0x84c>
 8008c28:	4621      	mov	r1, r4
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	4648      	mov	r0, r9
 8008c2e:	f000 fcfb 	bl	8009628 <__lshift>
 8008c32:	4604      	mov	r4, r0
 8008c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d061      	beq.n	8008cfe <_dtoa_r+0x916>
 8008c3a:	9803      	ldr	r0, [sp, #12]
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	f000 fd5f 	bl	8009700 <__mcmp>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	da5b      	bge.n	8008cfe <_dtoa_r+0x916>
 8008c46:	2300      	movs	r3, #0
 8008c48:	9903      	ldr	r1, [sp, #12]
 8008c4a:	220a      	movs	r2, #10
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	f000 fafd 	bl	800924c <__multadd>
 8008c52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c54:	9003      	str	r0, [sp, #12]
 8008c56:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 8177 	beq.w	8008f4e <_dtoa_r+0xb66>
 8008c60:	4629      	mov	r1, r5
 8008c62:	2300      	movs	r3, #0
 8008c64:	220a      	movs	r2, #10
 8008c66:	4648      	mov	r0, r9
 8008c68:	f000 faf0 	bl	800924c <__multadd>
 8008c6c:	f1bb 0f00 	cmp.w	fp, #0
 8008c70:	4605      	mov	r5, r0
 8008c72:	dc6f      	bgt.n	8008d54 <_dtoa_r+0x96c>
 8008c74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	dc49      	bgt.n	8008d0e <_dtoa_r+0x926>
 8008c7a:	e06b      	b.n	8008d54 <_dtoa_r+0x96c>
 8008c7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c82:	e73c      	b.n	8008afe <_dtoa_r+0x716>
 8008c84:	3fe00000 	.word	0x3fe00000
 8008c88:	40240000 	.word	0x40240000
 8008c8c:	9b08      	ldr	r3, [sp, #32]
 8008c8e:	1e5c      	subs	r4, r3, #1
 8008c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c92:	42a3      	cmp	r3, r4
 8008c94:	db09      	blt.n	8008caa <_dtoa_r+0x8c2>
 8008c96:	1b1c      	subs	r4, r3, r4
 8008c98:	9b08      	ldr	r3, [sp, #32]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f6bf af30 	bge.w	8008b00 <_dtoa_r+0x718>
 8008ca0:	9b04      	ldr	r3, [sp, #16]
 8008ca2:	9a08      	ldr	r2, [sp, #32]
 8008ca4:	1a9e      	subs	r6, r3, r2
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e72b      	b.n	8008b02 <_dtoa_r+0x71a>
 8008caa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cae:	940a      	str	r4, [sp, #40]	@ 0x28
 8008cb0:	1ae3      	subs	r3, r4, r3
 8008cb2:	441a      	add	r2, r3
 8008cb4:	9e04      	ldr	r6, [sp, #16]
 8008cb6:	9b08      	ldr	r3, [sp, #32]
 8008cb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cba:	2400      	movs	r4, #0
 8008cbc:	e721      	b.n	8008b02 <_dtoa_r+0x71a>
 8008cbe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008cc0:	9e04      	ldr	r6, [sp, #16]
 8008cc2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008cc4:	e728      	b.n	8008b18 <_dtoa_r+0x730>
 8008cc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008cca:	e751      	b.n	8008b70 <_dtoa_r+0x788>
 8008ccc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cce:	9903      	ldr	r1, [sp, #12]
 8008cd0:	e750      	b.n	8008b74 <_dtoa_r+0x78c>
 8008cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd6:	e751      	b.n	8008b7c <_dtoa_r+0x794>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	e779      	b.n	8008bd0 <_dtoa_r+0x7e8>
 8008cdc:	9b06      	ldr	r3, [sp, #24]
 8008cde:	e777      	b.n	8008bd0 <_dtoa_r+0x7e8>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ce4:	e779      	b.n	8008bda <_dtoa_r+0x7f2>
 8008ce6:	d093      	beq.n	8008c10 <_dtoa_r+0x828>
 8008ce8:	9a04      	ldr	r2, [sp, #16]
 8008cea:	331c      	adds	r3, #28
 8008cec:	441a      	add	r2, r3
 8008cee:	9204      	str	r2, [sp, #16]
 8008cf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf2:	441a      	add	r2, r3
 8008cf4:	441e      	add	r6, r3
 8008cf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cf8:	e78a      	b.n	8008c10 <_dtoa_r+0x828>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	e7f4      	b.n	8008ce8 <_dtoa_r+0x900>
 8008cfe:	9b08      	ldr	r3, [sp, #32]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	46b8      	mov	r8, r7
 8008d04:	dc20      	bgt.n	8008d48 <_dtoa_r+0x960>
 8008d06:	469b      	mov	fp, r3
 8008d08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	dd1e      	ble.n	8008d4c <_dtoa_r+0x964>
 8008d0e:	f1bb 0f00 	cmp.w	fp, #0
 8008d12:	f47f adb1 	bne.w	8008878 <_dtoa_r+0x490>
 8008d16:	4621      	mov	r1, r4
 8008d18:	465b      	mov	r3, fp
 8008d1a:	2205      	movs	r2, #5
 8008d1c:	4648      	mov	r0, r9
 8008d1e:	f000 fa95 	bl	800924c <__multadd>
 8008d22:	4601      	mov	r1, r0
 8008d24:	4604      	mov	r4, r0
 8008d26:	9803      	ldr	r0, [sp, #12]
 8008d28:	f000 fcea 	bl	8009700 <__mcmp>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f77f ada3 	ble.w	8008878 <_dtoa_r+0x490>
 8008d32:	4656      	mov	r6, sl
 8008d34:	2331      	movs	r3, #49	@ 0x31
 8008d36:	f806 3b01 	strb.w	r3, [r6], #1
 8008d3a:	f108 0801 	add.w	r8, r8, #1
 8008d3e:	e59f      	b.n	8008880 <_dtoa_r+0x498>
 8008d40:	9c08      	ldr	r4, [sp, #32]
 8008d42:	46b8      	mov	r8, r7
 8008d44:	4625      	mov	r5, r4
 8008d46:	e7f4      	b.n	8008d32 <_dtoa_r+0x94a>
 8008d48:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008d4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 8101 	beq.w	8008f56 <_dtoa_r+0xb6e>
 8008d54:	2e00      	cmp	r6, #0
 8008d56:	dd05      	ble.n	8008d64 <_dtoa_r+0x97c>
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4632      	mov	r2, r6
 8008d5c:	4648      	mov	r0, r9
 8008d5e:	f000 fc63 	bl	8009628 <__lshift>
 8008d62:	4605      	mov	r5, r0
 8008d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d05c      	beq.n	8008e24 <_dtoa_r+0xa3c>
 8008d6a:	6869      	ldr	r1, [r5, #4]
 8008d6c:	4648      	mov	r0, r9
 8008d6e:	f000 fa0b 	bl	8009188 <_Balloc>
 8008d72:	4606      	mov	r6, r0
 8008d74:	b928      	cbnz	r0, 8008d82 <_dtoa_r+0x99a>
 8008d76:	4b82      	ldr	r3, [pc, #520]	@ (8008f80 <_dtoa_r+0xb98>)
 8008d78:	4602      	mov	r2, r0
 8008d7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d7e:	f7ff bb47 	b.w	8008410 <_dtoa_r+0x28>
 8008d82:	692a      	ldr	r2, [r5, #16]
 8008d84:	3202      	adds	r2, #2
 8008d86:	0092      	lsls	r2, r2, #2
 8008d88:	f105 010c 	add.w	r1, r5, #12
 8008d8c:	300c      	adds	r0, #12
 8008d8e:	f002 f915 	bl	800afbc <memcpy>
 8008d92:	2201      	movs	r2, #1
 8008d94:	4631      	mov	r1, r6
 8008d96:	4648      	mov	r0, r9
 8008d98:	f000 fc46 	bl	8009628 <__lshift>
 8008d9c:	f10a 0301 	add.w	r3, sl, #1
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	eb0a 030b 	add.w	r3, sl, fp
 8008da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008da8:	9b06      	ldr	r3, [sp, #24]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	462f      	mov	r7, r5
 8008db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db2:	4605      	mov	r5, r0
 8008db4:	9b04      	ldr	r3, [sp, #16]
 8008db6:	9803      	ldr	r0, [sp, #12]
 8008db8:	4621      	mov	r1, r4
 8008dba:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008dbe:	f7ff fa8b 	bl	80082d8 <quorem>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	3330      	adds	r3, #48	@ 0x30
 8008dc6:	9006      	str	r0, [sp, #24]
 8008dc8:	4639      	mov	r1, r7
 8008dca:	9803      	ldr	r0, [sp, #12]
 8008dcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dce:	f000 fc97 	bl	8009700 <__mcmp>
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	9008      	str	r0, [sp, #32]
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4648      	mov	r0, r9
 8008dda:	f000 fcad 	bl	8009738 <__mdiff>
 8008dde:	68c2      	ldr	r2, [r0, #12]
 8008de0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008de2:	4606      	mov	r6, r0
 8008de4:	bb02      	cbnz	r2, 8008e28 <_dtoa_r+0xa40>
 8008de6:	4601      	mov	r1, r0
 8008de8:	9803      	ldr	r0, [sp, #12]
 8008dea:	f000 fc89 	bl	8009700 <__mcmp>
 8008dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008df0:	4602      	mov	r2, r0
 8008df2:	4631      	mov	r1, r6
 8008df4:	4648      	mov	r0, r9
 8008df6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8008dfa:	f000 fa05 	bl	8009208 <_Bfree>
 8008dfe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008e02:	9e04      	ldr	r6, [sp, #16]
 8008e04:	ea42 0103 	orr.w	r1, r2, r3
 8008e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0a:	4319      	orrs	r1, r3
 8008e0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e0e:	d10d      	bne.n	8008e2c <_dtoa_r+0xa44>
 8008e10:	2b39      	cmp	r3, #57	@ 0x39
 8008e12:	d027      	beq.n	8008e64 <_dtoa_r+0xa7c>
 8008e14:	9a08      	ldr	r2, [sp, #32]
 8008e16:	2a00      	cmp	r2, #0
 8008e18:	dd01      	ble.n	8008e1e <_dtoa_r+0xa36>
 8008e1a:	9b06      	ldr	r3, [sp, #24]
 8008e1c:	3331      	adds	r3, #49	@ 0x31
 8008e1e:	f88b 3000 	strb.w	r3, [fp]
 8008e22:	e52e      	b.n	8008882 <_dtoa_r+0x49a>
 8008e24:	4628      	mov	r0, r5
 8008e26:	e7b9      	b.n	8008d9c <_dtoa_r+0x9b4>
 8008e28:	2201      	movs	r2, #1
 8008e2a:	e7e2      	b.n	8008df2 <_dtoa_r+0xa0a>
 8008e2c:	9908      	ldr	r1, [sp, #32]
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	db04      	blt.n	8008e3c <_dtoa_r+0xa54>
 8008e32:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8008e34:	4301      	orrs	r1, r0
 8008e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e38:	4301      	orrs	r1, r0
 8008e3a:	d120      	bne.n	8008e7e <_dtoa_r+0xa96>
 8008e3c:	2a00      	cmp	r2, #0
 8008e3e:	ddee      	ble.n	8008e1e <_dtoa_r+0xa36>
 8008e40:	9903      	ldr	r1, [sp, #12]
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	2201      	movs	r2, #1
 8008e46:	4648      	mov	r0, r9
 8008e48:	f000 fbee 	bl	8009628 <__lshift>
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	9003      	str	r0, [sp, #12]
 8008e50:	f000 fc56 	bl	8009700 <__mcmp>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	dc02      	bgt.n	8008e60 <_dtoa_r+0xa78>
 8008e5a:	d1e0      	bne.n	8008e1e <_dtoa_r+0xa36>
 8008e5c:	07da      	lsls	r2, r3, #31
 8008e5e:	d5de      	bpl.n	8008e1e <_dtoa_r+0xa36>
 8008e60:	2b39      	cmp	r3, #57	@ 0x39
 8008e62:	d1da      	bne.n	8008e1a <_dtoa_r+0xa32>
 8008e64:	2339      	movs	r3, #57	@ 0x39
 8008e66:	f88b 3000 	strb.w	r3, [fp]
 8008e6a:	4633      	mov	r3, r6
 8008e6c:	461e      	mov	r6, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e74:	2a39      	cmp	r2, #57	@ 0x39
 8008e76:	d04e      	beq.n	8008f16 <_dtoa_r+0xb2e>
 8008e78:	3201      	adds	r2, #1
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	e501      	b.n	8008882 <_dtoa_r+0x49a>
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	dd03      	ble.n	8008e8a <_dtoa_r+0xaa2>
 8008e82:	2b39      	cmp	r3, #57	@ 0x39
 8008e84:	d0ee      	beq.n	8008e64 <_dtoa_r+0xa7c>
 8008e86:	3301      	adds	r3, #1
 8008e88:	e7c9      	b.n	8008e1e <_dtoa_r+0xa36>
 8008e8a:	9a04      	ldr	r2, [sp, #16]
 8008e8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e92:	428a      	cmp	r2, r1
 8008e94:	d028      	beq.n	8008ee8 <_dtoa_r+0xb00>
 8008e96:	9903      	ldr	r1, [sp, #12]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	220a      	movs	r2, #10
 8008e9c:	4648      	mov	r0, r9
 8008e9e:	f000 f9d5 	bl	800924c <__multadd>
 8008ea2:	42af      	cmp	r7, r5
 8008ea4:	9003      	str	r0, [sp, #12]
 8008ea6:	f04f 0300 	mov.w	r3, #0
 8008eaa:	f04f 020a 	mov.w	r2, #10
 8008eae:	4639      	mov	r1, r7
 8008eb0:	4648      	mov	r0, r9
 8008eb2:	d107      	bne.n	8008ec4 <_dtoa_r+0xadc>
 8008eb4:	f000 f9ca 	bl	800924c <__multadd>
 8008eb8:	4607      	mov	r7, r0
 8008eba:	4605      	mov	r5, r0
 8008ebc:	9b04      	ldr	r3, [sp, #16]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	9304      	str	r3, [sp, #16]
 8008ec2:	e777      	b.n	8008db4 <_dtoa_r+0x9cc>
 8008ec4:	f000 f9c2 	bl	800924c <__multadd>
 8008ec8:	4629      	mov	r1, r5
 8008eca:	4607      	mov	r7, r0
 8008ecc:	2300      	movs	r3, #0
 8008ece:	220a      	movs	r2, #10
 8008ed0:	4648      	mov	r0, r9
 8008ed2:	f000 f9bb 	bl	800924c <__multadd>
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	e7f0      	b.n	8008ebc <_dtoa_r+0xad4>
 8008eda:	f1bb 0f00 	cmp.w	fp, #0
 8008ede:	bfcc      	ite	gt
 8008ee0:	465e      	movgt	r6, fp
 8008ee2:	2601      	movle	r6, #1
 8008ee4:	4456      	add	r6, sl
 8008ee6:	2700      	movs	r7, #0
 8008ee8:	9903      	ldr	r1, [sp, #12]
 8008eea:	9304      	str	r3, [sp, #16]
 8008eec:	2201      	movs	r2, #1
 8008eee:	4648      	mov	r0, r9
 8008ef0:	f000 fb9a 	bl	8009628 <__lshift>
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	9003      	str	r0, [sp, #12]
 8008ef8:	f000 fc02 	bl	8009700 <__mcmp>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	dcb4      	bgt.n	8008e6a <_dtoa_r+0xa82>
 8008f00:	d102      	bne.n	8008f08 <_dtoa_r+0xb20>
 8008f02:	9b04      	ldr	r3, [sp, #16]
 8008f04:	07db      	lsls	r3, r3, #31
 8008f06:	d4b0      	bmi.n	8008e6a <_dtoa_r+0xa82>
 8008f08:	4633      	mov	r3, r6
 8008f0a:	461e      	mov	r6, r3
 8008f0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f10:	2a30      	cmp	r2, #48	@ 0x30
 8008f12:	d0fa      	beq.n	8008f0a <_dtoa_r+0xb22>
 8008f14:	e4b5      	b.n	8008882 <_dtoa_r+0x49a>
 8008f16:	459a      	cmp	sl, r3
 8008f18:	d1a8      	bne.n	8008e6c <_dtoa_r+0xa84>
 8008f1a:	2331      	movs	r3, #49	@ 0x31
 8008f1c:	f108 0801 	add.w	r8, r8, #1
 8008f20:	f88a 3000 	strb.w	r3, [sl]
 8008f24:	e4ad      	b.n	8008882 <_dtoa_r+0x49a>
 8008f26:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008f28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008f84 <_dtoa_r+0xb9c>
 8008f2c:	b11b      	cbz	r3, 8008f36 <_dtoa_r+0xb4e>
 8008f2e:	f10a 0308 	add.w	r3, sl, #8
 8008f32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	4650      	mov	r0, sl
 8008f38:	b017      	add	sp, #92	@ 0x5c
 8008f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	f77f ae2e 	ble.w	8008ba2 <_dtoa_r+0x7ba>
 8008f46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f4a:	2001      	movs	r0, #1
 8008f4c:	e64d      	b.n	8008bea <_dtoa_r+0x802>
 8008f4e:	f1bb 0f00 	cmp.w	fp, #0
 8008f52:	f77f aed9 	ble.w	8008d08 <_dtoa_r+0x920>
 8008f56:	4656      	mov	r6, sl
 8008f58:	9803      	ldr	r0, [sp, #12]
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	f7ff f9bc 	bl	80082d8 <quorem>
 8008f60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008f64:	f806 3b01 	strb.w	r3, [r6], #1
 8008f68:	eba6 020a 	sub.w	r2, r6, sl
 8008f6c:	4593      	cmp	fp, r2
 8008f6e:	ddb4      	ble.n	8008eda <_dtoa_r+0xaf2>
 8008f70:	9903      	ldr	r1, [sp, #12]
 8008f72:	2300      	movs	r3, #0
 8008f74:	220a      	movs	r2, #10
 8008f76:	4648      	mov	r0, r9
 8008f78:	f000 f968 	bl	800924c <__multadd>
 8008f7c:	9003      	str	r0, [sp, #12]
 8008f7e:	e7eb      	b.n	8008f58 <_dtoa_r+0xb70>
 8008f80:	0800bb65 	.word	0x0800bb65
 8008f84:	0800bae9 	.word	0x0800bae9

08008f88 <_free_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	d041      	beq.n	8009014 <_free_r+0x8c>
 8008f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f94:	1f0c      	subs	r4, r1, #4
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	bfb8      	it	lt
 8008f9a:	18e4      	addlt	r4, r4, r3
 8008f9c:	f000 f8e8 	bl	8009170 <__malloc_lock>
 8008fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8009018 <_free_r+0x90>)
 8008fa2:	6813      	ldr	r3, [r2, #0]
 8008fa4:	b933      	cbnz	r3, 8008fb4 <_free_r+0x2c>
 8008fa6:	6063      	str	r3, [r4, #4]
 8008fa8:	6014      	str	r4, [r2, #0]
 8008faa:	4628      	mov	r0, r5
 8008fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fb0:	f000 b8e4 	b.w	800917c <__malloc_unlock>
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	d908      	bls.n	8008fca <_free_r+0x42>
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	1821      	adds	r1, r4, r0
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	bf01      	itttt	eq
 8008fc0:	6819      	ldreq	r1, [r3, #0]
 8008fc2:	685b      	ldreq	r3, [r3, #4]
 8008fc4:	1809      	addeq	r1, r1, r0
 8008fc6:	6021      	streq	r1, [r4, #0]
 8008fc8:	e7ed      	b.n	8008fa6 <_free_r+0x1e>
 8008fca:	461a      	mov	r2, r3
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	b10b      	cbz	r3, 8008fd4 <_free_r+0x4c>
 8008fd0:	42a3      	cmp	r3, r4
 8008fd2:	d9fa      	bls.n	8008fca <_free_r+0x42>
 8008fd4:	6811      	ldr	r1, [r2, #0]
 8008fd6:	1850      	adds	r0, r2, r1
 8008fd8:	42a0      	cmp	r0, r4
 8008fda:	d10b      	bne.n	8008ff4 <_free_r+0x6c>
 8008fdc:	6820      	ldr	r0, [r4, #0]
 8008fde:	4401      	add	r1, r0
 8008fe0:	1850      	adds	r0, r2, r1
 8008fe2:	4283      	cmp	r3, r0
 8008fe4:	6011      	str	r1, [r2, #0]
 8008fe6:	d1e0      	bne.n	8008faa <_free_r+0x22>
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	6053      	str	r3, [r2, #4]
 8008fee:	4408      	add	r0, r1
 8008ff0:	6010      	str	r0, [r2, #0]
 8008ff2:	e7da      	b.n	8008faa <_free_r+0x22>
 8008ff4:	d902      	bls.n	8008ffc <_free_r+0x74>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	e7d6      	b.n	8008faa <_free_r+0x22>
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	1821      	adds	r1, r4, r0
 8009000:	428b      	cmp	r3, r1
 8009002:	bf04      	itt	eq
 8009004:	6819      	ldreq	r1, [r3, #0]
 8009006:	685b      	ldreq	r3, [r3, #4]
 8009008:	6063      	str	r3, [r4, #4]
 800900a:	bf04      	itt	eq
 800900c:	1809      	addeq	r1, r1, r0
 800900e:	6021      	streq	r1, [r4, #0]
 8009010:	6054      	str	r4, [r2, #4]
 8009012:	e7ca      	b.n	8008faa <_free_r+0x22>
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	bf00      	nop
 8009018:	2000072c 	.word	0x2000072c

0800901c <malloc>:
 800901c:	4b02      	ldr	r3, [pc, #8]	@ (8009028 <malloc+0xc>)
 800901e:	4601      	mov	r1, r0
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	f000 b825 	b.w	8009070 <_malloc_r>
 8009026:	bf00      	nop
 8009028:	20000028 	.word	0x20000028

0800902c <sbrk_aligned>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4e0f      	ldr	r6, [pc, #60]	@ (800906c <sbrk_aligned+0x40>)
 8009030:	460c      	mov	r4, r1
 8009032:	6831      	ldr	r1, [r6, #0]
 8009034:	4605      	mov	r5, r0
 8009036:	b911      	cbnz	r1, 800903e <sbrk_aligned+0x12>
 8009038:	f001 ffb0 	bl	800af9c <_sbrk_r>
 800903c:	6030      	str	r0, [r6, #0]
 800903e:	4621      	mov	r1, r4
 8009040:	4628      	mov	r0, r5
 8009042:	f001 ffab 	bl	800af9c <_sbrk_r>
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	d103      	bne.n	8009052 <sbrk_aligned+0x26>
 800904a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800904e:	4620      	mov	r0, r4
 8009050:	bd70      	pop	{r4, r5, r6, pc}
 8009052:	1cc4      	adds	r4, r0, #3
 8009054:	f024 0403 	bic.w	r4, r4, #3
 8009058:	42a0      	cmp	r0, r4
 800905a:	d0f8      	beq.n	800904e <sbrk_aligned+0x22>
 800905c:	1a21      	subs	r1, r4, r0
 800905e:	4628      	mov	r0, r5
 8009060:	f001 ff9c 	bl	800af9c <_sbrk_r>
 8009064:	3001      	adds	r0, #1
 8009066:	d1f2      	bne.n	800904e <sbrk_aligned+0x22>
 8009068:	e7ef      	b.n	800904a <sbrk_aligned+0x1e>
 800906a:	bf00      	nop
 800906c:	20000728 	.word	0x20000728

08009070 <_malloc_r>:
 8009070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009074:	1ccd      	adds	r5, r1, #3
 8009076:	f025 0503 	bic.w	r5, r5, #3
 800907a:	3508      	adds	r5, #8
 800907c:	2d0c      	cmp	r5, #12
 800907e:	bf38      	it	cc
 8009080:	250c      	movcc	r5, #12
 8009082:	2d00      	cmp	r5, #0
 8009084:	4606      	mov	r6, r0
 8009086:	db01      	blt.n	800908c <_malloc_r+0x1c>
 8009088:	42a9      	cmp	r1, r5
 800908a:	d904      	bls.n	8009096 <_malloc_r+0x26>
 800908c:	230c      	movs	r3, #12
 800908e:	6033      	str	r3, [r6, #0]
 8009090:	2000      	movs	r0, #0
 8009092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800916c <_malloc_r+0xfc>
 800909a:	f000 f869 	bl	8009170 <__malloc_lock>
 800909e:	f8d8 3000 	ldr.w	r3, [r8]
 80090a2:	461c      	mov	r4, r3
 80090a4:	bb44      	cbnz	r4, 80090f8 <_malloc_r+0x88>
 80090a6:	4629      	mov	r1, r5
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7ff ffbf 	bl	800902c <sbrk_aligned>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	4604      	mov	r4, r0
 80090b2:	d158      	bne.n	8009166 <_malloc_r+0xf6>
 80090b4:	f8d8 4000 	ldr.w	r4, [r8]
 80090b8:	4627      	mov	r7, r4
 80090ba:	2f00      	cmp	r7, #0
 80090bc:	d143      	bne.n	8009146 <_malloc_r+0xd6>
 80090be:	2c00      	cmp	r4, #0
 80090c0:	d04b      	beq.n	800915a <_malloc_r+0xea>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	4639      	mov	r1, r7
 80090c6:	4630      	mov	r0, r6
 80090c8:	eb04 0903 	add.w	r9, r4, r3
 80090cc:	f001 ff66 	bl	800af9c <_sbrk_r>
 80090d0:	4581      	cmp	r9, r0
 80090d2:	d142      	bne.n	800915a <_malloc_r+0xea>
 80090d4:	6821      	ldr	r1, [r4, #0]
 80090d6:	1a6d      	subs	r5, r5, r1
 80090d8:	4629      	mov	r1, r5
 80090da:	4630      	mov	r0, r6
 80090dc:	f7ff ffa6 	bl	800902c <sbrk_aligned>
 80090e0:	3001      	adds	r0, #1
 80090e2:	d03a      	beq.n	800915a <_malloc_r+0xea>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	442b      	add	r3, r5
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	f8d8 3000 	ldr.w	r3, [r8]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	bb62      	cbnz	r2, 800914c <_malloc_r+0xdc>
 80090f2:	f8c8 7000 	str.w	r7, [r8]
 80090f6:	e00f      	b.n	8009118 <_malloc_r+0xa8>
 80090f8:	6822      	ldr	r2, [r4, #0]
 80090fa:	1b52      	subs	r2, r2, r5
 80090fc:	d420      	bmi.n	8009140 <_malloc_r+0xd0>
 80090fe:	2a0b      	cmp	r2, #11
 8009100:	d917      	bls.n	8009132 <_malloc_r+0xc2>
 8009102:	1961      	adds	r1, r4, r5
 8009104:	42a3      	cmp	r3, r4
 8009106:	6025      	str	r5, [r4, #0]
 8009108:	bf18      	it	ne
 800910a:	6059      	strne	r1, [r3, #4]
 800910c:	6863      	ldr	r3, [r4, #4]
 800910e:	bf08      	it	eq
 8009110:	f8c8 1000 	streq.w	r1, [r8]
 8009114:	5162      	str	r2, [r4, r5]
 8009116:	604b      	str	r3, [r1, #4]
 8009118:	4630      	mov	r0, r6
 800911a:	f000 f82f 	bl	800917c <__malloc_unlock>
 800911e:	f104 000b 	add.w	r0, r4, #11
 8009122:	1d23      	adds	r3, r4, #4
 8009124:	f020 0007 	bic.w	r0, r0, #7
 8009128:	1ac2      	subs	r2, r0, r3
 800912a:	bf1c      	itt	ne
 800912c:	1a1b      	subne	r3, r3, r0
 800912e:	50a3      	strne	r3, [r4, r2]
 8009130:	e7af      	b.n	8009092 <_malloc_r+0x22>
 8009132:	6862      	ldr	r2, [r4, #4]
 8009134:	42a3      	cmp	r3, r4
 8009136:	bf0c      	ite	eq
 8009138:	f8c8 2000 	streq.w	r2, [r8]
 800913c:	605a      	strne	r2, [r3, #4]
 800913e:	e7eb      	b.n	8009118 <_malloc_r+0xa8>
 8009140:	4623      	mov	r3, r4
 8009142:	6864      	ldr	r4, [r4, #4]
 8009144:	e7ae      	b.n	80090a4 <_malloc_r+0x34>
 8009146:	463c      	mov	r4, r7
 8009148:	687f      	ldr	r7, [r7, #4]
 800914a:	e7b6      	b.n	80090ba <_malloc_r+0x4a>
 800914c:	461a      	mov	r2, r3
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	42a3      	cmp	r3, r4
 8009152:	d1fb      	bne.n	800914c <_malloc_r+0xdc>
 8009154:	2300      	movs	r3, #0
 8009156:	6053      	str	r3, [r2, #4]
 8009158:	e7de      	b.n	8009118 <_malloc_r+0xa8>
 800915a:	230c      	movs	r3, #12
 800915c:	6033      	str	r3, [r6, #0]
 800915e:	4630      	mov	r0, r6
 8009160:	f000 f80c 	bl	800917c <__malloc_unlock>
 8009164:	e794      	b.n	8009090 <_malloc_r+0x20>
 8009166:	6005      	str	r5, [r0, #0]
 8009168:	e7d6      	b.n	8009118 <_malloc_r+0xa8>
 800916a:	bf00      	nop
 800916c:	2000072c 	.word	0x2000072c

08009170 <__malloc_lock>:
 8009170:	4801      	ldr	r0, [pc, #4]	@ (8009178 <__malloc_lock+0x8>)
 8009172:	f7ff b8aa 	b.w	80082ca <__retarget_lock_acquire_recursive>
 8009176:	bf00      	nop
 8009178:	20000724 	.word	0x20000724

0800917c <__malloc_unlock>:
 800917c:	4801      	ldr	r0, [pc, #4]	@ (8009184 <__malloc_unlock+0x8>)
 800917e:	f7ff b8a5 	b.w	80082cc <__retarget_lock_release_recursive>
 8009182:	bf00      	nop
 8009184:	20000724 	.word	0x20000724

08009188 <_Balloc>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	69c6      	ldr	r6, [r0, #28]
 800918c:	4604      	mov	r4, r0
 800918e:	460d      	mov	r5, r1
 8009190:	b976      	cbnz	r6, 80091b0 <_Balloc+0x28>
 8009192:	2010      	movs	r0, #16
 8009194:	f7ff ff42 	bl	800901c <malloc>
 8009198:	4602      	mov	r2, r0
 800919a:	61e0      	str	r0, [r4, #28]
 800919c:	b920      	cbnz	r0, 80091a8 <_Balloc+0x20>
 800919e:	4b18      	ldr	r3, [pc, #96]	@ (8009200 <_Balloc+0x78>)
 80091a0:	4818      	ldr	r0, [pc, #96]	@ (8009204 <_Balloc+0x7c>)
 80091a2:	216b      	movs	r1, #107	@ 0x6b
 80091a4:	f001 ff1e 	bl	800afe4 <__assert_func>
 80091a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091ac:	6006      	str	r6, [r0, #0]
 80091ae:	60c6      	str	r6, [r0, #12]
 80091b0:	69e6      	ldr	r6, [r4, #28]
 80091b2:	68f3      	ldr	r3, [r6, #12]
 80091b4:	b183      	cbz	r3, 80091d8 <_Balloc+0x50>
 80091b6:	69e3      	ldr	r3, [r4, #28]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091be:	b9b8      	cbnz	r0, 80091f0 <_Balloc+0x68>
 80091c0:	2101      	movs	r1, #1
 80091c2:	fa01 f605 	lsl.w	r6, r1, r5
 80091c6:	1d72      	adds	r2, r6, #5
 80091c8:	0092      	lsls	r2, r2, #2
 80091ca:	4620      	mov	r0, r4
 80091cc:	f001 ff28 	bl	800b020 <_calloc_r>
 80091d0:	b160      	cbz	r0, 80091ec <_Balloc+0x64>
 80091d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091d6:	e00e      	b.n	80091f6 <_Balloc+0x6e>
 80091d8:	2221      	movs	r2, #33	@ 0x21
 80091da:	2104      	movs	r1, #4
 80091dc:	4620      	mov	r0, r4
 80091de:	f001 ff1f 	bl	800b020 <_calloc_r>
 80091e2:	69e3      	ldr	r3, [r4, #28]
 80091e4:	60f0      	str	r0, [r6, #12]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1e4      	bne.n	80091b6 <_Balloc+0x2e>
 80091ec:	2000      	movs	r0, #0
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	6802      	ldr	r2, [r0, #0]
 80091f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091f6:	2300      	movs	r3, #0
 80091f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091fc:	e7f7      	b.n	80091ee <_Balloc+0x66>
 80091fe:	bf00      	nop
 8009200:	0800baf6 	.word	0x0800baf6
 8009204:	0800bb76 	.word	0x0800bb76

08009208 <_Bfree>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	69c6      	ldr	r6, [r0, #28]
 800920c:	4605      	mov	r5, r0
 800920e:	460c      	mov	r4, r1
 8009210:	b976      	cbnz	r6, 8009230 <_Bfree+0x28>
 8009212:	2010      	movs	r0, #16
 8009214:	f7ff ff02 	bl	800901c <malloc>
 8009218:	4602      	mov	r2, r0
 800921a:	61e8      	str	r0, [r5, #28]
 800921c:	b920      	cbnz	r0, 8009228 <_Bfree+0x20>
 800921e:	4b09      	ldr	r3, [pc, #36]	@ (8009244 <_Bfree+0x3c>)
 8009220:	4809      	ldr	r0, [pc, #36]	@ (8009248 <_Bfree+0x40>)
 8009222:	218f      	movs	r1, #143	@ 0x8f
 8009224:	f001 fede 	bl	800afe4 <__assert_func>
 8009228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800922c:	6006      	str	r6, [r0, #0]
 800922e:	60c6      	str	r6, [r0, #12]
 8009230:	b13c      	cbz	r4, 8009242 <_Bfree+0x3a>
 8009232:	69eb      	ldr	r3, [r5, #28]
 8009234:	6862      	ldr	r2, [r4, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800923c:	6021      	str	r1, [r4, #0]
 800923e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009242:	bd70      	pop	{r4, r5, r6, pc}
 8009244:	0800baf6 	.word	0x0800baf6
 8009248:	0800bb76 	.word	0x0800bb76

0800924c <__multadd>:
 800924c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009250:	690d      	ldr	r5, [r1, #16]
 8009252:	4607      	mov	r7, r0
 8009254:	460c      	mov	r4, r1
 8009256:	461e      	mov	r6, r3
 8009258:	f101 0c14 	add.w	ip, r1, #20
 800925c:	2000      	movs	r0, #0
 800925e:	f8dc 3000 	ldr.w	r3, [ip]
 8009262:	b299      	uxth	r1, r3
 8009264:	fb02 6101 	mla	r1, r2, r1, r6
 8009268:	0c1e      	lsrs	r6, r3, #16
 800926a:	0c0b      	lsrs	r3, r1, #16
 800926c:	fb02 3306 	mla	r3, r2, r6, r3
 8009270:	b289      	uxth	r1, r1
 8009272:	3001      	adds	r0, #1
 8009274:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009278:	4285      	cmp	r5, r0
 800927a:	f84c 1b04 	str.w	r1, [ip], #4
 800927e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009282:	dcec      	bgt.n	800925e <__multadd+0x12>
 8009284:	b30e      	cbz	r6, 80092ca <__multadd+0x7e>
 8009286:	68a3      	ldr	r3, [r4, #8]
 8009288:	42ab      	cmp	r3, r5
 800928a:	dc19      	bgt.n	80092c0 <__multadd+0x74>
 800928c:	6861      	ldr	r1, [r4, #4]
 800928e:	4638      	mov	r0, r7
 8009290:	3101      	adds	r1, #1
 8009292:	f7ff ff79 	bl	8009188 <_Balloc>
 8009296:	4680      	mov	r8, r0
 8009298:	b928      	cbnz	r0, 80092a6 <__multadd+0x5a>
 800929a:	4602      	mov	r2, r0
 800929c:	4b0c      	ldr	r3, [pc, #48]	@ (80092d0 <__multadd+0x84>)
 800929e:	480d      	ldr	r0, [pc, #52]	@ (80092d4 <__multadd+0x88>)
 80092a0:	21ba      	movs	r1, #186	@ 0xba
 80092a2:	f001 fe9f 	bl	800afe4 <__assert_func>
 80092a6:	6922      	ldr	r2, [r4, #16]
 80092a8:	3202      	adds	r2, #2
 80092aa:	f104 010c 	add.w	r1, r4, #12
 80092ae:	0092      	lsls	r2, r2, #2
 80092b0:	300c      	adds	r0, #12
 80092b2:	f001 fe83 	bl	800afbc <memcpy>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7ff ffa5 	bl	8009208 <_Bfree>
 80092be:	4644      	mov	r4, r8
 80092c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092c4:	3501      	adds	r5, #1
 80092c6:	615e      	str	r6, [r3, #20]
 80092c8:	6125      	str	r5, [r4, #16]
 80092ca:	4620      	mov	r0, r4
 80092cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d0:	0800bb65 	.word	0x0800bb65
 80092d4:	0800bb76 	.word	0x0800bb76

080092d8 <__s2b>:
 80092d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092dc:	460c      	mov	r4, r1
 80092de:	4615      	mov	r5, r2
 80092e0:	461f      	mov	r7, r3
 80092e2:	2209      	movs	r2, #9
 80092e4:	3308      	adds	r3, #8
 80092e6:	4606      	mov	r6, r0
 80092e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80092ec:	2100      	movs	r1, #0
 80092ee:	2201      	movs	r2, #1
 80092f0:	429a      	cmp	r2, r3
 80092f2:	db09      	blt.n	8009308 <__s2b+0x30>
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff ff47 	bl	8009188 <_Balloc>
 80092fa:	b940      	cbnz	r0, 800930e <__s2b+0x36>
 80092fc:	4602      	mov	r2, r0
 80092fe:	4b19      	ldr	r3, [pc, #100]	@ (8009364 <__s2b+0x8c>)
 8009300:	4819      	ldr	r0, [pc, #100]	@ (8009368 <__s2b+0x90>)
 8009302:	21d3      	movs	r1, #211	@ 0xd3
 8009304:	f001 fe6e 	bl	800afe4 <__assert_func>
 8009308:	0052      	lsls	r2, r2, #1
 800930a:	3101      	adds	r1, #1
 800930c:	e7f0      	b.n	80092f0 <__s2b+0x18>
 800930e:	9b08      	ldr	r3, [sp, #32]
 8009310:	6143      	str	r3, [r0, #20]
 8009312:	2d09      	cmp	r5, #9
 8009314:	f04f 0301 	mov.w	r3, #1
 8009318:	6103      	str	r3, [r0, #16]
 800931a:	dd16      	ble.n	800934a <__s2b+0x72>
 800931c:	f104 0909 	add.w	r9, r4, #9
 8009320:	46c8      	mov	r8, r9
 8009322:	442c      	add	r4, r5
 8009324:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009328:	4601      	mov	r1, r0
 800932a:	3b30      	subs	r3, #48	@ 0x30
 800932c:	220a      	movs	r2, #10
 800932e:	4630      	mov	r0, r6
 8009330:	f7ff ff8c 	bl	800924c <__multadd>
 8009334:	45a0      	cmp	r8, r4
 8009336:	d1f5      	bne.n	8009324 <__s2b+0x4c>
 8009338:	f1a5 0408 	sub.w	r4, r5, #8
 800933c:	444c      	add	r4, r9
 800933e:	1b2d      	subs	r5, r5, r4
 8009340:	1963      	adds	r3, r4, r5
 8009342:	42bb      	cmp	r3, r7
 8009344:	db04      	blt.n	8009350 <__s2b+0x78>
 8009346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800934a:	340a      	adds	r4, #10
 800934c:	2509      	movs	r5, #9
 800934e:	e7f6      	b.n	800933e <__s2b+0x66>
 8009350:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009354:	4601      	mov	r1, r0
 8009356:	3b30      	subs	r3, #48	@ 0x30
 8009358:	220a      	movs	r2, #10
 800935a:	4630      	mov	r0, r6
 800935c:	f7ff ff76 	bl	800924c <__multadd>
 8009360:	e7ee      	b.n	8009340 <__s2b+0x68>
 8009362:	bf00      	nop
 8009364:	0800bb65 	.word	0x0800bb65
 8009368:	0800bb76 	.word	0x0800bb76

0800936c <__hi0bits>:
 800936c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009370:	4603      	mov	r3, r0
 8009372:	bf36      	itet	cc
 8009374:	0403      	lslcc	r3, r0, #16
 8009376:	2000      	movcs	r0, #0
 8009378:	2010      	movcc	r0, #16
 800937a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800937e:	bf3c      	itt	cc
 8009380:	021b      	lslcc	r3, r3, #8
 8009382:	3008      	addcc	r0, #8
 8009384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009388:	bf3c      	itt	cc
 800938a:	011b      	lslcc	r3, r3, #4
 800938c:	3004      	addcc	r0, #4
 800938e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009392:	bf3c      	itt	cc
 8009394:	009b      	lslcc	r3, r3, #2
 8009396:	3002      	addcc	r0, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	db05      	blt.n	80093a8 <__hi0bits+0x3c>
 800939c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093a0:	f100 0001 	add.w	r0, r0, #1
 80093a4:	bf08      	it	eq
 80093a6:	2020      	moveq	r0, #32
 80093a8:	4770      	bx	lr

080093aa <__lo0bits>:
 80093aa:	6803      	ldr	r3, [r0, #0]
 80093ac:	4602      	mov	r2, r0
 80093ae:	f013 0007 	ands.w	r0, r3, #7
 80093b2:	d00b      	beq.n	80093cc <__lo0bits+0x22>
 80093b4:	07d9      	lsls	r1, r3, #31
 80093b6:	d421      	bmi.n	80093fc <__lo0bits+0x52>
 80093b8:	0798      	lsls	r0, r3, #30
 80093ba:	bf49      	itett	mi
 80093bc:	085b      	lsrmi	r3, r3, #1
 80093be:	089b      	lsrpl	r3, r3, #2
 80093c0:	2001      	movmi	r0, #1
 80093c2:	6013      	strmi	r3, [r2, #0]
 80093c4:	bf5c      	itt	pl
 80093c6:	6013      	strpl	r3, [r2, #0]
 80093c8:	2002      	movpl	r0, #2
 80093ca:	4770      	bx	lr
 80093cc:	b299      	uxth	r1, r3
 80093ce:	b909      	cbnz	r1, 80093d4 <__lo0bits+0x2a>
 80093d0:	0c1b      	lsrs	r3, r3, #16
 80093d2:	2010      	movs	r0, #16
 80093d4:	b2d9      	uxtb	r1, r3
 80093d6:	b909      	cbnz	r1, 80093dc <__lo0bits+0x32>
 80093d8:	3008      	adds	r0, #8
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	0719      	lsls	r1, r3, #28
 80093de:	bf04      	itt	eq
 80093e0:	091b      	lsreq	r3, r3, #4
 80093e2:	3004      	addeq	r0, #4
 80093e4:	0799      	lsls	r1, r3, #30
 80093e6:	bf04      	itt	eq
 80093e8:	089b      	lsreq	r3, r3, #2
 80093ea:	3002      	addeq	r0, #2
 80093ec:	07d9      	lsls	r1, r3, #31
 80093ee:	d403      	bmi.n	80093f8 <__lo0bits+0x4e>
 80093f0:	085b      	lsrs	r3, r3, #1
 80093f2:	f100 0001 	add.w	r0, r0, #1
 80093f6:	d003      	beq.n	8009400 <__lo0bits+0x56>
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	4770      	bx	lr
 80093fc:	2000      	movs	r0, #0
 80093fe:	4770      	bx	lr
 8009400:	2020      	movs	r0, #32
 8009402:	4770      	bx	lr

08009404 <__i2b>:
 8009404:	b510      	push	{r4, lr}
 8009406:	460c      	mov	r4, r1
 8009408:	2101      	movs	r1, #1
 800940a:	f7ff febd 	bl	8009188 <_Balloc>
 800940e:	4602      	mov	r2, r0
 8009410:	b928      	cbnz	r0, 800941e <__i2b+0x1a>
 8009412:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <__i2b+0x24>)
 8009414:	4805      	ldr	r0, [pc, #20]	@ (800942c <__i2b+0x28>)
 8009416:	f240 1145 	movw	r1, #325	@ 0x145
 800941a:	f001 fde3 	bl	800afe4 <__assert_func>
 800941e:	2301      	movs	r3, #1
 8009420:	6144      	str	r4, [r0, #20]
 8009422:	6103      	str	r3, [r0, #16]
 8009424:	bd10      	pop	{r4, pc}
 8009426:	bf00      	nop
 8009428:	0800bb65 	.word	0x0800bb65
 800942c:	0800bb76 	.word	0x0800bb76

08009430 <__multiply>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	4617      	mov	r7, r2
 8009436:	690a      	ldr	r2, [r1, #16]
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	429a      	cmp	r2, r3
 800943c:	bfa8      	it	ge
 800943e:	463b      	movge	r3, r7
 8009440:	4689      	mov	r9, r1
 8009442:	bfa4      	itt	ge
 8009444:	460f      	movge	r7, r1
 8009446:	4699      	movge	r9, r3
 8009448:	693d      	ldr	r5, [r7, #16]
 800944a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	eb05 060a 	add.w	r6, r5, sl
 8009456:	42b3      	cmp	r3, r6
 8009458:	b085      	sub	sp, #20
 800945a:	bfb8      	it	lt
 800945c:	3101      	addlt	r1, #1
 800945e:	f7ff fe93 	bl	8009188 <_Balloc>
 8009462:	b930      	cbnz	r0, 8009472 <__multiply+0x42>
 8009464:	4602      	mov	r2, r0
 8009466:	4b41      	ldr	r3, [pc, #260]	@ (800956c <__multiply+0x13c>)
 8009468:	4841      	ldr	r0, [pc, #260]	@ (8009570 <__multiply+0x140>)
 800946a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800946e:	f001 fdb9 	bl	800afe4 <__assert_func>
 8009472:	f100 0414 	add.w	r4, r0, #20
 8009476:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800947a:	4623      	mov	r3, r4
 800947c:	2200      	movs	r2, #0
 800947e:	4573      	cmp	r3, lr
 8009480:	d320      	bcc.n	80094c4 <__multiply+0x94>
 8009482:	f107 0814 	add.w	r8, r7, #20
 8009486:	f109 0114 	add.w	r1, r9, #20
 800948a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800948e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009492:	9302      	str	r3, [sp, #8]
 8009494:	1beb      	subs	r3, r5, r7
 8009496:	3b15      	subs	r3, #21
 8009498:	f023 0303 	bic.w	r3, r3, #3
 800949c:	3304      	adds	r3, #4
 800949e:	3715      	adds	r7, #21
 80094a0:	42bd      	cmp	r5, r7
 80094a2:	bf38      	it	cc
 80094a4:	2304      	movcc	r3, #4
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	9103      	str	r1, [sp, #12]
 80094ac:	428b      	cmp	r3, r1
 80094ae:	d80c      	bhi.n	80094ca <__multiply+0x9a>
 80094b0:	2e00      	cmp	r6, #0
 80094b2:	dd03      	ble.n	80094bc <__multiply+0x8c>
 80094b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d055      	beq.n	8009568 <__multiply+0x138>
 80094bc:	6106      	str	r6, [r0, #16]
 80094be:	b005      	add	sp, #20
 80094c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c4:	f843 2b04 	str.w	r2, [r3], #4
 80094c8:	e7d9      	b.n	800947e <__multiply+0x4e>
 80094ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80094ce:	f1ba 0f00 	cmp.w	sl, #0
 80094d2:	d01f      	beq.n	8009514 <__multiply+0xe4>
 80094d4:	46c4      	mov	ip, r8
 80094d6:	46a1      	mov	r9, r4
 80094d8:	2700      	movs	r7, #0
 80094da:	f85c 2b04 	ldr.w	r2, [ip], #4
 80094de:	f8d9 3000 	ldr.w	r3, [r9]
 80094e2:	fa1f fb82 	uxth.w	fp, r2
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80094ec:	443b      	add	r3, r7
 80094ee:	f8d9 7000 	ldr.w	r7, [r9]
 80094f2:	0c12      	lsrs	r2, r2, #16
 80094f4:	0c3f      	lsrs	r7, r7, #16
 80094f6:	fb0a 7202 	mla	r2, sl, r2, r7
 80094fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80094fe:	b29b      	uxth	r3, r3
 8009500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009504:	4565      	cmp	r5, ip
 8009506:	f849 3b04 	str.w	r3, [r9], #4
 800950a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800950e:	d8e4      	bhi.n	80094da <__multiply+0xaa>
 8009510:	9b01      	ldr	r3, [sp, #4]
 8009512:	50e7      	str	r7, [r4, r3]
 8009514:	9b03      	ldr	r3, [sp, #12]
 8009516:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800951a:	3104      	adds	r1, #4
 800951c:	f1b9 0f00 	cmp.w	r9, #0
 8009520:	d020      	beq.n	8009564 <__multiply+0x134>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	4647      	mov	r7, r8
 8009526:	46a4      	mov	ip, r4
 8009528:	f04f 0a00 	mov.w	sl, #0
 800952c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009530:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009534:	fb09 220b 	mla	r2, r9, fp, r2
 8009538:	4452      	add	r2, sl
 800953a:	b29b      	uxth	r3, r3
 800953c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009540:	f84c 3b04 	str.w	r3, [ip], #4
 8009544:	f857 3b04 	ldr.w	r3, [r7], #4
 8009548:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800954c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009550:	fb09 330a 	mla	r3, r9, sl, r3
 8009554:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009558:	42bd      	cmp	r5, r7
 800955a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800955e:	d8e5      	bhi.n	800952c <__multiply+0xfc>
 8009560:	9a01      	ldr	r2, [sp, #4]
 8009562:	50a3      	str	r3, [r4, r2]
 8009564:	3404      	adds	r4, #4
 8009566:	e79f      	b.n	80094a8 <__multiply+0x78>
 8009568:	3e01      	subs	r6, #1
 800956a:	e7a1      	b.n	80094b0 <__multiply+0x80>
 800956c:	0800bb65 	.word	0x0800bb65
 8009570:	0800bb76 	.word	0x0800bb76

08009574 <__pow5mult>:
 8009574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009578:	4615      	mov	r5, r2
 800957a:	f012 0203 	ands.w	r2, r2, #3
 800957e:	4607      	mov	r7, r0
 8009580:	460e      	mov	r6, r1
 8009582:	d007      	beq.n	8009594 <__pow5mult+0x20>
 8009584:	4c25      	ldr	r4, [pc, #148]	@ (800961c <__pow5mult+0xa8>)
 8009586:	3a01      	subs	r2, #1
 8009588:	2300      	movs	r3, #0
 800958a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800958e:	f7ff fe5d 	bl	800924c <__multadd>
 8009592:	4606      	mov	r6, r0
 8009594:	10ad      	asrs	r5, r5, #2
 8009596:	d03d      	beq.n	8009614 <__pow5mult+0xa0>
 8009598:	69fc      	ldr	r4, [r7, #28]
 800959a:	b97c      	cbnz	r4, 80095bc <__pow5mult+0x48>
 800959c:	2010      	movs	r0, #16
 800959e:	f7ff fd3d 	bl	800901c <malloc>
 80095a2:	4602      	mov	r2, r0
 80095a4:	61f8      	str	r0, [r7, #28]
 80095a6:	b928      	cbnz	r0, 80095b4 <__pow5mult+0x40>
 80095a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009620 <__pow5mult+0xac>)
 80095aa:	481e      	ldr	r0, [pc, #120]	@ (8009624 <__pow5mult+0xb0>)
 80095ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095b0:	f001 fd18 	bl	800afe4 <__assert_func>
 80095b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095b8:	6004      	str	r4, [r0, #0]
 80095ba:	60c4      	str	r4, [r0, #12]
 80095bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80095c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095c4:	b94c      	cbnz	r4, 80095da <__pow5mult+0x66>
 80095c6:	f240 2171 	movw	r1, #625	@ 0x271
 80095ca:	4638      	mov	r0, r7
 80095cc:	f7ff ff1a 	bl	8009404 <__i2b>
 80095d0:	2300      	movs	r3, #0
 80095d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80095d6:	4604      	mov	r4, r0
 80095d8:	6003      	str	r3, [r0, #0]
 80095da:	f04f 0900 	mov.w	r9, #0
 80095de:	07eb      	lsls	r3, r5, #31
 80095e0:	d50a      	bpl.n	80095f8 <__pow5mult+0x84>
 80095e2:	4631      	mov	r1, r6
 80095e4:	4622      	mov	r2, r4
 80095e6:	4638      	mov	r0, r7
 80095e8:	f7ff ff22 	bl	8009430 <__multiply>
 80095ec:	4631      	mov	r1, r6
 80095ee:	4680      	mov	r8, r0
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7ff fe09 	bl	8009208 <_Bfree>
 80095f6:	4646      	mov	r6, r8
 80095f8:	106d      	asrs	r5, r5, #1
 80095fa:	d00b      	beq.n	8009614 <__pow5mult+0xa0>
 80095fc:	6820      	ldr	r0, [r4, #0]
 80095fe:	b938      	cbnz	r0, 8009610 <__pow5mult+0x9c>
 8009600:	4622      	mov	r2, r4
 8009602:	4621      	mov	r1, r4
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff ff13 	bl	8009430 <__multiply>
 800960a:	6020      	str	r0, [r4, #0]
 800960c:	f8c0 9000 	str.w	r9, [r0]
 8009610:	4604      	mov	r4, r0
 8009612:	e7e4      	b.n	80095de <__pow5mult+0x6a>
 8009614:	4630      	mov	r0, r6
 8009616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961a:	bf00      	nop
 800961c:	0800bc88 	.word	0x0800bc88
 8009620:	0800baf6 	.word	0x0800baf6
 8009624:	0800bb76 	.word	0x0800bb76

08009628 <__lshift>:
 8009628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962c:	460c      	mov	r4, r1
 800962e:	6849      	ldr	r1, [r1, #4]
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009636:	68a3      	ldr	r3, [r4, #8]
 8009638:	4607      	mov	r7, r0
 800963a:	4691      	mov	r9, r2
 800963c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009640:	f108 0601 	add.w	r6, r8, #1
 8009644:	42b3      	cmp	r3, r6
 8009646:	db0b      	blt.n	8009660 <__lshift+0x38>
 8009648:	4638      	mov	r0, r7
 800964a:	f7ff fd9d 	bl	8009188 <_Balloc>
 800964e:	4605      	mov	r5, r0
 8009650:	b948      	cbnz	r0, 8009666 <__lshift+0x3e>
 8009652:	4602      	mov	r2, r0
 8009654:	4b28      	ldr	r3, [pc, #160]	@ (80096f8 <__lshift+0xd0>)
 8009656:	4829      	ldr	r0, [pc, #164]	@ (80096fc <__lshift+0xd4>)
 8009658:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800965c:	f001 fcc2 	bl	800afe4 <__assert_func>
 8009660:	3101      	adds	r1, #1
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	e7ee      	b.n	8009644 <__lshift+0x1c>
 8009666:	2300      	movs	r3, #0
 8009668:	f100 0114 	add.w	r1, r0, #20
 800966c:	f100 0210 	add.w	r2, r0, #16
 8009670:	4618      	mov	r0, r3
 8009672:	4553      	cmp	r3, sl
 8009674:	db33      	blt.n	80096de <__lshift+0xb6>
 8009676:	6920      	ldr	r0, [r4, #16]
 8009678:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800967c:	f104 0314 	add.w	r3, r4, #20
 8009680:	f019 091f 	ands.w	r9, r9, #31
 8009684:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009688:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800968c:	d02b      	beq.n	80096e6 <__lshift+0xbe>
 800968e:	f1c9 0e20 	rsb	lr, r9, #32
 8009692:	468a      	mov	sl, r1
 8009694:	2200      	movs	r2, #0
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	fa00 f009 	lsl.w	r0, r0, r9
 800969c:	4310      	orrs	r0, r2
 800969e:	f84a 0b04 	str.w	r0, [sl], #4
 80096a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096a6:	459c      	cmp	ip, r3
 80096a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80096ac:	d8f3      	bhi.n	8009696 <__lshift+0x6e>
 80096ae:	ebac 0304 	sub.w	r3, ip, r4
 80096b2:	3b15      	subs	r3, #21
 80096b4:	f023 0303 	bic.w	r3, r3, #3
 80096b8:	3304      	adds	r3, #4
 80096ba:	f104 0015 	add.w	r0, r4, #21
 80096be:	4560      	cmp	r0, ip
 80096c0:	bf88      	it	hi
 80096c2:	2304      	movhi	r3, #4
 80096c4:	50ca      	str	r2, [r1, r3]
 80096c6:	b10a      	cbz	r2, 80096cc <__lshift+0xa4>
 80096c8:	f108 0602 	add.w	r6, r8, #2
 80096cc:	3e01      	subs	r6, #1
 80096ce:	4638      	mov	r0, r7
 80096d0:	612e      	str	r6, [r5, #16]
 80096d2:	4621      	mov	r1, r4
 80096d4:	f7ff fd98 	bl	8009208 <_Bfree>
 80096d8:	4628      	mov	r0, r5
 80096da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096de:	f842 0f04 	str.w	r0, [r2, #4]!
 80096e2:	3301      	adds	r3, #1
 80096e4:	e7c5      	b.n	8009672 <__lshift+0x4a>
 80096e6:	3904      	subs	r1, #4
 80096e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80096f0:	459c      	cmp	ip, r3
 80096f2:	d8f9      	bhi.n	80096e8 <__lshift+0xc0>
 80096f4:	e7ea      	b.n	80096cc <__lshift+0xa4>
 80096f6:	bf00      	nop
 80096f8:	0800bb65 	.word	0x0800bb65
 80096fc:	0800bb76 	.word	0x0800bb76

08009700 <__mcmp>:
 8009700:	690a      	ldr	r2, [r1, #16]
 8009702:	4603      	mov	r3, r0
 8009704:	6900      	ldr	r0, [r0, #16]
 8009706:	1a80      	subs	r0, r0, r2
 8009708:	b530      	push	{r4, r5, lr}
 800970a:	d10e      	bne.n	800972a <__mcmp+0x2a>
 800970c:	3314      	adds	r3, #20
 800970e:	3114      	adds	r1, #20
 8009710:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009714:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009718:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800971c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009720:	4295      	cmp	r5, r2
 8009722:	d003      	beq.n	800972c <__mcmp+0x2c>
 8009724:	d205      	bcs.n	8009732 <__mcmp+0x32>
 8009726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800972a:	bd30      	pop	{r4, r5, pc}
 800972c:	42a3      	cmp	r3, r4
 800972e:	d3f3      	bcc.n	8009718 <__mcmp+0x18>
 8009730:	e7fb      	b.n	800972a <__mcmp+0x2a>
 8009732:	2001      	movs	r0, #1
 8009734:	e7f9      	b.n	800972a <__mcmp+0x2a>
	...

08009738 <__mdiff>:
 8009738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	4689      	mov	r9, r1
 800973e:	4606      	mov	r6, r0
 8009740:	4611      	mov	r1, r2
 8009742:	4648      	mov	r0, r9
 8009744:	4614      	mov	r4, r2
 8009746:	f7ff ffdb 	bl	8009700 <__mcmp>
 800974a:	1e05      	subs	r5, r0, #0
 800974c:	d112      	bne.n	8009774 <__mdiff+0x3c>
 800974e:	4629      	mov	r1, r5
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff fd19 	bl	8009188 <_Balloc>
 8009756:	4602      	mov	r2, r0
 8009758:	b928      	cbnz	r0, 8009766 <__mdiff+0x2e>
 800975a:	4b3e      	ldr	r3, [pc, #248]	@ (8009854 <__mdiff+0x11c>)
 800975c:	f240 2137 	movw	r1, #567	@ 0x237
 8009760:	483d      	ldr	r0, [pc, #244]	@ (8009858 <__mdiff+0x120>)
 8009762:	f001 fc3f 	bl	800afe4 <__assert_func>
 8009766:	2301      	movs	r3, #1
 8009768:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800976c:	4610      	mov	r0, r2
 800976e:	b003      	add	sp, #12
 8009770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009774:	bfbc      	itt	lt
 8009776:	464b      	movlt	r3, r9
 8009778:	46a1      	movlt	r9, r4
 800977a:	4630      	mov	r0, r6
 800977c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009780:	bfba      	itte	lt
 8009782:	461c      	movlt	r4, r3
 8009784:	2501      	movlt	r5, #1
 8009786:	2500      	movge	r5, #0
 8009788:	f7ff fcfe 	bl	8009188 <_Balloc>
 800978c:	4602      	mov	r2, r0
 800978e:	b918      	cbnz	r0, 8009798 <__mdiff+0x60>
 8009790:	4b30      	ldr	r3, [pc, #192]	@ (8009854 <__mdiff+0x11c>)
 8009792:	f240 2145 	movw	r1, #581	@ 0x245
 8009796:	e7e3      	b.n	8009760 <__mdiff+0x28>
 8009798:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800979c:	6926      	ldr	r6, [r4, #16]
 800979e:	60c5      	str	r5, [r0, #12]
 80097a0:	f109 0310 	add.w	r3, r9, #16
 80097a4:	f109 0514 	add.w	r5, r9, #20
 80097a8:	f104 0e14 	add.w	lr, r4, #20
 80097ac:	f100 0b14 	add.w	fp, r0, #20
 80097b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	46d9      	mov	r9, fp
 80097bc:	f04f 0c00 	mov.w	ip, #0
 80097c0:	9b01      	ldr	r3, [sp, #4]
 80097c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80097c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	b281      	uxth	r1, r0
 80097ce:	fa1f f38a 	uxth.w	r3, sl
 80097d2:	1a5b      	subs	r3, r3, r1
 80097d4:	0c00      	lsrs	r0, r0, #16
 80097d6:	4463      	add	r3, ip
 80097d8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80097dc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80097e6:	4576      	cmp	r6, lr
 80097e8:	f849 3b04 	str.w	r3, [r9], #4
 80097ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097f0:	d8e6      	bhi.n	80097c0 <__mdiff+0x88>
 80097f2:	1b33      	subs	r3, r6, r4
 80097f4:	3b15      	subs	r3, #21
 80097f6:	f023 0303 	bic.w	r3, r3, #3
 80097fa:	3415      	adds	r4, #21
 80097fc:	3304      	adds	r3, #4
 80097fe:	42a6      	cmp	r6, r4
 8009800:	bf38      	it	cc
 8009802:	2304      	movcc	r3, #4
 8009804:	441d      	add	r5, r3
 8009806:	445b      	add	r3, fp
 8009808:	461e      	mov	r6, r3
 800980a:	462c      	mov	r4, r5
 800980c:	4544      	cmp	r4, r8
 800980e:	d30e      	bcc.n	800982e <__mdiff+0xf6>
 8009810:	f108 0103 	add.w	r1, r8, #3
 8009814:	1b49      	subs	r1, r1, r5
 8009816:	f021 0103 	bic.w	r1, r1, #3
 800981a:	3d03      	subs	r5, #3
 800981c:	45a8      	cmp	r8, r5
 800981e:	bf38      	it	cc
 8009820:	2100      	movcc	r1, #0
 8009822:	440b      	add	r3, r1
 8009824:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009828:	b191      	cbz	r1, 8009850 <__mdiff+0x118>
 800982a:	6117      	str	r7, [r2, #16]
 800982c:	e79e      	b.n	800976c <__mdiff+0x34>
 800982e:	f854 1b04 	ldr.w	r1, [r4], #4
 8009832:	46e6      	mov	lr, ip
 8009834:	0c08      	lsrs	r0, r1, #16
 8009836:	fa1c fc81 	uxtah	ip, ip, r1
 800983a:	4471      	add	r1, lr
 800983c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009840:	b289      	uxth	r1, r1
 8009842:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009846:	f846 1b04 	str.w	r1, [r6], #4
 800984a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800984e:	e7dd      	b.n	800980c <__mdiff+0xd4>
 8009850:	3f01      	subs	r7, #1
 8009852:	e7e7      	b.n	8009824 <__mdiff+0xec>
 8009854:	0800bb65 	.word	0x0800bb65
 8009858:	0800bb76 	.word	0x0800bb76

0800985c <__ulp>:
 800985c:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <__ulp+0x3c>)
 800985e:	400b      	ands	r3, r1
 8009860:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009864:	2b00      	cmp	r3, #0
 8009866:	dc08      	bgt.n	800987a <__ulp+0x1e>
 8009868:	425b      	negs	r3, r3
 800986a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800986e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009872:	da04      	bge.n	800987e <__ulp+0x22>
 8009874:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009878:	4113      	asrs	r3, r2
 800987a:	2200      	movs	r2, #0
 800987c:	e008      	b.n	8009890 <__ulp+0x34>
 800987e:	f1a2 0314 	sub.w	r3, r2, #20
 8009882:	2b1e      	cmp	r3, #30
 8009884:	bfda      	itte	le
 8009886:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800988a:	40da      	lsrle	r2, r3
 800988c:	2201      	movgt	r2, #1
 800988e:	2300      	movs	r3, #0
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	7ff00000 	.word	0x7ff00000

0800989c <__b2d>:
 800989c:	6902      	ldr	r2, [r0, #16]
 800989e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a0:	f100 0614 	add.w	r6, r0, #20
 80098a4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80098a8:	4f20      	ldr	r7, [pc, #128]	@ (800992c <__b2d+0x90>)
 80098aa:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7ff fd5c 	bl	800936c <__hi0bits>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b0a      	cmp	r3, #10
 80098b8:	f1c0 0020 	rsb	r0, r0, #32
 80098bc:	f1a2 0504 	sub.w	r5, r2, #4
 80098c0:	6008      	str	r0, [r1, #0]
 80098c2:	dc13      	bgt.n	80098ec <__b2d+0x50>
 80098c4:	42ae      	cmp	r6, r5
 80098c6:	bf38      	it	cc
 80098c8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80098cc:	f1c3 0c0b 	rsb	ip, r3, #11
 80098d0:	bf28      	it	cs
 80098d2:	2200      	movcs	r2, #0
 80098d4:	3315      	adds	r3, #21
 80098d6:	fa24 fe0c 	lsr.w	lr, r4, ip
 80098da:	fa04 f303 	lsl.w	r3, r4, r3
 80098de:	fa22 f20c 	lsr.w	r2, r2, ip
 80098e2:	ea4e 0107 	orr.w	r1, lr, r7
 80098e6:	431a      	orrs	r2, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ec:	42ae      	cmp	r6, r5
 80098ee:	bf36      	itet	cc
 80098f0:	f1a2 0508 	subcc.w	r5, r2, #8
 80098f4:	2200      	movcs	r2, #0
 80098f6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80098fa:	3b0b      	subs	r3, #11
 80098fc:	d012      	beq.n	8009924 <__b2d+0x88>
 80098fe:	f1c3 0720 	rsb	r7, r3, #32
 8009902:	fa22 f107 	lsr.w	r1, r2, r7
 8009906:	409c      	lsls	r4, r3
 8009908:	430c      	orrs	r4, r1
 800990a:	42b5      	cmp	r5, r6
 800990c:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009910:	bf8c      	ite	hi
 8009912:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009916:	2400      	movls	r4, #0
 8009918:	409a      	lsls	r2, r3
 800991a:	40fc      	lsrs	r4, r7
 800991c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009920:	4322      	orrs	r2, r4
 8009922:	e7e1      	b.n	80098e8 <__b2d+0x4c>
 8009924:	ea44 0107 	orr.w	r1, r4, r7
 8009928:	e7de      	b.n	80098e8 <__b2d+0x4c>
 800992a:	bf00      	nop
 800992c:	3ff00000 	.word	0x3ff00000

08009930 <__d2b>:
 8009930:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009934:	2101      	movs	r1, #1
 8009936:	9e08      	ldr	r6, [sp, #32]
 8009938:	4690      	mov	r8, r2
 800993a:	4699      	mov	r9, r3
 800993c:	f7ff fc24 	bl	8009188 <_Balloc>
 8009940:	4604      	mov	r4, r0
 8009942:	b930      	cbnz	r0, 8009952 <__d2b+0x22>
 8009944:	4602      	mov	r2, r0
 8009946:	4b24      	ldr	r3, [pc, #144]	@ (80099d8 <__d2b+0xa8>)
 8009948:	4824      	ldr	r0, [pc, #144]	@ (80099dc <__d2b+0xac>)
 800994a:	f240 310f 	movw	r1, #783	@ 0x30f
 800994e:	f001 fb49 	bl	800afe4 <__assert_func>
 8009952:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009956:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800995a:	b10d      	cbz	r5, 8009960 <__d2b+0x30>
 800995c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	f1b8 0300 	subs.w	r3, r8, #0
 8009966:	d024      	beq.n	80099b2 <__d2b+0x82>
 8009968:	4668      	mov	r0, sp
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	f7ff fd1d 	bl	80093aa <__lo0bits>
 8009970:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009974:	b1d8      	cbz	r0, 80099ae <__d2b+0x7e>
 8009976:	f1c0 0320 	rsb	r3, r0, #32
 800997a:	fa02 f303 	lsl.w	r3, r2, r3
 800997e:	430b      	orrs	r3, r1
 8009980:	40c2      	lsrs	r2, r0
 8009982:	6163      	str	r3, [r4, #20]
 8009984:	9201      	str	r2, [sp, #4]
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	61a3      	str	r3, [r4, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	bf0c      	ite	eq
 800998e:	2201      	moveq	r2, #1
 8009990:	2202      	movne	r2, #2
 8009992:	6122      	str	r2, [r4, #16]
 8009994:	b1ad      	cbz	r5, 80099c2 <__d2b+0x92>
 8009996:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800999a:	4405      	add	r5, r0
 800999c:	6035      	str	r5, [r6, #0]
 800999e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80099a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a4:	6018      	str	r0, [r3, #0]
 80099a6:	4620      	mov	r0, r4
 80099a8:	b002      	add	sp, #8
 80099aa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80099ae:	6161      	str	r1, [r4, #20]
 80099b0:	e7e9      	b.n	8009986 <__d2b+0x56>
 80099b2:	a801      	add	r0, sp, #4
 80099b4:	f7ff fcf9 	bl	80093aa <__lo0bits>
 80099b8:	9b01      	ldr	r3, [sp, #4]
 80099ba:	6163      	str	r3, [r4, #20]
 80099bc:	3020      	adds	r0, #32
 80099be:	2201      	movs	r2, #1
 80099c0:	e7e7      	b.n	8009992 <__d2b+0x62>
 80099c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80099ca:	6030      	str	r0, [r6, #0]
 80099cc:	6918      	ldr	r0, [r3, #16]
 80099ce:	f7ff fccd 	bl	800936c <__hi0bits>
 80099d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099d6:	e7e4      	b.n	80099a2 <__d2b+0x72>
 80099d8:	0800bb65 	.word	0x0800bb65
 80099dc:	0800bb76 	.word	0x0800bb76

080099e0 <__ratio>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	b085      	sub	sp, #20
 80099e6:	e9cd 1000 	strd	r1, r0, [sp]
 80099ea:	a902      	add	r1, sp, #8
 80099ec:	f7ff ff56 	bl	800989c <__b2d>
 80099f0:	468b      	mov	fp, r1
 80099f2:	4606      	mov	r6, r0
 80099f4:	460f      	mov	r7, r1
 80099f6:	9800      	ldr	r0, [sp, #0]
 80099f8:	a903      	add	r1, sp, #12
 80099fa:	f7ff ff4f 	bl	800989c <__b2d>
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	4689      	mov	r9, r1
 8009a02:	460d      	mov	r5, r1
 8009a04:	6919      	ldr	r1, [r3, #16]
 8009a06:	9b00      	ldr	r3, [sp, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	1ac9      	subs	r1, r1, r3
 8009a0c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009a10:	1a9b      	subs	r3, r3, r2
 8009a12:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfcd      	iteet	gt
 8009a1a:	463a      	movgt	r2, r7
 8009a1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a20:	462a      	movle	r2, r5
 8009a22:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009a26:	bfd8      	it	le
 8009a28:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	4622      	mov	r2, r4
 8009a30:	464b      	mov	r3, r9
 8009a32:	4630      	mov	r0, r6
 8009a34:	4659      	mov	r1, fp
 8009a36:	f7f6 fee1 	bl	80007fc <__aeabi_ddiv>
 8009a3a:	b005      	add	sp, #20
 8009a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a40 <__copybits>:
 8009a40:	3901      	subs	r1, #1
 8009a42:	b570      	push	{r4, r5, r6, lr}
 8009a44:	1149      	asrs	r1, r1, #5
 8009a46:	6914      	ldr	r4, [r2, #16]
 8009a48:	3101      	adds	r1, #1
 8009a4a:	f102 0314 	add.w	r3, r2, #20
 8009a4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a56:	1f05      	subs	r5, r0, #4
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	d30c      	bcc.n	8009a76 <__copybits+0x36>
 8009a5c:	1aa3      	subs	r3, r4, r2
 8009a5e:	3b11      	subs	r3, #17
 8009a60:	f023 0303 	bic.w	r3, r3, #3
 8009a64:	3211      	adds	r2, #17
 8009a66:	42a2      	cmp	r2, r4
 8009a68:	bf88      	it	hi
 8009a6a:	2300      	movhi	r3, #0
 8009a6c:	4418      	add	r0, r3
 8009a6e:	2300      	movs	r3, #0
 8009a70:	4288      	cmp	r0, r1
 8009a72:	d305      	bcc.n	8009a80 <__copybits+0x40>
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a7a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a7e:	e7eb      	b.n	8009a58 <__copybits+0x18>
 8009a80:	f840 3b04 	str.w	r3, [r0], #4
 8009a84:	e7f4      	b.n	8009a70 <__copybits+0x30>

08009a86 <__any_on>:
 8009a86:	f100 0214 	add.w	r2, r0, #20
 8009a8a:	6900      	ldr	r0, [r0, #16]
 8009a8c:	114b      	asrs	r3, r1, #5
 8009a8e:	4298      	cmp	r0, r3
 8009a90:	b510      	push	{r4, lr}
 8009a92:	db11      	blt.n	8009ab8 <__any_on+0x32>
 8009a94:	dd0a      	ble.n	8009aac <__any_on+0x26>
 8009a96:	f011 011f 	ands.w	r1, r1, #31
 8009a9a:	d007      	beq.n	8009aac <__any_on+0x26>
 8009a9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009aa0:	fa24 f001 	lsr.w	r0, r4, r1
 8009aa4:	fa00 f101 	lsl.w	r1, r0, r1
 8009aa8:	428c      	cmp	r4, r1
 8009aaa:	d10b      	bne.n	8009ac4 <__any_on+0x3e>
 8009aac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d803      	bhi.n	8009abc <__any_on+0x36>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	bd10      	pop	{r4, pc}
 8009ab8:	4603      	mov	r3, r0
 8009aba:	e7f7      	b.n	8009aac <__any_on+0x26>
 8009abc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ac0:	2900      	cmp	r1, #0
 8009ac2:	d0f5      	beq.n	8009ab0 <__any_on+0x2a>
 8009ac4:	2001      	movs	r0, #1
 8009ac6:	e7f6      	b.n	8009ab6 <__any_on+0x30>

08009ac8 <sulp>:
 8009ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009acc:	460f      	mov	r7, r1
 8009ace:	4690      	mov	r8, r2
 8009ad0:	f7ff fec4 	bl	800985c <__ulp>
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	460d      	mov	r5, r1
 8009ad8:	f1b8 0f00 	cmp.w	r8, #0
 8009adc:	d011      	beq.n	8009b02 <sulp+0x3a>
 8009ade:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009ae2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	dd0b      	ble.n	8009b02 <sulp+0x3a>
 8009aea:	051b      	lsls	r3, r3, #20
 8009aec:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009af0:	2400      	movs	r4, #0
 8009af2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009af6:	4622      	mov	r2, r4
 8009af8:	462b      	mov	r3, r5
 8009afa:	f7f6 fd55 	bl	80005a8 <__aeabi_dmul>
 8009afe:	4604      	mov	r4, r0
 8009b00:	460d      	mov	r5, r1
 8009b02:	4620      	mov	r0, r4
 8009b04:	4629      	mov	r1, r5
 8009b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b0a:	0000      	movs	r0, r0
 8009b0c:	0000      	movs	r0, r0
	...

08009b10 <_strtod_l>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	b09f      	sub	sp, #124	@ 0x7c
 8009b16:	460c      	mov	r4, r1
 8009b18:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009b1e:	9005      	str	r0, [sp, #20]
 8009b20:	f04f 0a00 	mov.w	sl, #0
 8009b24:	f04f 0b00 	mov.w	fp, #0
 8009b28:	460a      	mov	r2, r1
 8009b2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b2c:	7811      	ldrb	r1, [r2, #0]
 8009b2e:	292b      	cmp	r1, #43	@ 0x2b
 8009b30:	d048      	beq.n	8009bc4 <_strtod_l+0xb4>
 8009b32:	d836      	bhi.n	8009ba2 <_strtod_l+0x92>
 8009b34:	290d      	cmp	r1, #13
 8009b36:	d830      	bhi.n	8009b9a <_strtod_l+0x8a>
 8009b38:	2908      	cmp	r1, #8
 8009b3a:	d830      	bhi.n	8009b9e <_strtod_l+0x8e>
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	d039      	beq.n	8009bb4 <_strtod_l+0xa4>
 8009b40:	2200      	movs	r2, #0
 8009b42:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009b46:	782a      	ldrb	r2, [r5, #0]
 8009b48:	2a30      	cmp	r2, #48	@ 0x30
 8009b4a:	f040 80b0 	bne.w	8009cae <_strtod_l+0x19e>
 8009b4e:	786a      	ldrb	r2, [r5, #1]
 8009b50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b54:	2a58      	cmp	r2, #88	@ 0x58
 8009b56:	d16c      	bne.n	8009c32 <_strtod_l+0x122>
 8009b58:	9302      	str	r3, [sp, #8]
 8009b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	4a8e      	ldr	r2, [pc, #568]	@ (8009d9c <_strtod_l+0x28c>)
 8009b64:	9805      	ldr	r0, [sp, #20]
 8009b66:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b68:	a919      	add	r1, sp, #100	@ 0x64
 8009b6a:	f001 fad5 	bl	800b118 <__gethex>
 8009b6e:	f010 060f 	ands.w	r6, r0, #15
 8009b72:	4604      	mov	r4, r0
 8009b74:	d005      	beq.n	8009b82 <_strtod_l+0x72>
 8009b76:	2e06      	cmp	r6, #6
 8009b78:	d126      	bne.n	8009bc8 <_strtod_l+0xb8>
 8009b7a:	3501      	adds	r5, #1
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009b80:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 857e 	bne.w	800a686 <_strtod_l+0xb76>
 8009b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b8c:	b1bb      	cbz	r3, 8009bbe <_strtod_l+0xae>
 8009b8e:	4650      	mov	r0, sl
 8009b90:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009b94:	b01f      	add	sp, #124	@ 0x7c
 8009b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9a:	2920      	cmp	r1, #32
 8009b9c:	d1d0      	bne.n	8009b40 <_strtod_l+0x30>
 8009b9e:	3201      	adds	r2, #1
 8009ba0:	e7c3      	b.n	8009b2a <_strtod_l+0x1a>
 8009ba2:	292d      	cmp	r1, #45	@ 0x2d
 8009ba4:	d1cc      	bne.n	8009b40 <_strtod_l+0x30>
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	910e      	str	r1, [sp, #56]	@ 0x38
 8009baa:	1c51      	adds	r1, r2, #1
 8009bac:	9119      	str	r1, [sp, #100]	@ 0x64
 8009bae:	7852      	ldrb	r2, [r2, #1]
 8009bb0:	2a00      	cmp	r2, #0
 8009bb2:	d1c7      	bne.n	8009b44 <_strtod_l+0x34>
 8009bb4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009bb6:	9419      	str	r4, [sp, #100]	@ 0x64
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f040 8562 	bne.w	800a682 <_strtod_l+0xb72>
 8009bbe:	4650      	mov	r0, sl
 8009bc0:	4659      	mov	r1, fp
 8009bc2:	e7e7      	b.n	8009b94 <_strtod_l+0x84>
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	e7ef      	b.n	8009ba8 <_strtod_l+0x98>
 8009bc8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009bca:	b13a      	cbz	r2, 8009bdc <_strtod_l+0xcc>
 8009bcc:	2135      	movs	r1, #53	@ 0x35
 8009bce:	a81c      	add	r0, sp, #112	@ 0x70
 8009bd0:	f7ff ff36 	bl	8009a40 <__copybits>
 8009bd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bd6:	9805      	ldr	r0, [sp, #20]
 8009bd8:	f7ff fb16 	bl	8009208 <_Bfree>
 8009bdc:	3e01      	subs	r6, #1
 8009bde:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009be0:	2e04      	cmp	r6, #4
 8009be2:	d806      	bhi.n	8009bf2 <_strtod_l+0xe2>
 8009be4:	e8df f006 	tbb	[pc, r6]
 8009be8:	201d0314 	.word	0x201d0314
 8009bec:	14          	.byte	0x14
 8009bed:	00          	.byte	0x00
 8009bee:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009bf2:	05e1      	lsls	r1, r4, #23
 8009bf4:	bf48      	it	mi
 8009bf6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009bfa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bfe:	0d1b      	lsrs	r3, r3, #20
 8009c00:	051b      	lsls	r3, r3, #20
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1bd      	bne.n	8009b82 <_strtod_l+0x72>
 8009c06:	f7fe fb35 	bl	8008274 <__errno>
 8009c0a:	2322      	movs	r3, #34	@ 0x22
 8009c0c:	6003      	str	r3, [r0, #0]
 8009c0e:	e7b8      	b.n	8009b82 <_strtod_l+0x72>
 8009c10:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009c14:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009c18:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009c1c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009c20:	e7e7      	b.n	8009bf2 <_strtod_l+0xe2>
 8009c22:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009da0 <_strtod_l+0x290>
 8009c26:	e7e4      	b.n	8009bf2 <_strtod_l+0xe2>
 8009c28:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009c2c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009c30:	e7df      	b.n	8009bf2 <_strtod_l+0xe2>
 8009c32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c38:	785b      	ldrb	r3, [r3, #1]
 8009c3a:	2b30      	cmp	r3, #48	@ 0x30
 8009c3c:	d0f9      	beq.n	8009c32 <_strtod_l+0x122>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d09f      	beq.n	8009b82 <_strtod_l+0x72>
 8009c42:	2301      	movs	r3, #1
 8009c44:	2700      	movs	r7, #0
 8009c46:	9308      	str	r3, [sp, #32]
 8009c48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c4c:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009c4e:	46b9      	mov	r9, r7
 8009c50:	220a      	movs	r2, #10
 8009c52:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009c54:	7805      	ldrb	r5, [r0, #0]
 8009c56:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009c5a:	b2d9      	uxtb	r1, r3
 8009c5c:	2909      	cmp	r1, #9
 8009c5e:	d928      	bls.n	8009cb2 <_strtod_l+0x1a2>
 8009c60:	4950      	ldr	r1, [pc, #320]	@ (8009da4 <_strtod_l+0x294>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	f001 f966 	bl	800af34 <strncmp>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d032      	beq.n	8009cd2 <_strtod_l+0x1c2>
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	462a      	mov	r2, r5
 8009c70:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c72:	464d      	mov	r5, r9
 8009c74:	4603      	mov	r3, r0
 8009c76:	2a65      	cmp	r2, #101	@ 0x65
 8009c78:	d001      	beq.n	8009c7e <_strtod_l+0x16e>
 8009c7a:	2a45      	cmp	r2, #69	@ 0x45
 8009c7c:	d114      	bne.n	8009ca8 <_strtod_l+0x198>
 8009c7e:	b91d      	cbnz	r5, 8009c88 <_strtod_l+0x178>
 8009c80:	9a08      	ldr	r2, [sp, #32]
 8009c82:	4302      	orrs	r2, r0
 8009c84:	d096      	beq.n	8009bb4 <_strtod_l+0xa4>
 8009c86:	2500      	movs	r5, #0
 8009c88:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009c8a:	1c62      	adds	r2, r4, #1
 8009c8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c8e:	7862      	ldrb	r2, [r4, #1]
 8009c90:	2a2b      	cmp	r2, #43	@ 0x2b
 8009c92:	d07a      	beq.n	8009d8a <_strtod_l+0x27a>
 8009c94:	2a2d      	cmp	r2, #45	@ 0x2d
 8009c96:	d07e      	beq.n	8009d96 <_strtod_l+0x286>
 8009c98:	f04f 0c00 	mov.w	ip, #0
 8009c9c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009ca0:	2909      	cmp	r1, #9
 8009ca2:	f240 8085 	bls.w	8009db0 <_strtod_l+0x2a0>
 8009ca6:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ca8:	f04f 0800 	mov.w	r8, #0
 8009cac:	e0a5      	b.n	8009dfa <_strtod_l+0x2ea>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e7c8      	b.n	8009c44 <_strtod_l+0x134>
 8009cb2:	f1b9 0f08 	cmp.w	r9, #8
 8009cb6:	bfd8      	it	le
 8009cb8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009cba:	f100 0001 	add.w	r0, r0, #1
 8009cbe:	bfda      	itte	le
 8009cc0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cc4:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009cc6:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009cca:	f109 0901 	add.w	r9, r9, #1
 8009cce:	9019      	str	r0, [sp, #100]	@ 0x64
 8009cd0:	e7bf      	b.n	8009c52 <_strtod_l+0x142>
 8009cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cd8:	785a      	ldrb	r2, [r3, #1]
 8009cda:	f1b9 0f00 	cmp.w	r9, #0
 8009cde:	d03b      	beq.n	8009d58 <_strtod_l+0x248>
 8009ce0:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ce2:	464d      	mov	r5, r9
 8009ce4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009ce8:	2b09      	cmp	r3, #9
 8009cea:	d912      	bls.n	8009d12 <_strtod_l+0x202>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e7c2      	b.n	8009c76 <_strtod_l+0x166>
 8009cf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cf6:	785a      	ldrb	r2, [r3, #1]
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	2a30      	cmp	r2, #48	@ 0x30
 8009cfc:	d0f8      	beq.n	8009cf0 <_strtod_l+0x1e0>
 8009cfe:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009d02:	2b08      	cmp	r3, #8
 8009d04:	f200 84c4 	bhi.w	800a690 <_strtod_l+0xb80>
 8009d08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d10:	4605      	mov	r5, r0
 8009d12:	3a30      	subs	r2, #48	@ 0x30
 8009d14:	f100 0301 	add.w	r3, r0, #1
 8009d18:	d018      	beq.n	8009d4c <_strtod_l+0x23c>
 8009d1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d1c:	4419      	add	r1, r3
 8009d1e:	910a      	str	r1, [sp, #40]	@ 0x28
 8009d20:	462e      	mov	r6, r5
 8009d22:	f04f 0e0a 	mov.w	lr, #10
 8009d26:	1c71      	adds	r1, r6, #1
 8009d28:	eba1 0c05 	sub.w	ip, r1, r5
 8009d2c:	4563      	cmp	r3, ip
 8009d2e:	dc15      	bgt.n	8009d5c <_strtod_l+0x24c>
 8009d30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009d34:	182b      	adds	r3, r5, r0
 8009d36:	2b08      	cmp	r3, #8
 8009d38:	f105 0501 	add.w	r5, r5, #1
 8009d3c:	4405      	add	r5, r0
 8009d3e:	dc1a      	bgt.n	8009d76 <_strtod_l+0x266>
 8009d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d42:	230a      	movs	r3, #10
 8009d44:	fb03 2301 	mla	r3, r3, r1, r2
 8009d48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d4e:	1c51      	adds	r1, r2, #1
 8009d50:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d52:	7852      	ldrb	r2, [r2, #1]
 8009d54:	4618      	mov	r0, r3
 8009d56:	e7c5      	b.n	8009ce4 <_strtod_l+0x1d4>
 8009d58:	4648      	mov	r0, r9
 8009d5a:	e7ce      	b.n	8009cfa <_strtod_l+0x1ea>
 8009d5c:	2e08      	cmp	r6, #8
 8009d5e:	dc05      	bgt.n	8009d6c <_strtod_l+0x25c>
 8009d60:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009d62:	fb0e f606 	mul.w	r6, lr, r6
 8009d66:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009d68:	460e      	mov	r6, r1
 8009d6a:	e7dc      	b.n	8009d26 <_strtod_l+0x216>
 8009d6c:	2910      	cmp	r1, #16
 8009d6e:	bfd8      	it	le
 8009d70:	fb0e f707 	mulle.w	r7, lr, r7
 8009d74:	e7f8      	b.n	8009d68 <_strtod_l+0x258>
 8009d76:	2b0f      	cmp	r3, #15
 8009d78:	bfdc      	itt	le
 8009d7a:	230a      	movle	r3, #10
 8009d7c:	fb03 2707 	mlale	r7, r3, r7, r2
 8009d80:	e7e3      	b.n	8009d4a <_strtod_l+0x23a>
 8009d82:	2300      	movs	r3, #0
 8009d84:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d86:	2301      	movs	r3, #1
 8009d88:	e77a      	b.n	8009c80 <_strtod_l+0x170>
 8009d8a:	f04f 0c00 	mov.w	ip, #0
 8009d8e:	1ca2      	adds	r2, r4, #2
 8009d90:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d92:	78a2      	ldrb	r2, [r4, #2]
 8009d94:	e782      	b.n	8009c9c <_strtod_l+0x18c>
 8009d96:	f04f 0c01 	mov.w	ip, #1
 8009d9a:	e7f8      	b.n	8009d8e <_strtod_l+0x27e>
 8009d9c:	0800bd9c 	.word	0x0800bd9c
 8009da0:	7ff00000 	.word	0x7ff00000
 8009da4:	0800bbcf 	.word	0x0800bbcf
 8009da8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009daa:	1c51      	adds	r1, r2, #1
 8009dac:	9119      	str	r1, [sp, #100]	@ 0x64
 8009dae:	7852      	ldrb	r2, [r2, #1]
 8009db0:	2a30      	cmp	r2, #48	@ 0x30
 8009db2:	d0f9      	beq.n	8009da8 <_strtod_l+0x298>
 8009db4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009db8:	2908      	cmp	r1, #8
 8009dba:	f63f af75 	bhi.w	8009ca8 <_strtod_l+0x198>
 8009dbe:	3a30      	subs	r2, #48	@ 0x30
 8009dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009dc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009dc6:	f04f 080a 	mov.w	r8, #10
 8009dca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009dcc:	1c56      	adds	r6, r2, #1
 8009dce:	9619      	str	r6, [sp, #100]	@ 0x64
 8009dd0:	7852      	ldrb	r2, [r2, #1]
 8009dd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009dd6:	f1be 0f09 	cmp.w	lr, #9
 8009dda:	d939      	bls.n	8009e50 <_strtod_l+0x340>
 8009ddc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009dde:	1a76      	subs	r6, r6, r1
 8009de0:	2e08      	cmp	r6, #8
 8009de2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009de6:	dc03      	bgt.n	8009df0 <_strtod_l+0x2e0>
 8009de8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dea:	4588      	cmp	r8, r1
 8009dec:	bfa8      	it	ge
 8009dee:	4688      	movge	r8, r1
 8009df0:	f1bc 0f00 	cmp.w	ip, #0
 8009df4:	d001      	beq.n	8009dfa <_strtod_l+0x2ea>
 8009df6:	f1c8 0800 	rsb	r8, r8, #0
 8009dfa:	2d00      	cmp	r5, #0
 8009dfc:	d14e      	bne.n	8009e9c <_strtod_l+0x38c>
 8009dfe:	9908      	ldr	r1, [sp, #32]
 8009e00:	4308      	orrs	r0, r1
 8009e02:	f47f aebe 	bne.w	8009b82 <_strtod_l+0x72>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f47f aed4 	bne.w	8009bb4 <_strtod_l+0xa4>
 8009e0c:	2a69      	cmp	r2, #105	@ 0x69
 8009e0e:	d028      	beq.n	8009e62 <_strtod_l+0x352>
 8009e10:	dc25      	bgt.n	8009e5e <_strtod_l+0x34e>
 8009e12:	2a49      	cmp	r2, #73	@ 0x49
 8009e14:	d025      	beq.n	8009e62 <_strtod_l+0x352>
 8009e16:	2a4e      	cmp	r2, #78	@ 0x4e
 8009e18:	f47f aecc 	bne.w	8009bb4 <_strtod_l+0xa4>
 8009e1c:	4999      	ldr	r1, [pc, #612]	@ (800a084 <_strtod_l+0x574>)
 8009e1e:	a819      	add	r0, sp, #100	@ 0x64
 8009e20:	f001 fb9c 	bl	800b55c <__match>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	f43f aec5 	beq.w	8009bb4 <_strtod_l+0xa4>
 8009e2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b28      	cmp	r3, #40	@ 0x28
 8009e30:	d12e      	bne.n	8009e90 <_strtod_l+0x380>
 8009e32:	4995      	ldr	r1, [pc, #596]	@ (800a088 <_strtod_l+0x578>)
 8009e34:	aa1c      	add	r2, sp, #112	@ 0x70
 8009e36:	a819      	add	r0, sp, #100	@ 0x64
 8009e38:	f001 fba4 	bl	800b584 <__hexnan>
 8009e3c:	2805      	cmp	r0, #5
 8009e3e:	d127      	bne.n	8009e90 <_strtod_l+0x380>
 8009e40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009e46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009e4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009e4e:	e698      	b.n	8009b82 <_strtod_l+0x72>
 8009e50:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e52:	fb08 2101 	mla	r1, r8, r1, r2
 8009e56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e5c:	e7b5      	b.n	8009dca <_strtod_l+0x2ba>
 8009e5e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009e60:	e7da      	b.n	8009e18 <_strtod_l+0x308>
 8009e62:	498a      	ldr	r1, [pc, #552]	@ (800a08c <_strtod_l+0x57c>)
 8009e64:	a819      	add	r0, sp, #100	@ 0x64
 8009e66:	f001 fb79 	bl	800b55c <__match>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f43f aea2 	beq.w	8009bb4 <_strtod_l+0xa4>
 8009e70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e72:	4987      	ldr	r1, [pc, #540]	@ (800a090 <_strtod_l+0x580>)
 8009e74:	3b01      	subs	r3, #1
 8009e76:	a819      	add	r0, sp, #100	@ 0x64
 8009e78:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e7a:	f001 fb6f 	bl	800b55c <__match>
 8009e7e:	b910      	cbnz	r0, 8009e86 <_strtod_l+0x376>
 8009e80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e82:	3301      	adds	r3, #1
 8009e84:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e86:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a094 <_strtod_l+0x584>
 8009e8a:	f04f 0a00 	mov.w	sl, #0
 8009e8e:	e678      	b.n	8009b82 <_strtod_l+0x72>
 8009e90:	4881      	ldr	r0, [pc, #516]	@ (800a098 <_strtod_l+0x588>)
 8009e92:	f001 f8a1 	bl	800afd8 <nan>
 8009e96:	4682      	mov	sl, r0
 8009e98:	468b      	mov	fp, r1
 8009e9a:	e672      	b.n	8009b82 <_strtod_l+0x72>
 8009e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e9e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009ea0:	eba8 0303 	sub.w	r3, r8, r3
 8009ea4:	f1b9 0f00 	cmp.w	r9, #0
 8009ea8:	bf08      	it	eq
 8009eaa:	46a9      	moveq	r9, r5
 8009eac:	2d10      	cmp	r5, #16
 8009eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eb0:	462c      	mov	r4, r5
 8009eb2:	bfa8      	it	ge
 8009eb4:	2410      	movge	r4, #16
 8009eb6:	f7f6 fafd 	bl	80004b4 <__aeabi_ui2d>
 8009eba:	2d09      	cmp	r5, #9
 8009ebc:	4682      	mov	sl, r0
 8009ebe:	468b      	mov	fp, r1
 8009ec0:	dc11      	bgt.n	8009ee6 <_strtod_l+0x3d6>
 8009ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f43f ae5c 	beq.w	8009b82 <_strtod_l+0x72>
 8009eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ecc:	dd76      	ble.n	8009fbc <_strtod_l+0x4ac>
 8009ece:	2b16      	cmp	r3, #22
 8009ed0:	dc5d      	bgt.n	8009f8e <_strtod_l+0x47e>
 8009ed2:	4972      	ldr	r1, [pc, #456]	@ (800a09c <_strtod_l+0x58c>)
 8009ed4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009edc:	4652      	mov	r2, sl
 8009ede:	465b      	mov	r3, fp
 8009ee0:	f7f6 fb62 	bl	80005a8 <__aeabi_dmul>
 8009ee4:	e7d7      	b.n	8009e96 <_strtod_l+0x386>
 8009ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800a09c <_strtod_l+0x58c>)
 8009ee8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009eec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009ef0:	f7f6 fb5a 	bl	80005a8 <__aeabi_dmul>
 8009ef4:	4682      	mov	sl, r0
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	468b      	mov	fp, r1
 8009efa:	f7f6 fadb 	bl	80004b4 <__aeabi_ui2d>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4650      	mov	r0, sl
 8009f04:	4659      	mov	r1, fp
 8009f06:	f7f6 f999 	bl	800023c <__adddf3>
 8009f0a:	2d0f      	cmp	r5, #15
 8009f0c:	4682      	mov	sl, r0
 8009f0e:	468b      	mov	fp, r1
 8009f10:	ddd7      	ble.n	8009ec2 <_strtod_l+0x3b2>
 8009f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f14:	1b2c      	subs	r4, r5, r4
 8009f16:	441c      	add	r4, r3
 8009f18:	2c00      	cmp	r4, #0
 8009f1a:	f340 8093 	ble.w	800a044 <_strtod_l+0x534>
 8009f1e:	f014 030f 	ands.w	r3, r4, #15
 8009f22:	d00a      	beq.n	8009f3a <_strtod_l+0x42a>
 8009f24:	495d      	ldr	r1, [pc, #372]	@ (800a09c <_strtod_l+0x58c>)
 8009f26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	465b      	mov	r3, fp
 8009f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f32:	f7f6 fb39 	bl	80005a8 <__aeabi_dmul>
 8009f36:	4682      	mov	sl, r0
 8009f38:	468b      	mov	fp, r1
 8009f3a:	f034 040f 	bics.w	r4, r4, #15
 8009f3e:	d073      	beq.n	800a028 <_strtod_l+0x518>
 8009f40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009f44:	dd49      	ble.n	8009fda <_strtod_l+0x4ca>
 8009f46:	2400      	movs	r4, #0
 8009f48:	46a0      	mov	r8, r4
 8009f4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f4c:	46a1      	mov	r9, r4
 8009f4e:	9a05      	ldr	r2, [sp, #20]
 8009f50:	f8df b140 	ldr.w	fp, [pc, #320]	@ 800a094 <_strtod_l+0x584>
 8009f54:	2322      	movs	r3, #34	@ 0x22
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	f04f 0a00 	mov.w	sl, #0
 8009f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f43f ae0f 	beq.w	8009b82 <_strtod_l+0x72>
 8009f64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f66:	9805      	ldr	r0, [sp, #20]
 8009f68:	f7ff f94e 	bl	8009208 <_Bfree>
 8009f6c:	9805      	ldr	r0, [sp, #20]
 8009f6e:	4649      	mov	r1, r9
 8009f70:	f7ff f94a 	bl	8009208 <_Bfree>
 8009f74:	9805      	ldr	r0, [sp, #20]
 8009f76:	4641      	mov	r1, r8
 8009f78:	f7ff f946 	bl	8009208 <_Bfree>
 8009f7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f7e:	9805      	ldr	r0, [sp, #20]
 8009f80:	f7ff f942 	bl	8009208 <_Bfree>
 8009f84:	9805      	ldr	r0, [sp, #20]
 8009f86:	4621      	mov	r1, r4
 8009f88:	f7ff f93e 	bl	8009208 <_Bfree>
 8009f8c:	e5f9      	b.n	8009b82 <_strtod_l+0x72>
 8009f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009f94:	4293      	cmp	r3, r2
 8009f96:	dbbc      	blt.n	8009f12 <_strtod_l+0x402>
 8009f98:	4c40      	ldr	r4, [pc, #256]	@ (800a09c <_strtod_l+0x58c>)
 8009f9a:	f1c5 050f 	rsb	r5, r5, #15
 8009f9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009fa2:	4652      	mov	r2, sl
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009faa:	f7f6 fafd 	bl	80005a8 <__aeabi_dmul>
 8009fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb0:	1b5d      	subs	r5, r3, r5
 8009fb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009fb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009fba:	e791      	b.n	8009ee0 <_strtod_l+0x3d0>
 8009fbc:	3316      	adds	r3, #22
 8009fbe:	dba8      	blt.n	8009f12 <_strtod_l+0x402>
 8009fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fc2:	eba3 0808 	sub.w	r8, r3, r8
 8009fc6:	4b35      	ldr	r3, [pc, #212]	@ (800a09c <_strtod_l+0x58c>)
 8009fc8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009fcc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	4659      	mov	r1, fp
 8009fd4:	f7f6 fc12 	bl	80007fc <__aeabi_ddiv>
 8009fd8:	e75d      	b.n	8009e96 <_strtod_l+0x386>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	4f30      	ldr	r7, [pc, #192]	@ (800a0a0 <_strtod_l+0x590>)
 8009fde:	1124      	asrs	r4, r4, #4
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	4659      	mov	r1, fp
 8009fe4:	461e      	mov	r6, r3
 8009fe6:	2c01      	cmp	r4, #1
 8009fe8:	dc21      	bgt.n	800a02e <_strtod_l+0x51e>
 8009fea:	b10b      	cbz	r3, 8009ff0 <_strtod_l+0x4e0>
 8009fec:	4682      	mov	sl, r0
 8009fee:	468b      	mov	fp, r1
 8009ff0:	492b      	ldr	r1, [pc, #172]	@ (800a0a0 <_strtod_l+0x590>)
 8009ff2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009ff6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009ffa:	4652      	mov	r2, sl
 8009ffc:	465b      	mov	r3, fp
 8009ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a002:	f7f6 fad1 	bl	80005a8 <__aeabi_dmul>
 800a006:	4b23      	ldr	r3, [pc, #140]	@ (800a094 <_strtod_l+0x584>)
 800a008:	460a      	mov	r2, r1
 800a00a:	400b      	ands	r3, r1
 800a00c:	4925      	ldr	r1, [pc, #148]	@ (800a0a4 <_strtod_l+0x594>)
 800a00e:	428b      	cmp	r3, r1
 800a010:	4682      	mov	sl, r0
 800a012:	d898      	bhi.n	8009f46 <_strtod_l+0x436>
 800a014:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a018:	428b      	cmp	r3, r1
 800a01a:	bf86      	itte	hi
 800a01c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a0a8 <_strtod_l+0x598>
 800a020:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a024:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a028:	2300      	movs	r3, #0
 800a02a:	9308      	str	r3, [sp, #32]
 800a02c:	e076      	b.n	800a11c <_strtod_l+0x60c>
 800a02e:	07e2      	lsls	r2, r4, #31
 800a030:	d504      	bpl.n	800a03c <_strtod_l+0x52c>
 800a032:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a036:	f7f6 fab7 	bl	80005a8 <__aeabi_dmul>
 800a03a:	2301      	movs	r3, #1
 800a03c:	3601      	adds	r6, #1
 800a03e:	1064      	asrs	r4, r4, #1
 800a040:	3708      	adds	r7, #8
 800a042:	e7d0      	b.n	8009fe6 <_strtod_l+0x4d6>
 800a044:	d0f0      	beq.n	800a028 <_strtod_l+0x518>
 800a046:	4264      	negs	r4, r4
 800a048:	f014 020f 	ands.w	r2, r4, #15
 800a04c:	d00a      	beq.n	800a064 <_strtod_l+0x554>
 800a04e:	4b13      	ldr	r3, [pc, #76]	@ (800a09c <_strtod_l+0x58c>)
 800a050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a054:	4650      	mov	r0, sl
 800a056:	4659      	mov	r1, fp
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	f7f6 fbce 	bl	80007fc <__aeabi_ddiv>
 800a060:	4682      	mov	sl, r0
 800a062:	468b      	mov	fp, r1
 800a064:	1124      	asrs	r4, r4, #4
 800a066:	d0df      	beq.n	800a028 <_strtod_l+0x518>
 800a068:	2c1f      	cmp	r4, #31
 800a06a:	dd1f      	ble.n	800a0ac <_strtod_l+0x59c>
 800a06c:	2400      	movs	r4, #0
 800a06e:	46a0      	mov	r8, r4
 800a070:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a072:	46a1      	mov	r9, r4
 800a074:	9a05      	ldr	r2, [sp, #20]
 800a076:	2322      	movs	r3, #34	@ 0x22
 800a078:	f04f 0a00 	mov.w	sl, #0
 800a07c:	f04f 0b00 	mov.w	fp, #0
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	e76b      	b.n	8009f5c <_strtod_l+0x44c>
 800a084:	0800babd 	.word	0x0800babd
 800a088:	0800bd88 	.word	0x0800bd88
 800a08c:	0800bab5 	.word	0x0800bab5
 800a090:	0800baec 	.word	0x0800baec
 800a094:	7ff00000 	.word	0x7ff00000
 800a098:	0800bc25 	.word	0x0800bc25
 800a09c:	0800bcc0 	.word	0x0800bcc0
 800a0a0:	0800bc98 	.word	0x0800bc98
 800a0a4:	7ca00000 	.word	0x7ca00000
 800a0a8:	7fefffff 	.word	0x7fefffff
 800a0ac:	f014 0310 	ands.w	r3, r4, #16
 800a0b0:	bf18      	it	ne
 800a0b2:	236a      	movne	r3, #106	@ 0x6a
 800a0b4:	4e78      	ldr	r6, [pc, #480]	@ (800a298 <_strtod_l+0x788>)
 800a0b6:	9308      	str	r3, [sp, #32]
 800a0b8:	4650      	mov	r0, sl
 800a0ba:	4659      	mov	r1, fp
 800a0bc:	2300      	movs	r3, #0
 800a0be:	07e7      	lsls	r7, r4, #31
 800a0c0:	d504      	bpl.n	800a0cc <_strtod_l+0x5bc>
 800a0c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0c6:	f7f6 fa6f 	bl	80005a8 <__aeabi_dmul>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	1064      	asrs	r4, r4, #1
 800a0ce:	f106 0608 	add.w	r6, r6, #8
 800a0d2:	d1f4      	bne.n	800a0be <_strtod_l+0x5ae>
 800a0d4:	b10b      	cbz	r3, 800a0da <_strtod_l+0x5ca>
 800a0d6:	4682      	mov	sl, r0
 800a0d8:	468b      	mov	fp, r1
 800a0da:	9b08      	ldr	r3, [sp, #32]
 800a0dc:	b1b3      	cbz	r3, 800a10c <_strtod_l+0x5fc>
 800a0de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a0e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	4659      	mov	r1, fp
 800a0ea:	dd0f      	ble.n	800a10c <_strtod_l+0x5fc>
 800a0ec:	2b1f      	cmp	r3, #31
 800a0ee:	dd58      	ble.n	800a1a2 <_strtod_l+0x692>
 800a0f0:	2b34      	cmp	r3, #52	@ 0x34
 800a0f2:	bfde      	ittt	le
 800a0f4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a0f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a0fc:	4093      	lslle	r3, r2
 800a0fe:	f04f 0a00 	mov.w	sl, #0
 800a102:	bfcc      	ite	gt
 800a104:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a108:	ea03 0b01 	andle.w	fp, r3, r1
 800a10c:	2200      	movs	r2, #0
 800a10e:	2300      	movs	r3, #0
 800a110:	4650      	mov	r0, sl
 800a112:	4659      	mov	r1, fp
 800a114:	f7f6 fcb0 	bl	8000a78 <__aeabi_dcmpeq>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d1a7      	bne.n	800a06c <_strtod_l+0x55c>
 800a11c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a122:	9805      	ldr	r0, [sp, #20]
 800a124:	462b      	mov	r3, r5
 800a126:	464a      	mov	r2, r9
 800a128:	f7ff f8d6 	bl	80092d8 <__s2b>
 800a12c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a12e:	2800      	cmp	r0, #0
 800a130:	f43f af09 	beq.w	8009f46 <_strtod_l+0x436>
 800a134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a138:	2a00      	cmp	r2, #0
 800a13a:	eba3 0308 	sub.w	r3, r3, r8
 800a13e:	bfa8      	it	ge
 800a140:	2300      	movge	r3, #0
 800a142:	9312      	str	r3, [sp, #72]	@ 0x48
 800a144:	2400      	movs	r4, #0
 800a146:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a14a:	9316      	str	r3, [sp, #88]	@ 0x58
 800a14c:	46a0      	mov	r8, r4
 800a14e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a150:	9805      	ldr	r0, [sp, #20]
 800a152:	6859      	ldr	r1, [r3, #4]
 800a154:	f7ff f818 	bl	8009188 <_Balloc>
 800a158:	4681      	mov	r9, r0
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f43f aef7 	beq.w	8009f4e <_strtod_l+0x43e>
 800a160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	3202      	adds	r2, #2
 800a166:	f103 010c 	add.w	r1, r3, #12
 800a16a:	0092      	lsls	r2, r2, #2
 800a16c:	300c      	adds	r0, #12
 800a16e:	f000 ff25 	bl	800afbc <memcpy>
 800a172:	ab1c      	add	r3, sp, #112	@ 0x70
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	9805      	ldr	r0, [sp, #20]
 800a17c:	4652      	mov	r2, sl
 800a17e:	465b      	mov	r3, fp
 800a180:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a184:	f7ff fbd4 	bl	8009930 <__d2b>
 800a188:	901a      	str	r0, [sp, #104]	@ 0x68
 800a18a:	2800      	cmp	r0, #0
 800a18c:	f43f aedf 	beq.w	8009f4e <_strtod_l+0x43e>
 800a190:	9805      	ldr	r0, [sp, #20]
 800a192:	2101      	movs	r1, #1
 800a194:	f7ff f936 	bl	8009404 <__i2b>
 800a198:	4680      	mov	r8, r0
 800a19a:	b948      	cbnz	r0, 800a1b0 <_strtod_l+0x6a0>
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	e6d5      	b.n	8009f4e <_strtod_l+0x43e>
 800a1a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1aa:	ea03 0a0a 	and.w	sl, r3, sl
 800a1ae:	e7ad      	b.n	800a10c <_strtod_l+0x5fc>
 800a1b0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a1b2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a1b4:	2d00      	cmp	r5, #0
 800a1b6:	bfab      	itete	ge
 800a1b8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a1ba:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a1bc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a1be:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a1c0:	bfac      	ite	ge
 800a1c2:	18ef      	addge	r7, r5, r3
 800a1c4:	1b5e      	sublt	r6, r3, r5
 800a1c6:	9b08      	ldr	r3, [sp, #32]
 800a1c8:	1aed      	subs	r5, r5, r3
 800a1ca:	4415      	add	r5, r2
 800a1cc:	4b33      	ldr	r3, [pc, #204]	@ (800a29c <_strtod_l+0x78c>)
 800a1ce:	3d01      	subs	r5, #1
 800a1d0:	429d      	cmp	r5, r3
 800a1d2:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a1d6:	da50      	bge.n	800a27a <_strtod_l+0x76a>
 800a1d8:	1b5b      	subs	r3, r3, r5
 800a1da:	2b1f      	cmp	r3, #31
 800a1dc:	eba2 0203 	sub.w	r2, r2, r3
 800a1e0:	f04f 0101 	mov.w	r1, #1
 800a1e4:	dc3d      	bgt.n	800a262 <_strtod_l+0x752>
 800a1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1f0:	18bd      	adds	r5, r7, r2
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	42af      	cmp	r7, r5
 800a1f6:	4416      	add	r6, r2
 800a1f8:	441e      	add	r6, r3
 800a1fa:	463b      	mov	r3, r7
 800a1fc:	bfa8      	it	ge
 800a1fe:	462b      	movge	r3, r5
 800a200:	42b3      	cmp	r3, r6
 800a202:	bfa8      	it	ge
 800a204:	4633      	movge	r3, r6
 800a206:	2b00      	cmp	r3, #0
 800a208:	bfc2      	ittt	gt
 800a20a:	1aed      	subgt	r5, r5, r3
 800a20c:	1af6      	subgt	r6, r6, r3
 800a20e:	1aff      	subgt	r7, r7, r3
 800a210:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a212:	2b00      	cmp	r3, #0
 800a214:	dd16      	ble.n	800a244 <_strtod_l+0x734>
 800a216:	4641      	mov	r1, r8
 800a218:	9805      	ldr	r0, [sp, #20]
 800a21a:	461a      	mov	r2, r3
 800a21c:	f7ff f9aa 	bl	8009574 <__pow5mult>
 800a220:	4680      	mov	r8, r0
 800a222:	2800      	cmp	r0, #0
 800a224:	d0ba      	beq.n	800a19c <_strtod_l+0x68c>
 800a226:	4601      	mov	r1, r0
 800a228:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a22a:	9805      	ldr	r0, [sp, #20]
 800a22c:	f7ff f900 	bl	8009430 <__multiply>
 800a230:	900a      	str	r0, [sp, #40]	@ 0x28
 800a232:	2800      	cmp	r0, #0
 800a234:	f43f ae8b 	beq.w	8009f4e <_strtod_l+0x43e>
 800a238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a23a:	9805      	ldr	r0, [sp, #20]
 800a23c:	f7fe ffe4 	bl	8009208 <_Bfree>
 800a240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a242:	931a      	str	r3, [sp, #104]	@ 0x68
 800a244:	2d00      	cmp	r5, #0
 800a246:	dc1d      	bgt.n	800a284 <_strtod_l+0x774>
 800a248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dd28      	ble.n	800a2a0 <_strtod_l+0x790>
 800a24e:	4649      	mov	r1, r9
 800a250:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a252:	9805      	ldr	r0, [sp, #20]
 800a254:	f7ff f98e 	bl	8009574 <__pow5mult>
 800a258:	4681      	mov	r9, r0
 800a25a:	bb08      	cbnz	r0, 800a2a0 <_strtod_l+0x790>
 800a25c:	f04f 0900 	mov.w	r9, #0
 800a260:	e675      	b.n	8009f4e <_strtod_l+0x43e>
 800a262:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a266:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a26a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a26e:	35e2      	adds	r5, #226	@ 0xe2
 800a270:	fa01 f305 	lsl.w	r3, r1, r5
 800a274:	9310      	str	r3, [sp, #64]	@ 0x40
 800a276:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a278:	e7ba      	b.n	800a1f0 <_strtod_l+0x6e0>
 800a27a:	2300      	movs	r3, #0
 800a27c:	9310      	str	r3, [sp, #64]	@ 0x40
 800a27e:	2301      	movs	r3, #1
 800a280:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a282:	e7b5      	b.n	800a1f0 <_strtod_l+0x6e0>
 800a284:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a286:	9805      	ldr	r0, [sp, #20]
 800a288:	462a      	mov	r2, r5
 800a28a:	f7ff f9cd 	bl	8009628 <__lshift>
 800a28e:	901a      	str	r0, [sp, #104]	@ 0x68
 800a290:	2800      	cmp	r0, #0
 800a292:	d1d9      	bne.n	800a248 <_strtod_l+0x738>
 800a294:	e65b      	b.n	8009f4e <_strtod_l+0x43e>
 800a296:	bf00      	nop
 800a298:	0800bdb0 	.word	0x0800bdb0
 800a29c:	fffffc02 	.word	0xfffffc02
 800a2a0:	2e00      	cmp	r6, #0
 800a2a2:	dd07      	ble.n	800a2b4 <_strtod_l+0x7a4>
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	9805      	ldr	r0, [sp, #20]
 800a2a8:	4632      	mov	r2, r6
 800a2aa:	f7ff f9bd 	bl	8009628 <__lshift>
 800a2ae:	4681      	mov	r9, r0
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d0d3      	beq.n	800a25c <_strtod_l+0x74c>
 800a2b4:	2f00      	cmp	r7, #0
 800a2b6:	dd08      	ble.n	800a2ca <_strtod_l+0x7ba>
 800a2b8:	4641      	mov	r1, r8
 800a2ba:	9805      	ldr	r0, [sp, #20]
 800a2bc:	463a      	mov	r2, r7
 800a2be:	f7ff f9b3 	bl	8009628 <__lshift>
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	f43f ae42 	beq.w	8009f4e <_strtod_l+0x43e>
 800a2ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2cc:	9805      	ldr	r0, [sp, #20]
 800a2ce:	464a      	mov	r2, r9
 800a2d0:	f7ff fa32 	bl	8009738 <__mdiff>
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f43f ae39 	beq.w	8009f4e <_strtod_l+0x43e>
 800a2dc:	68c3      	ldr	r3, [r0, #12]
 800a2de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60c3      	str	r3, [r0, #12]
 800a2e4:	4641      	mov	r1, r8
 800a2e6:	f7ff fa0b 	bl	8009700 <__mcmp>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	da3d      	bge.n	800a36a <_strtod_l+0x85a>
 800a2ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2f0:	ea53 030a 	orrs.w	r3, r3, sl
 800a2f4:	d163      	bne.n	800a3be <_strtod_l+0x8ae>
 800a2f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d15f      	bne.n	800a3be <_strtod_l+0x8ae>
 800a2fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a302:	0d1b      	lsrs	r3, r3, #20
 800a304:	051b      	lsls	r3, r3, #20
 800a306:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a30a:	d958      	bls.n	800a3be <_strtod_l+0x8ae>
 800a30c:	6963      	ldr	r3, [r4, #20]
 800a30e:	b913      	cbnz	r3, 800a316 <_strtod_l+0x806>
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	2b01      	cmp	r3, #1
 800a314:	dd53      	ble.n	800a3be <_strtod_l+0x8ae>
 800a316:	4621      	mov	r1, r4
 800a318:	2201      	movs	r2, #1
 800a31a:	9805      	ldr	r0, [sp, #20]
 800a31c:	f7ff f984 	bl	8009628 <__lshift>
 800a320:	4641      	mov	r1, r8
 800a322:	4604      	mov	r4, r0
 800a324:	f7ff f9ec 	bl	8009700 <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	dd48      	ble.n	800a3be <_strtod_l+0x8ae>
 800a32c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a330:	9a08      	ldr	r2, [sp, #32]
 800a332:	0d1b      	lsrs	r3, r3, #20
 800a334:	051b      	lsls	r3, r3, #20
 800a336:	2a00      	cmp	r2, #0
 800a338:	d062      	beq.n	800a400 <_strtod_l+0x8f0>
 800a33a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a33e:	d85f      	bhi.n	800a400 <_strtod_l+0x8f0>
 800a340:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a344:	f67f ae96 	bls.w	800a074 <_strtod_l+0x564>
 800a348:	4ba3      	ldr	r3, [pc, #652]	@ (800a5d8 <_strtod_l+0xac8>)
 800a34a:	4650      	mov	r0, sl
 800a34c:	4659      	mov	r1, fp
 800a34e:	2200      	movs	r2, #0
 800a350:	f7f6 f92a 	bl	80005a8 <__aeabi_dmul>
 800a354:	4ba1      	ldr	r3, [pc, #644]	@ (800a5dc <_strtod_l+0xacc>)
 800a356:	400b      	ands	r3, r1
 800a358:	4682      	mov	sl, r0
 800a35a:	468b      	mov	fp, r1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f47f ae01 	bne.w	8009f64 <_strtod_l+0x454>
 800a362:	9a05      	ldr	r2, [sp, #20]
 800a364:	2322      	movs	r3, #34	@ 0x22
 800a366:	6013      	str	r3, [r2, #0]
 800a368:	e5fc      	b.n	8009f64 <_strtod_l+0x454>
 800a36a:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a36e:	d165      	bne.n	800a43c <_strtod_l+0x92c>
 800a370:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a372:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a376:	b35a      	cbz	r2, 800a3d0 <_strtod_l+0x8c0>
 800a378:	4a99      	ldr	r2, [pc, #612]	@ (800a5e0 <_strtod_l+0xad0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d12b      	bne.n	800a3d6 <_strtod_l+0x8c6>
 800a37e:	9b08      	ldr	r3, [sp, #32]
 800a380:	4651      	mov	r1, sl
 800a382:	b303      	cbz	r3, 800a3c6 <_strtod_l+0x8b6>
 800a384:	4b95      	ldr	r3, [pc, #596]	@ (800a5dc <_strtod_l+0xacc>)
 800a386:	465a      	mov	r2, fp
 800a388:	4013      	ands	r3, r2
 800a38a:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a392:	d81b      	bhi.n	800a3cc <_strtod_l+0x8bc>
 800a394:	0d1b      	lsrs	r3, r3, #20
 800a396:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a39a:	fa02 f303 	lsl.w	r3, r2, r3
 800a39e:	4299      	cmp	r1, r3
 800a3a0:	d119      	bne.n	800a3d6 <_strtod_l+0x8c6>
 800a3a2:	4b90      	ldr	r3, [pc, #576]	@ (800a5e4 <_strtod_l+0xad4>)
 800a3a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d102      	bne.n	800a3b0 <_strtod_l+0x8a0>
 800a3aa:	3101      	adds	r1, #1
 800a3ac:	f43f adcf 	beq.w	8009f4e <_strtod_l+0x43e>
 800a3b0:	4b8a      	ldr	r3, [pc, #552]	@ (800a5dc <_strtod_l+0xacc>)
 800a3b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3b4:	401a      	ands	r2, r3
 800a3b6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a3ba:	f04f 0a00 	mov.w	sl, #0
 800a3be:	9b08      	ldr	r3, [sp, #32]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1c1      	bne.n	800a348 <_strtod_l+0x838>
 800a3c4:	e5ce      	b.n	8009f64 <_strtod_l+0x454>
 800a3c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a3ca:	e7e8      	b.n	800a39e <_strtod_l+0x88e>
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	e7e6      	b.n	800a39e <_strtod_l+0x88e>
 800a3d0:	ea53 030a 	orrs.w	r3, r3, sl
 800a3d4:	d0aa      	beq.n	800a32c <_strtod_l+0x81c>
 800a3d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3d8:	b1db      	cbz	r3, 800a412 <_strtod_l+0x902>
 800a3da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3dc:	4213      	tst	r3, r2
 800a3de:	d0ee      	beq.n	800a3be <_strtod_l+0x8ae>
 800a3e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3e2:	9a08      	ldr	r2, [sp, #32]
 800a3e4:	4650      	mov	r0, sl
 800a3e6:	4659      	mov	r1, fp
 800a3e8:	b1bb      	cbz	r3, 800a41a <_strtod_l+0x90a>
 800a3ea:	f7ff fb6d 	bl	8009ac8 <sulp>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3f6:	f7f5 ff21 	bl	800023c <__adddf3>
 800a3fa:	4682      	mov	sl, r0
 800a3fc:	468b      	mov	fp, r1
 800a3fe:	e7de      	b.n	800a3be <_strtod_l+0x8ae>
 800a400:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a404:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a408:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a40c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a410:	e7d5      	b.n	800a3be <_strtod_l+0x8ae>
 800a412:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a414:	ea13 0f0a 	tst.w	r3, sl
 800a418:	e7e1      	b.n	800a3de <_strtod_l+0x8ce>
 800a41a:	f7ff fb55 	bl	8009ac8 <sulp>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a426:	f7f5 ff07 	bl	8000238 <__aeabi_dsub>
 800a42a:	2200      	movs	r2, #0
 800a42c:	2300      	movs	r3, #0
 800a42e:	4682      	mov	sl, r0
 800a430:	468b      	mov	fp, r1
 800a432:	f7f6 fb21 	bl	8000a78 <__aeabi_dcmpeq>
 800a436:	2800      	cmp	r0, #0
 800a438:	d0c1      	beq.n	800a3be <_strtod_l+0x8ae>
 800a43a:	e61b      	b.n	800a074 <_strtod_l+0x564>
 800a43c:	4641      	mov	r1, r8
 800a43e:	4620      	mov	r0, r4
 800a440:	f7ff face 	bl	80099e0 <__ratio>
 800a444:	2200      	movs	r2, #0
 800a446:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a44a:	4606      	mov	r6, r0
 800a44c:	460f      	mov	r7, r1
 800a44e:	f7f6 fb27 	bl	8000aa0 <__aeabi_dcmple>
 800a452:	2800      	cmp	r0, #0
 800a454:	d06d      	beq.n	800a532 <_strtod_l+0xa22>
 800a456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d178      	bne.n	800a54e <_strtod_l+0xa3e>
 800a45c:	f1ba 0f00 	cmp.w	sl, #0
 800a460:	d156      	bne.n	800a510 <_strtod_l+0xa00>
 800a462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d158      	bne.n	800a51e <_strtod_l+0xa0e>
 800a46c:	4b5e      	ldr	r3, [pc, #376]	@ (800a5e8 <_strtod_l+0xad8>)
 800a46e:	2200      	movs	r2, #0
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f6 fb0a 	bl	8000a8c <__aeabi_dcmplt>
 800a478:	2800      	cmp	r0, #0
 800a47a:	d157      	bne.n	800a52c <_strtod_l+0xa1c>
 800a47c:	4630      	mov	r0, r6
 800a47e:	4639      	mov	r1, r7
 800a480:	4b5a      	ldr	r3, [pc, #360]	@ (800a5ec <_strtod_l+0xadc>)
 800a482:	2200      	movs	r2, #0
 800a484:	f7f6 f890 	bl	80005a8 <__aeabi_dmul>
 800a488:	4606      	mov	r6, r0
 800a48a:	460f      	mov	r7, r1
 800a48c:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a490:	9606      	str	r6, [sp, #24]
 800a492:	9307      	str	r3, [sp, #28]
 800a494:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a498:	4d50      	ldr	r5, [pc, #320]	@ (800a5dc <_strtod_l+0xacc>)
 800a49a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a49e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a0:	401d      	ands	r5, r3
 800a4a2:	4b53      	ldr	r3, [pc, #332]	@ (800a5f0 <_strtod_l+0xae0>)
 800a4a4:	429d      	cmp	r5, r3
 800a4a6:	f040 80a9 	bne.w	800a5fc <_strtod_l+0xaec>
 800a4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4ac:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a4b0:	4650      	mov	r0, sl
 800a4b2:	4659      	mov	r1, fp
 800a4b4:	f7ff f9d2 	bl	800985c <__ulp>
 800a4b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4bc:	f7f6 f874 	bl	80005a8 <__aeabi_dmul>
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	465b      	mov	r3, fp
 800a4c4:	f7f5 feba 	bl	800023c <__adddf3>
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4944      	ldr	r1, [pc, #272]	@ (800a5dc <_strtod_l+0xacc>)
 800a4cc:	4a49      	ldr	r2, [pc, #292]	@ (800a5f4 <_strtod_l+0xae4>)
 800a4ce:	4019      	ands	r1, r3
 800a4d0:	4291      	cmp	r1, r2
 800a4d2:	4682      	mov	sl, r0
 800a4d4:	d942      	bls.n	800a55c <_strtod_l+0xa4c>
 800a4d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4d8:	4b42      	ldr	r3, [pc, #264]	@ (800a5e4 <_strtod_l+0xad4>)
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d103      	bne.n	800a4e6 <_strtod_l+0x9d6>
 800a4de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	f43f ad34 	beq.w	8009f4e <_strtod_l+0x43e>
 800a4e6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800a5e4 <_strtod_l+0xad4>
 800a4ea:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a4ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4f0:	9805      	ldr	r0, [sp, #20]
 800a4f2:	f7fe fe89 	bl	8009208 <_Bfree>
 800a4f6:	9805      	ldr	r0, [sp, #20]
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	f7fe fe85 	bl	8009208 <_Bfree>
 800a4fe:	9805      	ldr	r0, [sp, #20]
 800a500:	4641      	mov	r1, r8
 800a502:	f7fe fe81 	bl	8009208 <_Bfree>
 800a506:	9805      	ldr	r0, [sp, #20]
 800a508:	4621      	mov	r1, r4
 800a50a:	f7fe fe7d 	bl	8009208 <_Bfree>
 800a50e:	e61e      	b.n	800a14e <_strtod_l+0x63e>
 800a510:	f1ba 0f01 	cmp.w	sl, #1
 800a514:	d103      	bne.n	800a51e <_strtod_l+0xa0e>
 800a516:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f43f adab 	beq.w	800a074 <_strtod_l+0x564>
 800a51e:	4b36      	ldr	r3, [pc, #216]	@ (800a5f8 <_strtod_l+0xae8>)
 800a520:	4f31      	ldr	r7, [pc, #196]	@ (800a5e8 <_strtod_l+0xad8>)
 800a522:	2200      	movs	r2, #0
 800a524:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a528:	2600      	movs	r6, #0
 800a52a:	e7b3      	b.n	800a494 <_strtod_l+0x984>
 800a52c:	4f2f      	ldr	r7, [pc, #188]	@ (800a5ec <_strtod_l+0xadc>)
 800a52e:	2600      	movs	r6, #0
 800a530:	e7ac      	b.n	800a48c <_strtod_l+0x97c>
 800a532:	4b2e      	ldr	r3, [pc, #184]	@ (800a5ec <_strtod_l+0xadc>)
 800a534:	4630      	mov	r0, r6
 800a536:	4639      	mov	r1, r7
 800a538:	2200      	movs	r2, #0
 800a53a:	f7f6 f835 	bl	80005a8 <__aeabi_dmul>
 800a53e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a540:	4606      	mov	r6, r0
 800a542:	460f      	mov	r7, r1
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0a1      	beq.n	800a48c <_strtod_l+0x97c>
 800a548:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a54c:	e7a2      	b.n	800a494 <_strtod_l+0x984>
 800a54e:	4b26      	ldr	r3, [pc, #152]	@ (800a5e8 <_strtod_l+0xad8>)
 800a550:	2200      	movs	r2, #0
 800a552:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a556:	4616      	mov	r6, r2
 800a558:	461f      	mov	r7, r3
 800a55a:	e79b      	b.n	800a494 <_strtod_l+0x984>
 800a55c:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a560:	9b08      	ldr	r3, [sp, #32]
 800a562:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1c1      	bne.n	800a4ee <_strtod_l+0x9de>
 800a56a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a56e:	0d1b      	lsrs	r3, r3, #20
 800a570:	051b      	lsls	r3, r3, #20
 800a572:	429d      	cmp	r5, r3
 800a574:	d1bb      	bne.n	800a4ee <_strtod_l+0x9de>
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	f7f6 fb75 	bl	8000c68 <__aeabi_d2lz>
 800a57e:	f7f5 ffe5 	bl	800054c <__aeabi_l2d>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4630      	mov	r0, r6
 800a588:	4639      	mov	r1, r7
 800a58a:	f7f5 fe55 	bl	8000238 <__aeabi_dsub>
 800a58e:	460b      	mov	r3, r1
 800a590:	4602      	mov	r2, r0
 800a592:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a596:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a59a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a59c:	ea46 060a 	orr.w	r6, r6, sl
 800a5a0:	431e      	orrs	r6, r3
 800a5a2:	d068      	beq.n	800a676 <_strtod_l+0xb66>
 800a5a4:	a308      	add	r3, pc, #32	@ (adr r3, 800a5c8 <_strtod_l+0xab8>)
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	f7f6 fa6f 	bl	8000a8c <__aeabi_dcmplt>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f47f acd8 	bne.w	8009f64 <_strtod_l+0x454>
 800a5b4:	a306      	add	r3, pc, #24	@ (adr r3, 800a5d0 <_strtod_l+0xac0>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5be:	f7f6 fa83 	bl	8000ac8 <__aeabi_dcmpgt>
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d093      	beq.n	800a4ee <_strtod_l+0x9de>
 800a5c6:	e4cd      	b.n	8009f64 <_strtod_l+0x454>
 800a5c8:	94a03595 	.word	0x94a03595
 800a5cc:	3fdfffff 	.word	0x3fdfffff
 800a5d0:	35afe535 	.word	0x35afe535
 800a5d4:	3fe00000 	.word	0x3fe00000
 800a5d8:	39500000 	.word	0x39500000
 800a5dc:	7ff00000 	.word	0x7ff00000
 800a5e0:	000fffff 	.word	0x000fffff
 800a5e4:	7fefffff 	.word	0x7fefffff
 800a5e8:	3ff00000 	.word	0x3ff00000
 800a5ec:	3fe00000 	.word	0x3fe00000
 800a5f0:	7fe00000 	.word	0x7fe00000
 800a5f4:	7c9fffff 	.word	0x7c9fffff
 800a5f8:	bff00000 	.word	0xbff00000
 800a5fc:	9b08      	ldr	r3, [sp, #32]
 800a5fe:	b323      	cbz	r3, 800a64a <_strtod_l+0xb3a>
 800a600:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a604:	d821      	bhi.n	800a64a <_strtod_l+0xb3a>
 800a606:	a328      	add	r3, pc, #160	@ (adr r3, 800a6a8 <_strtod_l+0xb98>)
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f6 fa46 	bl	8000aa0 <__aeabi_dcmple>
 800a614:	b1a0      	cbz	r0, 800a640 <_strtod_l+0xb30>
 800a616:	4639      	mov	r1, r7
 800a618:	4630      	mov	r0, r6
 800a61a:	f7f6 fa9d 	bl	8000b58 <__aeabi_d2uiz>
 800a61e:	2801      	cmp	r0, #1
 800a620:	bf38      	it	cc
 800a622:	2001      	movcc	r0, #1
 800a624:	f7f5 ff46 	bl	80004b4 <__aeabi_ui2d>
 800a628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a62a:	4606      	mov	r6, r0
 800a62c:	460f      	mov	r7, r1
 800a62e:	b9fb      	cbnz	r3, 800a670 <_strtod_l+0xb60>
 800a630:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a634:	9014      	str	r0, [sp, #80]	@ 0x50
 800a636:	9315      	str	r3, [sp, #84]	@ 0x54
 800a638:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a63c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a640:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a642:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a646:	1b5b      	subs	r3, r3, r5
 800a648:	9311      	str	r3, [sp, #68]	@ 0x44
 800a64a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a64e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a652:	f7ff f903 	bl	800985c <__ulp>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4650      	mov	r0, sl
 800a65c:	4659      	mov	r1, fp
 800a65e:	f7f5 ffa3 	bl	80005a8 <__aeabi_dmul>
 800a662:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a666:	f7f5 fde9 	bl	800023c <__adddf3>
 800a66a:	4682      	mov	sl, r0
 800a66c:	468b      	mov	fp, r1
 800a66e:	e777      	b.n	800a560 <_strtod_l+0xa50>
 800a670:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a674:	e7e0      	b.n	800a638 <_strtod_l+0xb28>
 800a676:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6b0 <_strtod_l+0xba0>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	f7f6 fa06 	bl	8000a8c <__aeabi_dcmplt>
 800a680:	e79f      	b.n	800a5c2 <_strtod_l+0xab2>
 800a682:	2300      	movs	r3, #0
 800a684:	930e      	str	r3, [sp, #56]	@ 0x38
 800a686:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	f7ff ba7d 	b.w	8009b8a <_strtod_l+0x7a>
 800a690:	2a65      	cmp	r2, #101	@ 0x65
 800a692:	f43f ab76 	beq.w	8009d82 <_strtod_l+0x272>
 800a696:	2a45      	cmp	r2, #69	@ 0x45
 800a698:	f43f ab73 	beq.w	8009d82 <_strtod_l+0x272>
 800a69c:	2301      	movs	r3, #1
 800a69e:	f7ff bbae 	b.w	8009dfe <_strtod_l+0x2ee>
 800a6a2:	bf00      	nop
 800a6a4:	f3af 8000 	nop.w
 800a6a8:	ffc00000 	.word	0xffc00000
 800a6ac:	41dfffff 	.word	0x41dfffff
 800a6b0:	94a03595 	.word	0x94a03595
 800a6b4:	3fcfffff 	.word	0x3fcfffff

0800a6b8 <_strtod_r>:
 800a6b8:	4b01      	ldr	r3, [pc, #4]	@ (800a6c0 <_strtod_r+0x8>)
 800a6ba:	f7ff ba29 	b.w	8009b10 <_strtod_l>
 800a6be:	bf00      	nop
 800a6c0:	20000078 	.word	0x20000078

0800a6c4 <_strtol_l.isra.0>:
 800a6c4:	2b24      	cmp	r3, #36	@ 0x24
 800a6c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ca:	4686      	mov	lr, r0
 800a6cc:	4690      	mov	r8, r2
 800a6ce:	d801      	bhi.n	800a6d4 <_strtol_l.isra.0+0x10>
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d106      	bne.n	800a6e2 <_strtol_l.isra.0+0x1e>
 800a6d4:	f7fd fdce 	bl	8008274 <__errno>
 800a6d8:	2316      	movs	r3, #22
 800a6da:	6003      	str	r3, [r0, #0]
 800a6dc:	2000      	movs	r0, #0
 800a6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e2:	4834      	ldr	r0, [pc, #208]	@ (800a7b4 <_strtol_l.isra.0+0xf0>)
 800a6e4:	460d      	mov	r5, r1
 800a6e6:	462a      	mov	r2, r5
 800a6e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6ec:	5d06      	ldrb	r6, [r0, r4]
 800a6ee:	f016 0608 	ands.w	r6, r6, #8
 800a6f2:	d1f8      	bne.n	800a6e6 <_strtol_l.isra.0+0x22>
 800a6f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a6f6:	d110      	bne.n	800a71a <_strtol_l.isra.0+0x56>
 800a6f8:	782c      	ldrb	r4, [r5, #0]
 800a6fa:	2601      	movs	r6, #1
 800a6fc:	1c95      	adds	r5, r2, #2
 800a6fe:	f033 0210 	bics.w	r2, r3, #16
 800a702:	d115      	bne.n	800a730 <_strtol_l.isra.0+0x6c>
 800a704:	2c30      	cmp	r4, #48	@ 0x30
 800a706:	d10d      	bne.n	800a724 <_strtol_l.isra.0+0x60>
 800a708:	782a      	ldrb	r2, [r5, #0]
 800a70a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a70e:	2a58      	cmp	r2, #88	@ 0x58
 800a710:	d108      	bne.n	800a724 <_strtol_l.isra.0+0x60>
 800a712:	786c      	ldrb	r4, [r5, #1]
 800a714:	3502      	adds	r5, #2
 800a716:	2310      	movs	r3, #16
 800a718:	e00a      	b.n	800a730 <_strtol_l.isra.0+0x6c>
 800a71a:	2c2b      	cmp	r4, #43	@ 0x2b
 800a71c:	bf04      	itt	eq
 800a71e:	782c      	ldrbeq	r4, [r5, #0]
 800a720:	1c95      	addeq	r5, r2, #2
 800a722:	e7ec      	b.n	800a6fe <_strtol_l.isra.0+0x3a>
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1f6      	bne.n	800a716 <_strtol_l.isra.0+0x52>
 800a728:	2c30      	cmp	r4, #48	@ 0x30
 800a72a:	bf14      	ite	ne
 800a72c:	230a      	movne	r3, #10
 800a72e:	2308      	moveq	r3, #8
 800a730:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a734:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a738:	2200      	movs	r2, #0
 800a73a:	fbbc f9f3 	udiv	r9, ip, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	fb03 ca19 	mls	sl, r3, r9, ip
 800a744:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a748:	2f09      	cmp	r7, #9
 800a74a:	d80f      	bhi.n	800a76c <_strtol_l.isra.0+0xa8>
 800a74c:	463c      	mov	r4, r7
 800a74e:	42a3      	cmp	r3, r4
 800a750:	dd1b      	ble.n	800a78a <_strtol_l.isra.0+0xc6>
 800a752:	1c57      	adds	r7, r2, #1
 800a754:	d007      	beq.n	800a766 <_strtol_l.isra.0+0xa2>
 800a756:	4581      	cmp	r9, r0
 800a758:	d314      	bcc.n	800a784 <_strtol_l.isra.0+0xc0>
 800a75a:	d101      	bne.n	800a760 <_strtol_l.isra.0+0x9c>
 800a75c:	45a2      	cmp	sl, r4
 800a75e:	db11      	blt.n	800a784 <_strtol_l.isra.0+0xc0>
 800a760:	fb00 4003 	mla	r0, r0, r3, r4
 800a764:	2201      	movs	r2, #1
 800a766:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a76a:	e7eb      	b.n	800a744 <_strtol_l.isra.0+0x80>
 800a76c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a770:	2f19      	cmp	r7, #25
 800a772:	d801      	bhi.n	800a778 <_strtol_l.isra.0+0xb4>
 800a774:	3c37      	subs	r4, #55	@ 0x37
 800a776:	e7ea      	b.n	800a74e <_strtol_l.isra.0+0x8a>
 800a778:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a77c:	2f19      	cmp	r7, #25
 800a77e:	d804      	bhi.n	800a78a <_strtol_l.isra.0+0xc6>
 800a780:	3c57      	subs	r4, #87	@ 0x57
 800a782:	e7e4      	b.n	800a74e <_strtol_l.isra.0+0x8a>
 800a784:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a788:	e7ed      	b.n	800a766 <_strtol_l.isra.0+0xa2>
 800a78a:	1c53      	adds	r3, r2, #1
 800a78c:	d108      	bne.n	800a7a0 <_strtol_l.isra.0+0xdc>
 800a78e:	2322      	movs	r3, #34	@ 0x22
 800a790:	f8ce 3000 	str.w	r3, [lr]
 800a794:	4660      	mov	r0, ip
 800a796:	f1b8 0f00 	cmp.w	r8, #0
 800a79a:	d0a0      	beq.n	800a6de <_strtol_l.isra.0+0x1a>
 800a79c:	1e69      	subs	r1, r5, #1
 800a79e:	e006      	b.n	800a7ae <_strtol_l.isra.0+0xea>
 800a7a0:	b106      	cbz	r6, 800a7a4 <_strtol_l.isra.0+0xe0>
 800a7a2:	4240      	negs	r0, r0
 800a7a4:	f1b8 0f00 	cmp.w	r8, #0
 800a7a8:	d099      	beq.n	800a6de <_strtol_l.isra.0+0x1a>
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	d1f6      	bne.n	800a79c <_strtol_l.isra.0+0xd8>
 800a7ae:	f8c8 1000 	str.w	r1, [r8]
 800a7b2:	e794      	b.n	800a6de <_strtol_l.isra.0+0x1a>
 800a7b4:	0800bdd9 	.word	0x0800bdd9

0800a7b8 <_strtol_r>:
 800a7b8:	f7ff bf84 	b.w	800a6c4 <_strtol_l.isra.0>

0800a7bc <__ssputs_r>:
 800a7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c0:	688e      	ldr	r6, [r1, #8]
 800a7c2:	461f      	mov	r7, r3
 800a7c4:	42be      	cmp	r6, r7
 800a7c6:	680b      	ldr	r3, [r1, #0]
 800a7c8:	4682      	mov	sl, r0
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	4690      	mov	r8, r2
 800a7ce:	d82d      	bhi.n	800a82c <__ssputs_r+0x70>
 800a7d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7d8:	d026      	beq.n	800a828 <__ssputs_r+0x6c>
 800a7da:	6965      	ldr	r5, [r4, #20]
 800a7dc:	6909      	ldr	r1, [r1, #16]
 800a7de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7e2:	eba3 0901 	sub.w	r9, r3, r1
 800a7e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7ea:	1c7b      	adds	r3, r7, #1
 800a7ec:	444b      	add	r3, r9
 800a7ee:	106d      	asrs	r5, r5, #1
 800a7f0:	429d      	cmp	r5, r3
 800a7f2:	bf38      	it	cc
 800a7f4:	461d      	movcc	r5, r3
 800a7f6:	0553      	lsls	r3, r2, #21
 800a7f8:	d527      	bpl.n	800a84a <__ssputs_r+0x8e>
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	f7fe fc38 	bl	8009070 <_malloc_r>
 800a800:	4606      	mov	r6, r0
 800a802:	b360      	cbz	r0, 800a85e <__ssputs_r+0xa2>
 800a804:	6921      	ldr	r1, [r4, #16]
 800a806:	464a      	mov	r2, r9
 800a808:	f000 fbd8 	bl	800afbc <memcpy>
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a816:	81a3      	strh	r3, [r4, #12]
 800a818:	6126      	str	r6, [r4, #16]
 800a81a:	6165      	str	r5, [r4, #20]
 800a81c:	444e      	add	r6, r9
 800a81e:	eba5 0509 	sub.w	r5, r5, r9
 800a822:	6026      	str	r6, [r4, #0]
 800a824:	60a5      	str	r5, [r4, #8]
 800a826:	463e      	mov	r6, r7
 800a828:	42be      	cmp	r6, r7
 800a82a:	d900      	bls.n	800a82e <__ssputs_r+0x72>
 800a82c:	463e      	mov	r6, r7
 800a82e:	6820      	ldr	r0, [r4, #0]
 800a830:	4632      	mov	r2, r6
 800a832:	4641      	mov	r1, r8
 800a834:	f000 fb64 	bl	800af00 <memmove>
 800a838:	68a3      	ldr	r3, [r4, #8]
 800a83a:	1b9b      	subs	r3, r3, r6
 800a83c:	60a3      	str	r3, [r4, #8]
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	4433      	add	r3, r6
 800a842:	6023      	str	r3, [r4, #0]
 800a844:	2000      	movs	r0, #0
 800a846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84a:	462a      	mov	r2, r5
 800a84c:	f000 ff47 	bl	800b6de <_realloc_r>
 800a850:	4606      	mov	r6, r0
 800a852:	2800      	cmp	r0, #0
 800a854:	d1e0      	bne.n	800a818 <__ssputs_r+0x5c>
 800a856:	6921      	ldr	r1, [r4, #16]
 800a858:	4650      	mov	r0, sl
 800a85a:	f7fe fb95 	bl	8008f88 <_free_r>
 800a85e:	230c      	movs	r3, #12
 800a860:	f8ca 3000 	str.w	r3, [sl]
 800a864:	89a3      	ldrh	r3, [r4, #12]
 800a866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a870:	e7e9      	b.n	800a846 <__ssputs_r+0x8a>
	...

0800a874 <_svfiprintf_r>:
 800a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	4698      	mov	r8, r3
 800a87a:	898b      	ldrh	r3, [r1, #12]
 800a87c:	061b      	lsls	r3, r3, #24
 800a87e:	b09d      	sub	sp, #116	@ 0x74
 800a880:	4607      	mov	r7, r0
 800a882:	460d      	mov	r5, r1
 800a884:	4614      	mov	r4, r2
 800a886:	d510      	bpl.n	800a8aa <_svfiprintf_r+0x36>
 800a888:	690b      	ldr	r3, [r1, #16]
 800a88a:	b973      	cbnz	r3, 800a8aa <_svfiprintf_r+0x36>
 800a88c:	2140      	movs	r1, #64	@ 0x40
 800a88e:	f7fe fbef 	bl	8009070 <_malloc_r>
 800a892:	6028      	str	r0, [r5, #0]
 800a894:	6128      	str	r0, [r5, #16]
 800a896:	b930      	cbnz	r0, 800a8a6 <_svfiprintf_r+0x32>
 800a898:	230c      	movs	r3, #12
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8a0:	b01d      	add	sp, #116	@ 0x74
 800a8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a6:	2340      	movs	r3, #64	@ 0x40
 800a8a8:	616b      	str	r3, [r5, #20]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ae:	2320      	movs	r3, #32
 800a8b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8b8:	2330      	movs	r3, #48	@ 0x30
 800a8ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa58 <_svfiprintf_r+0x1e4>
 800a8be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8c2:	f04f 0901 	mov.w	r9, #1
 800a8c6:	4623      	mov	r3, r4
 800a8c8:	469a      	mov	sl, r3
 800a8ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ce:	b10a      	cbz	r2, 800a8d4 <_svfiprintf_r+0x60>
 800a8d0:	2a25      	cmp	r2, #37	@ 0x25
 800a8d2:	d1f9      	bne.n	800a8c8 <_svfiprintf_r+0x54>
 800a8d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8d8:	d00b      	beq.n	800a8f2 <_svfiprintf_r+0x7e>
 800a8da:	465b      	mov	r3, fp
 800a8dc:	4622      	mov	r2, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff ff6b 	bl	800a7bc <__ssputs_r>
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f000 80a7 	beq.w	800aa3a <_svfiprintf_r+0x1c6>
 800a8ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8ee:	445a      	add	r2, fp
 800a8f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 809f 	beq.w	800aa3a <_svfiprintf_r+0x1c6>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a906:	f10a 0a01 	add.w	sl, sl, #1
 800a90a:	9304      	str	r3, [sp, #16]
 800a90c:	9307      	str	r3, [sp, #28]
 800a90e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a912:	931a      	str	r3, [sp, #104]	@ 0x68
 800a914:	4654      	mov	r4, sl
 800a916:	2205      	movs	r2, #5
 800a918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a91c:	484e      	ldr	r0, [pc, #312]	@ (800aa58 <_svfiprintf_r+0x1e4>)
 800a91e:	f7f5 fc2f 	bl	8000180 <memchr>
 800a922:	9a04      	ldr	r2, [sp, #16]
 800a924:	b9d8      	cbnz	r0, 800a95e <_svfiprintf_r+0xea>
 800a926:	06d0      	lsls	r0, r2, #27
 800a928:	bf44      	itt	mi
 800a92a:	2320      	movmi	r3, #32
 800a92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a930:	0711      	lsls	r1, r2, #28
 800a932:	bf44      	itt	mi
 800a934:	232b      	movmi	r3, #43	@ 0x2b
 800a936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a93a:	f89a 3000 	ldrb.w	r3, [sl]
 800a93e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a940:	d015      	beq.n	800a96e <_svfiprintf_r+0xfa>
 800a942:	9a07      	ldr	r2, [sp, #28]
 800a944:	4654      	mov	r4, sl
 800a946:	2000      	movs	r0, #0
 800a948:	f04f 0c0a 	mov.w	ip, #10
 800a94c:	4621      	mov	r1, r4
 800a94e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a952:	3b30      	subs	r3, #48	@ 0x30
 800a954:	2b09      	cmp	r3, #9
 800a956:	d94b      	bls.n	800a9f0 <_svfiprintf_r+0x17c>
 800a958:	b1b0      	cbz	r0, 800a988 <_svfiprintf_r+0x114>
 800a95a:	9207      	str	r2, [sp, #28]
 800a95c:	e014      	b.n	800a988 <_svfiprintf_r+0x114>
 800a95e:	eba0 0308 	sub.w	r3, r0, r8
 800a962:	fa09 f303 	lsl.w	r3, r9, r3
 800a966:	4313      	orrs	r3, r2
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	46a2      	mov	sl, r4
 800a96c:	e7d2      	b.n	800a914 <_svfiprintf_r+0xa0>
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	1d19      	adds	r1, r3, #4
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	9103      	str	r1, [sp, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	bfbb      	ittet	lt
 800a97a:	425b      	neglt	r3, r3
 800a97c:	f042 0202 	orrlt.w	r2, r2, #2
 800a980:	9307      	strge	r3, [sp, #28]
 800a982:	9307      	strlt	r3, [sp, #28]
 800a984:	bfb8      	it	lt
 800a986:	9204      	strlt	r2, [sp, #16]
 800a988:	7823      	ldrb	r3, [r4, #0]
 800a98a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a98c:	d10a      	bne.n	800a9a4 <_svfiprintf_r+0x130>
 800a98e:	7863      	ldrb	r3, [r4, #1]
 800a990:	2b2a      	cmp	r3, #42	@ 0x2a
 800a992:	d132      	bne.n	800a9fa <_svfiprintf_r+0x186>
 800a994:	9b03      	ldr	r3, [sp, #12]
 800a996:	1d1a      	adds	r2, r3, #4
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	9203      	str	r2, [sp, #12]
 800a99c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9a0:	3402      	adds	r4, #2
 800a9a2:	9305      	str	r3, [sp, #20]
 800a9a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800aa5c <_svfiprintf_r+0x1e8>
 800a9a8:	7821      	ldrb	r1, [r4, #0]
 800a9aa:	2203      	movs	r2, #3
 800a9ac:	4650      	mov	r0, sl
 800a9ae:	f7f5 fbe7 	bl	8000180 <memchr>
 800a9b2:	b138      	cbz	r0, 800a9c4 <_svfiprintf_r+0x150>
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	eba0 000a 	sub.w	r0, r0, sl
 800a9ba:	2240      	movs	r2, #64	@ 0x40
 800a9bc:	4082      	lsls	r2, r0
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	3401      	adds	r4, #1
 800a9c2:	9304      	str	r3, [sp, #16]
 800a9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c8:	4825      	ldr	r0, [pc, #148]	@ (800aa60 <_svfiprintf_r+0x1ec>)
 800a9ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9ce:	2206      	movs	r2, #6
 800a9d0:	f7f5 fbd6 	bl	8000180 <memchr>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d036      	beq.n	800aa46 <_svfiprintf_r+0x1d2>
 800a9d8:	4b22      	ldr	r3, [pc, #136]	@ (800aa64 <_svfiprintf_r+0x1f0>)
 800a9da:	bb1b      	cbnz	r3, 800aa24 <_svfiprintf_r+0x1b0>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	3307      	adds	r3, #7
 800a9e0:	f023 0307 	bic.w	r3, r3, #7
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	9303      	str	r3, [sp, #12]
 800a9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ea:	4433      	add	r3, r6
 800a9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9ee:	e76a      	b.n	800a8c6 <_svfiprintf_r+0x52>
 800a9f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	e7a8      	b.n	800a94c <_svfiprintf_r+0xd8>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	3401      	adds	r4, #1
 800a9fe:	9305      	str	r3, [sp, #20]
 800aa00:	4619      	mov	r1, r3
 800aa02:	f04f 0c0a 	mov.w	ip, #10
 800aa06:	4620      	mov	r0, r4
 800aa08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa0c:	3a30      	subs	r2, #48	@ 0x30
 800aa0e:	2a09      	cmp	r2, #9
 800aa10:	d903      	bls.n	800aa1a <_svfiprintf_r+0x1a6>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0c6      	beq.n	800a9a4 <_svfiprintf_r+0x130>
 800aa16:	9105      	str	r1, [sp, #20]
 800aa18:	e7c4      	b.n	800a9a4 <_svfiprintf_r+0x130>
 800aa1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa1e:	4604      	mov	r4, r0
 800aa20:	2301      	movs	r3, #1
 800aa22:	e7f0      	b.n	800aa06 <_svfiprintf_r+0x192>
 800aa24:	ab03      	add	r3, sp, #12
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	462a      	mov	r2, r5
 800aa2a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa68 <_svfiprintf_r+0x1f4>)
 800aa2c:	a904      	add	r1, sp, #16
 800aa2e:	4638      	mov	r0, r7
 800aa30:	f7fc fbe2 	bl	80071f8 <_printf_float>
 800aa34:	1c42      	adds	r2, r0, #1
 800aa36:	4606      	mov	r6, r0
 800aa38:	d1d6      	bne.n	800a9e8 <_svfiprintf_r+0x174>
 800aa3a:	89ab      	ldrh	r3, [r5, #12]
 800aa3c:	065b      	lsls	r3, r3, #25
 800aa3e:	f53f af2d 	bmi.w	800a89c <_svfiprintf_r+0x28>
 800aa42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa44:	e72c      	b.n	800a8a0 <_svfiprintf_r+0x2c>
 800aa46:	ab03      	add	r3, sp, #12
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	462a      	mov	r2, r5
 800aa4c:	4b06      	ldr	r3, [pc, #24]	@ (800aa68 <_svfiprintf_r+0x1f4>)
 800aa4e:	a904      	add	r1, sp, #16
 800aa50:	4638      	mov	r0, r7
 800aa52:	f7fc fe6b 	bl	800772c <_printf_i>
 800aa56:	e7ed      	b.n	800aa34 <_svfiprintf_r+0x1c0>
 800aa58:	0800bbd1 	.word	0x0800bbd1
 800aa5c:	0800bbd7 	.word	0x0800bbd7
 800aa60:	0800bbdb 	.word	0x0800bbdb
 800aa64:	080071f9 	.word	0x080071f9
 800aa68:	0800a7bd 	.word	0x0800a7bd

0800aa6c <__sfputc_r>:
 800aa6c:	6893      	ldr	r3, [r2, #8]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	b410      	push	{r4}
 800aa74:	6093      	str	r3, [r2, #8]
 800aa76:	da07      	bge.n	800aa88 <__sfputc_r+0x1c>
 800aa78:	6994      	ldr	r4, [r2, #24]
 800aa7a:	42a3      	cmp	r3, r4
 800aa7c:	db01      	blt.n	800aa82 <__sfputc_r+0x16>
 800aa7e:	290a      	cmp	r1, #10
 800aa80:	d102      	bne.n	800aa88 <__sfputc_r+0x1c>
 800aa82:	bc10      	pop	{r4}
 800aa84:	f7fd bb0f 	b.w	80080a6 <__swbuf_r>
 800aa88:	6813      	ldr	r3, [r2, #0]
 800aa8a:	1c58      	adds	r0, r3, #1
 800aa8c:	6010      	str	r0, [r2, #0]
 800aa8e:	7019      	strb	r1, [r3, #0]
 800aa90:	4608      	mov	r0, r1
 800aa92:	bc10      	pop	{r4}
 800aa94:	4770      	bx	lr

0800aa96 <__sfputs_r>:
 800aa96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa98:	4606      	mov	r6, r0
 800aa9a:	460f      	mov	r7, r1
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	18d5      	adds	r5, r2, r3
 800aaa0:	42ac      	cmp	r4, r5
 800aaa2:	d101      	bne.n	800aaa8 <__sfputs_r+0x12>
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	e007      	b.n	800aab8 <__sfputs_r+0x22>
 800aaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaac:	463a      	mov	r2, r7
 800aaae:	4630      	mov	r0, r6
 800aab0:	f7ff ffdc 	bl	800aa6c <__sfputc_r>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d1f3      	bne.n	800aaa0 <__sfputs_r+0xa>
 800aab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aabc <_vfiprintf_r>:
 800aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac0:	460d      	mov	r5, r1
 800aac2:	b09d      	sub	sp, #116	@ 0x74
 800aac4:	4614      	mov	r4, r2
 800aac6:	4698      	mov	r8, r3
 800aac8:	4606      	mov	r6, r0
 800aaca:	b118      	cbz	r0, 800aad4 <_vfiprintf_r+0x18>
 800aacc:	6a03      	ldr	r3, [r0, #32]
 800aace:	b90b      	cbnz	r3, 800aad4 <_vfiprintf_r+0x18>
 800aad0:	f7fd f9de 	bl	8007e90 <__sinit>
 800aad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aad6:	07d9      	lsls	r1, r3, #31
 800aad8:	d405      	bmi.n	800aae6 <_vfiprintf_r+0x2a>
 800aada:	89ab      	ldrh	r3, [r5, #12]
 800aadc:	059a      	lsls	r2, r3, #22
 800aade:	d402      	bmi.n	800aae6 <_vfiprintf_r+0x2a>
 800aae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aae2:	f7fd fbf2 	bl	80082ca <__retarget_lock_acquire_recursive>
 800aae6:	89ab      	ldrh	r3, [r5, #12]
 800aae8:	071b      	lsls	r3, r3, #28
 800aaea:	d501      	bpl.n	800aaf0 <_vfiprintf_r+0x34>
 800aaec:	692b      	ldr	r3, [r5, #16]
 800aaee:	b99b      	cbnz	r3, 800ab18 <_vfiprintf_r+0x5c>
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7fd fb16 	bl	8008124 <__swsetup_r>
 800aaf8:	b170      	cbz	r0, 800ab18 <_vfiprintf_r+0x5c>
 800aafa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aafc:	07dc      	lsls	r4, r3, #31
 800aafe:	d504      	bpl.n	800ab0a <_vfiprintf_r+0x4e>
 800ab00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab04:	b01d      	add	sp, #116	@ 0x74
 800ab06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0a:	89ab      	ldrh	r3, [r5, #12]
 800ab0c:	0598      	lsls	r0, r3, #22
 800ab0e:	d4f7      	bmi.n	800ab00 <_vfiprintf_r+0x44>
 800ab10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab12:	f7fd fbdb 	bl	80082cc <__retarget_lock_release_recursive>
 800ab16:	e7f3      	b.n	800ab00 <_vfiprintf_r+0x44>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab1c:	2320      	movs	r3, #32
 800ab1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab26:	2330      	movs	r3, #48	@ 0x30
 800ab28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800acd8 <_vfiprintf_r+0x21c>
 800ab2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab30:	f04f 0901 	mov.w	r9, #1
 800ab34:	4623      	mov	r3, r4
 800ab36:	469a      	mov	sl, r3
 800ab38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab3c:	b10a      	cbz	r2, 800ab42 <_vfiprintf_r+0x86>
 800ab3e:	2a25      	cmp	r2, #37	@ 0x25
 800ab40:	d1f9      	bne.n	800ab36 <_vfiprintf_r+0x7a>
 800ab42:	ebba 0b04 	subs.w	fp, sl, r4
 800ab46:	d00b      	beq.n	800ab60 <_vfiprintf_r+0xa4>
 800ab48:	465b      	mov	r3, fp
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f7ff ffa1 	bl	800aa96 <__sfputs_r>
 800ab54:	3001      	adds	r0, #1
 800ab56:	f000 80a7 	beq.w	800aca8 <_vfiprintf_r+0x1ec>
 800ab5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab5c:	445a      	add	r2, fp
 800ab5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab60:	f89a 3000 	ldrb.w	r3, [sl]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 809f 	beq.w	800aca8 <_vfiprintf_r+0x1ec>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab74:	f10a 0a01 	add.w	sl, sl, #1
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	9307      	str	r3, [sp, #28]
 800ab7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab80:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab82:	4654      	mov	r4, sl
 800ab84:	2205      	movs	r2, #5
 800ab86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab8a:	4853      	ldr	r0, [pc, #332]	@ (800acd8 <_vfiprintf_r+0x21c>)
 800ab8c:	f7f5 faf8 	bl	8000180 <memchr>
 800ab90:	9a04      	ldr	r2, [sp, #16]
 800ab92:	b9d8      	cbnz	r0, 800abcc <_vfiprintf_r+0x110>
 800ab94:	06d1      	lsls	r1, r2, #27
 800ab96:	bf44      	itt	mi
 800ab98:	2320      	movmi	r3, #32
 800ab9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab9e:	0713      	lsls	r3, r2, #28
 800aba0:	bf44      	itt	mi
 800aba2:	232b      	movmi	r3, #43	@ 0x2b
 800aba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aba8:	f89a 3000 	ldrb.w	r3, [sl]
 800abac:	2b2a      	cmp	r3, #42	@ 0x2a
 800abae:	d015      	beq.n	800abdc <_vfiprintf_r+0x120>
 800abb0:	9a07      	ldr	r2, [sp, #28]
 800abb2:	4654      	mov	r4, sl
 800abb4:	2000      	movs	r0, #0
 800abb6:	f04f 0c0a 	mov.w	ip, #10
 800abba:	4621      	mov	r1, r4
 800abbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abc0:	3b30      	subs	r3, #48	@ 0x30
 800abc2:	2b09      	cmp	r3, #9
 800abc4:	d94b      	bls.n	800ac5e <_vfiprintf_r+0x1a2>
 800abc6:	b1b0      	cbz	r0, 800abf6 <_vfiprintf_r+0x13a>
 800abc8:	9207      	str	r2, [sp, #28]
 800abca:	e014      	b.n	800abf6 <_vfiprintf_r+0x13a>
 800abcc:	eba0 0308 	sub.w	r3, r0, r8
 800abd0:	fa09 f303 	lsl.w	r3, r9, r3
 800abd4:	4313      	orrs	r3, r2
 800abd6:	9304      	str	r3, [sp, #16]
 800abd8:	46a2      	mov	sl, r4
 800abda:	e7d2      	b.n	800ab82 <_vfiprintf_r+0xc6>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	1d19      	adds	r1, r3, #4
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	9103      	str	r1, [sp, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	bfbb      	ittet	lt
 800abe8:	425b      	neglt	r3, r3
 800abea:	f042 0202 	orrlt.w	r2, r2, #2
 800abee:	9307      	strge	r3, [sp, #28]
 800abf0:	9307      	strlt	r3, [sp, #28]
 800abf2:	bfb8      	it	lt
 800abf4:	9204      	strlt	r2, [sp, #16]
 800abf6:	7823      	ldrb	r3, [r4, #0]
 800abf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800abfa:	d10a      	bne.n	800ac12 <_vfiprintf_r+0x156>
 800abfc:	7863      	ldrb	r3, [r4, #1]
 800abfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac00:	d132      	bne.n	800ac68 <_vfiprintf_r+0x1ac>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	1d1a      	adds	r2, r3, #4
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	9203      	str	r2, [sp, #12]
 800ac0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac0e:	3402      	adds	r4, #2
 800ac10:	9305      	str	r3, [sp, #20]
 800ac12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800acdc <_vfiprintf_r+0x220>
 800ac16:	7821      	ldrb	r1, [r4, #0]
 800ac18:	2203      	movs	r2, #3
 800ac1a:	4650      	mov	r0, sl
 800ac1c:	f7f5 fab0 	bl	8000180 <memchr>
 800ac20:	b138      	cbz	r0, 800ac32 <_vfiprintf_r+0x176>
 800ac22:	9b04      	ldr	r3, [sp, #16]
 800ac24:	eba0 000a 	sub.w	r0, r0, sl
 800ac28:	2240      	movs	r2, #64	@ 0x40
 800ac2a:	4082      	lsls	r2, r0
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	3401      	adds	r4, #1
 800ac30:	9304      	str	r3, [sp, #16]
 800ac32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac36:	482a      	ldr	r0, [pc, #168]	@ (800ace0 <_vfiprintf_r+0x224>)
 800ac38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac3c:	2206      	movs	r2, #6
 800ac3e:	f7f5 fa9f 	bl	8000180 <memchr>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d03f      	beq.n	800acc6 <_vfiprintf_r+0x20a>
 800ac46:	4b27      	ldr	r3, [pc, #156]	@ (800ace4 <_vfiprintf_r+0x228>)
 800ac48:	bb1b      	cbnz	r3, 800ac92 <_vfiprintf_r+0x1d6>
 800ac4a:	9b03      	ldr	r3, [sp, #12]
 800ac4c:	3307      	adds	r3, #7
 800ac4e:	f023 0307 	bic.w	r3, r3, #7
 800ac52:	3308      	adds	r3, #8
 800ac54:	9303      	str	r3, [sp, #12]
 800ac56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac58:	443b      	add	r3, r7
 800ac5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac5c:	e76a      	b.n	800ab34 <_vfiprintf_r+0x78>
 800ac5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac62:	460c      	mov	r4, r1
 800ac64:	2001      	movs	r0, #1
 800ac66:	e7a8      	b.n	800abba <_vfiprintf_r+0xfe>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	3401      	adds	r4, #1
 800ac6c:	9305      	str	r3, [sp, #20]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	f04f 0c0a 	mov.w	ip, #10
 800ac74:	4620      	mov	r0, r4
 800ac76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac7a:	3a30      	subs	r2, #48	@ 0x30
 800ac7c:	2a09      	cmp	r2, #9
 800ac7e:	d903      	bls.n	800ac88 <_vfiprintf_r+0x1cc>
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0c6      	beq.n	800ac12 <_vfiprintf_r+0x156>
 800ac84:	9105      	str	r1, [sp, #20]
 800ac86:	e7c4      	b.n	800ac12 <_vfiprintf_r+0x156>
 800ac88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e7f0      	b.n	800ac74 <_vfiprintf_r+0x1b8>
 800ac92:	ab03      	add	r3, sp, #12
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	462a      	mov	r2, r5
 800ac98:	4b13      	ldr	r3, [pc, #76]	@ (800ace8 <_vfiprintf_r+0x22c>)
 800ac9a:	a904      	add	r1, sp, #16
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7fc faab 	bl	80071f8 <_printf_float>
 800aca2:	4607      	mov	r7, r0
 800aca4:	1c78      	adds	r0, r7, #1
 800aca6:	d1d6      	bne.n	800ac56 <_vfiprintf_r+0x19a>
 800aca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acaa:	07d9      	lsls	r1, r3, #31
 800acac:	d405      	bmi.n	800acba <_vfiprintf_r+0x1fe>
 800acae:	89ab      	ldrh	r3, [r5, #12]
 800acb0:	059a      	lsls	r2, r3, #22
 800acb2:	d402      	bmi.n	800acba <_vfiprintf_r+0x1fe>
 800acb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acb6:	f7fd fb09 	bl	80082cc <__retarget_lock_release_recursive>
 800acba:	89ab      	ldrh	r3, [r5, #12]
 800acbc:	065b      	lsls	r3, r3, #25
 800acbe:	f53f af1f 	bmi.w	800ab00 <_vfiprintf_r+0x44>
 800acc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acc4:	e71e      	b.n	800ab04 <_vfiprintf_r+0x48>
 800acc6:	ab03      	add	r3, sp, #12
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	462a      	mov	r2, r5
 800accc:	4b06      	ldr	r3, [pc, #24]	@ (800ace8 <_vfiprintf_r+0x22c>)
 800acce:	a904      	add	r1, sp, #16
 800acd0:	4630      	mov	r0, r6
 800acd2:	f7fc fd2b 	bl	800772c <_printf_i>
 800acd6:	e7e4      	b.n	800aca2 <_vfiprintf_r+0x1e6>
 800acd8:	0800bbd1 	.word	0x0800bbd1
 800acdc:	0800bbd7 	.word	0x0800bbd7
 800ace0:	0800bbdb 	.word	0x0800bbdb
 800ace4:	080071f9 	.word	0x080071f9
 800ace8:	0800aa97 	.word	0x0800aa97

0800acec <__sflush_r>:
 800acec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	0716      	lsls	r6, r2, #28
 800acf4:	4605      	mov	r5, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	d454      	bmi.n	800ada4 <__sflush_r+0xb8>
 800acfa:	684b      	ldr	r3, [r1, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	dc02      	bgt.n	800ad06 <__sflush_r+0x1a>
 800ad00:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	dd48      	ble.n	800ad98 <__sflush_r+0xac>
 800ad06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	d045      	beq.n	800ad98 <__sflush_r+0xac>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad12:	682f      	ldr	r7, [r5, #0]
 800ad14:	6a21      	ldr	r1, [r4, #32]
 800ad16:	602b      	str	r3, [r5, #0]
 800ad18:	d030      	beq.n	800ad7c <__sflush_r+0x90>
 800ad1a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	0759      	lsls	r1, r3, #29
 800ad20:	d505      	bpl.n	800ad2e <__sflush_r+0x42>
 800ad22:	6863      	ldr	r3, [r4, #4]
 800ad24:	1ad2      	subs	r2, r2, r3
 800ad26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad28:	b10b      	cbz	r3, 800ad2e <__sflush_r+0x42>
 800ad2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad2c:	1ad2      	subs	r2, r2, r3
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad32:	6a21      	ldr	r1, [r4, #32]
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b0      	blx	r6
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	d106      	bne.n	800ad4c <__sflush_r+0x60>
 800ad3e:	6829      	ldr	r1, [r5, #0]
 800ad40:	291d      	cmp	r1, #29
 800ad42:	d82b      	bhi.n	800ad9c <__sflush_r+0xb0>
 800ad44:	4a28      	ldr	r2, [pc, #160]	@ (800ade8 <__sflush_r+0xfc>)
 800ad46:	40ca      	lsrs	r2, r1
 800ad48:	07d6      	lsls	r6, r2, #31
 800ad4a:	d527      	bpl.n	800ad9c <__sflush_r+0xb0>
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	6062      	str	r2, [r4, #4]
 800ad50:	04d9      	lsls	r1, r3, #19
 800ad52:	6922      	ldr	r2, [r4, #16]
 800ad54:	6022      	str	r2, [r4, #0]
 800ad56:	d504      	bpl.n	800ad62 <__sflush_r+0x76>
 800ad58:	1c42      	adds	r2, r0, #1
 800ad5a:	d101      	bne.n	800ad60 <__sflush_r+0x74>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	b903      	cbnz	r3, 800ad62 <__sflush_r+0x76>
 800ad60:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad64:	602f      	str	r7, [r5, #0]
 800ad66:	b1b9      	cbz	r1, 800ad98 <__sflush_r+0xac>
 800ad68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad6c:	4299      	cmp	r1, r3
 800ad6e:	d002      	beq.n	800ad76 <__sflush_r+0x8a>
 800ad70:	4628      	mov	r0, r5
 800ad72:	f7fe f909 	bl	8008f88 <_free_r>
 800ad76:	2300      	movs	r3, #0
 800ad78:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad7a:	e00d      	b.n	800ad98 <__sflush_r+0xac>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4628      	mov	r0, r5
 800ad80:	47b0      	blx	r6
 800ad82:	4602      	mov	r2, r0
 800ad84:	1c50      	adds	r0, r2, #1
 800ad86:	d1c9      	bne.n	800ad1c <__sflush_r+0x30>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0c6      	beq.n	800ad1c <__sflush_r+0x30>
 800ad8e:	2b1d      	cmp	r3, #29
 800ad90:	d001      	beq.n	800ad96 <__sflush_r+0xaa>
 800ad92:	2b16      	cmp	r3, #22
 800ad94:	d11d      	bne.n	800add2 <__sflush_r+0xe6>
 800ad96:	602f      	str	r7, [r5, #0]
 800ad98:	2000      	movs	r0, #0
 800ad9a:	e021      	b.n	800ade0 <__sflush_r+0xf4>
 800ad9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ada0:	b21b      	sxth	r3, r3
 800ada2:	e01a      	b.n	800adda <__sflush_r+0xee>
 800ada4:	690f      	ldr	r7, [r1, #16]
 800ada6:	2f00      	cmp	r7, #0
 800ada8:	d0f6      	beq.n	800ad98 <__sflush_r+0xac>
 800adaa:	0793      	lsls	r3, r2, #30
 800adac:	680e      	ldr	r6, [r1, #0]
 800adae:	bf08      	it	eq
 800adb0:	694b      	ldreq	r3, [r1, #20]
 800adb2:	600f      	str	r7, [r1, #0]
 800adb4:	bf18      	it	ne
 800adb6:	2300      	movne	r3, #0
 800adb8:	1bf6      	subs	r6, r6, r7
 800adba:	608b      	str	r3, [r1, #8]
 800adbc:	2e00      	cmp	r6, #0
 800adbe:	ddeb      	ble.n	800ad98 <__sflush_r+0xac>
 800adc0:	6a21      	ldr	r1, [r4, #32]
 800adc2:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800adc6:	4633      	mov	r3, r6
 800adc8:	463a      	mov	r2, r7
 800adca:	4628      	mov	r0, r5
 800adcc:	47e0      	blx	ip
 800adce:	2800      	cmp	r0, #0
 800add0:	dc07      	bgt.n	800ade2 <__sflush_r+0xf6>
 800add2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adda:	81a3      	strh	r3, [r4, #12]
 800addc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ade0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ade2:	4407      	add	r7, r0
 800ade4:	1a36      	subs	r6, r6, r0
 800ade6:	e7e9      	b.n	800adbc <__sflush_r+0xd0>
 800ade8:	20400001 	.word	0x20400001

0800adec <_fflush_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	690b      	ldr	r3, [r1, #16]
 800adf0:	4605      	mov	r5, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	b913      	cbnz	r3, 800adfc <_fflush_r+0x10>
 800adf6:	2500      	movs	r5, #0
 800adf8:	4628      	mov	r0, r5
 800adfa:	bd38      	pop	{r3, r4, r5, pc}
 800adfc:	b118      	cbz	r0, 800ae06 <_fflush_r+0x1a>
 800adfe:	6a03      	ldr	r3, [r0, #32]
 800ae00:	b90b      	cbnz	r3, 800ae06 <_fflush_r+0x1a>
 800ae02:	f7fd f845 	bl	8007e90 <__sinit>
 800ae06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d0f3      	beq.n	800adf6 <_fflush_r+0xa>
 800ae0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae10:	07d0      	lsls	r0, r2, #31
 800ae12:	d404      	bmi.n	800ae1e <_fflush_r+0x32>
 800ae14:	0599      	lsls	r1, r3, #22
 800ae16:	d402      	bmi.n	800ae1e <_fflush_r+0x32>
 800ae18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae1a:	f7fd fa56 	bl	80082ca <__retarget_lock_acquire_recursive>
 800ae1e:	4628      	mov	r0, r5
 800ae20:	4621      	mov	r1, r4
 800ae22:	f7ff ff63 	bl	800acec <__sflush_r>
 800ae26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae28:	07da      	lsls	r2, r3, #31
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	d4e4      	bmi.n	800adf8 <_fflush_r+0xc>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	059b      	lsls	r3, r3, #22
 800ae32:	d4e1      	bmi.n	800adf8 <_fflush_r+0xc>
 800ae34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae36:	f7fd fa49 	bl	80082cc <__retarget_lock_release_recursive>
 800ae3a:	e7dd      	b.n	800adf8 <_fflush_r+0xc>

0800ae3c <__swhatbuf_r>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	460c      	mov	r4, r1
 800ae40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae44:	2900      	cmp	r1, #0
 800ae46:	b096      	sub	sp, #88	@ 0x58
 800ae48:	4615      	mov	r5, r2
 800ae4a:	461e      	mov	r6, r3
 800ae4c:	da0d      	bge.n	800ae6a <__swhatbuf_r+0x2e>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae54:	f04f 0100 	mov.w	r1, #0
 800ae58:	bf14      	ite	ne
 800ae5a:	2340      	movne	r3, #64	@ 0x40
 800ae5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae60:	2000      	movs	r0, #0
 800ae62:	6031      	str	r1, [r6, #0]
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	b016      	add	sp, #88	@ 0x58
 800ae68:	bd70      	pop	{r4, r5, r6, pc}
 800ae6a:	466a      	mov	r2, sp
 800ae6c:	f000 f874 	bl	800af58 <_fstat_r>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	dbec      	blt.n	800ae4e <__swhatbuf_r+0x12>
 800ae74:	9901      	ldr	r1, [sp, #4]
 800ae76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae7e:	4259      	negs	r1, r3
 800ae80:	4159      	adcs	r1, r3
 800ae82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae86:	e7eb      	b.n	800ae60 <__swhatbuf_r+0x24>

0800ae88 <__smakebuf_r>:
 800ae88:	898b      	ldrh	r3, [r1, #12]
 800ae8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae8c:	079d      	lsls	r5, r3, #30
 800ae8e:	4606      	mov	r6, r0
 800ae90:	460c      	mov	r4, r1
 800ae92:	d507      	bpl.n	800aea4 <__smakebuf_r+0x1c>
 800ae94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	6123      	str	r3, [r4, #16]
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	6163      	str	r3, [r4, #20]
 800aea0:	b003      	add	sp, #12
 800aea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aea4:	ab01      	add	r3, sp, #4
 800aea6:	466a      	mov	r2, sp
 800aea8:	f7ff ffc8 	bl	800ae3c <__swhatbuf_r>
 800aeac:	9f00      	ldr	r7, [sp, #0]
 800aeae:	4605      	mov	r5, r0
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7fe f8dc 	bl	8009070 <_malloc_r>
 800aeb8:	b948      	cbnz	r0, 800aece <__smakebuf_r+0x46>
 800aeba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aebe:	059a      	lsls	r2, r3, #22
 800aec0:	d4ee      	bmi.n	800aea0 <__smakebuf_r+0x18>
 800aec2:	f023 0303 	bic.w	r3, r3, #3
 800aec6:	f043 0302 	orr.w	r3, r3, #2
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	e7e2      	b.n	800ae94 <__smakebuf_r+0xc>
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	6020      	str	r0, [r4, #0]
 800aed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	9b01      	ldr	r3, [sp, #4]
 800aeda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aede:	b15b      	cbz	r3, 800aef8 <__smakebuf_r+0x70>
 800aee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aee4:	4630      	mov	r0, r6
 800aee6:	f000 f849 	bl	800af7c <_isatty_r>
 800aeea:	b128      	cbz	r0, 800aef8 <__smakebuf_r+0x70>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f023 0303 	bic.w	r3, r3, #3
 800aef2:	f043 0301 	orr.w	r3, r3, #1
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	431d      	orrs	r5, r3
 800aefc:	81a5      	strh	r5, [r4, #12]
 800aefe:	e7cf      	b.n	800aea0 <__smakebuf_r+0x18>

0800af00 <memmove>:
 800af00:	4288      	cmp	r0, r1
 800af02:	b510      	push	{r4, lr}
 800af04:	eb01 0402 	add.w	r4, r1, r2
 800af08:	d902      	bls.n	800af10 <memmove+0x10>
 800af0a:	4284      	cmp	r4, r0
 800af0c:	4623      	mov	r3, r4
 800af0e:	d807      	bhi.n	800af20 <memmove+0x20>
 800af10:	1e43      	subs	r3, r0, #1
 800af12:	42a1      	cmp	r1, r4
 800af14:	d008      	beq.n	800af28 <memmove+0x28>
 800af16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af1e:	e7f8      	b.n	800af12 <memmove+0x12>
 800af20:	4402      	add	r2, r0
 800af22:	4601      	mov	r1, r0
 800af24:	428a      	cmp	r2, r1
 800af26:	d100      	bne.n	800af2a <memmove+0x2a>
 800af28:	bd10      	pop	{r4, pc}
 800af2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af32:	e7f7      	b.n	800af24 <memmove+0x24>

0800af34 <strncmp>:
 800af34:	b510      	push	{r4, lr}
 800af36:	b16a      	cbz	r2, 800af54 <strncmp+0x20>
 800af38:	3901      	subs	r1, #1
 800af3a:	1884      	adds	r4, r0, r2
 800af3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800af44:	429a      	cmp	r2, r3
 800af46:	d103      	bne.n	800af50 <strncmp+0x1c>
 800af48:	42a0      	cmp	r0, r4
 800af4a:	d001      	beq.n	800af50 <strncmp+0x1c>
 800af4c:	2a00      	cmp	r2, #0
 800af4e:	d1f5      	bne.n	800af3c <strncmp+0x8>
 800af50:	1ad0      	subs	r0, r2, r3
 800af52:	bd10      	pop	{r4, pc}
 800af54:	4610      	mov	r0, r2
 800af56:	e7fc      	b.n	800af52 <strncmp+0x1e>

0800af58 <_fstat_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d07      	ldr	r5, [pc, #28]	@ (800af78 <_fstat_r+0x20>)
 800af5c:	2300      	movs	r3, #0
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	4611      	mov	r1, r2
 800af64:	602b      	str	r3, [r5, #0]
 800af66:	f7f6 fd8f 	bl	8001a88 <_fstat>
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	d102      	bne.n	800af74 <_fstat_r+0x1c>
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	b103      	cbz	r3, 800af74 <_fstat_r+0x1c>
 800af72:	6023      	str	r3, [r4, #0]
 800af74:	bd38      	pop	{r3, r4, r5, pc}
 800af76:	bf00      	nop
 800af78:	20000720 	.word	0x20000720

0800af7c <_isatty_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4d06      	ldr	r5, [pc, #24]	@ (800af98 <_isatty_r+0x1c>)
 800af80:	2300      	movs	r3, #0
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	f7f6 fd8d 	bl	8001aa6 <_isatty>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_isatty_r+0x1a>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_isatty_r+0x1a>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	20000720 	.word	0x20000720

0800af9c <_sbrk_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	4d06      	ldr	r5, [pc, #24]	@ (800afb8 <_sbrk_r+0x1c>)
 800afa0:	2300      	movs	r3, #0
 800afa2:	4604      	mov	r4, r0
 800afa4:	4608      	mov	r0, r1
 800afa6:	602b      	str	r3, [r5, #0]
 800afa8:	f7f6 fd94 	bl	8001ad4 <_sbrk>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d102      	bne.n	800afb6 <_sbrk_r+0x1a>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	b103      	cbz	r3, 800afb6 <_sbrk_r+0x1a>
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	20000720 	.word	0x20000720

0800afbc <memcpy>:
 800afbc:	440a      	add	r2, r1
 800afbe:	4291      	cmp	r1, r2
 800afc0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800afc4:	d100      	bne.n	800afc8 <memcpy+0xc>
 800afc6:	4770      	bx	lr
 800afc8:	b510      	push	{r4, lr}
 800afca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afd2:	4291      	cmp	r1, r2
 800afd4:	d1f9      	bne.n	800afca <memcpy+0xe>
 800afd6:	bd10      	pop	{r4, pc}

0800afd8 <nan>:
 800afd8:	4901      	ldr	r1, [pc, #4]	@ (800afe0 <nan+0x8>)
 800afda:	2000      	movs	r0, #0
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	7ff80000 	.word	0x7ff80000

0800afe4 <__assert_func>:
 800afe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afe6:	4614      	mov	r4, r2
 800afe8:	461a      	mov	r2, r3
 800afea:	4b09      	ldr	r3, [pc, #36]	@ (800b010 <__assert_func+0x2c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4605      	mov	r5, r0
 800aff0:	68d8      	ldr	r0, [r3, #12]
 800aff2:	b14c      	cbz	r4, 800b008 <__assert_func+0x24>
 800aff4:	4b07      	ldr	r3, [pc, #28]	@ (800b014 <__assert_func+0x30>)
 800aff6:	9100      	str	r1, [sp, #0]
 800aff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800affc:	4906      	ldr	r1, [pc, #24]	@ (800b018 <__assert_func+0x34>)
 800affe:	462b      	mov	r3, r5
 800b000:	f000 fba8 	bl	800b754 <fiprintf>
 800b004:	f000 fbb8 	bl	800b778 <abort>
 800b008:	4b04      	ldr	r3, [pc, #16]	@ (800b01c <__assert_func+0x38>)
 800b00a:	461c      	mov	r4, r3
 800b00c:	e7f3      	b.n	800aff6 <__assert_func+0x12>
 800b00e:	bf00      	nop
 800b010:	20000028 	.word	0x20000028
 800b014:	0800bbea 	.word	0x0800bbea
 800b018:	0800bbf7 	.word	0x0800bbf7
 800b01c:	0800bc25 	.word	0x0800bc25

0800b020 <_calloc_r>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	fba1 5402 	umull	r5, r4, r1, r2
 800b026:	b934      	cbnz	r4, 800b036 <_calloc_r+0x16>
 800b028:	4629      	mov	r1, r5
 800b02a:	f7fe f821 	bl	8009070 <_malloc_r>
 800b02e:	4606      	mov	r6, r0
 800b030:	b928      	cbnz	r0, 800b03e <_calloc_r+0x1e>
 800b032:	4630      	mov	r0, r6
 800b034:	bd70      	pop	{r4, r5, r6, pc}
 800b036:	220c      	movs	r2, #12
 800b038:	6002      	str	r2, [r0, #0]
 800b03a:	2600      	movs	r6, #0
 800b03c:	e7f9      	b.n	800b032 <_calloc_r+0x12>
 800b03e:	462a      	mov	r2, r5
 800b040:	4621      	mov	r1, r4
 800b042:	f7fd f8c5 	bl	80081d0 <memset>
 800b046:	e7f4      	b.n	800b032 <_calloc_r+0x12>

0800b048 <rshift>:
 800b048:	6903      	ldr	r3, [r0, #16]
 800b04a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b04e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b052:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b056:	f100 0414 	add.w	r4, r0, #20
 800b05a:	dd45      	ble.n	800b0e8 <rshift+0xa0>
 800b05c:	f011 011f 	ands.w	r1, r1, #31
 800b060:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b064:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b068:	d10c      	bne.n	800b084 <rshift+0x3c>
 800b06a:	f100 0710 	add.w	r7, r0, #16
 800b06e:	4629      	mov	r1, r5
 800b070:	42b1      	cmp	r1, r6
 800b072:	d334      	bcc.n	800b0de <rshift+0x96>
 800b074:	1a9b      	subs	r3, r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	1eea      	subs	r2, r5, #3
 800b07a:	4296      	cmp	r6, r2
 800b07c:	bf38      	it	cc
 800b07e:	2300      	movcc	r3, #0
 800b080:	4423      	add	r3, r4
 800b082:	e015      	b.n	800b0b0 <rshift+0x68>
 800b084:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b088:	f1c1 0820 	rsb	r8, r1, #32
 800b08c:	40cf      	lsrs	r7, r1
 800b08e:	f105 0e04 	add.w	lr, r5, #4
 800b092:	46a1      	mov	r9, r4
 800b094:	4576      	cmp	r6, lr
 800b096:	46f4      	mov	ip, lr
 800b098:	d815      	bhi.n	800b0c6 <rshift+0x7e>
 800b09a:	1a9a      	subs	r2, r3, r2
 800b09c:	0092      	lsls	r2, r2, #2
 800b09e:	3a04      	subs	r2, #4
 800b0a0:	3501      	adds	r5, #1
 800b0a2:	42ae      	cmp	r6, r5
 800b0a4:	bf38      	it	cc
 800b0a6:	2200      	movcc	r2, #0
 800b0a8:	18a3      	adds	r3, r4, r2
 800b0aa:	50a7      	str	r7, [r4, r2]
 800b0ac:	b107      	cbz	r7, 800b0b0 <rshift+0x68>
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	1b1a      	subs	r2, r3, r4
 800b0b2:	42a3      	cmp	r3, r4
 800b0b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0b8:	bf08      	it	eq
 800b0ba:	2300      	moveq	r3, #0
 800b0bc:	6102      	str	r2, [r0, #16]
 800b0be:	bf08      	it	eq
 800b0c0:	6143      	streq	r3, [r0, #20]
 800b0c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0c6:	f8dc c000 	ldr.w	ip, [ip]
 800b0ca:	fa0c fc08 	lsl.w	ip, ip, r8
 800b0ce:	ea4c 0707 	orr.w	r7, ip, r7
 800b0d2:	f849 7b04 	str.w	r7, [r9], #4
 800b0d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0da:	40cf      	lsrs	r7, r1
 800b0dc:	e7da      	b.n	800b094 <rshift+0x4c>
 800b0de:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0e2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0e6:	e7c3      	b.n	800b070 <rshift+0x28>
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	e7e1      	b.n	800b0b0 <rshift+0x68>

0800b0ec <__hexdig_fun>:
 800b0ec:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b0f0:	2b09      	cmp	r3, #9
 800b0f2:	d802      	bhi.n	800b0fa <__hexdig_fun+0xe>
 800b0f4:	3820      	subs	r0, #32
 800b0f6:	b2c0      	uxtb	r0, r0
 800b0f8:	4770      	bx	lr
 800b0fa:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b0fe:	2b05      	cmp	r3, #5
 800b100:	d801      	bhi.n	800b106 <__hexdig_fun+0x1a>
 800b102:	3847      	subs	r0, #71	@ 0x47
 800b104:	e7f7      	b.n	800b0f6 <__hexdig_fun+0xa>
 800b106:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	d801      	bhi.n	800b112 <__hexdig_fun+0x26>
 800b10e:	3827      	subs	r0, #39	@ 0x27
 800b110:	e7f1      	b.n	800b0f6 <__hexdig_fun+0xa>
 800b112:	2000      	movs	r0, #0
 800b114:	4770      	bx	lr
	...

0800b118 <__gethex>:
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	b085      	sub	sp, #20
 800b11e:	468a      	mov	sl, r1
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	680b      	ldr	r3, [r1, #0]
 800b124:	9001      	str	r0, [sp, #4]
 800b126:	4690      	mov	r8, r2
 800b128:	1c9c      	adds	r4, r3, #2
 800b12a:	46a1      	mov	r9, r4
 800b12c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b130:	2830      	cmp	r0, #48	@ 0x30
 800b132:	d0fa      	beq.n	800b12a <__gethex+0x12>
 800b134:	eba9 0303 	sub.w	r3, r9, r3
 800b138:	f1a3 0b02 	sub.w	fp, r3, #2
 800b13c:	f7ff ffd6 	bl	800b0ec <__hexdig_fun>
 800b140:	4605      	mov	r5, r0
 800b142:	2800      	cmp	r0, #0
 800b144:	d168      	bne.n	800b218 <__gethex+0x100>
 800b146:	49a0      	ldr	r1, [pc, #640]	@ (800b3c8 <__gethex+0x2b0>)
 800b148:	2201      	movs	r2, #1
 800b14a:	4648      	mov	r0, r9
 800b14c:	f7ff fef2 	bl	800af34 <strncmp>
 800b150:	4607      	mov	r7, r0
 800b152:	2800      	cmp	r0, #0
 800b154:	d167      	bne.n	800b226 <__gethex+0x10e>
 800b156:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b15a:	4626      	mov	r6, r4
 800b15c:	f7ff ffc6 	bl	800b0ec <__hexdig_fun>
 800b160:	2800      	cmp	r0, #0
 800b162:	d062      	beq.n	800b22a <__gethex+0x112>
 800b164:	4623      	mov	r3, r4
 800b166:	7818      	ldrb	r0, [r3, #0]
 800b168:	2830      	cmp	r0, #48	@ 0x30
 800b16a:	4699      	mov	r9, r3
 800b16c:	f103 0301 	add.w	r3, r3, #1
 800b170:	d0f9      	beq.n	800b166 <__gethex+0x4e>
 800b172:	f7ff ffbb 	bl	800b0ec <__hexdig_fun>
 800b176:	fab0 f580 	clz	r5, r0
 800b17a:	096d      	lsrs	r5, r5, #5
 800b17c:	f04f 0b01 	mov.w	fp, #1
 800b180:	464a      	mov	r2, r9
 800b182:	4616      	mov	r6, r2
 800b184:	3201      	adds	r2, #1
 800b186:	7830      	ldrb	r0, [r6, #0]
 800b188:	f7ff ffb0 	bl	800b0ec <__hexdig_fun>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d1f8      	bne.n	800b182 <__gethex+0x6a>
 800b190:	498d      	ldr	r1, [pc, #564]	@ (800b3c8 <__gethex+0x2b0>)
 800b192:	2201      	movs	r2, #1
 800b194:	4630      	mov	r0, r6
 800b196:	f7ff fecd 	bl	800af34 <strncmp>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d13f      	bne.n	800b21e <__gethex+0x106>
 800b19e:	b944      	cbnz	r4, 800b1b2 <__gethex+0x9a>
 800b1a0:	1c74      	adds	r4, r6, #1
 800b1a2:	4622      	mov	r2, r4
 800b1a4:	4616      	mov	r6, r2
 800b1a6:	3201      	adds	r2, #1
 800b1a8:	7830      	ldrb	r0, [r6, #0]
 800b1aa:	f7ff ff9f 	bl	800b0ec <__hexdig_fun>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d1f8      	bne.n	800b1a4 <__gethex+0x8c>
 800b1b2:	1ba4      	subs	r4, r4, r6
 800b1b4:	00a7      	lsls	r7, r4, #2
 800b1b6:	7833      	ldrb	r3, [r6, #0]
 800b1b8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b1bc:	2b50      	cmp	r3, #80	@ 0x50
 800b1be:	d13e      	bne.n	800b23e <__gethex+0x126>
 800b1c0:	7873      	ldrb	r3, [r6, #1]
 800b1c2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b1c4:	d033      	beq.n	800b22e <__gethex+0x116>
 800b1c6:	2b2d      	cmp	r3, #45	@ 0x2d
 800b1c8:	d034      	beq.n	800b234 <__gethex+0x11c>
 800b1ca:	1c71      	adds	r1, r6, #1
 800b1cc:	2400      	movs	r4, #0
 800b1ce:	7808      	ldrb	r0, [r1, #0]
 800b1d0:	f7ff ff8c 	bl	800b0ec <__hexdig_fun>
 800b1d4:	1e43      	subs	r3, r0, #1
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	2b18      	cmp	r3, #24
 800b1da:	d830      	bhi.n	800b23e <__gethex+0x126>
 800b1dc:	f1a0 0210 	sub.w	r2, r0, #16
 800b1e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1e4:	f7ff ff82 	bl	800b0ec <__hexdig_fun>
 800b1e8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b1ec:	fa5f fc8c 	uxtb.w	ip, ip
 800b1f0:	f1bc 0f18 	cmp.w	ip, #24
 800b1f4:	f04f 030a 	mov.w	r3, #10
 800b1f8:	d91e      	bls.n	800b238 <__gethex+0x120>
 800b1fa:	b104      	cbz	r4, 800b1fe <__gethex+0xe6>
 800b1fc:	4252      	negs	r2, r2
 800b1fe:	4417      	add	r7, r2
 800b200:	f8ca 1000 	str.w	r1, [sl]
 800b204:	b1ed      	cbz	r5, 800b242 <__gethex+0x12a>
 800b206:	f1bb 0f00 	cmp.w	fp, #0
 800b20a:	bf0c      	ite	eq
 800b20c:	2506      	moveq	r5, #6
 800b20e:	2500      	movne	r5, #0
 800b210:	4628      	mov	r0, r5
 800b212:	b005      	add	sp, #20
 800b214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b218:	2500      	movs	r5, #0
 800b21a:	462c      	mov	r4, r5
 800b21c:	e7b0      	b.n	800b180 <__gethex+0x68>
 800b21e:	2c00      	cmp	r4, #0
 800b220:	d1c7      	bne.n	800b1b2 <__gethex+0x9a>
 800b222:	4627      	mov	r7, r4
 800b224:	e7c7      	b.n	800b1b6 <__gethex+0x9e>
 800b226:	464e      	mov	r6, r9
 800b228:	462f      	mov	r7, r5
 800b22a:	2501      	movs	r5, #1
 800b22c:	e7c3      	b.n	800b1b6 <__gethex+0x9e>
 800b22e:	2400      	movs	r4, #0
 800b230:	1cb1      	adds	r1, r6, #2
 800b232:	e7cc      	b.n	800b1ce <__gethex+0xb6>
 800b234:	2401      	movs	r4, #1
 800b236:	e7fb      	b.n	800b230 <__gethex+0x118>
 800b238:	fb03 0002 	mla	r0, r3, r2, r0
 800b23c:	e7ce      	b.n	800b1dc <__gethex+0xc4>
 800b23e:	4631      	mov	r1, r6
 800b240:	e7de      	b.n	800b200 <__gethex+0xe8>
 800b242:	eba6 0309 	sub.w	r3, r6, r9
 800b246:	3b01      	subs	r3, #1
 800b248:	4629      	mov	r1, r5
 800b24a:	2b07      	cmp	r3, #7
 800b24c:	dc0a      	bgt.n	800b264 <__gethex+0x14c>
 800b24e:	9801      	ldr	r0, [sp, #4]
 800b250:	f7fd ff9a 	bl	8009188 <_Balloc>
 800b254:	4604      	mov	r4, r0
 800b256:	b940      	cbnz	r0, 800b26a <__gethex+0x152>
 800b258:	4b5c      	ldr	r3, [pc, #368]	@ (800b3cc <__gethex+0x2b4>)
 800b25a:	4602      	mov	r2, r0
 800b25c:	21e4      	movs	r1, #228	@ 0xe4
 800b25e:	485c      	ldr	r0, [pc, #368]	@ (800b3d0 <__gethex+0x2b8>)
 800b260:	f7ff fec0 	bl	800afe4 <__assert_func>
 800b264:	3101      	adds	r1, #1
 800b266:	105b      	asrs	r3, r3, #1
 800b268:	e7ef      	b.n	800b24a <__gethex+0x132>
 800b26a:	f100 0a14 	add.w	sl, r0, #20
 800b26e:	2300      	movs	r3, #0
 800b270:	4655      	mov	r5, sl
 800b272:	469b      	mov	fp, r3
 800b274:	45b1      	cmp	r9, r6
 800b276:	d337      	bcc.n	800b2e8 <__gethex+0x1d0>
 800b278:	f845 bb04 	str.w	fp, [r5], #4
 800b27c:	eba5 050a 	sub.w	r5, r5, sl
 800b280:	10ad      	asrs	r5, r5, #2
 800b282:	6125      	str	r5, [r4, #16]
 800b284:	4658      	mov	r0, fp
 800b286:	f7fe f871 	bl	800936c <__hi0bits>
 800b28a:	016d      	lsls	r5, r5, #5
 800b28c:	f8d8 6000 	ldr.w	r6, [r8]
 800b290:	1a2d      	subs	r5, r5, r0
 800b292:	42b5      	cmp	r5, r6
 800b294:	dd54      	ble.n	800b340 <__gethex+0x228>
 800b296:	1bad      	subs	r5, r5, r6
 800b298:	4629      	mov	r1, r5
 800b29a:	4620      	mov	r0, r4
 800b29c:	f7fe fbf3 	bl	8009a86 <__any_on>
 800b2a0:	4681      	mov	r9, r0
 800b2a2:	b178      	cbz	r0, 800b2c4 <__gethex+0x1ac>
 800b2a4:	1e6b      	subs	r3, r5, #1
 800b2a6:	1159      	asrs	r1, r3, #5
 800b2a8:	f003 021f 	and.w	r2, r3, #31
 800b2ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b2b0:	f04f 0901 	mov.w	r9, #1
 800b2b4:	fa09 f202 	lsl.w	r2, r9, r2
 800b2b8:	420a      	tst	r2, r1
 800b2ba:	d003      	beq.n	800b2c4 <__gethex+0x1ac>
 800b2bc:	454b      	cmp	r3, r9
 800b2be:	dc36      	bgt.n	800b32e <__gethex+0x216>
 800b2c0:	f04f 0902 	mov.w	r9, #2
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f7ff febe 	bl	800b048 <rshift>
 800b2cc:	442f      	add	r7, r5
 800b2ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2d2:	42bb      	cmp	r3, r7
 800b2d4:	da42      	bge.n	800b35c <__gethex+0x244>
 800b2d6:	9801      	ldr	r0, [sp, #4]
 800b2d8:	4621      	mov	r1, r4
 800b2da:	f7fd ff95 	bl	8009208 <_Bfree>
 800b2de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	25a3      	movs	r5, #163	@ 0xa3
 800b2e6:	e793      	b.n	800b210 <__gethex+0xf8>
 800b2e8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b2ec:	2a2e      	cmp	r2, #46	@ 0x2e
 800b2ee:	d012      	beq.n	800b316 <__gethex+0x1fe>
 800b2f0:	2b20      	cmp	r3, #32
 800b2f2:	d104      	bne.n	800b2fe <__gethex+0x1e6>
 800b2f4:	f845 bb04 	str.w	fp, [r5], #4
 800b2f8:	f04f 0b00 	mov.w	fp, #0
 800b2fc:	465b      	mov	r3, fp
 800b2fe:	7830      	ldrb	r0, [r6, #0]
 800b300:	9303      	str	r3, [sp, #12]
 800b302:	f7ff fef3 	bl	800b0ec <__hexdig_fun>
 800b306:	9b03      	ldr	r3, [sp, #12]
 800b308:	f000 000f 	and.w	r0, r0, #15
 800b30c:	4098      	lsls	r0, r3
 800b30e:	ea4b 0b00 	orr.w	fp, fp, r0
 800b312:	3304      	adds	r3, #4
 800b314:	e7ae      	b.n	800b274 <__gethex+0x15c>
 800b316:	45b1      	cmp	r9, r6
 800b318:	d8ea      	bhi.n	800b2f0 <__gethex+0x1d8>
 800b31a:	492b      	ldr	r1, [pc, #172]	@ (800b3c8 <__gethex+0x2b0>)
 800b31c:	9303      	str	r3, [sp, #12]
 800b31e:	2201      	movs	r2, #1
 800b320:	4630      	mov	r0, r6
 800b322:	f7ff fe07 	bl	800af34 <strncmp>
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	2800      	cmp	r0, #0
 800b32a:	d1e1      	bne.n	800b2f0 <__gethex+0x1d8>
 800b32c:	e7a2      	b.n	800b274 <__gethex+0x15c>
 800b32e:	1ea9      	subs	r1, r5, #2
 800b330:	4620      	mov	r0, r4
 800b332:	f7fe fba8 	bl	8009a86 <__any_on>
 800b336:	2800      	cmp	r0, #0
 800b338:	d0c2      	beq.n	800b2c0 <__gethex+0x1a8>
 800b33a:	f04f 0903 	mov.w	r9, #3
 800b33e:	e7c1      	b.n	800b2c4 <__gethex+0x1ac>
 800b340:	da09      	bge.n	800b356 <__gethex+0x23e>
 800b342:	1b75      	subs	r5, r6, r5
 800b344:	4621      	mov	r1, r4
 800b346:	9801      	ldr	r0, [sp, #4]
 800b348:	462a      	mov	r2, r5
 800b34a:	f7fe f96d 	bl	8009628 <__lshift>
 800b34e:	1b7f      	subs	r7, r7, r5
 800b350:	4604      	mov	r4, r0
 800b352:	f100 0a14 	add.w	sl, r0, #20
 800b356:	f04f 0900 	mov.w	r9, #0
 800b35a:	e7b8      	b.n	800b2ce <__gethex+0x1b6>
 800b35c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b360:	42bd      	cmp	r5, r7
 800b362:	dd6f      	ble.n	800b444 <__gethex+0x32c>
 800b364:	1bed      	subs	r5, r5, r7
 800b366:	42ae      	cmp	r6, r5
 800b368:	dc34      	bgt.n	800b3d4 <__gethex+0x2bc>
 800b36a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d022      	beq.n	800b3b8 <__gethex+0x2a0>
 800b372:	2b03      	cmp	r3, #3
 800b374:	d024      	beq.n	800b3c0 <__gethex+0x2a8>
 800b376:	2b01      	cmp	r3, #1
 800b378:	d115      	bne.n	800b3a6 <__gethex+0x28e>
 800b37a:	42ae      	cmp	r6, r5
 800b37c:	d113      	bne.n	800b3a6 <__gethex+0x28e>
 800b37e:	2e01      	cmp	r6, #1
 800b380:	d10b      	bne.n	800b39a <__gethex+0x282>
 800b382:	9a02      	ldr	r2, [sp, #8]
 800b384:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	2301      	movs	r3, #1
 800b38c:	6123      	str	r3, [r4, #16]
 800b38e:	f8ca 3000 	str.w	r3, [sl]
 800b392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b394:	2562      	movs	r5, #98	@ 0x62
 800b396:	601c      	str	r4, [r3, #0]
 800b398:	e73a      	b.n	800b210 <__gethex+0xf8>
 800b39a:	1e71      	subs	r1, r6, #1
 800b39c:	4620      	mov	r0, r4
 800b39e:	f7fe fb72 	bl	8009a86 <__any_on>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d1ed      	bne.n	800b382 <__gethex+0x26a>
 800b3a6:	9801      	ldr	r0, [sp, #4]
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	f7fd ff2d 	bl	8009208 <_Bfree>
 800b3ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	6013      	str	r3, [r2, #0]
 800b3b4:	2550      	movs	r5, #80	@ 0x50
 800b3b6:	e72b      	b.n	800b210 <__gethex+0xf8>
 800b3b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1f3      	bne.n	800b3a6 <__gethex+0x28e>
 800b3be:	e7e0      	b.n	800b382 <__gethex+0x26a>
 800b3c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1dd      	bne.n	800b382 <__gethex+0x26a>
 800b3c6:	e7ee      	b.n	800b3a6 <__gethex+0x28e>
 800b3c8:	0800bbcf 	.word	0x0800bbcf
 800b3cc:	0800bb65 	.word	0x0800bb65
 800b3d0:	0800bc26 	.word	0x0800bc26
 800b3d4:	1e6f      	subs	r7, r5, #1
 800b3d6:	f1b9 0f00 	cmp.w	r9, #0
 800b3da:	d130      	bne.n	800b43e <__gethex+0x326>
 800b3dc:	b127      	cbz	r7, 800b3e8 <__gethex+0x2d0>
 800b3de:	4639      	mov	r1, r7
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f7fe fb50 	bl	8009a86 <__any_on>
 800b3e6:	4681      	mov	r9, r0
 800b3e8:	117a      	asrs	r2, r7, #5
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b3f0:	f007 071f 	and.w	r7, r7, #31
 800b3f4:	40bb      	lsls	r3, r7
 800b3f6:	4213      	tst	r3, r2
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	bf18      	it	ne
 800b3fe:	f049 0902 	orrne.w	r9, r9, #2
 800b402:	f7ff fe21 	bl	800b048 <rshift>
 800b406:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b40a:	1b76      	subs	r6, r6, r5
 800b40c:	2502      	movs	r5, #2
 800b40e:	f1b9 0f00 	cmp.w	r9, #0
 800b412:	d047      	beq.n	800b4a4 <__gethex+0x38c>
 800b414:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d015      	beq.n	800b448 <__gethex+0x330>
 800b41c:	2b03      	cmp	r3, #3
 800b41e:	d017      	beq.n	800b450 <__gethex+0x338>
 800b420:	2b01      	cmp	r3, #1
 800b422:	d109      	bne.n	800b438 <__gethex+0x320>
 800b424:	f019 0f02 	tst.w	r9, #2
 800b428:	d006      	beq.n	800b438 <__gethex+0x320>
 800b42a:	f8da 3000 	ldr.w	r3, [sl]
 800b42e:	ea49 0903 	orr.w	r9, r9, r3
 800b432:	f019 0f01 	tst.w	r9, #1
 800b436:	d10e      	bne.n	800b456 <__gethex+0x33e>
 800b438:	f045 0510 	orr.w	r5, r5, #16
 800b43c:	e032      	b.n	800b4a4 <__gethex+0x38c>
 800b43e:	f04f 0901 	mov.w	r9, #1
 800b442:	e7d1      	b.n	800b3e8 <__gethex+0x2d0>
 800b444:	2501      	movs	r5, #1
 800b446:	e7e2      	b.n	800b40e <__gethex+0x2f6>
 800b448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b44a:	f1c3 0301 	rsb	r3, r3, #1
 800b44e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0f0      	beq.n	800b438 <__gethex+0x320>
 800b456:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b45a:	f104 0314 	add.w	r3, r4, #20
 800b45e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b462:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b466:	f04f 0c00 	mov.w	ip, #0
 800b46a:	4618      	mov	r0, r3
 800b46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b470:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b474:	d01b      	beq.n	800b4ae <__gethex+0x396>
 800b476:	3201      	adds	r2, #1
 800b478:	6002      	str	r2, [r0, #0]
 800b47a:	2d02      	cmp	r5, #2
 800b47c:	f104 0314 	add.w	r3, r4, #20
 800b480:	d13c      	bne.n	800b4fc <__gethex+0x3e4>
 800b482:	f8d8 2000 	ldr.w	r2, [r8]
 800b486:	3a01      	subs	r2, #1
 800b488:	42b2      	cmp	r2, r6
 800b48a:	d109      	bne.n	800b4a0 <__gethex+0x388>
 800b48c:	1171      	asrs	r1, r6, #5
 800b48e:	2201      	movs	r2, #1
 800b490:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b494:	f006 061f 	and.w	r6, r6, #31
 800b498:	fa02 f606 	lsl.w	r6, r2, r6
 800b49c:	421e      	tst	r6, r3
 800b49e:	d13a      	bne.n	800b516 <__gethex+0x3fe>
 800b4a0:	f045 0520 	orr.w	r5, r5, #32
 800b4a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4a6:	601c      	str	r4, [r3, #0]
 800b4a8:	9b02      	ldr	r3, [sp, #8]
 800b4aa:	601f      	str	r7, [r3, #0]
 800b4ac:	e6b0      	b.n	800b210 <__gethex+0xf8>
 800b4ae:	4299      	cmp	r1, r3
 800b4b0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4b4:	d8d9      	bhi.n	800b46a <__gethex+0x352>
 800b4b6:	68a3      	ldr	r3, [r4, #8]
 800b4b8:	459b      	cmp	fp, r3
 800b4ba:	db17      	blt.n	800b4ec <__gethex+0x3d4>
 800b4bc:	6861      	ldr	r1, [r4, #4]
 800b4be:	9801      	ldr	r0, [sp, #4]
 800b4c0:	3101      	adds	r1, #1
 800b4c2:	f7fd fe61 	bl	8009188 <_Balloc>
 800b4c6:	4681      	mov	r9, r0
 800b4c8:	b918      	cbnz	r0, 800b4d2 <__gethex+0x3ba>
 800b4ca:	4b1a      	ldr	r3, [pc, #104]	@ (800b534 <__gethex+0x41c>)
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	2184      	movs	r1, #132	@ 0x84
 800b4d0:	e6c5      	b.n	800b25e <__gethex+0x146>
 800b4d2:	6922      	ldr	r2, [r4, #16]
 800b4d4:	3202      	adds	r2, #2
 800b4d6:	f104 010c 	add.w	r1, r4, #12
 800b4da:	0092      	lsls	r2, r2, #2
 800b4dc:	300c      	adds	r0, #12
 800b4de:	f7ff fd6d 	bl	800afbc <memcpy>
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	9801      	ldr	r0, [sp, #4]
 800b4e6:	f7fd fe8f 	bl	8009208 <_Bfree>
 800b4ea:	464c      	mov	r4, r9
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4f4:	6122      	str	r2, [r4, #16]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	615a      	str	r2, [r3, #20]
 800b4fa:	e7be      	b.n	800b47a <__gethex+0x362>
 800b4fc:	6922      	ldr	r2, [r4, #16]
 800b4fe:	455a      	cmp	r2, fp
 800b500:	dd0b      	ble.n	800b51a <__gethex+0x402>
 800b502:	2101      	movs	r1, #1
 800b504:	4620      	mov	r0, r4
 800b506:	f7ff fd9f 	bl	800b048 <rshift>
 800b50a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b50e:	3701      	adds	r7, #1
 800b510:	42bb      	cmp	r3, r7
 800b512:	f6ff aee0 	blt.w	800b2d6 <__gethex+0x1be>
 800b516:	2501      	movs	r5, #1
 800b518:	e7c2      	b.n	800b4a0 <__gethex+0x388>
 800b51a:	f016 061f 	ands.w	r6, r6, #31
 800b51e:	d0fa      	beq.n	800b516 <__gethex+0x3fe>
 800b520:	4453      	add	r3, sl
 800b522:	f1c6 0620 	rsb	r6, r6, #32
 800b526:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b52a:	f7fd ff1f 	bl	800936c <__hi0bits>
 800b52e:	42b0      	cmp	r0, r6
 800b530:	dbe7      	blt.n	800b502 <__gethex+0x3ea>
 800b532:	e7f0      	b.n	800b516 <__gethex+0x3fe>
 800b534:	0800bb65 	.word	0x0800bb65

0800b538 <L_shift>:
 800b538:	f1c2 0208 	rsb	r2, r2, #8
 800b53c:	0092      	lsls	r2, r2, #2
 800b53e:	b570      	push	{r4, r5, r6, lr}
 800b540:	f1c2 0620 	rsb	r6, r2, #32
 800b544:	6843      	ldr	r3, [r0, #4]
 800b546:	6804      	ldr	r4, [r0, #0]
 800b548:	fa03 f506 	lsl.w	r5, r3, r6
 800b54c:	432c      	orrs	r4, r5
 800b54e:	40d3      	lsrs	r3, r2
 800b550:	6004      	str	r4, [r0, #0]
 800b552:	f840 3f04 	str.w	r3, [r0, #4]!
 800b556:	4288      	cmp	r0, r1
 800b558:	d3f4      	bcc.n	800b544 <L_shift+0xc>
 800b55a:	bd70      	pop	{r4, r5, r6, pc}

0800b55c <__match>:
 800b55c:	b530      	push	{r4, r5, lr}
 800b55e:	6803      	ldr	r3, [r0, #0]
 800b560:	3301      	adds	r3, #1
 800b562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b566:	b914      	cbnz	r4, 800b56e <__match+0x12>
 800b568:	6003      	str	r3, [r0, #0]
 800b56a:	2001      	movs	r0, #1
 800b56c:	bd30      	pop	{r4, r5, pc}
 800b56e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b572:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b576:	2d19      	cmp	r5, #25
 800b578:	bf98      	it	ls
 800b57a:	3220      	addls	r2, #32
 800b57c:	42a2      	cmp	r2, r4
 800b57e:	d0f0      	beq.n	800b562 <__match+0x6>
 800b580:	2000      	movs	r0, #0
 800b582:	e7f3      	b.n	800b56c <__match+0x10>

0800b584 <__hexnan>:
 800b584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	680b      	ldr	r3, [r1, #0]
 800b58a:	6801      	ldr	r1, [r0, #0]
 800b58c:	115e      	asrs	r6, r3, #5
 800b58e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b592:	f013 031f 	ands.w	r3, r3, #31
 800b596:	b087      	sub	sp, #28
 800b598:	bf18      	it	ne
 800b59a:	3604      	addne	r6, #4
 800b59c:	2500      	movs	r5, #0
 800b59e:	1f37      	subs	r7, r6, #4
 800b5a0:	4682      	mov	sl, r0
 800b5a2:	4690      	mov	r8, r2
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5aa:	46b9      	mov	r9, r7
 800b5ac:	463c      	mov	r4, r7
 800b5ae:	9502      	str	r5, [sp, #8]
 800b5b0:	46ab      	mov	fp, r5
 800b5b2:	784a      	ldrb	r2, [r1, #1]
 800b5b4:	1c4b      	adds	r3, r1, #1
 800b5b6:	9303      	str	r3, [sp, #12]
 800b5b8:	b342      	cbz	r2, 800b60c <__hexnan+0x88>
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	9105      	str	r1, [sp, #20]
 800b5be:	9204      	str	r2, [sp, #16]
 800b5c0:	f7ff fd94 	bl	800b0ec <__hexdig_fun>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d151      	bne.n	800b66c <__hexnan+0xe8>
 800b5c8:	9a04      	ldr	r2, [sp, #16]
 800b5ca:	9905      	ldr	r1, [sp, #20]
 800b5cc:	2a20      	cmp	r2, #32
 800b5ce:	d818      	bhi.n	800b602 <__hexnan+0x7e>
 800b5d0:	9b02      	ldr	r3, [sp, #8]
 800b5d2:	459b      	cmp	fp, r3
 800b5d4:	dd13      	ble.n	800b5fe <__hexnan+0x7a>
 800b5d6:	454c      	cmp	r4, r9
 800b5d8:	d206      	bcs.n	800b5e8 <__hexnan+0x64>
 800b5da:	2d07      	cmp	r5, #7
 800b5dc:	dc04      	bgt.n	800b5e8 <__hexnan+0x64>
 800b5de:	462a      	mov	r2, r5
 800b5e0:	4649      	mov	r1, r9
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f7ff ffa8 	bl	800b538 <L_shift>
 800b5e8:	4544      	cmp	r4, r8
 800b5ea:	d952      	bls.n	800b692 <__hexnan+0x10e>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f1a4 0904 	sub.w	r9, r4, #4
 800b5f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5f6:	f8cd b008 	str.w	fp, [sp, #8]
 800b5fa:	464c      	mov	r4, r9
 800b5fc:	461d      	mov	r5, r3
 800b5fe:	9903      	ldr	r1, [sp, #12]
 800b600:	e7d7      	b.n	800b5b2 <__hexnan+0x2e>
 800b602:	2a29      	cmp	r2, #41	@ 0x29
 800b604:	d157      	bne.n	800b6b6 <__hexnan+0x132>
 800b606:	3102      	adds	r1, #2
 800b608:	f8ca 1000 	str.w	r1, [sl]
 800b60c:	f1bb 0f00 	cmp.w	fp, #0
 800b610:	d051      	beq.n	800b6b6 <__hexnan+0x132>
 800b612:	454c      	cmp	r4, r9
 800b614:	d206      	bcs.n	800b624 <__hexnan+0xa0>
 800b616:	2d07      	cmp	r5, #7
 800b618:	dc04      	bgt.n	800b624 <__hexnan+0xa0>
 800b61a:	462a      	mov	r2, r5
 800b61c:	4649      	mov	r1, r9
 800b61e:	4620      	mov	r0, r4
 800b620:	f7ff ff8a 	bl	800b538 <L_shift>
 800b624:	4544      	cmp	r4, r8
 800b626:	d936      	bls.n	800b696 <__hexnan+0x112>
 800b628:	f1a8 0204 	sub.w	r2, r8, #4
 800b62c:	4623      	mov	r3, r4
 800b62e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b632:	f842 1f04 	str.w	r1, [r2, #4]!
 800b636:	429f      	cmp	r7, r3
 800b638:	d2f9      	bcs.n	800b62e <__hexnan+0xaa>
 800b63a:	1b3b      	subs	r3, r7, r4
 800b63c:	f023 0303 	bic.w	r3, r3, #3
 800b640:	3304      	adds	r3, #4
 800b642:	3401      	adds	r4, #1
 800b644:	3e03      	subs	r6, #3
 800b646:	42b4      	cmp	r4, r6
 800b648:	bf88      	it	hi
 800b64a:	2304      	movhi	r3, #4
 800b64c:	4443      	add	r3, r8
 800b64e:	2200      	movs	r2, #0
 800b650:	f843 2b04 	str.w	r2, [r3], #4
 800b654:	429f      	cmp	r7, r3
 800b656:	d2fb      	bcs.n	800b650 <__hexnan+0xcc>
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	b91b      	cbnz	r3, 800b664 <__hexnan+0xe0>
 800b65c:	4547      	cmp	r7, r8
 800b65e:	d128      	bne.n	800b6b2 <__hexnan+0x12e>
 800b660:	2301      	movs	r3, #1
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	2005      	movs	r0, #5
 800b666:	b007      	add	sp, #28
 800b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66c:	3501      	adds	r5, #1
 800b66e:	2d08      	cmp	r5, #8
 800b670:	f10b 0b01 	add.w	fp, fp, #1
 800b674:	dd06      	ble.n	800b684 <__hexnan+0x100>
 800b676:	4544      	cmp	r4, r8
 800b678:	d9c1      	bls.n	800b5fe <__hexnan+0x7a>
 800b67a:	2300      	movs	r3, #0
 800b67c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b680:	2501      	movs	r5, #1
 800b682:	3c04      	subs	r4, #4
 800b684:	6822      	ldr	r2, [r4, #0]
 800b686:	f000 000f 	and.w	r0, r0, #15
 800b68a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b68e:	6020      	str	r0, [r4, #0]
 800b690:	e7b5      	b.n	800b5fe <__hexnan+0x7a>
 800b692:	2508      	movs	r5, #8
 800b694:	e7b3      	b.n	800b5fe <__hexnan+0x7a>
 800b696:	9b01      	ldr	r3, [sp, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0dd      	beq.n	800b658 <__hexnan+0xd4>
 800b69c:	f1c3 0320 	rsb	r3, r3, #32
 800b6a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b6a4:	40da      	lsrs	r2, r3
 800b6a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	f846 3c04 	str.w	r3, [r6, #-4]
 800b6b0:	e7d2      	b.n	800b658 <__hexnan+0xd4>
 800b6b2:	3f04      	subs	r7, #4
 800b6b4:	e7d0      	b.n	800b658 <__hexnan+0xd4>
 800b6b6:	2004      	movs	r0, #4
 800b6b8:	e7d5      	b.n	800b666 <__hexnan+0xe2>

0800b6ba <__ascii_mbtowc>:
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	b901      	cbnz	r1, 800b6c0 <__ascii_mbtowc+0x6>
 800b6be:	a901      	add	r1, sp, #4
 800b6c0:	b142      	cbz	r2, 800b6d4 <__ascii_mbtowc+0x1a>
 800b6c2:	b14b      	cbz	r3, 800b6d8 <__ascii_mbtowc+0x1e>
 800b6c4:	7813      	ldrb	r3, [r2, #0]
 800b6c6:	600b      	str	r3, [r1, #0]
 800b6c8:	7812      	ldrb	r2, [r2, #0]
 800b6ca:	1e10      	subs	r0, r2, #0
 800b6cc:	bf18      	it	ne
 800b6ce:	2001      	movne	r0, #1
 800b6d0:	b002      	add	sp, #8
 800b6d2:	4770      	bx	lr
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	e7fb      	b.n	800b6d0 <__ascii_mbtowc+0x16>
 800b6d8:	f06f 0001 	mvn.w	r0, #1
 800b6dc:	e7f8      	b.n	800b6d0 <__ascii_mbtowc+0x16>

0800b6de <_realloc_r>:
 800b6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e2:	4607      	mov	r7, r0
 800b6e4:	4614      	mov	r4, r2
 800b6e6:	460d      	mov	r5, r1
 800b6e8:	b921      	cbnz	r1, 800b6f4 <_realloc_r+0x16>
 800b6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	f7fd bcbe 	b.w	8009070 <_malloc_r>
 800b6f4:	b92a      	cbnz	r2, 800b702 <_realloc_r+0x24>
 800b6f6:	f7fd fc47 	bl	8008f88 <_free_r>
 800b6fa:	4625      	mov	r5, r4
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b702:	f000 f840 	bl	800b786 <_malloc_usable_size_r>
 800b706:	4284      	cmp	r4, r0
 800b708:	4606      	mov	r6, r0
 800b70a:	d802      	bhi.n	800b712 <_realloc_r+0x34>
 800b70c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b710:	d8f4      	bhi.n	800b6fc <_realloc_r+0x1e>
 800b712:	4621      	mov	r1, r4
 800b714:	4638      	mov	r0, r7
 800b716:	f7fd fcab 	bl	8009070 <_malloc_r>
 800b71a:	4680      	mov	r8, r0
 800b71c:	b908      	cbnz	r0, 800b722 <_realloc_r+0x44>
 800b71e:	4645      	mov	r5, r8
 800b720:	e7ec      	b.n	800b6fc <_realloc_r+0x1e>
 800b722:	42b4      	cmp	r4, r6
 800b724:	4622      	mov	r2, r4
 800b726:	4629      	mov	r1, r5
 800b728:	bf28      	it	cs
 800b72a:	4632      	movcs	r2, r6
 800b72c:	f7ff fc46 	bl	800afbc <memcpy>
 800b730:	4629      	mov	r1, r5
 800b732:	4638      	mov	r0, r7
 800b734:	f7fd fc28 	bl	8008f88 <_free_r>
 800b738:	e7f1      	b.n	800b71e <_realloc_r+0x40>

0800b73a <__ascii_wctomb>:
 800b73a:	4603      	mov	r3, r0
 800b73c:	4608      	mov	r0, r1
 800b73e:	b141      	cbz	r1, 800b752 <__ascii_wctomb+0x18>
 800b740:	2aff      	cmp	r2, #255	@ 0xff
 800b742:	d904      	bls.n	800b74e <__ascii_wctomb+0x14>
 800b744:	228a      	movs	r2, #138	@ 0x8a
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b74c:	4770      	bx	lr
 800b74e:	700a      	strb	r2, [r1, #0]
 800b750:	2001      	movs	r0, #1
 800b752:	4770      	bx	lr

0800b754 <fiprintf>:
 800b754:	b40e      	push	{r1, r2, r3}
 800b756:	b503      	push	{r0, r1, lr}
 800b758:	4601      	mov	r1, r0
 800b75a:	ab03      	add	r3, sp, #12
 800b75c:	4805      	ldr	r0, [pc, #20]	@ (800b774 <fiprintf+0x20>)
 800b75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b762:	6800      	ldr	r0, [r0, #0]
 800b764:	9301      	str	r3, [sp, #4]
 800b766:	f7ff f9a9 	bl	800aabc <_vfiprintf_r>
 800b76a:	b002      	add	sp, #8
 800b76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b770:	b003      	add	sp, #12
 800b772:	4770      	bx	lr
 800b774:	20000028 	.word	0x20000028

0800b778 <abort>:
 800b778:	b508      	push	{r3, lr}
 800b77a:	2006      	movs	r0, #6
 800b77c:	f000 f834 	bl	800b7e8 <raise>
 800b780:	2001      	movs	r0, #1
 800b782:	f7f6 f94e 	bl	8001a22 <_exit>

0800b786 <_malloc_usable_size_r>:
 800b786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b78a:	1f18      	subs	r0, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfbc      	itt	lt
 800b790:	580b      	ldrlt	r3, [r1, r0]
 800b792:	18c0      	addlt	r0, r0, r3
 800b794:	4770      	bx	lr

0800b796 <_raise_r>:
 800b796:	291f      	cmp	r1, #31
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4605      	mov	r5, r0
 800b79c:	460c      	mov	r4, r1
 800b79e:	d904      	bls.n	800b7aa <_raise_r+0x14>
 800b7a0:	2316      	movs	r3, #22
 800b7a2:	6003      	str	r3, [r0, #0]
 800b7a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
 800b7aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7ac:	b112      	cbz	r2, 800b7b4 <_raise_r+0x1e>
 800b7ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7b2:	b94b      	cbnz	r3, 800b7c8 <_raise_r+0x32>
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f000 f831 	bl	800b81c <_getpid_r>
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	4601      	mov	r1, r0
 800b7be:	4628      	mov	r0, r5
 800b7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7c4:	f000 b818 	b.w	800b7f8 <_kill_r>
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d00a      	beq.n	800b7e2 <_raise_r+0x4c>
 800b7cc:	1c59      	adds	r1, r3, #1
 800b7ce:	d103      	bne.n	800b7d8 <_raise_r+0x42>
 800b7d0:	2316      	movs	r3, #22
 800b7d2:	6003      	str	r3, [r0, #0]
 800b7d4:	2001      	movs	r0, #1
 800b7d6:	e7e7      	b.n	800b7a8 <_raise_r+0x12>
 800b7d8:	2100      	movs	r1, #0
 800b7da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7de:	4620      	mov	r0, r4
 800b7e0:	4798      	blx	r3
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	e7e0      	b.n	800b7a8 <_raise_r+0x12>
	...

0800b7e8 <raise>:
 800b7e8:	4b02      	ldr	r3, [pc, #8]	@ (800b7f4 <raise+0xc>)
 800b7ea:	4601      	mov	r1, r0
 800b7ec:	6818      	ldr	r0, [r3, #0]
 800b7ee:	f7ff bfd2 	b.w	800b796 <_raise_r>
 800b7f2:	bf00      	nop
 800b7f4:	20000028 	.word	0x20000028

0800b7f8 <_kill_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4d07      	ldr	r5, [pc, #28]	@ (800b818 <_kill_r+0x20>)
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4604      	mov	r4, r0
 800b800:	4608      	mov	r0, r1
 800b802:	4611      	mov	r1, r2
 800b804:	602b      	str	r3, [r5, #0]
 800b806:	f7f6 f8fc 	bl	8001a02 <_kill>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	d102      	bne.n	800b814 <_kill_r+0x1c>
 800b80e:	682b      	ldr	r3, [r5, #0]
 800b810:	b103      	cbz	r3, 800b814 <_kill_r+0x1c>
 800b812:	6023      	str	r3, [r4, #0]
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	bf00      	nop
 800b818:	20000720 	.word	0x20000720

0800b81c <_getpid_r>:
 800b81c:	f7f6 b8ea 	b.w	80019f4 <_getpid>

0800b820 <_init>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	bf00      	nop
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr

0800b82c <_fini>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr
