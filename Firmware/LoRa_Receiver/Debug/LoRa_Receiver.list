
LoRa_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5f8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  0800a738  0800a738  0000b738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae9c  0800ae9c  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ae9c  0800ae9c  0000be9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aea4  0800aea4  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aea4  0800aea4  0000bea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aea8  0800aea8  0000bea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800aeac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001e0  0800b08c  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800b08c  0000c500  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ff2  00000000  00000000  0000c20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f0  00000000  00000000  000211fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  000246f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001013  00000000  00000000  00025c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6f9  00000000  00000000  00026c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141cd  00000000  00000000  00046364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b89c6  00000000  00000000  0005a531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112ef7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d18  00000000  00000000  00112f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00119c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a720 	.word	0x0800a720

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800a720 	.word	0x0800a720

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ea6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	@ 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	@ 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001104:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001108:	f000 b9be 	b.w	8001488 <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f83c 	bl	8001190 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	2200      	movs	r2, #0
 8001128:	2300      	movs	r3, #0
 800112a:	4604      	mov	r4, r0
 800112c:	460d      	mov	r5, r1
 800112e:	f7ff fcad 	bl	8000a8c <__aeabi_dcmplt>
 8001132:	b928      	cbnz	r0, 8001140 <__aeabi_d2lz+0x1c>
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800113c:	f000 b80a 	b.w	8001154 <__aeabi_d2ulz>
 8001140:	4620      	mov	r0, r4
 8001142:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001146:	f000 f805 	bl	8001154 <__aeabi_d2ulz>
 800114a:	4240      	negs	r0, r0
 800114c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001150:	bd38      	pop	{r3, r4, r5, pc}
 8001152:	bf00      	nop

08001154 <__aeabi_d2ulz>:
 8001154:	b5d0      	push	{r4, r6, r7, lr}
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__aeabi_d2ulz+0x34>)
 8001158:	2200      	movs	r2, #0
 800115a:	4606      	mov	r6, r0
 800115c:	460f      	mov	r7, r1
 800115e:	f7ff fa23 	bl	80005a8 <__aeabi_dmul>
 8001162:	f7ff fcf9 	bl	8000b58 <__aeabi_d2uiz>
 8001166:	4604      	mov	r4, r0
 8001168:	f7ff f9a4 	bl	80004b4 <__aeabi_ui2d>
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <__aeabi_d2ulz+0x38>)
 800116e:	2200      	movs	r2, #0
 8001170:	f7ff fa1a 	bl	80005a8 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4630      	mov	r0, r6
 800117a:	4639      	mov	r1, r7
 800117c:	f7ff f85c 	bl	8000238 <__aeabi_dsub>
 8001180:	f7ff fcea 	bl	8000b58 <__aeabi_d2uiz>
 8001184:	4621      	mov	r1, r4
 8001186:	bdd0      	pop	{r4, r6, r7, pc}
 8001188:	3df00000 	.word	0x3df00000
 800118c:	41f00000 	.word	0x41f00000

08001190 <__udivmoddi4>:
 8001190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001194:	9d08      	ldr	r5, [sp, #32]
 8001196:	468e      	mov	lr, r1
 8001198:	4604      	mov	r4, r0
 800119a:	4688      	mov	r8, r1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d14a      	bne.n	8001236 <__udivmoddi4+0xa6>
 80011a0:	428a      	cmp	r2, r1
 80011a2:	4617      	mov	r7, r2
 80011a4:	d962      	bls.n	800126c <__udivmoddi4+0xdc>
 80011a6:	fab2 f682 	clz	r6, r2
 80011aa:	b14e      	cbz	r6, 80011c0 <__udivmoddi4+0x30>
 80011ac:	f1c6 0320 	rsb	r3, r6, #32
 80011b0:	fa01 f806 	lsl.w	r8, r1, r6
 80011b4:	fa20 f303 	lsr.w	r3, r0, r3
 80011b8:	40b7      	lsls	r7, r6
 80011ba:	ea43 0808 	orr.w	r8, r3, r8
 80011be:	40b4      	lsls	r4, r6
 80011c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011c4:	fa1f fc87 	uxth.w	ip, r7
 80011c8:	fbb8 f1fe 	udiv	r1, r8, lr
 80011cc:	0c23      	lsrs	r3, r4, #16
 80011ce:	fb0e 8811 	mls	r8, lr, r1, r8
 80011d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011d6:	fb01 f20c 	mul.w	r2, r1, ip
 80011da:	429a      	cmp	r2, r3
 80011dc:	d909      	bls.n	80011f2 <__udivmoddi4+0x62>
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80011e4:	f080 80ea 	bcs.w	80013bc <__udivmoddi4+0x22c>
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f240 80e7 	bls.w	80013bc <__udivmoddi4+0x22c>
 80011ee:	3902      	subs	r1, #2
 80011f0:	443b      	add	r3, r7
 80011f2:	1a9a      	subs	r2, r3, r2
 80011f4:	b2a3      	uxth	r3, r4
 80011f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80011fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80011fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001202:	fb00 fc0c 	mul.w	ip, r0, ip
 8001206:	459c      	cmp	ip, r3
 8001208:	d909      	bls.n	800121e <__udivmoddi4+0x8e>
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001210:	f080 80d6 	bcs.w	80013c0 <__udivmoddi4+0x230>
 8001214:	459c      	cmp	ip, r3
 8001216:	f240 80d3 	bls.w	80013c0 <__udivmoddi4+0x230>
 800121a:	443b      	add	r3, r7
 800121c:	3802      	subs	r0, #2
 800121e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001222:	eba3 030c 	sub.w	r3, r3, ip
 8001226:	2100      	movs	r1, #0
 8001228:	b11d      	cbz	r5, 8001232 <__udivmoddi4+0xa2>
 800122a:	40f3      	lsrs	r3, r6
 800122c:	2200      	movs	r2, #0
 800122e:	e9c5 3200 	strd	r3, r2, [r5]
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	428b      	cmp	r3, r1
 8001238:	d905      	bls.n	8001246 <__udivmoddi4+0xb6>
 800123a:	b10d      	cbz	r5, 8001240 <__udivmoddi4+0xb0>
 800123c:	e9c5 0100 	strd	r0, r1, [r5]
 8001240:	2100      	movs	r1, #0
 8001242:	4608      	mov	r0, r1
 8001244:	e7f5      	b.n	8001232 <__udivmoddi4+0xa2>
 8001246:	fab3 f183 	clz	r1, r3
 800124a:	2900      	cmp	r1, #0
 800124c:	d146      	bne.n	80012dc <__udivmoddi4+0x14c>
 800124e:	4573      	cmp	r3, lr
 8001250:	d302      	bcc.n	8001258 <__udivmoddi4+0xc8>
 8001252:	4282      	cmp	r2, r0
 8001254:	f200 8105 	bhi.w	8001462 <__udivmoddi4+0x2d2>
 8001258:	1a84      	subs	r4, r0, r2
 800125a:	eb6e 0203 	sbc.w	r2, lr, r3
 800125e:	2001      	movs	r0, #1
 8001260:	4690      	mov	r8, r2
 8001262:	2d00      	cmp	r5, #0
 8001264:	d0e5      	beq.n	8001232 <__udivmoddi4+0xa2>
 8001266:	e9c5 4800 	strd	r4, r8, [r5]
 800126a:	e7e2      	b.n	8001232 <__udivmoddi4+0xa2>
 800126c:	2a00      	cmp	r2, #0
 800126e:	f000 8090 	beq.w	8001392 <__udivmoddi4+0x202>
 8001272:	fab2 f682 	clz	r6, r2
 8001276:	2e00      	cmp	r6, #0
 8001278:	f040 80a4 	bne.w	80013c4 <__udivmoddi4+0x234>
 800127c:	1a8a      	subs	r2, r1, r2
 800127e:	0c03      	lsrs	r3, r0, #16
 8001280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001284:	b280      	uxth	r0, r0
 8001286:	b2bc      	uxth	r4, r7
 8001288:	2101      	movs	r1, #1
 800128a:	fbb2 fcfe 	udiv	ip, r2, lr
 800128e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001296:	fb04 f20c 	mul.w	r2, r4, ip
 800129a:	429a      	cmp	r2, r3
 800129c:	d907      	bls.n	80012ae <__udivmoddi4+0x11e>
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80012a4:	d202      	bcs.n	80012ac <__udivmoddi4+0x11c>
 80012a6:	429a      	cmp	r2, r3
 80012a8:	f200 80e0 	bhi.w	800146c <__udivmoddi4+0x2dc>
 80012ac:	46c4      	mov	ip, r8
 80012ae:	1a9b      	subs	r3, r3, r2
 80012b0:	fbb3 f2fe 	udiv	r2, r3, lr
 80012b4:	fb0e 3312 	mls	r3, lr, r2, r3
 80012b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012bc:	fb02 f404 	mul.w	r4, r2, r4
 80012c0:	429c      	cmp	r4, r3
 80012c2:	d907      	bls.n	80012d4 <__udivmoddi4+0x144>
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80012ca:	d202      	bcs.n	80012d2 <__udivmoddi4+0x142>
 80012cc:	429c      	cmp	r4, r3
 80012ce:	f200 80ca 	bhi.w	8001466 <__udivmoddi4+0x2d6>
 80012d2:	4602      	mov	r2, r0
 80012d4:	1b1b      	subs	r3, r3, r4
 80012d6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80012da:	e7a5      	b.n	8001228 <__udivmoddi4+0x98>
 80012dc:	f1c1 0620 	rsb	r6, r1, #32
 80012e0:	408b      	lsls	r3, r1
 80012e2:	fa22 f706 	lsr.w	r7, r2, r6
 80012e6:	431f      	orrs	r7, r3
 80012e8:	fa0e f401 	lsl.w	r4, lr, r1
 80012ec:	fa20 f306 	lsr.w	r3, r0, r6
 80012f0:	fa2e fe06 	lsr.w	lr, lr, r6
 80012f4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80012f8:	4323      	orrs	r3, r4
 80012fa:	fa00 f801 	lsl.w	r8, r0, r1
 80012fe:	fa1f fc87 	uxth.w	ip, r7
 8001302:	fbbe f0f9 	udiv	r0, lr, r9
 8001306:	0c1c      	lsrs	r4, r3, #16
 8001308:	fb09 ee10 	mls	lr, r9, r0, lr
 800130c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001310:	fb00 fe0c 	mul.w	lr, r0, ip
 8001314:	45a6      	cmp	lr, r4
 8001316:	fa02 f201 	lsl.w	r2, r2, r1
 800131a:	d909      	bls.n	8001330 <__udivmoddi4+0x1a0>
 800131c:	193c      	adds	r4, r7, r4
 800131e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8001322:	f080 809c 	bcs.w	800145e <__udivmoddi4+0x2ce>
 8001326:	45a6      	cmp	lr, r4
 8001328:	f240 8099 	bls.w	800145e <__udivmoddi4+0x2ce>
 800132c:	3802      	subs	r0, #2
 800132e:	443c      	add	r4, r7
 8001330:	eba4 040e 	sub.w	r4, r4, lr
 8001334:	fa1f fe83 	uxth.w	lr, r3
 8001338:	fbb4 f3f9 	udiv	r3, r4, r9
 800133c:	fb09 4413 	mls	r4, r9, r3, r4
 8001340:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001344:	fb03 fc0c 	mul.w	ip, r3, ip
 8001348:	45a4      	cmp	ip, r4
 800134a:	d908      	bls.n	800135e <__udivmoddi4+0x1ce>
 800134c:	193c      	adds	r4, r7, r4
 800134e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8001352:	f080 8082 	bcs.w	800145a <__udivmoddi4+0x2ca>
 8001356:	45a4      	cmp	ip, r4
 8001358:	d97f      	bls.n	800145a <__udivmoddi4+0x2ca>
 800135a:	3b02      	subs	r3, #2
 800135c:	443c      	add	r4, r7
 800135e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001362:	eba4 040c 	sub.w	r4, r4, ip
 8001366:	fba0 ec02 	umull	lr, ip, r0, r2
 800136a:	4564      	cmp	r4, ip
 800136c:	4673      	mov	r3, lr
 800136e:	46e1      	mov	r9, ip
 8001370:	d362      	bcc.n	8001438 <__udivmoddi4+0x2a8>
 8001372:	d05f      	beq.n	8001434 <__udivmoddi4+0x2a4>
 8001374:	b15d      	cbz	r5, 800138e <__udivmoddi4+0x1fe>
 8001376:	ebb8 0203 	subs.w	r2, r8, r3
 800137a:	eb64 0409 	sbc.w	r4, r4, r9
 800137e:	fa04 f606 	lsl.w	r6, r4, r6
 8001382:	fa22 f301 	lsr.w	r3, r2, r1
 8001386:	431e      	orrs	r6, r3
 8001388:	40cc      	lsrs	r4, r1
 800138a:	e9c5 6400 	strd	r6, r4, [r5]
 800138e:	2100      	movs	r1, #0
 8001390:	e74f      	b.n	8001232 <__udivmoddi4+0xa2>
 8001392:	fbb1 fcf2 	udiv	ip, r1, r2
 8001396:	0c01      	lsrs	r1, r0, #16
 8001398:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800139c:	b280      	uxth	r0, r0
 800139e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013a2:	463b      	mov	r3, r7
 80013a4:	4638      	mov	r0, r7
 80013a6:	463c      	mov	r4, r7
 80013a8:	46b8      	mov	r8, r7
 80013aa:	46be      	mov	lr, r7
 80013ac:	2620      	movs	r6, #32
 80013ae:	fbb1 f1f7 	udiv	r1, r1, r7
 80013b2:	eba2 0208 	sub.w	r2, r2, r8
 80013b6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013ba:	e766      	b.n	800128a <__udivmoddi4+0xfa>
 80013bc:	4601      	mov	r1, r0
 80013be:	e718      	b.n	80011f2 <__udivmoddi4+0x62>
 80013c0:	4610      	mov	r0, r2
 80013c2:	e72c      	b.n	800121e <__udivmoddi4+0x8e>
 80013c4:	f1c6 0220 	rsb	r2, r6, #32
 80013c8:	fa2e f302 	lsr.w	r3, lr, r2
 80013cc:	40b7      	lsls	r7, r6
 80013ce:	40b1      	lsls	r1, r6
 80013d0:	fa20 f202 	lsr.w	r2, r0, r2
 80013d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d8:	430a      	orrs	r2, r1
 80013da:	fbb3 f8fe 	udiv	r8, r3, lr
 80013de:	b2bc      	uxth	r4, r7
 80013e0:	fb0e 3318 	mls	r3, lr, r8, r3
 80013e4:	0c11      	lsrs	r1, r2, #16
 80013e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80013ea:	fb08 f904 	mul.w	r9, r8, r4
 80013ee:	40b0      	lsls	r0, r6
 80013f0:	4589      	cmp	r9, r1
 80013f2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80013f6:	b280      	uxth	r0, r0
 80013f8:	d93e      	bls.n	8001478 <__udivmoddi4+0x2e8>
 80013fa:	1879      	adds	r1, r7, r1
 80013fc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001400:	d201      	bcs.n	8001406 <__udivmoddi4+0x276>
 8001402:	4589      	cmp	r9, r1
 8001404:	d81f      	bhi.n	8001446 <__udivmoddi4+0x2b6>
 8001406:	eba1 0109 	sub.w	r1, r1, r9
 800140a:	fbb1 f9fe 	udiv	r9, r1, lr
 800140e:	fb09 f804 	mul.w	r8, r9, r4
 8001412:	fb0e 1119 	mls	r1, lr, r9, r1
 8001416:	b292      	uxth	r2, r2
 8001418:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800141c:	4542      	cmp	r2, r8
 800141e:	d229      	bcs.n	8001474 <__udivmoddi4+0x2e4>
 8001420:	18ba      	adds	r2, r7, r2
 8001422:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001426:	d2c4      	bcs.n	80013b2 <__udivmoddi4+0x222>
 8001428:	4542      	cmp	r2, r8
 800142a:	d2c2      	bcs.n	80013b2 <__udivmoddi4+0x222>
 800142c:	f1a9 0102 	sub.w	r1, r9, #2
 8001430:	443a      	add	r2, r7
 8001432:	e7be      	b.n	80013b2 <__udivmoddi4+0x222>
 8001434:	45f0      	cmp	r8, lr
 8001436:	d29d      	bcs.n	8001374 <__udivmoddi4+0x1e4>
 8001438:	ebbe 0302 	subs.w	r3, lr, r2
 800143c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001440:	3801      	subs	r0, #1
 8001442:	46e1      	mov	r9, ip
 8001444:	e796      	b.n	8001374 <__udivmoddi4+0x1e4>
 8001446:	eba7 0909 	sub.w	r9, r7, r9
 800144a:	4449      	add	r1, r9
 800144c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001450:	fbb1 f9fe 	udiv	r9, r1, lr
 8001454:	fb09 f804 	mul.w	r8, r9, r4
 8001458:	e7db      	b.n	8001412 <__udivmoddi4+0x282>
 800145a:	4673      	mov	r3, lr
 800145c:	e77f      	b.n	800135e <__udivmoddi4+0x1ce>
 800145e:	4650      	mov	r0, sl
 8001460:	e766      	b.n	8001330 <__udivmoddi4+0x1a0>
 8001462:	4608      	mov	r0, r1
 8001464:	e6fd      	b.n	8001262 <__udivmoddi4+0xd2>
 8001466:	443b      	add	r3, r7
 8001468:	3a02      	subs	r2, #2
 800146a:	e733      	b.n	80012d4 <__udivmoddi4+0x144>
 800146c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001470:	443b      	add	r3, r7
 8001472:	e71c      	b.n	80012ae <__udivmoddi4+0x11e>
 8001474:	4649      	mov	r1, r9
 8001476:	e79c      	b.n	80013b2 <__udivmoddi4+0x222>
 8001478:	eba1 0109 	sub.w	r1, r1, r9
 800147c:	46c4      	mov	ip, r8
 800147e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001482:	fb09 f804 	mul.w	r8, r9, r4
 8001486:	e7c4      	b.n	8001412 <__udivmoddi4+0x282>

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001498:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800149a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014b0:	68fb      	ldr	r3, [r7, #12]
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d0:	2004      	movs	r0, #4
 80014d2:	f7ff ffdb 	bl	800148c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2002      	movs	r0, #2
 80014d8:	f7ff ffd8 	bl	800148c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff ffd5 	bl	800148c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e8:	4813      	ldr	r0, [pc, #76]	@ (8001538 <MX_GPIO_Init+0x7c>)
 80014ea:	f000 ffe9 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2138      	movs	r1, #56	@ 0x38
 80014f2:	4812      	ldr	r0, [pc, #72]	@ (800153c <MX_GPIO_Init+0x80>)
 80014f4:	f000 ffe4 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80014f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	480a      	ldr	r0, [pc, #40]	@ (8001538 <MX_GPIO_Init+0x7c>)
 8001510:	f000 fe76 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8001514:	2338      	movs	r3, #56	@ 0x38
 8001516:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_GPIO_Init+0x80>)
 800152a:	f000 fe69 	bl	8002200 <HAL_GPIO_Init>

}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800

08001540 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001550:	f023 0218 	bic.w	r2, r3, #24
 8001554:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4313      	orrs	r3, r2
 800155c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <_write>:


/* USER CODE BEGIN 0 */
// Redireciona a saída do printf para a USART2 (nossa porta de debug para o PC)
int _write(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	b29a      	uxth	r2, r3
 800157c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	4804      	ldr	r0, [pc, #16]	@ (8001594 <_write+0x28>)
 8001584:	f003 f85b 	bl	800463e <HAL_UART_Transmit>
  return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000030c 	.word	0x2000030c

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800159c:	f000 fcae 	bl	8001efc <HAL_Init>
  SystemClock_Config();
 80015a0:	f000 f822 	bl	80015e8 <SystemClock_Config>
  MX_GPIO_Init();
 80015a4:	f7ff ff8a 	bl	80014bc <MX_GPIO_Init>
  MX_USART2_UART_Init();  // Apenas a UART de Debug para o PC
 80015a8:	f000 fb02 	bl	8001bb0 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 80015ac:	f000 fa00 	bl	80019b0 <MX_SUBGHZ_Init>
  // MX_DMA_Init(); // DMA foi desativado para a Placa 2

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f000 fbd1 	bl	8001d58 <BSP_LED_Init>

  printf("\r\n--- Placa 2: Estacao Base LoRa Ativa ---\r\n");
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <main+0x44>)
 80015b8:	f005 fc88 	bl	8006ecc <puts>

  Radio_Init();
 80015bc:	f000 f86c 	bl	8001698 <Radio_Init>
  printf("Radio LoRa inicializado em modo de recepcao.\r\n");
 80015c0:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <main+0x48>)
 80015c2:	f005 fc83 	bl	8006ecc <puts>

  printf("Pronto para receber pacotes LoRa...\r\n");
 80015c6:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <main+0x4c>)
 80015c8:	f005 fc80 	bl	8006ecc <puts>
  // Coloca o rádio em modo de recepção contínua
  SUBGRF_SetRx(0);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f003 fedf 	bl	8005390 <SUBGRF_SetRx>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // A mágica acontece nos callbacks de interrupção do rádio.
    // O processador pode dormir para economizar energia.
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80015d2:	2101      	movs	r1, #1
 80015d4:	2000      	movs	r0, #0
 80015d6:	f000 ffb1 	bl	800253c <HAL_PWR_EnterSLEEPMode>
 80015da:	e7fa      	b.n	80015d2 <main+0x3a>
 80015dc:	0800a738 	.word	0x0800a738
 80015e0:	0800a764 	.word	0x0800a764
 80015e4:	0800a794 	.word	0x0800a794

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b09a      	sub	sp, #104	@ 0x68
 80015ec:	af00      	add	r7, sp, #0
  // ... (Esta função é gerada pelo CubeMX e deve ser mantida como está) ...
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2248      	movs	r2, #72	@ 0x48
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 fd6a 	bl	80070d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]
  HAL_PWR_EnableBkUpAccess();
 800160e:	f000 ff87 	bl	8002520 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff ff94 	bl	8001540 <LL_RCC_LSE_SetDriveCapability>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <SystemClock_Config+0xac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001620:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <SystemClock_Config+0xac>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <SystemClock_Config+0xac>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001634:	2324      	movs	r3, #36	@ 0x24
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001638:	2381      	movs	r3, #129	@ 0x81
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800163c:	2301      	movs	r3, #1
 800163e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001640:	2300      	movs	r3, #0
 8001642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001644:	23b0      	movs	r3, #176	@ 0xb0
 8001646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001648:	2300      	movs	r3, #0
 800164a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	4618      	mov	r0, r3
 8001652:	f001 faaf 	bl	8002bb4 <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800165c:	f000 f94e 	bl	80018fc <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001660:	234f      	movs	r3, #79	@ 0x4f
 8001662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2102      	movs	r1, #2
 800167c:	4618      	mov	r0, r3
 800167e:	f001 fe1b 	bl	80032b8 <HAL_RCC_ClockConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001688:	f000 f938 	bl	80018fc <Error_Handler>
  }
}
 800168c:	bf00      	nop
 800168e:	3768      	adds	r7, #104	@ 0x68
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	58000400 	.word	0x58000400

08001698 <Radio_Init>:

/* USER CODE BEGIN 4 */
// --- Nossas funções de apoio ---

void Radio_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0
    SUBGRF_Init(RadioOnDioIrq);
 800169e:	481f      	ldr	r0, [pc, #124]	@ (800171c <Radio_Init+0x84>)
 80016a0:	f003 fdb0 	bl	8005204 <SUBGRF_Init>

    SUBGRF_SetStandby(STDBY_RC);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f003 fe57 	bl	8005358 <SUBGRF_SetStandby>
    SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f003 ffea 	bl	8005684 <SUBGRF_SetPacketType>
    SUBGRF_SetRfFrequency(RF_FREQUENCY);
 80016b0:	481b      	ldr	r0, [pc, #108]	@ (8001720 <Radio_Init+0x88>)
 80016b2:	f003 ffa1 	bl	80055f8 <SUBGRF_SetRfFrequency>
    SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 80016b6:	2016      	movs	r0, #22
 80016b8:	f004 fb70 	bl	8005d9c <SUBGRF_SetRfTxPower>

    ModulationParams_t modulationParams;
    modulationParams.PacketType = PACKET_TYPE_LORA;
 80016bc:	2301      	movs	r3, #1
 80016be:	753b      	strb	r3, [r7, #20]
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 80016c0:	230a      	movs	r3, #10
 80016c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 80016c6:	2304      	movs	r3, #4
 80016c8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    modulationParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 80016cc:	2304      	movs	r3, #4
 80016ce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    SUBGRF_SetModulationParams(&modulationParams);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 f8c5 	bl	800586c <SUBGRF_SetModulationParams>

    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 80016e2:	2301      	movs	r3, #1
 80016e4:	703b      	strb	r3, [r7, #0]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 80016e6:	2308      	movs	r3, #8
 80016e8:	81fb      	strh	r3, [r7, #14]
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH; // Mudar para CABEÇALHO FIXO
 80016ea:	2301      	movs	r3, #1
 80016ec:	743b      	strb	r3, [r7, #16]
    packetParams.Params.LoRa.PayloadLength = PAYLOAD_SIZE;        // Definir o tamanho exato
 80016ee:	2314      	movs	r3, #20
 80016f0:	747b      	strb	r3, [r7, #17]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	74bb      	strb	r3, [r7, #18]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	74fb      	strb	r3, [r7, #19]
    SUBGRF_SetPacketParams(&packetParams);
 80016fa:	463b      	mov	r3, r7
 80016fc:	4618      	mov	r0, r3
 80016fe:	f004 f983 	bl	8005a08 <SUBGRF_SetPacketParams>

    // Configura as interrupções do rádio para eventos de RECEPÇÃO
    SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 8001702:	2300      	movs	r3, #0
 8001704:	2200      	movs	r2, #0
 8001706:	f240 2142 	movw	r1, #578	@ 0x242
 800170a:	f240 2042 	movw	r0, #578	@ 0x242
 800170e:	f003 ff17 	bl	8005540 <SUBGRF_SetDioIrqParams>
                           IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
                           IRQ_RADIO_NONE, IRQ_RADIO_NONE);
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	@ 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	08001725 	.word	0x08001725
 8001720:	3689cac0 	.word	0x3689cac0

08001724 <RadioOnDioIrq>:

void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq)
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001734:	d031      	beq.n	800179a <RadioOnDioIrq+0x76>
 8001736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800173a:	dc32      	bgt.n	80017a2 <RadioOnDioIrq+0x7e>
 800173c:	2b02      	cmp	r3, #2
 800173e:	d002      	beq.n	8001746 <RadioOnDioIrq+0x22>
 8001740:	2b40      	cmp	r3, #64	@ 0x40
 8001742:	d023      	beq.n	800178c <RadioOnDioIrq+0x68>
        case IRQ_RX_TX_TIMEOUT:
            // Se houver um timeout de recepção, simplesmente volta a escutar
            SUBGRF_SetRx(0);
            break;
        default:
            break;
 8001744:	e02d      	b.n	80017a2 <RadioOnDioIrq+0x7e>
                uint8_t received_size = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	77fb      	strb	r3, [r7, #31]
                BSP_LED_Toggle(LED_GREEN); // Pisca o LED para indicar recepção
 800174a:	2001      	movs	r0, #1
 800174c:	f000 fb3e 	bl	8001dcc <BSP_LED_Toggle>
                SUBGRF_GetPayload(LoRa_rx_buffer, &received_size, 255);
 8001750:	f107 031f 	add.w	r3, r7, #31
 8001754:	22ff      	movs	r2, #255	@ 0xff
 8001756:	4619      	mov	r1, r3
 8001758:	4814      	ldr	r0, [pc, #80]	@ (80017ac <RadioOnDioIrq+0x88>)
 800175a:	f003 fd9b 	bl	8005294 <SUBGRF_GetPayload>
                SUBGRF_GetPacketStatus(&packetStatus);
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4618      	mov	r0, r3
 8001764:	f004 fa18 	bl	8005b98 <SUBGRF_GetPacketStatus>
                printf("Pacote LoRa Recebido! RSSI: %d dBm, SNR: %d\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 8001768:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800176c:	4619      	mov	r1, r3
 800176e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001772:	461a      	mov	r2, r3
 8001774:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <RadioOnDioIrq+0x8c>)
 8001776:	f005 fb41 	bl	8006dfc <iprintf>
                ProcessAndPrintPayload(LoRa_rx_buffer, received_size);
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	4619      	mov	r1, r3
 800177e:	480b      	ldr	r0, [pc, #44]	@ (80017ac <RadioOnDioIrq+0x88>)
 8001780:	f000 f81a 	bl	80017b8 <ProcessAndPrintPayload>
                SUBGRF_SetRx(0);
 8001784:	2000      	movs	r0, #0
 8001786:	f003 fe03 	bl	8005390 <SUBGRF_SetRx>
            break;
 800178a:	e00b      	b.n	80017a4 <RadioOnDioIrq+0x80>
            printf("WARN: Erro de CRC no pacote LoRa.\r\n");
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <RadioOnDioIrq+0x90>)
 800178e:	f005 fb9d 	bl	8006ecc <puts>
            SUBGRF_SetRx(0); // Volta a escutar
 8001792:	2000      	movs	r0, #0
 8001794:	f003 fdfc 	bl	8005390 <SUBGRF_SetRx>
            break;
 8001798:	e004      	b.n	80017a4 <RadioOnDioIrq+0x80>
            SUBGRF_SetRx(0);
 800179a:	2000      	movs	r0, #0
 800179c:	f003 fdf8 	bl	8005390 <SUBGRF_SetRx>
            break;
 80017a0:	e000      	b.n	80017a4 <RadioOnDioIrq+0x80>
            break;
 80017a2:	bf00      	nop
    }
}
 80017a4:	bf00      	nop
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200001fc 	.word	0x200001fc
 80017b0:	0800a7bc 	.word	0x0800a7bc
 80017b4:	0800a7ec 	.word	0x0800a7ec

080017b8 <ProcessAndPrintPayload>:

void ProcessAndPrintPayload(uint8_t* buffer, uint8_t size) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
  if (size != PAYLOAD_SIZE) {
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	2b14      	cmp	r3, #20
 80017c8:	d006      	beq.n	80017d8 <ProcessAndPrintPayload+0x20>
      printf("ERRO: Pacote com tamanho inesperado! Recebido: %d, Esperado: %d\r\n", size, (int)PAYLOAD_SIZE);
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	2214      	movs	r2, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	483c      	ldr	r0, [pc, #240]	@ (80018c4 <ProcessAndPrintPayload+0x10c>)
 80017d2:	f005 fb13 	bl	8006dfc <iprintf>
      return;
 80017d6:	e072      	b.n	80018be <ProcessAndPrintPayload+0x106>
  }

  LoRaPayload_t* telemetry = (LoRaPayload_t*)buffer;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	61fb      	str	r3, [r7, #28]

  float latitude = telemetry->latitude_raw / 10000000.0f;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fae3 	bl	8000dac <__aeabi_i2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4937      	ldr	r1, [pc, #220]	@ (80018c8 <ProcessAndPrintPayload+0x110>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fbe6 	bl	8000fbc <__aeabi_fdiv>
 80017f0:	4603      	mov	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]
  float longitude = telemetry->longitude_raw / 10000000.0f;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fad7 	bl	8000dac <__aeabi_i2f>
 80017fe:	4603      	mov	r3, r0
 8001800:	4931      	ldr	r1, [pc, #196]	@ (80018c8 <ProcessAndPrintPayload+0x110>)
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fbda 	bl	8000fbc <__aeabi_fdiv>
 8001808:	4603      	mov	r3, r0
 800180a:	617b      	str	r3, [r7, #20]
  float altitude_m = telemetry->altitude_raw / 1000.0f;
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff facb 	bl	8000dac <__aeabi_i2f>
 8001816:	4603      	mov	r3, r0
 8001818:	492c      	ldr	r1, [pc, #176]	@ (80018cc <ProcessAndPrintPayload+0x114>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fbce 	bl	8000fbc <__aeabi_fdiv>
 8001820:	4603      	mov	r3, r0
 8001822:	613b      	str	r3, [r7, #16]

  bool gpsFixOK = (telemetry->sats_and_fix >> 7) & 0x01;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	7cdb      	ldrb	r3, [r3, #19]
 8001828:	09db      	lsrs	r3, r3, #7
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
  uint8_t satCount = telemetry->sats_and_fix & 0x7F;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	7cdb      	ldrb	r3, [r3, #19]
 800183e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001842:	73bb      	strb	r3, [r7, #14]

  printf("\r\n---[ PACOTE DE TELEMETRIA DECODIFICADO ]---\r\n");
 8001844:	4822      	ldr	r0, [pc, #136]	@ (80018d0 <ProcessAndPrintPayload+0x118>)
 8001846:	f005 fb41 	bl	8006ecc <puts>
  printf("  ID do Pacote:   %lu\r\n", telemetry->packet_id);
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4619      	mov	r1, r3
 8001850:	4820      	ldr	r0, [pc, #128]	@ (80018d4 <ProcessAndPrintPayload+0x11c>)
 8001852:	f005 fad3 	bl	8006dfc <iprintf>
  printf("  Latitude:       %f\r\n", latitude);
 8001856:	69b8      	ldr	r0, [r7, #24]
 8001858:	f7fe fe4e 	bl	80004f8 <__aeabi_f2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	481d      	ldr	r0, [pc, #116]	@ (80018d8 <ProcessAndPrintPayload+0x120>)
 8001862:	f005 facb 	bl	8006dfc <iprintf>
  printf("  Longitude:      %f\r\n", longitude);
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7fe fe46 	bl	80004f8 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	481a      	ldr	r0, [pc, #104]	@ (80018dc <ProcessAndPrintPayload+0x124>)
 8001872:	f005 fac3 	bl	8006dfc <iprintf>
  printf("  Altitude:       %.2f m\r\n", altitude_m);
 8001876:	6938      	ldr	r0, [r7, #16]
 8001878:	f7fe fe3e 	bl	80004f8 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <ProcessAndPrintPayload+0x128>)
 8001882:	f005 fabb 	bl	8006dfc <iprintf>
  printf("  Voltagem:       %u mV\r\n", telemetry->voltage_mv);
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	8a1b      	ldrh	r3, [r3, #16]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4619      	mov	r1, r3
 800188e:	4815      	ldr	r0, [pc, #84]	@ (80018e4 <ProcessAndPrintPayload+0x12c>)
 8001890:	f005 fab4 	bl	8006dfc <iprintf>
  printf("  Temp. Radio:    %d C\r\n", telemetry->radio_temp_c);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800189a:	4619      	mov	r1, r3
 800189c:	4812      	ldr	r0, [pc, #72]	@ (80018e8 <ProcessAndPrintPayload+0x130>)
 800189e:	f005 faad 	bl	8006dfc <iprintf>
  printf("  Status GPS:     %s (Satelites: %u)\r\n", gpsFixOK ? "FIX OK" : "NO FIX", satCount);
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <ProcessAndPrintPayload+0xf4>
 80018a8:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <ProcessAndPrintPayload+0x134>)
 80018aa:	e000      	b.n	80018ae <ProcessAndPrintPayload+0xf6>
 80018ac:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <ProcessAndPrintPayload+0x138>)
 80018ae:	7bba      	ldrb	r2, [r7, #14]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4810      	ldr	r0, [pc, #64]	@ (80018f4 <ProcessAndPrintPayload+0x13c>)
 80018b4:	f005 faa2 	bl	8006dfc <iprintf>
  printf("-------------------------------------------\r\n\r\n");
 80018b8:	480f      	ldr	r0, [pc, #60]	@ (80018f8 <ProcessAndPrintPayload+0x140>)
 80018ba:	f005 fb07 	bl	8006ecc <puts>
}
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	0800a810 	.word	0x0800a810
 80018c8:	4b189680 	.word	0x4b189680
 80018cc:	447a0000 	.word	0x447a0000
 80018d0:	0800a854 	.word	0x0800a854
 80018d4:	0800a884 	.word	0x0800a884
 80018d8:	0800a89c 	.word	0x0800a89c
 80018dc:	0800a8b4 	.word	0x0800a8b4
 80018e0:	0800a8cc 	.word	0x0800a8cc
 80018e4:	0800a8e8 	.word	0x0800a8e8
 80018e8:	0800a904 	.word	0x0800a904
 80018ec:	0800a920 	.word	0x0800a920
 80018f0:	0800a928 	.word	0x0800a928
 80018f4:	0800a930 	.word	0x0800a930
 80018f8:	0800a958 	.word	0x0800a958

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <Error_Handler+0x8>

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <NMI_Handler+0x4>

0800191c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <MemManage_Handler+0x4>

0800192c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <UsageFault_Handler+0x4>

0800193c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 fb24 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001972:	f002 fc44 	bl	80041fe <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200002fc 	.word	0x200002fc

08001980 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800198e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4313      	orrs	r3, r2
 8001996:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019a4:	68fb      	ldr	r3, [r7, #12]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <MX_SUBGHZ_Init+0x20>)
 80019b6:	2208      	movs	r2, #8
 80019b8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <MX_SUBGHZ_Init+0x20>)
 80019bc:	f002 f9f0 	bl	8003da0 <HAL_SUBGHZ_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80019c6:	f7ff ff99 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200002fc 	.word	0x200002fc

080019d4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff ffcf 	bl	8001980 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2032      	movs	r0, #50	@ 0x32
 80019e8:	f000 fbd5 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80019ec:	2032      	movs	r0, #50	@ 0x32
 80019ee:	f000 fbec 	bl	80021ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <_kill>:

int _kill(int pid, int sig)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a12:	f005 fbaf 	bl	8007174 <__errno>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2216      	movs	r2, #22
 8001a1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_exit>:

void _exit (int status)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ffe7 	bl	8001a08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a3a:	bf00      	nop
 8001a3c:	e7fd      	b.n	8001a3a <_exit+0x12>

08001a3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e00a      	b.n	8001a66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a50:	f3af 8000 	nop.w
 8001a54:	4601      	mov	r1, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	60ba      	str	r2, [r7, #8]
 8001a5c:	b2ca      	uxtb	r2, r1
 8001a5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbf0      	blt.n	8001a50 <_read+0x12>
  }

  return len;
 8001a6e:	687b      	ldr	r3, [r7, #4]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <_isatty>:

int _isatty(int file)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f005 fb34 	bl	8007174 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20010000 	.word	0x20010000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20000308 	.word	0x20000308
 8001b40:	20000500 	.word	0x20000500

08001b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <LL_AHB2_GRP1_EnableClock>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b74:	68fb      	ldr	r3, [r7, #12]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <LL_APB1_GRP1_EnableClock>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bb6:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <MX_USART2_UART_Init+0x94>)
 8001bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bba:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bda:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be0:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf8:	4811      	ldr	r0, [pc, #68]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001bfa:	f002 fcd0 	bl	800459e <HAL_UART_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c04:	f7ff fe7a 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001c0c:	f003 fa07 	bl	800501e <HAL_UARTEx_SetTxFifoThreshold>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c16:	f7ff fe71 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4808      	ldr	r0, [pc, #32]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001c1e:	f003 fa3c 	bl	800509a <HAL_UARTEx_SetRxFifoThreshold>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c28:	f7ff fe68 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c2c:	4804      	ldr	r0, [pc, #16]	@ (8001c40 <MX_USART2_UART_Init+0x90>)
 8001c2e:	f003 f9be 	bl	8004fae <HAL_UARTEx_DisableFifoMode>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c38:	f7ff fe60 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000030c 	.word	0x2000030c
 8001c44:	40004400 	.word	0x40004400

08001c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b096      	sub	sp, #88	@ 0x58
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2238      	movs	r2, #56	@ 0x38
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 fa31 	bl	80070d0 <memset>
  if(uartHandle->Instance==USART2)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <HAL_UART_MspInit+0x88>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d126      	bne.n	8001cc6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c7c:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001c80:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 fed6 	bl	8003a38 <HAL_RCCEx_PeriphCLKConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c92:	f7ff fe33 	bl	80018fc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c96:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001c9a:	f7ff ff71 	bl	8001b80 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff ff56 	bl	8001b50 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc2:	f000 fa9d 	bl	8002200 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3758      	adds	r7, #88	@ 0x58
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40004400 	.word	0x40004400

08001cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd4:	480d      	ldr	r0, [pc, #52]	@ (8001d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cd8:	f7ff ff34 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	@ (8001d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <LoopForever+0xe>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d20 <LoopForever+0x16>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d02:	f005 fa3d 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d06:	f7ff fc47 	bl	8001598 <main>

08001d0a <LoopForever>:

LoopForever:
    b LoopForever
 8001d0a:	e7fe      	b.n	8001d0a <LoopForever>
  ldr   r0, =_estack
 8001d0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d18:	0800aeac 	.word	0x0800aeac
  ldr r2, =_sbss
 8001d1c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d20:	20000500 	.word	0x20000500

08001d24 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC_IRQHandler>

08001d26 <LL_AHB2_GRP1_EnableClock>:
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4013      	ands	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001d72:	2002      	movs	r0, #2
 8001d74:	f7ff ffd7 	bl	8001d26 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	4a12      	ldr	r2, [pc, #72]	@ (8001dc4 <BSP_LED_Init+0x6c>)
 8001d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d80:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc8 <BSP_LED_Init+0x70>)
 8001d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d96:	f107 020c 	add.w	r2, r7, #12
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fa2f 	bl	8002200 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <BSP_LED_Init+0x70>)
 8001da6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <BSP_LED_Init+0x6c>)
 8001dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001db2:	2200      	movs	r2, #0
 8001db4:	4619      	mov	r1, r3
 8001db6:	f000 fb83 	bl	80024c0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	0800aa44 	.word	0x0800aa44
 8001dc8:	20000004 	.word	0x20000004

08001dcc <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <BSP_LED_Toggle+0x2c>)
 8001dda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4906      	ldr	r1, [pc, #24]	@ (8001dfc <BSP_LED_Toggle+0x30>)
 8001de2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f000 fb80 	bl	80024ee <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	0800aa44 	.word	0x0800aa44

08001e00 <LL_AHB2_GRP1_EnableClock>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e24:	68fb      	ldr	r3, [r7, #12]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001e44:	2004      	movs	r0, #4
 8001e46:	f7ff ffdb 	bl	8001e00 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001e4a:	2310      	movs	r3, #16
 8001e4c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4812      	ldr	r0, [pc, #72]	@ (8001ea8 <BSP_RADIO_Init+0x78>)
 8001e60:	f000 f9ce 	bl	8002200 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001e64:	2320      	movs	r3, #32
 8001e66:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480e      	ldr	r0, [pc, #56]	@ (8001ea8 <BSP_RADIO_Init+0x78>)
 8001e6e:	f000 f9c7 	bl	8002200 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001e72:	2308      	movs	r3, #8
 8001e74:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480b      	ldr	r0, [pc, #44]	@ (8001ea8 <BSP_RADIO_Init+0x78>)
 8001e7c:	f000 f9c0 	bl	8002200 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001e80:	2200      	movs	r2, #0
 8001e82:	2120      	movs	r1, #32
 8001e84:	4808      	ldr	r0, [pc, #32]	@ (8001ea8 <BSP_RADIO_Init+0x78>)
 8001e86:	f000 fb1b 	bl	80024c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <BSP_RADIO_Init+0x78>)
 8001e90:	f000 fb16 	bl	80024c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001e94:	2200      	movs	r2, #0
 8001e96:	2108      	movs	r1, #8
 8001e98:	4803      	ldr	r0, [pc, #12]	@ (8001ea8 <BSP_RADIO_Init+0x78>)
 8001e9a:	f000 fb11 	bl	80024c0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	48000800 	.word	0x48000800

08001eac <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001ecc:	2301      	movs	r3, #1
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001ee6:	230f      	movs	r3, #15
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e001      	b.n	8001ef0 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001eec:	2316      	movs	r3, #22
 8001eee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f06:	2003      	movs	r0, #3
 8001f08:	f000 f93a 	bl	8002180 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f0c:	f001 fbb6 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <HAL_Init+0x3c>)
 8001f14:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 f810 	bl	8001f3c <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	e001      	b.n	8001f2c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f28:	f7ff fcee 	bl	8001908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f48:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <HAL_InitTick+0x6c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d024      	beq.n	8001f9a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f50:	f001 fb94 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_InitTick+0x6c>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f60:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f93c 	bl	80021e6 <HAL_SYSTICK_Config>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10f      	bne.n	8001f94 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	d809      	bhi.n	8001f8e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f82:	f000 f908 	bl	8002196 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_InitTick+0x70>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e007      	b.n	8001f9e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e004      	b.n	8001f9e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e001      	b.n	8001f9e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000014 	.word	0x20000014
 8001fac:	20000010 	.word	0x20000010

08001fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_IncTick+0x1c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_IncTick+0x20>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a03      	ldr	r2, [pc, #12]	@ (8001fd0 <HAL_IncTick+0x20>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000014 	.word	0x20000014
 8001fd0:	200003a0 	.word	0x200003a0

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b02      	ldr	r3, [pc, #8]	@ (8001fe4 <HAL_GetTick+0x10>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	200003a0 	.word	0x200003a0

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4906      	ldr	r1, [pc, #24]	@ (8002080 <__NVIC_EnableIRQ+0x34>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	@ (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	@ (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800214c:	d301      	bcc.n	8002152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214e:	2301      	movs	r3, #1
 8002150:	e00f      	b.n	8002172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <SysTick_Config+0x40>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215a:	210f      	movs	r1, #15
 800215c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002160:	f7ff ff90 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <SysTick_Config+0x40>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216a:	4b04      	ldr	r3, [pc, #16]	@ (800217c <SysTick_Config+0x40>)
 800216c:	2207      	movs	r2, #7
 800216e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010

08002180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff2d 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021a4:	f7ff ff44 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	6978      	ldr	r0, [r7, #20]
 80021b0:	f7ff ff92 	bl	80020d8 <NVIC_EncodePriority>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff61 	bl	8002084 <__NVIC_SetPriority>
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff37 	bl	800204c <__NVIC_EnableIRQ>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ffa4 	bl	800213c <SysTick_Config>
 80021f4:	4603      	mov	r3, r0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220e:	e140      	b.n	8002492 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	4013      	ands	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8132 	beq.w	800248c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d005      	beq.n	8002240 <HAL_GPIO_Init+0x40>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d130      	bne.n	80022a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002276:	2201      	movs	r2, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	f003 0201 	and.w	r2, r3, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d017      	beq.n	80022de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d123      	bne.n	8002332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	6939      	ldr	r1, [r7, #16]
 800232e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0203 	and.w	r2, r3, #3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 808c 	beq.w	800248c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002374:	4a4e      	ldr	r2, [pc, #312]	@ (80024b0 <HAL_GPIO_Init+0x2b0>)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	2207      	movs	r2, #7
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800239e:	d00d      	beq.n	80023bc <HAL_GPIO_Init+0x1bc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a44      	ldr	r2, [pc, #272]	@ (80024b4 <HAL_GPIO_Init+0x2b4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <HAL_GPIO_Init+0x1b8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a43      	ldr	r2, [pc, #268]	@ (80024b8 <HAL_GPIO_Init+0x2b8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_GPIO_Init+0x1b4>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e004      	b.n	80023be <HAL_GPIO_Init+0x1be>
 80023b4:	2307      	movs	r3, #7
 80023b6:	e002      	b.n	80023be <HAL_GPIO_Init+0x1be>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_GPIO_Init+0x1be>
 80023bc:	2300      	movs	r3, #0
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	f002 0203 	and.w	r2, r2, #3
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	4093      	lsls	r3, r2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ce:	4938      	ldr	r1, [pc, #224]	@ (80024b0 <HAL_GPIO_Init+0x2b0>)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023dc:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <HAL_GPIO_Init+0x2bc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002400:	4a2e      	ldr	r2, [pc, #184]	@ (80024bc <HAL_GPIO_Init+0x2bc>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002406:	4b2d      	ldr	r3, [pc, #180]	@ (80024bc <HAL_GPIO_Init+0x2bc>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800242a:	4a24      	ldr	r2, [pc, #144]	@ (80024bc <HAL_GPIO_Init+0x2bc>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002430:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <HAL_GPIO_Init+0x2bc>)
 8002432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002436:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002456:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <HAL_GPIO_Init+0x2bc>)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800245e:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <HAL_GPIO_Init+0x2bc>)
 8002460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002464:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002484:	4a0d      	ldr	r2, [pc, #52]	@ (80024bc <HAL_GPIO_Init+0x2bc>)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f aeb7 	bne.w	8002210 <HAL_GPIO_Init+0x10>
  }
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40010000 	.word	0x40010000
 80024b4:	48000400 	.word	0x48000400
 80024b8:	48000800 	.word	0x48000800
 80024bc:	58000800 	.word	0x58000800

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002500:	887a      	ldrh	r2, [r7, #2]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	041a      	lsls	r2, r3, #16
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43d9      	mvns	r1, r3
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	400b      	ands	r3, r1
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002524:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a03      	ldr	r2, [pc, #12]	@ (8002538 <HAL_PWR_EnableBkUpAccess+0x18>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	58000400 	.word	0x58000400

0800253c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800254e:	4b13      	ldr	r3, [pc, #76]	@ (800259c <HAL_PWR_EnterSLEEPMode+0x60>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800255a:	d10d      	bne.n	8002578 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800255c:	f000 f83c 	bl	80025d8 <HAL_PWREx_DisableLowPowerRunMode>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8002566:	e015      	b.n	8002594 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <HAL_PWR_EnterSLEEPMode+0x60>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002574:	f000 f822 	bl	80025bc <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002578:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	4a08      	ldr	r2, [pc, #32]	@ (80025a0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800257e:	f023 0304 	bic.w	r3, r3, #4
 8002582:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800258a:	bf30      	wfi
 800258c:	e002      	b.n	8002594 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800258e:	bf40      	sev
    __WFE();
 8002590:	bf20      	wfe
    __WFE();
 8002592:	bf20      	wfe
  }
}
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	58000400 	.word	0x58000400
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80025a8:	4b03      	ldr	r3, [pc, #12]	@ (80025b8 <HAL_PWREx_GetVoltageRange+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	58000400 	.word	0x58000400

080025bc <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80025c0:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a03      	ldr	r2, [pc, #12]	@ (80025d4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80025c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	58000400 	.word	0x58000400

080025d8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80025de:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80025e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025e8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80025ea:	4b14      	ldr	r3, [pc, #80]	@ (800263c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2232      	movs	r2, #50	@ 0x32
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0c9b      	lsrs	r3, r3, #18
 80025fc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80025fe:	e002      	b.n	8002606 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002612:	d102      	bne.n	800261a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f2      	bne.n	8002600 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800261a:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002626:	d101      	bne.n	800262c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e000      	b.n	800262e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	58000400 	.word	0x58000400
 800263c:	20000000 	.word	0x20000000
 8002640:	431bde83 	.word	0x431bde83

08002644 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002654:	d101      	bne.n	800265a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	58000400 	.word	0x58000400

08002668 <LL_RCC_HSE_EnableTcxo>:
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800266c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002676:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <LL_RCC_HSE_DisableTcxo>:
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002692:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026b2:	d101      	bne.n	80026b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <LL_RCC_HSE_Enable>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <LL_RCC_HSE_Disable>:
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <LL_RCC_HSE_IsReady>:
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800270c:	d101      	bne.n	8002712 <LL_RCC_HSE_IsReady+0x18>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <LL_RCC_HSE_IsReady+0x1a>
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <LL_RCC_HSI_Enable>:
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800272a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <LL_RCC_HSI_Disable>:
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002746:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800274a:	6013      	str	r3, [r2, #0]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <LL_RCC_HSI_IsReady>:
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002766:	d101      	bne.n	800276c <LL_RCC_HSI_IsReady+0x18>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <LL_RCC_HSI_IsReady+0x1a>
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	061b      	lsls	r3, r3, #24
 800278c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d101      	bne.n	80027b6 <LL_RCC_LSE_IsReady+0x18>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <LL_RCC_LSE_IsReady+0x1a>
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d101      	bne.n	8002818 <LL_RCC_LSI_IsReady+0x18>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <LL_RCC_LSI_IsReady+0x1a>
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6013      	str	r3, [r2, #0]
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6013      	str	r3, [r2, #0]
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	d101      	bne.n	8002870 <LL_RCC_MSI_IsReady+0x16>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <LL_RCC_MSI_IsReady+0x18>
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b08      	cmp	r3, #8
 800288a:	d101      	bne.n	8002890 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80028b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800293e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002962:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002988:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800298c:	f023 020f 	bic.w	r2, r3, #15
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a12:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a9a:	d101      	bne.n	8002aa0 <LL_RCC_PLL_IsReady+0x18>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <LL_RCC_PLL_IsReady+0x1a>
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0303 	and.w	r3, r3, #3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b16:	d101      	bne.n	8002b1c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b3a:	d101      	bne.n	8002b40 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b52:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5e:	d101      	bne.n	8002b64 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b80:	d101      	bne.n	8002b86 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ba2:	d101      	bne.n	8002ba8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e36f      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc6:	f7ff fea6 	bl	8002916 <LL_RCC_GetSysClkSource>
 8002bca:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bcc:	f7ff ff8f 	bl	8002aee <LL_RCC_PLL_GetMainSource>
 8002bd0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80c4 	beq.w	8002d68 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x3e>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	d176      	bne.n	8002cda <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d173      	bne.n	8002cda <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e353      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x68>
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c1a:	e006      	b.n	8002c2a <HAL_RCC_OscConfig+0x76>
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d222      	bcs.n	8002c74 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fd5a 	bl	80036ec <RCC_SetFlashLatencyFromMSIRange>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e331      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c4c:	f043 0308 	orr.w	r3, r3, #8
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fe2b 	bl	80028c8 <LL_RCC_MSI_SetCalibTrimming>
 8002c72:	e021      	b.n	8002cb8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c7e:	f043 0308 	orr.w	r3, r3, #8
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fe12 	bl	80028c8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fd1f 	bl	80036ec <RCC_SetFlashLatencyFromMSIRange>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e2f6      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002cb8:	f000 fce0 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4aa7      	ldr	r2, [pc, #668]	@ (8002f5c <HAL_RCC_OscConfig+0x3a8>)
 8002cc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002cc2:	4ba7      	ldr	r3, [pc, #668]	@ (8002f60 <HAL_RCC_OscConfig+0x3ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f938 	bl	8001f3c <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d047      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	e2e5      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d02c      	beq.n	8002d3c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ce2:	f7ff fd9e 	bl	8002822 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ce6:	f7ff f975 	bl	8001fd4 <HAL_GetTick>
 8002cea:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cee:	f7ff f971 	bl	8001fd4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e2d2      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d00:	f7ff fdab 	bl	800285a <LL_RCC_MSI_IsReady>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f1      	beq.n	8002cee <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d14:	f043 0308 	orr.w	r3, r3, #8
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fdc7 	bl	80028c8 <LL_RCC_MSI_SetCalibTrimming>
 8002d3a:	e015      	b.n	8002d68 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d3c:	f7ff fd7f 	bl	800283e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d40:	f7ff f948 	bl	8001fd4 <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d48:	f7ff f944 	bl	8001fd4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e2a5      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d5a:	f7ff fd7e 	bl	800285a <LL_RCC_MSI_IsReady>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f1      	bne.n	8002d48 <HAL_RCC_OscConfig+0x194>
 8002d64:	e000      	b.n	8002d68 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d66:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d058      	beq.n	8002e26 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d005      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1d2>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d108      	bne.n	8002d92 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d105      	bne.n	8002d92 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d14b      	bne.n	8002e26 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e289      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db0:	d102      	bne.n	8002db8 <HAL_RCC_OscConfig+0x204>
 8002db2:	f7ff fc86 	bl	80026c2 <LL_RCC_HSE_Enable>
 8002db6:	e00d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x220>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002dc0:	d104      	bne.n	8002dcc <HAL_RCC_OscConfig+0x218>
 8002dc2:	f7ff fc51 	bl	8002668 <LL_RCC_HSE_EnableTcxo>
 8002dc6:	f7ff fc7c 	bl	80026c2 <LL_RCC_HSE_Enable>
 8002dca:	e003      	b.n	8002dd4 <HAL_RCC_OscConfig+0x220>
 8002dcc:	f7ff fc87 	bl	80026de <LL_RCC_HSE_Disable>
 8002dd0:	f7ff fc58 	bl	8002684 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d012      	beq.n	8002e02 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7ff f8fa 	bl	8001fd4 <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7ff f8f6 	bl	8001fd4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	@ 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e257      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002df6:	f7ff fc80 	bl	80026fa <LL_RCC_HSE_IsReady>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f1      	beq.n	8002de4 <HAL_RCC_OscConfig+0x230>
 8002e00:	e011      	b.n	8002e26 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7ff f8e7 	bl	8001fd4 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0a:	f7ff f8e3 	bl	8001fd4 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	@ 0x64
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e244      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002e1c:	f7ff fc6d 	bl	80026fa <LL_RCC_HSE_IsReady>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f1      	bne.n	8002e0a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d046      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_OscConfig+0x290>
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	d10e      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d10b      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e22a      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fc8e 	bl	8002776 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e5a:	e031      	b.n	8002ec0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d019      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e64:	f7ff fc5a 	bl	800271c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7ff f8b4 	bl	8001fd4 <HAL_GetTick>
 8002e6c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e70:	f7ff f8b0 	bl	8001fd4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e211      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e82:	f7ff fc67 	bl	8002754 <LL_RCC_HSI_IsReady>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f1      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fc70 	bl	8002776 <LL_RCC_HSI_SetCalibTrimming>
 8002e96:	e013      	b.n	8002ec0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e98:	f7ff fc4e 	bl	8002738 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7ff f89a 	bl	8001fd4 <HAL_GetTick>
 8002ea0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea4:	f7ff f896 	bl	8001fd4 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e1f7      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002eb6:	f7ff fc4d 	bl	8002754 <LL_RCC_HSI_IsReady>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f1      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d06e      	beq.n	8002faa <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d056      	beq.n	8002f82 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002edc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d031      	beq.n	8002f50 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e1d0      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d013      	beq.n	8002f36 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002f0e:	f7ff fc67 	bl	80027e0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f12:	f7ff f85f 	bl	8001fd4 <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7ff f85b 	bl	8001fd4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b11      	cmp	r3, #17
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1bc      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f2c:	f7ff fc68 	bl	8002800 <LL_RCC_LSI_IsReady>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f1      	bne.n	8002f1a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f3e:	f023 0210 	bic.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f50:	f7ff fc36 	bl	80027c0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7ff f83e 	bl	8001fd4 <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f5a:	e00c      	b.n	8002f76 <HAL_RCC_OscConfig+0x3c2>
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f64:	f7ff f836 	bl	8001fd4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b11      	cmp	r3, #17
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e197      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f76:	f7ff fc43 	bl	8002800 <LL_RCC_LSI_IsReady>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f1      	beq.n	8002f64 <HAL_RCC_OscConfig+0x3b0>
 8002f80:	e013      	b.n	8002faa <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f82:	f7ff fc2d 	bl	80027e0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7ff f825 	bl	8001fd4 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7ff f821 	bl	8001fd4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b11      	cmp	r3, #17
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e182      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002fa0:	f7ff fc2e 	bl	8002800 <LL_RCC_LSI_IsReady>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f1      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80d8 	beq.w	8003168 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fb8:	f7ff fb44 	bl	8002644 <LL_PWR_IsEnabledBkUpAccess>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d113      	bne.n	8002fea <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002fc2:	f7ff faad 	bl	8002520 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc6:	f7ff f805 	bl	8001fd4 <HAL_GetTick>
 8002fca:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7ff f801 	bl	8001fd4 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e162      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fe0:	f7ff fb30 	bl	8002644 <LL_PWR_IsEnabledBkUpAccess>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f1      	beq.n	8002fce <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d07b      	beq.n	80030ea <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b85      	cmp	r3, #133	@ 0x85
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d109      	bne.n	8003016 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003016:	f7fe ffdd 	bl	8001fd4 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003030:	e00a      	b.n	8003048 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7fe ffcf 	bl	8001fd4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e12e      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003048:	f7ff fba9 	bl	800279e <LL_RCC_LSE_IsReady>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ef      	beq.n	8003032 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b81      	cmp	r3, #129	@ 0x81
 8003058:	d003      	beq.n	8003062 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b85      	cmp	r3, #133	@ 0x85
 8003060:	d121      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fe ffb7 	bl	8001fd4 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fe ffa9 	bl	8001fd4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e108      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ec      	beq.n	800307e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80030a4:	e060      	b.n	8003168 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe ff95 	bl	8001fd4 <HAL_GetTick>
 80030aa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe ff87 	bl	8001fd4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0e6      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ec      	bne.n	80030c2 <HAL_RCC_OscConfig+0x50e>
 80030e8:	e03e      	b.n	8003168 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ea:	f7fe ff73 	bl	8001fd4 <HAL_GetTick>
 80030ee:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fe ff65 	bl	8001fd4 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0c4      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ec      	bne.n	8003106 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312c:	f7fe ff52 	bl	8001fd4 <HAL_GetTick>
 8003130:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003146:	e00a      	b.n	800315e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003148:	f7fe ff44 	bl	8001fd4 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e0a3      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800315e:	f7ff fb1e 	bl	800279e <LL_RCC_LSE_IsReady>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ef      	bne.n	8003148 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8099 	beq.w	80032a4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d06c      	beq.n	8003252 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	2b02      	cmp	r3, #2
 800317e:	d14b      	bne.n	8003218 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003180:	f7ff fc74 	bl	8002a6c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe ff26 	bl	8001fd4 <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe ff22 	bl	8001fd4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b0a      	cmp	r3, #10
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e083      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800319e:	f7ff fc73 	bl	8002a88 <LL_RCC_PLL_IsReady>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f1      	bne.n	800318c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	4b40      	ldr	r3, [pc, #256]	@ (80032b0 <HAL_RCC_OscConfig+0x6fc>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031ba:	4311      	orrs	r1, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031c0:	0212      	lsls	r2, r2, #8
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80031d4:	430a      	orrs	r2, r1
 80031d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031da:	4313      	orrs	r3, r2
 80031dc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031de:	f7ff fc37 	bl	8002a50 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fe feef 	bl	8001fd4 <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fa:	f7fe feeb 	bl	8001fd4 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b0a      	cmp	r3, #10
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e04c      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800320c:	f7ff fc3c 	bl	8002a88 <LL_RCC_PLL_IsReady>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f1      	beq.n	80031fa <HAL_RCC_OscConfig+0x646>
 8003216:	e045      	b.n	80032a4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	f7ff fc28 	bl	8002a6c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe feda 	bl	8001fd4 <HAL_GetTick>
 8003220:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe fed6 	bl	8001fd4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b0a      	cmp	r3, #10
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e037      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003236:	f7ff fc27 	bl	8002a88 <LL_RCC_PLL_IsReady>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f1      	bne.n	8003224 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800324a:	4b1a      	ldr	r3, [pc, #104]	@ (80032b4 <HAL_RCC_OscConfig+0x700>)
 800324c:	4013      	ands	r3, r2
 800324e:	60cb      	str	r3, [r1, #12]
 8003250:	e028      	b.n	80032a4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e023      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	429a      	cmp	r2, r3
 8003272:	d115      	bne.n	80032a0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327e:	429a      	cmp	r2, r3
 8003280:	d10e      	bne.n	80032a0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	429a      	cmp	r2, r3
 8003290:	d106      	bne.n	80032a0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	11c1808c 	.word	0x11c1808c
 80032b4:	eefefffc 	.word	0xeefefffc

080032b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e12c      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032cc:	4b98      	ldr	r3, [pc, #608]	@ (8003530 <HAL_RCC_ClockConfig+0x278>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d91b      	bls.n	8003312 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b95      	ldr	r3, [pc, #596]	@ (8003530 <HAL_RCC_ClockConfig+0x278>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 0207 	bic.w	r2, r3, #7
 80032e2:	4993      	ldr	r1, [pc, #588]	@ (8003530 <HAL_RCC_ClockConfig+0x278>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ea:	f7fe fe73 	bl	8001fd4 <HAL_GetTick>
 80032ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032f2:	f7fe fe6f 	bl	8001fd4 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e110      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003304:	4b8a      	ldr	r3, [pc, #552]	@ (8003530 <HAL_RCC_ClockConfig+0x278>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d1ef      	bne.n	80032f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fb02 	bl	800292c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003328:	f7fe fe54 	bl	8001fd4 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003330:	f7fe fe50 	bl	8001fd4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e0f1      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003342:	f7ff fbdf 	bl	8002b04 <LL_RCC_IsActiveFlag_HPRE>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f1      	beq.n	8003330 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b00      	cmp	r3, #0
 8003356:	d016      	beq.n	8003386 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff faf8 	bl	8002952 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003362:	f7fe fe37 	bl	8001fd4 <HAL_GetTick>
 8003366:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800336a:	f7fe fe33 	bl	8001fd4 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0d4      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800337c:	f7ff fbd3 	bl	8002b26 <LL_RCC_IsActiveFlag_C2HPRE>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f1      	beq.n	800336a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff faf0 	bl	800297c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800339c:	f7fe fe1a 	bl	8001fd4 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033a4:	f7fe fe16 	bl	8001fd4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0b7      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80033b6:	f7ff fbc8 	bl	8002b4a <LL_RCC_IsActiveFlag_SHDHPRE>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f1      	beq.n	80033a4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d016      	beq.n	80033fa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fae9 	bl	80029a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033d6:	f7fe fdfd 	bl	8001fd4 <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033de:	f7fe fdf9 	bl	8001fd4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e09a      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033f0:	f7ff fbbd 	bl	8002b6e <LL_RCC_IsActiveFlag_PPRE1>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f1      	beq.n	80033de <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fade 	bl	80029ce <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003412:	f7fe fddf 	bl	8001fd4 <HAL_GetTick>
 8003416:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800341a:	f7fe fddb 	bl	8001fd4 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e07c      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800342c:	f7ff fbb0 	bl	8002b90 <LL_RCC_IsActiveFlag_PPRE2>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f1      	beq.n	800341a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d043      	beq.n	80034ca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d106      	bne.n	8003458 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800344a:	f7ff f956 	bl	80026fa <LL_RCC_HSE_IsReady>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11e      	bne.n	8003492 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e066      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d106      	bne.n	800346e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003460:	f7ff fb12 	bl	8002a88 <LL_RCC_PLL_IsReady>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d113      	bne.n	8003492 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e05b      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003476:	f7ff f9f0 	bl	800285a <LL_RCC_MSI_IsReady>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d108      	bne.n	8003492 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e050      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003484:	f7ff f966 	bl	8002754 <LL_RCC_HSI_IsReady>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e049      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fa2a 	bl	80028f0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800349c:	f7fe fd9a 	bl	8001fd4 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fe fd96 	bl	8001fd4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e035      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	f7ff fa2c 	bl	8002916 <LL_RCC_GetSysClkSource>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d1ec      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ca:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <HAL_RCC_ClockConfig+0x278>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d21b      	bcs.n	8003510 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d8:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <HAL_RCC_ClockConfig+0x278>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 0207 	bic.w	r2, r3, #7
 80034e0:	4913      	ldr	r1, [pc, #76]	@ (8003530 <HAL_RCC_ClockConfig+0x278>)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e8:	f7fe fd74 	bl	8001fd4 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034f0:	f7fe fd70 	bl	8001fd4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e011      	b.n	8003526 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <HAL_RCC_ClockConfig+0x278>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d1ef      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003510:	f000 f8b4 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8003514:	4603      	mov	r3, r0
 8003516:	4a07      	ldr	r2, [pc, #28]	@ (8003534 <HAL_RCC_ClockConfig+0x27c>)
 8003518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800351a:	4b07      	ldr	r3, [pc, #28]	@ (8003538 <HAL_RCC_ClockConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fd0c 	bl	8001f3c <HAL_InitTick>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	58004000 	.word	0x58004000
 8003534:	20000000 	.word	0x20000000
 8003538:	20000010 	.word	0x20000010

0800353c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354a:	f7ff f9e4 	bl	8002916 <LL_RCC_GetSysClkSource>
 800354e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003550:	f7ff facd 	bl	8002aee <LL_RCC_PLL_GetMainSource>
 8003554:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x2c>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d139      	bne.n	80035d6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d136      	bne.n	80035d6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003568:	f7ff f987 	bl	800287a <LL_RCC_MSI_IsEnabledRangeSelect>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d115      	bne.n	800359e <HAL_RCC_GetSysClockFreq+0x62>
 8003572:	f7ff f982 	bl	800287a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d106      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x4e>
 800357c:	f7ff f98d 	bl	800289a <LL_RCC_MSI_GetRange>
 8003580:	4603      	mov	r3, r0
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	e005      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x5a>
 800358a:	f7ff f991 	bl	80028b0 <LL_RCC_MSI_GetRangeAfterStandby>
 800358e:	4603      	mov	r3, r0
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	4a36      	ldr	r2, [pc, #216]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x134>)
 8003598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359c:	e014      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x8c>
 800359e:	f7ff f96c 	bl	800287a <LL_RCC_MSI_IsEnabledRangeSelect>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d106      	bne.n	80035b6 <HAL_RCC_GetSysClockFreq+0x7a>
 80035a8:	f7ff f977 	bl	800289a <LL_RCC_MSI_GetRange>
 80035ac:	4603      	mov	r3, r0
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	e005      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x86>
 80035b6:	f7ff f97b 	bl	80028b0 <LL_RCC_MSI_GetRangeAfterStandby>
 80035ba:	4603      	mov	r3, r0
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x134>)
 80035c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d115      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035d4:	e012      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d102      	bne.n	80035e2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035dc:	4b25      	ldr	r3, [pc, #148]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x138>)
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e00c      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d109      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035e8:	f7ff f85a 	bl	80026a0 <LL_RCC_HSE_IsEnabledDiv2>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d102      	bne.n	80035f8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80035f2:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x138>)
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e001      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x13c>)
 80035fa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035fc:	f7ff f98b 	bl	8002916 <LL_RCC_GetSysClkSource>
 8003600:	4603      	mov	r3, r0
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d12f      	bne.n	8003666 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003606:	f7ff fa72 	bl	8002aee <LL_RCC_PLL_GetMainSource>
 800360a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0xde>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d003      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0xe4>
 8003618:	e00d      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800361a:	4b16      	ldr	r3, [pc, #88]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x138>)
 800361c:	60fb      	str	r3, [r7, #12]
        break;
 800361e:	e00d      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003620:	f7ff f83e 	bl	80026a0 <LL_RCC_HSE_IsEnabledDiv2>
 8003624:	4603      	mov	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d102      	bne.n	8003630 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800362a:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x138>)
 800362c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800362e:	e005      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003630:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003632:	60fb      	str	r3, [r7, #12]
        break;
 8003634:	e002      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	60fb      	str	r3, [r7, #12]
        break;
 800363a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800363c:	f7ff fa35 	bl	8002aaa <LL_RCC_PLL_GetN>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	fb03 f402 	mul.w	r4, r3, r2
 8003648:	f7ff fa46 	bl	8002ad8 <LL_RCC_PLL_GetDivider>
 800364c:	4603      	mov	r3, r0
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	3301      	adds	r3, #1
 8003652:	fbb4 f4f3 	udiv	r4, r4, r3
 8003656:	f7ff fa34 	bl	8002ac2 <LL_RCC_PLL_GetR>
 800365a:	4603      	mov	r3, r0
 800365c:	0f5b      	lsrs	r3, r3, #29
 800365e:	3301      	adds	r3, #1
 8003660:	fbb4 f3f3 	udiv	r3, r4, r3
 8003664:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003666:	697b      	ldr	r3, [r7, #20]
}
 8003668:	4618      	mov	r0, r3
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}
 8003670:	0800aa04 	.word	0x0800aa04
 8003674:	00f42400 	.word	0x00f42400
 8003678:	01e84800 	.word	0x01e84800

0800367c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b598      	push	{r3, r4, r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003680:	f7ff ff5c 	bl	800353c <HAL_RCC_GetSysClockFreq>
 8003684:	4604      	mov	r4, r0
 8003686:	f7ff f9b5 	bl	80029f4 <LL_RCC_GetAHBPrescaler>
 800368a:	4603      	mov	r3, r0
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	4a03      	ldr	r2, [pc, #12]	@ (80036a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8003694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003698:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd98      	pop	{r3, r4, r7, pc}
 80036a0:	0800a9a4 	.word	0x0800a9a4

080036a4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b598      	push	{r3, r4, r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80036a8:	f7ff ffe8 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036ac:	4604      	mov	r4, r0
 80036ae:	f7ff f9b9 	bl	8002a24 <LL_RCC_GetAPB1Prescaler>
 80036b2:	4603      	mov	r3, r0
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	4a03      	ldr	r2, [pc, #12]	@ (80036c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd98      	pop	{r3, r4, r7, pc}
 80036c4:	0800a9e4 	.word	0x0800a9e4

080036c8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b598      	push	{r3, r4, r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80036cc:	f7ff ffd6 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036d0:	4604      	mov	r4, r0
 80036d2:	f7ff f9b2 	bl	8002a3a <LL_RCC_GetAPB2Prescaler>
 80036d6:	4603      	mov	r3, r0
 80036d8:	0adb      	lsrs	r3, r3, #11
 80036da:	4a03      	ldr	r2, [pc, #12]	@ (80036e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd98      	pop	{r3, r4, r7, pc}
 80036e8:	0800a9e4 	.word	0x0800a9e4

080036ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	4a10      	ldr	r2, [pc, #64]	@ (8003740 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80036fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003702:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003704:	f7ff f981 	bl	8002a0a <LL_RCC_GetAHB3Prescaler>
 8003708:	4603      	mov	r3, r0
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	4a0c      	ldr	r2, [pc, #48]	@ (8003744 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a09      	ldr	r2, [pc, #36]	@ (8003748 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0c9c      	lsrs	r4, r3, #18
 8003728:	f7fe ff3c 	bl	80025a4 <HAL_PWREx_GetVoltageRange>
 800372c:	4603      	mov	r3, r0
 800372e:	4619      	mov	r1, r3
 8003730:	4620      	mov	r0, r4
 8003732:	f000 f80b 	bl	800374c <RCC_SetFlashLatency>
 8003736:	4603      	mov	r3, r0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	0800aa04 	.word	0x0800aa04
 8003744:	0800a9a4 	.word	0x0800a9a4
 8003748:	431bde83 	.word	0x431bde83

0800374c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08e      	sub	sp, #56	@ 0x38
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003756:	4a3a      	ldr	r2, [pc, #232]	@ (8003840 <RCC_SetFlashLatency+0xf4>)
 8003758:	f107 0320 	add.w	r3, r7, #32
 800375c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003760:	6018      	str	r0, [r3, #0]
 8003762:	3304      	adds	r3, #4
 8003764:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003766:	4a37      	ldr	r2, [pc, #220]	@ (8003844 <RCC_SetFlashLatency+0xf8>)
 8003768:	f107 0318 	add.w	r3, r7, #24
 800376c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003770:	6018      	str	r0, [r3, #0]
 8003772:	3304      	adds	r3, #4
 8003774:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003776:	4a34      	ldr	r2, [pc, #208]	@ (8003848 <RCC_SetFlashLatency+0xfc>)
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	ca07      	ldmia	r2, {r0, r1, r2}
 800377e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003782:	2300      	movs	r3, #0
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800378c:	d11b      	bne.n	80037c6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800378e:	2300      	movs	r3, #0
 8003790:	633b      	str	r3, [r7, #48]	@ 0x30
 8003792:	e014      	b.n	80037be <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	3338      	adds	r3, #56	@ 0x38
 800379a:	443b      	add	r3, r7
 800379c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80037a0:	461a      	mov	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d807      	bhi.n	80037b8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	3338      	adds	r3, #56	@ 0x38
 80037ae:	443b      	add	r3, r7
 80037b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037b6:	e021      	b.n	80037fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80037b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ba:	3301      	adds	r3, #1
 80037bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d9e7      	bls.n	8003794 <RCC_SetFlashLatency+0x48>
 80037c4:	e01a      	b.n	80037fc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ca:	e014      	b.n	80037f6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	3338      	adds	r3, #56	@ 0x38
 80037d2:	443b      	add	r3, r7
 80037d4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80037d8:	461a      	mov	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4293      	cmp	r3, r2
 80037de:	d807      	bhi.n	80037f0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	3338      	adds	r3, #56	@ 0x38
 80037e6:	443b      	add	r3, r7
 80037e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037ee:	e005      	b.n	80037fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	3301      	adds	r3, #1
 80037f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d9e7      	bls.n	80037cc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037fc:	4b13      	ldr	r3, [pc, #76]	@ (800384c <RCC_SetFlashLatency+0x100>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 0207 	bic.w	r2, r3, #7
 8003804:	4911      	ldr	r1, [pc, #68]	@ (800384c <RCC_SetFlashLatency+0x100>)
 8003806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800380c:	f7fe fbe2 	bl	8001fd4 <HAL_GetTick>
 8003810:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003812:	e008      	b.n	8003826 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003814:	f7fe fbde 	bl	8001fd4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e007      	b.n	8003836 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <RCC_SetFlashLatency+0x100>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003830:	429a      	cmp	r2, r3
 8003832:	d1ef      	bne.n	8003814 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3738      	adds	r7, #56	@ 0x38
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	0800a988 	.word	0x0800a988
 8003844:	0800a990 	.word	0x0800a990
 8003848:	0800a998 	.word	0x0800a998
 800384c:	58004000 	.word	0x58004000

08003850 <LL_RCC_LSE_IsReady>:
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b02      	cmp	r3, #2
 8003862:	d101      	bne.n	8003868 <LL_RCC_LSE_IsReady+0x18>
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <LL_RCC_LSE_IsReady+0x1a>
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <LL_RCC_SetUSARTClockSource>:
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	43db      	mvns	r3, r3
 8003888:	401a      	ands	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	b29b      	uxth	r3, r3
 800388e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <LL_RCC_SetI2SClockSource>:
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80038aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <LL_RCC_SetLPUARTClockSource>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80038d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <LL_RCC_SetI2CClockSource>:
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003902:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800390e:	43db      	mvns	r3, r3
 8003910:	401a      	ands	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800391a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <LL_RCC_SetLPTIMClockSource>:
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800393a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	43db      	mvns	r3, r3
 8003946:	401a      	ands	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	041b      	lsls	r3, r3, #16
 800394c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <LL_RCC_SetRNGClockSource>:
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003974:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <LL_RCC_SetADCClockSource>:
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800399e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <LL_RCC_SetRTCClockSource>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80039bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <LL_RCC_GetRTCClockSource>:
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80039e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <LL_RCC_ForceBackupDomainReset>:
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a2e:	bf00      	nop
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr
	...

08003a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003a44:	2300      	movs	r3, #0
 8003a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003a48:	2300      	movs	r3, #0
 8003a4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d058      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003a58:	f7fe fd62 	bl	8002520 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a5c:	f7fe faba 	bl	8001fd4 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a62:	e009      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a64:	f7fe fab6 	bl	8001fd4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d902      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	74fb      	strb	r3, [r7, #19]
        break;
 8003a76:	e006      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a78:	4b7b      	ldr	r3, [pc, #492]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a84:	d1ee      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d13c      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003a8c:	f7ff ffa7 	bl	80039de <LL_RCC_GetRTCClockSource>
 8003a90:	4602      	mov	r2, r0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d00f      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa8:	f7ff ffa5 	bl	80039f6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aac:	f7ff ffb3 	bl	8003a16 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d014      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fa86 	bl	8001fd4 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fe fa82 	bl	8001fd4 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d902      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	74fb      	strb	r3, [r7, #19]
            break;
 8003ae2:	e004      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ae4:	f7ff feb4 	bl	8003850 <LL_RCC_LSE_IsReady>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d1ee      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff5b 	bl	80039b4 <LL_RCC_SetRTCClockSource>
 8003afe:	e004      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	74bb      	strb	r3, [r7, #18]
 8003b04:	e001      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	7cfb      	ldrb	r3, [r7, #19]
 8003b08:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fea9 	bl	8003872 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fe9e 	bl	8003872 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fec0 	bl	80038cc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fee6 	bl	800392e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fedb 	bl	800392e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fed0 	bl	800392e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fea9 	bl	80038f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fe9e 	bl	80038f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fe93 	bl	80038f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fe5e 	bl	80038a2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bee:	d107      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bfe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d010      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fea5 	bl	8003960 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c2c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d011      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fea3 	bl	800398a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003c5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	58000400 	.word	0x58000400

08003c6c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003c74:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c7c:	4904      	ldr	r1, [pc, #16]	@ (8003c90 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	58000400 	.word	0x58000400

08003c94 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003c98:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9e:	4a04      	ldr	r2, [pc, #16]	@ (8003cb0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	58000400 	.word	0x58000400

08003cb4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003cb8:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	4a04      	ldr	r2, [pc, #16]	@ (8003cd0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003cc0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	58000400 	.word	0x58000400

08003cd4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003cda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cde:	619a      	str	r2, [r3, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	58000400 	.word	0x58000400

08003cec <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003cf0:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d101      	bne.n	8003d00 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	58000400 	.word	0x58000400

08003d10 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003d14:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d101      	bne.n	8003d24 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	58000400 	.word	0x58000400

08003d34 <LL_RCC_RF_DisableReset>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <LL_RCC_IsRFUnderReset>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d68:	d101      	bne.n	8003d6e <LL_RCC_IsRFUnderReset+0x1a>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <LL_RCC_IsRFUnderReset+0x1c>
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003d80:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <LL_EXTI_EnableIT_32_63+0x24>)
 8003d82:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003d86:	4905      	ldr	r1, [pc, #20]	@ (8003d9c <LL_EXTI_EnableIT_32_63+0x24>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	58000800 	.word	0x58000800

08003da0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
    return status;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	e052      	b.n	8003e5c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	799b      	ldrb	r3, [r3, #6]
 8003dbe:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003dc0:	7bbb      	ldrb	r3, [r7, #14]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_SUBGHZ_Init+0x2c>
 8003dc6:	7bbb      	ldrb	r3, [r7, #14]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d109      	bne.n	8003de0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd fdfe 	bl	80019d4 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003dd8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003ddc:	f7ff ffcc 	bl	8003d78 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003de0:	7bbb      	ldrb	r3, [r7, #14]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d126      	bne.n	8003e34 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003dec:	f7ff ffa2 	bl	8003d34 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003df0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e64 <HAL_SUBGHZ_Init+0xc4>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	0cdb      	lsrs	r3, r3, #19
 8003dfe:	2264      	movs	r2, #100	@ 0x64
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	609a      	str	r2, [r3, #8]
        break;
 8003e16:	e007      	b.n	8003e28 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003e1e:	f7ff ff99 	bl	8003d54 <LL_RCC_IsRFUnderReset>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ee      	bne.n	8003e06 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e28:	f7ff ff34 	bl	8003c94 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003e2c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003e30:	f7ff ff1c 	bl	8003c6c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003e34:	f7ff ff4e 	bl	8003cd4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fa6a 	bl	800431c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	719a      	strb	r2, [r3, #6]

  return status;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000000 	.word	0x20000000

08003e68 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	461a      	mov	r2, r3
 8003e74:	460b      	mov	r3, r1
 8003e76:	817b      	strh	r3, [r7, #10]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	799b      	ldrb	r3, [r3, #6]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d14a      	bne.n	8003f1c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	795b      	ldrb	r3, [r3, #5]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e045      	b.n	8003f1e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fb0a 	bl	80044b8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003ea4:	f7ff ff06 	bl	8003cb4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003ea8:	210d      	movs	r1, #13
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fa56 	bl	800435c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003eb0:	897b      	ldrh	r3, [r7, #10]
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	4619      	mov	r1, r3
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa4e 	bl	800435c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003ec0:	897b      	ldrh	r3, [r7, #10]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fa48 	bl	800435c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	82bb      	strh	r3, [r7, #20]
 8003ed0:	e00a      	b.n	8003ee8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ed2:	8abb      	ldrh	r3, [r7, #20]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fa3d 	bl	800435c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003ee2:	8abb      	ldrh	r3, [r7, #20]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	82bb      	strh	r3, [r7, #20]
 8003ee8:	8aba      	ldrh	r2, [r7, #20]
 8003eea:	893b      	ldrh	r3, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d3f0      	bcc.n	8003ed2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ef0:	f7ff fed0 	bl	8003c94 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fb03 	bl	8004500 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
 8003f06:	e001      	b.n	8003f0c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	715a      	strb	r2, [r3, #5]

    return status;
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	e000      	b.n	8003f1e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b088      	sub	sp, #32
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	461a      	mov	r2, r3
 8003f32:	460b      	mov	r3, r1
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	4613      	mov	r3, r2
 8003f38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	799b      	ldrb	r3, [r3, #6]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d14a      	bne.n	8003fde <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	795b      	ldrb	r3, [r3, #5]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e045      	b.n	8003fe0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 faac 	bl	80044b8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f60:	f7ff fea8 	bl	8003cb4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003f64:	211d      	movs	r1, #29
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f9f8 	bl	800435c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003f6c:	897b      	ldrh	r3, [r7, #10]
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	4619      	mov	r1, r3
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f9f0 	bl	800435c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003f7c:	897b      	ldrh	r3, [r7, #10]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	4619      	mov	r1, r3
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f9ea 	bl	800435c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003f88:	2100      	movs	r1, #0
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f9e6 	bl	800435c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003f90:	2300      	movs	r3, #0
 8003f92:	82fb      	strh	r3, [r7, #22]
 8003f94:	e009      	b.n	8003faa <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fa35 	bl	8004408 <SUBGHZSPI_Receive>
      pData++;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003fa4:	8afb      	ldrh	r3, [r7, #22]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	82fb      	strh	r3, [r7, #22]
 8003faa:	8afa      	ldrh	r2, [r7, #22]
 8003fac:	893b      	ldrh	r3, [r7, #8]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d3f1      	bcc.n	8003f96 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003fb2:	f7ff fe6f 	bl	8003c94 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 faa2 	bl	8004500 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e001      	b.n	8003fce <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	715a      	strb	r2, [r3, #5]

    return status;
 8003fda:	7ffb      	ldrb	r3, [r7, #31]
 8003fdc:	e000      	b.n	8003fe0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	72fb      	strb	r3, [r7, #11]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	799b      	ldrb	r3, [r3, #6]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d14a      	bne.n	800409c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	795b      	ldrb	r3, [r3, #5]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800400e:	2302      	movs	r3, #2
 8004010:	e045      	b.n	800409e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fa4d 	bl	80044b8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800401e:	7afb      	ldrb	r3, [r7, #11]
 8004020:	2b84      	cmp	r3, #132	@ 0x84
 8004022:	d002      	beq.n	800402a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004024:	7afb      	ldrb	r3, [r7, #11]
 8004026:	2b94      	cmp	r3, #148	@ 0x94
 8004028:	d103      	bne.n	8004032 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	711a      	strb	r2, [r3, #4]
 8004030:	e002      	b.n	8004038 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004038:	f7ff fe3c 	bl	8003cb4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800403c:	7afb      	ldrb	r3, [r7, #11]
 800403e:	4619      	mov	r1, r3
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f98b 	bl	800435c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004046:	2300      	movs	r3, #0
 8004048:	82bb      	strh	r3, [r7, #20]
 800404a:	e00a      	b.n	8004062 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800404c:	8abb      	ldrh	r3, [r7, #20]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f980 	bl	800435c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800405c:	8abb      	ldrh	r3, [r7, #20]
 800405e:	3301      	adds	r3, #1
 8004060:	82bb      	strh	r3, [r7, #20]
 8004062:	8aba      	ldrh	r2, [r7, #20]
 8004064:	893b      	ldrh	r3, [r7, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	d3f0      	bcc.n	800404c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800406a:	f7ff fe13 	bl	8003c94 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800406e:	7afb      	ldrb	r3, [r7, #11]
 8004070:	2b84      	cmp	r3, #132	@ 0x84
 8004072:	d002      	beq.n	800407a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fa43 	bl	8004500 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	75fb      	strb	r3, [r7, #23]
 8004086:	e001      	b.n	800408c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	715a      	strb	r2, [r3, #5]

    return status;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	e000      	b.n	800409e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b088      	sub	sp, #32
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	461a      	mov	r2, r3
 80040b2:	460b      	mov	r3, r1
 80040b4:	72fb      	strb	r3, [r7, #11]
 80040b6:	4613      	mov	r3, r2
 80040b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	799b      	ldrb	r3, [r3, #6]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d13d      	bne.n	8004144 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	795b      	ldrb	r3, [r3, #5]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e038      	b.n	8004146 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f9ec 	bl	80044b8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80040e0:	f7ff fde8 	bl	8003cb4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80040e4:	7afb      	ldrb	r3, [r7, #11]
 80040e6:	4619      	mov	r1, r3
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f937 	bl	800435c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80040ee:	2100      	movs	r1, #0
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f933 	bl	800435c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	82fb      	strh	r3, [r7, #22]
 80040fa:	e009      	b.n	8004110 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f982 	bl	8004408 <SUBGHZSPI_Receive>
      pData++;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	3301      	adds	r3, #1
 8004108:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800410a:	8afb      	ldrh	r3, [r7, #22]
 800410c:	3301      	adds	r3, #1
 800410e:	82fb      	strh	r3, [r7, #22]
 8004110:	8afa      	ldrh	r2, [r7, #22]
 8004112:	893b      	ldrh	r3, [r7, #8]
 8004114:	429a      	cmp	r2, r3
 8004116:	d3f1      	bcc.n	80040fc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004118:	f7ff fdbc 	bl	8003c94 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f9ef 	bl	8004500 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e001      	b.n	8004134 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	715a      	strb	r2, [r3, #5]

    return status;
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	e000      	b.n	8004146 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004144:	2302      	movs	r3, #2
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b088      	sub	sp, #32
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	461a      	mov	r2, r3
 800415a:	460b      	mov	r3, r1
 800415c:	72fb      	strb	r3, [r7, #11]
 800415e:	4613      	mov	r3, r2
 8004160:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	799b      	ldrb	r3, [r3, #6]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d141      	bne.n	80041f4 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	795b      	ldrb	r3, [r3, #5]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004178:	2302      	movs	r3, #2
 800417a:	e03c      	b.n	80041f6 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f998 	bl	80044b8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004188:	f7ff fd94 	bl	8003cb4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800418c:	211e      	movs	r1, #30
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f8e4 	bl	800435c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004194:	7afb      	ldrb	r3, [r7, #11]
 8004196:	4619      	mov	r1, r3
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f8df 	bl	800435c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800419e:	2100      	movs	r1, #0
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f8db 	bl	800435c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	82fb      	strh	r3, [r7, #22]
 80041aa:	e009      	b.n	80041c0 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80041ac:	69b9      	ldr	r1, [r7, #24]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f92a 	bl	8004408 <SUBGHZSPI_Receive>
      pData++;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80041ba:	8afb      	ldrh	r3, [r7, #22]
 80041bc:	3301      	adds	r3, #1
 80041be:	82fb      	strh	r3, [r7, #22]
 80041c0:	8afa      	ldrh	r2, [r7, #22]
 80041c2:	893b      	ldrh	r3, [r7, #8]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d3f1      	bcc.n	80041ac <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80041c8:	f7ff fd64 	bl	8003c94 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f997 	bl	8004500 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e001      	b.n	80041e4 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	715a      	strb	r2, [r3, #5]

    return status;
 80041f0:	7ffb      	ldrb	r3, [r7, #31]
 80041f2:	e000      	b.n	80041f6 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3720      	adds	r7, #32
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004206:	2300      	movs	r3, #0
 8004208:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800420a:	f107 020c 	add.w	r2, r7, #12
 800420e:	2302      	movs	r3, #2
 8004210:	2112      	movs	r1, #18
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ff47 	bl	80040a6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004218:	7b3b      	ldrb	r3, [r7, #12]
 800421a:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800421c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	b21a      	sxth	r2, r3
 8004224:	7b7b      	ldrb	r3, [r7, #13]
 8004226:	b21b      	sxth	r3, r3
 8004228:	4313      	orrs	r3, r2
 800422a:	b21b      	sxth	r3, r3
 800422c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800422e:	f107 020c 	add.w	r2, r7, #12
 8004232:	2302      	movs	r3, #2
 8004234:	2102      	movs	r1, #2
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fed6 	bl	8003fe8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800423c:	89fb      	ldrh	r3, [r7, #14]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f001 fddc 	bl	8005e04 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800424c:	89fb      	ldrh	r3, [r7, #14]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004258:	89fb      	ldrh	r3, [r7, #14]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f001 fddb 	bl	8005e20 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800426a:	89fb      	ldrh	r3, [r7, #14]
 800426c:	089b      	lsrs	r3, r3, #2
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f001 fe2a 	bl	8005ed0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800427c:	89fb      	ldrh	r3, [r7, #14]
 800427e:	08db      	lsrs	r3, r3, #3
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f001 fe2f 	bl	8005eec <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800428e:	89fb      	ldrh	r3, [r7, #14]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f001 fe34 	bl	8005f08 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80042a0:	89fb      	ldrh	r3, [r7, #14]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f001 fe01 	bl	8005eb4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80042b2:	89fb      	ldrh	r3, [r7, #14]
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f001 fdbc 	bl	8005e3c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80042c4:	89fb      	ldrh	r3, [r7, #14]
 80042c6:	09db      	lsrs	r3, r3, #7
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00e      	beq.n	80042ee <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80042d0:	89fb      	ldrh	r3, [r7, #14]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80042dc:	2101      	movs	r1, #1
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 fdba 	bl	8005e58 <HAL_SUBGHZ_CADStatusCallback>
 80042e4:	e003      	b.n	80042ee <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80042e6:	2100      	movs	r1, #0
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f001 fdb5 	bl	8005e58 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	0a5b      	lsrs	r3, r3, #9
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f001 fdca 	bl	8005e94 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004300:	89fb      	ldrh	r3, [r7, #14]
 8004302:	0b9b      	lsrs	r3, r3, #14
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f001 fe09 	bl	8005f24 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004324:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <SUBGHZSPI_Init+0x3c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0b      	ldr	r2, [pc, #44]	@ (8004358 <SUBGHZSPI_Init+0x3c>)
 800432a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800432e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004330:	4a09      	ldr	r2, [pc, #36]	@ (8004358 <SUBGHZSPI_Init+0x3c>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004338:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800433a:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <SUBGHZSPI_Init+0x3c>)
 800433c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004340:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004342:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <SUBGHZSPI_Init+0x3c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a04      	ldr	r2, [pc, #16]	@ (8004358 <SUBGHZSPI_Init+0x3c>)
 8004348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800434c:	6013      	str	r3, [r2, #0]
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	58010000 	.word	0x58010000

0800435c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800436c:	4b23      	ldr	r3, [pc, #140]	@ (80043fc <SUBGHZSPI_Transmit+0xa0>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	0cdb      	lsrs	r3, r3, #19
 800437a:	2264      	movs	r2, #100	@ 0x64
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d105      	bne.n	8004394 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	609a      	str	r2, [r3, #8]
      break;
 8004392:	e008      	b.n	80043a6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3b01      	subs	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800439a:	4b19      	ldr	r3, [pc, #100]	@ (8004400 <SUBGHZSPI_Transmit+0xa4>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d1ed      	bne.n	8004382 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80043a6:	4b17      	ldr	r3, [pc, #92]	@ (8004404 <SUBGHZSPI_Transmit+0xa8>)
 80043a8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <SUBGHZSPI_Transmit+0xa0>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	0cdb      	lsrs	r3, r3, #19
 80043be:	2264      	movs	r2, #100	@ 0x64
 80043c0:	fb02 f303 	mul.w	r3, r2, r3
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	609a      	str	r2, [r3, #8]
      break;
 80043d6:	e008      	b.n	80043ea <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3b01      	subs	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80043de:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <SUBGHZSPI_Transmit+0xa4>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d1ed      	bne.n	80043c6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80043ea:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <SUBGHZSPI_Transmit+0xa4>)
 80043ec:	68db      	ldr	r3, [r3, #12]

  return status;
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000
 8004400:	58010000 	.word	0x58010000
 8004404:	5801000c 	.word	0x5801000c

08004408 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004416:	4b25      	ldr	r3, [pc, #148]	@ (80044ac <SUBGHZSPI_Receive+0xa4>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	0cdb      	lsrs	r3, r3, #19
 8004424:	2264      	movs	r2, #100	@ 0x64
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	609a      	str	r2, [r3, #8]
      break;
 800443c:	e008      	b.n	8004450 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3b01      	subs	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004444:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <SUBGHZSPI_Receive+0xa8>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d1ed      	bne.n	800442c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004450:	4b18      	ldr	r3, [pc, #96]	@ (80044b4 <SUBGHZSPI_Receive+0xac>)
 8004452:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	22ff      	movs	r2, #255	@ 0xff
 8004458:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800445a:	4b14      	ldr	r3, [pc, #80]	@ (80044ac <SUBGHZSPI_Receive+0xa4>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	0cdb      	lsrs	r3, r3, #19
 8004468:	2264      	movs	r2, #100	@ 0x64
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d105      	bne.n	8004482 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	609a      	str	r2, [r3, #8]
      break;
 8004480:	e008      	b.n	8004494 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3b01      	subs	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004488:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <SUBGHZSPI_Receive+0xa8>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d1ed      	bne.n	8004470 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004494:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <SUBGHZSPI_Receive+0xa8>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	701a      	strb	r2, [r3, #0]

  return status;
 800449e:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000000 	.word	0x20000000
 80044b0:	58010000 	.word	0x58010000
 80044b4:	5801000c 	.word	0x5801000c

080044b8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	791b      	ldrb	r3, [r3, #4]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d111      	bne.n	80044ec <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80044c8:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <SUBGHZ_CheckDeviceReady+0x44>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044d8:	f7ff fbec 	bl	8003cb4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f9      	bne.n	80044dc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044e8:	f7ff fbd4 	bl	8003c94 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f807 	bl	8004500 <SUBGHZ_WaitOnBusy>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000000 	.word	0x20000000

08004500 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800450c:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <SUBGHZ_WaitOnBusy+0x58>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4613      	mov	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4413      	add	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	0d1b      	lsrs	r3, r3, #20
 800451a:	2264      	movs	r2, #100	@ 0x64
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004522:	f7ff fbf5 	bl	8003d10 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004526:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	609a      	str	r2, [r3, #8]
      break;
 8004538:	e009      	b.n	800454e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3b01      	subs	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004540:	f7ff fbd4 	bl	8003cec <LL_PWR_IsActiveFlag_RFBUSYS>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	4013      	ands	r3, r2
 800454a:	2b01      	cmp	r3, #1
 800454c:	d0e9      	beq.n	8004522 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000000 	.word	0x20000000

0800455c <LL_RCC_GetUSARTClockSource>:
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004568:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	401a      	ands	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	041b      	lsls	r3, r3, #16
 8004574:	4313      	orrs	r3, r2
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <LL_RCC_GetLPUARTClockSource>:
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800458c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4013      	ands	r3, r2
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e042      	b.n	8004636 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd fb40 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	@ 0x24
 80045cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fb23 	bl	8004c34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8ac 	bl	800474c <UART_SetConfig>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e01b      	b.n	8004636 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800460c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800461c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fba1 	bl	8004d76 <UART_CheckIdleState>
 8004634:	4603      	mov	r3, r0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b08a      	sub	sp, #40	@ 0x28
 8004642:	af02      	add	r7, sp, #8
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	2b20      	cmp	r3, #32
 8004656:	d173      	bne.n	8004740 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_UART_Transmit+0x26>
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e06c      	b.n	8004742 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2221      	movs	r2, #33	@ 0x21
 8004674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004678:	f7fd fcac 	bl	8001fd4 <HAL_GetTick>
 800467c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	88fa      	ldrh	r2, [r7, #6]
 8004682:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004696:	d108      	bne.n	80046aa <HAL_UART_Transmit+0x6c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e003      	b.n	80046b2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b2:	e02c      	b.n	800470e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2180      	movs	r1, #128	@ 0x80
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fba7 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e039      	b.n	8004742 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	3302      	adds	r3, #2
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	e007      	b.n	80046fc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	3301      	adds	r3, #1
 80046fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1cc      	bne.n	80046b4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	2140      	movs	r1, #64	@ 0x40
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fb74 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e006      	b.n	8004742 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800474c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004750:	b08c      	sub	sp, #48	@ 0x30
 8004752:	af00      	add	r7, sp, #0
 8004754:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	431a      	orrs	r2, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	431a      	orrs	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	4313      	orrs	r3, r2
 8004772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b94      	ldr	r3, [pc, #592]	@ (80049cc <UART_SetConfig+0x280>)
 800477c:	4013      	ands	r3, r2
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004784:	430b      	orrs	r3, r1
 8004786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a89      	ldr	r2, [pc, #548]	@ (80049d0 <UART_SetConfig+0x284>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b4:	4313      	orrs	r3, r2
 80047b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80047c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d6:	f023 010f 	bic.w	r1, r3, #15
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7a      	ldr	r2, [pc, #488]	@ (80049d4 <UART_SetConfig+0x288>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d127      	bne.n	8004840 <UART_SetConfig+0xf4>
 80047f0:	2003      	movs	r0, #3
 80047f2:	f7ff feb3 	bl	800455c <LL_RCC_GetUSARTClockSource>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d81b      	bhi.n	8004838 <UART_SetConfig+0xec>
 8004800:	a201      	add	r2, pc, #4	@ (adr r2, 8004808 <UART_SetConfig+0xbc>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	08004819 	.word	0x08004819
 800480c:	08004829 	.word	0x08004829
 8004810:	08004821 	.word	0x08004821
 8004814:	08004831 	.word	0x08004831
 8004818:	2301      	movs	r3, #1
 800481a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800481e:	e080      	b.n	8004922 <UART_SetConfig+0x1d6>
 8004820:	2302      	movs	r3, #2
 8004822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004826:	e07c      	b.n	8004922 <UART_SetConfig+0x1d6>
 8004828:	2304      	movs	r3, #4
 800482a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800482e:	e078      	b.n	8004922 <UART_SetConfig+0x1d6>
 8004830:	2308      	movs	r3, #8
 8004832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004836:	e074      	b.n	8004922 <UART_SetConfig+0x1d6>
 8004838:	2310      	movs	r3, #16
 800483a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800483e:	e070      	b.n	8004922 <UART_SetConfig+0x1d6>
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a64      	ldr	r2, [pc, #400]	@ (80049d8 <UART_SetConfig+0x28c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d138      	bne.n	80048bc <UART_SetConfig+0x170>
 800484a:	200c      	movs	r0, #12
 800484c:	f7ff fe86 	bl	800455c <LL_RCC_GetUSARTClockSource>
 8004850:	4603      	mov	r3, r0
 8004852:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d82c      	bhi.n	80048b4 <UART_SetConfig+0x168>
 800485a:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <UART_SetConfig+0x114>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004895 	.word	0x08004895
 8004864:	080048b5 	.word	0x080048b5
 8004868:	080048b5 	.word	0x080048b5
 800486c:	080048b5 	.word	0x080048b5
 8004870:	080048a5 	.word	0x080048a5
 8004874:	080048b5 	.word	0x080048b5
 8004878:	080048b5 	.word	0x080048b5
 800487c:	080048b5 	.word	0x080048b5
 8004880:	0800489d 	.word	0x0800489d
 8004884:	080048b5 	.word	0x080048b5
 8004888:	080048b5 	.word	0x080048b5
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048ad 	.word	0x080048ad
 8004894:	2300      	movs	r3, #0
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800489a:	e042      	b.n	8004922 <UART_SetConfig+0x1d6>
 800489c:	2302      	movs	r3, #2
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a2:	e03e      	b.n	8004922 <UART_SetConfig+0x1d6>
 80048a4:	2304      	movs	r3, #4
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048aa:	e03a      	b.n	8004922 <UART_SetConfig+0x1d6>
 80048ac:	2308      	movs	r3, #8
 80048ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b2:	e036      	b.n	8004922 <UART_SetConfig+0x1d6>
 80048b4:	2310      	movs	r3, #16
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ba:	e032      	b.n	8004922 <UART_SetConfig+0x1d6>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a43      	ldr	r2, [pc, #268]	@ (80049d0 <UART_SetConfig+0x284>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d12a      	bne.n	800491c <UART_SetConfig+0x1d0>
 80048c6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80048ca:	f7ff fe59 	bl	8004580 <LL_RCC_GetLPUARTClockSource>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048d4:	d01a      	beq.n	800490c <UART_SetConfig+0x1c0>
 80048d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048da:	d81b      	bhi.n	8004914 <UART_SetConfig+0x1c8>
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e0:	d00c      	beq.n	80048fc <UART_SetConfig+0x1b0>
 80048e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e6:	d815      	bhi.n	8004914 <UART_SetConfig+0x1c8>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <UART_SetConfig+0x1a8>
 80048ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f0:	d008      	beq.n	8004904 <UART_SetConfig+0x1b8>
 80048f2:	e00f      	b.n	8004914 <UART_SetConfig+0x1c8>
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fa:	e012      	b.n	8004922 <UART_SetConfig+0x1d6>
 80048fc:	2302      	movs	r3, #2
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004902:	e00e      	b.n	8004922 <UART_SetConfig+0x1d6>
 8004904:	2304      	movs	r3, #4
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490a:	e00a      	b.n	8004922 <UART_SetConfig+0x1d6>
 800490c:	2308      	movs	r3, #8
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004912:	e006      	b.n	8004922 <UART_SetConfig+0x1d6>
 8004914:	2310      	movs	r3, #16
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491a:	e002      	b.n	8004922 <UART_SetConfig+0x1d6>
 800491c:	2310      	movs	r3, #16
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2a      	ldr	r2, [pc, #168]	@ (80049d0 <UART_SetConfig+0x284>)
 8004928:	4293      	cmp	r3, r2
 800492a:	f040 80a4 	bne.w	8004a76 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800492e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004932:	2b08      	cmp	r3, #8
 8004934:	d823      	bhi.n	800497e <UART_SetConfig+0x232>
 8004936:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <UART_SetConfig+0x1f0>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004961 	.word	0x08004961
 8004940:	0800497f 	.word	0x0800497f
 8004944:	08004969 	.word	0x08004969
 8004948:	0800497f 	.word	0x0800497f
 800494c:	0800496f 	.word	0x0800496f
 8004950:	0800497f 	.word	0x0800497f
 8004954:	0800497f 	.word	0x0800497f
 8004958:	0800497f 	.word	0x0800497f
 800495c:	08004977 	.word	0x08004977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004960:	f7fe fea0 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8004964:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004966:	e010      	b.n	800498a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004968:	4b1c      	ldr	r3, [pc, #112]	@ (80049dc <UART_SetConfig+0x290>)
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800496c:	e00d      	b.n	800498a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496e:	f7fe fde5 	bl	800353c <HAL_RCC_GetSysClockFreq>
 8004972:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004974:	e009      	b.n	800498a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800497c:	e005      	b.n	800498a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004988:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8137 	beq.w	8004c00 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	4a12      	ldr	r2, [pc, #72]	@ (80049e0 <UART_SetConfig+0x294>)
 8004998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800499c:	461a      	mov	r2, r3
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4413      	add	r3, r2
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d305      	bcc.n	80049c2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d910      	bls.n	80049e4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80049c8:	e11a      	b.n	8004c00 <UART_SetConfig+0x4b4>
 80049ca:	bf00      	nop
 80049cc:	cfff69f3 	.word	0xcfff69f3
 80049d0:	40008000 	.word	0x40008000
 80049d4:	40013800 	.word	0x40013800
 80049d8:	40004400 	.word	0x40004400
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	0800aa4c 	.word	0x0800aa4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	2200      	movs	r2, #0
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	60fa      	str	r2, [r7, #12]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	4a8e      	ldr	r2, [pc, #568]	@ (8004c2c <UART_SetConfig+0x4e0>)
 80049f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2200      	movs	r2, #0
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a06:	f7fc fb75 	bl	80010f4 <__aeabi_uldivmod>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	020b      	lsls	r3, r1, #8
 8004a1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a20:	0202      	lsls	r2, r0, #8
 8004a22:	6979      	ldr	r1, [r7, #20]
 8004a24:	6849      	ldr	r1, [r1, #4]
 8004a26:	0849      	lsrs	r1, r1, #1
 8004a28:	2000      	movs	r0, #0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	eb12 0804 	adds.w	r8, r2, r4
 8004a32:	eb43 0905 	adc.w	r9, r3, r5
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	469a      	mov	sl, r3
 8004a3e:	4693      	mov	fp, r2
 8004a40:	4652      	mov	r2, sl
 8004a42:	465b      	mov	r3, fp
 8004a44:	4640      	mov	r0, r8
 8004a46:	4649      	mov	r1, r9
 8004a48:	f7fc fb54 	bl	80010f4 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a5a:	d308      	bcc.n	8004a6e <UART_SetConfig+0x322>
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a62:	d204      	bcs.n	8004a6e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	e0c8      	b.n	8004c00 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a74:	e0c4      	b.n	8004c00 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a7e:	d167      	bne.n	8004b50 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004a80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d828      	bhi.n	8004ada <UART_SetConfig+0x38e>
 8004a88:	a201      	add	r2, pc, #4	@ (adr r2, 8004a90 <UART_SetConfig+0x344>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004adb 	.word	0x08004adb
 8004aa0:	08004acb 	.word	0x08004acb
 8004aa4:	08004adb 	.word	0x08004adb
 8004aa8:	08004adb 	.word	0x08004adb
 8004aac:	08004adb 	.word	0x08004adb
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7fe fdf6 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004aba:	e014      	b.n	8004ae6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7fe fe04 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ac2:	e010      	b.n	8004ae6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ac8:	e00d      	b.n	8004ae6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aca:	f7fe fd37 	bl	800353c <HAL_RCC_GetSysClockFreq>
 8004ace:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ad0:	e009      	b.n	8004ae6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ad8:	e005      	b.n	8004ae6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8089 	beq.w	8004c00 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	4a4e      	ldr	r2, [pc, #312]	@ (8004c2c <UART_SetConfig+0x4e0>)
 8004af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b00:	005a      	lsls	r2, r3, #1
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	441a      	add	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b0f      	cmp	r3, #15
 8004b18:	d916      	bls.n	8004b48 <UART_SetConfig+0x3fc>
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b20:	d212      	bcs.n	8004b48 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f023 030f 	bic.w	r3, r3, #15
 8004b2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	8bfb      	ldrh	r3, [r7, #30]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	8bfa      	ldrh	r2, [r7, #30]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	e05b      	b.n	8004c00 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b4e:	e057      	b.n	8004c00 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d828      	bhi.n	8004baa <UART_SetConfig+0x45e>
 8004b58:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <UART_SetConfig+0x414>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b95 	.word	0x08004b95
 8004b6c:	08004bab 	.word	0x08004bab
 8004b70:	08004b9b 	.word	0x08004b9b
 8004b74:	08004bab 	.word	0x08004bab
 8004b78:	08004bab 	.word	0x08004bab
 8004b7c:	08004bab 	.word	0x08004bab
 8004b80:	08004ba3 	.word	0x08004ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b84:	f7fe fd8e 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b8a:	e014      	b.n	8004bb6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b8c:	f7fe fd9c 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8004b90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b92:	e010      	b.n	8004bb6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b94:	4b26      	ldr	r3, [pc, #152]	@ (8004c30 <UART_SetConfig+0x4e4>)
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b98:	e00d      	b.n	8004bb6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9a:	f7fe fccf 	bl	800353c <HAL_RCC_GetSysClockFreq>
 8004b9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ba0:	e009      	b.n	8004bb6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ba8:	e005      	b.n	8004bb6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bb4:	bf00      	nop
    }

    if (pclk != 0U)
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d021      	beq.n	8004c00 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c2c <UART_SetConfig+0x4e0>)
 8004bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	441a      	add	r2, r3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	2b0f      	cmp	r3, #15
 8004be4:	d909      	bls.n	8004bfa <UART_SetConfig+0x4ae>
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bec:	d205      	bcs.n	8004bfa <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	e002      	b.n	8004c00 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3730      	adds	r7, #48	@ 0x30
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	0800aa4c 	.word	0x0800aa4c
 8004c30:	00f42400 	.word	0x00f42400

08004c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01a      	beq.n	8004d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d32:	d10a      	bne.n	8004d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af02      	add	r7, sp, #8
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d86:	f7fd f925 	bl	8001fd4 <HAL_GetTick>
 8004d8a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d10e      	bne.n	8004db8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f832 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e028      	b.n	8004e0a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d10e      	bne.n	8004de4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f81c 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e012      	b.n	8004e0a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b09c      	sub	sp, #112	@ 0x70
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	e0af      	b.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e2a:	f000 80ab 	beq.w	8004f84 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2e:	f7fd f8d1 	bl	8001fd4 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d302      	bcc.n	8004e44 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d140      	bne.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e54:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e58:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e64:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e6      	bne.n	8004e44 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e96:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e98:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e5      	bne.n	8004e76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e06f      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d057      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x172>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b80      	cmp	r3, #128	@ 0x80
 8004ed8:	d054      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x172>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b40      	cmp	r3, #64	@ 0x40
 8004ede:	d051      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eee:	d149      	bne.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ef8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f1a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e6      	bne.n	8004efa <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3308      	adds	r3, #8
 8004f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3308      	adds	r3, #8
 8004f4a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004f4c:	623a      	str	r2, [r7, #32]
 8004f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	69f9      	ldr	r1, [r7, #28]
 8004f52:	6a3a      	ldr	r2, [r7, #32]
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e5      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e010      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	f43f af40 	beq.w	8004e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3770      	adds	r7, #112	@ 0x70
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e027      	b.n	8005014 <HAL_UARTEx_DisableFifoMode+0x66>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2224      	movs	r2, #36	@ 0x24
 8004fd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0201 	bic.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004ff2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005032:	2302      	movs	r3, #2
 8005034:	e02d      	b.n	8005092 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2224      	movs	r2, #36	@ 0x24
 8005042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f850 	bl	8005118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e02d      	b.n	800510e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2224      	movs	r2, #36	@ 0x24
 80050be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f812 	bl	8005118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005124:	2b00      	cmp	r3, #0
 8005126:	d108      	bne.n	800513a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005138:	e031      	b.n	800519e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800513a:	2308      	movs	r3, #8
 800513c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800513e:	2308      	movs	r3, #8
 8005140:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	0e5b      	lsrs	r3, r3, #25
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	0f5b      	lsrs	r3, r3, #29
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005162:	7bbb      	ldrb	r3, [r7, #14]
 8005164:	7b3a      	ldrb	r2, [r7, #12]
 8005166:	4910      	ldr	r1, [pc, #64]	@ (80051a8 <UARTEx_SetNbDataToProcess+0x90>)
 8005168:	5c8a      	ldrb	r2, [r1, r2]
 800516a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800516e:	7b3a      	ldrb	r2, [r7, #12]
 8005170:	490e      	ldr	r1, [pc, #56]	@ (80051ac <UARTEx_SetNbDataToProcess+0x94>)
 8005172:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005174:	fb93 f3f2 	sdiv	r3, r3, r2
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	7b7a      	ldrb	r2, [r7, #13]
 8005184:	4908      	ldr	r1, [pc, #32]	@ (80051a8 <UARTEx_SetNbDataToProcess+0x90>)
 8005186:	5c8a      	ldrb	r2, [r1, r2]
 8005188:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800518c:	7b7a      	ldrb	r2, [r7, #13]
 800518e:	4907      	ldr	r1, [pc, #28]	@ (80051ac <UARTEx_SetNbDataToProcess+0x94>)
 8005190:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005192:	fb93 f3f2 	sdiv	r3, r3, r2
 8005196:	b29a      	uxth	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr
 80051a8:	0800aa64 	.word	0x0800aa64
 80051ac:	0800aa6c 	.word	0x0800aa6c

080051b0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80051b4:	f7fc fe3c 	bl	8001e30 <BSP_RADIO_Init>
 80051b8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	bd80      	pop	{r7, pc}

080051be <RBI_GetTxConfig>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_GetTxConfig(void)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80051c2:	f7fc fe73 	bl	8001eac <BSP_RADIO_GetTxConfig>
 80051c6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}

080051cc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80051d0:	f7fc fe73 	bl	8001eba <BSP_RADIO_IsTCXO>
 80051d4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	bd80      	pop	{r7, pc}

080051da <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80051de:	f7fc fe73 	bl	8001ec8 <BSP_RADIO_IsDCDC>
 80051e2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fc fe6e 	bl	8001ed6 <BSP_RADIO_GetRFOMaxPowerConfig>
 80051fa:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8005212:	4a1d      	ldr	r2, [pc, #116]	@ (8005288 <SUBGRF_Init+0x84>)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8005218:	f7fc fbca 	bl	80019b0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800521c:	2002      	movs	r0, #2
 800521e:	f000 fe91 	bl	8005f44 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8005222:	4b1a      	ldr	r3, [pc, #104]	@ (800528c <SUBGRF_Init+0x88>)
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8005228:	2000      	movs	r0, #0
 800522a:	f000 f895 	bl	8005358 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800522e:	f7ff ffcd 	bl	80051cc <RBI_IsTCXO>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10e      	bne.n	8005256 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8005238:	2140      	movs	r1, #64	@ 0x40
 800523a:	2001      	movs	r0, #1
 800523c:	f000 f9ba 	bl	80055b4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8005240:	2100      	movs	r1, #0
 8005242:	f640 1011 	movw	r0, #2321	@ 0x911
 8005246:	f000 fcf9 	bl	8005c3c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800524a:	237f      	movs	r3, #127	@ 0x7f
 800524c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800524e:	7b38      	ldrb	r0, [r7, #12]
 8005250:	f000 f8be 	bl	80053d0 <SUBGRF_Calibrate>
 8005254:	e009      	b.n	800526a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005256:	2120      	movs	r1, #32
 8005258:	f640 1011 	movw	r0, #2321	@ 0x911
 800525c:	f000 fcee 	bl	8005c3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005260:	2120      	movs	r1, #32
 8005262:	f640 1012 	movw	r0, #2322	@ 0x912
 8005266:	f000 fce9 	bl	8005c3c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800526a:	210e      	movs	r1, #14
 800526c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8005270:	f000 fce4 	bl	8005c3c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8005274:	f7ff ff9c 	bl	80051b0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8005278:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <SUBGRF_Init+0x8c>)
 800527a:	2201      	movs	r2, #1
 800527c:	701a      	strb	r2, [r3, #0]
}
 800527e:	bf00      	nop
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	200003b0 	.word	0x200003b0
 800528c:	200003ac 	.word	0x200003ac
 8005290:	200003a4 	.word	0x200003a4

08005294 <SUBGRF_GetPayload>:
{
    SUBGRF_WriteBuffer( 0x00, payload, size );
}

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80052a6:	f107 0317 	add.w	r3, r7, #23
 80052aa:	4619      	mov	r1, r3
 80052ac:	68b8      	ldr	r0, [r7, #8]
 80052ae:	f000 fc47 	bl	8005b40 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	79fa      	ldrb	r2, [r7, #7]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d201      	bcs.n	80052c0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80052bc:	2301      	movs	r3, #1
 80052be:	e007      	b.n	80052d0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80052c0:	7df8      	ldrb	r0, [r7, #23]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	68f9      	ldr	r1, [r7, #12]
 80052ca:	f000 fd01 	bl	8005cd0 <SUBGRF_ReadBuffer>

    return 0;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	0a1b      	lsrs	r3, r3, #8
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80052f2:	f000 f9e3 	bl	80056bc <SUBGRF_GetPacketType>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d108      	bne.n	800530e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	2202      	movs	r2, #2
 8005302:	4619      	mov	r1, r3
 8005304:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8005308:	f000 fcc0 	bl	8005c8c <SUBGRF_WriteRegisters>
            break;
 800530c:	e000      	b.n	8005310 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800530e:	bf00      	nop
    }
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	0a1b      	lsrs	r3, r3, #8
 8005326:	b29b      	uxth	r3, r3
 8005328:	b2db      	uxtb	r3, r3
 800532a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8005332:	f000 f9c3 	bl	80056bc <SUBGRF_GetPacketType>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d108      	bne.n	800534e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800533c:	f107 030c 	add.w	r3, r7, #12
 8005340:	2202      	movs	r2, #2
 8005342:	4619      	mov	r1, r3
 8005344:	f240 60be 	movw	r0, #1726	@ 0x6be
 8005348:	f000 fca0 	bl	8005c8c <SUBGRF_WriteRegisters>
            break;
 800534c:	e000      	b.n	8005350 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800534e:	bf00      	nop
    }
}
 8005350:	bf00      	nop
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8005362:	1dfb      	adds	r3, r7, #7
 8005364:	2201      	movs	r2, #1
 8005366:	4619      	mov	r1, r3
 8005368:	2080      	movs	r0, #128	@ 0x80
 800536a:	f000 fcd3 	bl	8005d14 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d103      	bne.n	800537c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <SUBGRF_SetStandby+0x34>)
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800537a:	e002      	b.n	8005382 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800537c:	4b03      	ldr	r3, [pc, #12]	@ (800538c <SUBGRF_SetStandby+0x34>)
 800537e:	2202      	movs	r2, #2
 8005380:	701a      	strb	r2, [r3, #0]
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	200003a4 	.word	0x200003a4

08005390 <SUBGRF_SetRx>:
    buf[2] = ( uint8_t )( timeout & 0xFF );
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
}

void SUBGRF_SetRx( uint32_t timeout )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8005398:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <SUBGRF_SetRx+0x3c>)
 800539a:	2205      	movs	r2, #5
 800539c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80053b4:	f107 030c 	add.w	r3, r7, #12
 80053b8:	2203      	movs	r2, #3
 80053ba:	4619      	mov	r1, r3
 80053bc:	2082      	movs	r0, #130	@ 0x82
 80053be:	f000 fca9 	bl	8005d14 <SUBGRF_WriteCommand>
}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200003a4 	.word	0x200003a4

080053d0 <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80053d8:	793b      	ldrb	r3, [r7, #4]
 80053da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	b25b      	sxtb	r3, r3
 80053e2:	019b      	lsls	r3, r3, #6
 80053e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80053e6:	793b      	ldrb	r3, [r7, #4]
 80053e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053ec:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80053ee:	b25b      	sxtb	r3, r3
 80053f0:	015b      	lsls	r3, r3, #5
 80053f2:	b25b      	sxtb	r3, r3
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80053f8:	793b      	ldrb	r3, [r7, #4]
 80053fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053fe:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8005400:	b25b      	sxtb	r3, r3
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	b25b      	sxtb	r3, r3
 8005406:	4313      	orrs	r3, r2
 8005408:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800540a:	793b      	ldrb	r3, [r7, #4]
 800540c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005410:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8005412:	b25b      	sxtb	r3, r3
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	b25b      	sxtb	r3, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800541c:	793b      	ldrb	r3, [r7, #4]
 800541e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005422:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8005424:	b25b      	sxtb	r3, r3
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	b25b      	sxtb	r3, r3
 800542a:	4313      	orrs	r3, r2
 800542c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800542e:	793b      	ldrb	r3, [r7, #4]
 8005430:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005434:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8005436:	b25b      	sxtb	r3, r3
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	b25b      	sxtb	r3, r3
 800543c:	4313      	orrs	r3, r2
 800543e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8005440:	793b      	ldrb	r3, [r7, #4]
 8005442:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005446:	b2db      	uxtb	r3, r3
 8005448:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800544a:	4313      	orrs	r3, r2
 800544c:	b25b      	sxtb	r3, r3
 800544e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8005450:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8005452:	f107 030f 	add.w	r3, r7, #15
 8005456:	2201      	movs	r2, #1
 8005458:	4619      	mov	r1, r3
 800545a:	2089      	movs	r0, #137	@ 0x89
 800545c:	f000 fc5a 	bl	8005d14 <SUBGRF_WriteCommand>
}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a1d      	ldr	r2, [pc, #116]	@ (80054e8 <SUBGRF_CalibrateImage+0x80>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d904      	bls.n	8005482 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8005478:	23e1      	movs	r3, #225	@ 0xe1
 800547a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800547c:	23e9      	movs	r3, #233	@ 0xe9
 800547e:	737b      	strb	r3, [r7, #13]
 8005480:	e027      	b.n	80054d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a19      	ldr	r2, [pc, #100]	@ (80054ec <SUBGRF_CalibrateImage+0x84>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d904      	bls.n	8005494 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800548a:	23d7      	movs	r3, #215	@ 0xd7
 800548c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800548e:	23db      	movs	r3, #219	@ 0xdb
 8005490:	737b      	strb	r3, [r7, #13]
 8005492:	e01e      	b.n	80054d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a16      	ldr	r2, [pc, #88]	@ (80054f0 <SUBGRF_CalibrateImage+0x88>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d904      	bls.n	80054a6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800549c:	23c1      	movs	r3, #193	@ 0xc1
 800549e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80054a0:	23c5      	movs	r3, #197	@ 0xc5
 80054a2:	737b      	strb	r3, [r7, #13]
 80054a4:	e015      	b.n	80054d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a12      	ldr	r2, [pc, #72]	@ (80054f4 <SUBGRF_CalibrateImage+0x8c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d904      	bls.n	80054b8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80054ae:	2375      	movs	r3, #117	@ 0x75
 80054b0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80054b2:	2381      	movs	r3, #129	@ 0x81
 80054b4:	737b      	strb	r3, [r7, #13]
 80054b6:	e00c      	b.n	80054d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a0f      	ldr	r2, [pc, #60]	@ (80054f8 <SUBGRF_CalibrateImage+0x90>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d904      	bls.n	80054ca <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80054c0:	236b      	movs	r3, #107	@ 0x6b
 80054c2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80054c4:	236f      	movs	r3, #111	@ 0x6f
 80054c6:	737b      	strb	r3, [r7, #13]
 80054c8:	e003      	b.n	80054d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80054ca:	2329      	movs	r3, #41	@ 0x29
 80054cc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80054ce:	232b      	movs	r3, #43	@ 0x2b
 80054d0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80054d2:	f107 030c 	add.w	r3, r7, #12
 80054d6:	2202      	movs	r2, #2
 80054d8:	4619      	mov	r1, r3
 80054da:	2098      	movs	r0, #152	@ 0x98
 80054dc:	f000 fc1a 	bl	8005d14 <SUBGRF_WriteCommand>
}
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	35a4e900 	.word	0x35a4e900
 80054ec:	32a9f880 	.word	0x32a9f880
 80054f0:	2de54480 	.word	0x2de54480
 80054f4:	1b6b0b00 	.word	0x1b6b0b00
 80054f8:	1954fc40 	.word	0x1954fc40

080054fc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	4623      	mov	r3, r4
 800550c:	71fb      	strb	r3, [r7, #7]
 800550e:	4603      	mov	r3, r0
 8005510:	71bb      	strb	r3, [r7, #6]
 8005512:	460b      	mov	r3, r1
 8005514:	717b      	strb	r3, [r7, #5]
 8005516:	4613      	mov	r3, r2
 8005518:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800551e:	79bb      	ldrb	r3, [r7, #6]
 8005520:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8005522:	797b      	ldrb	r3, [r7, #5]
 8005524:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8005526:	793b      	ldrb	r3, [r7, #4]
 8005528:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	2204      	movs	r2, #4
 8005530:	4619      	mov	r1, r3
 8005532:	2095      	movs	r0, #149	@ 0x95
 8005534:	f000 fbee 	bl	8005d14 <SUBGRF_WriteCommand>
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	bd90      	pop	{r4, r7, pc}

08005540 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	4604      	mov	r4, r0
 8005548:	4608      	mov	r0, r1
 800554a:	4611      	mov	r1, r2
 800554c:	461a      	mov	r2, r3
 800554e:	4623      	mov	r3, r4
 8005550:	80fb      	strh	r3, [r7, #6]
 8005552:	4603      	mov	r3, r0
 8005554:	80bb      	strh	r3, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	807b      	strh	r3, [r7, #2]
 800555a:	4613      	mov	r3, r2
 800555c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	b29b      	uxth	r3, r3
 8005564:	b2db      	uxtb	r3, r3
 8005566:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800556e:	88bb      	ldrh	r3, [r7, #4]
 8005570:	0a1b      	lsrs	r3, r3, #8
 8005572:	b29b      	uxth	r3, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8005578:	88bb      	ldrh	r3, [r7, #4]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800557e:	887b      	ldrh	r3, [r7, #2]
 8005580:	0a1b      	lsrs	r3, r3, #8
 8005582:	b29b      	uxth	r3, r3
 8005584:	b2db      	uxtb	r3, r3
 8005586:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8005588:	887b      	ldrh	r3, [r7, #2]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800558e:	883b      	ldrh	r3, [r7, #0]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	b29b      	uxth	r3, r3
 8005594:	b2db      	uxtb	r3, r3
 8005596:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8005598:	883b      	ldrh	r3, [r7, #0]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800559e:	f107 0308 	add.w	r3, r7, #8
 80055a2:	2208      	movs	r2, #8
 80055a4:	4619      	mov	r1, r3
 80055a6:	2008      	movs	r0, #8
 80055a8:	f000 fbb4 	bl	8005d14 <SUBGRF_WriteCommand>
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd90      	pop	{r4, r7, pc}

080055b4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	6039      	str	r1, [r7, #0]
 80055be:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	0c1b      	lsrs	r3, r3, #16
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80055e0:	f107 030c 	add.w	r3, r7, #12
 80055e4:	2204      	movs	r2, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	2097      	movs	r0, #151	@ 0x97
 80055ea:	f000 fb93 	bl	8005d14 <SUBGRF_WriteCommand>
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80055f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8005606:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <SUBGRF_SetRfFrequency+0x84>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	f083 0301 	eor.w	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ff27 	bl	8005468 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800561a:	4b18      	ldr	r3, [pc, #96]	@ (800567c <SUBGRF_SetRfFrequency+0x84>)
 800561c:	2201      	movs	r2, #1
 800561e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	461c      	mov	r4, r3
 8005626:	4615      	mov	r5, r2
 8005628:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800562c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8005630:	4a13      	ldr	r2, [pc, #76]	@ (8005680 <SUBGRF_SetRfFrequency+0x88>)
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	4640      	mov	r0, r8
 8005638:	4649      	mov	r1, r9
 800563a:	f7fb fd5b 	bl	80010f4 <__aeabi_uldivmod>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4613      	mov	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	0e1b      	lsrs	r3, r3, #24
 800564a:	b2db      	uxtb	r3, r3
 800564c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	b2db      	uxtb	r3, r3
 8005654:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	0a1b      	lsrs	r3, r3, #8
 800565a:	b2db      	uxtb	r3, r3
 800565c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8005664:	f107 0308 	add.w	r3, r7, #8
 8005668:	2204      	movs	r2, #4
 800566a:	4619      	mov	r1, r3
 800566c:	2086      	movs	r0, #134	@ 0x86
 800566e:	f000 fb51 	bl	8005d14 <SUBGRF_WriteCommand>
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800567c:	200003ac 	.word	0x200003ac
 8005680:	01e84800 	.word	0x01e84800

08005684 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800568e:	79fa      	ldrb	r2, [r7, #7]
 8005690:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <SUBGRF_SetPacketType+0x34>)
 8005692:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800569a:	2100      	movs	r1, #0
 800569c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80056a0:	f000 facc 	bl	8005c3c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80056a4:	1dfb      	adds	r3, r7, #7
 80056a6:	2201      	movs	r2, #1
 80056a8:	4619      	mov	r1, r3
 80056aa:	208a      	movs	r0, #138	@ 0x8a
 80056ac:	f000 fb32 	bl	8005d14 <SUBGRF_WriteCommand>
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	200003a5 	.word	0x200003a5

080056bc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
    return PacketType;
 80056c0:	4b02      	ldr	r3, [pc, #8]	@ (80056cc <SUBGRF_GetPacketType+0x10>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	200003a5 	.word	0x200003a5

080056d0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	71fb      	strb	r3, [r7, #7]
 80056da:	460b      	mov	r3, r1
 80056dc:	71bb      	strb	r3, [r7, #6]
 80056de:	4613      	mov	r3, r2
 80056e0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d149      	bne.n	800577c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80056e8:	2000      	movs	r0, #0
 80056ea:	f7ff fd7d 	bl	80051e8 <RBI_GetRFOMaxPowerConfig>
 80056ee:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80056f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	da01      	bge.n	80056fe <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b0e      	cmp	r3, #14
 8005702:	d10e      	bne.n	8005722 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8005704:	2301      	movs	r3, #1
 8005706:	2201      	movs	r2, #1
 8005708:	2100      	movs	r1, #0
 800570a:	2004      	movs	r0, #4
 800570c:	f7ff fef6 	bl	80054fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8005710:	79ba      	ldrb	r2, [r7, #6]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	b2db      	uxtb	r3, r3
 800571a:	330e      	adds	r3, #14
 800571c:	b2db      	uxtb	r3, r3
 800571e:	71bb      	strb	r3, [r7, #6]
 8005720:	e01f      	b.n	8005762 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b0a      	cmp	r3, #10
 8005726:	d10e      	bne.n	8005746 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8005728:	2301      	movs	r3, #1
 800572a:	2201      	movs	r2, #1
 800572c:	2100      	movs	r1, #0
 800572e:	2001      	movs	r0, #1
 8005730:	f7ff fee4 	bl	80054fc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8005734:	79ba      	ldrb	r2, [r7, #6]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	b2db      	uxtb	r3, r3
 800573e:	330d      	adds	r3, #13
 8005740:	b2db      	uxtb	r3, r3
 8005742:	71bb      	strb	r3, [r7, #6]
 8005744:	e00d      	b.n	8005762 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8005746:	2301      	movs	r3, #1
 8005748:	2201      	movs	r2, #1
 800574a:	2100      	movs	r1, #0
 800574c:	2007      	movs	r0, #7
 800574e:	f7ff fed5 	bl	80054fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8005752:	79ba      	ldrb	r2, [r7, #6]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	b2db      	uxtb	r3, r3
 800575c:	330e      	adds	r3, #14
 800575e:	b2db      	uxtb	r3, r3
 8005760:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8005762:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005766:	f113 0f11 	cmn.w	r3, #17
 800576a:	da01      	bge.n	8005770 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800576c:	23ef      	movs	r3, #239	@ 0xef
 800576e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8005770:	2118      	movs	r1, #24
 8005772:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8005776:	f000 fa61 	bl	8005c3c <SUBGRF_WriteRegister>
 800577a:	e067      	b.n	800584c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800577c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8005780:	f000 fa70 	bl	8005c64 <SUBGRF_ReadRegister>
 8005784:	4603      	mov	r3, r0
 8005786:	f043 031e 	orr.w	r3, r3, #30
 800578a:	b2db      	uxtb	r3, r3
 800578c:	4619      	mov	r1, r3
 800578e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8005792:	f000 fa53 	bl	8005c3c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8005796:	2001      	movs	r0, #1
 8005798:	f7ff fd26 	bl	80051e8 <RBI_GetRFOMaxPowerConfig>
 800579c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800579e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	da01      	bge.n	80057ac <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b14      	cmp	r3, #20
 80057b0:	d10e      	bne.n	80057d0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80057b2:	2301      	movs	r3, #1
 80057b4:	2200      	movs	r2, #0
 80057b6:	2105      	movs	r1, #5
 80057b8:	2003      	movs	r0, #3
 80057ba:	f7ff fe9f 	bl	80054fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80057be:	79ba      	ldrb	r2, [r7, #6]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	3316      	adds	r3, #22
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	71bb      	strb	r3, [r7, #6]
 80057ce:	e031      	b.n	8005834 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b11      	cmp	r3, #17
 80057d4:	d10e      	bne.n	80057f4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80057d6:	2301      	movs	r3, #1
 80057d8:	2200      	movs	r2, #0
 80057da:	2103      	movs	r1, #3
 80057dc:	2002      	movs	r0, #2
 80057de:	f7ff fe8d 	bl	80054fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80057e2:	79ba      	ldrb	r2, [r7, #6]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	3316      	adds	r3, #22
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	71bb      	strb	r3, [r7, #6]
 80057f2:	e01f      	b.n	8005834 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b0e      	cmp	r3, #14
 80057f8:	d10e      	bne.n	8005818 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80057fa:	2301      	movs	r3, #1
 80057fc:	2200      	movs	r2, #0
 80057fe:	2102      	movs	r1, #2
 8005800:	2002      	movs	r0, #2
 8005802:	f7ff fe7b 	bl	80054fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8005806:	79ba      	ldrb	r2, [r7, #6]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	b2db      	uxtb	r3, r3
 8005810:	330e      	adds	r3, #14
 8005812:	b2db      	uxtb	r3, r3
 8005814:	71bb      	strb	r3, [r7, #6]
 8005816:	e00d      	b.n	8005834 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8005818:	2301      	movs	r3, #1
 800581a:	2200      	movs	r2, #0
 800581c:	2107      	movs	r1, #7
 800581e:	2004      	movs	r0, #4
 8005820:	f7ff fe6c 	bl	80054fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8005824:	79ba      	ldrb	r2, [r7, #6]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	3316      	adds	r3, #22
 8005830:	b2db      	uxtb	r3, r3
 8005832:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8005834:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005838:	f113 0f09 	cmn.w	r3, #9
 800583c:	da01      	bge.n	8005842 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800583e:	23f7      	movs	r3, #247	@ 0xf7
 8005840:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8005842:	2138      	movs	r1, #56	@ 0x38
 8005844:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8005848:	f000 f9f8 	bl	8005c3c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800584c:	79bb      	ldrb	r3, [r7, #6]
 800584e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8005850:	797b      	ldrb	r3, [r7, #5]
 8005852:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8005854:	f107 0308 	add.w	r3, r7, #8
 8005858:	2202      	movs	r2, #2
 800585a:	4619      	mov	r1, r3
 800585c:	208e      	movs	r0, #142	@ 0x8e
 800585e:	f000 fa59 	bl	8005d14 <SUBGRF_WriteCommand>
}
 8005862:	bf00      	nop
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800586c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800587a:	f107 0308 	add.w	r3, r7, #8
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	781a      	ldrb	r2, [r3, #0]
 8005888:	4b5c      	ldr	r3, [pc, #368]	@ (80059fc <SUBGRF_SetModulationParams+0x190>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d004      	beq.n	800589a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fef5 	bl	8005684 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b03      	cmp	r3, #3
 80058a0:	f200 80a5 	bhi.w	80059ee <SUBGRF_SetModulationParams+0x182>
 80058a4:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <SUBGRF_SetModulationParams+0x40>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	080058bd 	.word	0x080058bd
 80058b0:	0800597d 	.word	0x0800597d
 80058b4:	0800593f 	.word	0x0800593f
 80058b8:	080059ab 	.word	0x080059ab
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80058bc:	2308      	movs	r3, #8
 80058be:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4a4e      	ldr	r2, [pc, #312]	@ (8005a00 <SUBGRF_SetModulationParams+0x194>)
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	0c1b      	lsrs	r3, r3, #16
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	0a1b      	lsrs	r3, r3, #8
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	7b1b      	ldrb	r3, [r3, #12]
 80058e6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	7b5b      	ldrb	r3, [r3, #13]
 80058ec:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	461c      	mov	r4, r3
 80058f6:	4615      	mov	r5, r2
 80058f8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80058fc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8005900:	4a40      	ldr	r2, [pc, #256]	@ (8005a04 <SUBGRF_SetModulationParams+0x198>)
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	4640      	mov	r0, r8
 8005908:	4649      	mov	r1, r9
 800590a:	f7fb fbf3 	bl	80010f4 <__aeabi_uldivmod>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4613      	mov	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	0c1b      	lsrs	r3, r3, #16
 800591a:	b2db      	uxtb	r3, r3
 800591c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	b2db      	uxtb	r3, r3
 8005924:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	b29a      	uxth	r2, r3
 8005930:	f107 0308 	add.w	r3, r7, #8
 8005934:	4619      	mov	r1, r3
 8005936:	208b      	movs	r0, #139	@ 0x8b
 8005938:	f000 f9ec 	bl	8005d14 <SUBGRF_WriteCommand>
        break;
 800593c:	e058      	b.n	80059f0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 800593e:	2304      	movs	r3, #4
 8005940:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	4a2e      	ldr	r2, [pc, #184]	@ (8005a00 <SUBGRF_SetModulationParams+0x194>)
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	0c1b      	lsrs	r3, r3, #16
 8005952:	b2db      	uxtb	r3, r3
 8005954:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	b2db      	uxtb	r3, r3
 800595c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7d1b      	ldrb	r3, [r3, #20]
 8005968:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800596a:	7cfb      	ldrb	r3, [r7, #19]
 800596c:	b29a      	uxth	r2, r3
 800596e:	f107 0308 	add.w	r3, r7, #8
 8005972:	4619      	mov	r1, r3
 8005974:	208b      	movs	r0, #139	@ 0x8b
 8005976:	f000 f9cd 	bl	8005d14 <SUBGRF_WriteCommand>
        break;
 800597a:	e039      	b.n	80059f0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 800597c:	2304      	movs	r3, #4
 800597e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	7e1b      	ldrb	r3, [r3, #24]
 8005984:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7e5b      	ldrb	r3, [r3, #25]
 800598a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7e9b      	ldrb	r3, [r3, #26]
 8005990:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	7edb      	ldrb	r3, [r3, #27]
 8005996:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	b29a      	uxth	r2, r3
 800599c:	f107 0308 	add.w	r3, r7, #8
 80059a0:	4619      	mov	r1, r3
 80059a2:	208b      	movs	r0, #139	@ 0x8b
 80059a4:	f000 f9b6 	bl	8005d14 <SUBGRF_WriteCommand>

        break;
 80059a8:	e022      	b.n	80059f0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 80059aa:	2305      	movs	r3, #5
 80059ac:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4a13      	ldr	r2, [pc, #76]	@ (8005a00 <SUBGRF_SetModulationParams+0x194>)
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	7b1b      	ldrb	r3, [r3, #12]
 80059d4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	7b5b      	ldrb	r3, [r3, #13]
 80059da:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	b29a      	uxth	r2, r3
 80059e0:	f107 0308 	add.w	r3, r7, #8
 80059e4:	4619      	mov	r1, r3
 80059e6:	208b      	movs	r0, #139	@ 0x8b
 80059e8:	f000 f994 	bl	8005d14 <SUBGRF_WriteCommand>
        break;
 80059ec:	e000      	b.n	80059f0 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 80059ee:	bf00      	nop
    }
}
 80059f0:	bf00      	nop
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80059fa:	bf00      	nop
 80059fc:	200003a5 	.word	0x200003a5
 8005a00:	3d090000 	.word	0x3d090000
 8005a04:	01e84800 	.word	0x01e84800

08005a08 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8005a14:	f107 030c 	add.w	r3, r7, #12
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	4b44      	ldr	r3, [pc, #272]	@ (8005b38 <SUBGRF_SetPacketParams+0x130>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d004      	beq.n	8005a36 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff fe27 	bl	8005684 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d878      	bhi.n	8005b30 <SUBGRF_SetPacketParams+0x128>
 8005a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <SUBGRF_SetPacketParams+0x3c>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a55 	.word	0x08005a55
 8005a48:	08005ae5 	.word	0x08005ae5
 8005a4c:	08005ad9 	.word	0x08005ad9
 8005a50:	08005a55 	.word	0x08005a55
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7a5b      	ldrb	r3, [r3, #9]
 8005a58:	2bf1      	cmp	r3, #241	@ 0xf1
 8005a5a:	d10a      	bne.n	8005a72 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8005a5c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005a60:	f7ff fc3a 	bl	80052d8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8005a64:	f248 0005 	movw	r0, #32773	@ 0x8005
 8005a68:	f7ff fc56 	bl	8005318 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	75bb      	strb	r3, [r7, #22]
 8005a70:	e011      	b.n	8005a96 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	7a5b      	ldrb	r3, [r3, #9]
 8005a76:	2bf2      	cmp	r3, #242	@ 0xf2
 8005a78:	d10a      	bne.n	8005a90 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8005a7a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8005a7e:	f7ff fc2b 	bl	80052d8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8005a82:	f241 0021 	movw	r0, #4129	@ 0x1021
 8005a86:	f7ff fc47 	bl	8005318 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8005a8a:	2306      	movs	r3, #6
 8005a8c:	75bb      	strb	r3, [r7, #22]
 8005a8e:	e002      	b.n	8005a96 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	7a5b      	ldrb	r3, [r3, #9]
 8005a94:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8005a96:	2309      	movs	r3, #9
 8005a98:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	885b      	ldrh	r3, [r3, #2]
 8005a9e:	0a1b      	lsrs	r3, r3, #8
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	885b      	ldrh	r3, [r3, #2]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	791b      	ldrb	r3, [r3, #4]
 8005ab2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	795b      	ldrb	r3, [r3, #5]
 8005ab8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	799b      	ldrb	r3, [r3, #6]
 8005abe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	79db      	ldrb	r3, [r3, #7]
 8005ac4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	7a1b      	ldrb	r3, [r3, #8]
 8005aca:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8005acc:	7dbb      	ldrb	r3, [r7, #22]
 8005ace:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	7a9b      	ldrb	r3, [r3, #10]
 8005ad4:	753b      	strb	r3, [r7, #20]
        break;
 8005ad6:	e022      	b.n	8005b1e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7b1b      	ldrb	r3, [r3, #12]
 8005ae0:	733b      	strb	r3, [r7, #12]
        break;
 8005ae2:	e01c      	b.n	8005b1e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	89db      	ldrh	r3, [r3, #14]
 8005aec:	0a1b      	lsrs	r3, r3, #8
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	89db      	ldrh	r3, [r3, #14]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	7c1a      	ldrb	r2, [r3, #16]
 8005b00:	4b0e      	ldr	r3, [pc, #56]	@ (8005b3c <SUBGRF_SetPacketParams+0x134>)
 8005b02:	4611      	mov	r1, r2
 8005b04:	7019      	strb	r1, [r3, #0]
 8005b06:	4613      	mov	r3, r2
 8005b08:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7c5b      	ldrb	r3, [r3, #17]
 8005b0e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	7c9b      	ldrb	r3, [r3, #18]
 8005b14:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7cdb      	ldrb	r3, [r3, #19]
 8005b1a:	747b      	strb	r3, [r7, #17]
        break;
 8005b1c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	f107 030c 	add.w	r3, r7, #12
 8005b26:	4619      	mov	r1, r3
 8005b28:	208c      	movs	r0, #140	@ 0x8c
 8005b2a:	f000 f8f3 	bl	8005d14 <SUBGRF_WriteCommand>
 8005b2e:	e000      	b.n	8005b32 <SUBGRF_SetPacketParams+0x12a>
        return;
 8005b30:	bf00      	nop
}
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	200003a5 	.word	0x200003a5
 8005b3c:	200003a6 	.word	0x200003a6

08005b40 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8005b4a:	f107 030c 	add.w	r3, r7, #12
 8005b4e:	2202      	movs	r2, #2
 8005b50:	4619      	mov	r1, r3
 8005b52:	2013      	movs	r0, #19
 8005b54:	f000 f900 	bl	8005d58 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8005b58:	f7ff fdb0 	bl	80056bc <SUBGRF_GetPacketType>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10d      	bne.n	8005b7e <SUBGRF_GetRxBufferStatus+0x3e>
 8005b62:	4b0c      	ldr	r3, [pc, #48]	@ (8005b94 <SUBGRF_GetRxBufferStatus+0x54>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d108      	bne.n	8005b7e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8005b6c:	f240 7002 	movw	r0, #1794	@ 0x702
 8005b70:	f000 f878 	bl	8005c64 <SUBGRF_ReadRegister>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	e002      	b.n	8005b84 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8005b7e:	7b3a      	ldrb	r2, [r7, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8005b84:	7b7a      	ldrb	r2, [r7, #13]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	701a      	strb	r2, [r3, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	200003a6 	.word	0x200003a6

08005b98 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8005ba0:	f107 030c 	add.w	r3, r7, #12
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	2014      	movs	r0, #20
 8005baa:	f000 f8d5 	bl	8005d58 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8005bae:	f7ff fd85 	bl	80056bc <SUBGRF_GetPacketType>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <SUBGRF_GetPacketStatus+0x30>
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d013      	beq.n	8005bee <SUBGRF_GetPacketStatus+0x56>
 8005bc6:	e02a      	b.n	8005c1e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8005bc8:	7b3a      	ldrb	r2, [r7, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8005bce:	7b7b      	ldrb	r3, [r7, #13]
 8005bd0:	425b      	negs	r3, r3
 8005bd2:	105b      	asrs	r3, r3, #1
 8005bd4:	b25a      	sxtb	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	425b      	negs	r3, r3
 8005bde:	105b      	asrs	r3, r3, #1
 8005be0:	b25a      	sxtb	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	609a      	str	r2, [r3, #8]
            break;
 8005bec:	e020      	b.n	8005c30 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8005bee:	7b3b      	ldrb	r3, [r7, #12]
 8005bf0:	425b      	negs	r3, r3
 8005bf2:	105b      	asrs	r3, r3, #1
 8005bf4:	b25a      	sxtb	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8005bfa:	7b7b      	ldrb	r3, [r7, #13]
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	3302      	adds	r3, #2
 8005c00:	109b      	asrs	r3, r3, #2
 8005c02:	b25a      	sxtb	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8005c08:	7bbb      	ldrb	r3, [r7, #14]
 8005c0a:	425b      	negs	r3, r3
 8005c0c:	105b      	asrs	r3, r3, #1
 8005c0e:	b25a      	sxtb	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8005c14:	4b08      	ldr	r3, [pc, #32]	@ (8005c38 <SUBGRF_GetPacketStatus+0xa0>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	611a      	str	r2, [r3, #16]
            break;
 8005c1c:	e008      	b.n	8005c30 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8005c1e:	2214      	movs	r2, #20
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9af 	bl	8005f86 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	220f      	movs	r2, #15
 8005c2c:	701a      	strb	r2, [r3, #0]
            break;
 8005c2e:	bf00      	nop
    }
}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	200003a8 	.word	0x200003a8

08005c3c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	460a      	mov	r2, r1
 8005c46:	80fb      	strh	r3, [r7, #6]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8005c4c:	1d7a      	adds	r2, r7, #5
 8005c4e:	88f9      	ldrh	r1, [r7, #6]
 8005c50:	2301      	movs	r3, #1
 8005c52:	4803      	ldr	r0, [pc, #12]	@ (8005c60 <SUBGRF_WriteRegister+0x24>)
 8005c54:	f7fe f908 	bl	8003e68 <HAL_SUBGHZ_WriteRegisters>
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	200002fc 	.word	0x200002fc

08005c64 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8005c6e:	f107 020f 	add.w	r2, r7, #15
 8005c72:	88f9      	ldrh	r1, [r7, #6]
 8005c74:	2301      	movs	r3, #1
 8005c76:	4804      	ldr	r0, [pc, #16]	@ (8005c88 <SUBGRF_ReadRegister+0x24>)
 8005c78:	f7fe f955 	bl	8003f26 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	200002fc 	.word	0x200002fc

08005c8c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	6039      	str	r1, [r7, #0]
 8005c96:	80fb      	strh	r3, [r7, #6]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005ca4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ca6:	b672      	cpsid	i
}
 8005ca8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8005caa:	88bb      	ldrh	r3, [r7, #4]
 8005cac:	88f9      	ldrh	r1, [r7, #6]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	4806      	ldr	r0, [pc, #24]	@ (8005ccc <SUBGRF_WriteRegisters+0x40>)
 8005cb2:	f7fe f8d9 	bl	8003e68 <HAL_SUBGHZ_WriteRegisters>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f383 8810 	msr	PRIMASK, r3
}
 8005cc0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005cc2:	bf00      	nop
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	200002fc 	.word	0x200002fc

08005cd0 <SUBGRF_ReadBuffer>:
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	6039      	str	r1, [r7, #0]
 8005cda:	71fb      	strb	r3, [r7, #7]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005ce8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005cea:	b672      	cpsid	i
}
 8005cec:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8005cee:	79bb      	ldrb	r3, [r7, #6]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	79f9      	ldrb	r1, [r7, #7]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	4806      	ldr	r0, [pc, #24]	@ (8005d10 <SUBGRF_ReadBuffer+0x40>)
 8005cf8:	f7fe fa29 	bl	800414e <HAL_SUBGHZ_ReadBuffer>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f383 8810 	msr	PRIMASK, r3
}
 8005d06:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005d08:	bf00      	nop
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	200002fc 	.word	0x200002fc

08005d14 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	6039      	str	r1, [r7, #0]
 8005d1e:	71fb      	strb	r3, [r7, #7]
 8005d20:	4613      	mov	r3, r2
 8005d22:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d24:	f3ef 8310 	mrs	r3, PRIMASK
 8005d28:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005d2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d2e:	b672      	cpsid	i
}
 8005d30:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8005d32:	88bb      	ldrh	r3, [r7, #4]
 8005d34:	79f9      	ldrb	r1, [r7, #7]
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	4806      	ldr	r0, [pc, #24]	@ (8005d54 <SUBGRF_WriteCommand+0x40>)
 8005d3a:	f7fe f955 	bl	8003fe8 <HAL_SUBGHZ_ExecSetCmd>
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f383 8810 	msr	PRIMASK, r3
}
 8005d48:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005d4a:	bf00      	nop
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200002fc 	.word	0x200002fc

08005d58 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
 8005d64:	4613      	mov	r3, r2
 8005d66:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d68:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005d70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d72:	b672      	cpsid	i
}
 8005d74:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8005d76:	88bb      	ldrh	r3, [r7, #4]
 8005d78:	79f9      	ldrb	r1, [r7, #7]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	4806      	ldr	r0, [pc, #24]	@ (8005d98 <SUBGRF_ReadCommand+0x40>)
 8005d7e:	f7fe f992 	bl	80040a6 <HAL_SUBGHZ_ExecGetCmd>
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f383 8810 	msr	PRIMASK, r3
}
 8005d8c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005d8e:	bf00      	nop
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200002fc 	.word	0x200002fc

08005d9c <SUBGRF_SetRfTxPower>:
    }
    RBI_ConfigRFSwitch(state);
}

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8005da6:	2301      	movs	r3, #1
 8005da8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8005daa:	f7ff fa08 	bl	80051be <RBI_GetTxConfig>
 8005dae:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d016      	beq.n	8005de4 <SUBGRF_SetRfTxPower+0x48>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	dc16      	bgt.n	8005dea <SUBGRF_SetRfTxPower+0x4e>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <SUBGRF_SetRfTxPower+0x2e>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d00a      	beq.n	8005dde <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8005dc8:	e00f      	b.n	8005dea <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8005dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dce:	2b0f      	cmp	r3, #15
 8005dd0:	dd02      	ble.n	8005dd8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	73fb      	strb	r3, [r7, #15]
            break;
 8005dd6:	e009      	b.n	8005dec <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
            break;
 8005ddc:	e006      	b.n	8005dec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
            break;
 8005de2:	e003      	b.n	8005dec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8005de4:	2302      	movs	r3, #2
 8005de6:	73fb      	strb	r3, [r7, #15]
            break;
 8005de8:	e000      	b.n	8005dec <SUBGRF_SetRfTxPower+0x50>
            break;
 8005dea:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8005dec:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2202      	movs	r2, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fc6b 	bl	80056d0 <SUBGRF_SetTxParams>

    return paSelect;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8005e0c:	4b03      	ldr	r3, [pc, #12]	@ (8005e1c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2001      	movs	r0, #1
 8005e12:	4798      	blx	r3
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	200003b0 	.word	0x200003b0

08005e20 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8005e28:	4b03      	ldr	r3, [pc, #12]	@ (8005e38 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2002      	movs	r0, #2
 8005e2e:	4798      	blx	r3
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200003b0 	.word	0x200003b0

08005e3c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8005e44:	4b03      	ldr	r3, [pc, #12]	@ (8005e54 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2040      	movs	r0, #64	@ 0x40
 8005e4a:	4798      	blx	r3
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	200003b0 	.word	0x200003b0

08005e58 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d005      	beq.n	8005e7a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8005e6e:	e00a      	b.n	8005e86 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8005e70:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2080      	movs	r0, #128	@ 0x80
 8005e76:	4798      	blx	r3
            break;
 8005e78:	e005      	b.n	8005e86 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8005e7a:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005e82:	4798      	blx	r3
            break;
 8005e84:	bf00      	nop
    }
}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200003b0 	.word	0x200003b0

08005e94 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005ea4:	4798      	blx	r3
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	200003b0 	.word	0x200003b0

08005eb4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8005ebc:	4b03      	ldr	r3, [pc, #12]	@ (8005ecc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2020      	movs	r0, #32
 8005ec2:	4798      	blx	r3
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	200003b0 	.word	0x200003b0

08005ed0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8005ed8:	4b03      	ldr	r3, [pc, #12]	@ (8005ee8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2004      	movs	r0, #4
 8005ede:	4798      	blx	r3
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	200003b0 	.word	0x200003b0

08005eec <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8005ef4:	4b03      	ldr	r3, [pc, #12]	@ (8005f04 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2008      	movs	r0, #8
 8005efa:	4798      	blx	r3
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	200003b0 	.word	0x200003b0

08005f08 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8005f10:	4b03      	ldr	r3, [pc, #12]	@ (8005f20 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2010      	movs	r0, #16
 8005f16:	4798      	blx	r3
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	200003b0 	.word	0x200003b0

08005f24 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8005f2c:	4b04      	ldr	r3, [pc, #16]	@ (8005f40 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005f34:	4798      	blx	r3
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	200003b0 	.word	0x200003b0

08005f44 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8005f4e:	f7ff f944 	bl	80051da <RBI_IsDCDC>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d112      	bne.n	8005f7e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8005f58:	f640 1023 	movw	r0, #2339	@ 0x923
 8005f5c:	f7ff fe82 	bl	8005c64 <SUBGRF_ReadRegister>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	f023 0306 	bic.w	r3, r3, #6
 8005f6a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8005f6c:	7bfa      	ldrb	r2, [r7, #15]
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	4619      	mov	r1, r3
 8005f76:	f640 1023 	movw	r0, #2339	@ 0x923
 8005f7a:	f7ff fe5f 	bl	8005c3c <SUBGRF_WriteRegister>
  }
}
 8005f7e:	bf00      	nop
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70fb      	strb	r3, [r7, #3]
 8005f92:	4613      	mov	r3, r2
 8005f94:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8005f9a:	e004      	b.n	8005fa6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	60fa      	str	r2, [r7, #12]
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8005fa6:	883b      	ldrh	r3, [r7, #0]
 8005fa8:	1e5a      	subs	r2, r3, #1
 8005faa:	803a      	strh	r2, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1f5      	bne.n	8005f9c <UTIL_MEM_set_8+0x16>
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr

08005fbc <__cvt>:
 8005fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	b088      	sub	sp, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	461d      	mov	r5, r3
 8005fc6:	4614      	mov	r4, r2
 8005fc8:	bfbc      	itt	lt
 8005fca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005fce:	4614      	movlt	r4, r2
 8005fd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005fd2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005fd4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005fd8:	bfb6      	itet	lt
 8005fda:	461d      	movlt	r5, r3
 8005fdc:	2300      	movge	r3, #0
 8005fde:	232d      	movlt	r3, #45	@ 0x2d
 8005fe0:	7013      	strb	r3, [r2, #0]
 8005fe2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fe4:	f023 0820 	bic.w	r8, r3, #32
 8005fe8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fec:	d005      	beq.n	8005ffa <__cvt+0x3e>
 8005fee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ff2:	d100      	bne.n	8005ff6 <__cvt+0x3a>
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e000      	b.n	8005ffc <__cvt+0x40>
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	aa07      	add	r2, sp, #28
 8005ffe:	9204      	str	r2, [sp, #16]
 8006000:	aa06      	add	r2, sp, #24
 8006002:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006006:	e9cd 3600 	strd	r3, r6, [sp]
 800600a:	4622      	mov	r2, r4
 800600c:	462b      	mov	r3, r5
 800600e:	f001 f96b 	bl	80072e8 <_dtoa_r>
 8006012:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006016:	4607      	mov	r7, r0
 8006018:	d119      	bne.n	800604e <__cvt+0x92>
 800601a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800601c:	07db      	lsls	r3, r3, #31
 800601e:	d50e      	bpl.n	800603e <__cvt+0x82>
 8006020:	eb00 0906 	add.w	r9, r0, r6
 8006024:	2200      	movs	r2, #0
 8006026:	2300      	movs	r3, #0
 8006028:	4620      	mov	r0, r4
 800602a:	4629      	mov	r1, r5
 800602c:	f7fa fd24 	bl	8000a78 <__aeabi_dcmpeq>
 8006030:	b108      	cbz	r0, 8006036 <__cvt+0x7a>
 8006032:	f8cd 901c 	str.w	r9, [sp, #28]
 8006036:	2230      	movs	r2, #48	@ 0x30
 8006038:	9b07      	ldr	r3, [sp, #28]
 800603a:	454b      	cmp	r3, r9
 800603c:	d31e      	bcc.n	800607c <__cvt+0xc0>
 800603e:	9b07      	ldr	r3, [sp, #28]
 8006040:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006042:	1bdb      	subs	r3, r3, r7
 8006044:	4638      	mov	r0, r7
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	b008      	add	sp, #32
 800604a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006052:	eb00 0906 	add.w	r9, r0, r6
 8006056:	d1e5      	bne.n	8006024 <__cvt+0x68>
 8006058:	7803      	ldrb	r3, [r0, #0]
 800605a:	2b30      	cmp	r3, #48	@ 0x30
 800605c:	d10a      	bne.n	8006074 <__cvt+0xb8>
 800605e:	2200      	movs	r2, #0
 8006060:	2300      	movs	r3, #0
 8006062:	4620      	mov	r0, r4
 8006064:	4629      	mov	r1, r5
 8006066:	f7fa fd07 	bl	8000a78 <__aeabi_dcmpeq>
 800606a:	b918      	cbnz	r0, 8006074 <__cvt+0xb8>
 800606c:	f1c6 0601 	rsb	r6, r6, #1
 8006070:	f8ca 6000 	str.w	r6, [sl]
 8006074:	f8da 3000 	ldr.w	r3, [sl]
 8006078:	4499      	add	r9, r3
 800607a:	e7d3      	b.n	8006024 <__cvt+0x68>
 800607c:	1c59      	adds	r1, r3, #1
 800607e:	9107      	str	r1, [sp, #28]
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	e7d9      	b.n	8006038 <__cvt+0x7c>

08006084 <__exponent>:
 8006084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006086:	2900      	cmp	r1, #0
 8006088:	bfba      	itte	lt
 800608a:	4249      	neglt	r1, r1
 800608c:	232d      	movlt	r3, #45	@ 0x2d
 800608e:	232b      	movge	r3, #43	@ 0x2b
 8006090:	2909      	cmp	r1, #9
 8006092:	7002      	strb	r2, [r0, #0]
 8006094:	7043      	strb	r3, [r0, #1]
 8006096:	dd29      	ble.n	80060ec <__exponent+0x68>
 8006098:	f10d 0307 	add.w	r3, sp, #7
 800609c:	461d      	mov	r5, r3
 800609e:	270a      	movs	r7, #10
 80060a0:	461a      	mov	r2, r3
 80060a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80060a6:	fb07 1416 	mls	r4, r7, r6, r1
 80060aa:	3430      	adds	r4, #48	@ 0x30
 80060ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80060b0:	460c      	mov	r4, r1
 80060b2:	2c63      	cmp	r4, #99	@ 0x63
 80060b4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80060b8:	4631      	mov	r1, r6
 80060ba:	dcf1      	bgt.n	80060a0 <__exponent+0x1c>
 80060bc:	3130      	adds	r1, #48	@ 0x30
 80060be:	1e94      	subs	r4, r2, #2
 80060c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060c4:	1c41      	adds	r1, r0, #1
 80060c6:	4623      	mov	r3, r4
 80060c8:	42ab      	cmp	r3, r5
 80060ca:	d30a      	bcc.n	80060e2 <__exponent+0x5e>
 80060cc:	f10d 0309 	add.w	r3, sp, #9
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	42ac      	cmp	r4, r5
 80060d4:	bf88      	it	hi
 80060d6:	2300      	movhi	r3, #0
 80060d8:	3302      	adds	r3, #2
 80060da:	4403      	add	r3, r0
 80060dc:	1a18      	subs	r0, r3, r0
 80060de:	b003      	add	sp, #12
 80060e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060ea:	e7ed      	b.n	80060c8 <__exponent+0x44>
 80060ec:	2330      	movs	r3, #48	@ 0x30
 80060ee:	3130      	adds	r1, #48	@ 0x30
 80060f0:	7083      	strb	r3, [r0, #2]
 80060f2:	70c1      	strb	r1, [r0, #3]
 80060f4:	1d03      	adds	r3, r0, #4
 80060f6:	e7f1      	b.n	80060dc <__exponent+0x58>

080060f8 <_printf_float>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	b091      	sub	sp, #68	@ 0x44
 80060fe:	460c      	mov	r4, r1
 8006100:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006104:	4616      	mov	r6, r2
 8006106:	461f      	mov	r7, r3
 8006108:	4605      	mov	r5, r0
 800610a:	f000 ffe9 	bl	80070e0 <_localeconv_r>
 800610e:	6803      	ldr	r3, [r0, #0]
 8006110:	9308      	str	r3, [sp, #32]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fa f884 	bl	8000220 <strlen>
 8006118:	2300      	movs	r3, #0
 800611a:	930e      	str	r3, [sp, #56]	@ 0x38
 800611c:	f8d8 3000 	ldr.w	r3, [r8]
 8006120:	9009      	str	r0, [sp, #36]	@ 0x24
 8006122:	3307      	adds	r3, #7
 8006124:	f023 0307 	bic.w	r3, r3, #7
 8006128:	f103 0208 	add.w	r2, r3, #8
 800612c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006130:	f8d4 b000 	ldr.w	fp, [r4]
 8006134:	f8c8 2000 	str.w	r2, [r8]
 8006138:	e9d3 8900 	ldrd	r8, r9, [r3]
 800613c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006140:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006142:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006146:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800614a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800614e:	4b9d      	ldr	r3, [pc, #628]	@ (80063c4 <_printf_float+0x2cc>)
 8006150:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006154:	f7fa fcc2 	bl	8000adc <__aeabi_dcmpun>
 8006158:	bb70      	cbnz	r0, 80061b8 <_printf_float+0xc0>
 800615a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800615e:	4b99      	ldr	r3, [pc, #612]	@ (80063c4 <_printf_float+0x2cc>)
 8006160:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006164:	f7fa fc9c 	bl	8000aa0 <__aeabi_dcmple>
 8006168:	bb30      	cbnz	r0, 80061b8 <_printf_float+0xc0>
 800616a:	2200      	movs	r2, #0
 800616c:	2300      	movs	r3, #0
 800616e:	4640      	mov	r0, r8
 8006170:	4649      	mov	r1, r9
 8006172:	f7fa fc8b 	bl	8000a8c <__aeabi_dcmplt>
 8006176:	b110      	cbz	r0, 800617e <_printf_float+0x86>
 8006178:	232d      	movs	r3, #45	@ 0x2d
 800617a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800617e:	4a92      	ldr	r2, [pc, #584]	@ (80063c8 <_printf_float+0x2d0>)
 8006180:	4b92      	ldr	r3, [pc, #584]	@ (80063cc <_printf_float+0x2d4>)
 8006182:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006186:	bf8c      	ite	hi
 8006188:	4690      	movhi	r8, r2
 800618a:	4698      	movls	r8, r3
 800618c:	2303      	movs	r3, #3
 800618e:	6123      	str	r3, [r4, #16]
 8006190:	f02b 0304 	bic.w	r3, fp, #4
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	f04f 0900 	mov.w	r9, #0
 800619a:	9700      	str	r7, [sp, #0]
 800619c:	4633      	mov	r3, r6
 800619e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80061a0:	4621      	mov	r1, r4
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 f9d4 	bl	8006550 <_printf_common>
 80061a8:	3001      	adds	r0, #1
 80061aa:	f040 808f 	bne.w	80062cc <_printf_float+0x1d4>
 80061ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061b2:	b011      	add	sp, #68	@ 0x44
 80061b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	4640      	mov	r0, r8
 80061be:	4649      	mov	r1, r9
 80061c0:	f7fa fc8c 	bl	8000adc <__aeabi_dcmpun>
 80061c4:	b140      	cbz	r0, 80061d8 <_printf_float+0xe0>
 80061c6:	464b      	mov	r3, r9
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bfbc      	itt	lt
 80061cc:	232d      	movlt	r3, #45	@ 0x2d
 80061ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061d2:	4a7f      	ldr	r2, [pc, #508]	@ (80063d0 <_printf_float+0x2d8>)
 80061d4:	4b7f      	ldr	r3, [pc, #508]	@ (80063d4 <_printf_float+0x2dc>)
 80061d6:	e7d4      	b.n	8006182 <_printf_float+0x8a>
 80061d8:	6863      	ldr	r3, [r4, #4]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80061e0:	d13f      	bne.n	8006262 <_printf_float+0x16a>
 80061e2:	2306      	movs	r3, #6
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80061ea:	2200      	movs	r2, #0
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	9206      	str	r2, [sp, #24]
 80061f0:	aa0e      	add	r2, sp, #56	@ 0x38
 80061f2:	e9cd a204 	strd	sl, r2, [sp, #16]
 80061f6:	aa0d      	add	r2, sp, #52	@ 0x34
 80061f8:	9203      	str	r2, [sp, #12]
 80061fa:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80061fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	4642      	mov	r2, r8
 8006208:	464b      	mov	r3, r9
 800620a:	4628      	mov	r0, r5
 800620c:	910a      	str	r1, [sp, #40]	@ 0x28
 800620e:	f7ff fed5 	bl	8005fbc <__cvt>
 8006212:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006214:	2947      	cmp	r1, #71	@ 0x47
 8006216:	4680      	mov	r8, r0
 8006218:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800621a:	d128      	bne.n	800626e <_printf_float+0x176>
 800621c:	1cc8      	adds	r0, r1, #3
 800621e:	db02      	blt.n	8006226 <_printf_float+0x12e>
 8006220:	6863      	ldr	r3, [r4, #4]
 8006222:	4299      	cmp	r1, r3
 8006224:	dd40      	ble.n	80062a8 <_printf_float+0x1b0>
 8006226:	f1aa 0a02 	sub.w	sl, sl, #2
 800622a:	fa5f fa8a 	uxtb.w	sl, sl
 800622e:	3901      	subs	r1, #1
 8006230:	4652      	mov	r2, sl
 8006232:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006236:	910d      	str	r1, [sp, #52]	@ 0x34
 8006238:	f7ff ff24 	bl	8006084 <__exponent>
 800623c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800623e:	1813      	adds	r3, r2, r0
 8006240:	2a01      	cmp	r2, #1
 8006242:	4681      	mov	r9, r0
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	dc02      	bgt.n	800624e <_printf_float+0x156>
 8006248:	6822      	ldr	r2, [r4, #0]
 800624a:	07d2      	lsls	r2, r2, #31
 800624c:	d501      	bpl.n	8006252 <_printf_float+0x15a>
 800624e:	3301      	adds	r3, #1
 8006250:	6123      	str	r3, [r4, #16]
 8006252:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006256:	2b00      	cmp	r3, #0
 8006258:	d09f      	beq.n	800619a <_printf_float+0xa2>
 800625a:	232d      	movs	r3, #45	@ 0x2d
 800625c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006260:	e79b      	b.n	800619a <_printf_float+0xa2>
 8006262:	2947      	cmp	r1, #71	@ 0x47
 8006264:	d1bf      	bne.n	80061e6 <_printf_float+0xee>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1bd      	bne.n	80061e6 <_printf_float+0xee>
 800626a:	2301      	movs	r3, #1
 800626c:	e7ba      	b.n	80061e4 <_printf_float+0xec>
 800626e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006272:	d9dc      	bls.n	800622e <_printf_float+0x136>
 8006274:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006278:	d118      	bne.n	80062ac <_printf_float+0x1b4>
 800627a:	2900      	cmp	r1, #0
 800627c:	6863      	ldr	r3, [r4, #4]
 800627e:	dd0b      	ble.n	8006298 <_printf_float+0x1a0>
 8006280:	6121      	str	r1, [r4, #16]
 8006282:	b913      	cbnz	r3, 800628a <_printf_float+0x192>
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	07d0      	lsls	r0, r2, #31
 8006288:	d502      	bpl.n	8006290 <_printf_float+0x198>
 800628a:	3301      	adds	r3, #1
 800628c:	440b      	add	r3, r1
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006292:	f04f 0900 	mov.w	r9, #0
 8006296:	e7dc      	b.n	8006252 <_printf_float+0x15a>
 8006298:	b913      	cbnz	r3, 80062a0 <_printf_float+0x1a8>
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	07d2      	lsls	r2, r2, #31
 800629e:	d501      	bpl.n	80062a4 <_printf_float+0x1ac>
 80062a0:	3302      	adds	r3, #2
 80062a2:	e7f4      	b.n	800628e <_printf_float+0x196>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e7f2      	b.n	800628e <_printf_float+0x196>
 80062a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80062ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ae:	4299      	cmp	r1, r3
 80062b0:	db05      	blt.n	80062be <_printf_float+0x1c6>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	6121      	str	r1, [r4, #16]
 80062b6:	07d8      	lsls	r0, r3, #31
 80062b8:	d5ea      	bpl.n	8006290 <_printf_float+0x198>
 80062ba:	1c4b      	adds	r3, r1, #1
 80062bc:	e7e7      	b.n	800628e <_printf_float+0x196>
 80062be:	2900      	cmp	r1, #0
 80062c0:	bfd4      	ite	le
 80062c2:	f1c1 0202 	rsble	r2, r1, #2
 80062c6:	2201      	movgt	r2, #1
 80062c8:	4413      	add	r3, r2
 80062ca:	e7e0      	b.n	800628e <_printf_float+0x196>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	055a      	lsls	r2, r3, #21
 80062d0:	d407      	bmi.n	80062e2 <_printf_float+0x1ea>
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	4642      	mov	r2, r8
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	47b8      	blx	r7
 80062dc:	3001      	adds	r0, #1
 80062de:	d12b      	bne.n	8006338 <_printf_float+0x240>
 80062e0:	e765      	b.n	80061ae <_printf_float+0xb6>
 80062e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062e6:	f240 80dd 	bls.w	80064a4 <_printf_float+0x3ac>
 80062ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	f7fa fbc1 	bl	8000a78 <__aeabi_dcmpeq>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d033      	beq.n	8006362 <_printf_float+0x26a>
 80062fa:	4a37      	ldr	r2, [pc, #220]	@ (80063d8 <_printf_float+0x2e0>)
 80062fc:	2301      	movs	r3, #1
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	f43f af52 	beq.w	80061ae <_printf_float+0xb6>
 800630a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800630e:	4543      	cmp	r3, r8
 8006310:	db02      	blt.n	8006318 <_printf_float+0x220>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	07d8      	lsls	r0, r3, #31
 8006316:	d50f      	bpl.n	8006338 <_printf_float+0x240>
 8006318:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f af43 	beq.w	80061ae <_printf_float+0xb6>
 8006328:	f04f 0900 	mov.w	r9, #0
 800632c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006330:	f104 0a1a 	add.w	sl, r4, #26
 8006334:	45c8      	cmp	r8, r9
 8006336:	dc09      	bgt.n	800634c <_printf_float+0x254>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	079b      	lsls	r3, r3, #30
 800633c:	f100 8103 	bmi.w	8006546 <_printf_float+0x44e>
 8006340:	68e0      	ldr	r0, [r4, #12]
 8006342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006344:	4298      	cmp	r0, r3
 8006346:	bfb8      	it	lt
 8006348:	4618      	movlt	r0, r3
 800634a:	e732      	b.n	80061b2 <_printf_float+0xba>
 800634c:	2301      	movs	r3, #1
 800634e:	4652      	mov	r2, sl
 8006350:	4631      	mov	r1, r6
 8006352:	4628      	mov	r0, r5
 8006354:	47b8      	blx	r7
 8006356:	3001      	adds	r0, #1
 8006358:	f43f af29 	beq.w	80061ae <_printf_float+0xb6>
 800635c:	f109 0901 	add.w	r9, r9, #1
 8006360:	e7e8      	b.n	8006334 <_printf_float+0x23c>
 8006362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006364:	2b00      	cmp	r3, #0
 8006366:	dc39      	bgt.n	80063dc <_printf_float+0x2e4>
 8006368:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <_printf_float+0x2e0>)
 800636a:	2301      	movs	r3, #1
 800636c:	4631      	mov	r1, r6
 800636e:	4628      	mov	r0, r5
 8006370:	47b8      	blx	r7
 8006372:	3001      	adds	r0, #1
 8006374:	f43f af1b 	beq.w	80061ae <_printf_float+0xb6>
 8006378:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800637c:	ea59 0303 	orrs.w	r3, r9, r3
 8006380:	d102      	bne.n	8006388 <_printf_float+0x290>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	07d9      	lsls	r1, r3, #31
 8006386:	d5d7      	bpl.n	8006338 <_printf_float+0x240>
 8006388:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	f43f af0b 	beq.w	80061ae <_printf_float+0xb6>
 8006398:	f04f 0a00 	mov.w	sl, #0
 800639c:	f104 0b1a 	add.w	fp, r4, #26
 80063a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063a2:	425b      	negs	r3, r3
 80063a4:	4553      	cmp	r3, sl
 80063a6:	dc01      	bgt.n	80063ac <_printf_float+0x2b4>
 80063a8:	464b      	mov	r3, r9
 80063aa:	e793      	b.n	80062d4 <_printf_float+0x1dc>
 80063ac:	2301      	movs	r3, #1
 80063ae:	465a      	mov	r2, fp
 80063b0:	4631      	mov	r1, r6
 80063b2:	4628      	mov	r0, r5
 80063b4:	47b8      	blx	r7
 80063b6:	3001      	adds	r0, #1
 80063b8:	f43f aef9 	beq.w	80061ae <_printf_float+0xb6>
 80063bc:	f10a 0a01 	add.w	sl, sl, #1
 80063c0:	e7ee      	b.n	80063a0 <_printf_float+0x2a8>
 80063c2:	bf00      	nop
 80063c4:	7fefffff 	.word	0x7fefffff
 80063c8:	0800aa78 	.word	0x0800aa78
 80063cc:	0800aa74 	.word	0x0800aa74
 80063d0:	0800aa80 	.word	0x0800aa80
 80063d4:	0800aa7c 	.word	0x0800aa7c
 80063d8:	0800aa84 	.word	0x0800aa84
 80063dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80063e2:	4553      	cmp	r3, sl
 80063e4:	bfa8      	it	ge
 80063e6:	4653      	movge	r3, sl
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	4699      	mov	r9, r3
 80063ec:	dc36      	bgt.n	800645c <_printf_float+0x364>
 80063ee:	f04f 0b00 	mov.w	fp, #0
 80063f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063f6:	f104 021a 	add.w	r2, r4, #26
 80063fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80063fe:	eba3 0309 	sub.w	r3, r3, r9
 8006402:	455b      	cmp	r3, fp
 8006404:	dc31      	bgt.n	800646a <_printf_float+0x372>
 8006406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006408:	459a      	cmp	sl, r3
 800640a:	dc3a      	bgt.n	8006482 <_printf_float+0x38a>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	07da      	lsls	r2, r3, #31
 8006410:	d437      	bmi.n	8006482 <_printf_float+0x38a>
 8006412:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006414:	ebaa 0903 	sub.w	r9, sl, r3
 8006418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800641a:	ebaa 0303 	sub.w	r3, sl, r3
 800641e:	4599      	cmp	r9, r3
 8006420:	bfa8      	it	ge
 8006422:	4699      	movge	r9, r3
 8006424:	f1b9 0f00 	cmp.w	r9, #0
 8006428:	dc33      	bgt.n	8006492 <_printf_float+0x39a>
 800642a:	f04f 0800 	mov.w	r8, #0
 800642e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006432:	f104 0b1a 	add.w	fp, r4, #26
 8006436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006438:	ebaa 0303 	sub.w	r3, sl, r3
 800643c:	eba3 0309 	sub.w	r3, r3, r9
 8006440:	4543      	cmp	r3, r8
 8006442:	f77f af79 	ble.w	8006338 <_printf_float+0x240>
 8006446:	2301      	movs	r3, #1
 8006448:	465a      	mov	r2, fp
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	f43f aeac 	beq.w	80061ae <_printf_float+0xb6>
 8006456:	f108 0801 	add.w	r8, r8, #1
 800645a:	e7ec      	b.n	8006436 <_printf_float+0x33e>
 800645c:	4642      	mov	r2, r8
 800645e:	4631      	mov	r1, r6
 8006460:	4628      	mov	r0, r5
 8006462:	47b8      	blx	r7
 8006464:	3001      	adds	r0, #1
 8006466:	d1c2      	bne.n	80063ee <_printf_float+0x2f6>
 8006468:	e6a1      	b.n	80061ae <_printf_float+0xb6>
 800646a:	2301      	movs	r3, #1
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	920a      	str	r2, [sp, #40]	@ 0x28
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	f43f ae9a 	beq.w	80061ae <_printf_float+0xb6>
 800647a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800647c:	f10b 0b01 	add.w	fp, fp, #1
 8006480:	e7bb      	b.n	80063fa <_printf_float+0x302>
 8006482:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	d1c0      	bne.n	8006412 <_printf_float+0x31a>
 8006490:	e68d      	b.n	80061ae <_printf_float+0xb6>
 8006492:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006494:	464b      	mov	r3, r9
 8006496:	4442      	add	r2, r8
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	d1c3      	bne.n	800642a <_printf_float+0x332>
 80064a2:	e684      	b.n	80061ae <_printf_float+0xb6>
 80064a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80064a8:	f1ba 0f01 	cmp.w	sl, #1
 80064ac:	dc01      	bgt.n	80064b2 <_printf_float+0x3ba>
 80064ae:	07db      	lsls	r3, r3, #31
 80064b0:	d536      	bpl.n	8006520 <_printf_float+0x428>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4642      	mov	r2, r8
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	f43f ae76 	beq.w	80061ae <_printf_float+0xb6>
 80064c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	f43f ae6e 	beq.w	80061ae <_printf_float+0xb6>
 80064d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064d6:	2200      	movs	r2, #0
 80064d8:	2300      	movs	r3, #0
 80064da:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80064de:	f7fa facb 	bl	8000a78 <__aeabi_dcmpeq>
 80064e2:	b9c0      	cbnz	r0, 8006516 <_printf_float+0x41e>
 80064e4:	4653      	mov	r3, sl
 80064e6:	f108 0201 	add.w	r2, r8, #1
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	d10c      	bne.n	800650e <_printf_float+0x416>
 80064f4:	e65b      	b.n	80061ae <_printf_float+0xb6>
 80064f6:	2301      	movs	r3, #1
 80064f8:	465a      	mov	r2, fp
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	f43f ae54 	beq.w	80061ae <_printf_float+0xb6>
 8006506:	f108 0801 	add.w	r8, r8, #1
 800650a:	45d0      	cmp	r8, sl
 800650c:	dbf3      	blt.n	80064f6 <_printf_float+0x3fe>
 800650e:	464b      	mov	r3, r9
 8006510:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006514:	e6df      	b.n	80062d6 <_printf_float+0x1de>
 8006516:	f04f 0800 	mov.w	r8, #0
 800651a:	f104 0b1a 	add.w	fp, r4, #26
 800651e:	e7f4      	b.n	800650a <_printf_float+0x412>
 8006520:	2301      	movs	r3, #1
 8006522:	4642      	mov	r2, r8
 8006524:	e7e1      	b.n	80064ea <_printf_float+0x3f2>
 8006526:	2301      	movs	r3, #1
 8006528:	464a      	mov	r2, r9
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	f43f ae3c 	beq.w	80061ae <_printf_float+0xb6>
 8006536:	f108 0801 	add.w	r8, r8, #1
 800653a:	68e3      	ldr	r3, [r4, #12]
 800653c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800653e:	1a5b      	subs	r3, r3, r1
 8006540:	4543      	cmp	r3, r8
 8006542:	dcf0      	bgt.n	8006526 <_printf_float+0x42e>
 8006544:	e6fc      	b.n	8006340 <_printf_float+0x248>
 8006546:	f04f 0800 	mov.w	r8, #0
 800654a:	f104 0919 	add.w	r9, r4, #25
 800654e:	e7f4      	b.n	800653a <_printf_float+0x442>

08006550 <_printf_common>:
 8006550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006554:	4616      	mov	r6, r2
 8006556:	4698      	mov	r8, r3
 8006558:	688a      	ldr	r2, [r1, #8]
 800655a:	690b      	ldr	r3, [r1, #16]
 800655c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006560:	4293      	cmp	r3, r2
 8006562:	bfb8      	it	lt
 8006564:	4613      	movlt	r3, r2
 8006566:	6033      	str	r3, [r6, #0]
 8006568:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800656c:	4607      	mov	r7, r0
 800656e:	460c      	mov	r4, r1
 8006570:	b10a      	cbz	r2, 8006576 <_printf_common+0x26>
 8006572:	3301      	adds	r3, #1
 8006574:	6033      	str	r3, [r6, #0]
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	0699      	lsls	r1, r3, #26
 800657a:	bf42      	ittt	mi
 800657c:	6833      	ldrmi	r3, [r6, #0]
 800657e:	3302      	addmi	r3, #2
 8006580:	6033      	strmi	r3, [r6, #0]
 8006582:	6825      	ldr	r5, [r4, #0]
 8006584:	f015 0506 	ands.w	r5, r5, #6
 8006588:	d106      	bne.n	8006598 <_printf_common+0x48>
 800658a:	f104 0a19 	add.w	sl, r4, #25
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	6832      	ldr	r2, [r6, #0]
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	42ab      	cmp	r3, r5
 8006596:	dc26      	bgt.n	80065e6 <_printf_common+0x96>
 8006598:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	3b00      	subs	r3, #0
 80065a0:	bf18      	it	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	0692      	lsls	r2, r2, #26
 80065a6:	d42b      	bmi.n	8006600 <_printf_common+0xb0>
 80065a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065ac:	4641      	mov	r1, r8
 80065ae:	4638      	mov	r0, r7
 80065b0:	47c8      	blx	r9
 80065b2:	3001      	adds	r0, #1
 80065b4:	d01e      	beq.n	80065f4 <_printf_common+0xa4>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	6922      	ldr	r2, [r4, #16]
 80065ba:	f003 0306 	and.w	r3, r3, #6
 80065be:	2b04      	cmp	r3, #4
 80065c0:	bf02      	ittt	eq
 80065c2:	68e5      	ldreq	r5, [r4, #12]
 80065c4:	6833      	ldreq	r3, [r6, #0]
 80065c6:	1aed      	subeq	r5, r5, r3
 80065c8:	68a3      	ldr	r3, [r4, #8]
 80065ca:	bf0c      	ite	eq
 80065cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d0:	2500      	movne	r5, #0
 80065d2:	4293      	cmp	r3, r2
 80065d4:	bfc4      	itt	gt
 80065d6:	1a9b      	subgt	r3, r3, r2
 80065d8:	18ed      	addgt	r5, r5, r3
 80065da:	2600      	movs	r6, #0
 80065dc:	341a      	adds	r4, #26
 80065de:	42b5      	cmp	r5, r6
 80065e0:	d11a      	bne.n	8006618 <_printf_common+0xc8>
 80065e2:	2000      	movs	r0, #0
 80065e4:	e008      	b.n	80065f8 <_printf_common+0xa8>
 80065e6:	2301      	movs	r3, #1
 80065e8:	4652      	mov	r2, sl
 80065ea:	4641      	mov	r1, r8
 80065ec:	4638      	mov	r0, r7
 80065ee:	47c8      	blx	r9
 80065f0:	3001      	adds	r0, #1
 80065f2:	d103      	bne.n	80065fc <_printf_common+0xac>
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fc:	3501      	adds	r5, #1
 80065fe:	e7c6      	b.n	800658e <_printf_common+0x3e>
 8006600:	18e1      	adds	r1, r4, r3
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	2030      	movs	r0, #48	@ 0x30
 8006606:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800660a:	4422      	add	r2, r4
 800660c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006610:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006614:	3302      	adds	r3, #2
 8006616:	e7c7      	b.n	80065a8 <_printf_common+0x58>
 8006618:	2301      	movs	r3, #1
 800661a:	4622      	mov	r2, r4
 800661c:	4641      	mov	r1, r8
 800661e:	4638      	mov	r0, r7
 8006620:	47c8      	blx	r9
 8006622:	3001      	adds	r0, #1
 8006624:	d0e6      	beq.n	80065f4 <_printf_common+0xa4>
 8006626:	3601      	adds	r6, #1
 8006628:	e7d9      	b.n	80065de <_printf_common+0x8e>
	...

0800662c <_printf_i>:
 800662c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	7e0f      	ldrb	r7, [r1, #24]
 8006632:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006634:	2f78      	cmp	r7, #120	@ 0x78
 8006636:	4691      	mov	r9, r2
 8006638:	4680      	mov	r8, r0
 800663a:	460c      	mov	r4, r1
 800663c:	469a      	mov	sl, r3
 800663e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006642:	d807      	bhi.n	8006654 <_printf_i+0x28>
 8006644:	2f62      	cmp	r7, #98	@ 0x62
 8006646:	d80a      	bhi.n	800665e <_printf_i+0x32>
 8006648:	2f00      	cmp	r7, #0
 800664a:	f000 80d1 	beq.w	80067f0 <_printf_i+0x1c4>
 800664e:	2f58      	cmp	r7, #88	@ 0x58
 8006650:	f000 80b8 	beq.w	80067c4 <_printf_i+0x198>
 8006654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006658:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800665c:	e03a      	b.n	80066d4 <_printf_i+0xa8>
 800665e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006662:	2b15      	cmp	r3, #21
 8006664:	d8f6      	bhi.n	8006654 <_printf_i+0x28>
 8006666:	a101      	add	r1, pc, #4	@ (adr r1, 800666c <_printf_i+0x40>)
 8006668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800666c:	080066c5 	.word	0x080066c5
 8006670:	080066d9 	.word	0x080066d9
 8006674:	08006655 	.word	0x08006655
 8006678:	08006655 	.word	0x08006655
 800667c:	08006655 	.word	0x08006655
 8006680:	08006655 	.word	0x08006655
 8006684:	080066d9 	.word	0x080066d9
 8006688:	08006655 	.word	0x08006655
 800668c:	08006655 	.word	0x08006655
 8006690:	08006655 	.word	0x08006655
 8006694:	08006655 	.word	0x08006655
 8006698:	080067d7 	.word	0x080067d7
 800669c:	08006703 	.word	0x08006703
 80066a0:	08006791 	.word	0x08006791
 80066a4:	08006655 	.word	0x08006655
 80066a8:	08006655 	.word	0x08006655
 80066ac:	080067f9 	.word	0x080067f9
 80066b0:	08006655 	.word	0x08006655
 80066b4:	08006703 	.word	0x08006703
 80066b8:	08006655 	.word	0x08006655
 80066bc:	08006655 	.word	0x08006655
 80066c0:	08006799 	.word	0x08006799
 80066c4:	6833      	ldr	r3, [r6, #0]
 80066c6:	1d1a      	adds	r2, r3, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6032      	str	r2, [r6, #0]
 80066cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066d4:	2301      	movs	r3, #1
 80066d6:	e09c      	b.n	8006812 <_printf_i+0x1e6>
 80066d8:	6833      	ldr	r3, [r6, #0]
 80066da:	6820      	ldr	r0, [r4, #0]
 80066dc:	1d19      	adds	r1, r3, #4
 80066de:	6031      	str	r1, [r6, #0]
 80066e0:	0606      	lsls	r6, r0, #24
 80066e2:	d501      	bpl.n	80066e8 <_printf_i+0xbc>
 80066e4:	681d      	ldr	r5, [r3, #0]
 80066e6:	e003      	b.n	80066f0 <_printf_i+0xc4>
 80066e8:	0645      	lsls	r5, r0, #25
 80066ea:	d5fb      	bpl.n	80066e4 <_printf_i+0xb8>
 80066ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066f0:	2d00      	cmp	r5, #0
 80066f2:	da03      	bge.n	80066fc <_printf_i+0xd0>
 80066f4:	232d      	movs	r3, #45	@ 0x2d
 80066f6:	426d      	negs	r5, r5
 80066f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066fc:	4858      	ldr	r0, [pc, #352]	@ (8006860 <_printf_i+0x234>)
 80066fe:	230a      	movs	r3, #10
 8006700:	e011      	b.n	8006726 <_printf_i+0xfa>
 8006702:	6821      	ldr	r1, [r4, #0]
 8006704:	6833      	ldr	r3, [r6, #0]
 8006706:	0608      	lsls	r0, r1, #24
 8006708:	f853 5b04 	ldr.w	r5, [r3], #4
 800670c:	d402      	bmi.n	8006714 <_printf_i+0xe8>
 800670e:	0649      	lsls	r1, r1, #25
 8006710:	bf48      	it	mi
 8006712:	b2ad      	uxthmi	r5, r5
 8006714:	2f6f      	cmp	r7, #111	@ 0x6f
 8006716:	4852      	ldr	r0, [pc, #328]	@ (8006860 <_printf_i+0x234>)
 8006718:	6033      	str	r3, [r6, #0]
 800671a:	bf14      	ite	ne
 800671c:	230a      	movne	r3, #10
 800671e:	2308      	moveq	r3, #8
 8006720:	2100      	movs	r1, #0
 8006722:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006726:	6866      	ldr	r6, [r4, #4]
 8006728:	60a6      	str	r6, [r4, #8]
 800672a:	2e00      	cmp	r6, #0
 800672c:	db05      	blt.n	800673a <_printf_i+0x10e>
 800672e:	6821      	ldr	r1, [r4, #0]
 8006730:	432e      	orrs	r6, r5
 8006732:	f021 0104 	bic.w	r1, r1, #4
 8006736:	6021      	str	r1, [r4, #0]
 8006738:	d04b      	beq.n	80067d2 <_printf_i+0x1a6>
 800673a:	4616      	mov	r6, r2
 800673c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006740:	fb03 5711 	mls	r7, r3, r1, r5
 8006744:	5dc7      	ldrb	r7, [r0, r7]
 8006746:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800674a:	462f      	mov	r7, r5
 800674c:	42bb      	cmp	r3, r7
 800674e:	460d      	mov	r5, r1
 8006750:	d9f4      	bls.n	800673c <_printf_i+0x110>
 8006752:	2b08      	cmp	r3, #8
 8006754:	d10b      	bne.n	800676e <_printf_i+0x142>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	07df      	lsls	r7, r3, #31
 800675a:	d508      	bpl.n	800676e <_printf_i+0x142>
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	6861      	ldr	r1, [r4, #4]
 8006760:	4299      	cmp	r1, r3
 8006762:	bfde      	ittt	le
 8006764:	2330      	movle	r3, #48	@ 0x30
 8006766:	f806 3c01 	strble.w	r3, [r6, #-1]
 800676a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800676e:	1b92      	subs	r2, r2, r6
 8006770:	6122      	str	r2, [r4, #16]
 8006772:	f8cd a000 	str.w	sl, [sp]
 8006776:	464b      	mov	r3, r9
 8006778:	aa03      	add	r2, sp, #12
 800677a:	4621      	mov	r1, r4
 800677c:	4640      	mov	r0, r8
 800677e:	f7ff fee7 	bl	8006550 <_printf_common>
 8006782:	3001      	adds	r0, #1
 8006784:	d14a      	bne.n	800681c <_printf_i+0x1f0>
 8006786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800678a:	b004      	add	sp, #16
 800678c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	f043 0320 	orr.w	r3, r3, #32
 8006796:	6023      	str	r3, [r4, #0]
 8006798:	4832      	ldr	r0, [pc, #200]	@ (8006864 <_printf_i+0x238>)
 800679a:	2778      	movs	r7, #120	@ 0x78
 800679c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	6831      	ldr	r1, [r6, #0]
 80067a4:	061f      	lsls	r7, r3, #24
 80067a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80067aa:	d402      	bmi.n	80067b2 <_printf_i+0x186>
 80067ac:	065f      	lsls	r7, r3, #25
 80067ae:	bf48      	it	mi
 80067b0:	b2ad      	uxthmi	r5, r5
 80067b2:	6031      	str	r1, [r6, #0]
 80067b4:	07d9      	lsls	r1, r3, #31
 80067b6:	bf44      	itt	mi
 80067b8:	f043 0320 	orrmi.w	r3, r3, #32
 80067bc:	6023      	strmi	r3, [r4, #0]
 80067be:	b11d      	cbz	r5, 80067c8 <_printf_i+0x19c>
 80067c0:	2310      	movs	r3, #16
 80067c2:	e7ad      	b.n	8006720 <_printf_i+0xf4>
 80067c4:	4826      	ldr	r0, [pc, #152]	@ (8006860 <_printf_i+0x234>)
 80067c6:	e7e9      	b.n	800679c <_printf_i+0x170>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	f023 0320 	bic.w	r3, r3, #32
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	e7f6      	b.n	80067c0 <_printf_i+0x194>
 80067d2:	4616      	mov	r6, r2
 80067d4:	e7bd      	b.n	8006752 <_printf_i+0x126>
 80067d6:	6833      	ldr	r3, [r6, #0]
 80067d8:	6825      	ldr	r5, [r4, #0]
 80067da:	6961      	ldr	r1, [r4, #20]
 80067dc:	1d18      	adds	r0, r3, #4
 80067de:	6030      	str	r0, [r6, #0]
 80067e0:	062e      	lsls	r6, r5, #24
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	d501      	bpl.n	80067ea <_printf_i+0x1be>
 80067e6:	6019      	str	r1, [r3, #0]
 80067e8:	e002      	b.n	80067f0 <_printf_i+0x1c4>
 80067ea:	0668      	lsls	r0, r5, #25
 80067ec:	d5fb      	bpl.n	80067e6 <_printf_i+0x1ba>
 80067ee:	8019      	strh	r1, [r3, #0]
 80067f0:	2300      	movs	r3, #0
 80067f2:	6123      	str	r3, [r4, #16]
 80067f4:	4616      	mov	r6, r2
 80067f6:	e7bc      	b.n	8006772 <_printf_i+0x146>
 80067f8:	6833      	ldr	r3, [r6, #0]
 80067fa:	1d1a      	adds	r2, r3, #4
 80067fc:	6032      	str	r2, [r6, #0]
 80067fe:	681e      	ldr	r6, [r3, #0]
 8006800:	6862      	ldr	r2, [r4, #4]
 8006802:	2100      	movs	r1, #0
 8006804:	4630      	mov	r0, r6
 8006806:	f7f9 fcbb 	bl	8000180 <memchr>
 800680a:	b108      	cbz	r0, 8006810 <_printf_i+0x1e4>
 800680c:	1b80      	subs	r0, r0, r6
 800680e:	6060      	str	r0, [r4, #4]
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	6123      	str	r3, [r4, #16]
 8006814:	2300      	movs	r3, #0
 8006816:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800681a:	e7aa      	b.n	8006772 <_printf_i+0x146>
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	4632      	mov	r2, r6
 8006820:	4649      	mov	r1, r9
 8006822:	4640      	mov	r0, r8
 8006824:	47d0      	blx	sl
 8006826:	3001      	adds	r0, #1
 8006828:	d0ad      	beq.n	8006786 <_printf_i+0x15a>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	079b      	lsls	r3, r3, #30
 800682e:	d413      	bmi.n	8006858 <_printf_i+0x22c>
 8006830:	68e0      	ldr	r0, [r4, #12]
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	4298      	cmp	r0, r3
 8006836:	bfb8      	it	lt
 8006838:	4618      	movlt	r0, r3
 800683a:	e7a6      	b.n	800678a <_printf_i+0x15e>
 800683c:	2301      	movs	r3, #1
 800683e:	4632      	mov	r2, r6
 8006840:	4649      	mov	r1, r9
 8006842:	4640      	mov	r0, r8
 8006844:	47d0      	blx	sl
 8006846:	3001      	adds	r0, #1
 8006848:	d09d      	beq.n	8006786 <_printf_i+0x15a>
 800684a:	3501      	adds	r5, #1
 800684c:	68e3      	ldr	r3, [r4, #12]
 800684e:	9903      	ldr	r1, [sp, #12]
 8006850:	1a5b      	subs	r3, r3, r1
 8006852:	42ab      	cmp	r3, r5
 8006854:	dcf2      	bgt.n	800683c <_printf_i+0x210>
 8006856:	e7eb      	b.n	8006830 <_printf_i+0x204>
 8006858:	2500      	movs	r5, #0
 800685a:	f104 0619 	add.w	r6, r4, #25
 800685e:	e7f5      	b.n	800684c <_printf_i+0x220>
 8006860:	0800aa86 	.word	0x0800aa86
 8006864:	0800aa97 	.word	0x0800aa97

08006868 <_scanf_float>:
 8006868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	b087      	sub	sp, #28
 800686e:	4691      	mov	r9, r2
 8006870:	9303      	str	r3, [sp, #12]
 8006872:	688b      	ldr	r3, [r1, #8]
 8006874:	1e5a      	subs	r2, r3, #1
 8006876:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800687a:	bf81      	itttt	hi
 800687c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006880:	eb03 0b05 	addhi.w	fp, r3, r5
 8006884:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006888:	608b      	strhi	r3, [r1, #8]
 800688a:	680b      	ldr	r3, [r1, #0]
 800688c:	460a      	mov	r2, r1
 800688e:	f04f 0500 	mov.w	r5, #0
 8006892:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006896:	f842 3b1c 	str.w	r3, [r2], #28
 800689a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800689e:	4680      	mov	r8, r0
 80068a0:	460c      	mov	r4, r1
 80068a2:	bf98      	it	ls
 80068a4:	f04f 0b00 	movls.w	fp, #0
 80068a8:	9201      	str	r2, [sp, #4]
 80068aa:	4616      	mov	r6, r2
 80068ac:	46aa      	mov	sl, r5
 80068ae:	462f      	mov	r7, r5
 80068b0:	9502      	str	r5, [sp, #8]
 80068b2:	68a2      	ldr	r2, [r4, #8]
 80068b4:	b15a      	cbz	r2, 80068ce <_scanf_float+0x66>
 80068b6:	f8d9 3000 	ldr.w	r3, [r9]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80068be:	d863      	bhi.n	8006988 <_scanf_float+0x120>
 80068c0:	2b40      	cmp	r3, #64	@ 0x40
 80068c2:	d83b      	bhi.n	800693c <_scanf_float+0xd4>
 80068c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80068c8:	b2c8      	uxtb	r0, r1
 80068ca:	280e      	cmp	r0, #14
 80068cc:	d939      	bls.n	8006942 <_scanf_float+0xda>
 80068ce:	b11f      	cbz	r7, 80068d8 <_scanf_float+0x70>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068d6:	6023      	str	r3, [r4, #0]
 80068d8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80068dc:	f1ba 0f01 	cmp.w	sl, #1
 80068e0:	f200 8114 	bhi.w	8006b0c <_scanf_float+0x2a4>
 80068e4:	9b01      	ldr	r3, [sp, #4]
 80068e6:	429e      	cmp	r6, r3
 80068e8:	f200 8105 	bhi.w	8006af6 <_scanf_float+0x28e>
 80068ec:	2001      	movs	r0, #1
 80068ee:	b007      	add	sp, #28
 80068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80068f8:	2a0d      	cmp	r2, #13
 80068fa:	d8e8      	bhi.n	80068ce <_scanf_float+0x66>
 80068fc:	a101      	add	r1, pc, #4	@ (adr r1, 8006904 <_scanf_float+0x9c>)
 80068fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006902:	bf00      	nop
 8006904:	08006a4d 	.word	0x08006a4d
 8006908:	080068cf 	.word	0x080068cf
 800690c:	080068cf 	.word	0x080068cf
 8006910:	080068cf 	.word	0x080068cf
 8006914:	08006aa9 	.word	0x08006aa9
 8006918:	08006a83 	.word	0x08006a83
 800691c:	080068cf 	.word	0x080068cf
 8006920:	080068cf 	.word	0x080068cf
 8006924:	08006a5b 	.word	0x08006a5b
 8006928:	080068cf 	.word	0x080068cf
 800692c:	080068cf 	.word	0x080068cf
 8006930:	080068cf 	.word	0x080068cf
 8006934:	080068cf 	.word	0x080068cf
 8006938:	08006a17 	.word	0x08006a17
 800693c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006940:	e7da      	b.n	80068f8 <_scanf_float+0x90>
 8006942:	290e      	cmp	r1, #14
 8006944:	d8c3      	bhi.n	80068ce <_scanf_float+0x66>
 8006946:	a001      	add	r0, pc, #4	@ (adr r0, 800694c <_scanf_float+0xe4>)
 8006948:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800694c:	08006a07 	.word	0x08006a07
 8006950:	080068cf 	.word	0x080068cf
 8006954:	08006a07 	.word	0x08006a07
 8006958:	08006a97 	.word	0x08006a97
 800695c:	080068cf 	.word	0x080068cf
 8006960:	080069a9 	.word	0x080069a9
 8006964:	080069ed 	.word	0x080069ed
 8006968:	080069ed 	.word	0x080069ed
 800696c:	080069ed 	.word	0x080069ed
 8006970:	080069ed 	.word	0x080069ed
 8006974:	080069ed 	.word	0x080069ed
 8006978:	080069ed 	.word	0x080069ed
 800697c:	080069ed 	.word	0x080069ed
 8006980:	080069ed 	.word	0x080069ed
 8006984:	080069ed 	.word	0x080069ed
 8006988:	2b6e      	cmp	r3, #110	@ 0x6e
 800698a:	d809      	bhi.n	80069a0 <_scanf_float+0x138>
 800698c:	2b60      	cmp	r3, #96	@ 0x60
 800698e:	d8b1      	bhi.n	80068f4 <_scanf_float+0x8c>
 8006990:	2b54      	cmp	r3, #84	@ 0x54
 8006992:	d07b      	beq.n	8006a8c <_scanf_float+0x224>
 8006994:	2b59      	cmp	r3, #89	@ 0x59
 8006996:	d19a      	bne.n	80068ce <_scanf_float+0x66>
 8006998:	2d07      	cmp	r5, #7
 800699a:	d198      	bne.n	80068ce <_scanf_float+0x66>
 800699c:	2508      	movs	r5, #8
 800699e:	e02f      	b.n	8006a00 <_scanf_float+0x198>
 80069a0:	2b74      	cmp	r3, #116	@ 0x74
 80069a2:	d073      	beq.n	8006a8c <_scanf_float+0x224>
 80069a4:	2b79      	cmp	r3, #121	@ 0x79
 80069a6:	e7f6      	b.n	8006996 <_scanf_float+0x12e>
 80069a8:	6821      	ldr	r1, [r4, #0]
 80069aa:	05c8      	lsls	r0, r1, #23
 80069ac:	d51e      	bpl.n	80069ec <_scanf_float+0x184>
 80069ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80069b2:	6021      	str	r1, [r4, #0]
 80069b4:	3701      	adds	r7, #1
 80069b6:	f1bb 0f00 	cmp.w	fp, #0
 80069ba:	d003      	beq.n	80069c4 <_scanf_float+0x15c>
 80069bc:	3201      	adds	r2, #1
 80069be:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80069c2:	60a2      	str	r2, [r4, #8]
 80069c4:	68a3      	ldr	r3, [r4, #8]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	60a3      	str	r3, [r4, #8]
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	3301      	adds	r3, #1
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80069dc:	f340 8082 	ble.w	8006ae4 <_scanf_float+0x27c>
 80069e0:	f8d9 3000 	ldr.w	r3, [r9]
 80069e4:	3301      	adds	r3, #1
 80069e6:	f8c9 3000 	str.w	r3, [r9]
 80069ea:	e762      	b.n	80068b2 <_scanf_float+0x4a>
 80069ec:	eb1a 0105 	adds.w	r1, sl, r5
 80069f0:	f47f af6d 	bne.w	80068ce <_scanf_float+0x66>
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80069fa:	6022      	str	r2, [r4, #0]
 80069fc:	460d      	mov	r5, r1
 80069fe:	468a      	mov	sl, r1
 8006a00:	f806 3b01 	strb.w	r3, [r6], #1
 8006a04:	e7de      	b.n	80069c4 <_scanf_float+0x15c>
 8006a06:	6822      	ldr	r2, [r4, #0]
 8006a08:	0610      	lsls	r0, r2, #24
 8006a0a:	f57f af60 	bpl.w	80068ce <_scanf_float+0x66>
 8006a0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a12:	6022      	str	r2, [r4, #0]
 8006a14:	e7f4      	b.n	8006a00 <_scanf_float+0x198>
 8006a16:	f1ba 0f00 	cmp.w	sl, #0
 8006a1a:	d10c      	bne.n	8006a36 <_scanf_float+0x1ce>
 8006a1c:	b977      	cbnz	r7, 8006a3c <_scanf_float+0x1d4>
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a28:	d108      	bne.n	8006a3c <_scanf_float+0x1d4>
 8006a2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a2e:	6022      	str	r2, [r4, #0]
 8006a30:	f04f 0a01 	mov.w	sl, #1
 8006a34:	e7e4      	b.n	8006a00 <_scanf_float+0x198>
 8006a36:	f1ba 0f02 	cmp.w	sl, #2
 8006a3a:	d050      	beq.n	8006ade <_scanf_float+0x276>
 8006a3c:	2d01      	cmp	r5, #1
 8006a3e:	d002      	beq.n	8006a46 <_scanf_float+0x1de>
 8006a40:	2d04      	cmp	r5, #4
 8006a42:	f47f af44 	bne.w	80068ce <_scanf_float+0x66>
 8006a46:	3501      	adds	r5, #1
 8006a48:	b2ed      	uxtb	r5, r5
 8006a4a:	e7d9      	b.n	8006a00 <_scanf_float+0x198>
 8006a4c:	f1ba 0f01 	cmp.w	sl, #1
 8006a50:	f47f af3d 	bne.w	80068ce <_scanf_float+0x66>
 8006a54:	f04f 0a02 	mov.w	sl, #2
 8006a58:	e7d2      	b.n	8006a00 <_scanf_float+0x198>
 8006a5a:	b975      	cbnz	r5, 8006a7a <_scanf_float+0x212>
 8006a5c:	2f00      	cmp	r7, #0
 8006a5e:	f47f af37 	bne.w	80068d0 <_scanf_float+0x68>
 8006a62:	6822      	ldr	r2, [r4, #0]
 8006a64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a6c:	f040 80fe 	bne.w	8006c6c <_scanf_float+0x404>
 8006a70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a74:	6022      	str	r2, [r4, #0]
 8006a76:	2501      	movs	r5, #1
 8006a78:	e7c2      	b.n	8006a00 <_scanf_float+0x198>
 8006a7a:	2d03      	cmp	r5, #3
 8006a7c:	d0e3      	beq.n	8006a46 <_scanf_float+0x1de>
 8006a7e:	2d05      	cmp	r5, #5
 8006a80:	e7df      	b.n	8006a42 <_scanf_float+0x1da>
 8006a82:	2d02      	cmp	r5, #2
 8006a84:	f47f af23 	bne.w	80068ce <_scanf_float+0x66>
 8006a88:	2503      	movs	r5, #3
 8006a8a:	e7b9      	b.n	8006a00 <_scanf_float+0x198>
 8006a8c:	2d06      	cmp	r5, #6
 8006a8e:	f47f af1e 	bne.w	80068ce <_scanf_float+0x66>
 8006a92:	2507      	movs	r5, #7
 8006a94:	e7b4      	b.n	8006a00 <_scanf_float+0x198>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	0591      	lsls	r1, r2, #22
 8006a9a:	f57f af18 	bpl.w	80068ce <_scanf_float+0x66>
 8006a9e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006aa2:	6022      	str	r2, [r4, #0]
 8006aa4:	9702      	str	r7, [sp, #8]
 8006aa6:	e7ab      	b.n	8006a00 <_scanf_float+0x198>
 8006aa8:	6822      	ldr	r2, [r4, #0]
 8006aaa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006aae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ab2:	d005      	beq.n	8006ac0 <_scanf_float+0x258>
 8006ab4:	0550      	lsls	r0, r2, #21
 8006ab6:	f57f af0a 	bpl.w	80068ce <_scanf_float+0x66>
 8006aba:	2f00      	cmp	r7, #0
 8006abc:	f000 80d6 	beq.w	8006c6c <_scanf_float+0x404>
 8006ac0:	0591      	lsls	r1, r2, #22
 8006ac2:	bf58      	it	pl
 8006ac4:	9902      	ldrpl	r1, [sp, #8]
 8006ac6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006aca:	bf58      	it	pl
 8006acc:	1a79      	subpl	r1, r7, r1
 8006ace:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ad2:	bf58      	it	pl
 8006ad4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ad8:	6022      	str	r2, [r4, #0]
 8006ada:	2700      	movs	r7, #0
 8006adc:	e790      	b.n	8006a00 <_scanf_float+0x198>
 8006ade:	f04f 0a03 	mov.w	sl, #3
 8006ae2:	e78d      	b.n	8006a00 <_scanf_float+0x198>
 8006ae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4640      	mov	r0, r8
 8006aec:	4798      	blx	r3
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f43f aedf 	beq.w	80068b2 <_scanf_float+0x4a>
 8006af4:	e6eb      	b.n	80068ce <_scanf_float+0x66>
 8006af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006afa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006afe:	464a      	mov	r2, r9
 8006b00:	4640      	mov	r0, r8
 8006b02:	4798      	blx	r3
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	e6eb      	b.n	80068e4 <_scanf_float+0x7c>
 8006b0c:	1e6b      	subs	r3, r5, #1
 8006b0e:	2b06      	cmp	r3, #6
 8006b10:	d824      	bhi.n	8006b5c <_scanf_float+0x2f4>
 8006b12:	2d02      	cmp	r5, #2
 8006b14:	d836      	bhi.n	8006b84 <_scanf_float+0x31c>
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	429e      	cmp	r6, r3
 8006b1a:	f67f aee7 	bls.w	80068ec <_scanf_float+0x84>
 8006b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b26:	464a      	mov	r2, r9
 8006b28:	4640      	mov	r0, r8
 8006b2a:	4798      	blx	r3
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	6123      	str	r3, [r4, #16]
 8006b32:	e7f0      	b.n	8006b16 <_scanf_float+0x2ae>
 8006b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006b3c:	464a      	mov	r2, r9
 8006b3e:	4640      	mov	r0, r8
 8006b40:	4798      	blx	r3
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006b4c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b50:	f1ba 0f02 	cmp.w	sl, #2
 8006b54:	d1ee      	bne.n	8006b34 <_scanf_float+0x2cc>
 8006b56:	3d03      	subs	r5, #3
 8006b58:	b2ed      	uxtb	r5, r5
 8006b5a:	1b76      	subs	r6, r6, r5
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	05da      	lsls	r2, r3, #23
 8006b60:	d530      	bpl.n	8006bc4 <_scanf_float+0x35c>
 8006b62:	055b      	lsls	r3, r3, #21
 8006b64:	d511      	bpl.n	8006b8a <_scanf_float+0x322>
 8006b66:	9b01      	ldr	r3, [sp, #4]
 8006b68:	429e      	cmp	r6, r3
 8006b6a:	f67f aebf 	bls.w	80068ec <_scanf_float+0x84>
 8006b6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b76:	464a      	mov	r2, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	4798      	blx	r3
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	6123      	str	r3, [r4, #16]
 8006b82:	e7f0      	b.n	8006b66 <_scanf_float+0x2fe>
 8006b84:	46aa      	mov	sl, r5
 8006b86:	46b3      	mov	fp, r6
 8006b88:	e7de      	b.n	8006b48 <_scanf_float+0x2e0>
 8006b8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	2965      	cmp	r1, #101	@ 0x65
 8006b92:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006b96:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	d00c      	beq.n	8006bb8 <_scanf_float+0x350>
 8006b9e:	2945      	cmp	r1, #69	@ 0x45
 8006ba0:	d00a      	beq.n	8006bb8 <_scanf_float+0x350>
 8006ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ba6:	464a      	mov	r2, r9
 8006ba8:	4640      	mov	r0, r8
 8006baa:	4798      	blx	r3
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	1eb5      	subs	r5, r6, #2
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bbc:	464a      	mov	r2, r9
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	4798      	blx	r3
 8006bc2:	462e      	mov	r6, r5
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	f012 0210 	ands.w	r2, r2, #16
 8006bca:	d001      	beq.n	8006bd0 <_scanf_float+0x368>
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e68e      	b.n	80068ee <_scanf_float+0x86>
 8006bd0:	7032      	strb	r2, [r6, #0]
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bdc:	d125      	bne.n	8006c2a <_scanf_float+0x3c2>
 8006bde:	9b02      	ldr	r3, [sp, #8]
 8006be0:	429f      	cmp	r7, r3
 8006be2:	d00a      	beq.n	8006bfa <_scanf_float+0x392>
 8006be4:	1bda      	subs	r2, r3, r7
 8006be6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006bea:	429e      	cmp	r6, r3
 8006bec:	bf28      	it	cs
 8006bee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006bf2:	491f      	ldr	r1, [pc, #124]	@ (8006c70 <_scanf_float+0x408>)
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f000 f971 	bl	8006edc <siprintf>
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	9901      	ldr	r1, [sp, #4]
 8006bfe:	4640      	mov	r0, r8
 8006c00:	f002 fcda 	bl	80095b8 <_strtod_r>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	6825      	ldr	r5, [r4, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f015 0f02 	tst.w	r5, #2
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	f103 0204 	add.w	r2, r3, #4
 8006c16:	d015      	beq.n	8006c44 <_scanf_float+0x3dc>
 8006c18:	9903      	ldr	r1, [sp, #12]
 8006c1a:	600a      	str	r2, [r1, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	e9c3 6700 	strd	r6, r7, [r3]
 8006c22:	68e3      	ldr	r3, [r4, #12]
 8006c24:	3301      	adds	r3, #1
 8006c26:	60e3      	str	r3, [r4, #12]
 8006c28:	e7d0      	b.n	8006bcc <_scanf_float+0x364>
 8006c2a:	9b04      	ldr	r3, [sp, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0e4      	beq.n	8006bfa <_scanf_float+0x392>
 8006c30:	9905      	ldr	r1, [sp, #20]
 8006c32:	230a      	movs	r3, #10
 8006c34:	3101      	adds	r1, #1
 8006c36:	4640      	mov	r0, r8
 8006c38:	f002 fd3e 	bl	80096b8 <_strtol_r>
 8006c3c:	9b04      	ldr	r3, [sp, #16]
 8006c3e:	9e05      	ldr	r6, [sp, #20]
 8006c40:	1ac2      	subs	r2, r0, r3
 8006c42:	e7d0      	b.n	8006be6 <_scanf_float+0x37e>
 8006c44:	076d      	lsls	r5, r5, #29
 8006c46:	d4e7      	bmi.n	8006c18 <_scanf_float+0x3b0>
 8006c48:	9d03      	ldr	r5, [sp, #12]
 8006c4a:	602a      	str	r2, [r5, #0]
 8006c4c:	681d      	ldr	r5, [r3, #0]
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	f7f9 ff43 	bl	8000adc <__aeabi_dcmpun>
 8006c56:	b120      	cbz	r0, 8006c62 <_scanf_float+0x3fa>
 8006c58:	4806      	ldr	r0, [pc, #24]	@ (8006c74 <_scanf_float+0x40c>)
 8006c5a:	f000 fab9 	bl	80071d0 <nanf>
 8006c5e:	6028      	str	r0, [r5, #0]
 8006c60:	e7df      	b.n	8006c22 <_scanf_float+0x3ba>
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 ff97 	bl	8000b98 <__aeabi_d2f>
 8006c6a:	e7f8      	b.n	8006c5e <_scanf_float+0x3f6>
 8006c6c:	2700      	movs	r7, #0
 8006c6e:	e633      	b.n	80068d8 <_scanf_float+0x70>
 8006c70:	0800aaa8 	.word	0x0800aaa8
 8006c74:	0800abe9 	.word	0x0800abe9

08006c78 <std>:
 8006c78:	2300      	movs	r3, #0
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c86:	6083      	str	r3, [r0, #8]
 8006c88:	8181      	strh	r1, [r0, #12]
 8006c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c8c:	81c2      	strh	r2, [r0, #14]
 8006c8e:	6183      	str	r3, [r0, #24]
 8006c90:	4619      	mov	r1, r3
 8006c92:	2208      	movs	r2, #8
 8006c94:	305c      	adds	r0, #92	@ 0x5c
 8006c96:	f000 fa1b 	bl	80070d0 <memset>
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <std+0x58>)
 8006c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <std+0x5c>)
 8006ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <std+0x60>)
 8006ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cdc <std+0x64>)
 8006ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006caa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce0 <std+0x68>)
 8006cac:	6224      	str	r4, [r4, #32]
 8006cae:	429c      	cmp	r4, r3
 8006cb0:	d006      	beq.n	8006cc0 <std+0x48>
 8006cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cb6:	4294      	cmp	r4, r2
 8006cb8:	d002      	beq.n	8006cc0 <std+0x48>
 8006cba:	33d0      	adds	r3, #208	@ 0xd0
 8006cbc:	429c      	cmp	r4, r3
 8006cbe:	d105      	bne.n	8006ccc <std+0x54>
 8006cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	f000 ba7e 	b.w	80071c8 <__retarget_lock_init_recursive>
 8006ccc:	bd10      	pop	{r4, pc}
 8006cce:	bf00      	nop
 8006cd0:	08006f21 	.word	0x08006f21
 8006cd4:	08006f43 	.word	0x08006f43
 8006cd8:	08006f7b 	.word	0x08006f7b
 8006cdc:	08006f9f 	.word	0x08006f9f
 8006ce0:	200003b4 	.word	0x200003b4

08006ce4 <stdio_exit_handler>:
 8006ce4:	4a02      	ldr	r2, [pc, #8]	@ (8006cf0 <stdio_exit_handler+0xc>)
 8006ce6:	4903      	ldr	r1, [pc, #12]	@ (8006cf4 <stdio_exit_handler+0x10>)
 8006ce8:	4803      	ldr	r0, [pc, #12]	@ (8006cf8 <stdio_exit_handler+0x14>)
 8006cea:	f000 b869 	b.w	8006dc0 <_fwalk_sglue>
 8006cee:	bf00      	nop
 8006cf0:	20000018 	.word	0x20000018
 8006cf4:	08009ced 	.word	0x08009ced
 8006cf8:	20000028 	.word	0x20000028

08006cfc <cleanup_stdio>:
 8006cfc:	6841      	ldr	r1, [r0, #4]
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <cleanup_stdio+0x34>)
 8006d00:	4299      	cmp	r1, r3
 8006d02:	b510      	push	{r4, lr}
 8006d04:	4604      	mov	r4, r0
 8006d06:	d001      	beq.n	8006d0c <cleanup_stdio+0x10>
 8006d08:	f002 fff0 	bl	8009cec <_fflush_r>
 8006d0c:	68a1      	ldr	r1, [r4, #8]
 8006d0e:	4b09      	ldr	r3, [pc, #36]	@ (8006d34 <cleanup_stdio+0x38>)
 8006d10:	4299      	cmp	r1, r3
 8006d12:	d002      	beq.n	8006d1a <cleanup_stdio+0x1e>
 8006d14:	4620      	mov	r0, r4
 8006d16:	f002 ffe9 	bl	8009cec <_fflush_r>
 8006d1a:	68e1      	ldr	r1, [r4, #12]
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <cleanup_stdio+0x3c>)
 8006d1e:	4299      	cmp	r1, r3
 8006d20:	d004      	beq.n	8006d2c <cleanup_stdio+0x30>
 8006d22:	4620      	mov	r0, r4
 8006d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d28:	f002 bfe0 	b.w	8009cec <_fflush_r>
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	bf00      	nop
 8006d30:	200003b4 	.word	0x200003b4
 8006d34:	2000041c 	.word	0x2000041c
 8006d38:	20000484 	.word	0x20000484

08006d3c <global_stdio_init.part.0>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d6c <global_stdio_init.part.0+0x30>)
 8006d40:	4c0b      	ldr	r4, [pc, #44]	@ (8006d70 <global_stdio_init.part.0+0x34>)
 8006d42:	4a0c      	ldr	r2, [pc, #48]	@ (8006d74 <global_stdio_init.part.0+0x38>)
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	4620      	mov	r0, r4
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2104      	movs	r1, #4
 8006d4c:	f7ff ff94 	bl	8006c78 <std>
 8006d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d54:	2201      	movs	r2, #1
 8006d56:	2109      	movs	r1, #9
 8006d58:	f7ff ff8e 	bl	8006c78 <std>
 8006d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d60:	2202      	movs	r2, #2
 8006d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d66:	2112      	movs	r1, #18
 8006d68:	f7ff bf86 	b.w	8006c78 <std>
 8006d6c:	200004ec 	.word	0x200004ec
 8006d70:	200003b4 	.word	0x200003b4
 8006d74:	08006ce5 	.word	0x08006ce5

08006d78 <__sfp_lock_acquire>:
 8006d78:	4801      	ldr	r0, [pc, #4]	@ (8006d80 <__sfp_lock_acquire+0x8>)
 8006d7a:	f000 ba26 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8006d7e:	bf00      	nop
 8006d80:	200004f5 	.word	0x200004f5

08006d84 <__sfp_lock_release>:
 8006d84:	4801      	ldr	r0, [pc, #4]	@ (8006d8c <__sfp_lock_release+0x8>)
 8006d86:	f000 ba21 	b.w	80071cc <__retarget_lock_release_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	200004f5 	.word	0x200004f5

08006d90 <__sinit>:
 8006d90:	b510      	push	{r4, lr}
 8006d92:	4604      	mov	r4, r0
 8006d94:	f7ff fff0 	bl	8006d78 <__sfp_lock_acquire>
 8006d98:	6a23      	ldr	r3, [r4, #32]
 8006d9a:	b11b      	cbz	r3, 8006da4 <__sinit+0x14>
 8006d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da0:	f7ff bff0 	b.w	8006d84 <__sfp_lock_release>
 8006da4:	4b04      	ldr	r3, [pc, #16]	@ (8006db8 <__sinit+0x28>)
 8006da6:	6223      	str	r3, [r4, #32]
 8006da8:	4b04      	ldr	r3, [pc, #16]	@ (8006dbc <__sinit+0x2c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f5      	bne.n	8006d9c <__sinit+0xc>
 8006db0:	f7ff ffc4 	bl	8006d3c <global_stdio_init.part.0>
 8006db4:	e7f2      	b.n	8006d9c <__sinit+0xc>
 8006db6:	bf00      	nop
 8006db8:	08006cfd 	.word	0x08006cfd
 8006dbc:	200004ec 	.word	0x200004ec

08006dc0 <_fwalk_sglue>:
 8006dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	4688      	mov	r8, r1
 8006dc8:	4614      	mov	r4, r2
 8006dca:	2600      	movs	r6, #0
 8006dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8006dd4:	d505      	bpl.n	8006de2 <_fwalk_sglue+0x22>
 8006dd6:	6824      	ldr	r4, [r4, #0]
 8006dd8:	2c00      	cmp	r4, #0
 8006dda:	d1f7      	bne.n	8006dcc <_fwalk_sglue+0xc>
 8006ddc:	4630      	mov	r0, r6
 8006dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de2:	89ab      	ldrh	r3, [r5, #12]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d907      	bls.n	8006df8 <_fwalk_sglue+0x38>
 8006de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dec:	3301      	adds	r3, #1
 8006dee:	d003      	beq.n	8006df8 <_fwalk_sglue+0x38>
 8006df0:	4629      	mov	r1, r5
 8006df2:	4638      	mov	r0, r7
 8006df4:	47c0      	blx	r8
 8006df6:	4306      	orrs	r6, r0
 8006df8:	3568      	adds	r5, #104	@ 0x68
 8006dfa:	e7e9      	b.n	8006dd0 <_fwalk_sglue+0x10>

08006dfc <iprintf>:
 8006dfc:	b40f      	push	{r0, r1, r2, r3}
 8006dfe:	b507      	push	{r0, r1, r2, lr}
 8006e00:	4906      	ldr	r1, [pc, #24]	@ (8006e1c <iprintf+0x20>)
 8006e02:	ab04      	add	r3, sp, #16
 8006e04:	6808      	ldr	r0, [r1, #0]
 8006e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0a:	6881      	ldr	r1, [r0, #8]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	f002 fdd5 	bl	80099bc <_vfiprintf_r>
 8006e12:	b003      	add	sp, #12
 8006e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e18:	b004      	add	sp, #16
 8006e1a:	4770      	bx	lr
 8006e1c:	20000024 	.word	0x20000024

08006e20 <_puts_r>:
 8006e20:	6a03      	ldr	r3, [r0, #32]
 8006e22:	b570      	push	{r4, r5, r6, lr}
 8006e24:	6884      	ldr	r4, [r0, #8]
 8006e26:	4605      	mov	r5, r0
 8006e28:	460e      	mov	r6, r1
 8006e2a:	b90b      	cbnz	r3, 8006e30 <_puts_r+0x10>
 8006e2c:	f7ff ffb0 	bl	8006d90 <__sinit>
 8006e30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e32:	07db      	lsls	r3, r3, #31
 8006e34:	d405      	bmi.n	8006e42 <_puts_r+0x22>
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	0598      	lsls	r0, r3, #22
 8006e3a:	d402      	bmi.n	8006e42 <_puts_r+0x22>
 8006e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e3e:	f000 f9c4 	bl	80071ca <__retarget_lock_acquire_recursive>
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	0719      	lsls	r1, r3, #28
 8006e46:	d502      	bpl.n	8006e4e <_puts_r+0x2e>
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d135      	bne.n	8006eba <_puts_r+0x9a>
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4628      	mov	r0, r5
 8006e52:	f000 f8e7 	bl	8007024 <__swsetup_r>
 8006e56:	b380      	cbz	r0, 8006eba <_puts_r+0x9a>
 8006e58:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006e5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e5e:	07da      	lsls	r2, r3, #31
 8006e60:	d405      	bmi.n	8006e6e <_puts_r+0x4e>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	059b      	lsls	r3, r3, #22
 8006e66:	d402      	bmi.n	8006e6e <_puts_r+0x4e>
 8006e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e6a:	f000 f9af 	bl	80071cc <__retarget_lock_release_recursive>
 8006e6e:	4628      	mov	r0, r5
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da04      	bge.n	8006e80 <_puts_r+0x60>
 8006e76:	69a2      	ldr	r2, [r4, #24]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	dc17      	bgt.n	8006eac <_puts_r+0x8c>
 8006e7c:	290a      	cmp	r1, #10
 8006e7e:	d015      	beq.n	8006eac <_puts_r+0x8c>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	6022      	str	r2, [r4, #0]
 8006e86:	7019      	strb	r1, [r3, #0]
 8006e88:	68a3      	ldr	r3, [r4, #8]
 8006e8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	60a3      	str	r3, [r4, #8]
 8006e92:	2900      	cmp	r1, #0
 8006e94:	d1ed      	bne.n	8006e72 <_puts_r+0x52>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da11      	bge.n	8006ebe <_puts_r+0x9e>
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	210a      	movs	r1, #10
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f000 f881 	bl	8006fa6 <__swbuf_r>
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d0d7      	beq.n	8006e58 <_puts_r+0x38>
 8006ea8:	250a      	movs	r5, #10
 8006eaa:	e7d7      	b.n	8006e5c <_puts_r+0x3c>
 8006eac:	4622      	mov	r2, r4
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 f879 	bl	8006fa6 <__swbuf_r>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d1e7      	bne.n	8006e88 <_puts_r+0x68>
 8006eb8:	e7ce      	b.n	8006e58 <_puts_r+0x38>
 8006eba:	3e01      	subs	r6, #1
 8006ebc:	e7e4      	b.n	8006e88 <_puts_r+0x68>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	6022      	str	r2, [r4, #0]
 8006ec4:	220a      	movs	r2, #10
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	e7ee      	b.n	8006ea8 <_puts_r+0x88>
	...

08006ecc <puts>:
 8006ecc:	4b02      	ldr	r3, [pc, #8]	@ (8006ed8 <puts+0xc>)
 8006ece:	4601      	mov	r1, r0
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f7ff bfa5 	b.w	8006e20 <_puts_r>
 8006ed6:	bf00      	nop
 8006ed8:	20000024 	.word	0x20000024

08006edc <siprintf>:
 8006edc:	b40e      	push	{r1, r2, r3}
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	b09d      	sub	sp, #116	@ 0x74
 8006ee2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006ee4:	9002      	str	r0, [sp, #8]
 8006ee6:	9006      	str	r0, [sp, #24]
 8006ee8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006eec:	480a      	ldr	r0, [pc, #40]	@ (8006f18 <siprintf+0x3c>)
 8006eee:	9107      	str	r1, [sp, #28]
 8006ef0:	9104      	str	r1, [sp, #16]
 8006ef2:	490a      	ldr	r1, [pc, #40]	@ (8006f1c <siprintf+0x40>)
 8006ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef8:	9105      	str	r1, [sp, #20]
 8006efa:	2400      	movs	r4, #0
 8006efc:	a902      	add	r1, sp, #8
 8006efe:	6800      	ldr	r0, [r0, #0]
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006f04:	f002 fc36 	bl	8009774 <_svfiprintf_r>
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	701c      	strb	r4, [r3, #0]
 8006f0c:	b01d      	add	sp, #116	@ 0x74
 8006f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f12:	b003      	add	sp, #12
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000024 	.word	0x20000024
 8006f1c:	ffff0208 	.word	0xffff0208

08006f20 <__sread>:
 8006f20:	b510      	push	{r4, lr}
 8006f22:	460c      	mov	r4, r1
 8006f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f28:	f000 f900 	bl	800712c <_read_r>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	bfab      	itete	ge
 8006f30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f32:	89a3      	ldrhlt	r3, [r4, #12]
 8006f34:	181b      	addge	r3, r3, r0
 8006f36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f3a:	bfac      	ite	ge
 8006f3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f3e:	81a3      	strhlt	r3, [r4, #12]
 8006f40:	bd10      	pop	{r4, pc}

08006f42 <__swrite>:
 8006f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f46:	461f      	mov	r7, r3
 8006f48:	898b      	ldrh	r3, [r1, #12]
 8006f4a:	05db      	lsls	r3, r3, #23
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4616      	mov	r6, r2
 8006f52:	d505      	bpl.n	8006f60 <__swrite+0x1e>
 8006f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f58:	2302      	movs	r3, #2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f000 f8d4 	bl	8007108 <_lseek_r>
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	463b      	mov	r3, r7
 8006f70:	4628      	mov	r0, r5
 8006f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f76:	f000 b8eb 	b.w	8007150 <_write_r>

08006f7a <__sseek>:
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f82:	f000 f8c1 	bl	8007108 <_lseek_r>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	bf15      	itete	ne
 8006f8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f96:	81a3      	strheq	r3, [r4, #12]
 8006f98:	bf18      	it	ne
 8006f9a:	81a3      	strhne	r3, [r4, #12]
 8006f9c:	bd10      	pop	{r4, pc}

08006f9e <__sclose>:
 8006f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa2:	f000 b8a1 	b.w	80070e8 <_close_r>

08006fa6 <__swbuf_r>:
 8006fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa8:	460e      	mov	r6, r1
 8006faa:	4614      	mov	r4, r2
 8006fac:	4605      	mov	r5, r0
 8006fae:	b118      	cbz	r0, 8006fb8 <__swbuf_r+0x12>
 8006fb0:	6a03      	ldr	r3, [r0, #32]
 8006fb2:	b90b      	cbnz	r3, 8006fb8 <__swbuf_r+0x12>
 8006fb4:	f7ff feec 	bl	8006d90 <__sinit>
 8006fb8:	69a3      	ldr	r3, [r4, #24]
 8006fba:	60a3      	str	r3, [r4, #8]
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	071a      	lsls	r2, r3, #28
 8006fc0:	d501      	bpl.n	8006fc6 <__swbuf_r+0x20>
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	b943      	cbnz	r3, 8006fd8 <__swbuf_r+0x32>
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f000 f82b 	bl	8007024 <__swsetup_r>
 8006fce:	b118      	cbz	r0, 8006fd8 <__swbuf_r+0x32>
 8006fd0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	6922      	ldr	r2, [r4, #16]
 8006fdc:	1a98      	subs	r0, r3, r2
 8006fde:	6963      	ldr	r3, [r4, #20]
 8006fe0:	b2f6      	uxtb	r6, r6
 8006fe2:	4283      	cmp	r3, r0
 8006fe4:	4637      	mov	r7, r6
 8006fe6:	dc05      	bgt.n	8006ff4 <__swbuf_r+0x4e>
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4628      	mov	r0, r5
 8006fec:	f002 fe7e 	bl	8009cec <_fflush_r>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d1ed      	bne.n	8006fd0 <__swbuf_r+0x2a>
 8006ff4:	68a3      	ldr	r3, [r4, #8]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	60a3      	str	r3, [r4, #8]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	6022      	str	r2, [r4, #0]
 8007000:	701e      	strb	r6, [r3, #0]
 8007002:	6962      	ldr	r2, [r4, #20]
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	429a      	cmp	r2, r3
 8007008:	d004      	beq.n	8007014 <__swbuf_r+0x6e>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	07db      	lsls	r3, r3, #31
 800700e:	d5e1      	bpl.n	8006fd4 <__swbuf_r+0x2e>
 8007010:	2e0a      	cmp	r6, #10
 8007012:	d1df      	bne.n	8006fd4 <__swbuf_r+0x2e>
 8007014:	4621      	mov	r1, r4
 8007016:	4628      	mov	r0, r5
 8007018:	f002 fe68 	bl	8009cec <_fflush_r>
 800701c:	2800      	cmp	r0, #0
 800701e:	d0d9      	beq.n	8006fd4 <__swbuf_r+0x2e>
 8007020:	e7d6      	b.n	8006fd0 <__swbuf_r+0x2a>
	...

08007024 <__swsetup_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4b29      	ldr	r3, [pc, #164]	@ (80070cc <__swsetup_r+0xa8>)
 8007028:	4605      	mov	r5, r0
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	460c      	mov	r4, r1
 800702e:	b118      	cbz	r0, 8007038 <__swsetup_r+0x14>
 8007030:	6a03      	ldr	r3, [r0, #32]
 8007032:	b90b      	cbnz	r3, 8007038 <__swsetup_r+0x14>
 8007034:	f7ff feac 	bl	8006d90 <__sinit>
 8007038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703c:	0719      	lsls	r1, r3, #28
 800703e:	d422      	bmi.n	8007086 <__swsetup_r+0x62>
 8007040:	06da      	lsls	r2, r3, #27
 8007042:	d407      	bmi.n	8007054 <__swsetup_r+0x30>
 8007044:	2209      	movs	r2, #9
 8007046:	602a      	str	r2, [r5, #0]
 8007048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007052:	e033      	b.n	80070bc <__swsetup_r+0x98>
 8007054:	0758      	lsls	r0, r3, #29
 8007056:	d512      	bpl.n	800707e <__swsetup_r+0x5a>
 8007058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800705a:	b141      	cbz	r1, 800706e <__swsetup_r+0x4a>
 800705c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007060:	4299      	cmp	r1, r3
 8007062:	d002      	beq.n	800706a <__swsetup_r+0x46>
 8007064:	4628      	mov	r0, r5
 8007066:	f000 ff0f 	bl	8007e88 <_free_r>
 800706a:	2300      	movs	r3, #0
 800706c:	6363      	str	r3, [r4, #52]	@ 0x34
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	2300      	movs	r3, #0
 8007078:	6063      	str	r3, [r4, #4]
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f043 0308 	orr.w	r3, r3, #8
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	b94b      	cbnz	r3, 800709e <__swsetup_r+0x7a>
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007094:	d003      	beq.n	800709e <__swsetup_r+0x7a>
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f002 fe75 	bl	8009d88 <__smakebuf_r>
 800709e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a2:	f013 0201 	ands.w	r2, r3, #1
 80070a6:	d00a      	beq.n	80070be <__swsetup_r+0x9a>
 80070a8:	2200      	movs	r2, #0
 80070aa:	60a2      	str	r2, [r4, #8]
 80070ac:	6962      	ldr	r2, [r4, #20]
 80070ae:	4252      	negs	r2, r2
 80070b0:	61a2      	str	r2, [r4, #24]
 80070b2:	6922      	ldr	r2, [r4, #16]
 80070b4:	b942      	cbnz	r2, 80070c8 <__swsetup_r+0xa4>
 80070b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070ba:	d1c5      	bne.n	8007048 <__swsetup_r+0x24>
 80070bc:	bd38      	pop	{r3, r4, r5, pc}
 80070be:	0799      	lsls	r1, r3, #30
 80070c0:	bf58      	it	pl
 80070c2:	6962      	ldrpl	r2, [r4, #20]
 80070c4:	60a2      	str	r2, [r4, #8]
 80070c6:	e7f4      	b.n	80070b2 <__swsetup_r+0x8e>
 80070c8:	2000      	movs	r0, #0
 80070ca:	e7f7      	b.n	80070bc <__swsetup_r+0x98>
 80070cc:	20000024 	.word	0x20000024

080070d0 <memset>:
 80070d0:	4402      	add	r2, r0
 80070d2:	4603      	mov	r3, r0
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d100      	bne.n	80070da <memset+0xa>
 80070d8:	4770      	bx	lr
 80070da:	f803 1b01 	strb.w	r1, [r3], #1
 80070de:	e7f9      	b.n	80070d4 <memset+0x4>

080070e0 <_localeconv_r>:
 80070e0:	4800      	ldr	r0, [pc, #0]	@ (80070e4 <_localeconv_r+0x4>)
 80070e2:	4770      	bx	lr
 80070e4:	20000164 	.word	0x20000164

080070e8 <_close_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d06      	ldr	r5, [pc, #24]	@ (8007104 <_close_r+0x1c>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	f7fa fcc0 	bl	8001a78 <_close>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_close_r+0x1a>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_close_r+0x1a>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	200004f0 	.word	0x200004f0

08007108 <_lseek_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d07      	ldr	r5, [pc, #28]	@ (8007128 <_lseek_r+0x20>)
 800710c:	4604      	mov	r4, r0
 800710e:	4608      	mov	r0, r1
 8007110:	4611      	mov	r1, r2
 8007112:	2200      	movs	r2, #0
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f7fa fcd2 	bl	8001ac0 <_lseek>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_lseek_r+0x1e>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_lseek_r+0x1e>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	200004f0 	.word	0x200004f0

0800712c <_read_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4d07      	ldr	r5, [pc, #28]	@ (800714c <_read_r+0x20>)
 8007130:	4604      	mov	r4, r0
 8007132:	4608      	mov	r0, r1
 8007134:	4611      	mov	r1, r2
 8007136:	2200      	movs	r2, #0
 8007138:	602a      	str	r2, [r5, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f7fa fc7f 	bl	8001a3e <_read>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_read_r+0x1e>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_read_r+0x1e>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	200004f0 	.word	0x200004f0

08007150 <_write_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	@ (8007170 <_write_r+0x20>)
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7fa fa04 	bl	800156c <_write>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_write_r+0x1e>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_write_r+0x1e>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	200004f0 	.word	0x200004f0

08007174 <__errno>:
 8007174:	4b01      	ldr	r3, [pc, #4]	@ (800717c <__errno+0x8>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000024 	.word	0x20000024

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4d0d      	ldr	r5, [pc, #52]	@ (80071b8 <__libc_init_array+0x38>)
 8007184:	4c0d      	ldr	r4, [pc, #52]	@ (80071bc <__libc_init_array+0x3c>)
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	2600      	movs	r6, #0
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	4d0b      	ldr	r5, [pc, #44]	@ (80071c0 <__libc_init_array+0x40>)
 8007192:	4c0c      	ldr	r4, [pc, #48]	@ (80071c4 <__libc_init_array+0x44>)
 8007194:	f003 fac4 	bl	800a720 <_init>
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	2600      	movs	r6, #0
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	0800aea4 	.word	0x0800aea4
 80071bc:	0800aea4 	.word	0x0800aea4
 80071c0:	0800aea4 	.word	0x0800aea4
 80071c4:	0800aea8 	.word	0x0800aea8

080071c8 <__retarget_lock_init_recursive>:
 80071c8:	4770      	bx	lr

080071ca <__retarget_lock_acquire_recursive>:
 80071ca:	4770      	bx	lr

080071cc <__retarget_lock_release_recursive>:
 80071cc:	4770      	bx	lr
	...

080071d0 <nanf>:
 80071d0:	4800      	ldr	r0, [pc, #0]	@ (80071d4 <nanf+0x4>)
 80071d2:	4770      	bx	lr
 80071d4:	7fc00000 	.word	0x7fc00000

080071d8 <quorem>:
 80071d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	6903      	ldr	r3, [r0, #16]
 80071de:	690c      	ldr	r4, [r1, #16]
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	4607      	mov	r7, r0
 80071e4:	db7e      	blt.n	80072e4 <quorem+0x10c>
 80071e6:	3c01      	subs	r4, #1
 80071e8:	f101 0814 	add.w	r8, r1, #20
 80071ec:	00a3      	lsls	r3, r4, #2
 80071ee:	f100 0514 	add.w	r5, r0, #20
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007202:	3301      	adds	r3, #1
 8007204:	429a      	cmp	r2, r3
 8007206:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800720a:	fbb2 f6f3 	udiv	r6, r2, r3
 800720e:	d32e      	bcc.n	800726e <quorem+0x96>
 8007210:	f04f 0a00 	mov.w	sl, #0
 8007214:	46c4      	mov	ip, r8
 8007216:	46ae      	mov	lr, r5
 8007218:	46d3      	mov	fp, sl
 800721a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800721e:	b298      	uxth	r0, r3
 8007220:	fb06 a000 	mla	r0, r6, r0, sl
 8007224:	0c02      	lsrs	r2, r0, #16
 8007226:	0c1b      	lsrs	r3, r3, #16
 8007228:	fb06 2303 	mla	r3, r6, r3, r2
 800722c:	f8de 2000 	ldr.w	r2, [lr]
 8007230:	b280      	uxth	r0, r0
 8007232:	b292      	uxth	r2, r2
 8007234:	1a12      	subs	r2, r2, r0
 8007236:	445a      	add	r2, fp
 8007238:	f8de 0000 	ldr.w	r0, [lr]
 800723c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007240:	b29b      	uxth	r3, r3
 8007242:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007246:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800724a:	b292      	uxth	r2, r2
 800724c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007250:	45e1      	cmp	r9, ip
 8007252:	f84e 2b04 	str.w	r2, [lr], #4
 8007256:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800725a:	d2de      	bcs.n	800721a <quorem+0x42>
 800725c:	9b00      	ldr	r3, [sp, #0]
 800725e:	58eb      	ldr	r3, [r5, r3]
 8007260:	b92b      	cbnz	r3, 800726e <quorem+0x96>
 8007262:	9b01      	ldr	r3, [sp, #4]
 8007264:	3b04      	subs	r3, #4
 8007266:	429d      	cmp	r5, r3
 8007268:	461a      	mov	r2, r3
 800726a:	d32f      	bcc.n	80072cc <quorem+0xf4>
 800726c:	613c      	str	r4, [r7, #16]
 800726e:	4638      	mov	r0, r7
 8007270:	f001 f9c6 	bl	8008600 <__mcmp>
 8007274:	2800      	cmp	r0, #0
 8007276:	db25      	blt.n	80072c4 <quorem+0xec>
 8007278:	4629      	mov	r1, r5
 800727a:	2000      	movs	r0, #0
 800727c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007280:	f8d1 c000 	ldr.w	ip, [r1]
 8007284:	fa1f fe82 	uxth.w	lr, r2
 8007288:	fa1f f38c 	uxth.w	r3, ip
 800728c:	eba3 030e 	sub.w	r3, r3, lr
 8007290:	4403      	add	r3, r0
 8007292:	0c12      	lsrs	r2, r2, #16
 8007294:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007298:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800729c:	b29b      	uxth	r3, r3
 800729e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072a2:	45c1      	cmp	r9, r8
 80072a4:	f841 3b04 	str.w	r3, [r1], #4
 80072a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072ac:	d2e6      	bcs.n	800727c <quorem+0xa4>
 80072ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072b6:	b922      	cbnz	r2, 80072c2 <quorem+0xea>
 80072b8:	3b04      	subs	r3, #4
 80072ba:	429d      	cmp	r5, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	d30b      	bcc.n	80072d8 <quorem+0x100>
 80072c0:	613c      	str	r4, [r7, #16]
 80072c2:	3601      	adds	r6, #1
 80072c4:	4630      	mov	r0, r6
 80072c6:	b003      	add	sp, #12
 80072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	3b04      	subs	r3, #4
 80072d0:	2a00      	cmp	r2, #0
 80072d2:	d1cb      	bne.n	800726c <quorem+0x94>
 80072d4:	3c01      	subs	r4, #1
 80072d6:	e7c6      	b.n	8007266 <quorem+0x8e>
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	3b04      	subs	r3, #4
 80072dc:	2a00      	cmp	r2, #0
 80072de:	d1ef      	bne.n	80072c0 <quorem+0xe8>
 80072e0:	3c01      	subs	r4, #1
 80072e2:	e7ea      	b.n	80072ba <quorem+0xe2>
 80072e4:	2000      	movs	r0, #0
 80072e6:	e7ee      	b.n	80072c6 <quorem+0xee>

080072e8 <_dtoa_r>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	69c7      	ldr	r7, [r0, #28]
 80072ee:	b097      	sub	sp, #92	@ 0x5c
 80072f0:	4614      	mov	r4, r2
 80072f2:	461d      	mov	r5, r3
 80072f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80072f8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80072fa:	4681      	mov	r9, r0
 80072fc:	b97f      	cbnz	r7, 800731e <_dtoa_r+0x36>
 80072fe:	2010      	movs	r0, #16
 8007300:	f000 fe0c 	bl	8007f1c <malloc>
 8007304:	4602      	mov	r2, r0
 8007306:	f8c9 001c 	str.w	r0, [r9, #28]
 800730a:	b920      	cbnz	r0, 8007316 <_dtoa_r+0x2e>
 800730c:	4baa      	ldr	r3, [pc, #680]	@ (80075b8 <_dtoa_r+0x2d0>)
 800730e:	21ef      	movs	r1, #239	@ 0xef
 8007310:	48aa      	ldr	r0, [pc, #680]	@ (80075bc <_dtoa_r+0x2d4>)
 8007312:	f002 fde7 	bl	8009ee4 <__assert_func>
 8007316:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800731a:	6007      	str	r7, [r0, #0]
 800731c:	60c7      	str	r7, [r0, #12]
 800731e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007322:	6819      	ldr	r1, [r3, #0]
 8007324:	b159      	cbz	r1, 800733e <_dtoa_r+0x56>
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	604a      	str	r2, [r1, #4]
 800732a:	2301      	movs	r3, #1
 800732c:	4093      	lsls	r3, r2
 800732e:	608b      	str	r3, [r1, #8]
 8007330:	4648      	mov	r0, r9
 8007332:	f000 fee9 	bl	8008108 <_Bfree>
 8007336:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	1e2b      	subs	r3, r5, #0
 8007340:	bfb9      	ittee	lt
 8007342:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007346:	9307      	strlt	r3, [sp, #28]
 8007348:	2300      	movge	r3, #0
 800734a:	6033      	strge	r3, [r6, #0]
 800734c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007350:	4b9b      	ldr	r3, [pc, #620]	@ (80075c0 <_dtoa_r+0x2d8>)
 8007352:	bfbc      	itt	lt
 8007354:	2201      	movlt	r2, #1
 8007356:	6032      	strlt	r2, [r6, #0]
 8007358:	ea33 0308 	bics.w	r3, r3, r8
 800735c:	d112      	bne.n	8007384 <_dtoa_r+0x9c>
 800735e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007360:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800736a:	4323      	orrs	r3, r4
 800736c:	f000 855b 	beq.w	8007e26 <_dtoa_r+0xb3e>
 8007370:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007372:	f8df a250 	ldr.w	sl, [pc, #592]	@ 80075c4 <_dtoa_r+0x2dc>
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 855d 	beq.w	8007e36 <_dtoa_r+0xb4e>
 800737c:	f10a 0303 	add.w	r3, sl, #3
 8007380:	f000 bd57 	b.w	8007e32 <_dtoa_r+0xb4a>
 8007384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007388:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800738c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007390:	2200      	movs	r2, #0
 8007392:	2300      	movs	r3, #0
 8007394:	f7f9 fb70 	bl	8000a78 <__aeabi_dcmpeq>
 8007398:	4607      	mov	r7, r0
 800739a:	b158      	cbz	r0, 80073b4 <_dtoa_r+0xcc>
 800739c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800739e:	2301      	movs	r3, #1
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073a4:	b113      	cbz	r3, 80073ac <_dtoa_r+0xc4>
 80073a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80073a8:	4b87      	ldr	r3, [pc, #540]	@ (80075c8 <_dtoa_r+0x2e0>)
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80075cc <_dtoa_r+0x2e4>
 80073b0:	f000 bd41 	b.w	8007e36 <_dtoa_r+0xb4e>
 80073b4:	ab14      	add	r3, sp, #80	@ 0x50
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	ab15      	add	r3, sp, #84	@ 0x54
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	4648      	mov	r0, r9
 80073be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073c2:	f001 fa35 	bl	8008830 <__d2b>
 80073c6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80073ca:	9003      	str	r0, [sp, #12]
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	d077      	beq.n	80074c0 <_dtoa_r+0x1d8>
 80073d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073d2:	9712      	str	r7, [sp, #72]	@ 0x48
 80073d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073e8:	4619      	mov	r1, r3
 80073ea:	2200      	movs	r2, #0
 80073ec:	4b78      	ldr	r3, [pc, #480]	@ (80075d0 <_dtoa_r+0x2e8>)
 80073ee:	f7f8 ff23 	bl	8000238 <__aeabi_dsub>
 80073f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80075a0 <_dtoa_r+0x2b8>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f7f9 f8d6 	bl	80005a8 <__aeabi_dmul>
 80073fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80075a8 <_dtoa_r+0x2c0>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 ff1b 	bl	800023c <__adddf3>
 8007406:	4604      	mov	r4, r0
 8007408:	4630      	mov	r0, r6
 800740a:	460d      	mov	r5, r1
 800740c:	f7f9 f862 	bl	80004d4 <__aeabi_i2d>
 8007410:	a367      	add	r3, pc, #412	@ (adr r3, 80075b0 <_dtoa_r+0x2c8>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f9 f8c7 	bl	80005a8 <__aeabi_dmul>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4620      	mov	r0, r4
 8007420:	4629      	mov	r1, r5
 8007422:	f7f8 ff0b 	bl	800023c <__adddf3>
 8007426:	4604      	mov	r4, r0
 8007428:	460d      	mov	r5, r1
 800742a:	f7f9 fb6d 	bl	8000b08 <__aeabi_d2iz>
 800742e:	2200      	movs	r2, #0
 8007430:	4607      	mov	r7, r0
 8007432:	2300      	movs	r3, #0
 8007434:	4620      	mov	r0, r4
 8007436:	4629      	mov	r1, r5
 8007438:	f7f9 fb28 	bl	8000a8c <__aeabi_dcmplt>
 800743c:	b140      	cbz	r0, 8007450 <_dtoa_r+0x168>
 800743e:	4638      	mov	r0, r7
 8007440:	f7f9 f848 	bl	80004d4 <__aeabi_i2d>
 8007444:	4622      	mov	r2, r4
 8007446:	462b      	mov	r3, r5
 8007448:	f7f9 fb16 	bl	8000a78 <__aeabi_dcmpeq>
 800744c:	b900      	cbnz	r0, 8007450 <_dtoa_r+0x168>
 800744e:	3f01      	subs	r7, #1
 8007450:	2f16      	cmp	r7, #22
 8007452:	d853      	bhi.n	80074fc <_dtoa_r+0x214>
 8007454:	4b5f      	ldr	r3, [pc, #380]	@ (80075d4 <_dtoa_r+0x2ec>)
 8007456:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007462:	f7f9 fb13 	bl	8000a8c <__aeabi_dcmplt>
 8007466:	2800      	cmp	r0, #0
 8007468:	d04a      	beq.n	8007500 <_dtoa_r+0x218>
 800746a:	3f01      	subs	r7, #1
 800746c:	2300      	movs	r3, #0
 800746e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007470:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007472:	1b9b      	subs	r3, r3, r6
 8007474:	1e5a      	subs	r2, r3, #1
 8007476:	bf45      	ittet	mi
 8007478:	f1c3 0301 	rsbmi	r3, r3, #1
 800747c:	9304      	strmi	r3, [sp, #16]
 800747e:	2300      	movpl	r3, #0
 8007480:	2300      	movmi	r3, #0
 8007482:	9209      	str	r2, [sp, #36]	@ 0x24
 8007484:	bf54      	ite	pl
 8007486:	9304      	strpl	r3, [sp, #16]
 8007488:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800748a:	2f00      	cmp	r7, #0
 800748c:	db3a      	blt.n	8007504 <_dtoa_r+0x21c>
 800748e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007490:	970e      	str	r7, [sp, #56]	@ 0x38
 8007492:	443b      	add	r3, r7
 8007494:	9309      	str	r3, [sp, #36]	@ 0x24
 8007496:	2300      	movs	r3, #0
 8007498:	930a      	str	r3, [sp, #40]	@ 0x28
 800749a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800749c:	2b09      	cmp	r3, #9
 800749e:	d864      	bhi.n	800756a <_dtoa_r+0x282>
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	bfc4      	itt	gt
 80074a4:	3b04      	subgt	r3, #4
 80074a6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80074a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074aa:	f1a3 0302 	sub.w	r3, r3, #2
 80074ae:	bfcc      	ite	gt
 80074b0:	2400      	movgt	r4, #0
 80074b2:	2401      	movle	r4, #1
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d864      	bhi.n	8007582 <_dtoa_r+0x29a>
 80074b8:	e8df f003 	tbb	[pc, r3]
 80074bc:	2c385553 	.word	0x2c385553
 80074c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074c4:	441e      	add	r6, r3
 80074c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	bfc1      	itttt	gt
 80074ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074d2:	fa08 f803 	lslgt.w	r8, r8, r3
 80074d6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074da:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074de:	bfd6      	itet	le
 80074e0:	f1c3 0320 	rsble	r3, r3, #32
 80074e4:	ea48 0003 	orrgt.w	r0, r8, r3
 80074e8:	fa04 f003 	lslle.w	r0, r4, r3
 80074ec:	f7f8 ffe2 	bl	80004b4 <__aeabi_ui2d>
 80074f0:	2201      	movs	r2, #1
 80074f2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074f6:	3e01      	subs	r6, #1
 80074f8:	9212      	str	r2, [sp, #72]	@ 0x48
 80074fa:	e775      	b.n	80073e8 <_dtoa_r+0x100>
 80074fc:	2301      	movs	r3, #1
 80074fe:	e7b6      	b.n	800746e <_dtoa_r+0x186>
 8007500:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007502:	e7b5      	b.n	8007470 <_dtoa_r+0x188>
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	1bdb      	subs	r3, r3, r7
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	427b      	negs	r3, r7
 800750c:	930a      	str	r3, [sp, #40]	@ 0x28
 800750e:	2300      	movs	r3, #0
 8007510:	930e      	str	r3, [sp, #56]	@ 0x38
 8007512:	e7c2      	b.n	800749a <_dtoa_r+0x1b2>
 8007514:	2301      	movs	r3, #1
 8007516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007518:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800751a:	eb07 0b03 	add.w	fp, r7, r3
 800751e:	f10b 0301 	add.w	r3, fp, #1
 8007522:	2b01      	cmp	r3, #1
 8007524:	9308      	str	r3, [sp, #32]
 8007526:	bfb8      	it	lt
 8007528:	2301      	movlt	r3, #1
 800752a:	e006      	b.n	800753a <_dtoa_r+0x252>
 800752c:	2301      	movs	r3, #1
 800752e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007530:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007532:	2b00      	cmp	r3, #0
 8007534:	dd28      	ble.n	8007588 <_dtoa_r+0x2a0>
 8007536:	469b      	mov	fp, r3
 8007538:	9308      	str	r3, [sp, #32]
 800753a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800753e:	2100      	movs	r1, #0
 8007540:	2204      	movs	r2, #4
 8007542:	f102 0514 	add.w	r5, r2, #20
 8007546:	429d      	cmp	r5, r3
 8007548:	d926      	bls.n	8007598 <_dtoa_r+0x2b0>
 800754a:	6041      	str	r1, [r0, #4]
 800754c:	4648      	mov	r0, r9
 800754e:	f000 fd9b 	bl	8008088 <_Balloc>
 8007552:	4682      	mov	sl, r0
 8007554:	2800      	cmp	r0, #0
 8007556:	d141      	bne.n	80075dc <_dtoa_r+0x2f4>
 8007558:	4b1f      	ldr	r3, [pc, #124]	@ (80075d8 <_dtoa_r+0x2f0>)
 800755a:	4602      	mov	r2, r0
 800755c:	f240 11af 	movw	r1, #431	@ 0x1af
 8007560:	e6d6      	b.n	8007310 <_dtoa_r+0x28>
 8007562:	2300      	movs	r3, #0
 8007564:	e7e3      	b.n	800752e <_dtoa_r+0x246>
 8007566:	2300      	movs	r3, #0
 8007568:	e7d5      	b.n	8007516 <_dtoa_r+0x22e>
 800756a:	2401      	movs	r4, #1
 800756c:	2300      	movs	r3, #0
 800756e:	9320      	str	r3, [sp, #128]	@ 0x80
 8007570:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007572:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007576:	2200      	movs	r2, #0
 8007578:	f8cd b020 	str.w	fp, [sp, #32]
 800757c:	2312      	movs	r3, #18
 800757e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007580:	e7db      	b.n	800753a <_dtoa_r+0x252>
 8007582:	2301      	movs	r3, #1
 8007584:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007586:	e7f4      	b.n	8007572 <_dtoa_r+0x28a>
 8007588:	f04f 0b01 	mov.w	fp, #1
 800758c:	f8cd b020 	str.w	fp, [sp, #32]
 8007590:	465b      	mov	r3, fp
 8007592:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007596:	e7d0      	b.n	800753a <_dtoa_r+0x252>
 8007598:	3101      	adds	r1, #1
 800759a:	0052      	lsls	r2, r2, #1
 800759c:	e7d1      	b.n	8007542 <_dtoa_r+0x25a>
 800759e:	bf00      	nop
 80075a0:	636f4361 	.word	0x636f4361
 80075a4:	3fd287a7 	.word	0x3fd287a7
 80075a8:	8b60c8b3 	.word	0x8b60c8b3
 80075ac:	3fc68a28 	.word	0x3fc68a28
 80075b0:	509f79fb 	.word	0x509f79fb
 80075b4:	3fd34413 	.word	0x3fd34413
 80075b8:	0800aaba 	.word	0x0800aaba
 80075bc:	0800aad1 	.word	0x0800aad1
 80075c0:	7ff00000 	.word	0x7ff00000
 80075c4:	0800aab6 	.word	0x0800aab6
 80075c8:	0800aa85 	.word	0x0800aa85
 80075cc:	0800aa84 	.word	0x0800aa84
 80075d0:	3ff80000 	.word	0x3ff80000
 80075d4:	0800ac80 	.word	0x0800ac80
 80075d8:	0800ab29 	.word	0x0800ab29
 80075dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80075e0:	6018      	str	r0, [r3, #0]
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	2b0e      	cmp	r3, #14
 80075e6:	f200 80a1 	bhi.w	800772c <_dtoa_r+0x444>
 80075ea:	2c00      	cmp	r4, #0
 80075ec:	f000 809e 	beq.w	800772c <_dtoa_r+0x444>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	dd33      	ble.n	800765c <_dtoa_r+0x374>
 80075f4:	4b9c      	ldr	r3, [pc, #624]	@ (8007868 <_dtoa_r+0x580>)
 80075f6:	f007 020f 	and.w	r2, r7, #15
 80075fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007602:	05f8      	lsls	r0, r7, #23
 8007604:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007608:	ea4f 1427 	mov.w	r4, r7, asr #4
 800760c:	d516      	bpl.n	800763c <_dtoa_r+0x354>
 800760e:	4b97      	ldr	r3, [pc, #604]	@ (800786c <_dtoa_r+0x584>)
 8007610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007618:	f7f9 f8f0 	bl	80007fc <__aeabi_ddiv>
 800761c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007620:	f004 040f 	and.w	r4, r4, #15
 8007624:	2603      	movs	r6, #3
 8007626:	4d91      	ldr	r5, [pc, #580]	@ (800786c <_dtoa_r+0x584>)
 8007628:	b954      	cbnz	r4, 8007640 <_dtoa_r+0x358>
 800762a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800762e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007632:	f7f9 f8e3 	bl	80007fc <__aeabi_ddiv>
 8007636:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800763a:	e028      	b.n	800768e <_dtoa_r+0x3a6>
 800763c:	2602      	movs	r6, #2
 800763e:	e7f2      	b.n	8007626 <_dtoa_r+0x33e>
 8007640:	07e1      	lsls	r1, r4, #31
 8007642:	d508      	bpl.n	8007656 <_dtoa_r+0x36e>
 8007644:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007648:	e9d5 2300 	ldrd	r2, r3, [r5]
 800764c:	f7f8 ffac 	bl	80005a8 <__aeabi_dmul>
 8007650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007654:	3601      	adds	r6, #1
 8007656:	1064      	asrs	r4, r4, #1
 8007658:	3508      	adds	r5, #8
 800765a:	e7e5      	b.n	8007628 <_dtoa_r+0x340>
 800765c:	f000 80af 	beq.w	80077be <_dtoa_r+0x4d6>
 8007660:	427c      	negs	r4, r7
 8007662:	4b81      	ldr	r3, [pc, #516]	@ (8007868 <_dtoa_r+0x580>)
 8007664:	4d81      	ldr	r5, [pc, #516]	@ (800786c <_dtoa_r+0x584>)
 8007666:	f004 020f 	and.w	r2, r4, #15
 800766a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007676:	f7f8 ff97 	bl	80005a8 <__aeabi_dmul>
 800767a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800767e:	1124      	asrs	r4, r4, #4
 8007680:	2300      	movs	r3, #0
 8007682:	2602      	movs	r6, #2
 8007684:	2c00      	cmp	r4, #0
 8007686:	f040 808f 	bne.w	80077a8 <_dtoa_r+0x4c0>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1d3      	bne.n	8007636 <_dtoa_r+0x34e>
 800768e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007690:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8094 	beq.w	80077c2 <_dtoa_r+0x4da>
 800769a:	4b75      	ldr	r3, [pc, #468]	@ (8007870 <_dtoa_r+0x588>)
 800769c:	2200      	movs	r2, #0
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f9 f9f3 	bl	8000a8c <__aeabi_dcmplt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f000 808b 	beq.w	80077c2 <_dtoa_r+0x4da>
 80076ac:	9b08      	ldr	r3, [sp, #32]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8087 	beq.w	80077c2 <_dtoa_r+0x4da>
 80076b4:	f1bb 0f00 	cmp.w	fp, #0
 80076b8:	dd34      	ble.n	8007724 <_dtoa_r+0x43c>
 80076ba:	4620      	mov	r0, r4
 80076bc:	4b6d      	ldr	r3, [pc, #436]	@ (8007874 <_dtoa_r+0x58c>)
 80076be:	2200      	movs	r2, #0
 80076c0:	4629      	mov	r1, r5
 80076c2:	f7f8 ff71 	bl	80005a8 <__aeabi_dmul>
 80076c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076ca:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80076ce:	3601      	adds	r6, #1
 80076d0:	465c      	mov	r4, fp
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7f8 fefe 	bl	80004d4 <__aeabi_i2d>
 80076d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076dc:	f7f8 ff64 	bl	80005a8 <__aeabi_dmul>
 80076e0:	4b65      	ldr	r3, [pc, #404]	@ (8007878 <_dtoa_r+0x590>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	f7f8 fdaa 	bl	800023c <__adddf3>
 80076e8:	4605      	mov	r5, r0
 80076ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	d16a      	bne.n	80077c8 <_dtoa_r+0x4e0>
 80076f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076f6:	4b61      	ldr	r3, [pc, #388]	@ (800787c <_dtoa_r+0x594>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	f7f8 fd9d 	bl	8000238 <__aeabi_dsub>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007706:	462a      	mov	r2, r5
 8007708:	4633      	mov	r3, r6
 800770a:	f7f9 f9dd 	bl	8000ac8 <__aeabi_dcmpgt>
 800770e:	2800      	cmp	r0, #0
 8007710:	f040 8298 	bne.w	8007c44 <_dtoa_r+0x95c>
 8007714:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007718:	462a      	mov	r2, r5
 800771a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800771e:	f7f9 f9b5 	bl	8000a8c <__aeabi_dcmplt>
 8007722:	bb38      	cbnz	r0, 8007774 <_dtoa_r+0x48c>
 8007724:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007728:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800772c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800772e:	2b00      	cmp	r3, #0
 8007730:	f2c0 8157 	blt.w	80079e2 <_dtoa_r+0x6fa>
 8007734:	2f0e      	cmp	r7, #14
 8007736:	f300 8154 	bgt.w	80079e2 <_dtoa_r+0x6fa>
 800773a:	4b4b      	ldr	r3, [pc, #300]	@ (8007868 <_dtoa_r+0x580>)
 800773c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007740:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007744:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007748:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800774a:	2b00      	cmp	r3, #0
 800774c:	f280 80e5 	bge.w	800791a <_dtoa_r+0x632>
 8007750:	9b08      	ldr	r3, [sp, #32]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f300 80e1 	bgt.w	800791a <_dtoa_r+0x632>
 8007758:	d10c      	bne.n	8007774 <_dtoa_r+0x48c>
 800775a:	4b48      	ldr	r3, [pc, #288]	@ (800787c <_dtoa_r+0x594>)
 800775c:	2200      	movs	r2, #0
 800775e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007762:	f7f8 ff21 	bl	80005a8 <__aeabi_dmul>
 8007766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800776a:	f7f9 f9a3 	bl	8000ab4 <__aeabi_dcmpge>
 800776e:	2800      	cmp	r0, #0
 8007770:	f000 8266 	beq.w	8007c40 <_dtoa_r+0x958>
 8007774:	2400      	movs	r4, #0
 8007776:	4625      	mov	r5, r4
 8007778:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800777a:	4656      	mov	r6, sl
 800777c:	ea6f 0803 	mvn.w	r8, r3
 8007780:	2700      	movs	r7, #0
 8007782:	4621      	mov	r1, r4
 8007784:	4648      	mov	r0, r9
 8007786:	f000 fcbf 	bl	8008108 <_Bfree>
 800778a:	2d00      	cmp	r5, #0
 800778c:	f000 80bd 	beq.w	800790a <_dtoa_r+0x622>
 8007790:	b12f      	cbz	r7, 800779e <_dtoa_r+0x4b6>
 8007792:	42af      	cmp	r7, r5
 8007794:	d003      	beq.n	800779e <_dtoa_r+0x4b6>
 8007796:	4639      	mov	r1, r7
 8007798:	4648      	mov	r0, r9
 800779a:	f000 fcb5 	bl	8008108 <_Bfree>
 800779e:	4629      	mov	r1, r5
 80077a0:	4648      	mov	r0, r9
 80077a2:	f000 fcb1 	bl	8008108 <_Bfree>
 80077a6:	e0b0      	b.n	800790a <_dtoa_r+0x622>
 80077a8:	07e2      	lsls	r2, r4, #31
 80077aa:	d505      	bpl.n	80077b8 <_dtoa_r+0x4d0>
 80077ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077b0:	f7f8 fefa 	bl	80005a8 <__aeabi_dmul>
 80077b4:	3601      	adds	r6, #1
 80077b6:	2301      	movs	r3, #1
 80077b8:	1064      	asrs	r4, r4, #1
 80077ba:	3508      	adds	r5, #8
 80077bc:	e762      	b.n	8007684 <_dtoa_r+0x39c>
 80077be:	2602      	movs	r6, #2
 80077c0:	e765      	b.n	800768e <_dtoa_r+0x3a6>
 80077c2:	9c08      	ldr	r4, [sp, #32]
 80077c4:	46b8      	mov	r8, r7
 80077c6:	e784      	b.n	80076d2 <_dtoa_r+0x3ea>
 80077c8:	4b27      	ldr	r3, [pc, #156]	@ (8007868 <_dtoa_r+0x580>)
 80077ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077d4:	4454      	add	r4, sl
 80077d6:	2900      	cmp	r1, #0
 80077d8:	d054      	beq.n	8007884 <_dtoa_r+0x59c>
 80077da:	4929      	ldr	r1, [pc, #164]	@ (8007880 <_dtoa_r+0x598>)
 80077dc:	2000      	movs	r0, #0
 80077de:	f7f9 f80d 	bl	80007fc <__aeabi_ddiv>
 80077e2:	4633      	mov	r3, r6
 80077e4:	462a      	mov	r2, r5
 80077e6:	f7f8 fd27 	bl	8000238 <__aeabi_dsub>
 80077ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077ee:	4656      	mov	r6, sl
 80077f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077f4:	f7f9 f988 	bl	8000b08 <__aeabi_d2iz>
 80077f8:	4605      	mov	r5, r0
 80077fa:	f7f8 fe6b 	bl	80004d4 <__aeabi_i2d>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007806:	f7f8 fd17 	bl	8000238 <__aeabi_dsub>
 800780a:	3530      	adds	r5, #48	@ 0x30
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007814:	f806 5b01 	strb.w	r5, [r6], #1
 8007818:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800781c:	f7f9 f936 	bl	8000a8c <__aeabi_dcmplt>
 8007820:	2800      	cmp	r0, #0
 8007822:	d172      	bne.n	800790a <_dtoa_r+0x622>
 8007824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007828:	4911      	ldr	r1, [pc, #68]	@ (8007870 <_dtoa_r+0x588>)
 800782a:	2000      	movs	r0, #0
 800782c:	f7f8 fd04 	bl	8000238 <__aeabi_dsub>
 8007830:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007834:	f7f9 f92a 	bl	8000a8c <__aeabi_dcmplt>
 8007838:	2800      	cmp	r0, #0
 800783a:	f040 80b4 	bne.w	80079a6 <_dtoa_r+0x6be>
 800783e:	42a6      	cmp	r6, r4
 8007840:	f43f af70 	beq.w	8007724 <_dtoa_r+0x43c>
 8007844:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007848:	4b0a      	ldr	r3, [pc, #40]	@ (8007874 <_dtoa_r+0x58c>)
 800784a:	2200      	movs	r2, #0
 800784c:	f7f8 feac 	bl	80005a8 <__aeabi_dmul>
 8007850:	4b08      	ldr	r3, [pc, #32]	@ (8007874 <_dtoa_r+0x58c>)
 8007852:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007856:	2200      	movs	r2, #0
 8007858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800785c:	f7f8 fea4 	bl	80005a8 <__aeabi_dmul>
 8007860:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007864:	e7c4      	b.n	80077f0 <_dtoa_r+0x508>
 8007866:	bf00      	nop
 8007868:	0800ac80 	.word	0x0800ac80
 800786c:	0800ac58 	.word	0x0800ac58
 8007870:	3ff00000 	.word	0x3ff00000
 8007874:	40240000 	.word	0x40240000
 8007878:	401c0000 	.word	0x401c0000
 800787c:	40140000 	.word	0x40140000
 8007880:	3fe00000 	.word	0x3fe00000
 8007884:	4631      	mov	r1, r6
 8007886:	4628      	mov	r0, r5
 8007888:	f7f8 fe8e 	bl	80005a8 <__aeabi_dmul>
 800788c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007890:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007892:	4656      	mov	r6, sl
 8007894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007898:	f7f9 f936 	bl	8000b08 <__aeabi_d2iz>
 800789c:	4605      	mov	r5, r0
 800789e:	f7f8 fe19 	bl	80004d4 <__aeabi_i2d>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078aa:	f7f8 fcc5 	bl	8000238 <__aeabi_dsub>
 80078ae:	3530      	adds	r5, #48	@ 0x30
 80078b0:	f806 5b01 	strb.w	r5, [r6], #1
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	42a6      	cmp	r6, r4
 80078ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	d124      	bne.n	800790e <_dtoa_r+0x626>
 80078c4:	4baf      	ldr	r3, [pc, #700]	@ (8007b84 <_dtoa_r+0x89c>)
 80078c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078ca:	f7f8 fcb7 	bl	800023c <__adddf3>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078d6:	f7f9 f8f7 	bl	8000ac8 <__aeabi_dcmpgt>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d163      	bne.n	80079a6 <_dtoa_r+0x6be>
 80078de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078e2:	49a8      	ldr	r1, [pc, #672]	@ (8007b84 <_dtoa_r+0x89c>)
 80078e4:	2000      	movs	r0, #0
 80078e6:	f7f8 fca7 	bl	8000238 <__aeabi_dsub>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078f2:	f7f9 f8cb 	bl	8000a8c <__aeabi_dcmplt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f43f af14 	beq.w	8007724 <_dtoa_r+0x43c>
 80078fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80078fe:	1e73      	subs	r3, r6, #1
 8007900:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007902:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007906:	2b30      	cmp	r3, #48	@ 0x30
 8007908:	d0f8      	beq.n	80078fc <_dtoa_r+0x614>
 800790a:	4647      	mov	r7, r8
 800790c:	e03b      	b.n	8007986 <_dtoa_r+0x69e>
 800790e:	4b9e      	ldr	r3, [pc, #632]	@ (8007b88 <_dtoa_r+0x8a0>)
 8007910:	f7f8 fe4a 	bl	80005a8 <__aeabi_dmul>
 8007914:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007918:	e7bc      	b.n	8007894 <_dtoa_r+0x5ac>
 800791a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800791e:	4656      	mov	r6, sl
 8007920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007924:	4620      	mov	r0, r4
 8007926:	4629      	mov	r1, r5
 8007928:	f7f8 ff68 	bl	80007fc <__aeabi_ddiv>
 800792c:	f7f9 f8ec 	bl	8000b08 <__aeabi_d2iz>
 8007930:	4680      	mov	r8, r0
 8007932:	f7f8 fdcf 	bl	80004d4 <__aeabi_i2d>
 8007936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800793a:	f7f8 fe35 	bl	80005a8 <__aeabi_dmul>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4620      	mov	r0, r4
 8007944:	4629      	mov	r1, r5
 8007946:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800794a:	f7f8 fc75 	bl	8000238 <__aeabi_dsub>
 800794e:	f806 4b01 	strb.w	r4, [r6], #1
 8007952:	9d08      	ldr	r5, [sp, #32]
 8007954:	eba6 040a 	sub.w	r4, r6, sl
 8007958:	42a5      	cmp	r5, r4
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	d133      	bne.n	80079c8 <_dtoa_r+0x6e0>
 8007960:	f7f8 fc6c 	bl	800023c <__adddf3>
 8007964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007968:	4604      	mov	r4, r0
 800796a:	460d      	mov	r5, r1
 800796c:	f7f9 f8ac 	bl	8000ac8 <__aeabi_dcmpgt>
 8007970:	b9c0      	cbnz	r0, 80079a4 <_dtoa_r+0x6bc>
 8007972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007976:	4620      	mov	r0, r4
 8007978:	4629      	mov	r1, r5
 800797a:	f7f9 f87d 	bl	8000a78 <__aeabi_dcmpeq>
 800797e:	b110      	cbz	r0, 8007986 <_dtoa_r+0x69e>
 8007980:	f018 0f01 	tst.w	r8, #1
 8007984:	d10e      	bne.n	80079a4 <_dtoa_r+0x6bc>
 8007986:	9903      	ldr	r1, [sp, #12]
 8007988:	4648      	mov	r0, r9
 800798a:	f000 fbbd 	bl	8008108 <_Bfree>
 800798e:	2300      	movs	r3, #0
 8007990:	7033      	strb	r3, [r6, #0]
 8007992:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007994:	3701      	adds	r7, #1
 8007996:	601f      	str	r7, [r3, #0]
 8007998:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 824b 	beq.w	8007e36 <_dtoa_r+0xb4e>
 80079a0:	601e      	str	r6, [r3, #0]
 80079a2:	e248      	b.n	8007e36 <_dtoa_r+0xb4e>
 80079a4:	46b8      	mov	r8, r7
 80079a6:	4633      	mov	r3, r6
 80079a8:	461e      	mov	r6, r3
 80079aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ae:	2a39      	cmp	r2, #57	@ 0x39
 80079b0:	d106      	bne.n	80079c0 <_dtoa_r+0x6d8>
 80079b2:	459a      	cmp	sl, r3
 80079b4:	d1f8      	bne.n	80079a8 <_dtoa_r+0x6c0>
 80079b6:	2230      	movs	r2, #48	@ 0x30
 80079b8:	f108 0801 	add.w	r8, r8, #1
 80079bc:	f88a 2000 	strb.w	r2, [sl]
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	3201      	adds	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e7a0      	b.n	800790a <_dtoa_r+0x622>
 80079c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007b88 <_dtoa_r+0x8a0>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	f7f8 fdec 	bl	80005a8 <__aeabi_dmul>
 80079d0:	2200      	movs	r2, #0
 80079d2:	2300      	movs	r3, #0
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	f7f9 f84e 	bl	8000a78 <__aeabi_dcmpeq>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d09f      	beq.n	8007920 <_dtoa_r+0x638>
 80079e0:	e7d1      	b.n	8007986 <_dtoa_r+0x69e>
 80079e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	f000 80ea 	beq.w	8007bbe <_dtoa_r+0x8d6>
 80079ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80079ec:	2a01      	cmp	r2, #1
 80079ee:	f300 80cd 	bgt.w	8007b8c <_dtoa_r+0x8a4>
 80079f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	f000 80c1 	beq.w	8007b7c <_dtoa_r+0x894>
 80079fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a00:	9e04      	ldr	r6, [sp, #16]
 8007a02:	9a04      	ldr	r2, [sp, #16]
 8007a04:	441a      	add	r2, r3
 8007a06:	9204      	str	r2, [sp, #16]
 8007a08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	441a      	add	r2, r3
 8007a0e:	4648      	mov	r0, r9
 8007a10:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a12:	f000 fc77 	bl	8008304 <__i2b>
 8007a16:	4605      	mov	r5, r0
 8007a18:	b166      	cbz	r6, 8007a34 <_dtoa_r+0x74c>
 8007a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	dd09      	ble.n	8007a34 <_dtoa_r+0x74c>
 8007a20:	42b3      	cmp	r3, r6
 8007a22:	9a04      	ldr	r2, [sp, #16]
 8007a24:	bfa8      	it	ge
 8007a26:	4633      	movge	r3, r6
 8007a28:	1ad2      	subs	r2, r2, r3
 8007a2a:	9204      	str	r2, [sp, #16]
 8007a2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a2e:	1af6      	subs	r6, r6, r3
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a36:	b30b      	cbz	r3, 8007a7c <_dtoa_r+0x794>
 8007a38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80c6 	beq.w	8007bcc <_dtoa_r+0x8e4>
 8007a40:	2c00      	cmp	r4, #0
 8007a42:	f000 80c0 	beq.w	8007bc6 <_dtoa_r+0x8de>
 8007a46:	4629      	mov	r1, r5
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4648      	mov	r0, r9
 8007a4c:	f000 fd12 	bl	8008474 <__pow5mult>
 8007a50:	9a03      	ldr	r2, [sp, #12]
 8007a52:	4601      	mov	r1, r0
 8007a54:	4605      	mov	r5, r0
 8007a56:	4648      	mov	r0, r9
 8007a58:	f000 fc6a 	bl	8008330 <__multiply>
 8007a5c:	9903      	ldr	r1, [sp, #12]
 8007a5e:	4680      	mov	r8, r0
 8007a60:	4648      	mov	r0, r9
 8007a62:	f000 fb51 	bl	8008108 <_Bfree>
 8007a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a68:	1b1b      	subs	r3, r3, r4
 8007a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a6c:	f000 80b1 	beq.w	8007bd2 <_dtoa_r+0x8ea>
 8007a70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a72:	4641      	mov	r1, r8
 8007a74:	4648      	mov	r0, r9
 8007a76:	f000 fcfd 	bl	8008474 <__pow5mult>
 8007a7a:	9003      	str	r0, [sp, #12]
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4648      	mov	r0, r9
 8007a80:	f000 fc40 	bl	8008304 <__i2b>
 8007a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a86:	4604      	mov	r4, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 81d8 	beq.w	8007e3e <_dtoa_r+0xb56>
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4601      	mov	r1, r0
 8007a92:	4648      	mov	r0, r9
 8007a94:	f000 fcee 	bl	8008474 <__pow5mult>
 8007a98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	f300 809f 	bgt.w	8007be0 <_dtoa_r+0x8f8>
 8007aa2:	9b06      	ldr	r3, [sp, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 8097 	bne.w	8007bd8 <_dtoa_r+0x8f0>
 8007aaa:	9b07      	ldr	r3, [sp, #28]
 8007aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f040 8093 	bne.w	8007bdc <_dtoa_r+0x8f4>
 8007ab6:	9b07      	ldr	r3, [sp, #28]
 8007ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007abc:	0d1b      	lsrs	r3, r3, #20
 8007abe:	051b      	lsls	r3, r3, #20
 8007ac0:	b133      	cbz	r3, 8007ad0 <_dtoa_r+0x7e8>
 8007ac2:	9b04      	ldr	r3, [sp, #16]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	9304      	str	r3, [sp, #16]
 8007ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aca:	3301      	adds	r3, #1
 8007acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ace:	2301      	movs	r3, #1
 8007ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 81b8 	beq.w	8007e4a <_dtoa_r+0xb62>
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ae0:	6918      	ldr	r0, [r3, #16]
 8007ae2:	f000 fbc3 	bl	800826c <__hi0bits>
 8007ae6:	f1c0 0020 	rsb	r0, r0, #32
 8007aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aec:	4418      	add	r0, r3
 8007aee:	f010 001f 	ands.w	r0, r0, #31
 8007af2:	f000 8082 	beq.w	8007bfa <_dtoa_r+0x912>
 8007af6:	f1c0 0320 	rsb	r3, r0, #32
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	dd73      	ble.n	8007be6 <_dtoa_r+0x8fe>
 8007afe:	9b04      	ldr	r3, [sp, #16]
 8007b00:	f1c0 001c 	rsb	r0, r0, #28
 8007b04:	4403      	add	r3, r0
 8007b06:	9304      	str	r3, [sp, #16]
 8007b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0a:	4403      	add	r3, r0
 8007b0c:	4406      	add	r6, r0
 8007b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b10:	9b04      	ldr	r3, [sp, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dd05      	ble.n	8007b22 <_dtoa_r+0x83a>
 8007b16:	9903      	ldr	r1, [sp, #12]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4648      	mov	r0, r9
 8007b1c:	f000 fd04 	bl	8008528 <__lshift>
 8007b20:	9003      	str	r0, [sp, #12]
 8007b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dd05      	ble.n	8007b34 <_dtoa_r+0x84c>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4648      	mov	r0, r9
 8007b2e:	f000 fcfb 	bl	8008528 <__lshift>
 8007b32:	4604      	mov	r4, r0
 8007b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d061      	beq.n	8007bfe <_dtoa_r+0x916>
 8007b3a:	9803      	ldr	r0, [sp, #12]
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	f000 fd5f 	bl	8008600 <__mcmp>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	da5b      	bge.n	8007bfe <_dtoa_r+0x916>
 8007b46:	2300      	movs	r3, #0
 8007b48:	9903      	ldr	r1, [sp, #12]
 8007b4a:	220a      	movs	r2, #10
 8007b4c:	4648      	mov	r0, r9
 8007b4e:	f000 fafd 	bl	800814c <__multadd>
 8007b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b54:	9003      	str	r0, [sp, #12]
 8007b56:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8177 	beq.w	8007e4e <_dtoa_r+0xb66>
 8007b60:	4629      	mov	r1, r5
 8007b62:	2300      	movs	r3, #0
 8007b64:	220a      	movs	r2, #10
 8007b66:	4648      	mov	r0, r9
 8007b68:	f000 faf0 	bl	800814c <__multadd>
 8007b6c:	f1bb 0f00 	cmp.w	fp, #0
 8007b70:	4605      	mov	r5, r0
 8007b72:	dc6f      	bgt.n	8007c54 <_dtoa_r+0x96c>
 8007b74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	dc49      	bgt.n	8007c0e <_dtoa_r+0x926>
 8007b7a:	e06b      	b.n	8007c54 <_dtoa_r+0x96c>
 8007b7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b82:	e73c      	b.n	80079fe <_dtoa_r+0x716>
 8007b84:	3fe00000 	.word	0x3fe00000
 8007b88:	40240000 	.word	0x40240000
 8007b8c:	9b08      	ldr	r3, [sp, #32]
 8007b8e:	1e5c      	subs	r4, r3, #1
 8007b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	db09      	blt.n	8007baa <_dtoa_r+0x8c2>
 8007b96:	1b1c      	subs	r4, r3, r4
 8007b98:	9b08      	ldr	r3, [sp, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f6bf af30 	bge.w	8007a00 <_dtoa_r+0x718>
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	9a08      	ldr	r2, [sp, #32]
 8007ba4:	1a9e      	subs	r6, r3, r2
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e72b      	b.n	8007a02 <_dtoa_r+0x71a>
 8007baa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bae:	940a      	str	r4, [sp, #40]	@ 0x28
 8007bb0:	1ae3      	subs	r3, r4, r3
 8007bb2:	441a      	add	r2, r3
 8007bb4:	9e04      	ldr	r6, [sp, #16]
 8007bb6:	9b08      	ldr	r3, [sp, #32]
 8007bb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bba:	2400      	movs	r4, #0
 8007bbc:	e721      	b.n	8007a02 <_dtoa_r+0x71a>
 8007bbe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007bc0:	9e04      	ldr	r6, [sp, #16]
 8007bc2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007bc4:	e728      	b.n	8007a18 <_dtoa_r+0x730>
 8007bc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007bca:	e751      	b.n	8007a70 <_dtoa_r+0x788>
 8007bcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bce:	9903      	ldr	r1, [sp, #12]
 8007bd0:	e750      	b.n	8007a74 <_dtoa_r+0x78c>
 8007bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bd6:	e751      	b.n	8007a7c <_dtoa_r+0x794>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e779      	b.n	8007ad0 <_dtoa_r+0x7e8>
 8007bdc:	9b06      	ldr	r3, [sp, #24]
 8007bde:	e777      	b.n	8007ad0 <_dtoa_r+0x7e8>
 8007be0:	2300      	movs	r3, #0
 8007be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007be4:	e779      	b.n	8007ada <_dtoa_r+0x7f2>
 8007be6:	d093      	beq.n	8007b10 <_dtoa_r+0x828>
 8007be8:	9a04      	ldr	r2, [sp, #16]
 8007bea:	331c      	adds	r3, #28
 8007bec:	441a      	add	r2, r3
 8007bee:	9204      	str	r2, [sp, #16]
 8007bf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bf2:	441a      	add	r2, r3
 8007bf4:	441e      	add	r6, r3
 8007bf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bf8:	e78a      	b.n	8007b10 <_dtoa_r+0x828>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	e7f4      	b.n	8007be8 <_dtoa_r+0x900>
 8007bfe:	9b08      	ldr	r3, [sp, #32]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	46b8      	mov	r8, r7
 8007c04:	dc20      	bgt.n	8007c48 <_dtoa_r+0x960>
 8007c06:	469b      	mov	fp, r3
 8007c08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	dd1e      	ble.n	8007c4c <_dtoa_r+0x964>
 8007c0e:	f1bb 0f00 	cmp.w	fp, #0
 8007c12:	f47f adb1 	bne.w	8007778 <_dtoa_r+0x490>
 8007c16:	4621      	mov	r1, r4
 8007c18:	465b      	mov	r3, fp
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	f000 fa95 	bl	800814c <__multadd>
 8007c22:	4601      	mov	r1, r0
 8007c24:	4604      	mov	r4, r0
 8007c26:	9803      	ldr	r0, [sp, #12]
 8007c28:	f000 fcea 	bl	8008600 <__mcmp>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f77f ada3 	ble.w	8007778 <_dtoa_r+0x490>
 8007c32:	4656      	mov	r6, sl
 8007c34:	2331      	movs	r3, #49	@ 0x31
 8007c36:	f806 3b01 	strb.w	r3, [r6], #1
 8007c3a:	f108 0801 	add.w	r8, r8, #1
 8007c3e:	e59f      	b.n	8007780 <_dtoa_r+0x498>
 8007c40:	9c08      	ldr	r4, [sp, #32]
 8007c42:	46b8      	mov	r8, r7
 8007c44:	4625      	mov	r5, r4
 8007c46:	e7f4      	b.n	8007c32 <_dtoa_r+0x94a>
 8007c48:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007c4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 8101 	beq.w	8007e56 <_dtoa_r+0xb6e>
 8007c54:	2e00      	cmp	r6, #0
 8007c56:	dd05      	ble.n	8007c64 <_dtoa_r+0x97c>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	4648      	mov	r0, r9
 8007c5e:	f000 fc63 	bl	8008528 <__lshift>
 8007c62:	4605      	mov	r5, r0
 8007c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d05c      	beq.n	8007d24 <_dtoa_r+0xa3c>
 8007c6a:	6869      	ldr	r1, [r5, #4]
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f000 fa0b 	bl	8008088 <_Balloc>
 8007c72:	4606      	mov	r6, r0
 8007c74:	b928      	cbnz	r0, 8007c82 <_dtoa_r+0x99a>
 8007c76:	4b82      	ldr	r3, [pc, #520]	@ (8007e80 <_dtoa_r+0xb98>)
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c7e:	f7ff bb47 	b.w	8007310 <_dtoa_r+0x28>
 8007c82:	692a      	ldr	r2, [r5, #16]
 8007c84:	3202      	adds	r2, #2
 8007c86:	0092      	lsls	r2, r2, #2
 8007c88:	f105 010c 	add.w	r1, r5, #12
 8007c8c:	300c      	adds	r0, #12
 8007c8e:	f002 f915 	bl	8009ebc <memcpy>
 8007c92:	2201      	movs	r2, #1
 8007c94:	4631      	mov	r1, r6
 8007c96:	4648      	mov	r0, r9
 8007c98:	f000 fc46 	bl	8008528 <__lshift>
 8007c9c:	f10a 0301 	add.w	r3, sl, #1
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	eb0a 030b 	add.w	r3, sl, fp
 8007ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ca8:	9b06      	ldr	r3, [sp, #24]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	462f      	mov	r7, r5
 8007cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	9803      	ldr	r0, [sp, #12]
 8007cb8:	4621      	mov	r1, r4
 8007cba:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007cbe:	f7ff fa8b 	bl	80071d8 <quorem>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	3330      	adds	r3, #48	@ 0x30
 8007cc6:	9006      	str	r0, [sp, #24]
 8007cc8:	4639      	mov	r1, r7
 8007cca:	9803      	ldr	r0, [sp, #12]
 8007ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cce:	f000 fc97 	bl	8008600 <__mcmp>
 8007cd2:	462a      	mov	r2, r5
 8007cd4:	9008      	str	r0, [sp, #32]
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4648      	mov	r0, r9
 8007cda:	f000 fcad 	bl	8008638 <__mdiff>
 8007cde:	68c2      	ldr	r2, [r0, #12]
 8007ce0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	bb02      	cbnz	r2, 8007d28 <_dtoa_r+0xa40>
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	9803      	ldr	r0, [sp, #12]
 8007cea:	f000 fc89 	bl	8008600 <__mcmp>
 8007cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4648      	mov	r0, r9
 8007cf6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007cfa:	f000 fa05 	bl	8008108 <_Bfree>
 8007cfe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d02:	9e04      	ldr	r6, [sp, #16]
 8007d04:	ea42 0103 	orr.w	r1, r2, r3
 8007d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d0a:	4319      	orrs	r1, r3
 8007d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d0e:	d10d      	bne.n	8007d2c <_dtoa_r+0xa44>
 8007d10:	2b39      	cmp	r3, #57	@ 0x39
 8007d12:	d027      	beq.n	8007d64 <_dtoa_r+0xa7c>
 8007d14:	9a08      	ldr	r2, [sp, #32]
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	dd01      	ble.n	8007d1e <_dtoa_r+0xa36>
 8007d1a:	9b06      	ldr	r3, [sp, #24]
 8007d1c:	3331      	adds	r3, #49	@ 0x31
 8007d1e:	f88b 3000 	strb.w	r3, [fp]
 8007d22:	e52e      	b.n	8007782 <_dtoa_r+0x49a>
 8007d24:	4628      	mov	r0, r5
 8007d26:	e7b9      	b.n	8007c9c <_dtoa_r+0x9b4>
 8007d28:	2201      	movs	r2, #1
 8007d2a:	e7e2      	b.n	8007cf2 <_dtoa_r+0xa0a>
 8007d2c:	9908      	ldr	r1, [sp, #32]
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	db04      	blt.n	8007d3c <_dtoa_r+0xa54>
 8007d32:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007d34:	4301      	orrs	r1, r0
 8007d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d38:	4301      	orrs	r1, r0
 8007d3a:	d120      	bne.n	8007d7e <_dtoa_r+0xa96>
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	ddee      	ble.n	8007d1e <_dtoa_r+0xa36>
 8007d40:	9903      	ldr	r1, [sp, #12]
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	2201      	movs	r2, #1
 8007d46:	4648      	mov	r0, r9
 8007d48:	f000 fbee 	bl	8008528 <__lshift>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	9003      	str	r0, [sp, #12]
 8007d50:	f000 fc56 	bl	8008600 <__mcmp>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	9b04      	ldr	r3, [sp, #16]
 8007d58:	dc02      	bgt.n	8007d60 <_dtoa_r+0xa78>
 8007d5a:	d1e0      	bne.n	8007d1e <_dtoa_r+0xa36>
 8007d5c:	07da      	lsls	r2, r3, #31
 8007d5e:	d5de      	bpl.n	8007d1e <_dtoa_r+0xa36>
 8007d60:	2b39      	cmp	r3, #57	@ 0x39
 8007d62:	d1da      	bne.n	8007d1a <_dtoa_r+0xa32>
 8007d64:	2339      	movs	r3, #57	@ 0x39
 8007d66:	f88b 3000 	strb.w	r3, [fp]
 8007d6a:	4633      	mov	r3, r6
 8007d6c:	461e      	mov	r6, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d74:	2a39      	cmp	r2, #57	@ 0x39
 8007d76:	d04e      	beq.n	8007e16 <_dtoa_r+0xb2e>
 8007d78:	3201      	adds	r2, #1
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	e501      	b.n	8007782 <_dtoa_r+0x49a>
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	dd03      	ble.n	8007d8a <_dtoa_r+0xaa2>
 8007d82:	2b39      	cmp	r3, #57	@ 0x39
 8007d84:	d0ee      	beq.n	8007d64 <_dtoa_r+0xa7c>
 8007d86:	3301      	adds	r3, #1
 8007d88:	e7c9      	b.n	8007d1e <_dtoa_r+0xa36>
 8007d8a:	9a04      	ldr	r2, [sp, #16]
 8007d8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d92:	428a      	cmp	r2, r1
 8007d94:	d028      	beq.n	8007de8 <_dtoa_r+0xb00>
 8007d96:	9903      	ldr	r1, [sp, #12]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	220a      	movs	r2, #10
 8007d9c:	4648      	mov	r0, r9
 8007d9e:	f000 f9d5 	bl	800814c <__multadd>
 8007da2:	42af      	cmp	r7, r5
 8007da4:	9003      	str	r0, [sp, #12]
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	f04f 020a 	mov.w	r2, #10
 8007dae:	4639      	mov	r1, r7
 8007db0:	4648      	mov	r0, r9
 8007db2:	d107      	bne.n	8007dc4 <_dtoa_r+0xadc>
 8007db4:	f000 f9ca 	bl	800814c <__multadd>
 8007db8:	4607      	mov	r7, r0
 8007dba:	4605      	mov	r5, r0
 8007dbc:	9b04      	ldr	r3, [sp, #16]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	e777      	b.n	8007cb4 <_dtoa_r+0x9cc>
 8007dc4:	f000 f9c2 	bl	800814c <__multadd>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4607      	mov	r7, r0
 8007dcc:	2300      	movs	r3, #0
 8007dce:	220a      	movs	r2, #10
 8007dd0:	4648      	mov	r0, r9
 8007dd2:	f000 f9bb 	bl	800814c <__multadd>
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	e7f0      	b.n	8007dbc <_dtoa_r+0xad4>
 8007dda:	f1bb 0f00 	cmp.w	fp, #0
 8007dde:	bfcc      	ite	gt
 8007de0:	465e      	movgt	r6, fp
 8007de2:	2601      	movle	r6, #1
 8007de4:	4456      	add	r6, sl
 8007de6:	2700      	movs	r7, #0
 8007de8:	9903      	ldr	r1, [sp, #12]
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	2201      	movs	r2, #1
 8007dee:	4648      	mov	r0, r9
 8007df0:	f000 fb9a 	bl	8008528 <__lshift>
 8007df4:	4621      	mov	r1, r4
 8007df6:	9003      	str	r0, [sp, #12]
 8007df8:	f000 fc02 	bl	8008600 <__mcmp>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	dcb4      	bgt.n	8007d6a <_dtoa_r+0xa82>
 8007e00:	d102      	bne.n	8007e08 <_dtoa_r+0xb20>
 8007e02:	9b04      	ldr	r3, [sp, #16]
 8007e04:	07db      	lsls	r3, r3, #31
 8007e06:	d4b0      	bmi.n	8007d6a <_dtoa_r+0xa82>
 8007e08:	4633      	mov	r3, r6
 8007e0a:	461e      	mov	r6, r3
 8007e0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e10:	2a30      	cmp	r2, #48	@ 0x30
 8007e12:	d0fa      	beq.n	8007e0a <_dtoa_r+0xb22>
 8007e14:	e4b5      	b.n	8007782 <_dtoa_r+0x49a>
 8007e16:	459a      	cmp	sl, r3
 8007e18:	d1a8      	bne.n	8007d6c <_dtoa_r+0xa84>
 8007e1a:	2331      	movs	r3, #49	@ 0x31
 8007e1c:	f108 0801 	add.w	r8, r8, #1
 8007e20:	f88a 3000 	strb.w	r3, [sl]
 8007e24:	e4ad      	b.n	8007782 <_dtoa_r+0x49a>
 8007e26:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007e84 <_dtoa_r+0xb9c>
 8007e2c:	b11b      	cbz	r3, 8007e36 <_dtoa_r+0xb4e>
 8007e2e:	f10a 0308 	add.w	r3, sl, #8
 8007e32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	4650      	mov	r0, sl
 8007e38:	b017      	add	sp, #92	@ 0x5c
 8007e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	f77f ae2e 	ble.w	8007aa2 <_dtoa_r+0x7ba>
 8007e46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	e64d      	b.n	8007aea <_dtoa_r+0x802>
 8007e4e:	f1bb 0f00 	cmp.w	fp, #0
 8007e52:	f77f aed9 	ble.w	8007c08 <_dtoa_r+0x920>
 8007e56:	4656      	mov	r6, sl
 8007e58:	9803      	ldr	r0, [sp, #12]
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	f7ff f9bc 	bl	80071d8 <quorem>
 8007e60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007e64:	f806 3b01 	strb.w	r3, [r6], #1
 8007e68:	eba6 020a 	sub.w	r2, r6, sl
 8007e6c:	4593      	cmp	fp, r2
 8007e6e:	ddb4      	ble.n	8007dda <_dtoa_r+0xaf2>
 8007e70:	9903      	ldr	r1, [sp, #12]
 8007e72:	2300      	movs	r3, #0
 8007e74:	220a      	movs	r2, #10
 8007e76:	4648      	mov	r0, r9
 8007e78:	f000 f968 	bl	800814c <__multadd>
 8007e7c:	9003      	str	r0, [sp, #12]
 8007e7e:	e7eb      	b.n	8007e58 <_dtoa_r+0xb70>
 8007e80:	0800ab29 	.word	0x0800ab29
 8007e84:	0800aaad 	.word	0x0800aaad

08007e88 <_free_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	2900      	cmp	r1, #0
 8007e8e:	d041      	beq.n	8007f14 <_free_r+0x8c>
 8007e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e94:	1f0c      	subs	r4, r1, #4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bfb8      	it	lt
 8007e9a:	18e4      	addlt	r4, r4, r3
 8007e9c:	f000 f8e8 	bl	8008070 <__malloc_lock>
 8007ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f18 <_free_r+0x90>)
 8007ea2:	6813      	ldr	r3, [r2, #0]
 8007ea4:	b933      	cbnz	r3, 8007eb4 <_free_r+0x2c>
 8007ea6:	6063      	str	r3, [r4, #4]
 8007ea8:	6014      	str	r4, [r2, #0]
 8007eaa:	4628      	mov	r0, r5
 8007eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eb0:	f000 b8e4 	b.w	800807c <__malloc_unlock>
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d908      	bls.n	8007eca <_free_r+0x42>
 8007eb8:	6820      	ldr	r0, [r4, #0]
 8007eba:	1821      	adds	r1, r4, r0
 8007ebc:	428b      	cmp	r3, r1
 8007ebe:	bf01      	itttt	eq
 8007ec0:	6819      	ldreq	r1, [r3, #0]
 8007ec2:	685b      	ldreq	r3, [r3, #4]
 8007ec4:	1809      	addeq	r1, r1, r0
 8007ec6:	6021      	streq	r1, [r4, #0]
 8007ec8:	e7ed      	b.n	8007ea6 <_free_r+0x1e>
 8007eca:	461a      	mov	r2, r3
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	b10b      	cbz	r3, 8007ed4 <_free_r+0x4c>
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	d9fa      	bls.n	8007eca <_free_r+0x42>
 8007ed4:	6811      	ldr	r1, [r2, #0]
 8007ed6:	1850      	adds	r0, r2, r1
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d10b      	bne.n	8007ef4 <_free_r+0x6c>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	4401      	add	r1, r0
 8007ee0:	1850      	adds	r0, r2, r1
 8007ee2:	4283      	cmp	r3, r0
 8007ee4:	6011      	str	r1, [r2, #0]
 8007ee6:	d1e0      	bne.n	8007eaa <_free_r+0x22>
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	6053      	str	r3, [r2, #4]
 8007eee:	4408      	add	r0, r1
 8007ef0:	6010      	str	r0, [r2, #0]
 8007ef2:	e7da      	b.n	8007eaa <_free_r+0x22>
 8007ef4:	d902      	bls.n	8007efc <_free_r+0x74>
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	e7d6      	b.n	8007eaa <_free_r+0x22>
 8007efc:	6820      	ldr	r0, [r4, #0]
 8007efe:	1821      	adds	r1, r4, r0
 8007f00:	428b      	cmp	r3, r1
 8007f02:	bf04      	itt	eq
 8007f04:	6819      	ldreq	r1, [r3, #0]
 8007f06:	685b      	ldreq	r3, [r3, #4]
 8007f08:	6063      	str	r3, [r4, #4]
 8007f0a:	bf04      	itt	eq
 8007f0c:	1809      	addeq	r1, r1, r0
 8007f0e:	6021      	streq	r1, [r4, #0]
 8007f10:	6054      	str	r4, [r2, #4]
 8007f12:	e7ca      	b.n	8007eaa <_free_r+0x22>
 8007f14:	bd38      	pop	{r3, r4, r5, pc}
 8007f16:	bf00      	nop
 8007f18:	200004fc 	.word	0x200004fc

08007f1c <malloc>:
 8007f1c:	4b02      	ldr	r3, [pc, #8]	@ (8007f28 <malloc+0xc>)
 8007f1e:	4601      	mov	r1, r0
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	f000 b825 	b.w	8007f70 <_malloc_r>
 8007f26:	bf00      	nop
 8007f28:	20000024 	.word	0x20000024

08007f2c <sbrk_aligned>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007f6c <sbrk_aligned+0x40>)
 8007f30:	460c      	mov	r4, r1
 8007f32:	6831      	ldr	r1, [r6, #0]
 8007f34:	4605      	mov	r5, r0
 8007f36:	b911      	cbnz	r1, 8007f3e <sbrk_aligned+0x12>
 8007f38:	f001 ffb0 	bl	8009e9c <_sbrk_r>
 8007f3c:	6030      	str	r0, [r6, #0]
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f001 ffab 	bl	8009e9c <_sbrk_r>
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	d103      	bne.n	8007f52 <sbrk_aligned+0x26>
 8007f4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007f4e:	4620      	mov	r0, r4
 8007f50:	bd70      	pop	{r4, r5, r6, pc}
 8007f52:	1cc4      	adds	r4, r0, #3
 8007f54:	f024 0403 	bic.w	r4, r4, #3
 8007f58:	42a0      	cmp	r0, r4
 8007f5a:	d0f8      	beq.n	8007f4e <sbrk_aligned+0x22>
 8007f5c:	1a21      	subs	r1, r4, r0
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f001 ff9c 	bl	8009e9c <_sbrk_r>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d1f2      	bne.n	8007f4e <sbrk_aligned+0x22>
 8007f68:	e7ef      	b.n	8007f4a <sbrk_aligned+0x1e>
 8007f6a:	bf00      	nop
 8007f6c:	200004f8 	.word	0x200004f8

08007f70 <_malloc_r>:
 8007f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	1ccd      	adds	r5, r1, #3
 8007f76:	f025 0503 	bic.w	r5, r5, #3
 8007f7a:	3508      	adds	r5, #8
 8007f7c:	2d0c      	cmp	r5, #12
 8007f7e:	bf38      	it	cc
 8007f80:	250c      	movcc	r5, #12
 8007f82:	2d00      	cmp	r5, #0
 8007f84:	4606      	mov	r6, r0
 8007f86:	db01      	blt.n	8007f8c <_malloc_r+0x1c>
 8007f88:	42a9      	cmp	r1, r5
 8007f8a:	d904      	bls.n	8007f96 <_malloc_r+0x26>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	6033      	str	r3, [r6, #0]
 8007f90:	2000      	movs	r0, #0
 8007f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800806c <_malloc_r+0xfc>
 8007f9a:	f000 f869 	bl	8008070 <__malloc_lock>
 8007f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa2:	461c      	mov	r4, r3
 8007fa4:	bb44      	cbnz	r4, 8007ff8 <_malloc_r+0x88>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff ffbf 	bl	8007f2c <sbrk_aligned>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	d158      	bne.n	8008066 <_malloc_r+0xf6>
 8007fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8007fb8:	4627      	mov	r7, r4
 8007fba:	2f00      	cmp	r7, #0
 8007fbc:	d143      	bne.n	8008046 <_malloc_r+0xd6>
 8007fbe:	2c00      	cmp	r4, #0
 8007fc0:	d04b      	beq.n	800805a <_malloc_r+0xea>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	eb04 0903 	add.w	r9, r4, r3
 8007fcc:	f001 ff66 	bl	8009e9c <_sbrk_r>
 8007fd0:	4581      	cmp	r9, r0
 8007fd2:	d142      	bne.n	800805a <_malloc_r+0xea>
 8007fd4:	6821      	ldr	r1, [r4, #0]
 8007fd6:	1a6d      	subs	r5, r5, r1
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff ffa6 	bl	8007f2c <sbrk_aligned>
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	d03a      	beq.n	800805a <_malloc_r+0xea>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	442b      	add	r3, r5
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	f8d8 3000 	ldr.w	r3, [r8]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	bb62      	cbnz	r2, 800804c <_malloc_r+0xdc>
 8007ff2:	f8c8 7000 	str.w	r7, [r8]
 8007ff6:	e00f      	b.n	8008018 <_malloc_r+0xa8>
 8007ff8:	6822      	ldr	r2, [r4, #0]
 8007ffa:	1b52      	subs	r2, r2, r5
 8007ffc:	d420      	bmi.n	8008040 <_malloc_r+0xd0>
 8007ffe:	2a0b      	cmp	r2, #11
 8008000:	d917      	bls.n	8008032 <_malloc_r+0xc2>
 8008002:	1961      	adds	r1, r4, r5
 8008004:	42a3      	cmp	r3, r4
 8008006:	6025      	str	r5, [r4, #0]
 8008008:	bf18      	it	ne
 800800a:	6059      	strne	r1, [r3, #4]
 800800c:	6863      	ldr	r3, [r4, #4]
 800800e:	bf08      	it	eq
 8008010:	f8c8 1000 	streq.w	r1, [r8]
 8008014:	5162      	str	r2, [r4, r5]
 8008016:	604b      	str	r3, [r1, #4]
 8008018:	4630      	mov	r0, r6
 800801a:	f000 f82f 	bl	800807c <__malloc_unlock>
 800801e:	f104 000b 	add.w	r0, r4, #11
 8008022:	1d23      	adds	r3, r4, #4
 8008024:	f020 0007 	bic.w	r0, r0, #7
 8008028:	1ac2      	subs	r2, r0, r3
 800802a:	bf1c      	itt	ne
 800802c:	1a1b      	subne	r3, r3, r0
 800802e:	50a3      	strne	r3, [r4, r2]
 8008030:	e7af      	b.n	8007f92 <_malloc_r+0x22>
 8008032:	6862      	ldr	r2, [r4, #4]
 8008034:	42a3      	cmp	r3, r4
 8008036:	bf0c      	ite	eq
 8008038:	f8c8 2000 	streq.w	r2, [r8]
 800803c:	605a      	strne	r2, [r3, #4]
 800803e:	e7eb      	b.n	8008018 <_malloc_r+0xa8>
 8008040:	4623      	mov	r3, r4
 8008042:	6864      	ldr	r4, [r4, #4]
 8008044:	e7ae      	b.n	8007fa4 <_malloc_r+0x34>
 8008046:	463c      	mov	r4, r7
 8008048:	687f      	ldr	r7, [r7, #4]
 800804a:	e7b6      	b.n	8007fba <_malloc_r+0x4a>
 800804c:	461a      	mov	r2, r3
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	42a3      	cmp	r3, r4
 8008052:	d1fb      	bne.n	800804c <_malloc_r+0xdc>
 8008054:	2300      	movs	r3, #0
 8008056:	6053      	str	r3, [r2, #4]
 8008058:	e7de      	b.n	8008018 <_malloc_r+0xa8>
 800805a:	230c      	movs	r3, #12
 800805c:	6033      	str	r3, [r6, #0]
 800805e:	4630      	mov	r0, r6
 8008060:	f000 f80c 	bl	800807c <__malloc_unlock>
 8008064:	e794      	b.n	8007f90 <_malloc_r+0x20>
 8008066:	6005      	str	r5, [r0, #0]
 8008068:	e7d6      	b.n	8008018 <_malloc_r+0xa8>
 800806a:	bf00      	nop
 800806c:	200004fc 	.word	0x200004fc

08008070 <__malloc_lock>:
 8008070:	4801      	ldr	r0, [pc, #4]	@ (8008078 <__malloc_lock+0x8>)
 8008072:	f7ff b8aa 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8008076:	bf00      	nop
 8008078:	200004f4 	.word	0x200004f4

0800807c <__malloc_unlock>:
 800807c:	4801      	ldr	r0, [pc, #4]	@ (8008084 <__malloc_unlock+0x8>)
 800807e:	f7ff b8a5 	b.w	80071cc <__retarget_lock_release_recursive>
 8008082:	bf00      	nop
 8008084:	200004f4 	.word	0x200004f4

08008088 <_Balloc>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	69c6      	ldr	r6, [r0, #28]
 800808c:	4604      	mov	r4, r0
 800808e:	460d      	mov	r5, r1
 8008090:	b976      	cbnz	r6, 80080b0 <_Balloc+0x28>
 8008092:	2010      	movs	r0, #16
 8008094:	f7ff ff42 	bl	8007f1c <malloc>
 8008098:	4602      	mov	r2, r0
 800809a:	61e0      	str	r0, [r4, #28]
 800809c:	b920      	cbnz	r0, 80080a8 <_Balloc+0x20>
 800809e:	4b18      	ldr	r3, [pc, #96]	@ (8008100 <_Balloc+0x78>)
 80080a0:	4818      	ldr	r0, [pc, #96]	@ (8008104 <_Balloc+0x7c>)
 80080a2:	216b      	movs	r1, #107	@ 0x6b
 80080a4:	f001 ff1e 	bl	8009ee4 <__assert_func>
 80080a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080ac:	6006      	str	r6, [r0, #0]
 80080ae:	60c6      	str	r6, [r0, #12]
 80080b0:	69e6      	ldr	r6, [r4, #28]
 80080b2:	68f3      	ldr	r3, [r6, #12]
 80080b4:	b183      	cbz	r3, 80080d8 <_Balloc+0x50>
 80080b6:	69e3      	ldr	r3, [r4, #28]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080be:	b9b8      	cbnz	r0, 80080f0 <_Balloc+0x68>
 80080c0:	2101      	movs	r1, #1
 80080c2:	fa01 f605 	lsl.w	r6, r1, r5
 80080c6:	1d72      	adds	r2, r6, #5
 80080c8:	0092      	lsls	r2, r2, #2
 80080ca:	4620      	mov	r0, r4
 80080cc:	f001 ff28 	bl	8009f20 <_calloc_r>
 80080d0:	b160      	cbz	r0, 80080ec <_Balloc+0x64>
 80080d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080d6:	e00e      	b.n	80080f6 <_Balloc+0x6e>
 80080d8:	2221      	movs	r2, #33	@ 0x21
 80080da:	2104      	movs	r1, #4
 80080dc:	4620      	mov	r0, r4
 80080de:	f001 ff1f 	bl	8009f20 <_calloc_r>
 80080e2:	69e3      	ldr	r3, [r4, #28]
 80080e4:	60f0      	str	r0, [r6, #12]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e4      	bne.n	80080b6 <_Balloc+0x2e>
 80080ec:	2000      	movs	r0, #0
 80080ee:	bd70      	pop	{r4, r5, r6, pc}
 80080f0:	6802      	ldr	r2, [r0, #0]
 80080f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080f6:	2300      	movs	r3, #0
 80080f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080fc:	e7f7      	b.n	80080ee <_Balloc+0x66>
 80080fe:	bf00      	nop
 8008100:	0800aaba 	.word	0x0800aaba
 8008104:	0800ab3a 	.word	0x0800ab3a

08008108 <_Bfree>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	69c6      	ldr	r6, [r0, #28]
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	b976      	cbnz	r6, 8008130 <_Bfree+0x28>
 8008112:	2010      	movs	r0, #16
 8008114:	f7ff ff02 	bl	8007f1c <malloc>
 8008118:	4602      	mov	r2, r0
 800811a:	61e8      	str	r0, [r5, #28]
 800811c:	b920      	cbnz	r0, 8008128 <_Bfree+0x20>
 800811e:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <_Bfree+0x3c>)
 8008120:	4809      	ldr	r0, [pc, #36]	@ (8008148 <_Bfree+0x40>)
 8008122:	218f      	movs	r1, #143	@ 0x8f
 8008124:	f001 fede 	bl	8009ee4 <__assert_func>
 8008128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800812c:	6006      	str	r6, [r0, #0]
 800812e:	60c6      	str	r6, [r0, #12]
 8008130:	b13c      	cbz	r4, 8008142 <_Bfree+0x3a>
 8008132:	69eb      	ldr	r3, [r5, #28]
 8008134:	6862      	ldr	r2, [r4, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800813c:	6021      	str	r1, [r4, #0]
 800813e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	0800aaba 	.word	0x0800aaba
 8008148:	0800ab3a 	.word	0x0800ab3a

0800814c <__multadd>:
 800814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	690d      	ldr	r5, [r1, #16]
 8008152:	4607      	mov	r7, r0
 8008154:	460c      	mov	r4, r1
 8008156:	461e      	mov	r6, r3
 8008158:	f101 0c14 	add.w	ip, r1, #20
 800815c:	2000      	movs	r0, #0
 800815e:	f8dc 3000 	ldr.w	r3, [ip]
 8008162:	b299      	uxth	r1, r3
 8008164:	fb02 6101 	mla	r1, r2, r1, r6
 8008168:	0c1e      	lsrs	r6, r3, #16
 800816a:	0c0b      	lsrs	r3, r1, #16
 800816c:	fb02 3306 	mla	r3, r2, r6, r3
 8008170:	b289      	uxth	r1, r1
 8008172:	3001      	adds	r0, #1
 8008174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008178:	4285      	cmp	r5, r0
 800817a:	f84c 1b04 	str.w	r1, [ip], #4
 800817e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008182:	dcec      	bgt.n	800815e <__multadd+0x12>
 8008184:	b30e      	cbz	r6, 80081ca <__multadd+0x7e>
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	42ab      	cmp	r3, r5
 800818a:	dc19      	bgt.n	80081c0 <__multadd+0x74>
 800818c:	6861      	ldr	r1, [r4, #4]
 800818e:	4638      	mov	r0, r7
 8008190:	3101      	adds	r1, #1
 8008192:	f7ff ff79 	bl	8008088 <_Balloc>
 8008196:	4680      	mov	r8, r0
 8008198:	b928      	cbnz	r0, 80081a6 <__multadd+0x5a>
 800819a:	4602      	mov	r2, r0
 800819c:	4b0c      	ldr	r3, [pc, #48]	@ (80081d0 <__multadd+0x84>)
 800819e:	480d      	ldr	r0, [pc, #52]	@ (80081d4 <__multadd+0x88>)
 80081a0:	21ba      	movs	r1, #186	@ 0xba
 80081a2:	f001 fe9f 	bl	8009ee4 <__assert_func>
 80081a6:	6922      	ldr	r2, [r4, #16]
 80081a8:	3202      	adds	r2, #2
 80081aa:	f104 010c 	add.w	r1, r4, #12
 80081ae:	0092      	lsls	r2, r2, #2
 80081b0:	300c      	adds	r0, #12
 80081b2:	f001 fe83 	bl	8009ebc <memcpy>
 80081b6:	4621      	mov	r1, r4
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff ffa5 	bl	8008108 <_Bfree>
 80081be:	4644      	mov	r4, r8
 80081c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081c4:	3501      	adds	r5, #1
 80081c6:	615e      	str	r6, [r3, #20]
 80081c8:	6125      	str	r5, [r4, #16]
 80081ca:	4620      	mov	r0, r4
 80081cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d0:	0800ab29 	.word	0x0800ab29
 80081d4:	0800ab3a 	.word	0x0800ab3a

080081d8 <__s2b>:
 80081d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	460c      	mov	r4, r1
 80081de:	4615      	mov	r5, r2
 80081e0:	461f      	mov	r7, r3
 80081e2:	2209      	movs	r2, #9
 80081e4:	3308      	adds	r3, #8
 80081e6:	4606      	mov	r6, r0
 80081e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80081ec:	2100      	movs	r1, #0
 80081ee:	2201      	movs	r2, #1
 80081f0:	429a      	cmp	r2, r3
 80081f2:	db09      	blt.n	8008208 <__s2b+0x30>
 80081f4:	4630      	mov	r0, r6
 80081f6:	f7ff ff47 	bl	8008088 <_Balloc>
 80081fa:	b940      	cbnz	r0, 800820e <__s2b+0x36>
 80081fc:	4602      	mov	r2, r0
 80081fe:	4b19      	ldr	r3, [pc, #100]	@ (8008264 <__s2b+0x8c>)
 8008200:	4819      	ldr	r0, [pc, #100]	@ (8008268 <__s2b+0x90>)
 8008202:	21d3      	movs	r1, #211	@ 0xd3
 8008204:	f001 fe6e 	bl	8009ee4 <__assert_func>
 8008208:	0052      	lsls	r2, r2, #1
 800820a:	3101      	adds	r1, #1
 800820c:	e7f0      	b.n	80081f0 <__s2b+0x18>
 800820e:	9b08      	ldr	r3, [sp, #32]
 8008210:	6143      	str	r3, [r0, #20]
 8008212:	2d09      	cmp	r5, #9
 8008214:	f04f 0301 	mov.w	r3, #1
 8008218:	6103      	str	r3, [r0, #16]
 800821a:	dd16      	ble.n	800824a <__s2b+0x72>
 800821c:	f104 0909 	add.w	r9, r4, #9
 8008220:	46c8      	mov	r8, r9
 8008222:	442c      	add	r4, r5
 8008224:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008228:	4601      	mov	r1, r0
 800822a:	3b30      	subs	r3, #48	@ 0x30
 800822c:	220a      	movs	r2, #10
 800822e:	4630      	mov	r0, r6
 8008230:	f7ff ff8c 	bl	800814c <__multadd>
 8008234:	45a0      	cmp	r8, r4
 8008236:	d1f5      	bne.n	8008224 <__s2b+0x4c>
 8008238:	f1a5 0408 	sub.w	r4, r5, #8
 800823c:	444c      	add	r4, r9
 800823e:	1b2d      	subs	r5, r5, r4
 8008240:	1963      	adds	r3, r4, r5
 8008242:	42bb      	cmp	r3, r7
 8008244:	db04      	blt.n	8008250 <__s2b+0x78>
 8008246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824a:	340a      	adds	r4, #10
 800824c:	2509      	movs	r5, #9
 800824e:	e7f6      	b.n	800823e <__s2b+0x66>
 8008250:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008254:	4601      	mov	r1, r0
 8008256:	3b30      	subs	r3, #48	@ 0x30
 8008258:	220a      	movs	r2, #10
 800825a:	4630      	mov	r0, r6
 800825c:	f7ff ff76 	bl	800814c <__multadd>
 8008260:	e7ee      	b.n	8008240 <__s2b+0x68>
 8008262:	bf00      	nop
 8008264:	0800ab29 	.word	0x0800ab29
 8008268:	0800ab3a 	.word	0x0800ab3a

0800826c <__hi0bits>:
 800826c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008270:	4603      	mov	r3, r0
 8008272:	bf36      	itet	cc
 8008274:	0403      	lslcc	r3, r0, #16
 8008276:	2000      	movcs	r0, #0
 8008278:	2010      	movcc	r0, #16
 800827a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800827e:	bf3c      	itt	cc
 8008280:	021b      	lslcc	r3, r3, #8
 8008282:	3008      	addcc	r0, #8
 8008284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008288:	bf3c      	itt	cc
 800828a:	011b      	lslcc	r3, r3, #4
 800828c:	3004      	addcc	r0, #4
 800828e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008292:	bf3c      	itt	cc
 8008294:	009b      	lslcc	r3, r3, #2
 8008296:	3002      	addcc	r0, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	db05      	blt.n	80082a8 <__hi0bits+0x3c>
 800829c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082a0:	f100 0001 	add.w	r0, r0, #1
 80082a4:	bf08      	it	eq
 80082a6:	2020      	moveq	r0, #32
 80082a8:	4770      	bx	lr

080082aa <__lo0bits>:
 80082aa:	6803      	ldr	r3, [r0, #0]
 80082ac:	4602      	mov	r2, r0
 80082ae:	f013 0007 	ands.w	r0, r3, #7
 80082b2:	d00b      	beq.n	80082cc <__lo0bits+0x22>
 80082b4:	07d9      	lsls	r1, r3, #31
 80082b6:	d421      	bmi.n	80082fc <__lo0bits+0x52>
 80082b8:	0798      	lsls	r0, r3, #30
 80082ba:	bf49      	itett	mi
 80082bc:	085b      	lsrmi	r3, r3, #1
 80082be:	089b      	lsrpl	r3, r3, #2
 80082c0:	2001      	movmi	r0, #1
 80082c2:	6013      	strmi	r3, [r2, #0]
 80082c4:	bf5c      	itt	pl
 80082c6:	6013      	strpl	r3, [r2, #0]
 80082c8:	2002      	movpl	r0, #2
 80082ca:	4770      	bx	lr
 80082cc:	b299      	uxth	r1, r3
 80082ce:	b909      	cbnz	r1, 80082d4 <__lo0bits+0x2a>
 80082d0:	0c1b      	lsrs	r3, r3, #16
 80082d2:	2010      	movs	r0, #16
 80082d4:	b2d9      	uxtb	r1, r3
 80082d6:	b909      	cbnz	r1, 80082dc <__lo0bits+0x32>
 80082d8:	3008      	adds	r0, #8
 80082da:	0a1b      	lsrs	r3, r3, #8
 80082dc:	0719      	lsls	r1, r3, #28
 80082de:	bf04      	itt	eq
 80082e0:	091b      	lsreq	r3, r3, #4
 80082e2:	3004      	addeq	r0, #4
 80082e4:	0799      	lsls	r1, r3, #30
 80082e6:	bf04      	itt	eq
 80082e8:	089b      	lsreq	r3, r3, #2
 80082ea:	3002      	addeq	r0, #2
 80082ec:	07d9      	lsls	r1, r3, #31
 80082ee:	d403      	bmi.n	80082f8 <__lo0bits+0x4e>
 80082f0:	085b      	lsrs	r3, r3, #1
 80082f2:	f100 0001 	add.w	r0, r0, #1
 80082f6:	d003      	beq.n	8008300 <__lo0bits+0x56>
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	4770      	bx	lr
 80082fc:	2000      	movs	r0, #0
 80082fe:	4770      	bx	lr
 8008300:	2020      	movs	r0, #32
 8008302:	4770      	bx	lr

08008304 <__i2b>:
 8008304:	b510      	push	{r4, lr}
 8008306:	460c      	mov	r4, r1
 8008308:	2101      	movs	r1, #1
 800830a:	f7ff febd 	bl	8008088 <_Balloc>
 800830e:	4602      	mov	r2, r0
 8008310:	b928      	cbnz	r0, 800831e <__i2b+0x1a>
 8008312:	4b05      	ldr	r3, [pc, #20]	@ (8008328 <__i2b+0x24>)
 8008314:	4805      	ldr	r0, [pc, #20]	@ (800832c <__i2b+0x28>)
 8008316:	f240 1145 	movw	r1, #325	@ 0x145
 800831a:	f001 fde3 	bl	8009ee4 <__assert_func>
 800831e:	2301      	movs	r3, #1
 8008320:	6144      	str	r4, [r0, #20]
 8008322:	6103      	str	r3, [r0, #16]
 8008324:	bd10      	pop	{r4, pc}
 8008326:	bf00      	nop
 8008328:	0800ab29 	.word	0x0800ab29
 800832c:	0800ab3a 	.word	0x0800ab3a

08008330 <__multiply>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	4617      	mov	r7, r2
 8008336:	690a      	ldr	r2, [r1, #16]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	429a      	cmp	r2, r3
 800833c:	bfa8      	it	ge
 800833e:	463b      	movge	r3, r7
 8008340:	4689      	mov	r9, r1
 8008342:	bfa4      	itt	ge
 8008344:	460f      	movge	r7, r1
 8008346:	4699      	movge	r9, r3
 8008348:	693d      	ldr	r5, [r7, #16]
 800834a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	eb05 060a 	add.w	r6, r5, sl
 8008356:	42b3      	cmp	r3, r6
 8008358:	b085      	sub	sp, #20
 800835a:	bfb8      	it	lt
 800835c:	3101      	addlt	r1, #1
 800835e:	f7ff fe93 	bl	8008088 <_Balloc>
 8008362:	b930      	cbnz	r0, 8008372 <__multiply+0x42>
 8008364:	4602      	mov	r2, r0
 8008366:	4b41      	ldr	r3, [pc, #260]	@ (800846c <__multiply+0x13c>)
 8008368:	4841      	ldr	r0, [pc, #260]	@ (8008470 <__multiply+0x140>)
 800836a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800836e:	f001 fdb9 	bl	8009ee4 <__assert_func>
 8008372:	f100 0414 	add.w	r4, r0, #20
 8008376:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800837a:	4623      	mov	r3, r4
 800837c:	2200      	movs	r2, #0
 800837e:	4573      	cmp	r3, lr
 8008380:	d320      	bcc.n	80083c4 <__multiply+0x94>
 8008382:	f107 0814 	add.w	r8, r7, #20
 8008386:	f109 0114 	add.w	r1, r9, #20
 800838a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800838e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008392:	9302      	str	r3, [sp, #8]
 8008394:	1beb      	subs	r3, r5, r7
 8008396:	3b15      	subs	r3, #21
 8008398:	f023 0303 	bic.w	r3, r3, #3
 800839c:	3304      	adds	r3, #4
 800839e:	3715      	adds	r7, #21
 80083a0:	42bd      	cmp	r5, r7
 80083a2:	bf38      	it	cc
 80083a4:	2304      	movcc	r3, #4
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	9103      	str	r1, [sp, #12]
 80083ac:	428b      	cmp	r3, r1
 80083ae:	d80c      	bhi.n	80083ca <__multiply+0x9a>
 80083b0:	2e00      	cmp	r6, #0
 80083b2:	dd03      	ble.n	80083bc <__multiply+0x8c>
 80083b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d055      	beq.n	8008468 <__multiply+0x138>
 80083bc:	6106      	str	r6, [r0, #16]
 80083be:	b005      	add	sp, #20
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	f843 2b04 	str.w	r2, [r3], #4
 80083c8:	e7d9      	b.n	800837e <__multiply+0x4e>
 80083ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80083ce:	f1ba 0f00 	cmp.w	sl, #0
 80083d2:	d01f      	beq.n	8008414 <__multiply+0xe4>
 80083d4:	46c4      	mov	ip, r8
 80083d6:	46a1      	mov	r9, r4
 80083d8:	2700      	movs	r7, #0
 80083da:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083de:	f8d9 3000 	ldr.w	r3, [r9]
 80083e2:	fa1f fb82 	uxth.w	fp, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80083ec:	443b      	add	r3, r7
 80083ee:	f8d9 7000 	ldr.w	r7, [r9]
 80083f2:	0c12      	lsrs	r2, r2, #16
 80083f4:	0c3f      	lsrs	r7, r7, #16
 80083f6:	fb0a 7202 	mla	r2, sl, r2, r7
 80083fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80083fe:	b29b      	uxth	r3, r3
 8008400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008404:	4565      	cmp	r5, ip
 8008406:	f849 3b04 	str.w	r3, [r9], #4
 800840a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800840e:	d8e4      	bhi.n	80083da <__multiply+0xaa>
 8008410:	9b01      	ldr	r3, [sp, #4]
 8008412:	50e7      	str	r7, [r4, r3]
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800841a:	3104      	adds	r1, #4
 800841c:	f1b9 0f00 	cmp.w	r9, #0
 8008420:	d020      	beq.n	8008464 <__multiply+0x134>
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	4647      	mov	r7, r8
 8008426:	46a4      	mov	ip, r4
 8008428:	f04f 0a00 	mov.w	sl, #0
 800842c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008430:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008434:	fb09 220b 	mla	r2, r9, fp, r2
 8008438:	4452      	add	r2, sl
 800843a:	b29b      	uxth	r3, r3
 800843c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008440:	f84c 3b04 	str.w	r3, [ip], #4
 8008444:	f857 3b04 	ldr.w	r3, [r7], #4
 8008448:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800844c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008450:	fb09 330a 	mla	r3, r9, sl, r3
 8008454:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008458:	42bd      	cmp	r5, r7
 800845a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800845e:	d8e5      	bhi.n	800842c <__multiply+0xfc>
 8008460:	9a01      	ldr	r2, [sp, #4]
 8008462:	50a3      	str	r3, [r4, r2]
 8008464:	3404      	adds	r4, #4
 8008466:	e79f      	b.n	80083a8 <__multiply+0x78>
 8008468:	3e01      	subs	r6, #1
 800846a:	e7a1      	b.n	80083b0 <__multiply+0x80>
 800846c:	0800ab29 	.word	0x0800ab29
 8008470:	0800ab3a 	.word	0x0800ab3a

08008474 <__pow5mult>:
 8008474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008478:	4615      	mov	r5, r2
 800847a:	f012 0203 	ands.w	r2, r2, #3
 800847e:	4607      	mov	r7, r0
 8008480:	460e      	mov	r6, r1
 8008482:	d007      	beq.n	8008494 <__pow5mult+0x20>
 8008484:	4c25      	ldr	r4, [pc, #148]	@ (800851c <__pow5mult+0xa8>)
 8008486:	3a01      	subs	r2, #1
 8008488:	2300      	movs	r3, #0
 800848a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800848e:	f7ff fe5d 	bl	800814c <__multadd>
 8008492:	4606      	mov	r6, r0
 8008494:	10ad      	asrs	r5, r5, #2
 8008496:	d03d      	beq.n	8008514 <__pow5mult+0xa0>
 8008498:	69fc      	ldr	r4, [r7, #28]
 800849a:	b97c      	cbnz	r4, 80084bc <__pow5mult+0x48>
 800849c:	2010      	movs	r0, #16
 800849e:	f7ff fd3d 	bl	8007f1c <malloc>
 80084a2:	4602      	mov	r2, r0
 80084a4:	61f8      	str	r0, [r7, #28]
 80084a6:	b928      	cbnz	r0, 80084b4 <__pow5mult+0x40>
 80084a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008520 <__pow5mult+0xac>)
 80084aa:	481e      	ldr	r0, [pc, #120]	@ (8008524 <__pow5mult+0xb0>)
 80084ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084b0:	f001 fd18 	bl	8009ee4 <__assert_func>
 80084b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084b8:	6004      	str	r4, [r0, #0]
 80084ba:	60c4      	str	r4, [r0, #12]
 80084bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084c4:	b94c      	cbnz	r4, 80084da <__pow5mult+0x66>
 80084c6:	f240 2171 	movw	r1, #625	@ 0x271
 80084ca:	4638      	mov	r0, r7
 80084cc:	f7ff ff1a 	bl	8008304 <__i2b>
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80084d6:	4604      	mov	r4, r0
 80084d8:	6003      	str	r3, [r0, #0]
 80084da:	f04f 0900 	mov.w	r9, #0
 80084de:	07eb      	lsls	r3, r5, #31
 80084e0:	d50a      	bpl.n	80084f8 <__pow5mult+0x84>
 80084e2:	4631      	mov	r1, r6
 80084e4:	4622      	mov	r2, r4
 80084e6:	4638      	mov	r0, r7
 80084e8:	f7ff ff22 	bl	8008330 <__multiply>
 80084ec:	4631      	mov	r1, r6
 80084ee:	4680      	mov	r8, r0
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff fe09 	bl	8008108 <_Bfree>
 80084f6:	4646      	mov	r6, r8
 80084f8:	106d      	asrs	r5, r5, #1
 80084fa:	d00b      	beq.n	8008514 <__pow5mult+0xa0>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	b938      	cbnz	r0, 8008510 <__pow5mult+0x9c>
 8008500:	4622      	mov	r2, r4
 8008502:	4621      	mov	r1, r4
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff ff13 	bl	8008330 <__multiply>
 800850a:	6020      	str	r0, [r4, #0]
 800850c:	f8c0 9000 	str.w	r9, [r0]
 8008510:	4604      	mov	r4, r0
 8008512:	e7e4      	b.n	80084de <__pow5mult+0x6a>
 8008514:	4630      	mov	r0, r6
 8008516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800851a:	bf00      	nop
 800851c:	0800ac4c 	.word	0x0800ac4c
 8008520:	0800aaba 	.word	0x0800aaba
 8008524:	0800ab3a 	.word	0x0800ab3a

08008528 <__lshift>:
 8008528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800852c:	460c      	mov	r4, r1
 800852e:	6849      	ldr	r1, [r1, #4]
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008536:	68a3      	ldr	r3, [r4, #8]
 8008538:	4607      	mov	r7, r0
 800853a:	4691      	mov	r9, r2
 800853c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008540:	f108 0601 	add.w	r6, r8, #1
 8008544:	42b3      	cmp	r3, r6
 8008546:	db0b      	blt.n	8008560 <__lshift+0x38>
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff fd9d 	bl	8008088 <_Balloc>
 800854e:	4605      	mov	r5, r0
 8008550:	b948      	cbnz	r0, 8008566 <__lshift+0x3e>
 8008552:	4602      	mov	r2, r0
 8008554:	4b28      	ldr	r3, [pc, #160]	@ (80085f8 <__lshift+0xd0>)
 8008556:	4829      	ldr	r0, [pc, #164]	@ (80085fc <__lshift+0xd4>)
 8008558:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800855c:	f001 fcc2 	bl	8009ee4 <__assert_func>
 8008560:	3101      	adds	r1, #1
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	e7ee      	b.n	8008544 <__lshift+0x1c>
 8008566:	2300      	movs	r3, #0
 8008568:	f100 0114 	add.w	r1, r0, #20
 800856c:	f100 0210 	add.w	r2, r0, #16
 8008570:	4618      	mov	r0, r3
 8008572:	4553      	cmp	r3, sl
 8008574:	db33      	blt.n	80085de <__lshift+0xb6>
 8008576:	6920      	ldr	r0, [r4, #16]
 8008578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800857c:	f104 0314 	add.w	r3, r4, #20
 8008580:	f019 091f 	ands.w	r9, r9, #31
 8008584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008588:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800858c:	d02b      	beq.n	80085e6 <__lshift+0xbe>
 800858e:	f1c9 0e20 	rsb	lr, r9, #32
 8008592:	468a      	mov	sl, r1
 8008594:	2200      	movs	r2, #0
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	fa00 f009 	lsl.w	r0, r0, r9
 800859c:	4310      	orrs	r0, r2
 800859e:	f84a 0b04 	str.w	r0, [sl], #4
 80085a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a6:	459c      	cmp	ip, r3
 80085a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80085ac:	d8f3      	bhi.n	8008596 <__lshift+0x6e>
 80085ae:	ebac 0304 	sub.w	r3, ip, r4
 80085b2:	3b15      	subs	r3, #21
 80085b4:	f023 0303 	bic.w	r3, r3, #3
 80085b8:	3304      	adds	r3, #4
 80085ba:	f104 0015 	add.w	r0, r4, #21
 80085be:	4560      	cmp	r0, ip
 80085c0:	bf88      	it	hi
 80085c2:	2304      	movhi	r3, #4
 80085c4:	50ca      	str	r2, [r1, r3]
 80085c6:	b10a      	cbz	r2, 80085cc <__lshift+0xa4>
 80085c8:	f108 0602 	add.w	r6, r8, #2
 80085cc:	3e01      	subs	r6, #1
 80085ce:	4638      	mov	r0, r7
 80085d0:	612e      	str	r6, [r5, #16]
 80085d2:	4621      	mov	r1, r4
 80085d4:	f7ff fd98 	bl	8008108 <_Bfree>
 80085d8:	4628      	mov	r0, r5
 80085da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085de:	f842 0f04 	str.w	r0, [r2, #4]!
 80085e2:	3301      	adds	r3, #1
 80085e4:	e7c5      	b.n	8008572 <__lshift+0x4a>
 80085e6:	3904      	subs	r1, #4
 80085e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80085f0:	459c      	cmp	ip, r3
 80085f2:	d8f9      	bhi.n	80085e8 <__lshift+0xc0>
 80085f4:	e7ea      	b.n	80085cc <__lshift+0xa4>
 80085f6:	bf00      	nop
 80085f8:	0800ab29 	.word	0x0800ab29
 80085fc:	0800ab3a 	.word	0x0800ab3a

08008600 <__mcmp>:
 8008600:	690a      	ldr	r2, [r1, #16]
 8008602:	4603      	mov	r3, r0
 8008604:	6900      	ldr	r0, [r0, #16]
 8008606:	1a80      	subs	r0, r0, r2
 8008608:	b530      	push	{r4, r5, lr}
 800860a:	d10e      	bne.n	800862a <__mcmp+0x2a>
 800860c:	3314      	adds	r3, #20
 800860e:	3114      	adds	r1, #20
 8008610:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008614:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008618:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800861c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008620:	4295      	cmp	r5, r2
 8008622:	d003      	beq.n	800862c <__mcmp+0x2c>
 8008624:	d205      	bcs.n	8008632 <__mcmp+0x32>
 8008626:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800862a:	bd30      	pop	{r4, r5, pc}
 800862c:	42a3      	cmp	r3, r4
 800862e:	d3f3      	bcc.n	8008618 <__mcmp+0x18>
 8008630:	e7fb      	b.n	800862a <__mcmp+0x2a>
 8008632:	2001      	movs	r0, #1
 8008634:	e7f9      	b.n	800862a <__mcmp+0x2a>
	...

08008638 <__mdiff>:
 8008638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	4689      	mov	r9, r1
 800863e:	4606      	mov	r6, r0
 8008640:	4611      	mov	r1, r2
 8008642:	4648      	mov	r0, r9
 8008644:	4614      	mov	r4, r2
 8008646:	f7ff ffdb 	bl	8008600 <__mcmp>
 800864a:	1e05      	subs	r5, r0, #0
 800864c:	d112      	bne.n	8008674 <__mdiff+0x3c>
 800864e:	4629      	mov	r1, r5
 8008650:	4630      	mov	r0, r6
 8008652:	f7ff fd19 	bl	8008088 <_Balloc>
 8008656:	4602      	mov	r2, r0
 8008658:	b928      	cbnz	r0, 8008666 <__mdiff+0x2e>
 800865a:	4b3e      	ldr	r3, [pc, #248]	@ (8008754 <__mdiff+0x11c>)
 800865c:	f240 2137 	movw	r1, #567	@ 0x237
 8008660:	483d      	ldr	r0, [pc, #244]	@ (8008758 <__mdiff+0x120>)
 8008662:	f001 fc3f 	bl	8009ee4 <__assert_func>
 8008666:	2301      	movs	r3, #1
 8008668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800866c:	4610      	mov	r0, r2
 800866e:	b003      	add	sp, #12
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	bfbc      	itt	lt
 8008676:	464b      	movlt	r3, r9
 8008678:	46a1      	movlt	r9, r4
 800867a:	4630      	mov	r0, r6
 800867c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008680:	bfba      	itte	lt
 8008682:	461c      	movlt	r4, r3
 8008684:	2501      	movlt	r5, #1
 8008686:	2500      	movge	r5, #0
 8008688:	f7ff fcfe 	bl	8008088 <_Balloc>
 800868c:	4602      	mov	r2, r0
 800868e:	b918      	cbnz	r0, 8008698 <__mdiff+0x60>
 8008690:	4b30      	ldr	r3, [pc, #192]	@ (8008754 <__mdiff+0x11c>)
 8008692:	f240 2145 	movw	r1, #581	@ 0x245
 8008696:	e7e3      	b.n	8008660 <__mdiff+0x28>
 8008698:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800869c:	6926      	ldr	r6, [r4, #16]
 800869e:	60c5      	str	r5, [r0, #12]
 80086a0:	f109 0310 	add.w	r3, r9, #16
 80086a4:	f109 0514 	add.w	r5, r9, #20
 80086a8:	f104 0e14 	add.w	lr, r4, #20
 80086ac:	f100 0b14 	add.w	fp, r0, #20
 80086b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	46d9      	mov	r9, fp
 80086bc:	f04f 0c00 	mov.w	ip, #0
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	b281      	uxth	r1, r0
 80086ce:	fa1f f38a 	uxth.w	r3, sl
 80086d2:	1a5b      	subs	r3, r3, r1
 80086d4:	0c00      	lsrs	r0, r0, #16
 80086d6:	4463      	add	r3, ip
 80086d8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086dc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086e6:	4576      	cmp	r6, lr
 80086e8:	f849 3b04 	str.w	r3, [r9], #4
 80086ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086f0:	d8e6      	bhi.n	80086c0 <__mdiff+0x88>
 80086f2:	1b33      	subs	r3, r6, r4
 80086f4:	3b15      	subs	r3, #21
 80086f6:	f023 0303 	bic.w	r3, r3, #3
 80086fa:	3415      	adds	r4, #21
 80086fc:	3304      	adds	r3, #4
 80086fe:	42a6      	cmp	r6, r4
 8008700:	bf38      	it	cc
 8008702:	2304      	movcc	r3, #4
 8008704:	441d      	add	r5, r3
 8008706:	445b      	add	r3, fp
 8008708:	461e      	mov	r6, r3
 800870a:	462c      	mov	r4, r5
 800870c:	4544      	cmp	r4, r8
 800870e:	d30e      	bcc.n	800872e <__mdiff+0xf6>
 8008710:	f108 0103 	add.w	r1, r8, #3
 8008714:	1b49      	subs	r1, r1, r5
 8008716:	f021 0103 	bic.w	r1, r1, #3
 800871a:	3d03      	subs	r5, #3
 800871c:	45a8      	cmp	r8, r5
 800871e:	bf38      	it	cc
 8008720:	2100      	movcc	r1, #0
 8008722:	440b      	add	r3, r1
 8008724:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008728:	b191      	cbz	r1, 8008750 <__mdiff+0x118>
 800872a:	6117      	str	r7, [r2, #16]
 800872c:	e79e      	b.n	800866c <__mdiff+0x34>
 800872e:	f854 1b04 	ldr.w	r1, [r4], #4
 8008732:	46e6      	mov	lr, ip
 8008734:	0c08      	lsrs	r0, r1, #16
 8008736:	fa1c fc81 	uxtah	ip, ip, r1
 800873a:	4471      	add	r1, lr
 800873c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008740:	b289      	uxth	r1, r1
 8008742:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008746:	f846 1b04 	str.w	r1, [r6], #4
 800874a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800874e:	e7dd      	b.n	800870c <__mdiff+0xd4>
 8008750:	3f01      	subs	r7, #1
 8008752:	e7e7      	b.n	8008724 <__mdiff+0xec>
 8008754:	0800ab29 	.word	0x0800ab29
 8008758:	0800ab3a 	.word	0x0800ab3a

0800875c <__ulp>:
 800875c:	4b0e      	ldr	r3, [pc, #56]	@ (8008798 <__ulp+0x3c>)
 800875e:	400b      	ands	r3, r1
 8008760:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008764:	2b00      	cmp	r3, #0
 8008766:	dc08      	bgt.n	800877a <__ulp+0x1e>
 8008768:	425b      	negs	r3, r3
 800876a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800876e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008772:	da04      	bge.n	800877e <__ulp+0x22>
 8008774:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008778:	4113      	asrs	r3, r2
 800877a:	2200      	movs	r2, #0
 800877c:	e008      	b.n	8008790 <__ulp+0x34>
 800877e:	f1a2 0314 	sub.w	r3, r2, #20
 8008782:	2b1e      	cmp	r3, #30
 8008784:	bfda      	itte	le
 8008786:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800878a:	40da      	lsrle	r2, r3
 800878c:	2201      	movgt	r2, #1
 800878e:	2300      	movs	r3, #0
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	7ff00000 	.word	0x7ff00000

0800879c <__b2d>:
 800879c:	6902      	ldr	r2, [r0, #16]
 800879e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a0:	f100 0614 	add.w	r6, r0, #20
 80087a4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80087a8:	4f20      	ldr	r7, [pc, #128]	@ (800882c <__b2d+0x90>)
 80087aa:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff fd5c 	bl	800826c <__hi0bits>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b0a      	cmp	r3, #10
 80087b8:	f1c0 0020 	rsb	r0, r0, #32
 80087bc:	f1a2 0504 	sub.w	r5, r2, #4
 80087c0:	6008      	str	r0, [r1, #0]
 80087c2:	dc13      	bgt.n	80087ec <__b2d+0x50>
 80087c4:	42ae      	cmp	r6, r5
 80087c6:	bf38      	it	cc
 80087c8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80087cc:	f1c3 0c0b 	rsb	ip, r3, #11
 80087d0:	bf28      	it	cs
 80087d2:	2200      	movcs	r2, #0
 80087d4:	3315      	adds	r3, #21
 80087d6:	fa24 fe0c 	lsr.w	lr, r4, ip
 80087da:	fa04 f303 	lsl.w	r3, r4, r3
 80087de:	fa22 f20c 	lsr.w	r2, r2, ip
 80087e2:	ea4e 0107 	orr.w	r1, lr, r7
 80087e6:	431a      	orrs	r2, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ec:	42ae      	cmp	r6, r5
 80087ee:	bf36      	itet	cc
 80087f0:	f1a2 0508 	subcc.w	r5, r2, #8
 80087f4:	2200      	movcs	r2, #0
 80087f6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80087fa:	3b0b      	subs	r3, #11
 80087fc:	d012      	beq.n	8008824 <__b2d+0x88>
 80087fe:	f1c3 0720 	rsb	r7, r3, #32
 8008802:	fa22 f107 	lsr.w	r1, r2, r7
 8008806:	409c      	lsls	r4, r3
 8008808:	430c      	orrs	r4, r1
 800880a:	42b5      	cmp	r5, r6
 800880c:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008810:	bf8c      	ite	hi
 8008812:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008816:	2400      	movls	r4, #0
 8008818:	409a      	lsls	r2, r3
 800881a:	40fc      	lsrs	r4, r7
 800881c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008820:	4322      	orrs	r2, r4
 8008822:	e7e1      	b.n	80087e8 <__b2d+0x4c>
 8008824:	ea44 0107 	orr.w	r1, r4, r7
 8008828:	e7de      	b.n	80087e8 <__b2d+0x4c>
 800882a:	bf00      	nop
 800882c:	3ff00000 	.word	0x3ff00000

08008830 <__d2b>:
 8008830:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008834:	2101      	movs	r1, #1
 8008836:	9e08      	ldr	r6, [sp, #32]
 8008838:	4690      	mov	r8, r2
 800883a:	4699      	mov	r9, r3
 800883c:	f7ff fc24 	bl	8008088 <_Balloc>
 8008840:	4604      	mov	r4, r0
 8008842:	b930      	cbnz	r0, 8008852 <__d2b+0x22>
 8008844:	4602      	mov	r2, r0
 8008846:	4b24      	ldr	r3, [pc, #144]	@ (80088d8 <__d2b+0xa8>)
 8008848:	4824      	ldr	r0, [pc, #144]	@ (80088dc <__d2b+0xac>)
 800884a:	f240 310f 	movw	r1, #783	@ 0x30f
 800884e:	f001 fb49 	bl	8009ee4 <__assert_func>
 8008852:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008856:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800885a:	b10d      	cbz	r5, 8008860 <__d2b+0x30>
 800885c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	f1b8 0300 	subs.w	r3, r8, #0
 8008866:	d024      	beq.n	80088b2 <__d2b+0x82>
 8008868:	4668      	mov	r0, sp
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	f7ff fd1d 	bl	80082aa <__lo0bits>
 8008870:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008874:	b1d8      	cbz	r0, 80088ae <__d2b+0x7e>
 8008876:	f1c0 0320 	rsb	r3, r0, #32
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	430b      	orrs	r3, r1
 8008880:	40c2      	lsrs	r2, r0
 8008882:	6163      	str	r3, [r4, #20]
 8008884:	9201      	str	r2, [sp, #4]
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	61a3      	str	r3, [r4, #24]
 800888a:	2b00      	cmp	r3, #0
 800888c:	bf0c      	ite	eq
 800888e:	2201      	moveq	r2, #1
 8008890:	2202      	movne	r2, #2
 8008892:	6122      	str	r2, [r4, #16]
 8008894:	b1ad      	cbz	r5, 80088c2 <__d2b+0x92>
 8008896:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800889a:	4405      	add	r5, r0
 800889c:	6035      	str	r5, [r6, #0]
 800889e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80088a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a4:	6018      	str	r0, [r3, #0]
 80088a6:	4620      	mov	r0, r4
 80088a8:	b002      	add	sp, #8
 80088aa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80088ae:	6161      	str	r1, [r4, #20]
 80088b0:	e7e9      	b.n	8008886 <__d2b+0x56>
 80088b2:	a801      	add	r0, sp, #4
 80088b4:	f7ff fcf9 	bl	80082aa <__lo0bits>
 80088b8:	9b01      	ldr	r3, [sp, #4]
 80088ba:	6163      	str	r3, [r4, #20]
 80088bc:	3020      	adds	r0, #32
 80088be:	2201      	movs	r2, #1
 80088c0:	e7e7      	b.n	8008892 <__d2b+0x62>
 80088c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80088ca:	6030      	str	r0, [r6, #0]
 80088cc:	6918      	ldr	r0, [r3, #16]
 80088ce:	f7ff fccd 	bl	800826c <__hi0bits>
 80088d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088d6:	e7e4      	b.n	80088a2 <__d2b+0x72>
 80088d8:	0800ab29 	.word	0x0800ab29
 80088dc:	0800ab3a 	.word	0x0800ab3a

080088e0 <__ratio>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	b085      	sub	sp, #20
 80088e6:	e9cd 1000 	strd	r1, r0, [sp]
 80088ea:	a902      	add	r1, sp, #8
 80088ec:	f7ff ff56 	bl	800879c <__b2d>
 80088f0:	468b      	mov	fp, r1
 80088f2:	4606      	mov	r6, r0
 80088f4:	460f      	mov	r7, r1
 80088f6:	9800      	ldr	r0, [sp, #0]
 80088f8:	a903      	add	r1, sp, #12
 80088fa:	f7ff ff4f 	bl	800879c <__b2d>
 80088fe:	9b01      	ldr	r3, [sp, #4]
 8008900:	4689      	mov	r9, r1
 8008902:	460d      	mov	r5, r1
 8008904:	6919      	ldr	r1, [r3, #16]
 8008906:	9b00      	ldr	r3, [sp, #0]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	1ac9      	subs	r1, r1, r3
 800890c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008910:	1a9b      	subs	r3, r3, r2
 8008912:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008916:	2b00      	cmp	r3, #0
 8008918:	bfcd      	iteet	gt
 800891a:	463a      	movgt	r2, r7
 800891c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008920:	462a      	movle	r2, r5
 8008922:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008926:	bfd8      	it	le
 8008928:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800892c:	4604      	mov	r4, r0
 800892e:	4622      	mov	r2, r4
 8008930:	464b      	mov	r3, r9
 8008932:	4630      	mov	r0, r6
 8008934:	4659      	mov	r1, fp
 8008936:	f7f7 ff61 	bl	80007fc <__aeabi_ddiv>
 800893a:	b005      	add	sp, #20
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008940 <__copybits>:
 8008940:	3901      	subs	r1, #1
 8008942:	b570      	push	{r4, r5, r6, lr}
 8008944:	1149      	asrs	r1, r1, #5
 8008946:	6914      	ldr	r4, [r2, #16]
 8008948:	3101      	adds	r1, #1
 800894a:	f102 0314 	add.w	r3, r2, #20
 800894e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008952:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008956:	1f05      	subs	r5, r0, #4
 8008958:	42a3      	cmp	r3, r4
 800895a:	d30c      	bcc.n	8008976 <__copybits+0x36>
 800895c:	1aa3      	subs	r3, r4, r2
 800895e:	3b11      	subs	r3, #17
 8008960:	f023 0303 	bic.w	r3, r3, #3
 8008964:	3211      	adds	r2, #17
 8008966:	42a2      	cmp	r2, r4
 8008968:	bf88      	it	hi
 800896a:	2300      	movhi	r3, #0
 800896c:	4418      	add	r0, r3
 800896e:	2300      	movs	r3, #0
 8008970:	4288      	cmp	r0, r1
 8008972:	d305      	bcc.n	8008980 <__copybits+0x40>
 8008974:	bd70      	pop	{r4, r5, r6, pc}
 8008976:	f853 6b04 	ldr.w	r6, [r3], #4
 800897a:	f845 6f04 	str.w	r6, [r5, #4]!
 800897e:	e7eb      	b.n	8008958 <__copybits+0x18>
 8008980:	f840 3b04 	str.w	r3, [r0], #4
 8008984:	e7f4      	b.n	8008970 <__copybits+0x30>

08008986 <__any_on>:
 8008986:	f100 0214 	add.w	r2, r0, #20
 800898a:	6900      	ldr	r0, [r0, #16]
 800898c:	114b      	asrs	r3, r1, #5
 800898e:	4298      	cmp	r0, r3
 8008990:	b510      	push	{r4, lr}
 8008992:	db11      	blt.n	80089b8 <__any_on+0x32>
 8008994:	dd0a      	ble.n	80089ac <__any_on+0x26>
 8008996:	f011 011f 	ands.w	r1, r1, #31
 800899a:	d007      	beq.n	80089ac <__any_on+0x26>
 800899c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089a0:	fa24 f001 	lsr.w	r0, r4, r1
 80089a4:	fa00 f101 	lsl.w	r1, r0, r1
 80089a8:	428c      	cmp	r4, r1
 80089aa:	d10b      	bne.n	80089c4 <__any_on+0x3e>
 80089ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d803      	bhi.n	80089bc <__any_on+0x36>
 80089b4:	2000      	movs	r0, #0
 80089b6:	bd10      	pop	{r4, pc}
 80089b8:	4603      	mov	r3, r0
 80089ba:	e7f7      	b.n	80089ac <__any_on+0x26>
 80089bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089c0:	2900      	cmp	r1, #0
 80089c2:	d0f5      	beq.n	80089b0 <__any_on+0x2a>
 80089c4:	2001      	movs	r0, #1
 80089c6:	e7f6      	b.n	80089b6 <__any_on+0x30>

080089c8 <sulp>:
 80089c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089cc:	460f      	mov	r7, r1
 80089ce:	4690      	mov	r8, r2
 80089d0:	f7ff fec4 	bl	800875c <__ulp>
 80089d4:	4604      	mov	r4, r0
 80089d6:	460d      	mov	r5, r1
 80089d8:	f1b8 0f00 	cmp.w	r8, #0
 80089dc:	d011      	beq.n	8008a02 <sulp+0x3a>
 80089de:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80089e2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dd0b      	ble.n	8008a02 <sulp+0x3a>
 80089ea:	051b      	lsls	r3, r3, #20
 80089ec:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80089f0:	2400      	movs	r4, #0
 80089f2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80089f6:	4622      	mov	r2, r4
 80089f8:	462b      	mov	r3, r5
 80089fa:	f7f7 fdd5 	bl	80005a8 <__aeabi_dmul>
 80089fe:	4604      	mov	r4, r0
 8008a00:	460d      	mov	r5, r1
 8008a02:	4620      	mov	r0, r4
 8008a04:	4629      	mov	r1, r5
 8008a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a0a:	0000      	movs	r0, r0
 8008a0c:	0000      	movs	r0, r0
	...

08008a10 <_strtod_l>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	b09f      	sub	sp, #124	@ 0x7c
 8008a16:	460c      	mov	r4, r1
 8008a18:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a1e:	9005      	str	r0, [sp, #20]
 8008a20:	f04f 0a00 	mov.w	sl, #0
 8008a24:	f04f 0b00 	mov.w	fp, #0
 8008a28:	460a      	mov	r2, r1
 8008a2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a2c:	7811      	ldrb	r1, [r2, #0]
 8008a2e:	292b      	cmp	r1, #43	@ 0x2b
 8008a30:	d048      	beq.n	8008ac4 <_strtod_l+0xb4>
 8008a32:	d836      	bhi.n	8008aa2 <_strtod_l+0x92>
 8008a34:	290d      	cmp	r1, #13
 8008a36:	d830      	bhi.n	8008a9a <_strtod_l+0x8a>
 8008a38:	2908      	cmp	r1, #8
 8008a3a:	d830      	bhi.n	8008a9e <_strtod_l+0x8e>
 8008a3c:	2900      	cmp	r1, #0
 8008a3e:	d039      	beq.n	8008ab4 <_strtod_l+0xa4>
 8008a40:	2200      	movs	r2, #0
 8008a42:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a46:	782a      	ldrb	r2, [r5, #0]
 8008a48:	2a30      	cmp	r2, #48	@ 0x30
 8008a4a:	f040 80b0 	bne.w	8008bae <_strtod_l+0x19e>
 8008a4e:	786a      	ldrb	r2, [r5, #1]
 8008a50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a54:	2a58      	cmp	r2, #88	@ 0x58
 8008a56:	d16c      	bne.n	8008b32 <_strtod_l+0x122>
 8008a58:	9302      	str	r3, [sp, #8]
 8008a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	4a8e      	ldr	r2, [pc, #568]	@ (8008c9c <_strtod_l+0x28c>)
 8008a64:	9805      	ldr	r0, [sp, #20]
 8008a66:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a68:	a919      	add	r1, sp, #100	@ 0x64
 8008a6a:	f001 fad5 	bl	800a018 <__gethex>
 8008a6e:	f010 060f 	ands.w	r6, r0, #15
 8008a72:	4604      	mov	r4, r0
 8008a74:	d005      	beq.n	8008a82 <_strtod_l+0x72>
 8008a76:	2e06      	cmp	r6, #6
 8008a78:	d126      	bne.n	8008ac8 <_strtod_l+0xb8>
 8008a7a:	3501      	adds	r5, #1
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008a80:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f040 857e 	bne.w	8009586 <_strtod_l+0xb76>
 8008a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a8c:	b1bb      	cbz	r3, 8008abe <_strtod_l+0xae>
 8008a8e:	4650      	mov	r0, sl
 8008a90:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008a94:	b01f      	add	sp, #124	@ 0x7c
 8008a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9a:	2920      	cmp	r1, #32
 8008a9c:	d1d0      	bne.n	8008a40 <_strtod_l+0x30>
 8008a9e:	3201      	adds	r2, #1
 8008aa0:	e7c3      	b.n	8008a2a <_strtod_l+0x1a>
 8008aa2:	292d      	cmp	r1, #45	@ 0x2d
 8008aa4:	d1cc      	bne.n	8008a40 <_strtod_l+0x30>
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	910e      	str	r1, [sp, #56]	@ 0x38
 8008aaa:	1c51      	adds	r1, r2, #1
 8008aac:	9119      	str	r1, [sp, #100]	@ 0x64
 8008aae:	7852      	ldrb	r2, [r2, #1]
 8008ab0:	2a00      	cmp	r2, #0
 8008ab2:	d1c7      	bne.n	8008a44 <_strtod_l+0x34>
 8008ab4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ab6:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f040 8562 	bne.w	8009582 <_strtod_l+0xb72>
 8008abe:	4650      	mov	r0, sl
 8008ac0:	4659      	mov	r1, fp
 8008ac2:	e7e7      	b.n	8008a94 <_strtod_l+0x84>
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	e7ef      	b.n	8008aa8 <_strtod_l+0x98>
 8008ac8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008aca:	b13a      	cbz	r2, 8008adc <_strtod_l+0xcc>
 8008acc:	2135      	movs	r1, #53	@ 0x35
 8008ace:	a81c      	add	r0, sp, #112	@ 0x70
 8008ad0:	f7ff ff36 	bl	8008940 <__copybits>
 8008ad4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ad6:	9805      	ldr	r0, [sp, #20]
 8008ad8:	f7ff fb16 	bl	8008108 <_Bfree>
 8008adc:	3e01      	subs	r6, #1
 8008ade:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008ae0:	2e04      	cmp	r6, #4
 8008ae2:	d806      	bhi.n	8008af2 <_strtod_l+0xe2>
 8008ae4:	e8df f006 	tbb	[pc, r6]
 8008ae8:	201d0314 	.word	0x201d0314
 8008aec:	14          	.byte	0x14
 8008aed:	00          	.byte	0x00
 8008aee:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008af2:	05e1      	lsls	r1, r4, #23
 8008af4:	bf48      	it	mi
 8008af6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008afa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008afe:	0d1b      	lsrs	r3, r3, #20
 8008b00:	051b      	lsls	r3, r3, #20
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1bd      	bne.n	8008a82 <_strtod_l+0x72>
 8008b06:	f7fe fb35 	bl	8007174 <__errno>
 8008b0a:	2322      	movs	r3, #34	@ 0x22
 8008b0c:	6003      	str	r3, [r0, #0]
 8008b0e:	e7b8      	b.n	8008a82 <_strtod_l+0x72>
 8008b10:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b14:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b18:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b1c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b20:	e7e7      	b.n	8008af2 <_strtod_l+0xe2>
 8008b22:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008ca0 <_strtod_l+0x290>
 8008b26:	e7e4      	b.n	8008af2 <_strtod_l+0xe2>
 8008b28:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008b2c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008b30:	e7df      	b.n	8008af2 <_strtod_l+0xe2>
 8008b32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b34:	1c5a      	adds	r2, r3, #1
 8008b36:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	2b30      	cmp	r3, #48	@ 0x30
 8008b3c:	d0f9      	beq.n	8008b32 <_strtod_l+0x122>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d09f      	beq.n	8008a82 <_strtod_l+0x72>
 8008b42:	2301      	movs	r3, #1
 8008b44:	2700      	movs	r7, #0
 8008b46:	9308      	str	r3, [sp, #32]
 8008b48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b4c:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008b4e:	46b9      	mov	r9, r7
 8008b50:	220a      	movs	r2, #10
 8008b52:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b54:	7805      	ldrb	r5, [r0, #0]
 8008b56:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008b5a:	b2d9      	uxtb	r1, r3
 8008b5c:	2909      	cmp	r1, #9
 8008b5e:	d928      	bls.n	8008bb2 <_strtod_l+0x1a2>
 8008b60:	4950      	ldr	r1, [pc, #320]	@ (8008ca4 <_strtod_l+0x294>)
 8008b62:	2201      	movs	r2, #1
 8008b64:	f001 f966 	bl	8009e34 <strncmp>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d032      	beq.n	8008bd2 <_strtod_l+0x1c2>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	462a      	mov	r2, r5
 8008b70:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b72:	464d      	mov	r5, r9
 8008b74:	4603      	mov	r3, r0
 8008b76:	2a65      	cmp	r2, #101	@ 0x65
 8008b78:	d001      	beq.n	8008b7e <_strtod_l+0x16e>
 8008b7a:	2a45      	cmp	r2, #69	@ 0x45
 8008b7c:	d114      	bne.n	8008ba8 <_strtod_l+0x198>
 8008b7e:	b91d      	cbnz	r5, 8008b88 <_strtod_l+0x178>
 8008b80:	9a08      	ldr	r2, [sp, #32]
 8008b82:	4302      	orrs	r2, r0
 8008b84:	d096      	beq.n	8008ab4 <_strtod_l+0xa4>
 8008b86:	2500      	movs	r5, #0
 8008b88:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008b8a:	1c62      	adds	r2, r4, #1
 8008b8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b8e:	7862      	ldrb	r2, [r4, #1]
 8008b90:	2a2b      	cmp	r2, #43	@ 0x2b
 8008b92:	d07a      	beq.n	8008c8a <_strtod_l+0x27a>
 8008b94:	2a2d      	cmp	r2, #45	@ 0x2d
 8008b96:	d07e      	beq.n	8008c96 <_strtod_l+0x286>
 8008b98:	f04f 0c00 	mov.w	ip, #0
 8008b9c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ba0:	2909      	cmp	r1, #9
 8008ba2:	f240 8085 	bls.w	8008cb0 <_strtod_l+0x2a0>
 8008ba6:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ba8:	f04f 0800 	mov.w	r8, #0
 8008bac:	e0a5      	b.n	8008cfa <_strtod_l+0x2ea>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e7c8      	b.n	8008b44 <_strtod_l+0x134>
 8008bb2:	f1b9 0f08 	cmp.w	r9, #8
 8008bb6:	bfd8      	it	le
 8008bb8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008bba:	f100 0001 	add.w	r0, r0, #1
 8008bbe:	bfda      	itte	le
 8008bc0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bc4:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008bc6:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008bca:	f109 0901 	add.w	r9, r9, #1
 8008bce:	9019      	str	r0, [sp, #100]	@ 0x64
 8008bd0:	e7bf      	b.n	8008b52 <_strtod_l+0x142>
 8008bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bd8:	785a      	ldrb	r2, [r3, #1]
 8008bda:	f1b9 0f00 	cmp.w	r9, #0
 8008bde:	d03b      	beq.n	8008c58 <_strtod_l+0x248>
 8008be0:	900a      	str	r0, [sp, #40]	@ 0x28
 8008be2:	464d      	mov	r5, r9
 8008be4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008be8:	2b09      	cmp	r3, #9
 8008bea:	d912      	bls.n	8008c12 <_strtod_l+0x202>
 8008bec:	2301      	movs	r3, #1
 8008bee:	e7c2      	b.n	8008b76 <_strtod_l+0x166>
 8008bf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bf6:	785a      	ldrb	r2, [r3, #1]
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	2a30      	cmp	r2, #48	@ 0x30
 8008bfc:	d0f8      	beq.n	8008bf0 <_strtod_l+0x1e0>
 8008bfe:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	f200 84c4 	bhi.w	8009590 <_strtod_l+0xb80>
 8008c08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c10:	4605      	mov	r5, r0
 8008c12:	3a30      	subs	r2, #48	@ 0x30
 8008c14:	f100 0301 	add.w	r3, r0, #1
 8008c18:	d018      	beq.n	8008c4c <_strtod_l+0x23c>
 8008c1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c1c:	4419      	add	r1, r3
 8008c1e:	910a      	str	r1, [sp, #40]	@ 0x28
 8008c20:	462e      	mov	r6, r5
 8008c22:	f04f 0e0a 	mov.w	lr, #10
 8008c26:	1c71      	adds	r1, r6, #1
 8008c28:	eba1 0c05 	sub.w	ip, r1, r5
 8008c2c:	4563      	cmp	r3, ip
 8008c2e:	dc15      	bgt.n	8008c5c <_strtod_l+0x24c>
 8008c30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008c34:	182b      	adds	r3, r5, r0
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	f105 0501 	add.w	r5, r5, #1
 8008c3c:	4405      	add	r5, r0
 8008c3e:	dc1a      	bgt.n	8008c76 <_strtod_l+0x266>
 8008c40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c42:	230a      	movs	r3, #10
 8008c44:	fb03 2301 	mla	r3, r3, r1, r2
 8008c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c4e:	1c51      	adds	r1, r2, #1
 8008c50:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c52:	7852      	ldrb	r2, [r2, #1]
 8008c54:	4618      	mov	r0, r3
 8008c56:	e7c5      	b.n	8008be4 <_strtod_l+0x1d4>
 8008c58:	4648      	mov	r0, r9
 8008c5a:	e7ce      	b.n	8008bfa <_strtod_l+0x1ea>
 8008c5c:	2e08      	cmp	r6, #8
 8008c5e:	dc05      	bgt.n	8008c6c <_strtod_l+0x25c>
 8008c60:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008c62:	fb0e f606 	mul.w	r6, lr, r6
 8008c66:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008c68:	460e      	mov	r6, r1
 8008c6a:	e7dc      	b.n	8008c26 <_strtod_l+0x216>
 8008c6c:	2910      	cmp	r1, #16
 8008c6e:	bfd8      	it	le
 8008c70:	fb0e f707 	mulle.w	r7, lr, r7
 8008c74:	e7f8      	b.n	8008c68 <_strtod_l+0x258>
 8008c76:	2b0f      	cmp	r3, #15
 8008c78:	bfdc      	itt	le
 8008c7a:	230a      	movle	r3, #10
 8008c7c:	fb03 2707 	mlale	r7, r3, r7, r2
 8008c80:	e7e3      	b.n	8008c4a <_strtod_l+0x23a>
 8008c82:	2300      	movs	r3, #0
 8008c84:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c86:	2301      	movs	r3, #1
 8008c88:	e77a      	b.n	8008b80 <_strtod_l+0x170>
 8008c8a:	f04f 0c00 	mov.w	ip, #0
 8008c8e:	1ca2      	adds	r2, r4, #2
 8008c90:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c92:	78a2      	ldrb	r2, [r4, #2]
 8008c94:	e782      	b.n	8008b9c <_strtod_l+0x18c>
 8008c96:	f04f 0c01 	mov.w	ip, #1
 8008c9a:	e7f8      	b.n	8008c8e <_strtod_l+0x27e>
 8008c9c:	0800ad5c 	.word	0x0800ad5c
 8008ca0:	7ff00000 	.word	0x7ff00000
 8008ca4:	0800ab93 	.word	0x0800ab93
 8008ca8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008caa:	1c51      	adds	r1, r2, #1
 8008cac:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cae:	7852      	ldrb	r2, [r2, #1]
 8008cb0:	2a30      	cmp	r2, #48	@ 0x30
 8008cb2:	d0f9      	beq.n	8008ca8 <_strtod_l+0x298>
 8008cb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008cb8:	2908      	cmp	r1, #8
 8008cba:	f63f af75 	bhi.w	8008ba8 <_strtod_l+0x198>
 8008cbe:	3a30      	subs	r2, #48	@ 0x30
 8008cc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008cc6:	f04f 080a 	mov.w	r8, #10
 8008cca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ccc:	1c56      	adds	r6, r2, #1
 8008cce:	9619      	str	r6, [sp, #100]	@ 0x64
 8008cd0:	7852      	ldrb	r2, [r2, #1]
 8008cd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008cd6:	f1be 0f09 	cmp.w	lr, #9
 8008cda:	d939      	bls.n	8008d50 <_strtod_l+0x340>
 8008cdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008cde:	1a76      	subs	r6, r6, r1
 8008ce0:	2e08      	cmp	r6, #8
 8008ce2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008ce6:	dc03      	bgt.n	8008cf0 <_strtod_l+0x2e0>
 8008ce8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cea:	4588      	cmp	r8, r1
 8008cec:	bfa8      	it	ge
 8008cee:	4688      	movge	r8, r1
 8008cf0:	f1bc 0f00 	cmp.w	ip, #0
 8008cf4:	d001      	beq.n	8008cfa <_strtod_l+0x2ea>
 8008cf6:	f1c8 0800 	rsb	r8, r8, #0
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	d14e      	bne.n	8008d9c <_strtod_l+0x38c>
 8008cfe:	9908      	ldr	r1, [sp, #32]
 8008d00:	4308      	orrs	r0, r1
 8008d02:	f47f aebe 	bne.w	8008a82 <_strtod_l+0x72>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f47f aed4 	bne.w	8008ab4 <_strtod_l+0xa4>
 8008d0c:	2a69      	cmp	r2, #105	@ 0x69
 8008d0e:	d028      	beq.n	8008d62 <_strtod_l+0x352>
 8008d10:	dc25      	bgt.n	8008d5e <_strtod_l+0x34e>
 8008d12:	2a49      	cmp	r2, #73	@ 0x49
 8008d14:	d025      	beq.n	8008d62 <_strtod_l+0x352>
 8008d16:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d18:	f47f aecc 	bne.w	8008ab4 <_strtod_l+0xa4>
 8008d1c:	4999      	ldr	r1, [pc, #612]	@ (8008f84 <_strtod_l+0x574>)
 8008d1e:	a819      	add	r0, sp, #100	@ 0x64
 8008d20:	f001 fb9c 	bl	800a45c <__match>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	f43f aec5 	beq.w	8008ab4 <_strtod_l+0xa4>
 8008d2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b28      	cmp	r3, #40	@ 0x28
 8008d30:	d12e      	bne.n	8008d90 <_strtod_l+0x380>
 8008d32:	4995      	ldr	r1, [pc, #596]	@ (8008f88 <_strtod_l+0x578>)
 8008d34:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d36:	a819      	add	r0, sp, #100	@ 0x64
 8008d38:	f001 fba4 	bl	800a484 <__hexnan>
 8008d3c:	2805      	cmp	r0, #5
 8008d3e:	d127      	bne.n	8008d90 <_strtod_l+0x380>
 8008d40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008d4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008d4e:	e698      	b.n	8008a82 <_strtod_l+0x72>
 8008d50:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d52:	fb08 2101 	mla	r1, r8, r1, r2
 8008d56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008d5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d5c:	e7b5      	b.n	8008cca <_strtod_l+0x2ba>
 8008d5e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008d60:	e7da      	b.n	8008d18 <_strtod_l+0x308>
 8008d62:	498a      	ldr	r1, [pc, #552]	@ (8008f8c <_strtod_l+0x57c>)
 8008d64:	a819      	add	r0, sp, #100	@ 0x64
 8008d66:	f001 fb79 	bl	800a45c <__match>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	f43f aea2 	beq.w	8008ab4 <_strtod_l+0xa4>
 8008d70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d72:	4987      	ldr	r1, [pc, #540]	@ (8008f90 <_strtod_l+0x580>)
 8008d74:	3b01      	subs	r3, #1
 8008d76:	a819      	add	r0, sp, #100	@ 0x64
 8008d78:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d7a:	f001 fb6f 	bl	800a45c <__match>
 8008d7e:	b910      	cbnz	r0, 8008d86 <_strtod_l+0x376>
 8008d80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d82:	3301      	adds	r3, #1
 8008d84:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d86:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008f94 <_strtod_l+0x584>
 8008d8a:	f04f 0a00 	mov.w	sl, #0
 8008d8e:	e678      	b.n	8008a82 <_strtod_l+0x72>
 8008d90:	4881      	ldr	r0, [pc, #516]	@ (8008f98 <_strtod_l+0x588>)
 8008d92:	f001 f8a1 	bl	8009ed8 <nan>
 8008d96:	4682      	mov	sl, r0
 8008d98:	468b      	mov	fp, r1
 8008d9a:	e672      	b.n	8008a82 <_strtod_l+0x72>
 8008d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d9e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008da0:	eba8 0303 	sub.w	r3, r8, r3
 8008da4:	f1b9 0f00 	cmp.w	r9, #0
 8008da8:	bf08      	it	eq
 8008daa:	46a9      	moveq	r9, r5
 8008dac:	2d10      	cmp	r5, #16
 8008dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db0:	462c      	mov	r4, r5
 8008db2:	bfa8      	it	ge
 8008db4:	2410      	movge	r4, #16
 8008db6:	f7f7 fb7d 	bl	80004b4 <__aeabi_ui2d>
 8008dba:	2d09      	cmp	r5, #9
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	468b      	mov	fp, r1
 8008dc0:	dc11      	bgt.n	8008de6 <_strtod_l+0x3d6>
 8008dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f43f ae5c 	beq.w	8008a82 <_strtod_l+0x72>
 8008dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dcc:	dd76      	ble.n	8008ebc <_strtod_l+0x4ac>
 8008dce:	2b16      	cmp	r3, #22
 8008dd0:	dc5d      	bgt.n	8008e8e <_strtod_l+0x47e>
 8008dd2:	4972      	ldr	r1, [pc, #456]	@ (8008f9c <_strtod_l+0x58c>)
 8008dd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ddc:	4652      	mov	r2, sl
 8008dde:	465b      	mov	r3, fp
 8008de0:	f7f7 fbe2 	bl	80005a8 <__aeabi_dmul>
 8008de4:	e7d7      	b.n	8008d96 <_strtod_l+0x386>
 8008de6:	4b6d      	ldr	r3, [pc, #436]	@ (8008f9c <_strtod_l+0x58c>)
 8008de8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008df0:	f7f7 fbda 	bl	80005a8 <__aeabi_dmul>
 8008df4:	4682      	mov	sl, r0
 8008df6:	4638      	mov	r0, r7
 8008df8:	468b      	mov	fp, r1
 8008dfa:	f7f7 fb5b 	bl	80004b4 <__aeabi_ui2d>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4650      	mov	r0, sl
 8008e04:	4659      	mov	r1, fp
 8008e06:	f7f7 fa19 	bl	800023c <__adddf3>
 8008e0a:	2d0f      	cmp	r5, #15
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	468b      	mov	fp, r1
 8008e10:	ddd7      	ble.n	8008dc2 <_strtod_l+0x3b2>
 8008e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e14:	1b2c      	subs	r4, r5, r4
 8008e16:	441c      	add	r4, r3
 8008e18:	2c00      	cmp	r4, #0
 8008e1a:	f340 8093 	ble.w	8008f44 <_strtod_l+0x534>
 8008e1e:	f014 030f 	ands.w	r3, r4, #15
 8008e22:	d00a      	beq.n	8008e3a <_strtod_l+0x42a>
 8008e24:	495d      	ldr	r1, [pc, #372]	@ (8008f9c <_strtod_l+0x58c>)
 8008e26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e2a:	4652      	mov	r2, sl
 8008e2c:	465b      	mov	r3, fp
 8008e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e32:	f7f7 fbb9 	bl	80005a8 <__aeabi_dmul>
 8008e36:	4682      	mov	sl, r0
 8008e38:	468b      	mov	fp, r1
 8008e3a:	f034 040f 	bics.w	r4, r4, #15
 8008e3e:	d073      	beq.n	8008f28 <_strtod_l+0x518>
 8008e40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e44:	dd49      	ble.n	8008eda <_strtod_l+0x4ca>
 8008e46:	2400      	movs	r4, #0
 8008e48:	46a0      	mov	r8, r4
 8008e4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e4c:	46a1      	mov	r9, r4
 8008e4e:	9a05      	ldr	r2, [sp, #20]
 8008e50:	f8df b140 	ldr.w	fp, [pc, #320]	@ 8008f94 <_strtod_l+0x584>
 8008e54:	2322      	movs	r3, #34	@ 0x22
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	f04f 0a00 	mov.w	sl, #0
 8008e5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f43f ae0f 	beq.w	8008a82 <_strtod_l+0x72>
 8008e64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e66:	9805      	ldr	r0, [sp, #20]
 8008e68:	f7ff f94e 	bl	8008108 <_Bfree>
 8008e6c:	9805      	ldr	r0, [sp, #20]
 8008e6e:	4649      	mov	r1, r9
 8008e70:	f7ff f94a 	bl	8008108 <_Bfree>
 8008e74:	9805      	ldr	r0, [sp, #20]
 8008e76:	4641      	mov	r1, r8
 8008e78:	f7ff f946 	bl	8008108 <_Bfree>
 8008e7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e7e:	9805      	ldr	r0, [sp, #20]
 8008e80:	f7ff f942 	bl	8008108 <_Bfree>
 8008e84:	9805      	ldr	r0, [sp, #20]
 8008e86:	4621      	mov	r1, r4
 8008e88:	f7ff f93e 	bl	8008108 <_Bfree>
 8008e8c:	e5f9      	b.n	8008a82 <_strtod_l+0x72>
 8008e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008e94:	4293      	cmp	r3, r2
 8008e96:	dbbc      	blt.n	8008e12 <_strtod_l+0x402>
 8008e98:	4c40      	ldr	r4, [pc, #256]	@ (8008f9c <_strtod_l+0x58c>)
 8008e9a:	f1c5 050f 	rsb	r5, r5, #15
 8008e9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008ea2:	4652      	mov	r2, sl
 8008ea4:	465b      	mov	r3, fp
 8008ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eaa:	f7f7 fb7d 	bl	80005a8 <__aeabi_dmul>
 8008eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb0:	1b5d      	subs	r5, r3, r5
 8008eb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008eb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008eba:	e791      	b.n	8008de0 <_strtod_l+0x3d0>
 8008ebc:	3316      	adds	r3, #22
 8008ebe:	dba8      	blt.n	8008e12 <_strtod_l+0x402>
 8008ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ec2:	eba3 0808 	sub.w	r8, r3, r8
 8008ec6:	4b35      	ldr	r3, [pc, #212]	@ (8008f9c <_strtod_l+0x58c>)
 8008ec8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008ecc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	f7f7 fc92 	bl	80007fc <__aeabi_ddiv>
 8008ed8:	e75d      	b.n	8008d96 <_strtod_l+0x386>
 8008eda:	2300      	movs	r3, #0
 8008edc:	4f30      	ldr	r7, [pc, #192]	@ (8008fa0 <_strtod_l+0x590>)
 8008ede:	1124      	asrs	r4, r4, #4
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	4659      	mov	r1, fp
 8008ee4:	461e      	mov	r6, r3
 8008ee6:	2c01      	cmp	r4, #1
 8008ee8:	dc21      	bgt.n	8008f2e <_strtod_l+0x51e>
 8008eea:	b10b      	cbz	r3, 8008ef0 <_strtod_l+0x4e0>
 8008eec:	4682      	mov	sl, r0
 8008eee:	468b      	mov	fp, r1
 8008ef0:	492b      	ldr	r1, [pc, #172]	@ (8008fa0 <_strtod_l+0x590>)
 8008ef2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008ef6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008efa:	4652      	mov	r2, sl
 8008efc:	465b      	mov	r3, fp
 8008efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f02:	f7f7 fb51 	bl	80005a8 <__aeabi_dmul>
 8008f06:	4b23      	ldr	r3, [pc, #140]	@ (8008f94 <_strtod_l+0x584>)
 8008f08:	460a      	mov	r2, r1
 8008f0a:	400b      	ands	r3, r1
 8008f0c:	4925      	ldr	r1, [pc, #148]	@ (8008fa4 <_strtod_l+0x594>)
 8008f0e:	428b      	cmp	r3, r1
 8008f10:	4682      	mov	sl, r0
 8008f12:	d898      	bhi.n	8008e46 <_strtod_l+0x436>
 8008f14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f18:	428b      	cmp	r3, r1
 8008f1a:	bf86      	itte	hi
 8008f1c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008fa8 <_strtod_l+0x598>
 8008f20:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008f24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9308      	str	r3, [sp, #32]
 8008f2c:	e076      	b.n	800901c <_strtod_l+0x60c>
 8008f2e:	07e2      	lsls	r2, r4, #31
 8008f30:	d504      	bpl.n	8008f3c <_strtod_l+0x52c>
 8008f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f36:	f7f7 fb37 	bl	80005a8 <__aeabi_dmul>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	3601      	adds	r6, #1
 8008f3e:	1064      	asrs	r4, r4, #1
 8008f40:	3708      	adds	r7, #8
 8008f42:	e7d0      	b.n	8008ee6 <_strtod_l+0x4d6>
 8008f44:	d0f0      	beq.n	8008f28 <_strtod_l+0x518>
 8008f46:	4264      	negs	r4, r4
 8008f48:	f014 020f 	ands.w	r2, r4, #15
 8008f4c:	d00a      	beq.n	8008f64 <_strtod_l+0x554>
 8008f4e:	4b13      	ldr	r3, [pc, #76]	@ (8008f9c <_strtod_l+0x58c>)
 8008f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f54:	4650      	mov	r0, sl
 8008f56:	4659      	mov	r1, fp
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	f7f7 fc4e 	bl	80007fc <__aeabi_ddiv>
 8008f60:	4682      	mov	sl, r0
 8008f62:	468b      	mov	fp, r1
 8008f64:	1124      	asrs	r4, r4, #4
 8008f66:	d0df      	beq.n	8008f28 <_strtod_l+0x518>
 8008f68:	2c1f      	cmp	r4, #31
 8008f6a:	dd1f      	ble.n	8008fac <_strtod_l+0x59c>
 8008f6c:	2400      	movs	r4, #0
 8008f6e:	46a0      	mov	r8, r4
 8008f70:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f72:	46a1      	mov	r9, r4
 8008f74:	9a05      	ldr	r2, [sp, #20]
 8008f76:	2322      	movs	r3, #34	@ 0x22
 8008f78:	f04f 0a00 	mov.w	sl, #0
 8008f7c:	f04f 0b00 	mov.w	fp, #0
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	e76b      	b.n	8008e5c <_strtod_l+0x44c>
 8008f84:	0800aa81 	.word	0x0800aa81
 8008f88:	0800ad48 	.word	0x0800ad48
 8008f8c:	0800aa79 	.word	0x0800aa79
 8008f90:	0800aab0 	.word	0x0800aab0
 8008f94:	7ff00000 	.word	0x7ff00000
 8008f98:	0800abe9 	.word	0x0800abe9
 8008f9c:	0800ac80 	.word	0x0800ac80
 8008fa0:	0800ac58 	.word	0x0800ac58
 8008fa4:	7ca00000 	.word	0x7ca00000
 8008fa8:	7fefffff 	.word	0x7fefffff
 8008fac:	f014 0310 	ands.w	r3, r4, #16
 8008fb0:	bf18      	it	ne
 8008fb2:	236a      	movne	r3, #106	@ 0x6a
 8008fb4:	4e78      	ldr	r6, [pc, #480]	@ (8009198 <_strtod_l+0x788>)
 8008fb6:	9308      	str	r3, [sp, #32]
 8008fb8:	4650      	mov	r0, sl
 8008fba:	4659      	mov	r1, fp
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	07e7      	lsls	r7, r4, #31
 8008fc0:	d504      	bpl.n	8008fcc <_strtod_l+0x5bc>
 8008fc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fc6:	f7f7 faef 	bl	80005a8 <__aeabi_dmul>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	1064      	asrs	r4, r4, #1
 8008fce:	f106 0608 	add.w	r6, r6, #8
 8008fd2:	d1f4      	bne.n	8008fbe <_strtod_l+0x5ae>
 8008fd4:	b10b      	cbz	r3, 8008fda <_strtod_l+0x5ca>
 8008fd6:	4682      	mov	sl, r0
 8008fd8:	468b      	mov	fp, r1
 8008fda:	9b08      	ldr	r3, [sp, #32]
 8008fdc:	b1b3      	cbz	r3, 800900c <_strtod_l+0x5fc>
 8008fde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fe2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	4659      	mov	r1, fp
 8008fea:	dd0f      	ble.n	800900c <_strtod_l+0x5fc>
 8008fec:	2b1f      	cmp	r3, #31
 8008fee:	dd58      	ble.n	80090a2 <_strtod_l+0x692>
 8008ff0:	2b34      	cmp	r3, #52	@ 0x34
 8008ff2:	bfde      	ittt	le
 8008ff4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008ff8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008ffc:	4093      	lslle	r3, r2
 8008ffe:	f04f 0a00 	mov.w	sl, #0
 8009002:	bfcc      	ite	gt
 8009004:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009008:	ea03 0b01 	andle.w	fp, r3, r1
 800900c:	2200      	movs	r2, #0
 800900e:	2300      	movs	r3, #0
 8009010:	4650      	mov	r0, sl
 8009012:	4659      	mov	r1, fp
 8009014:	f7f7 fd30 	bl	8000a78 <__aeabi_dcmpeq>
 8009018:	2800      	cmp	r0, #0
 800901a:	d1a7      	bne.n	8008f6c <_strtod_l+0x55c>
 800901c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009022:	9805      	ldr	r0, [sp, #20]
 8009024:	462b      	mov	r3, r5
 8009026:	464a      	mov	r2, r9
 8009028:	f7ff f8d6 	bl	80081d8 <__s2b>
 800902c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800902e:	2800      	cmp	r0, #0
 8009030:	f43f af09 	beq.w	8008e46 <_strtod_l+0x436>
 8009034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009036:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009038:	2a00      	cmp	r2, #0
 800903a:	eba3 0308 	sub.w	r3, r3, r8
 800903e:	bfa8      	it	ge
 8009040:	2300      	movge	r3, #0
 8009042:	9312      	str	r3, [sp, #72]	@ 0x48
 8009044:	2400      	movs	r4, #0
 8009046:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800904a:	9316      	str	r3, [sp, #88]	@ 0x58
 800904c:	46a0      	mov	r8, r4
 800904e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009050:	9805      	ldr	r0, [sp, #20]
 8009052:	6859      	ldr	r1, [r3, #4]
 8009054:	f7ff f818 	bl	8008088 <_Balloc>
 8009058:	4681      	mov	r9, r0
 800905a:	2800      	cmp	r0, #0
 800905c:	f43f aef7 	beq.w	8008e4e <_strtod_l+0x43e>
 8009060:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	3202      	adds	r2, #2
 8009066:	f103 010c 	add.w	r1, r3, #12
 800906a:	0092      	lsls	r2, r2, #2
 800906c:	300c      	adds	r0, #12
 800906e:	f000 ff25 	bl	8009ebc <memcpy>
 8009072:	ab1c      	add	r3, sp, #112	@ 0x70
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	9805      	ldr	r0, [sp, #20]
 800907c:	4652      	mov	r2, sl
 800907e:	465b      	mov	r3, fp
 8009080:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009084:	f7ff fbd4 	bl	8008830 <__d2b>
 8009088:	901a      	str	r0, [sp, #104]	@ 0x68
 800908a:	2800      	cmp	r0, #0
 800908c:	f43f aedf 	beq.w	8008e4e <_strtod_l+0x43e>
 8009090:	9805      	ldr	r0, [sp, #20]
 8009092:	2101      	movs	r1, #1
 8009094:	f7ff f936 	bl	8008304 <__i2b>
 8009098:	4680      	mov	r8, r0
 800909a:	b948      	cbnz	r0, 80090b0 <_strtod_l+0x6a0>
 800909c:	f04f 0800 	mov.w	r8, #0
 80090a0:	e6d5      	b.n	8008e4e <_strtod_l+0x43e>
 80090a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090a6:	fa02 f303 	lsl.w	r3, r2, r3
 80090aa:	ea03 0a0a 	and.w	sl, r3, sl
 80090ae:	e7ad      	b.n	800900c <_strtod_l+0x5fc>
 80090b0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80090b2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	bfab      	itete	ge
 80090b8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80090ba:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80090bc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80090be:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80090c0:	bfac      	ite	ge
 80090c2:	18ef      	addge	r7, r5, r3
 80090c4:	1b5e      	sublt	r6, r3, r5
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	1aed      	subs	r5, r5, r3
 80090ca:	4415      	add	r5, r2
 80090cc:	4b33      	ldr	r3, [pc, #204]	@ (800919c <_strtod_l+0x78c>)
 80090ce:	3d01      	subs	r5, #1
 80090d0:	429d      	cmp	r5, r3
 80090d2:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80090d6:	da50      	bge.n	800917a <_strtod_l+0x76a>
 80090d8:	1b5b      	subs	r3, r3, r5
 80090da:	2b1f      	cmp	r3, #31
 80090dc:	eba2 0203 	sub.w	r2, r2, r3
 80090e0:	f04f 0101 	mov.w	r1, #1
 80090e4:	dc3d      	bgt.n	8009162 <_strtod_l+0x752>
 80090e6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090ec:	2300      	movs	r3, #0
 80090ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80090f0:	18bd      	adds	r5, r7, r2
 80090f2:	9b08      	ldr	r3, [sp, #32]
 80090f4:	42af      	cmp	r7, r5
 80090f6:	4416      	add	r6, r2
 80090f8:	441e      	add	r6, r3
 80090fa:	463b      	mov	r3, r7
 80090fc:	bfa8      	it	ge
 80090fe:	462b      	movge	r3, r5
 8009100:	42b3      	cmp	r3, r6
 8009102:	bfa8      	it	ge
 8009104:	4633      	movge	r3, r6
 8009106:	2b00      	cmp	r3, #0
 8009108:	bfc2      	ittt	gt
 800910a:	1aed      	subgt	r5, r5, r3
 800910c:	1af6      	subgt	r6, r6, r3
 800910e:	1aff      	subgt	r7, r7, r3
 8009110:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009112:	2b00      	cmp	r3, #0
 8009114:	dd16      	ble.n	8009144 <_strtod_l+0x734>
 8009116:	4641      	mov	r1, r8
 8009118:	9805      	ldr	r0, [sp, #20]
 800911a:	461a      	mov	r2, r3
 800911c:	f7ff f9aa 	bl	8008474 <__pow5mult>
 8009120:	4680      	mov	r8, r0
 8009122:	2800      	cmp	r0, #0
 8009124:	d0ba      	beq.n	800909c <_strtod_l+0x68c>
 8009126:	4601      	mov	r1, r0
 8009128:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800912a:	9805      	ldr	r0, [sp, #20]
 800912c:	f7ff f900 	bl	8008330 <__multiply>
 8009130:	900a      	str	r0, [sp, #40]	@ 0x28
 8009132:	2800      	cmp	r0, #0
 8009134:	f43f ae8b 	beq.w	8008e4e <_strtod_l+0x43e>
 8009138:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800913a:	9805      	ldr	r0, [sp, #20]
 800913c:	f7fe ffe4 	bl	8008108 <_Bfree>
 8009140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009142:	931a      	str	r3, [sp, #104]	@ 0x68
 8009144:	2d00      	cmp	r5, #0
 8009146:	dc1d      	bgt.n	8009184 <_strtod_l+0x774>
 8009148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	dd28      	ble.n	80091a0 <_strtod_l+0x790>
 800914e:	4649      	mov	r1, r9
 8009150:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009152:	9805      	ldr	r0, [sp, #20]
 8009154:	f7ff f98e 	bl	8008474 <__pow5mult>
 8009158:	4681      	mov	r9, r0
 800915a:	bb08      	cbnz	r0, 80091a0 <_strtod_l+0x790>
 800915c:	f04f 0900 	mov.w	r9, #0
 8009160:	e675      	b.n	8008e4e <_strtod_l+0x43e>
 8009162:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009166:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800916a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800916e:	35e2      	adds	r5, #226	@ 0xe2
 8009170:	fa01 f305 	lsl.w	r3, r1, r5
 8009174:	9310      	str	r3, [sp, #64]	@ 0x40
 8009176:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009178:	e7ba      	b.n	80090f0 <_strtod_l+0x6e0>
 800917a:	2300      	movs	r3, #0
 800917c:	9310      	str	r3, [sp, #64]	@ 0x40
 800917e:	2301      	movs	r3, #1
 8009180:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009182:	e7b5      	b.n	80090f0 <_strtod_l+0x6e0>
 8009184:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009186:	9805      	ldr	r0, [sp, #20]
 8009188:	462a      	mov	r2, r5
 800918a:	f7ff f9cd 	bl	8008528 <__lshift>
 800918e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009190:	2800      	cmp	r0, #0
 8009192:	d1d9      	bne.n	8009148 <_strtod_l+0x738>
 8009194:	e65b      	b.n	8008e4e <_strtod_l+0x43e>
 8009196:	bf00      	nop
 8009198:	0800ad70 	.word	0x0800ad70
 800919c:	fffffc02 	.word	0xfffffc02
 80091a0:	2e00      	cmp	r6, #0
 80091a2:	dd07      	ble.n	80091b4 <_strtod_l+0x7a4>
 80091a4:	4649      	mov	r1, r9
 80091a6:	9805      	ldr	r0, [sp, #20]
 80091a8:	4632      	mov	r2, r6
 80091aa:	f7ff f9bd 	bl	8008528 <__lshift>
 80091ae:	4681      	mov	r9, r0
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d0d3      	beq.n	800915c <_strtod_l+0x74c>
 80091b4:	2f00      	cmp	r7, #0
 80091b6:	dd08      	ble.n	80091ca <_strtod_l+0x7ba>
 80091b8:	4641      	mov	r1, r8
 80091ba:	9805      	ldr	r0, [sp, #20]
 80091bc:	463a      	mov	r2, r7
 80091be:	f7ff f9b3 	bl	8008528 <__lshift>
 80091c2:	4680      	mov	r8, r0
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f43f ae42 	beq.w	8008e4e <_strtod_l+0x43e>
 80091ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091cc:	9805      	ldr	r0, [sp, #20]
 80091ce:	464a      	mov	r2, r9
 80091d0:	f7ff fa32 	bl	8008638 <__mdiff>
 80091d4:	4604      	mov	r4, r0
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f43f ae39 	beq.w	8008e4e <_strtod_l+0x43e>
 80091dc:	68c3      	ldr	r3, [r0, #12]
 80091de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091e0:	2300      	movs	r3, #0
 80091e2:	60c3      	str	r3, [r0, #12]
 80091e4:	4641      	mov	r1, r8
 80091e6:	f7ff fa0b 	bl	8008600 <__mcmp>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	da3d      	bge.n	800926a <_strtod_l+0x85a>
 80091ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091f0:	ea53 030a 	orrs.w	r3, r3, sl
 80091f4:	d163      	bne.n	80092be <_strtod_l+0x8ae>
 80091f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d15f      	bne.n	80092be <_strtod_l+0x8ae>
 80091fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009202:	0d1b      	lsrs	r3, r3, #20
 8009204:	051b      	lsls	r3, r3, #20
 8009206:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800920a:	d958      	bls.n	80092be <_strtod_l+0x8ae>
 800920c:	6963      	ldr	r3, [r4, #20]
 800920e:	b913      	cbnz	r3, 8009216 <_strtod_l+0x806>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	2b01      	cmp	r3, #1
 8009214:	dd53      	ble.n	80092be <_strtod_l+0x8ae>
 8009216:	4621      	mov	r1, r4
 8009218:	2201      	movs	r2, #1
 800921a:	9805      	ldr	r0, [sp, #20]
 800921c:	f7ff f984 	bl	8008528 <__lshift>
 8009220:	4641      	mov	r1, r8
 8009222:	4604      	mov	r4, r0
 8009224:	f7ff f9ec 	bl	8008600 <__mcmp>
 8009228:	2800      	cmp	r0, #0
 800922a:	dd48      	ble.n	80092be <_strtod_l+0x8ae>
 800922c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009230:	9a08      	ldr	r2, [sp, #32]
 8009232:	0d1b      	lsrs	r3, r3, #20
 8009234:	051b      	lsls	r3, r3, #20
 8009236:	2a00      	cmp	r2, #0
 8009238:	d062      	beq.n	8009300 <_strtod_l+0x8f0>
 800923a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800923e:	d85f      	bhi.n	8009300 <_strtod_l+0x8f0>
 8009240:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009244:	f67f ae96 	bls.w	8008f74 <_strtod_l+0x564>
 8009248:	4ba3      	ldr	r3, [pc, #652]	@ (80094d8 <_strtod_l+0xac8>)
 800924a:	4650      	mov	r0, sl
 800924c:	4659      	mov	r1, fp
 800924e:	2200      	movs	r2, #0
 8009250:	f7f7 f9aa 	bl	80005a8 <__aeabi_dmul>
 8009254:	4ba1      	ldr	r3, [pc, #644]	@ (80094dc <_strtod_l+0xacc>)
 8009256:	400b      	ands	r3, r1
 8009258:	4682      	mov	sl, r0
 800925a:	468b      	mov	fp, r1
 800925c:	2b00      	cmp	r3, #0
 800925e:	f47f ae01 	bne.w	8008e64 <_strtod_l+0x454>
 8009262:	9a05      	ldr	r2, [sp, #20]
 8009264:	2322      	movs	r3, #34	@ 0x22
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	e5fc      	b.n	8008e64 <_strtod_l+0x454>
 800926a:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800926e:	d165      	bne.n	800933c <_strtod_l+0x92c>
 8009270:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009272:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009276:	b35a      	cbz	r2, 80092d0 <_strtod_l+0x8c0>
 8009278:	4a99      	ldr	r2, [pc, #612]	@ (80094e0 <_strtod_l+0xad0>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d12b      	bne.n	80092d6 <_strtod_l+0x8c6>
 800927e:	9b08      	ldr	r3, [sp, #32]
 8009280:	4651      	mov	r1, sl
 8009282:	b303      	cbz	r3, 80092c6 <_strtod_l+0x8b6>
 8009284:	4b95      	ldr	r3, [pc, #596]	@ (80094dc <_strtod_l+0xacc>)
 8009286:	465a      	mov	r2, fp
 8009288:	4013      	ands	r3, r2
 800928a:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800928e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009292:	d81b      	bhi.n	80092cc <_strtod_l+0x8bc>
 8009294:	0d1b      	lsrs	r3, r3, #20
 8009296:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800929a:	fa02 f303 	lsl.w	r3, r2, r3
 800929e:	4299      	cmp	r1, r3
 80092a0:	d119      	bne.n	80092d6 <_strtod_l+0x8c6>
 80092a2:	4b90      	ldr	r3, [pc, #576]	@ (80094e4 <_strtod_l+0xad4>)
 80092a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d102      	bne.n	80092b0 <_strtod_l+0x8a0>
 80092aa:	3101      	adds	r1, #1
 80092ac:	f43f adcf 	beq.w	8008e4e <_strtod_l+0x43e>
 80092b0:	4b8a      	ldr	r3, [pc, #552]	@ (80094dc <_strtod_l+0xacc>)
 80092b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092b4:	401a      	ands	r2, r3
 80092b6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80092ba:	f04f 0a00 	mov.w	sl, #0
 80092be:	9b08      	ldr	r3, [sp, #32]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1c1      	bne.n	8009248 <_strtod_l+0x838>
 80092c4:	e5ce      	b.n	8008e64 <_strtod_l+0x454>
 80092c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092ca:	e7e8      	b.n	800929e <_strtod_l+0x88e>
 80092cc:	4613      	mov	r3, r2
 80092ce:	e7e6      	b.n	800929e <_strtod_l+0x88e>
 80092d0:	ea53 030a 	orrs.w	r3, r3, sl
 80092d4:	d0aa      	beq.n	800922c <_strtod_l+0x81c>
 80092d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092d8:	b1db      	cbz	r3, 8009312 <_strtod_l+0x902>
 80092da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092dc:	4213      	tst	r3, r2
 80092de:	d0ee      	beq.n	80092be <_strtod_l+0x8ae>
 80092e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e2:	9a08      	ldr	r2, [sp, #32]
 80092e4:	4650      	mov	r0, sl
 80092e6:	4659      	mov	r1, fp
 80092e8:	b1bb      	cbz	r3, 800931a <_strtod_l+0x90a>
 80092ea:	f7ff fb6d 	bl	80089c8 <sulp>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092f6:	f7f6 ffa1 	bl	800023c <__adddf3>
 80092fa:	4682      	mov	sl, r0
 80092fc:	468b      	mov	fp, r1
 80092fe:	e7de      	b.n	80092be <_strtod_l+0x8ae>
 8009300:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009304:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009308:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800930c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009310:	e7d5      	b.n	80092be <_strtod_l+0x8ae>
 8009312:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009314:	ea13 0f0a 	tst.w	r3, sl
 8009318:	e7e1      	b.n	80092de <_strtod_l+0x8ce>
 800931a:	f7ff fb55 	bl	80089c8 <sulp>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009326:	f7f6 ff87 	bl	8000238 <__aeabi_dsub>
 800932a:	2200      	movs	r2, #0
 800932c:	2300      	movs	r3, #0
 800932e:	4682      	mov	sl, r0
 8009330:	468b      	mov	fp, r1
 8009332:	f7f7 fba1 	bl	8000a78 <__aeabi_dcmpeq>
 8009336:	2800      	cmp	r0, #0
 8009338:	d0c1      	beq.n	80092be <_strtod_l+0x8ae>
 800933a:	e61b      	b.n	8008f74 <_strtod_l+0x564>
 800933c:	4641      	mov	r1, r8
 800933e:	4620      	mov	r0, r4
 8009340:	f7ff face 	bl	80088e0 <__ratio>
 8009344:	2200      	movs	r2, #0
 8009346:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800934a:	4606      	mov	r6, r0
 800934c:	460f      	mov	r7, r1
 800934e:	f7f7 fba7 	bl	8000aa0 <__aeabi_dcmple>
 8009352:	2800      	cmp	r0, #0
 8009354:	d06d      	beq.n	8009432 <_strtod_l+0xa22>
 8009356:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d178      	bne.n	800944e <_strtod_l+0xa3e>
 800935c:	f1ba 0f00 	cmp.w	sl, #0
 8009360:	d156      	bne.n	8009410 <_strtod_l+0xa00>
 8009362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009368:	2b00      	cmp	r3, #0
 800936a:	d158      	bne.n	800941e <_strtod_l+0xa0e>
 800936c:	4b5e      	ldr	r3, [pc, #376]	@ (80094e8 <_strtod_l+0xad8>)
 800936e:	2200      	movs	r2, #0
 8009370:	4630      	mov	r0, r6
 8009372:	4639      	mov	r1, r7
 8009374:	f7f7 fb8a 	bl	8000a8c <__aeabi_dcmplt>
 8009378:	2800      	cmp	r0, #0
 800937a:	d157      	bne.n	800942c <_strtod_l+0xa1c>
 800937c:	4630      	mov	r0, r6
 800937e:	4639      	mov	r1, r7
 8009380:	4b5a      	ldr	r3, [pc, #360]	@ (80094ec <_strtod_l+0xadc>)
 8009382:	2200      	movs	r2, #0
 8009384:	f7f7 f910 	bl	80005a8 <__aeabi_dmul>
 8009388:	4606      	mov	r6, r0
 800938a:	460f      	mov	r7, r1
 800938c:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009390:	9606      	str	r6, [sp, #24]
 8009392:	9307      	str	r3, [sp, #28]
 8009394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009398:	4d50      	ldr	r5, [pc, #320]	@ (80094dc <_strtod_l+0xacc>)
 800939a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800939e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093a0:	401d      	ands	r5, r3
 80093a2:	4b53      	ldr	r3, [pc, #332]	@ (80094f0 <_strtod_l+0xae0>)
 80093a4:	429d      	cmp	r5, r3
 80093a6:	f040 80a9 	bne.w	80094fc <_strtod_l+0xaec>
 80093aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ac:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80093b0:	4650      	mov	r0, sl
 80093b2:	4659      	mov	r1, fp
 80093b4:	f7ff f9d2 	bl	800875c <__ulp>
 80093b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093bc:	f7f7 f8f4 	bl	80005a8 <__aeabi_dmul>
 80093c0:	4652      	mov	r2, sl
 80093c2:	465b      	mov	r3, fp
 80093c4:	f7f6 ff3a 	bl	800023c <__adddf3>
 80093c8:	460b      	mov	r3, r1
 80093ca:	4944      	ldr	r1, [pc, #272]	@ (80094dc <_strtod_l+0xacc>)
 80093cc:	4a49      	ldr	r2, [pc, #292]	@ (80094f4 <_strtod_l+0xae4>)
 80093ce:	4019      	ands	r1, r3
 80093d0:	4291      	cmp	r1, r2
 80093d2:	4682      	mov	sl, r0
 80093d4:	d942      	bls.n	800945c <_strtod_l+0xa4c>
 80093d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093d8:	4b42      	ldr	r3, [pc, #264]	@ (80094e4 <_strtod_l+0xad4>)
 80093da:	429a      	cmp	r2, r3
 80093dc:	d103      	bne.n	80093e6 <_strtod_l+0x9d6>
 80093de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093e0:	3301      	adds	r3, #1
 80093e2:	f43f ad34 	beq.w	8008e4e <_strtod_l+0x43e>
 80093e6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80094e4 <_strtod_l+0xad4>
 80093ea:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80093ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093f0:	9805      	ldr	r0, [sp, #20]
 80093f2:	f7fe fe89 	bl	8008108 <_Bfree>
 80093f6:	9805      	ldr	r0, [sp, #20]
 80093f8:	4649      	mov	r1, r9
 80093fa:	f7fe fe85 	bl	8008108 <_Bfree>
 80093fe:	9805      	ldr	r0, [sp, #20]
 8009400:	4641      	mov	r1, r8
 8009402:	f7fe fe81 	bl	8008108 <_Bfree>
 8009406:	9805      	ldr	r0, [sp, #20]
 8009408:	4621      	mov	r1, r4
 800940a:	f7fe fe7d 	bl	8008108 <_Bfree>
 800940e:	e61e      	b.n	800904e <_strtod_l+0x63e>
 8009410:	f1ba 0f01 	cmp.w	sl, #1
 8009414:	d103      	bne.n	800941e <_strtod_l+0xa0e>
 8009416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009418:	2b00      	cmp	r3, #0
 800941a:	f43f adab 	beq.w	8008f74 <_strtod_l+0x564>
 800941e:	4b36      	ldr	r3, [pc, #216]	@ (80094f8 <_strtod_l+0xae8>)
 8009420:	4f31      	ldr	r7, [pc, #196]	@ (80094e8 <_strtod_l+0xad8>)
 8009422:	2200      	movs	r2, #0
 8009424:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009428:	2600      	movs	r6, #0
 800942a:	e7b3      	b.n	8009394 <_strtod_l+0x984>
 800942c:	4f2f      	ldr	r7, [pc, #188]	@ (80094ec <_strtod_l+0xadc>)
 800942e:	2600      	movs	r6, #0
 8009430:	e7ac      	b.n	800938c <_strtod_l+0x97c>
 8009432:	4b2e      	ldr	r3, [pc, #184]	@ (80094ec <_strtod_l+0xadc>)
 8009434:	4630      	mov	r0, r6
 8009436:	4639      	mov	r1, r7
 8009438:	2200      	movs	r2, #0
 800943a:	f7f7 f8b5 	bl	80005a8 <__aeabi_dmul>
 800943e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009440:	4606      	mov	r6, r0
 8009442:	460f      	mov	r7, r1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0a1      	beq.n	800938c <_strtod_l+0x97c>
 8009448:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800944c:	e7a2      	b.n	8009394 <_strtod_l+0x984>
 800944e:	4b26      	ldr	r3, [pc, #152]	@ (80094e8 <_strtod_l+0xad8>)
 8009450:	2200      	movs	r2, #0
 8009452:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009456:	4616      	mov	r6, r2
 8009458:	461f      	mov	r7, r3
 800945a:	e79b      	b.n	8009394 <_strtod_l+0x984>
 800945c:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009460:	9b08      	ldr	r3, [sp, #32]
 8009462:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1c1      	bne.n	80093ee <_strtod_l+0x9de>
 800946a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800946e:	0d1b      	lsrs	r3, r3, #20
 8009470:	051b      	lsls	r3, r3, #20
 8009472:	429d      	cmp	r5, r3
 8009474:	d1bb      	bne.n	80093ee <_strtod_l+0x9de>
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	f7f7 fe53 	bl	8001124 <__aeabi_d2lz>
 800947e:	f7f7 f865 	bl	800054c <__aeabi_l2d>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f6 fed5 	bl	8000238 <__aeabi_dsub>
 800948e:	460b      	mov	r3, r1
 8009490:	4602      	mov	r2, r0
 8009492:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009496:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800949a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800949c:	ea46 060a 	orr.w	r6, r6, sl
 80094a0:	431e      	orrs	r6, r3
 80094a2:	d068      	beq.n	8009576 <_strtod_l+0xb66>
 80094a4:	a308      	add	r3, pc, #32	@ (adr r3, 80094c8 <_strtod_l+0xab8>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f7 faef 	bl	8000a8c <__aeabi_dcmplt>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f47f acd8 	bne.w	8008e64 <_strtod_l+0x454>
 80094b4:	a306      	add	r3, pc, #24	@ (adr r3, 80094d0 <_strtod_l+0xac0>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094be:	f7f7 fb03 	bl	8000ac8 <__aeabi_dcmpgt>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d093      	beq.n	80093ee <_strtod_l+0x9de>
 80094c6:	e4cd      	b.n	8008e64 <_strtod_l+0x454>
 80094c8:	94a03595 	.word	0x94a03595
 80094cc:	3fdfffff 	.word	0x3fdfffff
 80094d0:	35afe535 	.word	0x35afe535
 80094d4:	3fe00000 	.word	0x3fe00000
 80094d8:	39500000 	.word	0x39500000
 80094dc:	7ff00000 	.word	0x7ff00000
 80094e0:	000fffff 	.word	0x000fffff
 80094e4:	7fefffff 	.word	0x7fefffff
 80094e8:	3ff00000 	.word	0x3ff00000
 80094ec:	3fe00000 	.word	0x3fe00000
 80094f0:	7fe00000 	.word	0x7fe00000
 80094f4:	7c9fffff 	.word	0x7c9fffff
 80094f8:	bff00000 	.word	0xbff00000
 80094fc:	9b08      	ldr	r3, [sp, #32]
 80094fe:	b323      	cbz	r3, 800954a <_strtod_l+0xb3a>
 8009500:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009504:	d821      	bhi.n	800954a <_strtod_l+0xb3a>
 8009506:	a328      	add	r3, pc, #160	@ (adr r3, 80095a8 <_strtod_l+0xb98>)
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	4630      	mov	r0, r6
 800950e:	4639      	mov	r1, r7
 8009510:	f7f7 fac6 	bl	8000aa0 <__aeabi_dcmple>
 8009514:	b1a0      	cbz	r0, 8009540 <_strtod_l+0xb30>
 8009516:	4639      	mov	r1, r7
 8009518:	4630      	mov	r0, r6
 800951a:	f7f7 fb1d 	bl	8000b58 <__aeabi_d2uiz>
 800951e:	2801      	cmp	r0, #1
 8009520:	bf38      	it	cc
 8009522:	2001      	movcc	r0, #1
 8009524:	f7f6 ffc6 	bl	80004b4 <__aeabi_ui2d>
 8009528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800952a:	4606      	mov	r6, r0
 800952c:	460f      	mov	r7, r1
 800952e:	b9fb      	cbnz	r3, 8009570 <_strtod_l+0xb60>
 8009530:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009534:	9014      	str	r0, [sp, #80]	@ 0x50
 8009536:	9315      	str	r3, [sp, #84]	@ 0x54
 8009538:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800953c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009540:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009542:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009546:	1b5b      	subs	r3, r3, r5
 8009548:	9311      	str	r3, [sp, #68]	@ 0x44
 800954a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800954e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009552:	f7ff f903 	bl	800875c <__ulp>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4650      	mov	r0, sl
 800955c:	4659      	mov	r1, fp
 800955e:	f7f7 f823 	bl	80005a8 <__aeabi_dmul>
 8009562:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009566:	f7f6 fe69 	bl	800023c <__adddf3>
 800956a:	4682      	mov	sl, r0
 800956c:	468b      	mov	fp, r1
 800956e:	e777      	b.n	8009460 <_strtod_l+0xa50>
 8009570:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009574:	e7e0      	b.n	8009538 <_strtod_l+0xb28>
 8009576:	a30e      	add	r3, pc, #56	@ (adr r3, 80095b0 <_strtod_l+0xba0>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f7f7 fa86 	bl	8000a8c <__aeabi_dcmplt>
 8009580:	e79f      	b.n	80094c2 <_strtod_l+0xab2>
 8009582:	2300      	movs	r3, #0
 8009584:	930e      	str	r3, [sp, #56]	@ 0x38
 8009586:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	f7ff ba7d 	b.w	8008a8a <_strtod_l+0x7a>
 8009590:	2a65      	cmp	r2, #101	@ 0x65
 8009592:	f43f ab76 	beq.w	8008c82 <_strtod_l+0x272>
 8009596:	2a45      	cmp	r2, #69	@ 0x45
 8009598:	f43f ab73 	beq.w	8008c82 <_strtod_l+0x272>
 800959c:	2301      	movs	r3, #1
 800959e:	f7ff bbae 	b.w	8008cfe <_strtod_l+0x2ee>
 80095a2:	bf00      	nop
 80095a4:	f3af 8000 	nop.w
 80095a8:	ffc00000 	.word	0xffc00000
 80095ac:	41dfffff 	.word	0x41dfffff
 80095b0:	94a03595 	.word	0x94a03595
 80095b4:	3fcfffff 	.word	0x3fcfffff

080095b8 <_strtod_r>:
 80095b8:	4b01      	ldr	r3, [pc, #4]	@ (80095c0 <_strtod_r+0x8>)
 80095ba:	f7ff ba29 	b.w	8008a10 <_strtod_l>
 80095be:	bf00      	nop
 80095c0:	20000074 	.word	0x20000074

080095c4 <_strtol_l.isra.0>:
 80095c4:	2b24      	cmp	r3, #36	@ 0x24
 80095c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ca:	4686      	mov	lr, r0
 80095cc:	4690      	mov	r8, r2
 80095ce:	d801      	bhi.n	80095d4 <_strtol_l.isra.0+0x10>
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d106      	bne.n	80095e2 <_strtol_l.isra.0+0x1e>
 80095d4:	f7fd fdce 	bl	8007174 <__errno>
 80095d8:	2316      	movs	r3, #22
 80095da:	6003      	str	r3, [r0, #0]
 80095dc:	2000      	movs	r0, #0
 80095de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e2:	4834      	ldr	r0, [pc, #208]	@ (80096b4 <_strtol_l.isra.0+0xf0>)
 80095e4:	460d      	mov	r5, r1
 80095e6:	462a      	mov	r2, r5
 80095e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ec:	5d06      	ldrb	r6, [r0, r4]
 80095ee:	f016 0608 	ands.w	r6, r6, #8
 80095f2:	d1f8      	bne.n	80095e6 <_strtol_l.isra.0+0x22>
 80095f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80095f6:	d110      	bne.n	800961a <_strtol_l.isra.0+0x56>
 80095f8:	782c      	ldrb	r4, [r5, #0]
 80095fa:	2601      	movs	r6, #1
 80095fc:	1c95      	adds	r5, r2, #2
 80095fe:	f033 0210 	bics.w	r2, r3, #16
 8009602:	d115      	bne.n	8009630 <_strtol_l.isra.0+0x6c>
 8009604:	2c30      	cmp	r4, #48	@ 0x30
 8009606:	d10d      	bne.n	8009624 <_strtol_l.isra.0+0x60>
 8009608:	782a      	ldrb	r2, [r5, #0]
 800960a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800960e:	2a58      	cmp	r2, #88	@ 0x58
 8009610:	d108      	bne.n	8009624 <_strtol_l.isra.0+0x60>
 8009612:	786c      	ldrb	r4, [r5, #1]
 8009614:	3502      	adds	r5, #2
 8009616:	2310      	movs	r3, #16
 8009618:	e00a      	b.n	8009630 <_strtol_l.isra.0+0x6c>
 800961a:	2c2b      	cmp	r4, #43	@ 0x2b
 800961c:	bf04      	itt	eq
 800961e:	782c      	ldrbeq	r4, [r5, #0]
 8009620:	1c95      	addeq	r5, r2, #2
 8009622:	e7ec      	b.n	80095fe <_strtol_l.isra.0+0x3a>
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1f6      	bne.n	8009616 <_strtol_l.isra.0+0x52>
 8009628:	2c30      	cmp	r4, #48	@ 0x30
 800962a:	bf14      	ite	ne
 800962c:	230a      	movne	r3, #10
 800962e:	2308      	moveq	r3, #8
 8009630:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009634:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009638:	2200      	movs	r2, #0
 800963a:	fbbc f9f3 	udiv	r9, ip, r3
 800963e:	4610      	mov	r0, r2
 8009640:	fb03 ca19 	mls	sl, r3, r9, ip
 8009644:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009648:	2f09      	cmp	r7, #9
 800964a:	d80f      	bhi.n	800966c <_strtol_l.isra.0+0xa8>
 800964c:	463c      	mov	r4, r7
 800964e:	42a3      	cmp	r3, r4
 8009650:	dd1b      	ble.n	800968a <_strtol_l.isra.0+0xc6>
 8009652:	1c57      	adds	r7, r2, #1
 8009654:	d007      	beq.n	8009666 <_strtol_l.isra.0+0xa2>
 8009656:	4581      	cmp	r9, r0
 8009658:	d314      	bcc.n	8009684 <_strtol_l.isra.0+0xc0>
 800965a:	d101      	bne.n	8009660 <_strtol_l.isra.0+0x9c>
 800965c:	45a2      	cmp	sl, r4
 800965e:	db11      	blt.n	8009684 <_strtol_l.isra.0+0xc0>
 8009660:	fb00 4003 	mla	r0, r0, r3, r4
 8009664:	2201      	movs	r2, #1
 8009666:	f815 4b01 	ldrb.w	r4, [r5], #1
 800966a:	e7eb      	b.n	8009644 <_strtol_l.isra.0+0x80>
 800966c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009670:	2f19      	cmp	r7, #25
 8009672:	d801      	bhi.n	8009678 <_strtol_l.isra.0+0xb4>
 8009674:	3c37      	subs	r4, #55	@ 0x37
 8009676:	e7ea      	b.n	800964e <_strtol_l.isra.0+0x8a>
 8009678:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800967c:	2f19      	cmp	r7, #25
 800967e:	d804      	bhi.n	800968a <_strtol_l.isra.0+0xc6>
 8009680:	3c57      	subs	r4, #87	@ 0x57
 8009682:	e7e4      	b.n	800964e <_strtol_l.isra.0+0x8a>
 8009684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009688:	e7ed      	b.n	8009666 <_strtol_l.isra.0+0xa2>
 800968a:	1c53      	adds	r3, r2, #1
 800968c:	d108      	bne.n	80096a0 <_strtol_l.isra.0+0xdc>
 800968e:	2322      	movs	r3, #34	@ 0x22
 8009690:	f8ce 3000 	str.w	r3, [lr]
 8009694:	4660      	mov	r0, ip
 8009696:	f1b8 0f00 	cmp.w	r8, #0
 800969a:	d0a0      	beq.n	80095de <_strtol_l.isra.0+0x1a>
 800969c:	1e69      	subs	r1, r5, #1
 800969e:	e006      	b.n	80096ae <_strtol_l.isra.0+0xea>
 80096a0:	b106      	cbz	r6, 80096a4 <_strtol_l.isra.0+0xe0>
 80096a2:	4240      	negs	r0, r0
 80096a4:	f1b8 0f00 	cmp.w	r8, #0
 80096a8:	d099      	beq.n	80095de <_strtol_l.isra.0+0x1a>
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	d1f6      	bne.n	800969c <_strtol_l.isra.0+0xd8>
 80096ae:	f8c8 1000 	str.w	r1, [r8]
 80096b2:	e794      	b.n	80095de <_strtol_l.isra.0+0x1a>
 80096b4:	0800ad99 	.word	0x0800ad99

080096b8 <_strtol_r>:
 80096b8:	f7ff bf84 	b.w	80095c4 <_strtol_l.isra.0>

080096bc <__ssputs_r>:
 80096bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c0:	688e      	ldr	r6, [r1, #8]
 80096c2:	461f      	mov	r7, r3
 80096c4:	42be      	cmp	r6, r7
 80096c6:	680b      	ldr	r3, [r1, #0]
 80096c8:	4682      	mov	sl, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	4690      	mov	r8, r2
 80096ce:	d82d      	bhi.n	800972c <__ssputs_r+0x70>
 80096d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096d8:	d026      	beq.n	8009728 <__ssputs_r+0x6c>
 80096da:	6965      	ldr	r5, [r4, #20]
 80096dc:	6909      	ldr	r1, [r1, #16]
 80096de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096e2:	eba3 0901 	sub.w	r9, r3, r1
 80096e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096ea:	1c7b      	adds	r3, r7, #1
 80096ec:	444b      	add	r3, r9
 80096ee:	106d      	asrs	r5, r5, #1
 80096f0:	429d      	cmp	r5, r3
 80096f2:	bf38      	it	cc
 80096f4:	461d      	movcc	r5, r3
 80096f6:	0553      	lsls	r3, r2, #21
 80096f8:	d527      	bpl.n	800974a <__ssputs_r+0x8e>
 80096fa:	4629      	mov	r1, r5
 80096fc:	f7fe fc38 	bl	8007f70 <_malloc_r>
 8009700:	4606      	mov	r6, r0
 8009702:	b360      	cbz	r0, 800975e <__ssputs_r+0xa2>
 8009704:	6921      	ldr	r1, [r4, #16]
 8009706:	464a      	mov	r2, r9
 8009708:	f000 fbd8 	bl	8009ebc <memcpy>
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009716:	81a3      	strh	r3, [r4, #12]
 8009718:	6126      	str	r6, [r4, #16]
 800971a:	6165      	str	r5, [r4, #20]
 800971c:	444e      	add	r6, r9
 800971e:	eba5 0509 	sub.w	r5, r5, r9
 8009722:	6026      	str	r6, [r4, #0]
 8009724:	60a5      	str	r5, [r4, #8]
 8009726:	463e      	mov	r6, r7
 8009728:	42be      	cmp	r6, r7
 800972a:	d900      	bls.n	800972e <__ssputs_r+0x72>
 800972c:	463e      	mov	r6, r7
 800972e:	6820      	ldr	r0, [r4, #0]
 8009730:	4632      	mov	r2, r6
 8009732:	4641      	mov	r1, r8
 8009734:	f000 fb64 	bl	8009e00 <memmove>
 8009738:	68a3      	ldr	r3, [r4, #8]
 800973a:	1b9b      	subs	r3, r3, r6
 800973c:	60a3      	str	r3, [r4, #8]
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	4433      	add	r3, r6
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	2000      	movs	r0, #0
 8009746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974a:	462a      	mov	r2, r5
 800974c:	f000 ff47 	bl	800a5de <_realloc_r>
 8009750:	4606      	mov	r6, r0
 8009752:	2800      	cmp	r0, #0
 8009754:	d1e0      	bne.n	8009718 <__ssputs_r+0x5c>
 8009756:	6921      	ldr	r1, [r4, #16]
 8009758:	4650      	mov	r0, sl
 800975a:	f7fe fb95 	bl	8007e88 <_free_r>
 800975e:	230c      	movs	r3, #12
 8009760:	f8ca 3000 	str.w	r3, [sl]
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800976a:	81a3      	strh	r3, [r4, #12]
 800976c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009770:	e7e9      	b.n	8009746 <__ssputs_r+0x8a>
	...

08009774 <_svfiprintf_r>:
 8009774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	4698      	mov	r8, r3
 800977a:	898b      	ldrh	r3, [r1, #12]
 800977c:	061b      	lsls	r3, r3, #24
 800977e:	b09d      	sub	sp, #116	@ 0x74
 8009780:	4607      	mov	r7, r0
 8009782:	460d      	mov	r5, r1
 8009784:	4614      	mov	r4, r2
 8009786:	d510      	bpl.n	80097aa <_svfiprintf_r+0x36>
 8009788:	690b      	ldr	r3, [r1, #16]
 800978a:	b973      	cbnz	r3, 80097aa <_svfiprintf_r+0x36>
 800978c:	2140      	movs	r1, #64	@ 0x40
 800978e:	f7fe fbef 	bl	8007f70 <_malloc_r>
 8009792:	6028      	str	r0, [r5, #0]
 8009794:	6128      	str	r0, [r5, #16]
 8009796:	b930      	cbnz	r0, 80097a6 <_svfiprintf_r+0x32>
 8009798:	230c      	movs	r3, #12
 800979a:	603b      	str	r3, [r7, #0]
 800979c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097a0:	b01d      	add	sp, #116	@ 0x74
 80097a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a6:	2340      	movs	r3, #64	@ 0x40
 80097a8:	616b      	str	r3, [r5, #20]
 80097aa:	2300      	movs	r3, #0
 80097ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ae:	2320      	movs	r3, #32
 80097b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80097b8:	2330      	movs	r3, #48	@ 0x30
 80097ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009958 <_svfiprintf_r+0x1e4>
 80097be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097c2:	f04f 0901 	mov.w	r9, #1
 80097c6:	4623      	mov	r3, r4
 80097c8:	469a      	mov	sl, r3
 80097ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ce:	b10a      	cbz	r2, 80097d4 <_svfiprintf_r+0x60>
 80097d0:	2a25      	cmp	r2, #37	@ 0x25
 80097d2:	d1f9      	bne.n	80097c8 <_svfiprintf_r+0x54>
 80097d4:	ebba 0b04 	subs.w	fp, sl, r4
 80097d8:	d00b      	beq.n	80097f2 <_svfiprintf_r+0x7e>
 80097da:	465b      	mov	r3, fp
 80097dc:	4622      	mov	r2, r4
 80097de:	4629      	mov	r1, r5
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff ff6b 	bl	80096bc <__ssputs_r>
 80097e6:	3001      	adds	r0, #1
 80097e8:	f000 80a7 	beq.w	800993a <_svfiprintf_r+0x1c6>
 80097ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097ee:	445a      	add	r2, fp
 80097f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80097f2:	f89a 3000 	ldrb.w	r3, [sl]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 809f 	beq.w	800993a <_svfiprintf_r+0x1c6>
 80097fc:	2300      	movs	r3, #0
 80097fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009806:	f10a 0a01 	add.w	sl, sl, #1
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	9307      	str	r3, [sp, #28]
 800980e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009812:	931a      	str	r3, [sp, #104]	@ 0x68
 8009814:	4654      	mov	r4, sl
 8009816:	2205      	movs	r2, #5
 8009818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981c:	484e      	ldr	r0, [pc, #312]	@ (8009958 <_svfiprintf_r+0x1e4>)
 800981e:	f7f6 fcaf 	bl	8000180 <memchr>
 8009822:	9a04      	ldr	r2, [sp, #16]
 8009824:	b9d8      	cbnz	r0, 800985e <_svfiprintf_r+0xea>
 8009826:	06d0      	lsls	r0, r2, #27
 8009828:	bf44      	itt	mi
 800982a:	2320      	movmi	r3, #32
 800982c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009830:	0711      	lsls	r1, r2, #28
 8009832:	bf44      	itt	mi
 8009834:	232b      	movmi	r3, #43	@ 0x2b
 8009836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800983a:	f89a 3000 	ldrb.w	r3, [sl]
 800983e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009840:	d015      	beq.n	800986e <_svfiprintf_r+0xfa>
 8009842:	9a07      	ldr	r2, [sp, #28]
 8009844:	4654      	mov	r4, sl
 8009846:	2000      	movs	r0, #0
 8009848:	f04f 0c0a 	mov.w	ip, #10
 800984c:	4621      	mov	r1, r4
 800984e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009852:	3b30      	subs	r3, #48	@ 0x30
 8009854:	2b09      	cmp	r3, #9
 8009856:	d94b      	bls.n	80098f0 <_svfiprintf_r+0x17c>
 8009858:	b1b0      	cbz	r0, 8009888 <_svfiprintf_r+0x114>
 800985a:	9207      	str	r2, [sp, #28]
 800985c:	e014      	b.n	8009888 <_svfiprintf_r+0x114>
 800985e:	eba0 0308 	sub.w	r3, r0, r8
 8009862:	fa09 f303 	lsl.w	r3, r9, r3
 8009866:	4313      	orrs	r3, r2
 8009868:	9304      	str	r3, [sp, #16]
 800986a:	46a2      	mov	sl, r4
 800986c:	e7d2      	b.n	8009814 <_svfiprintf_r+0xa0>
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	1d19      	adds	r1, r3, #4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	9103      	str	r1, [sp, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	bfbb      	ittet	lt
 800987a:	425b      	neglt	r3, r3
 800987c:	f042 0202 	orrlt.w	r2, r2, #2
 8009880:	9307      	strge	r3, [sp, #28]
 8009882:	9307      	strlt	r3, [sp, #28]
 8009884:	bfb8      	it	lt
 8009886:	9204      	strlt	r2, [sp, #16]
 8009888:	7823      	ldrb	r3, [r4, #0]
 800988a:	2b2e      	cmp	r3, #46	@ 0x2e
 800988c:	d10a      	bne.n	80098a4 <_svfiprintf_r+0x130>
 800988e:	7863      	ldrb	r3, [r4, #1]
 8009890:	2b2a      	cmp	r3, #42	@ 0x2a
 8009892:	d132      	bne.n	80098fa <_svfiprintf_r+0x186>
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	1d1a      	adds	r2, r3, #4
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	9203      	str	r2, [sp, #12]
 800989c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098a0:	3402      	adds	r4, #2
 80098a2:	9305      	str	r3, [sp, #20]
 80098a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800995c <_svfiprintf_r+0x1e8>
 80098a8:	7821      	ldrb	r1, [r4, #0]
 80098aa:	2203      	movs	r2, #3
 80098ac:	4650      	mov	r0, sl
 80098ae:	f7f6 fc67 	bl	8000180 <memchr>
 80098b2:	b138      	cbz	r0, 80098c4 <_svfiprintf_r+0x150>
 80098b4:	9b04      	ldr	r3, [sp, #16]
 80098b6:	eba0 000a 	sub.w	r0, r0, sl
 80098ba:	2240      	movs	r2, #64	@ 0x40
 80098bc:	4082      	lsls	r2, r0
 80098be:	4313      	orrs	r3, r2
 80098c0:	3401      	adds	r4, #1
 80098c2:	9304      	str	r3, [sp, #16]
 80098c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c8:	4825      	ldr	r0, [pc, #148]	@ (8009960 <_svfiprintf_r+0x1ec>)
 80098ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098ce:	2206      	movs	r2, #6
 80098d0:	f7f6 fc56 	bl	8000180 <memchr>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d036      	beq.n	8009946 <_svfiprintf_r+0x1d2>
 80098d8:	4b22      	ldr	r3, [pc, #136]	@ (8009964 <_svfiprintf_r+0x1f0>)
 80098da:	bb1b      	cbnz	r3, 8009924 <_svfiprintf_r+0x1b0>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	3307      	adds	r3, #7
 80098e0:	f023 0307 	bic.w	r3, r3, #7
 80098e4:	3308      	adds	r3, #8
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ea:	4433      	add	r3, r6
 80098ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ee:	e76a      	b.n	80097c6 <_svfiprintf_r+0x52>
 80098f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80098f4:	460c      	mov	r4, r1
 80098f6:	2001      	movs	r0, #1
 80098f8:	e7a8      	b.n	800984c <_svfiprintf_r+0xd8>
 80098fa:	2300      	movs	r3, #0
 80098fc:	3401      	adds	r4, #1
 80098fe:	9305      	str	r3, [sp, #20]
 8009900:	4619      	mov	r1, r3
 8009902:	f04f 0c0a 	mov.w	ip, #10
 8009906:	4620      	mov	r0, r4
 8009908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800990c:	3a30      	subs	r2, #48	@ 0x30
 800990e:	2a09      	cmp	r2, #9
 8009910:	d903      	bls.n	800991a <_svfiprintf_r+0x1a6>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0c6      	beq.n	80098a4 <_svfiprintf_r+0x130>
 8009916:	9105      	str	r1, [sp, #20]
 8009918:	e7c4      	b.n	80098a4 <_svfiprintf_r+0x130>
 800991a:	fb0c 2101 	mla	r1, ip, r1, r2
 800991e:	4604      	mov	r4, r0
 8009920:	2301      	movs	r3, #1
 8009922:	e7f0      	b.n	8009906 <_svfiprintf_r+0x192>
 8009924:	ab03      	add	r3, sp, #12
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	462a      	mov	r2, r5
 800992a:	4b0f      	ldr	r3, [pc, #60]	@ (8009968 <_svfiprintf_r+0x1f4>)
 800992c:	a904      	add	r1, sp, #16
 800992e:	4638      	mov	r0, r7
 8009930:	f7fc fbe2 	bl	80060f8 <_printf_float>
 8009934:	1c42      	adds	r2, r0, #1
 8009936:	4606      	mov	r6, r0
 8009938:	d1d6      	bne.n	80098e8 <_svfiprintf_r+0x174>
 800993a:	89ab      	ldrh	r3, [r5, #12]
 800993c:	065b      	lsls	r3, r3, #25
 800993e:	f53f af2d 	bmi.w	800979c <_svfiprintf_r+0x28>
 8009942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009944:	e72c      	b.n	80097a0 <_svfiprintf_r+0x2c>
 8009946:	ab03      	add	r3, sp, #12
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	462a      	mov	r2, r5
 800994c:	4b06      	ldr	r3, [pc, #24]	@ (8009968 <_svfiprintf_r+0x1f4>)
 800994e:	a904      	add	r1, sp, #16
 8009950:	4638      	mov	r0, r7
 8009952:	f7fc fe6b 	bl	800662c <_printf_i>
 8009956:	e7ed      	b.n	8009934 <_svfiprintf_r+0x1c0>
 8009958:	0800ab95 	.word	0x0800ab95
 800995c:	0800ab9b 	.word	0x0800ab9b
 8009960:	0800ab9f 	.word	0x0800ab9f
 8009964:	080060f9 	.word	0x080060f9
 8009968:	080096bd 	.word	0x080096bd

0800996c <__sfputc_r>:
 800996c:	6893      	ldr	r3, [r2, #8]
 800996e:	3b01      	subs	r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	b410      	push	{r4}
 8009974:	6093      	str	r3, [r2, #8]
 8009976:	da07      	bge.n	8009988 <__sfputc_r+0x1c>
 8009978:	6994      	ldr	r4, [r2, #24]
 800997a:	42a3      	cmp	r3, r4
 800997c:	db01      	blt.n	8009982 <__sfputc_r+0x16>
 800997e:	290a      	cmp	r1, #10
 8009980:	d102      	bne.n	8009988 <__sfputc_r+0x1c>
 8009982:	bc10      	pop	{r4}
 8009984:	f7fd bb0f 	b.w	8006fa6 <__swbuf_r>
 8009988:	6813      	ldr	r3, [r2, #0]
 800998a:	1c58      	adds	r0, r3, #1
 800998c:	6010      	str	r0, [r2, #0]
 800998e:	7019      	strb	r1, [r3, #0]
 8009990:	4608      	mov	r0, r1
 8009992:	bc10      	pop	{r4}
 8009994:	4770      	bx	lr

08009996 <__sfputs_r>:
 8009996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009998:	4606      	mov	r6, r0
 800999a:	460f      	mov	r7, r1
 800999c:	4614      	mov	r4, r2
 800999e:	18d5      	adds	r5, r2, r3
 80099a0:	42ac      	cmp	r4, r5
 80099a2:	d101      	bne.n	80099a8 <__sfputs_r+0x12>
 80099a4:	2000      	movs	r0, #0
 80099a6:	e007      	b.n	80099b8 <__sfputs_r+0x22>
 80099a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ac:	463a      	mov	r2, r7
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7ff ffdc 	bl	800996c <__sfputc_r>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d1f3      	bne.n	80099a0 <__sfputs_r+0xa>
 80099b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099bc <_vfiprintf_r>:
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	460d      	mov	r5, r1
 80099c2:	b09d      	sub	sp, #116	@ 0x74
 80099c4:	4614      	mov	r4, r2
 80099c6:	4698      	mov	r8, r3
 80099c8:	4606      	mov	r6, r0
 80099ca:	b118      	cbz	r0, 80099d4 <_vfiprintf_r+0x18>
 80099cc:	6a03      	ldr	r3, [r0, #32]
 80099ce:	b90b      	cbnz	r3, 80099d4 <_vfiprintf_r+0x18>
 80099d0:	f7fd f9de 	bl	8006d90 <__sinit>
 80099d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099d6:	07d9      	lsls	r1, r3, #31
 80099d8:	d405      	bmi.n	80099e6 <_vfiprintf_r+0x2a>
 80099da:	89ab      	ldrh	r3, [r5, #12]
 80099dc:	059a      	lsls	r2, r3, #22
 80099de:	d402      	bmi.n	80099e6 <_vfiprintf_r+0x2a>
 80099e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099e2:	f7fd fbf2 	bl	80071ca <__retarget_lock_acquire_recursive>
 80099e6:	89ab      	ldrh	r3, [r5, #12]
 80099e8:	071b      	lsls	r3, r3, #28
 80099ea:	d501      	bpl.n	80099f0 <_vfiprintf_r+0x34>
 80099ec:	692b      	ldr	r3, [r5, #16]
 80099ee:	b99b      	cbnz	r3, 8009a18 <_vfiprintf_r+0x5c>
 80099f0:	4629      	mov	r1, r5
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7fd fb16 	bl	8007024 <__swsetup_r>
 80099f8:	b170      	cbz	r0, 8009a18 <_vfiprintf_r+0x5c>
 80099fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099fc:	07dc      	lsls	r4, r3, #31
 80099fe:	d504      	bpl.n	8009a0a <_vfiprintf_r+0x4e>
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a04:	b01d      	add	sp, #116	@ 0x74
 8009a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0a:	89ab      	ldrh	r3, [r5, #12]
 8009a0c:	0598      	lsls	r0, r3, #22
 8009a0e:	d4f7      	bmi.n	8009a00 <_vfiprintf_r+0x44>
 8009a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a12:	f7fd fbdb 	bl	80071cc <__retarget_lock_release_recursive>
 8009a16:	e7f3      	b.n	8009a00 <_vfiprintf_r+0x44>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a26:	2330      	movs	r3, #48	@ 0x30
 8009a28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009bd8 <_vfiprintf_r+0x21c>
 8009a2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a30:	f04f 0901 	mov.w	r9, #1
 8009a34:	4623      	mov	r3, r4
 8009a36:	469a      	mov	sl, r3
 8009a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a3c:	b10a      	cbz	r2, 8009a42 <_vfiprintf_r+0x86>
 8009a3e:	2a25      	cmp	r2, #37	@ 0x25
 8009a40:	d1f9      	bne.n	8009a36 <_vfiprintf_r+0x7a>
 8009a42:	ebba 0b04 	subs.w	fp, sl, r4
 8009a46:	d00b      	beq.n	8009a60 <_vfiprintf_r+0xa4>
 8009a48:	465b      	mov	r3, fp
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f7ff ffa1 	bl	8009996 <__sfputs_r>
 8009a54:	3001      	adds	r0, #1
 8009a56:	f000 80a7 	beq.w	8009ba8 <_vfiprintf_r+0x1ec>
 8009a5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a5c:	445a      	add	r2, fp
 8009a5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a60:	f89a 3000 	ldrb.w	r3, [sl]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 809f 	beq.w	8009ba8 <_vfiprintf_r+0x1ec>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a74:	f10a 0a01 	add.w	sl, sl, #1
 8009a78:	9304      	str	r3, [sp, #16]
 8009a7a:	9307      	str	r3, [sp, #28]
 8009a7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a80:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a82:	4654      	mov	r4, sl
 8009a84:	2205      	movs	r2, #5
 8009a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a8a:	4853      	ldr	r0, [pc, #332]	@ (8009bd8 <_vfiprintf_r+0x21c>)
 8009a8c:	f7f6 fb78 	bl	8000180 <memchr>
 8009a90:	9a04      	ldr	r2, [sp, #16]
 8009a92:	b9d8      	cbnz	r0, 8009acc <_vfiprintf_r+0x110>
 8009a94:	06d1      	lsls	r1, r2, #27
 8009a96:	bf44      	itt	mi
 8009a98:	2320      	movmi	r3, #32
 8009a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a9e:	0713      	lsls	r3, r2, #28
 8009aa0:	bf44      	itt	mi
 8009aa2:	232b      	movmi	r3, #43	@ 0x2b
 8009aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8009aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aae:	d015      	beq.n	8009adc <_vfiprintf_r+0x120>
 8009ab0:	9a07      	ldr	r2, [sp, #28]
 8009ab2:	4654      	mov	r4, sl
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	f04f 0c0a 	mov.w	ip, #10
 8009aba:	4621      	mov	r1, r4
 8009abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ac0:	3b30      	subs	r3, #48	@ 0x30
 8009ac2:	2b09      	cmp	r3, #9
 8009ac4:	d94b      	bls.n	8009b5e <_vfiprintf_r+0x1a2>
 8009ac6:	b1b0      	cbz	r0, 8009af6 <_vfiprintf_r+0x13a>
 8009ac8:	9207      	str	r2, [sp, #28]
 8009aca:	e014      	b.n	8009af6 <_vfiprintf_r+0x13a>
 8009acc:	eba0 0308 	sub.w	r3, r0, r8
 8009ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	9304      	str	r3, [sp, #16]
 8009ad8:	46a2      	mov	sl, r4
 8009ada:	e7d2      	b.n	8009a82 <_vfiprintf_r+0xc6>
 8009adc:	9b03      	ldr	r3, [sp, #12]
 8009ade:	1d19      	adds	r1, r3, #4
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	9103      	str	r1, [sp, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	bfbb      	ittet	lt
 8009ae8:	425b      	neglt	r3, r3
 8009aea:	f042 0202 	orrlt.w	r2, r2, #2
 8009aee:	9307      	strge	r3, [sp, #28]
 8009af0:	9307      	strlt	r3, [sp, #28]
 8009af2:	bfb8      	it	lt
 8009af4:	9204      	strlt	r2, [sp, #16]
 8009af6:	7823      	ldrb	r3, [r4, #0]
 8009af8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009afa:	d10a      	bne.n	8009b12 <_vfiprintf_r+0x156>
 8009afc:	7863      	ldrb	r3, [r4, #1]
 8009afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b00:	d132      	bne.n	8009b68 <_vfiprintf_r+0x1ac>
 8009b02:	9b03      	ldr	r3, [sp, #12]
 8009b04:	1d1a      	adds	r2, r3, #4
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	9203      	str	r2, [sp, #12]
 8009b0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b0e:	3402      	adds	r4, #2
 8009b10:	9305      	str	r3, [sp, #20]
 8009b12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009bdc <_vfiprintf_r+0x220>
 8009b16:	7821      	ldrb	r1, [r4, #0]
 8009b18:	2203      	movs	r2, #3
 8009b1a:	4650      	mov	r0, sl
 8009b1c:	f7f6 fb30 	bl	8000180 <memchr>
 8009b20:	b138      	cbz	r0, 8009b32 <_vfiprintf_r+0x176>
 8009b22:	9b04      	ldr	r3, [sp, #16]
 8009b24:	eba0 000a 	sub.w	r0, r0, sl
 8009b28:	2240      	movs	r2, #64	@ 0x40
 8009b2a:	4082      	lsls	r2, r0
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	3401      	adds	r4, #1
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b36:	482a      	ldr	r0, [pc, #168]	@ (8009be0 <_vfiprintf_r+0x224>)
 8009b38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b3c:	2206      	movs	r2, #6
 8009b3e:	f7f6 fb1f 	bl	8000180 <memchr>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d03f      	beq.n	8009bc6 <_vfiprintf_r+0x20a>
 8009b46:	4b27      	ldr	r3, [pc, #156]	@ (8009be4 <_vfiprintf_r+0x228>)
 8009b48:	bb1b      	cbnz	r3, 8009b92 <_vfiprintf_r+0x1d6>
 8009b4a:	9b03      	ldr	r3, [sp, #12]
 8009b4c:	3307      	adds	r3, #7
 8009b4e:	f023 0307 	bic.w	r3, r3, #7
 8009b52:	3308      	adds	r3, #8
 8009b54:	9303      	str	r3, [sp, #12]
 8009b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b58:	443b      	add	r3, r7
 8009b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b5c:	e76a      	b.n	8009a34 <_vfiprintf_r+0x78>
 8009b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b62:	460c      	mov	r4, r1
 8009b64:	2001      	movs	r0, #1
 8009b66:	e7a8      	b.n	8009aba <_vfiprintf_r+0xfe>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	3401      	adds	r4, #1
 8009b6c:	9305      	str	r3, [sp, #20]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	f04f 0c0a 	mov.w	ip, #10
 8009b74:	4620      	mov	r0, r4
 8009b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b7a:	3a30      	subs	r2, #48	@ 0x30
 8009b7c:	2a09      	cmp	r2, #9
 8009b7e:	d903      	bls.n	8009b88 <_vfiprintf_r+0x1cc>
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d0c6      	beq.n	8009b12 <_vfiprintf_r+0x156>
 8009b84:	9105      	str	r1, [sp, #20]
 8009b86:	e7c4      	b.n	8009b12 <_vfiprintf_r+0x156>
 8009b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e7f0      	b.n	8009b74 <_vfiprintf_r+0x1b8>
 8009b92:	ab03      	add	r3, sp, #12
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	462a      	mov	r2, r5
 8009b98:	4b13      	ldr	r3, [pc, #76]	@ (8009be8 <_vfiprintf_r+0x22c>)
 8009b9a:	a904      	add	r1, sp, #16
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f7fc faab 	bl	80060f8 <_printf_float>
 8009ba2:	4607      	mov	r7, r0
 8009ba4:	1c78      	adds	r0, r7, #1
 8009ba6:	d1d6      	bne.n	8009b56 <_vfiprintf_r+0x19a>
 8009ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009baa:	07d9      	lsls	r1, r3, #31
 8009bac:	d405      	bmi.n	8009bba <_vfiprintf_r+0x1fe>
 8009bae:	89ab      	ldrh	r3, [r5, #12]
 8009bb0:	059a      	lsls	r2, r3, #22
 8009bb2:	d402      	bmi.n	8009bba <_vfiprintf_r+0x1fe>
 8009bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bb6:	f7fd fb09 	bl	80071cc <__retarget_lock_release_recursive>
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	065b      	lsls	r3, r3, #25
 8009bbe:	f53f af1f 	bmi.w	8009a00 <_vfiprintf_r+0x44>
 8009bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bc4:	e71e      	b.n	8009a04 <_vfiprintf_r+0x48>
 8009bc6:	ab03      	add	r3, sp, #12
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	462a      	mov	r2, r5
 8009bcc:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <_vfiprintf_r+0x22c>)
 8009bce:	a904      	add	r1, sp, #16
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7fc fd2b 	bl	800662c <_printf_i>
 8009bd6:	e7e4      	b.n	8009ba2 <_vfiprintf_r+0x1e6>
 8009bd8:	0800ab95 	.word	0x0800ab95
 8009bdc:	0800ab9b 	.word	0x0800ab9b
 8009be0:	0800ab9f 	.word	0x0800ab9f
 8009be4:	080060f9 	.word	0x080060f9
 8009be8:	08009997 	.word	0x08009997

08009bec <__sflush_r>:
 8009bec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	0716      	lsls	r6, r2, #28
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	d454      	bmi.n	8009ca4 <__sflush_r+0xb8>
 8009bfa:	684b      	ldr	r3, [r1, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	dc02      	bgt.n	8009c06 <__sflush_r+0x1a>
 8009c00:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dd48      	ble.n	8009c98 <__sflush_r+0xac>
 8009c06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c08:	2e00      	cmp	r6, #0
 8009c0a:	d045      	beq.n	8009c98 <__sflush_r+0xac>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c12:	682f      	ldr	r7, [r5, #0]
 8009c14:	6a21      	ldr	r1, [r4, #32]
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	d030      	beq.n	8009c7c <__sflush_r+0x90>
 8009c1a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	0759      	lsls	r1, r3, #29
 8009c20:	d505      	bpl.n	8009c2e <__sflush_r+0x42>
 8009c22:	6863      	ldr	r3, [r4, #4]
 8009c24:	1ad2      	subs	r2, r2, r3
 8009c26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c28:	b10b      	cbz	r3, 8009c2e <__sflush_r+0x42>
 8009c2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c2c:	1ad2      	subs	r2, r2, r3
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c32:	6a21      	ldr	r1, [r4, #32]
 8009c34:	4628      	mov	r0, r5
 8009c36:	47b0      	blx	r6
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	d106      	bne.n	8009c4c <__sflush_r+0x60>
 8009c3e:	6829      	ldr	r1, [r5, #0]
 8009c40:	291d      	cmp	r1, #29
 8009c42:	d82b      	bhi.n	8009c9c <__sflush_r+0xb0>
 8009c44:	4a28      	ldr	r2, [pc, #160]	@ (8009ce8 <__sflush_r+0xfc>)
 8009c46:	40ca      	lsrs	r2, r1
 8009c48:	07d6      	lsls	r6, r2, #31
 8009c4a:	d527      	bpl.n	8009c9c <__sflush_r+0xb0>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	6062      	str	r2, [r4, #4]
 8009c50:	04d9      	lsls	r1, r3, #19
 8009c52:	6922      	ldr	r2, [r4, #16]
 8009c54:	6022      	str	r2, [r4, #0]
 8009c56:	d504      	bpl.n	8009c62 <__sflush_r+0x76>
 8009c58:	1c42      	adds	r2, r0, #1
 8009c5a:	d101      	bne.n	8009c60 <__sflush_r+0x74>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b903      	cbnz	r3, 8009c62 <__sflush_r+0x76>
 8009c60:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c64:	602f      	str	r7, [r5, #0]
 8009c66:	b1b9      	cbz	r1, 8009c98 <__sflush_r+0xac>
 8009c68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c6c:	4299      	cmp	r1, r3
 8009c6e:	d002      	beq.n	8009c76 <__sflush_r+0x8a>
 8009c70:	4628      	mov	r0, r5
 8009c72:	f7fe f909 	bl	8007e88 <_free_r>
 8009c76:	2300      	movs	r3, #0
 8009c78:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c7a:	e00d      	b.n	8009c98 <__sflush_r+0xac>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b0      	blx	r6
 8009c82:	4602      	mov	r2, r0
 8009c84:	1c50      	adds	r0, r2, #1
 8009c86:	d1c9      	bne.n	8009c1c <__sflush_r+0x30>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0c6      	beq.n	8009c1c <__sflush_r+0x30>
 8009c8e:	2b1d      	cmp	r3, #29
 8009c90:	d001      	beq.n	8009c96 <__sflush_r+0xaa>
 8009c92:	2b16      	cmp	r3, #22
 8009c94:	d11d      	bne.n	8009cd2 <__sflush_r+0xe6>
 8009c96:	602f      	str	r7, [r5, #0]
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e021      	b.n	8009ce0 <__sflush_r+0xf4>
 8009c9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ca0:	b21b      	sxth	r3, r3
 8009ca2:	e01a      	b.n	8009cda <__sflush_r+0xee>
 8009ca4:	690f      	ldr	r7, [r1, #16]
 8009ca6:	2f00      	cmp	r7, #0
 8009ca8:	d0f6      	beq.n	8009c98 <__sflush_r+0xac>
 8009caa:	0793      	lsls	r3, r2, #30
 8009cac:	680e      	ldr	r6, [r1, #0]
 8009cae:	bf08      	it	eq
 8009cb0:	694b      	ldreq	r3, [r1, #20]
 8009cb2:	600f      	str	r7, [r1, #0]
 8009cb4:	bf18      	it	ne
 8009cb6:	2300      	movne	r3, #0
 8009cb8:	1bf6      	subs	r6, r6, r7
 8009cba:	608b      	str	r3, [r1, #8]
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	ddeb      	ble.n	8009c98 <__sflush_r+0xac>
 8009cc0:	6a21      	ldr	r1, [r4, #32]
 8009cc2:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009cc6:	4633      	mov	r3, r6
 8009cc8:	463a      	mov	r2, r7
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47e0      	blx	ip
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	dc07      	bgt.n	8009ce2 <__sflush_r+0xf6>
 8009cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce2:	4407      	add	r7, r0
 8009ce4:	1a36      	subs	r6, r6, r0
 8009ce6:	e7e9      	b.n	8009cbc <__sflush_r+0xd0>
 8009ce8:	20400001 	.word	0x20400001

08009cec <_fflush_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	690b      	ldr	r3, [r1, #16]
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	b913      	cbnz	r3, 8009cfc <_fflush_r+0x10>
 8009cf6:	2500      	movs	r5, #0
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	b118      	cbz	r0, 8009d06 <_fflush_r+0x1a>
 8009cfe:	6a03      	ldr	r3, [r0, #32]
 8009d00:	b90b      	cbnz	r3, 8009d06 <_fflush_r+0x1a>
 8009d02:	f7fd f845 	bl	8006d90 <__sinit>
 8009d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0f3      	beq.n	8009cf6 <_fflush_r+0xa>
 8009d0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d10:	07d0      	lsls	r0, r2, #31
 8009d12:	d404      	bmi.n	8009d1e <_fflush_r+0x32>
 8009d14:	0599      	lsls	r1, r3, #22
 8009d16:	d402      	bmi.n	8009d1e <_fflush_r+0x32>
 8009d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d1a:	f7fd fa56 	bl	80071ca <__retarget_lock_acquire_recursive>
 8009d1e:	4628      	mov	r0, r5
 8009d20:	4621      	mov	r1, r4
 8009d22:	f7ff ff63 	bl	8009bec <__sflush_r>
 8009d26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d28:	07da      	lsls	r2, r3, #31
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	d4e4      	bmi.n	8009cf8 <_fflush_r+0xc>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	059b      	lsls	r3, r3, #22
 8009d32:	d4e1      	bmi.n	8009cf8 <_fflush_r+0xc>
 8009d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d36:	f7fd fa49 	bl	80071cc <__retarget_lock_release_recursive>
 8009d3a:	e7dd      	b.n	8009cf8 <_fflush_r+0xc>

08009d3c <__swhatbuf_r>:
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	460c      	mov	r4, r1
 8009d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d44:	2900      	cmp	r1, #0
 8009d46:	b096      	sub	sp, #88	@ 0x58
 8009d48:	4615      	mov	r5, r2
 8009d4a:	461e      	mov	r6, r3
 8009d4c:	da0d      	bge.n	8009d6a <__swhatbuf_r+0x2e>
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d54:	f04f 0100 	mov.w	r1, #0
 8009d58:	bf14      	ite	ne
 8009d5a:	2340      	movne	r3, #64	@ 0x40
 8009d5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d60:	2000      	movs	r0, #0
 8009d62:	6031      	str	r1, [r6, #0]
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	b016      	add	sp, #88	@ 0x58
 8009d68:	bd70      	pop	{r4, r5, r6, pc}
 8009d6a:	466a      	mov	r2, sp
 8009d6c:	f000 f874 	bl	8009e58 <_fstat_r>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	dbec      	blt.n	8009d4e <__swhatbuf_r+0x12>
 8009d74:	9901      	ldr	r1, [sp, #4]
 8009d76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d7e:	4259      	negs	r1, r3
 8009d80:	4159      	adcs	r1, r3
 8009d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d86:	e7eb      	b.n	8009d60 <__swhatbuf_r+0x24>

08009d88 <__smakebuf_r>:
 8009d88:	898b      	ldrh	r3, [r1, #12]
 8009d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d8c:	079d      	lsls	r5, r3, #30
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	d507      	bpl.n	8009da4 <__smakebuf_r+0x1c>
 8009d94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	6163      	str	r3, [r4, #20]
 8009da0:	b003      	add	sp, #12
 8009da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da4:	ab01      	add	r3, sp, #4
 8009da6:	466a      	mov	r2, sp
 8009da8:	f7ff ffc8 	bl	8009d3c <__swhatbuf_r>
 8009dac:	9f00      	ldr	r7, [sp, #0]
 8009dae:	4605      	mov	r5, r0
 8009db0:	4639      	mov	r1, r7
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7fe f8dc 	bl	8007f70 <_malloc_r>
 8009db8:	b948      	cbnz	r0, 8009dce <__smakebuf_r+0x46>
 8009dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dbe:	059a      	lsls	r2, r3, #22
 8009dc0:	d4ee      	bmi.n	8009da0 <__smakebuf_r+0x18>
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	f043 0302 	orr.w	r3, r3, #2
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	e7e2      	b.n	8009d94 <__smakebuf_r+0xc>
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	6020      	str	r0, [r4, #0]
 8009dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dd6:	81a3      	strh	r3, [r4, #12]
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009dde:	b15b      	cbz	r3, 8009df8 <__smakebuf_r+0x70>
 8009de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de4:	4630      	mov	r0, r6
 8009de6:	f000 f849 	bl	8009e7c <_isatty_r>
 8009dea:	b128      	cbz	r0, 8009df8 <__smakebuf_r+0x70>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f023 0303 	bic.w	r3, r3, #3
 8009df2:	f043 0301 	orr.w	r3, r3, #1
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	431d      	orrs	r5, r3
 8009dfc:	81a5      	strh	r5, [r4, #12]
 8009dfe:	e7cf      	b.n	8009da0 <__smakebuf_r+0x18>

08009e00 <memmove>:
 8009e00:	4288      	cmp	r0, r1
 8009e02:	b510      	push	{r4, lr}
 8009e04:	eb01 0402 	add.w	r4, r1, r2
 8009e08:	d902      	bls.n	8009e10 <memmove+0x10>
 8009e0a:	4284      	cmp	r4, r0
 8009e0c:	4623      	mov	r3, r4
 8009e0e:	d807      	bhi.n	8009e20 <memmove+0x20>
 8009e10:	1e43      	subs	r3, r0, #1
 8009e12:	42a1      	cmp	r1, r4
 8009e14:	d008      	beq.n	8009e28 <memmove+0x28>
 8009e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e1e:	e7f8      	b.n	8009e12 <memmove+0x12>
 8009e20:	4402      	add	r2, r0
 8009e22:	4601      	mov	r1, r0
 8009e24:	428a      	cmp	r2, r1
 8009e26:	d100      	bne.n	8009e2a <memmove+0x2a>
 8009e28:	bd10      	pop	{r4, pc}
 8009e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e32:	e7f7      	b.n	8009e24 <memmove+0x24>

08009e34 <strncmp>:
 8009e34:	b510      	push	{r4, lr}
 8009e36:	b16a      	cbz	r2, 8009e54 <strncmp+0x20>
 8009e38:	3901      	subs	r1, #1
 8009e3a:	1884      	adds	r4, r0, r2
 8009e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d103      	bne.n	8009e50 <strncmp+0x1c>
 8009e48:	42a0      	cmp	r0, r4
 8009e4a:	d001      	beq.n	8009e50 <strncmp+0x1c>
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	d1f5      	bne.n	8009e3c <strncmp+0x8>
 8009e50:	1ad0      	subs	r0, r2, r3
 8009e52:	bd10      	pop	{r4, pc}
 8009e54:	4610      	mov	r0, r2
 8009e56:	e7fc      	b.n	8009e52 <strncmp+0x1e>

08009e58 <_fstat_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	@ (8009e78 <_fstat_r+0x20>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	4611      	mov	r1, r2
 8009e64:	602b      	str	r3, [r5, #0]
 8009e66:	f7f7 fe12 	bl	8001a8e <_fstat>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d102      	bne.n	8009e74 <_fstat_r+0x1c>
 8009e6e:	682b      	ldr	r3, [r5, #0]
 8009e70:	b103      	cbz	r3, 8009e74 <_fstat_r+0x1c>
 8009e72:	6023      	str	r3, [r4, #0]
 8009e74:	bd38      	pop	{r3, r4, r5, pc}
 8009e76:	bf00      	nop
 8009e78:	200004f0 	.word	0x200004f0

08009e7c <_isatty_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d06      	ldr	r5, [pc, #24]	@ (8009e98 <_isatty_r+0x1c>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f7f7 fe10 	bl	8001aac <_isatty>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_isatty_r+0x1a>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_isatty_r+0x1a>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	200004f0 	.word	0x200004f0

08009e9c <_sbrk_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d06      	ldr	r5, [pc, #24]	@ (8009eb8 <_sbrk_r+0x1c>)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	602b      	str	r3, [r5, #0]
 8009ea8:	f7f7 fe16 	bl	8001ad8 <_sbrk>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	d102      	bne.n	8009eb6 <_sbrk_r+0x1a>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	b103      	cbz	r3, 8009eb6 <_sbrk_r+0x1a>
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}
 8009eb8:	200004f0 	.word	0x200004f0

08009ebc <memcpy>:
 8009ebc:	440a      	add	r2, r1
 8009ebe:	4291      	cmp	r1, r2
 8009ec0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009ec4:	d100      	bne.n	8009ec8 <memcpy+0xc>
 8009ec6:	4770      	bx	lr
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ed2:	4291      	cmp	r1, r2
 8009ed4:	d1f9      	bne.n	8009eca <memcpy+0xe>
 8009ed6:	bd10      	pop	{r4, pc}

08009ed8 <nan>:
 8009ed8:	4901      	ldr	r1, [pc, #4]	@ (8009ee0 <nan+0x8>)
 8009eda:	2000      	movs	r0, #0
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	7ff80000 	.word	0x7ff80000

08009ee4 <__assert_func>:
 8009ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ee6:	4614      	mov	r4, r2
 8009ee8:	461a      	mov	r2, r3
 8009eea:	4b09      	ldr	r3, [pc, #36]	@ (8009f10 <__assert_func+0x2c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4605      	mov	r5, r0
 8009ef0:	68d8      	ldr	r0, [r3, #12]
 8009ef2:	b14c      	cbz	r4, 8009f08 <__assert_func+0x24>
 8009ef4:	4b07      	ldr	r3, [pc, #28]	@ (8009f14 <__assert_func+0x30>)
 8009ef6:	9100      	str	r1, [sp, #0]
 8009ef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009efc:	4906      	ldr	r1, [pc, #24]	@ (8009f18 <__assert_func+0x34>)
 8009efe:	462b      	mov	r3, r5
 8009f00:	f000 fba8 	bl	800a654 <fiprintf>
 8009f04:	f000 fbb8 	bl	800a678 <abort>
 8009f08:	4b04      	ldr	r3, [pc, #16]	@ (8009f1c <__assert_func+0x38>)
 8009f0a:	461c      	mov	r4, r3
 8009f0c:	e7f3      	b.n	8009ef6 <__assert_func+0x12>
 8009f0e:	bf00      	nop
 8009f10:	20000024 	.word	0x20000024
 8009f14:	0800abae 	.word	0x0800abae
 8009f18:	0800abbb 	.word	0x0800abbb
 8009f1c:	0800abe9 	.word	0x0800abe9

08009f20 <_calloc_r>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	fba1 5402 	umull	r5, r4, r1, r2
 8009f26:	b934      	cbnz	r4, 8009f36 <_calloc_r+0x16>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7fe f821 	bl	8007f70 <_malloc_r>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	b928      	cbnz	r0, 8009f3e <_calloc_r+0x1e>
 8009f32:	4630      	mov	r0, r6
 8009f34:	bd70      	pop	{r4, r5, r6, pc}
 8009f36:	220c      	movs	r2, #12
 8009f38:	6002      	str	r2, [r0, #0]
 8009f3a:	2600      	movs	r6, #0
 8009f3c:	e7f9      	b.n	8009f32 <_calloc_r+0x12>
 8009f3e:	462a      	mov	r2, r5
 8009f40:	4621      	mov	r1, r4
 8009f42:	f7fd f8c5 	bl	80070d0 <memset>
 8009f46:	e7f4      	b.n	8009f32 <_calloc_r+0x12>

08009f48 <rshift>:
 8009f48:	6903      	ldr	r3, [r0, #16]
 8009f4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f56:	f100 0414 	add.w	r4, r0, #20
 8009f5a:	dd45      	ble.n	8009fe8 <rshift+0xa0>
 8009f5c:	f011 011f 	ands.w	r1, r1, #31
 8009f60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f68:	d10c      	bne.n	8009f84 <rshift+0x3c>
 8009f6a:	f100 0710 	add.w	r7, r0, #16
 8009f6e:	4629      	mov	r1, r5
 8009f70:	42b1      	cmp	r1, r6
 8009f72:	d334      	bcc.n	8009fde <rshift+0x96>
 8009f74:	1a9b      	subs	r3, r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	1eea      	subs	r2, r5, #3
 8009f7a:	4296      	cmp	r6, r2
 8009f7c:	bf38      	it	cc
 8009f7e:	2300      	movcc	r3, #0
 8009f80:	4423      	add	r3, r4
 8009f82:	e015      	b.n	8009fb0 <rshift+0x68>
 8009f84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f88:	f1c1 0820 	rsb	r8, r1, #32
 8009f8c:	40cf      	lsrs	r7, r1
 8009f8e:	f105 0e04 	add.w	lr, r5, #4
 8009f92:	46a1      	mov	r9, r4
 8009f94:	4576      	cmp	r6, lr
 8009f96:	46f4      	mov	ip, lr
 8009f98:	d815      	bhi.n	8009fc6 <rshift+0x7e>
 8009f9a:	1a9a      	subs	r2, r3, r2
 8009f9c:	0092      	lsls	r2, r2, #2
 8009f9e:	3a04      	subs	r2, #4
 8009fa0:	3501      	adds	r5, #1
 8009fa2:	42ae      	cmp	r6, r5
 8009fa4:	bf38      	it	cc
 8009fa6:	2200      	movcc	r2, #0
 8009fa8:	18a3      	adds	r3, r4, r2
 8009faa:	50a7      	str	r7, [r4, r2]
 8009fac:	b107      	cbz	r7, 8009fb0 <rshift+0x68>
 8009fae:	3304      	adds	r3, #4
 8009fb0:	1b1a      	subs	r2, r3, r4
 8009fb2:	42a3      	cmp	r3, r4
 8009fb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009fb8:	bf08      	it	eq
 8009fba:	2300      	moveq	r3, #0
 8009fbc:	6102      	str	r2, [r0, #16]
 8009fbe:	bf08      	it	eq
 8009fc0:	6143      	streq	r3, [r0, #20]
 8009fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fc6:	f8dc c000 	ldr.w	ip, [ip]
 8009fca:	fa0c fc08 	lsl.w	ip, ip, r8
 8009fce:	ea4c 0707 	orr.w	r7, ip, r7
 8009fd2:	f849 7b04 	str.w	r7, [r9], #4
 8009fd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fda:	40cf      	lsrs	r7, r1
 8009fdc:	e7da      	b.n	8009f94 <rshift+0x4c>
 8009fde:	f851 cb04 	ldr.w	ip, [r1], #4
 8009fe2:	f847 cf04 	str.w	ip, [r7, #4]!
 8009fe6:	e7c3      	b.n	8009f70 <rshift+0x28>
 8009fe8:	4623      	mov	r3, r4
 8009fea:	e7e1      	b.n	8009fb0 <rshift+0x68>

08009fec <__hexdig_fun>:
 8009fec:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009ff0:	2b09      	cmp	r3, #9
 8009ff2:	d802      	bhi.n	8009ffa <__hexdig_fun+0xe>
 8009ff4:	3820      	subs	r0, #32
 8009ff6:	b2c0      	uxtb	r0, r0
 8009ff8:	4770      	bx	lr
 8009ffa:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ffe:	2b05      	cmp	r3, #5
 800a000:	d801      	bhi.n	800a006 <__hexdig_fun+0x1a>
 800a002:	3847      	subs	r0, #71	@ 0x47
 800a004:	e7f7      	b.n	8009ff6 <__hexdig_fun+0xa>
 800a006:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a00a:	2b05      	cmp	r3, #5
 800a00c:	d801      	bhi.n	800a012 <__hexdig_fun+0x26>
 800a00e:	3827      	subs	r0, #39	@ 0x27
 800a010:	e7f1      	b.n	8009ff6 <__hexdig_fun+0xa>
 800a012:	2000      	movs	r0, #0
 800a014:	4770      	bx	lr
	...

0800a018 <__gethex>:
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	b085      	sub	sp, #20
 800a01e:	468a      	mov	sl, r1
 800a020:	9302      	str	r3, [sp, #8]
 800a022:	680b      	ldr	r3, [r1, #0]
 800a024:	9001      	str	r0, [sp, #4]
 800a026:	4690      	mov	r8, r2
 800a028:	1c9c      	adds	r4, r3, #2
 800a02a:	46a1      	mov	r9, r4
 800a02c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a030:	2830      	cmp	r0, #48	@ 0x30
 800a032:	d0fa      	beq.n	800a02a <__gethex+0x12>
 800a034:	eba9 0303 	sub.w	r3, r9, r3
 800a038:	f1a3 0b02 	sub.w	fp, r3, #2
 800a03c:	f7ff ffd6 	bl	8009fec <__hexdig_fun>
 800a040:	4605      	mov	r5, r0
 800a042:	2800      	cmp	r0, #0
 800a044:	d168      	bne.n	800a118 <__gethex+0x100>
 800a046:	49a0      	ldr	r1, [pc, #640]	@ (800a2c8 <__gethex+0x2b0>)
 800a048:	2201      	movs	r2, #1
 800a04a:	4648      	mov	r0, r9
 800a04c:	f7ff fef2 	bl	8009e34 <strncmp>
 800a050:	4607      	mov	r7, r0
 800a052:	2800      	cmp	r0, #0
 800a054:	d167      	bne.n	800a126 <__gethex+0x10e>
 800a056:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a05a:	4626      	mov	r6, r4
 800a05c:	f7ff ffc6 	bl	8009fec <__hexdig_fun>
 800a060:	2800      	cmp	r0, #0
 800a062:	d062      	beq.n	800a12a <__gethex+0x112>
 800a064:	4623      	mov	r3, r4
 800a066:	7818      	ldrb	r0, [r3, #0]
 800a068:	2830      	cmp	r0, #48	@ 0x30
 800a06a:	4699      	mov	r9, r3
 800a06c:	f103 0301 	add.w	r3, r3, #1
 800a070:	d0f9      	beq.n	800a066 <__gethex+0x4e>
 800a072:	f7ff ffbb 	bl	8009fec <__hexdig_fun>
 800a076:	fab0 f580 	clz	r5, r0
 800a07a:	096d      	lsrs	r5, r5, #5
 800a07c:	f04f 0b01 	mov.w	fp, #1
 800a080:	464a      	mov	r2, r9
 800a082:	4616      	mov	r6, r2
 800a084:	3201      	adds	r2, #1
 800a086:	7830      	ldrb	r0, [r6, #0]
 800a088:	f7ff ffb0 	bl	8009fec <__hexdig_fun>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d1f8      	bne.n	800a082 <__gethex+0x6a>
 800a090:	498d      	ldr	r1, [pc, #564]	@ (800a2c8 <__gethex+0x2b0>)
 800a092:	2201      	movs	r2, #1
 800a094:	4630      	mov	r0, r6
 800a096:	f7ff fecd 	bl	8009e34 <strncmp>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d13f      	bne.n	800a11e <__gethex+0x106>
 800a09e:	b944      	cbnz	r4, 800a0b2 <__gethex+0x9a>
 800a0a0:	1c74      	adds	r4, r6, #1
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	4616      	mov	r6, r2
 800a0a6:	3201      	adds	r2, #1
 800a0a8:	7830      	ldrb	r0, [r6, #0]
 800a0aa:	f7ff ff9f 	bl	8009fec <__hexdig_fun>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d1f8      	bne.n	800a0a4 <__gethex+0x8c>
 800a0b2:	1ba4      	subs	r4, r4, r6
 800a0b4:	00a7      	lsls	r7, r4, #2
 800a0b6:	7833      	ldrb	r3, [r6, #0]
 800a0b8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a0bc:	2b50      	cmp	r3, #80	@ 0x50
 800a0be:	d13e      	bne.n	800a13e <__gethex+0x126>
 800a0c0:	7873      	ldrb	r3, [r6, #1]
 800a0c2:	2b2b      	cmp	r3, #43	@ 0x2b
 800a0c4:	d033      	beq.n	800a12e <__gethex+0x116>
 800a0c6:	2b2d      	cmp	r3, #45	@ 0x2d
 800a0c8:	d034      	beq.n	800a134 <__gethex+0x11c>
 800a0ca:	1c71      	adds	r1, r6, #1
 800a0cc:	2400      	movs	r4, #0
 800a0ce:	7808      	ldrb	r0, [r1, #0]
 800a0d0:	f7ff ff8c 	bl	8009fec <__hexdig_fun>
 800a0d4:	1e43      	subs	r3, r0, #1
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b18      	cmp	r3, #24
 800a0da:	d830      	bhi.n	800a13e <__gethex+0x126>
 800a0dc:	f1a0 0210 	sub.w	r2, r0, #16
 800a0e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0e4:	f7ff ff82 	bl	8009fec <__hexdig_fun>
 800a0e8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a0ec:	fa5f fc8c 	uxtb.w	ip, ip
 800a0f0:	f1bc 0f18 	cmp.w	ip, #24
 800a0f4:	f04f 030a 	mov.w	r3, #10
 800a0f8:	d91e      	bls.n	800a138 <__gethex+0x120>
 800a0fa:	b104      	cbz	r4, 800a0fe <__gethex+0xe6>
 800a0fc:	4252      	negs	r2, r2
 800a0fe:	4417      	add	r7, r2
 800a100:	f8ca 1000 	str.w	r1, [sl]
 800a104:	b1ed      	cbz	r5, 800a142 <__gethex+0x12a>
 800a106:	f1bb 0f00 	cmp.w	fp, #0
 800a10a:	bf0c      	ite	eq
 800a10c:	2506      	moveq	r5, #6
 800a10e:	2500      	movne	r5, #0
 800a110:	4628      	mov	r0, r5
 800a112:	b005      	add	sp, #20
 800a114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a118:	2500      	movs	r5, #0
 800a11a:	462c      	mov	r4, r5
 800a11c:	e7b0      	b.n	800a080 <__gethex+0x68>
 800a11e:	2c00      	cmp	r4, #0
 800a120:	d1c7      	bne.n	800a0b2 <__gethex+0x9a>
 800a122:	4627      	mov	r7, r4
 800a124:	e7c7      	b.n	800a0b6 <__gethex+0x9e>
 800a126:	464e      	mov	r6, r9
 800a128:	462f      	mov	r7, r5
 800a12a:	2501      	movs	r5, #1
 800a12c:	e7c3      	b.n	800a0b6 <__gethex+0x9e>
 800a12e:	2400      	movs	r4, #0
 800a130:	1cb1      	adds	r1, r6, #2
 800a132:	e7cc      	b.n	800a0ce <__gethex+0xb6>
 800a134:	2401      	movs	r4, #1
 800a136:	e7fb      	b.n	800a130 <__gethex+0x118>
 800a138:	fb03 0002 	mla	r0, r3, r2, r0
 800a13c:	e7ce      	b.n	800a0dc <__gethex+0xc4>
 800a13e:	4631      	mov	r1, r6
 800a140:	e7de      	b.n	800a100 <__gethex+0xe8>
 800a142:	eba6 0309 	sub.w	r3, r6, r9
 800a146:	3b01      	subs	r3, #1
 800a148:	4629      	mov	r1, r5
 800a14a:	2b07      	cmp	r3, #7
 800a14c:	dc0a      	bgt.n	800a164 <__gethex+0x14c>
 800a14e:	9801      	ldr	r0, [sp, #4]
 800a150:	f7fd ff9a 	bl	8008088 <_Balloc>
 800a154:	4604      	mov	r4, r0
 800a156:	b940      	cbnz	r0, 800a16a <__gethex+0x152>
 800a158:	4b5c      	ldr	r3, [pc, #368]	@ (800a2cc <__gethex+0x2b4>)
 800a15a:	4602      	mov	r2, r0
 800a15c:	21e4      	movs	r1, #228	@ 0xe4
 800a15e:	485c      	ldr	r0, [pc, #368]	@ (800a2d0 <__gethex+0x2b8>)
 800a160:	f7ff fec0 	bl	8009ee4 <__assert_func>
 800a164:	3101      	adds	r1, #1
 800a166:	105b      	asrs	r3, r3, #1
 800a168:	e7ef      	b.n	800a14a <__gethex+0x132>
 800a16a:	f100 0a14 	add.w	sl, r0, #20
 800a16e:	2300      	movs	r3, #0
 800a170:	4655      	mov	r5, sl
 800a172:	469b      	mov	fp, r3
 800a174:	45b1      	cmp	r9, r6
 800a176:	d337      	bcc.n	800a1e8 <__gethex+0x1d0>
 800a178:	f845 bb04 	str.w	fp, [r5], #4
 800a17c:	eba5 050a 	sub.w	r5, r5, sl
 800a180:	10ad      	asrs	r5, r5, #2
 800a182:	6125      	str	r5, [r4, #16]
 800a184:	4658      	mov	r0, fp
 800a186:	f7fe f871 	bl	800826c <__hi0bits>
 800a18a:	016d      	lsls	r5, r5, #5
 800a18c:	f8d8 6000 	ldr.w	r6, [r8]
 800a190:	1a2d      	subs	r5, r5, r0
 800a192:	42b5      	cmp	r5, r6
 800a194:	dd54      	ble.n	800a240 <__gethex+0x228>
 800a196:	1bad      	subs	r5, r5, r6
 800a198:	4629      	mov	r1, r5
 800a19a:	4620      	mov	r0, r4
 800a19c:	f7fe fbf3 	bl	8008986 <__any_on>
 800a1a0:	4681      	mov	r9, r0
 800a1a2:	b178      	cbz	r0, 800a1c4 <__gethex+0x1ac>
 800a1a4:	1e6b      	subs	r3, r5, #1
 800a1a6:	1159      	asrs	r1, r3, #5
 800a1a8:	f003 021f 	and.w	r2, r3, #31
 800a1ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a1b0:	f04f 0901 	mov.w	r9, #1
 800a1b4:	fa09 f202 	lsl.w	r2, r9, r2
 800a1b8:	420a      	tst	r2, r1
 800a1ba:	d003      	beq.n	800a1c4 <__gethex+0x1ac>
 800a1bc:	454b      	cmp	r3, r9
 800a1be:	dc36      	bgt.n	800a22e <__gethex+0x216>
 800a1c0:	f04f 0902 	mov.w	r9, #2
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7ff febe 	bl	8009f48 <rshift>
 800a1cc:	442f      	add	r7, r5
 800a1ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1d2:	42bb      	cmp	r3, r7
 800a1d4:	da42      	bge.n	800a25c <__gethex+0x244>
 800a1d6:	9801      	ldr	r0, [sp, #4]
 800a1d8:	4621      	mov	r1, r4
 800a1da:	f7fd ff95 	bl	8008108 <_Bfree>
 800a1de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	25a3      	movs	r5, #163	@ 0xa3
 800a1e6:	e793      	b.n	800a110 <__gethex+0xf8>
 800a1e8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a1ec:	2a2e      	cmp	r2, #46	@ 0x2e
 800a1ee:	d012      	beq.n	800a216 <__gethex+0x1fe>
 800a1f0:	2b20      	cmp	r3, #32
 800a1f2:	d104      	bne.n	800a1fe <__gethex+0x1e6>
 800a1f4:	f845 bb04 	str.w	fp, [r5], #4
 800a1f8:	f04f 0b00 	mov.w	fp, #0
 800a1fc:	465b      	mov	r3, fp
 800a1fe:	7830      	ldrb	r0, [r6, #0]
 800a200:	9303      	str	r3, [sp, #12]
 800a202:	f7ff fef3 	bl	8009fec <__hexdig_fun>
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	f000 000f 	and.w	r0, r0, #15
 800a20c:	4098      	lsls	r0, r3
 800a20e:	ea4b 0b00 	orr.w	fp, fp, r0
 800a212:	3304      	adds	r3, #4
 800a214:	e7ae      	b.n	800a174 <__gethex+0x15c>
 800a216:	45b1      	cmp	r9, r6
 800a218:	d8ea      	bhi.n	800a1f0 <__gethex+0x1d8>
 800a21a:	492b      	ldr	r1, [pc, #172]	@ (800a2c8 <__gethex+0x2b0>)
 800a21c:	9303      	str	r3, [sp, #12]
 800a21e:	2201      	movs	r2, #1
 800a220:	4630      	mov	r0, r6
 800a222:	f7ff fe07 	bl	8009e34 <strncmp>
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	2800      	cmp	r0, #0
 800a22a:	d1e1      	bne.n	800a1f0 <__gethex+0x1d8>
 800a22c:	e7a2      	b.n	800a174 <__gethex+0x15c>
 800a22e:	1ea9      	subs	r1, r5, #2
 800a230:	4620      	mov	r0, r4
 800a232:	f7fe fba8 	bl	8008986 <__any_on>
 800a236:	2800      	cmp	r0, #0
 800a238:	d0c2      	beq.n	800a1c0 <__gethex+0x1a8>
 800a23a:	f04f 0903 	mov.w	r9, #3
 800a23e:	e7c1      	b.n	800a1c4 <__gethex+0x1ac>
 800a240:	da09      	bge.n	800a256 <__gethex+0x23e>
 800a242:	1b75      	subs	r5, r6, r5
 800a244:	4621      	mov	r1, r4
 800a246:	9801      	ldr	r0, [sp, #4]
 800a248:	462a      	mov	r2, r5
 800a24a:	f7fe f96d 	bl	8008528 <__lshift>
 800a24e:	1b7f      	subs	r7, r7, r5
 800a250:	4604      	mov	r4, r0
 800a252:	f100 0a14 	add.w	sl, r0, #20
 800a256:	f04f 0900 	mov.w	r9, #0
 800a25a:	e7b8      	b.n	800a1ce <__gethex+0x1b6>
 800a25c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a260:	42bd      	cmp	r5, r7
 800a262:	dd6f      	ble.n	800a344 <__gethex+0x32c>
 800a264:	1bed      	subs	r5, r5, r7
 800a266:	42ae      	cmp	r6, r5
 800a268:	dc34      	bgt.n	800a2d4 <__gethex+0x2bc>
 800a26a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d022      	beq.n	800a2b8 <__gethex+0x2a0>
 800a272:	2b03      	cmp	r3, #3
 800a274:	d024      	beq.n	800a2c0 <__gethex+0x2a8>
 800a276:	2b01      	cmp	r3, #1
 800a278:	d115      	bne.n	800a2a6 <__gethex+0x28e>
 800a27a:	42ae      	cmp	r6, r5
 800a27c:	d113      	bne.n	800a2a6 <__gethex+0x28e>
 800a27e:	2e01      	cmp	r6, #1
 800a280:	d10b      	bne.n	800a29a <__gethex+0x282>
 800a282:	9a02      	ldr	r2, [sp, #8]
 800a284:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	2301      	movs	r3, #1
 800a28c:	6123      	str	r3, [r4, #16]
 800a28e:	f8ca 3000 	str.w	r3, [sl]
 800a292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a294:	2562      	movs	r5, #98	@ 0x62
 800a296:	601c      	str	r4, [r3, #0]
 800a298:	e73a      	b.n	800a110 <__gethex+0xf8>
 800a29a:	1e71      	subs	r1, r6, #1
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7fe fb72 	bl	8008986 <__any_on>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d1ed      	bne.n	800a282 <__gethex+0x26a>
 800a2a6:	9801      	ldr	r0, [sp, #4]
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	f7fd ff2d 	bl	8008108 <_Bfree>
 800a2ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	2550      	movs	r5, #80	@ 0x50
 800a2b6:	e72b      	b.n	800a110 <__gethex+0xf8>
 800a2b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1f3      	bne.n	800a2a6 <__gethex+0x28e>
 800a2be:	e7e0      	b.n	800a282 <__gethex+0x26a>
 800a2c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1dd      	bne.n	800a282 <__gethex+0x26a>
 800a2c6:	e7ee      	b.n	800a2a6 <__gethex+0x28e>
 800a2c8:	0800ab93 	.word	0x0800ab93
 800a2cc:	0800ab29 	.word	0x0800ab29
 800a2d0:	0800abea 	.word	0x0800abea
 800a2d4:	1e6f      	subs	r7, r5, #1
 800a2d6:	f1b9 0f00 	cmp.w	r9, #0
 800a2da:	d130      	bne.n	800a33e <__gethex+0x326>
 800a2dc:	b127      	cbz	r7, 800a2e8 <__gethex+0x2d0>
 800a2de:	4639      	mov	r1, r7
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f7fe fb50 	bl	8008986 <__any_on>
 800a2e6:	4681      	mov	r9, r0
 800a2e8:	117a      	asrs	r2, r7, #5
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a2f0:	f007 071f 	and.w	r7, r7, #31
 800a2f4:	40bb      	lsls	r3, r7
 800a2f6:	4213      	tst	r3, r2
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	bf18      	it	ne
 800a2fe:	f049 0902 	orrne.w	r9, r9, #2
 800a302:	f7ff fe21 	bl	8009f48 <rshift>
 800a306:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a30a:	1b76      	subs	r6, r6, r5
 800a30c:	2502      	movs	r5, #2
 800a30e:	f1b9 0f00 	cmp.w	r9, #0
 800a312:	d047      	beq.n	800a3a4 <__gethex+0x38c>
 800a314:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d015      	beq.n	800a348 <__gethex+0x330>
 800a31c:	2b03      	cmp	r3, #3
 800a31e:	d017      	beq.n	800a350 <__gethex+0x338>
 800a320:	2b01      	cmp	r3, #1
 800a322:	d109      	bne.n	800a338 <__gethex+0x320>
 800a324:	f019 0f02 	tst.w	r9, #2
 800a328:	d006      	beq.n	800a338 <__gethex+0x320>
 800a32a:	f8da 3000 	ldr.w	r3, [sl]
 800a32e:	ea49 0903 	orr.w	r9, r9, r3
 800a332:	f019 0f01 	tst.w	r9, #1
 800a336:	d10e      	bne.n	800a356 <__gethex+0x33e>
 800a338:	f045 0510 	orr.w	r5, r5, #16
 800a33c:	e032      	b.n	800a3a4 <__gethex+0x38c>
 800a33e:	f04f 0901 	mov.w	r9, #1
 800a342:	e7d1      	b.n	800a2e8 <__gethex+0x2d0>
 800a344:	2501      	movs	r5, #1
 800a346:	e7e2      	b.n	800a30e <__gethex+0x2f6>
 800a348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a34a:	f1c3 0301 	rsb	r3, r3, #1
 800a34e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0f0      	beq.n	800a338 <__gethex+0x320>
 800a356:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a35a:	f104 0314 	add.w	r3, r4, #20
 800a35e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a362:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a366:	f04f 0c00 	mov.w	ip, #0
 800a36a:	4618      	mov	r0, r3
 800a36c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a370:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a374:	d01b      	beq.n	800a3ae <__gethex+0x396>
 800a376:	3201      	adds	r2, #1
 800a378:	6002      	str	r2, [r0, #0]
 800a37a:	2d02      	cmp	r5, #2
 800a37c:	f104 0314 	add.w	r3, r4, #20
 800a380:	d13c      	bne.n	800a3fc <__gethex+0x3e4>
 800a382:	f8d8 2000 	ldr.w	r2, [r8]
 800a386:	3a01      	subs	r2, #1
 800a388:	42b2      	cmp	r2, r6
 800a38a:	d109      	bne.n	800a3a0 <__gethex+0x388>
 800a38c:	1171      	asrs	r1, r6, #5
 800a38e:	2201      	movs	r2, #1
 800a390:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a394:	f006 061f 	and.w	r6, r6, #31
 800a398:	fa02 f606 	lsl.w	r6, r2, r6
 800a39c:	421e      	tst	r6, r3
 800a39e:	d13a      	bne.n	800a416 <__gethex+0x3fe>
 800a3a0:	f045 0520 	orr.w	r5, r5, #32
 800a3a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3a6:	601c      	str	r4, [r3, #0]
 800a3a8:	9b02      	ldr	r3, [sp, #8]
 800a3aa:	601f      	str	r7, [r3, #0]
 800a3ac:	e6b0      	b.n	800a110 <__gethex+0xf8>
 800a3ae:	4299      	cmp	r1, r3
 800a3b0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a3b4:	d8d9      	bhi.n	800a36a <__gethex+0x352>
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	459b      	cmp	fp, r3
 800a3ba:	db17      	blt.n	800a3ec <__gethex+0x3d4>
 800a3bc:	6861      	ldr	r1, [r4, #4]
 800a3be:	9801      	ldr	r0, [sp, #4]
 800a3c0:	3101      	adds	r1, #1
 800a3c2:	f7fd fe61 	bl	8008088 <_Balloc>
 800a3c6:	4681      	mov	r9, r0
 800a3c8:	b918      	cbnz	r0, 800a3d2 <__gethex+0x3ba>
 800a3ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a434 <__gethex+0x41c>)
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	2184      	movs	r1, #132	@ 0x84
 800a3d0:	e6c5      	b.n	800a15e <__gethex+0x146>
 800a3d2:	6922      	ldr	r2, [r4, #16]
 800a3d4:	3202      	adds	r2, #2
 800a3d6:	f104 010c 	add.w	r1, r4, #12
 800a3da:	0092      	lsls	r2, r2, #2
 800a3dc:	300c      	adds	r0, #12
 800a3de:	f7ff fd6d 	bl	8009ebc <memcpy>
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	9801      	ldr	r0, [sp, #4]
 800a3e6:	f7fd fe8f 	bl	8008108 <_Bfree>
 800a3ea:	464c      	mov	r4, r9
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3f4:	6122      	str	r2, [r4, #16]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	615a      	str	r2, [r3, #20]
 800a3fa:	e7be      	b.n	800a37a <__gethex+0x362>
 800a3fc:	6922      	ldr	r2, [r4, #16]
 800a3fe:	455a      	cmp	r2, fp
 800a400:	dd0b      	ble.n	800a41a <__gethex+0x402>
 800a402:	2101      	movs	r1, #1
 800a404:	4620      	mov	r0, r4
 800a406:	f7ff fd9f 	bl	8009f48 <rshift>
 800a40a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a40e:	3701      	adds	r7, #1
 800a410:	42bb      	cmp	r3, r7
 800a412:	f6ff aee0 	blt.w	800a1d6 <__gethex+0x1be>
 800a416:	2501      	movs	r5, #1
 800a418:	e7c2      	b.n	800a3a0 <__gethex+0x388>
 800a41a:	f016 061f 	ands.w	r6, r6, #31
 800a41e:	d0fa      	beq.n	800a416 <__gethex+0x3fe>
 800a420:	4453      	add	r3, sl
 800a422:	f1c6 0620 	rsb	r6, r6, #32
 800a426:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a42a:	f7fd ff1f 	bl	800826c <__hi0bits>
 800a42e:	42b0      	cmp	r0, r6
 800a430:	dbe7      	blt.n	800a402 <__gethex+0x3ea>
 800a432:	e7f0      	b.n	800a416 <__gethex+0x3fe>
 800a434:	0800ab29 	.word	0x0800ab29

0800a438 <L_shift>:
 800a438:	f1c2 0208 	rsb	r2, r2, #8
 800a43c:	0092      	lsls	r2, r2, #2
 800a43e:	b570      	push	{r4, r5, r6, lr}
 800a440:	f1c2 0620 	rsb	r6, r2, #32
 800a444:	6843      	ldr	r3, [r0, #4]
 800a446:	6804      	ldr	r4, [r0, #0]
 800a448:	fa03 f506 	lsl.w	r5, r3, r6
 800a44c:	432c      	orrs	r4, r5
 800a44e:	40d3      	lsrs	r3, r2
 800a450:	6004      	str	r4, [r0, #0]
 800a452:	f840 3f04 	str.w	r3, [r0, #4]!
 800a456:	4288      	cmp	r0, r1
 800a458:	d3f4      	bcc.n	800a444 <L_shift+0xc>
 800a45a:	bd70      	pop	{r4, r5, r6, pc}

0800a45c <__match>:
 800a45c:	b530      	push	{r4, r5, lr}
 800a45e:	6803      	ldr	r3, [r0, #0]
 800a460:	3301      	adds	r3, #1
 800a462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a466:	b914      	cbnz	r4, 800a46e <__match+0x12>
 800a468:	6003      	str	r3, [r0, #0]
 800a46a:	2001      	movs	r0, #1
 800a46c:	bd30      	pop	{r4, r5, pc}
 800a46e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a472:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a476:	2d19      	cmp	r5, #25
 800a478:	bf98      	it	ls
 800a47a:	3220      	addls	r2, #32
 800a47c:	42a2      	cmp	r2, r4
 800a47e:	d0f0      	beq.n	800a462 <__match+0x6>
 800a480:	2000      	movs	r0, #0
 800a482:	e7f3      	b.n	800a46c <__match+0x10>

0800a484 <__hexnan>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	680b      	ldr	r3, [r1, #0]
 800a48a:	6801      	ldr	r1, [r0, #0]
 800a48c:	115e      	asrs	r6, r3, #5
 800a48e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a492:	f013 031f 	ands.w	r3, r3, #31
 800a496:	b087      	sub	sp, #28
 800a498:	bf18      	it	ne
 800a49a:	3604      	addne	r6, #4
 800a49c:	2500      	movs	r5, #0
 800a49e:	1f37      	subs	r7, r6, #4
 800a4a0:	4682      	mov	sl, r0
 800a4a2:	4690      	mov	r8, r2
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a4aa:	46b9      	mov	r9, r7
 800a4ac:	463c      	mov	r4, r7
 800a4ae:	9502      	str	r5, [sp, #8]
 800a4b0:	46ab      	mov	fp, r5
 800a4b2:	784a      	ldrb	r2, [r1, #1]
 800a4b4:	1c4b      	adds	r3, r1, #1
 800a4b6:	9303      	str	r3, [sp, #12]
 800a4b8:	b342      	cbz	r2, 800a50c <__hexnan+0x88>
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	9105      	str	r1, [sp, #20]
 800a4be:	9204      	str	r2, [sp, #16]
 800a4c0:	f7ff fd94 	bl	8009fec <__hexdig_fun>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d151      	bne.n	800a56c <__hexnan+0xe8>
 800a4c8:	9a04      	ldr	r2, [sp, #16]
 800a4ca:	9905      	ldr	r1, [sp, #20]
 800a4cc:	2a20      	cmp	r2, #32
 800a4ce:	d818      	bhi.n	800a502 <__hexnan+0x7e>
 800a4d0:	9b02      	ldr	r3, [sp, #8]
 800a4d2:	459b      	cmp	fp, r3
 800a4d4:	dd13      	ble.n	800a4fe <__hexnan+0x7a>
 800a4d6:	454c      	cmp	r4, r9
 800a4d8:	d206      	bcs.n	800a4e8 <__hexnan+0x64>
 800a4da:	2d07      	cmp	r5, #7
 800a4dc:	dc04      	bgt.n	800a4e8 <__hexnan+0x64>
 800a4de:	462a      	mov	r2, r5
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f7ff ffa8 	bl	800a438 <L_shift>
 800a4e8:	4544      	cmp	r4, r8
 800a4ea:	d952      	bls.n	800a592 <__hexnan+0x10e>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f1a4 0904 	sub.w	r9, r4, #4
 800a4f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4f6:	f8cd b008 	str.w	fp, [sp, #8]
 800a4fa:	464c      	mov	r4, r9
 800a4fc:	461d      	mov	r5, r3
 800a4fe:	9903      	ldr	r1, [sp, #12]
 800a500:	e7d7      	b.n	800a4b2 <__hexnan+0x2e>
 800a502:	2a29      	cmp	r2, #41	@ 0x29
 800a504:	d157      	bne.n	800a5b6 <__hexnan+0x132>
 800a506:	3102      	adds	r1, #2
 800a508:	f8ca 1000 	str.w	r1, [sl]
 800a50c:	f1bb 0f00 	cmp.w	fp, #0
 800a510:	d051      	beq.n	800a5b6 <__hexnan+0x132>
 800a512:	454c      	cmp	r4, r9
 800a514:	d206      	bcs.n	800a524 <__hexnan+0xa0>
 800a516:	2d07      	cmp	r5, #7
 800a518:	dc04      	bgt.n	800a524 <__hexnan+0xa0>
 800a51a:	462a      	mov	r2, r5
 800a51c:	4649      	mov	r1, r9
 800a51e:	4620      	mov	r0, r4
 800a520:	f7ff ff8a 	bl	800a438 <L_shift>
 800a524:	4544      	cmp	r4, r8
 800a526:	d936      	bls.n	800a596 <__hexnan+0x112>
 800a528:	f1a8 0204 	sub.w	r2, r8, #4
 800a52c:	4623      	mov	r3, r4
 800a52e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a532:	f842 1f04 	str.w	r1, [r2, #4]!
 800a536:	429f      	cmp	r7, r3
 800a538:	d2f9      	bcs.n	800a52e <__hexnan+0xaa>
 800a53a:	1b3b      	subs	r3, r7, r4
 800a53c:	f023 0303 	bic.w	r3, r3, #3
 800a540:	3304      	adds	r3, #4
 800a542:	3401      	adds	r4, #1
 800a544:	3e03      	subs	r6, #3
 800a546:	42b4      	cmp	r4, r6
 800a548:	bf88      	it	hi
 800a54a:	2304      	movhi	r3, #4
 800a54c:	4443      	add	r3, r8
 800a54e:	2200      	movs	r2, #0
 800a550:	f843 2b04 	str.w	r2, [r3], #4
 800a554:	429f      	cmp	r7, r3
 800a556:	d2fb      	bcs.n	800a550 <__hexnan+0xcc>
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	b91b      	cbnz	r3, 800a564 <__hexnan+0xe0>
 800a55c:	4547      	cmp	r7, r8
 800a55e:	d128      	bne.n	800a5b2 <__hexnan+0x12e>
 800a560:	2301      	movs	r3, #1
 800a562:	603b      	str	r3, [r7, #0]
 800a564:	2005      	movs	r0, #5
 800a566:	b007      	add	sp, #28
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	3501      	adds	r5, #1
 800a56e:	2d08      	cmp	r5, #8
 800a570:	f10b 0b01 	add.w	fp, fp, #1
 800a574:	dd06      	ble.n	800a584 <__hexnan+0x100>
 800a576:	4544      	cmp	r4, r8
 800a578:	d9c1      	bls.n	800a4fe <__hexnan+0x7a>
 800a57a:	2300      	movs	r3, #0
 800a57c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a580:	2501      	movs	r5, #1
 800a582:	3c04      	subs	r4, #4
 800a584:	6822      	ldr	r2, [r4, #0]
 800a586:	f000 000f 	and.w	r0, r0, #15
 800a58a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a58e:	6020      	str	r0, [r4, #0]
 800a590:	e7b5      	b.n	800a4fe <__hexnan+0x7a>
 800a592:	2508      	movs	r5, #8
 800a594:	e7b3      	b.n	800a4fe <__hexnan+0x7a>
 800a596:	9b01      	ldr	r3, [sp, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0dd      	beq.n	800a558 <__hexnan+0xd4>
 800a59c:	f1c3 0320 	rsb	r3, r3, #32
 800a5a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5a4:	40da      	lsrs	r2, r3
 800a5a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	f846 3c04 	str.w	r3, [r6, #-4]
 800a5b0:	e7d2      	b.n	800a558 <__hexnan+0xd4>
 800a5b2:	3f04      	subs	r7, #4
 800a5b4:	e7d0      	b.n	800a558 <__hexnan+0xd4>
 800a5b6:	2004      	movs	r0, #4
 800a5b8:	e7d5      	b.n	800a566 <__hexnan+0xe2>

0800a5ba <__ascii_mbtowc>:
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	b901      	cbnz	r1, 800a5c0 <__ascii_mbtowc+0x6>
 800a5be:	a901      	add	r1, sp, #4
 800a5c0:	b142      	cbz	r2, 800a5d4 <__ascii_mbtowc+0x1a>
 800a5c2:	b14b      	cbz	r3, 800a5d8 <__ascii_mbtowc+0x1e>
 800a5c4:	7813      	ldrb	r3, [r2, #0]
 800a5c6:	600b      	str	r3, [r1, #0]
 800a5c8:	7812      	ldrb	r2, [r2, #0]
 800a5ca:	1e10      	subs	r0, r2, #0
 800a5cc:	bf18      	it	ne
 800a5ce:	2001      	movne	r0, #1
 800a5d0:	b002      	add	sp, #8
 800a5d2:	4770      	bx	lr
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	e7fb      	b.n	800a5d0 <__ascii_mbtowc+0x16>
 800a5d8:	f06f 0001 	mvn.w	r0, #1
 800a5dc:	e7f8      	b.n	800a5d0 <__ascii_mbtowc+0x16>

0800a5de <_realloc_r>:
 800a5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e2:	4607      	mov	r7, r0
 800a5e4:	4614      	mov	r4, r2
 800a5e6:	460d      	mov	r5, r1
 800a5e8:	b921      	cbnz	r1, 800a5f4 <_realloc_r+0x16>
 800a5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	f7fd bcbe 	b.w	8007f70 <_malloc_r>
 800a5f4:	b92a      	cbnz	r2, 800a602 <_realloc_r+0x24>
 800a5f6:	f7fd fc47 	bl	8007e88 <_free_r>
 800a5fa:	4625      	mov	r5, r4
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a602:	f000 f840 	bl	800a686 <_malloc_usable_size_r>
 800a606:	4284      	cmp	r4, r0
 800a608:	4606      	mov	r6, r0
 800a60a:	d802      	bhi.n	800a612 <_realloc_r+0x34>
 800a60c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a610:	d8f4      	bhi.n	800a5fc <_realloc_r+0x1e>
 800a612:	4621      	mov	r1, r4
 800a614:	4638      	mov	r0, r7
 800a616:	f7fd fcab 	bl	8007f70 <_malloc_r>
 800a61a:	4680      	mov	r8, r0
 800a61c:	b908      	cbnz	r0, 800a622 <_realloc_r+0x44>
 800a61e:	4645      	mov	r5, r8
 800a620:	e7ec      	b.n	800a5fc <_realloc_r+0x1e>
 800a622:	42b4      	cmp	r4, r6
 800a624:	4622      	mov	r2, r4
 800a626:	4629      	mov	r1, r5
 800a628:	bf28      	it	cs
 800a62a:	4632      	movcs	r2, r6
 800a62c:	f7ff fc46 	bl	8009ebc <memcpy>
 800a630:	4629      	mov	r1, r5
 800a632:	4638      	mov	r0, r7
 800a634:	f7fd fc28 	bl	8007e88 <_free_r>
 800a638:	e7f1      	b.n	800a61e <_realloc_r+0x40>

0800a63a <__ascii_wctomb>:
 800a63a:	4603      	mov	r3, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	b141      	cbz	r1, 800a652 <__ascii_wctomb+0x18>
 800a640:	2aff      	cmp	r2, #255	@ 0xff
 800a642:	d904      	bls.n	800a64e <__ascii_wctomb+0x14>
 800a644:	228a      	movs	r2, #138	@ 0x8a
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a64c:	4770      	bx	lr
 800a64e:	700a      	strb	r2, [r1, #0]
 800a650:	2001      	movs	r0, #1
 800a652:	4770      	bx	lr

0800a654 <fiprintf>:
 800a654:	b40e      	push	{r1, r2, r3}
 800a656:	b503      	push	{r0, r1, lr}
 800a658:	4601      	mov	r1, r0
 800a65a:	ab03      	add	r3, sp, #12
 800a65c:	4805      	ldr	r0, [pc, #20]	@ (800a674 <fiprintf+0x20>)
 800a65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a662:	6800      	ldr	r0, [r0, #0]
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	f7ff f9a9 	bl	80099bc <_vfiprintf_r>
 800a66a:	b002      	add	sp, #8
 800a66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a670:	b003      	add	sp, #12
 800a672:	4770      	bx	lr
 800a674:	20000024 	.word	0x20000024

0800a678 <abort>:
 800a678:	b508      	push	{r3, lr}
 800a67a:	2006      	movs	r0, #6
 800a67c:	f000 f834 	bl	800a6e8 <raise>
 800a680:	2001      	movs	r0, #1
 800a682:	f7f7 f9d1 	bl	8001a28 <_exit>

0800a686 <_malloc_usable_size_r>:
 800a686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a68a:	1f18      	subs	r0, r3, #4
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfbc      	itt	lt
 800a690:	580b      	ldrlt	r3, [r1, r0]
 800a692:	18c0      	addlt	r0, r0, r3
 800a694:	4770      	bx	lr

0800a696 <_raise_r>:
 800a696:	291f      	cmp	r1, #31
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4605      	mov	r5, r0
 800a69c:	460c      	mov	r4, r1
 800a69e:	d904      	bls.n	800a6aa <_raise_r+0x14>
 800a6a0:	2316      	movs	r3, #22
 800a6a2:	6003      	str	r3, [r0, #0]
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6ac:	b112      	cbz	r2, 800a6b4 <_raise_r+0x1e>
 800a6ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6b2:	b94b      	cbnz	r3, 800a6c8 <_raise_r+0x32>
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f000 f831 	bl	800a71c <_getpid_r>
 800a6ba:	4622      	mov	r2, r4
 800a6bc:	4601      	mov	r1, r0
 800a6be:	4628      	mov	r0, r5
 800a6c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6c4:	f000 b818 	b.w	800a6f8 <_kill_r>
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d00a      	beq.n	800a6e2 <_raise_r+0x4c>
 800a6cc:	1c59      	adds	r1, r3, #1
 800a6ce:	d103      	bne.n	800a6d8 <_raise_r+0x42>
 800a6d0:	2316      	movs	r3, #22
 800a6d2:	6003      	str	r3, [r0, #0]
 800a6d4:	2001      	movs	r0, #1
 800a6d6:	e7e7      	b.n	800a6a8 <_raise_r+0x12>
 800a6d8:	2100      	movs	r1, #0
 800a6da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a6de:	4620      	mov	r0, r4
 800a6e0:	4798      	blx	r3
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	e7e0      	b.n	800a6a8 <_raise_r+0x12>
	...

0800a6e8 <raise>:
 800a6e8:	4b02      	ldr	r3, [pc, #8]	@ (800a6f4 <raise+0xc>)
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	f7ff bfd2 	b.w	800a696 <_raise_r>
 800a6f2:	bf00      	nop
 800a6f4:	20000024 	.word	0x20000024

0800a6f8 <_kill_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d07      	ldr	r5, [pc, #28]	@ (800a718 <_kill_r+0x20>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4604      	mov	r4, r0
 800a700:	4608      	mov	r0, r1
 800a702:	4611      	mov	r1, r2
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	f7f7 f97f 	bl	8001a08 <_kill>
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	d102      	bne.n	800a714 <_kill_r+0x1c>
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	b103      	cbz	r3, 800a714 <_kill_r+0x1c>
 800a712:	6023      	str	r3, [r4, #0]
 800a714:	bd38      	pop	{r3, r4, r5, pc}
 800a716:	bf00      	nop
 800a718:	200004f0 	.word	0x200004f0

0800a71c <_getpid_r>:
 800a71c:	f7f7 b96d 	b.w	80019fa <_getpid>

0800a720 <_init>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	bf00      	nop
 800a724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a726:	bc08      	pop	{r3}
 800a728:	469e      	mov	lr, r3
 800a72a:	4770      	bx	lr

0800a72c <_fini>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	bf00      	nop
 800a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a732:	bc08      	pop	{r3}
 800a734:	469e      	mov	lr, r3
 800a736:	4770      	bx	lr
