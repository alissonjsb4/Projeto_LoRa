
Placa2_Rx_Estacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000871c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  08008860  08008860  00009860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f14  08008f14  0000a1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f14  08008f14  00009f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f1c  08008f1c  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f1c  08008f1c  00009f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f20  08008f20  00009f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008f24  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001e0  08009104  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08009104  0000a500  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ff2  00000000  00000000  0000a20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f0  00000000  00000000  0001f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  000226f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001013  00000000  00000000  00023c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6f3  00000000  00000000  00024c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142b2  00000000  00000000  0004435e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b89ba  00000000  00000000  00058610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110fca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f4  00000000  00000000  00111010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00117804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08008844 	.word	0x08008844

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08008844 	.word	0x08008844

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_uldivmod>:
 8001014:	b953      	cbnz	r3, 800102c <__aeabi_uldivmod+0x18>
 8001016:	b94a      	cbnz	r2, 800102c <__aeabi_uldivmod+0x18>
 8001018:	2900      	cmp	r1, #0
 800101a:	bf08      	it	eq
 800101c:	2800      	cmpeq	r0, #0
 800101e:	bf1c      	itt	ne
 8001020:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001024:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001028:	f000 b988 	b.w	800133c <__aeabi_idiv0>
 800102c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001034:	f000 f806 	bl	8001044 <__udivmoddi4>
 8001038:	f8dd e004 	ldr.w	lr, [sp, #4]
 800103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr

08001044 <__udivmoddi4>:
 8001044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	9d08      	ldr	r5, [sp, #32]
 800104a:	468e      	mov	lr, r1
 800104c:	4604      	mov	r4, r0
 800104e:	4688      	mov	r8, r1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d14a      	bne.n	80010ea <__udivmoddi4+0xa6>
 8001054:	428a      	cmp	r2, r1
 8001056:	4617      	mov	r7, r2
 8001058:	d962      	bls.n	8001120 <__udivmoddi4+0xdc>
 800105a:	fab2 f682 	clz	r6, r2
 800105e:	b14e      	cbz	r6, 8001074 <__udivmoddi4+0x30>
 8001060:	f1c6 0320 	rsb	r3, r6, #32
 8001064:	fa01 f806 	lsl.w	r8, r1, r6
 8001068:	fa20 f303 	lsr.w	r3, r0, r3
 800106c:	40b7      	lsls	r7, r6
 800106e:	ea43 0808 	orr.w	r8, r3, r8
 8001072:	40b4      	lsls	r4, r6
 8001074:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001078:	fa1f fc87 	uxth.w	ip, r7
 800107c:	fbb8 f1fe 	udiv	r1, r8, lr
 8001080:	0c23      	lsrs	r3, r4, #16
 8001082:	fb0e 8811 	mls	r8, lr, r1, r8
 8001086:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800108a:	fb01 f20c 	mul.w	r2, r1, ip
 800108e:	429a      	cmp	r2, r3
 8001090:	d909      	bls.n	80010a6 <__udivmoddi4+0x62>
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001098:	f080 80ea 	bcs.w	8001270 <__udivmoddi4+0x22c>
 800109c:	429a      	cmp	r2, r3
 800109e:	f240 80e7 	bls.w	8001270 <__udivmoddi4+0x22c>
 80010a2:	3902      	subs	r1, #2
 80010a4:	443b      	add	r3, r7
 80010a6:	1a9a      	subs	r2, r3, r2
 80010a8:	b2a3      	uxth	r3, r4
 80010aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80010ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80010b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80010ba:	459c      	cmp	ip, r3
 80010bc:	d909      	bls.n	80010d2 <__udivmoddi4+0x8e>
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80010c4:	f080 80d6 	bcs.w	8001274 <__udivmoddi4+0x230>
 80010c8:	459c      	cmp	ip, r3
 80010ca:	f240 80d3 	bls.w	8001274 <__udivmoddi4+0x230>
 80010ce:	443b      	add	r3, r7
 80010d0:	3802      	subs	r0, #2
 80010d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010d6:	eba3 030c 	sub.w	r3, r3, ip
 80010da:	2100      	movs	r1, #0
 80010dc:	b11d      	cbz	r5, 80010e6 <__udivmoddi4+0xa2>
 80010de:	40f3      	lsrs	r3, r6
 80010e0:	2200      	movs	r2, #0
 80010e2:	e9c5 3200 	strd	r3, r2, [r5]
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d905      	bls.n	80010fa <__udivmoddi4+0xb6>
 80010ee:	b10d      	cbz	r5, 80010f4 <__udivmoddi4+0xb0>
 80010f0:	e9c5 0100 	strd	r0, r1, [r5]
 80010f4:	2100      	movs	r1, #0
 80010f6:	4608      	mov	r0, r1
 80010f8:	e7f5      	b.n	80010e6 <__udivmoddi4+0xa2>
 80010fa:	fab3 f183 	clz	r1, r3
 80010fe:	2900      	cmp	r1, #0
 8001100:	d146      	bne.n	8001190 <__udivmoddi4+0x14c>
 8001102:	4573      	cmp	r3, lr
 8001104:	d302      	bcc.n	800110c <__udivmoddi4+0xc8>
 8001106:	4282      	cmp	r2, r0
 8001108:	f200 8105 	bhi.w	8001316 <__udivmoddi4+0x2d2>
 800110c:	1a84      	subs	r4, r0, r2
 800110e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001112:	2001      	movs	r0, #1
 8001114:	4690      	mov	r8, r2
 8001116:	2d00      	cmp	r5, #0
 8001118:	d0e5      	beq.n	80010e6 <__udivmoddi4+0xa2>
 800111a:	e9c5 4800 	strd	r4, r8, [r5]
 800111e:	e7e2      	b.n	80010e6 <__udivmoddi4+0xa2>
 8001120:	2a00      	cmp	r2, #0
 8001122:	f000 8090 	beq.w	8001246 <__udivmoddi4+0x202>
 8001126:	fab2 f682 	clz	r6, r2
 800112a:	2e00      	cmp	r6, #0
 800112c:	f040 80a4 	bne.w	8001278 <__udivmoddi4+0x234>
 8001130:	1a8a      	subs	r2, r1, r2
 8001132:	0c03      	lsrs	r3, r0, #16
 8001134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001138:	b280      	uxth	r0, r0
 800113a:	b2bc      	uxth	r4, r7
 800113c:	2101      	movs	r1, #1
 800113e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001142:	fb0e 221c 	mls	r2, lr, ip, r2
 8001146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800114a:	fb04 f20c 	mul.w	r2, r4, ip
 800114e:	429a      	cmp	r2, r3
 8001150:	d907      	bls.n	8001162 <__udivmoddi4+0x11e>
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8001158:	d202      	bcs.n	8001160 <__udivmoddi4+0x11c>
 800115a:	429a      	cmp	r2, r3
 800115c:	f200 80e0 	bhi.w	8001320 <__udivmoddi4+0x2dc>
 8001160:	46c4      	mov	ip, r8
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	fbb3 f2fe 	udiv	r2, r3, lr
 8001168:	fb0e 3312 	mls	r3, lr, r2, r3
 800116c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001170:	fb02 f404 	mul.w	r4, r2, r4
 8001174:	429c      	cmp	r4, r3
 8001176:	d907      	bls.n	8001188 <__udivmoddi4+0x144>
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800117e:	d202      	bcs.n	8001186 <__udivmoddi4+0x142>
 8001180:	429c      	cmp	r4, r3
 8001182:	f200 80ca 	bhi.w	800131a <__udivmoddi4+0x2d6>
 8001186:	4602      	mov	r2, r0
 8001188:	1b1b      	subs	r3, r3, r4
 800118a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800118e:	e7a5      	b.n	80010dc <__udivmoddi4+0x98>
 8001190:	f1c1 0620 	rsb	r6, r1, #32
 8001194:	408b      	lsls	r3, r1
 8001196:	fa22 f706 	lsr.w	r7, r2, r6
 800119a:	431f      	orrs	r7, r3
 800119c:	fa0e f401 	lsl.w	r4, lr, r1
 80011a0:	fa20 f306 	lsr.w	r3, r0, r6
 80011a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80011a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80011ac:	4323      	orrs	r3, r4
 80011ae:	fa00 f801 	lsl.w	r8, r0, r1
 80011b2:	fa1f fc87 	uxth.w	ip, r7
 80011b6:	fbbe f0f9 	udiv	r0, lr, r9
 80011ba:	0c1c      	lsrs	r4, r3, #16
 80011bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80011c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80011c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80011c8:	45a6      	cmp	lr, r4
 80011ca:	fa02 f201 	lsl.w	r2, r2, r1
 80011ce:	d909      	bls.n	80011e4 <__udivmoddi4+0x1a0>
 80011d0:	193c      	adds	r4, r7, r4
 80011d2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80011d6:	f080 809c 	bcs.w	8001312 <__udivmoddi4+0x2ce>
 80011da:	45a6      	cmp	lr, r4
 80011dc:	f240 8099 	bls.w	8001312 <__udivmoddi4+0x2ce>
 80011e0:	3802      	subs	r0, #2
 80011e2:	443c      	add	r4, r7
 80011e4:	eba4 040e 	sub.w	r4, r4, lr
 80011e8:	fa1f fe83 	uxth.w	lr, r3
 80011ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80011f0:	fb09 4413 	mls	r4, r9, r3, r4
 80011f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80011f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80011fc:	45a4      	cmp	ip, r4
 80011fe:	d908      	bls.n	8001212 <__udivmoddi4+0x1ce>
 8001200:	193c      	adds	r4, r7, r4
 8001202:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8001206:	f080 8082 	bcs.w	800130e <__udivmoddi4+0x2ca>
 800120a:	45a4      	cmp	ip, r4
 800120c:	d97f      	bls.n	800130e <__udivmoddi4+0x2ca>
 800120e:	3b02      	subs	r3, #2
 8001210:	443c      	add	r4, r7
 8001212:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001216:	eba4 040c 	sub.w	r4, r4, ip
 800121a:	fba0 ec02 	umull	lr, ip, r0, r2
 800121e:	4564      	cmp	r4, ip
 8001220:	4673      	mov	r3, lr
 8001222:	46e1      	mov	r9, ip
 8001224:	d362      	bcc.n	80012ec <__udivmoddi4+0x2a8>
 8001226:	d05f      	beq.n	80012e8 <__udivmoddi4+0x2a4>
 8001228:	b15d      	cbz	r5, 8001242 <__udivmoddi4+0x1fe>
 800122a:	ebb8 0203 	subs.w	r2, r8, r3
 800122e:	eb64 0409 	sbc.w	r4, r4, r9
 8001232:	fa04 f606 	lsl.w	r6, r4, r6
 8001236:	fa22 f301 	lsr.w	r3, r2, r1
 800123a:	431e      	orrs	r6, r3
 800123c:	40cc      	lsrs	r4, r1
 800123e:	e9c5 6400 	strd	r6, r4, [r5]
 8001242:	2100      	movs	r1, #0
 8001244:	e74f      	b.n	80010e6 <__udivmoddi4+0xa2>
 8001246:	fbb1 fcf2 	udiv	ip, r1, r2
 800124a:	0c01      	lsrs	r1, r0, #16
 800124c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001250:	b280      	uxth	r0, r0
 8001252:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001256:	463b      	mov	r3, r7
 8001258:	4638      	mov	r0, r7
 800125a:	463c      	mov	r4, r7
 800125c:	46b8      	mov	r8, r7
 800125e:	46be      	mov	lr, r7
 8001260:	2620      	movs	r6, #32
 8001262:	fbb1 f1f7 	udiv	r1, r1, r7
 8001266:	eba2 0208 	sub.w	r2, r2, r8
 800126a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800126e:	e766      	b.n	800113e <__udivmoddi4+0xfa>
 8001270:	4601      	mov	r1, r0
 8001272:	e718      	b.n	80010a6 <__udivmoddi4+0x62>
 8001274:	4610      	mov	r0, r2
 8001276:	e72c      	b.n	80010d2 <__udivmoddi4+0x8e>
 8001278:	f1c6 0220 	rsb	r2, r6, #32
 800127c:	fa2e f302 	lsr.w	r3, lr, r2
 8001280:	40b7      	lsls	r7, r6
 8001282:	40b1      	lsls	r1, r6
 8001284:	fa20 f202 	lsr.w	r2, r0, r2
 8001288:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800128c:	430a      	orrs	r2, r1
 800128e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001292:	b2bc      	uxth	r4, r7
 8001294:	fb0e 3318 	mls	r3, lr, r8, r3
 8001298:	0c11      	lsrs	r1, r2, #16
 800129a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800129e:	fb08 f904 	mul.w	r9, r8, r4
 80012a2:	40b0      	lsls	r0, r6
 80012a4:	4589      	cmp	r9, r1
 80012a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80012aa:	b280      	uxth	r0, r0
 80012ac:	d93e      	bls.n	800132c <__udivmoddi4+0x2e8>
 80012ae:	1879      	adds	r1, r7, r1
 80012b0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80012b4:	d201      	bcs.n	80012ba <__udivmoddi4+0x276>
 80012b6:	4589      	cmp	r9, r1
 80012b8:	d81f      	bhi.n	80012fa <__udivmoddi4+0x2b6>
 80012ba:	eba1 0109 	sub.w	r1, r1, r9
 80012be:	fbb1 f9fe 	udiv	r9, r1, lr
 80012c2:	fb09 f804 	mul.w	r8, r9, r4
 80012c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80012ca:	b292      	uxth	r2, r2
 80012cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012d0:	4542      	cmp	r2, r8
 80012d2:	d229      	bcs.n	8001328 <__udivmoddi4+0x2e4>
 80012d4:	18ba      	adds	r2, r7, r2
 80012d6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80012da:	d2c4      	bcs.n	8001266 <__udivmoddi4+0x222>
 80012dc:	4542      	cmp	r2, r8
 80012de:	d2c2      	bcs.n	8001266 <__udivmoddi4+0x222>
 80012e0:	f1a9 0102 	sub.w	r1, r9, #2
 80012e4:	443a      	add	r2, r7
 80012e6:	e7be      	b.n	8001266 <__udivmoddi4+0x222>
 80012e8:	45f0      	cmp	r8, lr
 80012ea:	d29d      	bcs.n	8001228 <__udivmoddi4+0x1e4>
 80012ec:	ebbe 0302 	subs.w	r3, lr, r2
 80012f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012f4:	3801      	subs	r0, #1
 80012f6:	46e1      	mov	r9, ip
 80012f8:	e796      	b.n	8001228 <__udivmoddi4+0x1e4>
 80012fa:	eba7 0909 	sub.w	r9, r7, r9
 80012fe:	4449      	add	r1, r9
 8001300:	f1a8 0c02 	sub.w	ip, r8, #2
 8001304:	fbb1 f9fe 	udiv	r9, r1, lr
 8001308:	fb09 f804 	mul.w	r8, r9, r4
 800130c:	e7db      	b.n	80012c6 <__udivmoddi4+0x282>
 800130e:	4673      	mov	r3, lr
 8001310:	e77f      	b.n	8001212 <__udivmoddi4+0x1ce>
 8001312:	4650      	mov	r0, sl
 8001314:	e766      	b.n	80011e4 <__udivmoddi4+0x1a0>
 8001316:	4608      	mov	r0, r1
 8001318:	e6fd      	b.n	8001116 <__udivmoddi4+0xd2>
 800131a:	443b      	add	r3, r7
 800131c:	3a02      	subs	r2, #2
 800131e:	e733      	b.n	8001188 <__udivmoddi4+0x144>
 8001320:	f1ac 0c02 	sub.w	ip, ip, #2
 8001324:	443b      	add	r3, r7
 8001326:	e71c      	b.n	8001162 <__udivmoddi4+0x11e>
 8001328:	4649      	mov	r1, r9
 800132a:	e79c      	b.n	8001266 <__udivmoddi4+0x222>
 800132c:	eba1 0109 	sub.w	r1, r1, r9
 8001330:	46c4      	mov	ip, r8
 8001332:	fbb1 f9fe 	udiv	r9, r1, lr
 8001336:	fb09 f804 	mul.w	r8, r9, r4
 800133a:	e7c4      	b.n	80012c6 <__udivmoddi4+0x282>

0800133c <__aeabi_idiv0>:
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800134e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800135c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001384:	2004      	movs	r0, #4
 8001386:	f7ff ffdb 	bl	8001340 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2002      	movs	r0, #2
 800138c:	f7ff ffd8 	bl	8001340 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff ffd5 	bl	8001340 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800139c:	4813      	ldr	r0, [pc, #76]	@ (80013ec <MX_GPIO_Init+0x7c>)
 800139e:	f000 ffe9 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2138      	movs	r1, #56	@ 0x38
 80013a6:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <MX_GPIO_Init+0x80>)
 80013a8:	f000 ffe4 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80013ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	480a      	ldr	r0, [pc, #40]	@ (80013ec <MX_GPIO_Init+0x7c>)
 80013c4:	f000 fe76 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80013c8:	2338      	movs	r3, #56	@ 0x38
 80013ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_GPIO_Init+0x80>)
 80013de:	f000 fe69 	bl	80020b4 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	48000400 	.word	0x48000400
 80013f0:	48000800 	.word	0x48000800

080013f4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001404:	f023 0218 	bic.w	r2, r3, #24
 8001408:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4313      	orrs	r3, r2
 8001410:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
	...

08001420 <_write>:


/* USER CODE BEGIN 0 */
// Redireciona a saída do printf para a USART2 (nossa porta de debug para o PC)
int _write(int file, char *ptr, int len)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	b29a      	uxth	r2, r3
 8001430:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	4804      	ldr	r0, [pc, #16]	@ (8001448 <_write+0x28>)
 8001438:	f003 f85b 	bl	80044f2 <HAL_UART_Transmit>
  return len;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000030c 	.word	0x2000030c

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8001450:	f000 fcae 	bl	8001db0 <HAL_Init>
  SystemClock_Config();
 8001454:	f000 f822 	bl	800149c <SystemClock_Config>
  MX_GPIO_Init();
 8001458:	f7ff ff8a 	bl	8001370 <MX_GPIO_Init>
  MX_USART2_UART_Init();  // Apenas a UART de Debug para o PC
 800145c:	f000 fb02 	bl	8001a64 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 8001460:	f000 fa00 	bl	8001864 <MX_SUBGHZ_Init>
  // MX_DMA_Init(); // DMA foi desativado para a Placa 2

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8001464:	2001      	movs	r0, #1
 8001466:	f000 fbd1 	bl	8001c0c <BSP_LED_Init>

  printf("\r\n--- Placa 2: Estacao Base LoRa Ativa ---\r\n");
 800146a:	4809      	ldr	r0, [pc, #36]	@ (8001490 <main+0x44>)
 800146c:	f005 fa80 	bl	8006970 <puts>

  Radio_Init();
 8001470:	f000 f86c 	bl	800154c <Radio_Init>
  printf("Radio LoRa inicializado em modo de recepcao.\r\n");
 8001474:	4807      	ldr	r0, [pc, #28]	@ (8001494 <main+0x48>)
 8001476:	f005 fa7b 	bl	8006970 <puts>

  printf("Pronto para receber pacotes LoRa...\r\n");
 800147a:	4807      	ldr	r0, [pc, #28]	@ (8001498 <main+0x4c>)
 800147c:	f005 fa78 	bl	8006970 <puts>
  // Coloca o rádio em modo de recepção contínua
  SUBGRF_SetRx(0);
 8001480:	2000      	movs	r0, #0
 8001482:	f003 fedf 	bl	8005244 <SUBGRF_SetRx>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // A mágica acontece nos callbacks de interrupção do rádio.
    // O processador pode dormir para economizar energia.
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001486:	2101      	movs	r1, #1
 8001488:	2000      	movs	r0, #0
 800148a:	f000 ffb1 	bl	80023f0 <HAL_PWR_EnterSLEEPMode>
 800148e:	e7fa      	b.n	8001486 <main+0x3a>
 8001490:	08008860 	.word	0x08008860
 8001494:	0800888c 	.word	0x0800888c
 8001498:	080088bc 	.word	0x080088bc

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09a      	sub	sp, #104	@ 0x68
 80014a0:	af00      	add	r7, sp, #0
  // ... (Esta função é gerada pelo CubeMX e deve ser mantida como está) ...
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	2248      	movs	r2, #72	@ 0x48
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fb40 	bl	8006b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	619a      	str	r2, [r3, #24]
  HAL_PWR_EnableBkUpAccess();
 80014c2:	f000 ff87 	bl	80023d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff ff94 	bl	80013f4 <LL_RCC_LSE_SetDriveCapability>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <SystemClock_Config+0xac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <SystemClock_Config+0xac>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <SystemClock_Config+0xac>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014e8:	2324      	movs	r3, #36	@ 0x24
 80014ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014ec:	2381      	movs	r3, #129	@ 0x81
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014f0:	2301      	movs	r3, #1
 80014f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80014f8:	23b0      	movs	r3, #176	@ 0xb0
 80014fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	4618      	mov	r0, r3
 8001506:	f001 faaf 	bl	8002a68 <HAL_RCC_OscConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001510:	f000 f94e 	bl	80017b0 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001514:	234f      	movs	r3, #79	@ 0x4f
 8001516:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2102      	movs	r1, #2
 8001530:	4618      	mov	r0, r3
 8001532:	f001 fe1b 	bl	800316c <HAL_RCC_ClockConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800153c:	f000 f938 	bl	80017b0 <Error_Handler>
  }
}
 8001540:	bf00      	nop
 8001542:	3768      	adds	r7, #104	@ 0x68
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	58000400 	.word	0x58000400

0800154c <Radio_Init>:

/* USER CODE BEGIN 4 */
// --- Nossas funções de apoio ---

void Radio_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	@ 0x30
 8001550:	af00      	add	r7, sp, #0
    SUBGRF_Init(RadioOnDioIrq);
 8001552:	481f      	ldr	r0, [pc, #124]	@ (80015d0 <Radio_Init+0x84>)
 8001554:	f003 fdb0 	bl	80050b8 <SUBGRF_Init>

    SUBGRF_SetStandby(STDBY_RC);
 8001558:	2000      	movs	r0, #0
 800155a:	f003 fe57 	bl	800520c <SUBGRF_SetStandby>
    SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 800155e:	2001      	movs	r0, #1
 8001560:	f003 ffea 	bl	8005538 <SUBGRF_SetPacketType>
    SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8001564:	481b      	ldr	r0, [pc, #108]	@ (80015d4 <Radio_Init+0x88>)
 8001566:	f003 ffa1 	bl	80054ac <SUBGRF_SetRfFrequency>
    SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 800156a:	2016      	movs	r0, #22
 800156c:	f004 fb70 	bl	8005c50 <SUBGRF_SetRfTxPower>

    ModulationParams_t modulationParams;
    modulationParams.PacketType = PACKET_TYPE_LORA;
 8001570:	2301      	movs	r3, #1
 8001572:	753b      	strb	r3, [r7, #20]
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 8001574:	230a      	movs	r3, #10
 8001576:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 800157a:	2304      	movs	r3, #4
 800157c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    modulationParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 8001580:	2304      	movs	r3, #4
 8001582:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    SUBGRF_SetModulationParams(&modulationParams);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4618      	mov	r0, r3
 8001592:	f004 f8c5 	bl	8005720 <SUBGRF_SetModulationParams>

    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 8001596:	2301      	movs	r3, #1
 8001598:	703b      	strb	r3, [r7, #0]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 800159a:	2308      	movs	r3, #8
 800159c:	81fb      	strh	r3, [r7, #14]
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH; // Mudar para CABEÇALHO FIXO
 800159e:	2301      	movs	r3, #1
 80015a0:	743b      	strb	r3, [r7, #16]
    packetParams.Params.LoRa.PayloadLength = PAYLOAD_SIZE;        // Definir o tamanho exato
 80015a2:	2314      	movs	r3, #20
 80015a4:	747b      	strb	r3, [r7, #17]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 80015a6:	2301      	movs	r3, #1
 80015a8:	74bb      	strb	r3, [r7, #18]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	74fb      	strb	r3, [r7, #19]
    SUBGRF_SetPacketParams(&packetParams);
 80015ae:	463b      	mov	r3, r7
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 f983 	bl	80058bc <SUBGRF_SetPacketParams>

    // Configura as interrupções do rádio para eventos de RECEPÇÃO
    SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 80015b6:	2300      	movs	r3, #0
 80015b8:	2200      	movs	r2, #0
 80015ba:	f240 2142 	movw	r1, #578	@ 0x242
 80015be:	f240 2042 	movw	r0, #578	@ 0x242
 80015c2:	f003 ff17 	bl	80053f4 <SUBGRF_SetDioIrqParams>
                           IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
                           IRQ_RADIO_NONE, IRQ_RADIO_NONE);
}
 80015c6:	bf00      	nop
 80015c8:	3730      	adds	r7, #48	@ 0x30
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	080015d9 	.word	0x080015d9
 80015d4:	3689cac0 	.word	0x3689cac0

080015d8 <RadioOnDioIrq>:

void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq)
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015e8:	d031      	beq.n	800164e <RadioOnDioIrq+0x76>
 80015ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ee:	dc32      	bgt.n	8001656 <RadioOnDioIrq+0x7e>
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d002      	beq.n	80015fa <RadioOnDioIrq+0x22>
 80015f4:	2b40      	cmp	r3, #64	@ 0x40
 80015f6:	d023      	beq.n	8001640 <RadioOnDioIrq+0x68>
        case IRQ_RX_TX_TIMEOUT:
            // Se houver um timeout de recepção, simplesmente volta a escutar
            SUBGRF_SetRx(0);
            break;
        default:
            break;
 80015f8:	e02d      	b.n	8001656 <RadioOnDioIrq+0x7e>
                uint8_t received_size = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	77fb      	strb	r3, [r7, #31]
                BSP_LED_Toggle(LED_GREEN); // Pisca o LED para indicar recepção
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fb3e 	bl	8001c80 <BSP_LED_Toggle>
                SUBGRF_GetPayload(LoRa_rx_buffer, &received_size, 255);
 8001604:	f107 031f 	add.w	r3, r7, #31
 8001608:	22ff      	movs	r2, #255	@ 0xff
 800160a:	4619      	mov	r1, r3
 800160c:	4814      	ldr	r0, [pc, #80]	@ (8001660 <RadioOnDioIrq+0x88>)
 800160e:	f003 fd9b 	bl	8005148 <SUBGRF_GetPayload>
                SUBGRF_GetPacketStatus(&packetStatus);
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	4618      	mov	r0, r3
 8001618:	f004 fa18 	bl	8005a4c <SUBGRF_GetPacketStatus>
                printf("Pacote LoRa Recebido! RSSI: %d dBm, SNR: %d\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 800161c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001620:	4619      	mov	r1, r3
 8001622:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001626:	461a      	mov	r2, r3
 8001628:	480e      	ldr	r0, [pc, #56]	@ (8001664 <RadioOnDioIrq+0x8c>)
 800162a:	f005 f939 	bl	80068a0 <iprintf>
                ProcessAndPrintPayload(LoRa_rx_buffer, received_size);
 800162e:	7ffb      	ldrb	r3, [r7, #31]
 8001630:	4619      	mov	r1, r3
 8001632:	480b      	ldr	r0, [pc, #44]	@ (8001660 <RadioOnDioIrq+0x88>)
 8001634:	f000 f81a 	bl	800166c <ProcessAndPrintPayload>
                SUBGRF_SetRx(0);
 8001638:	2000      	movs	r0, #0
 800163a:	f003 fe03 	bl	8005244 <SUBGRF_SetRx>
            break;
 800163e:	e00b      	b.n	8001658 <RadioOnDioIrq+0x80>
            printf("WARN: Erro de CRC no pacote LoRa.\r\n");
 8001640:	4809      	ldr	r0, [pc, #36]	@ (8001668 <RadioOnDioIrq+0x90>)
 8001642:	f005 f995 	bl	8006970 <puts>
            SUBGRF_SetRx(0); // Volta a escutar
 8001646:	2000      	movs	r0, #0
 8001648:	f003 fdfc 	bl	8005244 <SUBGRF_SetRx>
            break;
 800164c:	e004      	b.n	8001658 <RadioOnDioIrq+0x80>
            SUBGRF_SetRx(0);
 800164e:	2000      	movs	r0, #0
 8001650:	f003 fdf8 	bl	8005244 <SUBGRF_SetRx>
            break;
 8001654:	e000      	b.n	8001658 <RadioOnDioIrq+0x80>
            break;
 8001656:	bf00      	nop
    }
}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200001fc 	.word	0x200001fc
 8001664:	080088e4 	.word	0x080088e4
 8001668:	08008914 	.word	0x08008914

0800166c <ProcessAndPrintPayload>:

void ProcessAndPrintPayload(uint8_t* buffer, uint8_t size) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
  if (size != PAYLOAD_SIZE) {
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b14      	cmp	r3, #20
 800167c:	d006      	beq.n	800168c <ProcessAndPrintPayload+0x20>
      printf("ERRO: Pacote com tamanho inesperado! Recebido: %d, Esperado: %d\r\n", size, (int)PAYLOAD_SIZE);
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	2214      	movs	r2, #20
 8001682:	4619      	mov	r1, r3
 8001684:	483c      	ldr	r0, [pc, #240]	@ (8001778 <ProcessAndPrintPayload+0x10c>)
 8001686:	f005 f90b 	bl	80068a0 <iprintf>
      return;
 800168a:	e072      	b.n	8001772 <ProcessAndPrintPayload+0x106>
  }

  LoRaPayload_t* telemetry = (LoRaPayload_t*)buffer;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	61fb      	str	r3, [r7, #28]

  float latitude = telemetry->latitude_raw / 10000000.0f;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fb19 	bl	8000ccc <__aeabi_i2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4937      	ldr	r1, [pc, #220]	@ (800177c <ProcessAndPrintPayload+0x110>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fc1c 	bl	8000edc <__aeabi_fdiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	61bb      	str	r3, [r7, #24]
  float longitude = telemetry->longitude_raw / 10000000.0f;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fb0d 	bl	8000ccc <__aeabi_i2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4931      	ldr	r1, [pc, #196]	@ (800177c <ProcessAndPrintPayload+0x110>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fc10 	bl	8000edc <__aeabi_fdiv>
 80016bc:	4603      	mov	r3, r0
 80016be:	617b      	str	r3, [r7, #20]
  float altitude_m = telemetry->altitude_raw / 1000.0f;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fb01 	bl	8000ccc <__aeabi_i2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	492c      	ldr	r1, [pc, #176]	@ (8001780 <ProcessAndPrintPayload+0x114>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fc04 	bl	8000edc <__aeabi_fdiv>
 80016d4:	4603      	mov	r3, r0
 80016d6:	613b      	str	r3, [r7, #16]

  bool gpsFixOK = (telemetry->sats_and_fix >> 7) & 0x01;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	7cdb      	ldrb	r3, [r3, #19]
 80016dc:	09db      	lsrs	r3, r3, #7
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
  uint8_t satCount = telemetry->sats_and_fix & 0x7F;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	7cdb      	ldrb	r3, [r3, #19]
 80016f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016f6:	73bb      	strb	r3, [r7, #14]

  printf("\r\n---[ PACOTE DE TELEMETRIA DECODIFICADO ]---\r\n");
 80016f8:	4822      	ldr	r0, [pc, #136]	@ (8001784 <ProcessAndPrintPayload+0x118>)
 80016fa:	f005 f939 	bl	8006970 <puts>
  printf("  ID do Pacote:   %lu\r\n", telemetry->packet_id);
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4619      	mov	r1, r3
 8001704:	4820      	ldr	r0, [pc, #128]	@ (8001788 <ProcessAndPrintPayload+0x11c>)
 8001706:	f005 f8cb 	bl	80068a0 <iprintf>
  printf("  Latitude:       %f\r\n", latitude);
 800170a:	69b8      	ldr	r0, [r7, #24]
 800170c:	f7fe fef4 	bl	80004f8 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	481d      	ldr	r0, [pc, #116]	@ (800178c <ProcessAndPrintPayload+0x120>)
 8001716:	f005 f8c3 	bl	80068a0 <iprintf>
  printf("  Longitude:      %f\r\n", longitude);
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7fe feec 	bl	80004f8 <__aeabi_f2d>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	481a      	ldr	r0, [pc, #104]	@ (8001790 <ProcessAndPrintPayload+0x124>)
 8001726:	f005 f8bb 	bl	80068a0 <iprintf>
  printf("  Altitude:       %.2f m\r\n", altitude_m);
 800172a:	6938      	ldr	r0, [r7, #16]
 800172c:	f7fe fee4 	bl	80004f8 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4817      	ldr	r0, [pc, #92]	@ (8001794 <ProcessAndPrintPayload+0x128>)
 8001736:	f005 f8b3 	bl	80068a0 <iprintf>
  printf("  Voltagem:       %u mV\r\n", telemetry->voltage_mv);
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	8a1b      	ldrh	r3, [r3, #16]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4619      	mov	r1, r3
 8001742:	4815      	ldr	r0, [pc, #84]	@ (8001798 <ProcessAndPrintPayload+0x12c>)
 8001744:	f005 f8ac 	bl	80068a0 <iprintf>
  printf("  Temp. Radio:    %d C\r\n", telemetry->radio_temp_c);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800174e:	4619      	mov	r1, r3
 8001750:	4812      	ldr	r0, [pc, #72]	@ (800179c <ProcessAndPrintPayload+0x130>)
 8001752:	f005 f8a5 	bl	80068a0 <iprintf>
  printf("  Status GPS:     %s (Satelites: %u)\r\n", gpsFixOK ? "FIX OK" : "NO FIX", satCount);
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <ProcessAndPrintPayload+0xf4>
 800175c:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <ProcessAndPrintPayload+0x134>)
 800175e:	e000      	b.n	8001762 <ProcessAndPrintPayload+0xf6>
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <ProcessAndPrintPayload+0x138>)
 8001762:	7bba      	ldrb	r2, [r7, #14]
 8001764:	4619      	mov	r1, r3
 8001766:	4810      	ldr	r0, [pc, #64]	@ (80017a8 <ProcessAndPrintPayload+0x13c>)
 8001768:	f005 f89a 	bl	80068a0 <iprintf>
  printf("-------------------------------------------\r\n\r\n");
 800176c:	480f      	ldr	r0, [pc, #60]	@ (80017ac <ProcessAndPrintPayload+0x140>)
 800176e:	f005 f8ff 	bl	8006970 <puts>
}
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	08008938 	.word	0x08008938
 800177c:	4b189680 	.word	0x4b189680
 8001780:	447a0000 	.word	0x447a0000
 8001784:	0800897c 	.word	0x0800897c
 8001788:	080089ac 	.word	0x080089ac
 800178c:	080089c4 	.word	0x080089c4
 8001790:	080089dc 	.word	0x080089dc
 8001794:	080089f4 	.word	0x080089f4
 8001798:	08008a10 	.word	0x08008a10
 800179c:	08008a2c 	.word	0x08008a2c
 80017a0:	08008a48 	.word	0x08008a48
 80017a4:	08008a50 	.word	0x08008a50
 80017a8:	08008a58 	.word	0x08008a58
 80017ac:	08008a80 	.word	0x08008a80

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <Error_Handler+0x8>

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <NMI_Handler+0x4>

080017d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <MemManage_Handler+0x4>

080017e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <UsageFault_Handler+0x4>

080017f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001818:	f000 fb24 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001826:	f002 fc44 	bl	80040b2 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200002fc 	.word	0x200002fc

08001834 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001840:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001842:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001850:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001858:	68fb      	ldr	r3, [r7, #12]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <MX_SUBGHZ_Init+0x20>)
 800186a:	2208      	movs	r2, #8
 800186c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_SUBGHZ_Init+0x20>)
 8001870:	f002 f9f0 	bl	8003c54 <HAL_SUBGHZ_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800187a:	f7ff ff99 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002fc 	.word	0x200002fc

08001888 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff ffcf 	bl	8001834 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	2032      	movs	r0, #50	@ 0x32
 800189c:	f000 fbd5 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80018a0:	2032      	movs	r0, #50	@ 0x32
 80018a2:	f000 fbec 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <_kill>:

int _kill(int pid, int sig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c6:	f005 f985 	bl	8006bd4 <__errno>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
  return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_exit>:

void _exit (int status)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffe7 	bl	80018bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ee:	bf00      	nop
 80018f0:	e7fd      	b.n	80018ee <_exit+0x12>

080018f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e00a      	b.n	800191a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001904:	f3af 8000 	nop.w
 8001908:	4601      	mov	r1, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	b2ca      	uxtb	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbf0      	blt.n	8001904 <_read+0x12>
  }

  return len;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_close>:
  }
  return len;
}

int _close(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001952:	605a      	str	r2, [r3, #4]
  return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <_isatty>:

int _isatty(int file)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f005 f90a 	bl	8006bd4 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20010000 	.word	0x20010000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	20000308 	.word	0x20000308
 80019f4:	20000500 	.word	0x20000500

080019f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <LL_AHB2_GRP1_EnableClock>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a28:	68fb      	ldr	r3, [r7, #12]
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <LL_APB1_GRP1_EnableClock>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a68:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001a6a:	4a23      	ldr	r2, [pc, #140]	@ (8001af8 <MX_USART2_UART_Init+0x94>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aac:	4811      	ldr	r0, [pc, #68]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001aae:	f002 fcd0 	bl	8004452 <HAL_UART_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ab8:	f7ff fe7a 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001abc:	2100      	movs	r1, #0
 8001abe:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001ac0:	f003 fa07 	bl	8004ed2 <HAL_UARTEx_SetTxFifoThreshold>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001aca:	f7ff fe71 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001ad2:	f003 fa3c 	bl	8004f4e <HAL_UARTEx_SetRxFifoThreshold>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001adc:	f7ff fe68 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <MX_USART2_UART_Init+0x90>)
 8001ae2:	f003 f9be 	bl	8004e62 <HAL_UARTEx_DisableFifoMode>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001aec:	f7ff fe60 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000030c 	.word	0x2000030c
 8001af8:	40004400 	.word	0x40004400

08001afc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b096      	sub	sp, #88	@ 0x58
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	2238      	movs	r2, #56	@ 0x38
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f005 f807 	bl	8006b30 <memset>
  if(uartHandle->Instance==USART2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <HAL_UART_MspInit+0x88>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d126      	bne.n	8001b7a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b30:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001b34:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 fed6 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b46:	f7ff fe33 	bl	80017b0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001b4e:	f7ff ff71 	bl	8001a34 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff ff56 	bl	8001a04 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001b58:	230c      	movs	r3, #12
 8001b5a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b76:	f000 fa9d 	bl	80020b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3758      	adds	r7, #88	@ 0x58
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40004400 	.word	0x40004400

08001b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b88:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b8c:	f7ff ff34 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	@ (8001bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <LoopForever+0xe>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd4 <LoopForever+0x16>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bb6:	f005 f813 	bl	8006be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bba:	f7ff fc47 	bl	800144c <main>

08001bbe <LoopForever>:

LoopForever:
    b LoopForever
 8001bbe:	e7fe      	b.n	8001bbe <LoopForever>
  ldr   r0, =_estack
 8001bc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001bcc:	08008f24 	.word	0x08008f24
  ldr r2, =_sbss
 8001bd0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001bd4:	20000500 	.word	0x20000500

08001bd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC_IRQHandler>

08001bda <LL_AHB2_GRP1_EnableClock>:
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001be8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
	...

08001c0c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7ff ffd7 	bl	8001bda <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <BSP_LED_Init+0x6c>)
 8001c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c34:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <BSP_LED_Init+0x70>)
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	f107 020c 	add.w	r2, r7, #12
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 fa2f 	bl	80020b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	4a08      	ldr	r2, [pc, #32]	@ (8001c7c <BSP_LED_Init+0x70>)
 8001c5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <BSP_LED_Init+0x6c>)
 8001c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f000 fb83 	bl	8002374 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08008b6c 	.word	0x08008b6c
 8001c7c:	20000004 	.word	0x20000004

08001c80 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <BSP_LED_Toggle+0x2c>)
 8001c8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4906      	ldr	r1, [pc, #24]	@ (8001cb0 <BSP_LED_Toggle+0x30>)
 8001c96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f000 fb80 	bl	80023a2 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	08008b6c 	.word	0x08008b6c

08001cb4 <LL_AHB2_GRP1_EnableClock>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001cf8:	2004      	movs	r0, #4
 8001cfa:	f7ff ffdb 	bl	8001cb4 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001cfe:	2310      	movs	r3, #16
 8001d00:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4812      	ldr	r0, [pc, #72]	@ (8001d5c <BSP_RADIO_Init+0x78>)
 8001d14:	f000 f9ce 	bl	80020b4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480e      	ldr	r0, [pc, #56]	@ (8001d5c <BSP_RADIO_Init+0x78>)
 8001d22:	f000 f9c7 	bl	80020b4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001d26:	2308      	movs	r3, #8
 8001d28:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480b      	ldr	r0, [pc, #44]	@ (8001d5c <BSP_RADIO_Init+0x78>)
 8001d30:	f000 f9c0 	bl	80020b4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001d34:	2200      	movs	r2, #0
 8001d36:	2120      	movs	r1, #32
 8001d38:	4808      	ldr	r0, [pc, #32]	@ (8001d5c <BSP_RADIO_Init+0x78>)
 8001d3a:	f000 fb1b 	bl	8002374 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2110      	movs	r1, #16
 8001d42:	4806      	ldr	r0, [pc, #24]	@ (8001d5c <BSP_RADIO_Init+0x78>)
 8001d44:	f000 fb16 	bl	8002374 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	4803      	ldr	r0, [pc, #12]	@ (8001d5c <BSP_RADIO_Init+0x78>)
 8001d4e:	f000 fb11 	bl	8002374 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	48000800 	.word	0x48000800

08001d60 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001d9a:	230f      	movs	r3, #15
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e001      	b.n	8001da4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001da0:	2316      	movs	r3, #22
 8001da2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f000 f93a 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dc0:	f001 fbb6 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a09      	ldr	r2, [pc, #36]	@ (8001dec <HAL_Init+0x3c>)
 8001dc8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f000 f810 	bl	8001df0 <HAL_InitTick>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	71fb      	strb	r3, [r7, #7]
 8001dda:	e001      	b.n	8001de0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ddc:	f7ff fcee 	bl	80017bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_InitTick+0x6c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d024      	beq.n	8001e4e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e04:	f001 fb94 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_InitTick+0x6c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e14:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f93c 	bl	800209a <HAL_SYSTICK_Config>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10f      	bne.n	8001e48 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	d809      	bhi.n	8001e42 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e36:	f000 f908 	bl	800204a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e3a:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <HAL_InitTick+0x70>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	e004      	b.n	8001e52 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000014 	.word	0x20000014
 8001e60:	20000010 	.word	0x20000010

08001e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_IncTick+0x1c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <HAL_IncTick+0x20>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a03      	ldr	r2, [pc, #12]	@ (8001e84 <HAL_IncTick+0x20>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20000014 	.word	0x20000014
 8001e84:	200003a0 	.word	0x200003a0

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	@ (8001e98 <HAL_GetTick+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	200003a0 	.word	0x200003a0

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4906      	ldr	r1, [pc, #24]	@ (8001f34 <__NVIC_EnableIRQ+0x34>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	@ (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	@ (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002014:	f7ff ff90 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff2d 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff44 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ff92 	bl	8001f8c <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff61 	bl	8001f38 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff37 	bl	8001f00 <__NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffa4 	bl	8001ff0 <SysTick_Config>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	e140      	b.n	8002346 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8132 	beq.w	8002340 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d005      	beq.n	80020f4 <HAL_GPIO_Init+0x40>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d130      	bne.n	8002156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212a:	2201      	movs	r2, #1
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	f003 0201 	and.w	r2, r3, #1
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b03      	cmp	r3, #3
 8002160:	d017      	beq.n	8002192 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d123      	bne.n	80021e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	08da      	lsrs	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3208      	adds	r2, #8
 80021e0:	6939      	ldr	r1, [r7, #16]
 80021e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0203 	and.w	r2, r3, #3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 808c 	beq.w	8002340 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002228:	4a4e      	ldr	r2, [pc, #312]	@ (8002364 <HAL_GPIO_Init+0x2b0>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	2207      	movs	r2, #7
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002252:	d00d      	beq.n	8002270 <HAL_GPIO_Init+0x1bc>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a44      	ldr	r2, [pc, #272]	@ (8002368 <HAL_GPIO_Init+0x2b4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <HAL_GPIO_Init+0x1b8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a43      	ldr	r2, [pc, #268]	@ (800236c <HAL_GPIO_Init+0x2b8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_GPIO_Init+0x1b4>
 8002264:	2302      	movs	r3, #2
 8002266:	e004      	b.n	8002272 <HAL_GPIO_Init+0x1be>
 8002268:	2307      	movs	r3, #7
 800226a:	e002      	b.n	8002272 <HAL_GPIO_Init+0x1be>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_GPIO_Init+0x1be>
 8002270:	2300      	movs	r3, #0
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002282:	4938      	ldr	r1, [pc, #224]	@ (8002364 <HAL_GPIO_Init+0x2b0>)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002290:	4b37      	ldr	r3, [pc, #220]	@ (8002370 <HAL_GPIO_Init+0x2bc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002370 <HAL_GPIO_Init+0x2bc>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002370 <HAL_GPIO_Init+0x2bc>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022de:	4a24      	ldr	r2, [pc, #144]	@ (8002370 <HAL_GPIO_Init+0x2bc>)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <HAL_GPIO_Init+0x2bc>)
 80022e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ea:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800230a:	4a19      	ldr	r2, [pc, #100]	@ (8002370 <HAL_GPIO_Init+0x2bc>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <HAL_GPIO_Init+0x2bc>)
 8002314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002318:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002338:	4a0d      	ldr	r2, [pc, #52]	@ (8002370 <HAL_GPIO_Init+0x2bc>)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	f47f aeb7 	bne.w	80020c4 <HAL_GPIO_Init+0x10>
  }
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40010000 	.word	0x40010000
 8002368:	48000400 	.word	0x48000400
 800236c:	48000800 	.word	0x48000800
 8002370:	58000800 	.word	0x58000800

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002390:	e002      	b.n	8002398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4013      	ands	r3, r2
 80023ba:	041a      	lsls	r2, r3, #16
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43d9      	mvns	r1, r3
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	400b      	ands	r3, r1
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	619a      	str	r2, [r3, #24]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a03      	ldr	r2, [pc, #12]	@ (80023ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	58000400 	.word	0x58000400

080023f0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10c      	bne.n	800241c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800240a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800240e:	d10d      	bne.n	800242c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002410:	f000 f83c 	bl	800248c <HAL_PWREx_DisableLowPowerRunMode>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800241a:	e015      	b.n	8002448 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <HAL_PWR_EnterSLEEPMode+0x60>)
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002428:	f000 f822 	bl	8002470 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800242c:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_PWR_EnterSLEEPMode+0x64>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002432:	f023 0304 	bic.w	r3, r3, #4
 8002436:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800243e:	bf30      	wfi
 8002440:	e002      	b.n	8002448 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002442:	bf40      	sev
    __WFE();
 8002444:	bf20      	wfe
    __WFE();
 8002446:	bf20      	wfe
  }
}
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	58000400 	.word	0x58000400
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <HAL_PWREx_GetVoltageRange+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	58000400 	.word	0x58000400

08002470 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a03      	ldr	r2, [pc, #12]	@ (8002488 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800247a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	58000400 	.word	0x58000400

0800248c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002492:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a15      	ldr	r2, [pc, #84]	@ (80024ec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002498:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800249c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2232      	movs	r2, #50	@ 0x32
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	4a12      	ldr	r2, [pc, #72]	@ (80024f4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0c9b      	lsrs	r3, r3, #18
 80024b0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80024b2:	e002      	b.n	80024ba <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024c6:	d102      	bne.n	80024ce <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f2      	bne.n	80024b4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024da:	d101      	bne.n	80024e0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e000      	b.n	80024e2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	58000400 	.word	0x58000400
 80024f0:	20000000 	.word	0x20000000
 80024f4:	431bde83 	.word	0x431bde83

080024f8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002508:	d101      	bne.n	800250e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	58000400 	.word	0x58000400

0800251c <LL_RCC_HSE_EnableTcxo>:
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800252a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <LL_RCC_HSE_DisableTcxo>:
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002546:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002566:	d101      	bne.n	800256c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <LL_RCC_HSE_Enable>:
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002588:	6013      	str	r3, [r2, #0]
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <LL_RCC_HSE_Disable>:
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <LL_RCC_HSE_IsReady>:
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025c0:	d101      	bne.n	80025c6 <LL_RCC_HSE_IsReady+0x18>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_RCC_HSE_IsReady+0x1a>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <LL_RCC_HSI_Enable>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <LL_RCC_HSI_Disable>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <LL_RCC_HSI_IsReady>:
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261a:	d101      	bne.n	8002620 <LL_RCC_HSI_IsReady+0x18>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <LL_RCC_HSI_IsReady+0x1a>
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <LL_RCC_HSI_SetCalibTrimming>:
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	061b      	lsls	r3, r3, #24
 8002640:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d101      	bne.n	800266a <LL_RCC_LSE_IsReady+0x18>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_RCC_LSE_IsReady+0x1a>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002680:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80026b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d101      	bne.n	80026cc <LL_RCC_LSI_IsReady+0x18>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <LL_RCC_LSI_IsReady+0x1a>
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6013      	str	r3, [r2, #0]
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80026f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6013      	str	r3, [r2, #0]
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d101      	bne.n	8002724 <LL_RCC_MSI_IsReady+0x16>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_RCC_MSI_IsReady+0x18>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b08      	cmp	r3, #8
 800273e:	d101      	bne.n	8002744 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002770:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 030c 	and.w	r3, r3, #12
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002812:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002816:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800281a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002840:	f023 020f 	bic.w	r2, r3, #15
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800286e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800292e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800294e:	d101      	bne.n	8002954 <LL_RCC_PLL_IsReady+0x18>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <LL_RCC_PLL_IsReady+0x1a>
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0303 	and.w	r3, r3, #3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ca:	d101      	bne.n	80029d0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029ee:	d101      	bne.n	80029f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a06:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a12:	d101      	bne.n	8002a18 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a34:	d101      	bne.n	8002a3a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a56:	d101      	bne.n	8002a5c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e36f      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7a:	f7ff fea6 	bl	80027ca <LL_RCC_GetSysClkSource>
 8002a7e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a80:	f7ff ff8f 	bl	80029a2 <LL_RCC_PLL_GetMainSource>
 8002a84:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80c4 	beq.w	8002c1c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x3e>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d176      	bne.n	8002b8e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d173      	bne.n	8002b8e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e353      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x68>
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ace:	e006      	b.n	8002ade <HAL_RCC_OscConfig+0x76>
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d222      	bcs.n	8002b28 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fd5a 	bl	80035a0 <RCC_SetFlashLatencyFromMSIRange>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e331      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b00:	f043 0308 	orr.w	r3, r3, #8
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fe2b 	bl	800277c <LL_RCC_MSI_SetCalibTrimming>
 8002b26:	e021      	b.n	8002b6c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b32:	f043 0308 	orr.w	r3, r3, #8
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fe12 	bl	800277c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fd1f 	bl	80035a0 <RCC_SetFlashLatencyFromMSIRange>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e2f6      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b6c:	f000 fce0 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4aa7      	ldr	r2, [pc, #668]	@ (8002e10 <HAL_RCC_OscConfig+0x3a8>)
 8002b74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002b76:	4ba7      	ldr	r3, [pc, #668]	@ (8002e14 <HAL_RCC_OscConfig+0x3ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff f938 	bl	8001df0 <HAL_InitTick>
 8002b80:	4603      	mov	r3, r0
 8002b82:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d047      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	e2e5      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b96:	f7ff fd9e 	bl	80026d6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b9a:	f7ff f975 	bl	8001e88 <HAL_GetTick>
 8002b9e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba2:	f7ff f971 	bl	8001e88 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e2d2      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002bb4:	f7ff fdab 	bl	800270e <LL_RCC_MSI_IsReady>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f1      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fdc7 	bl	800277c <LL_RCC_MSI_SetCalibTrimming>
 8002bee:	e015      	b.n	8002c1c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bf0:	f7ff fd7f 	bl	80026f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bf4:	f7ff f948 	bl	8001e88 <HAL_GetTick>
 8002bf8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bfc:	f7ff f944 	bl	8001e88 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e2a5      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c0e:	f7ff fd7e 	bl	800270e <LL_RCC_MSI_IsReady>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f1      	bne.n	8002bfc <HAL_RCC_OscConfig+0x194>
 8002c18:	e000      	b.n	8002c1c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c1a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d058      	beq.n	8002cda <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1d2>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d108      	bne.n	8002c46 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d105      	bne.n	8002c46 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d14b      	bne.n	8002cda <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e289      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_OscConfig+0x204>
 8002c66:	f7ff fc86 	bl	8002576 <LL_RCC_HSE_Enable>
 8002c6a:	e00d      	b.n	8002c88 <HAL_RCC_OscConfig+0x220>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002c74:	d104      	bne.n	8002c80 <HAL_RCC_OscConfig+0x218>
 8002c76:	f7ff fc51 	bl	800251c <LL_RCC_HSE_EnableTcxo>
 8002c7a:	f7ff fc7c 	bl	8002576 <LL_RCC_HSE_Enable>
 8002c7e:	e003      	b.n	8002c88 <HAL_RCC_OscConfig+0x220>
 8002c80:	f7ff fc87 	bl	8002592 <LL_RCC_HSE_Disable>
 8002c84:	f7ff fc58 	bl	8002538 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7ff f8fa 	bl	8001e88 <HAL_GetTick>
 8002c94:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff f8f6 	bl	8001e88 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	@ 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e257      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002caa:	f7ff fc80 	bl	80025ae <LL_RCC_HSE_IsReady>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f1      	beq.n	8002c98 <HAL_RCC_OscConfig+0x230>
 8002cb4:	e011      	b.n	8002cda <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7ff f8e7 	bl	8001e88 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbe:	f7ff f8e3 	bl	8001e88 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b64      	cmp	r3, #100	@ 0x64
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e244      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002cd0:	f7ff fc6d 	bl	80025ae <LL_RCC_HSE_IsReady>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f1      	bne.n	8002cbe <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d046      	beq.n	8002d74 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x290>
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d10e      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e22a      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fc8e 	bl	800262a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d0e:	e031      	b.n	8002d74 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d019      	beq.n	8002d4c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	f7ff fc5a 	bl	80025d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7ff f8b4 	bl	8001e88 <HAL_GetTick>
 8002d20:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d24:	f7ff f8b0 	bl	8001e88 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e211      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d36:	f7ff fc67 	bl	8002608 <LL_RCC_HSI_IsReady>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f1      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fc70 	bl	800262a <LL_RCC_HSI_SetCalibTrimming>
 8002d4a:	e013      	b.n	8002d74 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4c:	f7ff fc4e 	bl	80025ec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7ff f89a 	bl	8001e88 <HAL_GetTick>
 8002d54:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d58:	f7ff f896 	bl	8001e88 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1f7      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d6a:	f7ff fc4d 	bl	8002608 <LL_RCC_HSI_IsReady>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f1      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d06e      	beq.n	8002e5e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d056      	beq.n	8002e36 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d90:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d031      	beq.n	8002e04 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e1d0      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d013      	beq.n	8002dea <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002dc2:	f7ff fc67 	bl	8002694 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dc6:	f7ff f85f 	bl	8001e88 <HAL_GetTick>
 8002dca:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dce:	f7ff f85b 	bl	8001e88 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b11      	cmp	r3, #17
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e1bc      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002de0:	f7ff fc68 	bl	80026b4 <LL_RCC_LSI_IsReady>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f1      	bne.n	8002dce <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df2:	f023 0210 	bic.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e04:	f7ff fc36 	bl	8002674 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7ff f83e 	bl	8001e88 <HAL_GetTick>
 8002e0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e0e:	e00c      	b.n	8002e2a <HAL_RCC_OscConfig+0x3c2>
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e18:	f7ff f836 	bl	8001e88 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b11      	cmp	r3, #17
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e197      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e2a:	f7ff fc43 	bl	80026b4 <LL_RCC_LSI_IsReady>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f1      	beq.n	8002e18 <HAL_RCC_OscConfig+0x3b0>
 8002e34:	e013      	b.n	8002e5e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	f7ff fc2d 	bl	8002694 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7ff f825 	bl	8001e88 <HAL_GetTick>
 8002e3e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e42:	f7ff f821 	bl	8001e88 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b11      	cmp	r3, #17
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e182      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002e54:	f7ff fc2e 	bl	80026b4 <LL_RCC_LSI_IsReady>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f1      	bne.n	8002e42 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80d8 	beq.w	800301c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e6c:	f7ff fb44 	bl	80024f8 <LL_PWR_IsEnabledBkUpAccess>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d113      	bne.n	8002e9e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e76:	f7ff faad 	bl	80023d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7ff f805 	bl	8001e88 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7ff f801 	bl	8001e88 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e162      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e94:	f7ff fb30 	bl	80024f8 <LL_PWR_IsEnabledBkUpAccess>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f1      	beq.n	8002e82 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d07b      	beq.n	8002f9e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b85      	cmp	r3, #133	@ 0x85
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d109      	bne.n	8002eca <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe ffdd 	bl	8001e88 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fe ffcf 	bl	8001e88 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e12e      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002efc:	f7ff fba9 	bl	8002652 <LL_RCC_LSE_IsReady>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ef      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b81      	cmp	r3, #129	@ 0x81
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b85      	cmp	r3, #133	@ 0x85
 8002f14:	d121      	bne.n	8002f5a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f16:	f7fe ffb7 	bl	8001e88 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe ffa9 	bl	8001e88 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e108      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ec      	beq.n	8002f32 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f58:	e060      	b.n	800301c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fe ff95 	bl	8001e88 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe ff87 	bl	8001e88 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0e6      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ec      	bne.n	8002f76 <HAL_RCC_OscConfig+0x50e>
 8002f9c:	e03e      	b.n	800301c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe ff73 	bl	8001e88 <HAL_GetTick>
 8002fa2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fba:	f7fe ff65 	bl	8001e88 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e0c4      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ec      	bne.n	8002fba <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe ff52 	bl	8001e88 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe ff44 	bl	8001e88 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0a3      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003012:	f7ff fb1e 	bl	8002652 <LL_RCC_LSE_IsReady>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ef      	bne.n	8002ffc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8099 	beq.w	8003158 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d06c      	beq.n	8003106 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	2b02      	cmp	r3, #2
 8003032:	d14b      	bne.n	80030cc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003034:	f7ff fc74 	bl	8002920 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe ff26 	bl	8001e88 <HAL_GetTick>
 800303c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe ff22 	bl	8001e88 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b0a      	cmp	r3, #10
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e083      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003052:	f7ff fc73 	bl	800293c <LL_RCC_PLL_IsReady>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f1      	bne.n	8003040 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	4b40      	ldr	r3, [pc, #256]	@ (8003164 <HAL_RCC_OscConfig+0x6fc>)
 8003064:	4013      	ands	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003074:	0212      	lsls	r2, r2, #8
 8003076:	4311      	orrs	r1, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800307c:	4311      	orrs	r1, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003088:	430a      	orrs	r2, r1
 800308a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800308e:	4313      	orrs	r3, r2
 8003090:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003092:	f7ff fc37 	bl	8002904 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe feef 	bl	8001e88 <HAL_GetTick>
 80030aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe feeb 	bl	8001e88 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b0a      	cmp	r3, #10
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e04c      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80030c0:	f7ff fc3c 	bl	800293c <LL_RCC_PLL_IsReady>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f1      	beq.n	80030ae <HAL_RCC_OscConfig+0x646>
 80030ca:	e045      	b.n	8003158 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030cc:	f7ff fc28 	bl	8002920 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe feda 	bl	8001e88 <HAL_GetTick>
 80030d4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe fed6 	bl	8001e88 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b0a      	cmp	r3, #10
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e037      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80030ea:	f7ff fc27 	bl	800293c <LL_RCC_PLL_IsReady>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f1      	bne.n	80030d8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003168 <HAL_RCC_OscConfig+0x700>)
 8003100:	4013      	ands	r3, r2
 8003102:	60cb      	str	r3, [r1, #12]
 8003104:	e028      	b.n	8003158 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e023      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f003 0203 	and.w	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	429a      	cmp	r2, r3
 8003126:	d115      	bne.n	8003154 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003132:	429a      	cmp	r2, r3
 8003134:	d10e      	bne.n	8003154 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	429a      	cmp	r2, r3
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	11c1808c 	.word	0x11c1808c
 8003168:	eefefffc 	.word	0xeefefffc

0800316c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e12c      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003180:	4b98      	ldr	r3, [pc, #608]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d91b      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b95      	ldr	r3, [pc, #596]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	4993      	ldr	r1, [pc, #588]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800319e:	f7fe fe73 	bl	8001e88 <HAL_GetTick>
 80031a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031a6:	f7fe fe6f 	bl	8001e88 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e110      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b8:	4b8a      	ldr	r3, [pc, #552]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d1ef      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fb02 	bl	80027e0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031dc:	f7fe fe54 	bl	8001e88 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031e4:	f7fe fe50 	bl	8001e88 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0f1      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80031f6:	f7ff fbdf 	bl	80029b8 <LL_RCC_IsActiveFlag_HPRE>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f1      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff faf8 	bl	8002806 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003216:	f7fe fe37 	bl	8001e88 <HAL_GetTick>
 800321a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800321e:	f7fe fe33 	bl	8001e88 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0d4      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003230:	f7ff fbd3 	bl	80029da <LL_RCC_IsActiveFlag_C2HPRE>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f1      	beq.n	800321e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff faf0 	bl	8002830 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003250:	f7fe fe1a 	bl	8001e88 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003258:	f7fe fe16 	bl	8001e88 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e0b7      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800326a:	f7ff fbc8 	bl	80029fe <LL_RCC_IsActiveFlag_SHDHPRE>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f1      	beq.n	8003258 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fae9 	bl	800285c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800328a:	f7fe fdfd 	bl	8001e88 <HAL_GetTick>
 800328e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003292:	f7fe fdf9 	bl	8001e88 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e09a      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80032a4:	f7ff fbbd 	bl	8002a22 <LL_RCC_IsActiveFlag_PPRE1>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f1      	beq.n	8003292 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d017      	beq.n	80032ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fade 	bl	8002882 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032c6:	f7fe fddf 	bl	8001e88 <HAL_GetTick>
 80032ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032ce:	f7fe fddb 	bl	8001e88 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e07c      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80032e0:	f7ff fbb0 	bl	8002a44 <LL_RCC_IsActiveFlag_PPRE2>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f1      	beq.n	80032ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d043      	beq.n	800337e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d106      	bne.n	800330c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80032fe:	f7ff f956 	bl	80025ae <LL_RCC_HSE_IsReady>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d11e      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e066      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d106      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003314:	f7ff fb12 	bl	800293c <LL_RCC_PLL_IsReady>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d113      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e05b      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800332a:	f7ff f9f0 	bl	800270e <LL_RCC_MSI_IsReady>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d108      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e050      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003338:	f7ff f966 	bl	8002608 <LL_RCC_HSI_IsReady>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e049      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fa2a 	bl	80027a4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7fe fd9a 	bl	8001e88 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fe fd96 	bl	8001e88 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e035      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	f7ff fa2c 	bl	80027ca <LL_RCC_GetSysClkSource>
 8003372:	4602      	mov	r2, r0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	429a      	cmp	r2, r3
 800337c:	d1ec      	bne.n	8003358 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800337e:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d21b      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338c:	4b15      	ldr	r3, [pc, #84]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 0207 	bic.w	r2, r3, #7
 8003394:	4913      	ldr	r1, [pc, #76]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800339c:	f7fe fd74 	bl	8001e88 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033a4:	f7fe fd70 	bl	8001e88 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e011      	b.n	80033da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d1ef      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033c4:	f000 f8b4 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4a07      	ldr	r2, [pc, #28]	@ (80033e8 <HAL_RCC_ClockConfig+0x27c>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80033ce:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <HAL_RCC_ClockConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fd0c 	bl	8001df0 <HAL_InitTick>
 80033d8:	4603      	mov	r3, r0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	58004000 	.word	0x58004000
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000010 	.word	0x20000010

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033fe:	f7ff f9e4 	bl	80027ca <LL_RCC_GetSysClkSource>
 8003402:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003404:	f7ff facd 	bl	80029a2 <LL_RCC_PLL_GetMainSource>
 8003408:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x2c>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d139      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d136      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800341c:	f7ff f987 	bl	800272e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d115      	bne.n	8003452 <HAL_RCC_GetSysClockFreq+0x62>
 8003426:	f7ff f982 	bl	800272e <LL_RCC_MSI_IsEnabledRangeSelect>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d106      	bne.n	800343e <HAL_RCC_GetSysClockFreq+0x4e>
 8003430:	f7ff f98d 	bl	800274e <LL_RCC_MSI_GetRange>
 8003434:	4603      	mov	r3, r0
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	e005      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x5a>
 800343e:	f7ff f991 	bl	8002764 <LL_RCC_MSI_GetRangeAfterStandby>
 8003442:	4603      	mov	r3, r0
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	4a36      	ldr	r2, [pc, #216]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x134>)
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	e014      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x8c>
 8003452:	f7ff f96c 	bl	800272e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003456:	4603      	mov	r3, r0
 8003458:	2b01      	cmp	r3, #1
 800345a:	d106      	bne.n	800346a <HAL_RCC_GetSysClockFreq+0x7a>
 800345c:	f7ff f977 	bl	800274e <LL_RCC_MSI_GetRange>
 8003460:	4603      	mov	r3, r0
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	e005      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x86>
 800346a:	f7ff f97b 	bl	8002764 <LL_RCC_MSI_GetRangeAfterStandby>
 800346e:	4603      	mov	r3, r0
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	4a2b      	ldr	r2, [pc, #172]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x134>)
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d115      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003488:	e012      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d102      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003490:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x138>)
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e00c      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d109      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800349c:	f7ff f85a 	bl	8002554 <LL_RCC_HSE_IsEnabledDiv2>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80034a6:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x138>)
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e001      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80034ac:	4b1f      	ldr	r3, [pc, #124]	@ (800352c <HAL_RCC_GetSysClockFreq+0x13c>)
 80034ae:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b0:	f7ff f98b 	bl	80027ca <LL_RCC_GetSysClkSource>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d12f      	bne.n	800351a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80034ba:	f7ff fa72 	bl	80029a2 <LL_RCC_PLL_GetMainSource>
 80034be:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0xde>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d003      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xe4>
 80034cc:	e00d      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80034ce:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x138>)
 80034d0:	60fb      	str	r3, [r7, #12]
        break;
 80034d2:	e00d      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034d4:	f7ff f83e 	bl	8002554 <LL_RCC_HSE_IsEnabledDiv2>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d102      	bne.n	80034e4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x138>)
 80034e0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80034e2:	e005      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80034e4:	4b11      	ldr	r3, [pc, #68]	@ (800352c <HAL_RCC_GetSysClockFreq+0x13c>)
 80034e6:	60fb      	str	r3, [r7, #12]
        break;
 80034e8:	e002      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	60fb      	str	r3, [r7, #12]
        break;
 80034ee:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80034f0:	f7ff fa35 	bl	800295e <LL_RCC_PLL_GetN>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	fb03 f402 	mul.w	r4, r3, r2
 80034fc:	f7ff fa46 	bl	800298c <LL_RCC_PLL_GetDivider>
 8003500:	4603      	mov	r3, r0
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	3301      	adds	r3, #1
 8003506:	fbb4 f4f3 	udiv	r4, r4, r3
 800350a:	f7ff fa34 	bl	8002976 <LL_RCC_PLL_GetR>
 800350e:	4603      	mov	r3, r0
 8003510:	0f5b      	lsrs	r3, r3, #29
 8003512:	3301      	adds	r3, #1
 8003514:	fbb4 f3f3 	udiv	r3, r4, r3
 8003518:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800351a:	697b      	ldr	r3, [r7, #20]
}
 800351c:	4618      	mov	r0, r3
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd90      	pop	{r4, r7, pc}
 8003524:	08008b2c 	.word	0x08008b2c
 8003528:	00f42400 	.word	0x00f42400
 800352c:	01e84800 	.word	0x01e84800

08003530 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b598      	push	{r3, r4, r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003534:	f7ff ff5c 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003538:	4604      	mov	r4, r0
 800353a:	f7ff f9b5 	bl	80028a8 <LL_RCC_GetAHBPrescaler>
 800353e:	4603      	mov	r3, r0
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	4a03      	ldr	r2, [pc, #12]	@ (8003554 <HAL_RCC_GetHCLKFreq+0x24>)
 8003548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd98      	pop	{r3, r4, r7, pc}
 8003554:	08008acc 	.word	0x08008acc

08003558 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003558:	b598      	push	{r3, r4, r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800355c:	f7ff ffe8 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003560:	4604      	mov	r4, r0
 8003562:	f7ff f9b9 	bl	80028d8 <LL_RCC_GetAPB1Prescaler>
 8003566:	4603      	mov	r3, r0
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	4a03      	ldr	r2, [pc, #12]	@ (8003578 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003570:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd98      	pop	{r3, r4, r7, pc}
 8003578:	08008b0c 	.word	0x08008b0c

0800357c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800357c:	b598      	push	{r3, r4, r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003580:	f7ff ffd6 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003584:	4604      	mov	r4, r0
 8003586:	f7ff f9b2 	bl	80028ee <LL_RCC_GetAPB2Prescaler>
 800358a:	4603      	mov	r3, r0
 800358c:	0adb      	lsrs	r3, r3, #11
 800358e:	4a03      	ldr	r2, [pc, #12]	@ (800359c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003594:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd98      	pop	{r3, r4, r7, pc}
 800359c:	08008b0c 	.word	0x08008b0c

080035a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	4a10      	ldr	r2, [pc, #64]	@ (80035f4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80035b8:	f7ff f981 	bl	80028be <LL_RCC_GetAHB3Prescaler>
 80035bc:	4603      	mov	r3, r0
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	4a0c      	ldr	r2, [pc, #48]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4a09      	ldr	r2, [pc, #36]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0c9c      	lsrs	r4, r3, #18
 80035dc:	f7fe ff3c 	bl	8002458 <HAL_PWREx_GetVoltageRange>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4619      	mov	r1, r3
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 f80b 	bl	8003600 <RCC_SetFlashLatency>
 80035ea:	4603      	mov	r3, r0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd90      	pop	{r4, r7, pc}
 80035f4:	08008b2c 	.word	0x08008b2c
 80035f8:	08008acc 	.word	0x08008acc
 80035fc:	431bde83 	.word	0x431bde83

08003600 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08e      	sub	sp, #56	@ 0x38
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800360a:	4a3a      	ldr	r2, [pc, #232]	@ (80036f4 <RCC_SetFlashLatency+0xf4>)
 800360c:	f107 0320 	add.w	r3, r7, #32
 8003610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003614:	6018      	str	r0, [r3, #0]
 8003616:	3304      	adds	r3, #4
 8003618:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800361a:	4a37      	ldr	r2, [pc, #220]	@ (80036f8 <RCC_SetFlashLatency+0xf8>)
 800361c:	f107 0318 	add.w	r3, r7, #24
 8003620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003624:	6018      	str	r0, [r3, #0]
 8003626:	3304      	adds	r3, #4
 8003628:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800362a:	4a34      	ldr	r2, [pc, #208]	@ (80036fc <RCC_SetFlashLatency+0xfc>)
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	ca07      	ldmia	r2, {r0, r1, r2}
 8003632:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003636:	2300      	movs	r3, #0
 8003638:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003640:	d11b      	bne.n	800367a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003642:	2300      	movs	r3, #0
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
 8003646:	e014      	b.n	8003672 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	3338      	adds	r3, #56	@ 0x38
 800364e:	443b      	add	r3, r7
 8003650:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003654:	461a      	mov	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4293      	cmp	r3, r2
 800365a:	d807      	bhi.n	800366c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	3338      	adds	r3, #56	@ 0x38
 8003662:	443b      	add	r3, r7
 8003664:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003668:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800366a:	e021      	b.n	80036b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	3301      	adds	r3, #1
 8003670:	633b      	str	r3, [r7, #48]	@ 0x30
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	2b02      	cmp	r3, #2
 8003676:	d9e7      	bls.n	8003648 <RCC_SetFlashLatency+0x48>
 8003678:	e01a      	b.n	80036b0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800367a:	2300      	movs	r3, #0
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800367e:	e014      	b.n	80036aa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	3338      	adds	r3, #56	@ 0x38
 8003686:	443b      	add	r3, r7
 8003688:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800368c:	461a      	mov	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4293      	cmp	r3, r2
 8003692:	d807      	bhi.n	80036a4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	3338      	adds	r3, #56	@ 0x38
 800369a:	443b      	add	r3, r7
 800369c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80036a2:	e005      	b.n	80036b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a6:	3301      	adds	r3, #1
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d9e7      	bls.n	8003680 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036b0:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <RCC_SetFlashLatency+0x100>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 0207 	bic.w	r2, r3, #7
 80036b8:	4911      	ldr	r1, [pc, #68]	@ (8003700 <RCC_SetFlashLatency+0x100>)
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036c0:	f7fe fbe2 	bl	8001e88 <HAL_GetTick>
 80036c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036c6:	e008      	b.n	80036da <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036c8:	f7fe fbde 	bl	8001e88 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e007      	b.n	80036ea <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <RCC_SetFlashLatency+0x100>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1ef      	bne.n	80036c8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3738      	adds	r7, #56	@ 0x38
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	08008ab0 	.word	0x08008ab0
 80036f8:	08008ab8 	.word	0x08008ab8
 80036fc:	08008ac0 	.word	0x08008ac0
 8003700:	58004000 	.word	0x58004000

08003704 <LL_RCC_LSE_IsReady>:
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d101      	bne.n	800371c <LL_RCC_LSE_IsReady+0x18>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <LL_RCC_LSE_IsReady+0x1a>
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <LL_RCC_SetUSARTClockSource>:
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003732:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	43db      	mvns	r3, r3
 800373c:	401a      	ands	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	b29b      	uxth	r3, r3
 8003742:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <LL_RCC_SetI2SClockSource>:
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800376a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <LL_RCC_SetLPUARTClockSource>:
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003790:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003794:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <LL_RCC_SetI2CClockSource>:
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80037c2:	43db      	mvns	r3, r3
 80037c4:	401a      	ands	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80037ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <LL_RCC_SetLPTIMClockSource>:
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	43db      	mvns	r3, r3
 80037fa:	401a      	ands	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <LL_RCC_SetRNGClockSource>:
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800381c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003824:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003828:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <LL_RCC_SetADCClockSource>:
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003852:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <LL_RCC_SetRTCClockSource>:
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003878:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800387c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <LL_RCC_GetRTCClockSource>:
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <LL_RCC_ForceBackupDomainReset>:
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <LL_RCC_ReleaseBackupDomainReset>:
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038e2:	bf00      	nop
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80038f8:	2300      	movs	r3, #0
 80038fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80038fc:	2300      	movs	r3, #0
 80038fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d058      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800390c:	f7fe fd62 	bl	80023d4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003910:	f7fe faba 	bl	8001e88 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003916:	e009      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003918:	f7fe fab6 	bl	8001e88 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	74fb      	strb	r3, [r7, #19]
        break;
 800392a:	e006      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800392c:	4b7b      	ldr	r3, [pc, #492]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003938:	d1ee      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d13c      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003940:	f7ff ffa7 	bl	8003892 <LL_RCC_GetRTCClockSource>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394a:	429a      	cmp	r2, r3
 800394c:	d00f      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800395c:	f7ff ffa5 	bl	80038aa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003960:	f7ff ffb3 	bl	80038ca <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003964:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d014      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fa86 	bl	8001e88 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800397e:	e00b      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe fa82 	bl	8001e88 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d902      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	74fb      	strb	r3, [r7, #19]
            break;
 8003996:	e004      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003998:	f7ff feb4 	bl	8003704 <LL_RCC_LSE_IsReady>
 800399c:	4603      	mov	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d1ee      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff5b 	bl	8003868 <LL_RCC_SetRTCClockSource>
 80039b2:	e004      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
 80039b8:	e001      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ba:	7cfb      	ldrb	r3, [r7, #19]
 80039bc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fea9 	bl	8003726 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fe9e 	bl	8003726 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fec0 	bl	8003780 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fee6 	bl	80037e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fedb 	bl	80037e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fed0 	bl	80037e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fea9 	bl	80037aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fe9e 	bl	80037aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fe93 	bl	80037aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d011      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fe5e 	bl	8003756 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ab2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fea5 	bl	8003814 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003adc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ae0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d011      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fea3 	bl	800383e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b00:	d107      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b10:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003b12:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	58000400 	.word	0x58000400

08003b20 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b30:	4904      	ldr	r1, [pc, #16]	@ (8003b44 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	608b      	str	r3, [r1, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	58000400 	.word	0x58000400

08003b48 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003b4c:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003b54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	58000400 	.word	0x58000400

08003b68 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003b6c:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b72:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003b74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	58000400 	.word	0x58000400

08003b88 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003b8c:	4b03      	ldr	r3, [pc, #12]	@ (8003b9c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003b8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b92:	619a      	str	r2, [r3, #24]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	58000400 	.word	0x58000400

08003ba0 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003ba4:	4b06      	ldr	r3, [pc, #24]	@ (8003bc0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d101      	bne.n	8003bb4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	58000400 	.word	0x58000400

08003bc4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003bc8:	4b06      	ldr	r3, [pc, #24]	@ (8003be4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d101      	bne.n	8003bd8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	58000400 	.word	0x58000400

08003be8 <LL_RCC_RF_DisableReset>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bf8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_IsRFUnderReset>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c1c:	d101      	bne.n	8003c22 <LL_RCC_IsRFUnderReset+0x1a>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <LL_RCC_IsRFUnderReset+0x1c>
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <LL_EXTI_EnableIT_32_63+0x24>)
 8003c36:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003c3a:	4905      	ldr	r1, [pc, #20]	@ (8003c50 <LL_EXTI_EnableIT_32_63+0x24>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	58000800 	.word	0x58000800

08003c54 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
    return status;
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	e052      	b.n	8003d10 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	799b      	ldrb	r3, [r3, #6]
 8003c72:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003c74:	7bbb      	ldrb	r3, [r7, #14]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_SUBGHZ_Init+0x2c>
 8003c7a:	7bbb      	ldrb	r3, [r7, #14]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d109      	bne.n	8003c94 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd fdfe 	bl	8001888 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003c8c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003c90:	f7ff ffcc 	bl	8003c2c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d126      	bne.n	8003ce8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003ca0:	f7ff ffa2 	bl	8003be8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d18 <HAL_SUBGHZ_Init+0xc4>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	0cdb      	lsrs	r3, r3, #19
 8003cb2:	2264      	movs	r2, #100	@ 0x64
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	609a      	str	r2, [r3, #8]
        break;
 8003cca:	e007      	b.n	8003cdc <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003cd2:	f7ff ff99 	bl	8003c08 <LL_RCC_IsRFUnderReset>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ee      	bne.n	8003cba <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003cdc:	f7ff ff34 	bl	8003b48 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003ce0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003ce4:	f7ff ff1c 	bl	8003b20 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003ce8:	f7ff ff4e 	bl	8003b88 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa6a 	bl	80041d0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	719a      	strb	r2, [r3, #6]

  return status;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000000 	.word	0x20000000

08003d1c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	461a      	mov	r2, r3
 8003d28:	460b      	mov	r3, r1
 8003d2a:	817b      	strh	r3, [r7, #10]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	799b      	ldrb	r3, [r3, #6]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d14a      	bne.n	8003dd0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	795b      	ldrb	r3, [r3, #5]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e045      	b.n	8003dd2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fb0a 	bl	800436c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d58:	f7ff ff06 	bl	8003b68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003d5c:	210d      	movs	r1, #13
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa56 	bl	8004210 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003d64:	897b      	ldrh	r3, [r7, #10]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fa4e 	bl	8004210 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003d74:	897b      	ldrh	r3, [r7, #10]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	4619      	mov	r1, r3
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fa48 	bl	8004210 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	82bb      	strh	r3, [r7, #20]
 8003d84:	e00a      	b.n	8003d9c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003d86:	8abb      	ldrh	r3, [r7, #20]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fa3d 	bl	8004210 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d96:	8abb      	ldrh	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	82bb      	strh	r3, [r7, #20]
 8003d9c:	8aba      	ldrh	r2, [r7, #20]
 8003d9e:	893b      	ldrh	r3, [r7, #8]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d3f0      	bcc.n	8003d86 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003da4:	f7ff fed0 	bl	8003b48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fb03 	bl	80043b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
 8003dba:	e001      	b.n	8003dc0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	715a      	strb	r2, [r3, #5]

    return status;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	e000      	b.n	8003dd2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b088      	sub	sp, #32
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	461a      	mov	r2, r3
 8003de6:	460b      	mov	r3, r1
 8003de8:	817b      	strh	r3, [r7, #10]
 8003dea:	4613      	mov	r3, r2
 8003dec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	799b      	ldrb	r3, [r3, #6]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d14a      	bne.n	8003e92 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	795b      	ldrb	r3, [r3, #5]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e045      	b.n	8003e94 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 faac 	bl	800436c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e14:	f7ff fea8 	bl	8003b68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003e18:	211d      	movs	r1, #29
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f9f8 	bl	8004210 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003e20:	897b      	ldrh	r3, [r7, #10]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	4619      	mov	r1, r3
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f9f0 	bl	8004210 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003e30:	897b      	ldrh	r3, [r7, #10]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f9ea 	bl	8004210 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f9e6 	bl	8004210 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	82fb      	strh	r3, [r7, #22]
 8003e48:	e009      	b.n	8003e5e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fa35 	bl	80042bc <SUBGHZSPI_Receive>
      pData++;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	3301      	adds	r3, #1
 8003e56:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003e58:	8afb      	ldrh	r3, [r7, #22]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	82fb      	strh	r3, [r7, #22]
 8003e5e:	8afa      	ldrh	r2, [r7, #22]
 8003e60:	893b      	ldrh	r3, [r7, #8]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d3f1      	bcc.n	8003e4a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e66:	f7ff fe6f 	bl	8003b48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 faa2 	bl	80043b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e001      	b.n	8003e82 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	715a      	strb	r2, [r3, #5]

    return status;
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	e000      	b.n	8003e94 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	72fb      	strb	r3, [r7, #11]
 8003eac:	4613      	mov	r3, r2
 8003eae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	799b      	ldrb	r3, [r3, #6]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d14a      	bne.n	8003f50 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	795b      	ldrb	r3, [r3, #5]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e045      	b.n	8003f52 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fa4d 	bl	800436c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
 8003ed4:	2b84      	cmp	r3, #132	@ 0x84
 8003ed6:	d002      	beq.n	8003ede <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003ed8:	7afb      	ldrb	r3, [r7, #11]
 8003eda:	2b94      	cmp	r3, #148	@ 0x94
 8003edc:	d103      	bne.n	8003ee6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	711a      	strb	r2, [r3, #4]
 8003ee4:	e002      	b.n	8003eec <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003eec:	f7ff fe3c 	bl	8003b68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003ef0:	7afb      	ldrb	r3, [r7, #11]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f98b 	bl	8004210 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	82bb      	strh	r3, [r7, #20]
 8003efe:	e00a      	b.n	8003f16 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003f00:	8abb      	ldrh	r3, [r7, #20]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f980 	bl	8004210 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003f10:	8abb      	ldrh	r3, [r7, #20]
 8003f12:	3301      	adds	r3, #1
 8003f14:	82bb      	strh	r3, [r7, #20]
 8003f16:	8aba      	ldrh	r2, [r7, #20]
 8003f18:	893b      	ldrh	r3, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d3f0      	bcc.n	8003f00 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f1e:	f7ff fe13 	bl	8003b48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003f22:	7afb      	ldrb	r3, [r7, #11]
 8003f24:	2b84      	cmp	r3, #132	@ 0x84
 8003f26:	d002      	beq.n	8003f2e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fa43 	bl	80043b4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
 8003f3a:	e001      	b.n	8003f40 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	715a      	strb	r2, [r3, #5]

    return status;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	e000      	b.n	8003f52 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	461a      	mov	r2, r3
 8003f66:	460b      	mov	r3, r1
 8003f68:	72fb      	strb	r3, [r7, #11]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	799b      	ldrb	r3, [r3, #6]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d13d      	bne.n	8003ff8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	795b      	ldrb	r3, [r3, #5]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e038      	b.n	8003ffa <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f9ec 	bl	800436c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f94:	f7ff fde8 	bl	8003b68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003f98:	7afb      	ldrb	r3, [r7, #11]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f937 	bl	8004210 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f933 	bl	8004210 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003faa:	2300      	movs	r3, #0
 8003fac:	82fb      	strh	r3, [r7, #22]
 8003fae:	e009      	b.n	8003fc4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f982 	bl	80042bc <SUBGHZSPI_Receive>
      pData++;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003fbe:	8afb      	ldrh	r3, [r7, #22]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	82fb      	strh	r3, [r7, #22]
 8003fc4:	8afa      	ldrh	r2, [r7, #22]
 8003fc6:	893b      	ldrh	r3, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d3f1      	bcc.n	8003fb0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003fcc:	f7ff fdbc 	bl	8003b48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f9ef 	bl	80043b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e001      	b.n	8003fe8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	715a      	strb	r2, [r3, #5]

    return status;
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
 8003ff6:	e000      	b.n	8003ffa <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b088      	sub	sp, #32
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	461a      	mov	r2, r3
 800400e:	460b      	mov	r3, r1
 8004010:	72fb      	strb	r3, [r7, #11]
 8004012:	4613      	mov	r3, r2
 8004014:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	799b      	ldrb	r3, [r3, #6]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d141      	bne.n	80040a8 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	795b      	ldrb	r3, [r3, #5]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800402c:	2302      	movs	r3, #2
 800402e:	e03c      	b.n	80040aa <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f998 	bl	800436c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800403c:	f7ff fd94 	bl	8003b68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004040:	211e      	movs	r1, #30
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f8e4 	bl	8004210 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004048:	7afb      	ldrb	r3, [r7, #11]
 800404a:	4619      	mov	r1, r3
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f8df 	bl	8004210 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004052:	2100      	movs	r1, #0
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f8db 	bl	8004210 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800405a:	2300      	movs	r3, #0
 800405c:	82fb      	strh	r3, [r7, #22]
 800405e:	e009      	b.n	8004074 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004060:	69b9      	ldr	r1, [r7, #24]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f92a 	bl	80042bc <SUBGHZSPI_Receive>
      pData++;
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	3301      	adds	r3, #1
 800406c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800406e:	8afb      	ldrh	r3, [r7, #22]
 8004070:	3301      	adds	r3, #1
 8004072:	82fb      	strh	r3, [r7, #22]
 8004074:	8afa      	ldrh	r2, [r7, #22]
 8004076:	893b      	ldrh	r3, [r7, #8]
 8004078:	429a      	cmp	r2, r3
 800407a:	d3f1      	bcc.n	8004060 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800407c:	f7ff fd64 	bl	8003b48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f997 	bl	80043b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e001      	b.n	8004098 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	715a      	strb	r2, [r3, #5]

    return status;
 80040a4:	7ffb      	ldrb	r3, [r7, #31]
 80040a6:	e000      	b.n	80040aa <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80040ba:	2300      	movs	r3, #0
 80040bc:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80040be:	f107 020c 	add.w	r2, r7, #12
 80040c2:	2302      	movs	r3, #2
 80040c4:	2112      	movs	r1, #18
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ff47 	bl	8003f5a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80040cc:	7b3b      	ldrb	r3, [r7, #12]
 80040ce:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80040d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	b21a      	sxth	r2, r3
 80040d8:	7b7b      	ldrb	r3, [r7, #13]
 80040da:	b21b      	sxth	r3, r3
 80040dc:	4313      	orrs	r3, r2
 80040de:	b21b      	sxth	r3, r3
 80040e0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80040e2:	f107 020c 	add.w	r2, r7, #12
 80040e6:	2302      	movs	r3, #2
 80040e8:	2102      	movs	r1, #2
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fed6 	bl	8003e9c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80040f0:	89fb      	ldrh	r3, [r7, #14]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 fddc 	bl	8005cb8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004100:	89fb      	ldrh	r3, [r7, #14]
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 800410c:	89fb      	ldrh	r3, [r7, #14]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f001 fddb 	bl	8005cd4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800411e:	89fb      	ldrh	r3, [r7, #14]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f001 fe2a 	bl	8005d84 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004130:	89fb      	ldrh	r3, [r7, #14]
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f001 fe2f 	bl	8005da0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004142:	89fb      	ldrh	r3, [r7, #14]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f001 fe34 	bl	8005dbc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004154:	89fb      	ldrh	r3, [r7, #14]
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f001 fe01 	bl	8005d68 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004166:	89fb      	ldrh	r3, [r7, #14]
 8004168:	099b      	lsrs	r3, r3, #6
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f001 fdbc 	bl	8005cf0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004178:	89fb      	ldrh	r3, [r7, #14]
 800417a:	09db      	lsrs	r3, r3, #7
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004184:	89fb      	ldrh	r3, [r7, #14]
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004190:	2101      	movs	r1, #1
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f001 fdba 	bl	8005d0c <HAL_SUBGHZ_CADStatusCallback>
 8004198:	e003      	b.n	80041a2 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800419a:	2100      	movs	r1, #0
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f001 fdb5 	bl	8005d0c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80041a2:	89fb      	ldrh	r3, [r7, #14]
 80041a4:	0a5b      	lsrs	r3, r3, #9
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f001 fdca 	bl	8005d48 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80041b4:	89fb      	ldrh	r3, [r7, #14]
 80041b6:	0b9b      	lsrs	r3, r3, #14
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f001 fe09 	bl	8005dd8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80041d8:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <SUBGHZSPI_Init+0x3c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0b      	ldr	r2, [pc, #44]	@ (800420c <SUBGHZSPI_Init+0x3c>)
 80041de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041e2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80041e4:	4a09      	ldr	r2, [pc, #36]	@ (800420c <SUBGHZSPI_Init+0x3c>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80041ec:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80041ee:	4b07      	ldr	r3, [pc, #28]	@ (800420c <SUBGHZSPI_Init+0x3c>)
 80041f0:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80041f4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80041f6:	4b05      	ldr	r3, [pc, #20]	@ (800420c <SUBGHZSPI_Init+0x3c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a04      	ldr	r2, [pc, #16]	@ (800420c <SUBGHZSPI_Init+0x3c>)
 80041fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004200:	6013      	str	r3, [r2, #0]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	58010000 	.word	0x58010000

08004210 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004220:	4b23      	ldr	r3, [pc, #140]	@ (80042b0 <SUBGHZSPI_Transmit+0xa0>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	0cdb      	lsrs	r3, r3, #19
 800422e:	2264      	movs	r2, #100	@ 0x64
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	609a      	str	r2, [r3, #8]
      break;
 8004246:	e008      	b.n	800425a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3b01      	subs	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800424e:	4b19      	ldr	r3, [pc, #100]	@ (80042b4 <SUBGHZSPI_Transmit+0xa4>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d1ed      	bne.n	8004236 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800425a:	4b17      	ldr	r3, [pc, #92]	@ (80042b8 <SUBGHZSPI_Transmit+0xa8>)
 800425c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004264:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <SUBGHZSPI_Transmit+0xa0>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	0cdb      	lsrs	r3, r3, #19
 8004272:	2264      	movs	r2, #100	@ 0x64
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	609a      	str	r2, [r3, #8]
      break;
 800428a:	e008      	b.n	800429e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3b01      	subs	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004292:	4b08      	ldr	r3, [pc, #32]	@ (80042b4 <SUBGHZSPI_Transmit+0xa4>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b01      	cmp	r3, #1
 800429c:	d1ed      	bne.n	800427a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800429e:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <SUBGHZSPI_Transmit+0xa4>)
 80042a0:	68db      	ldr	r3, [r3, #12]

  return status;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000000 	.word	0x20000000
 80042b4:	58010000 	.word	0x58010000
 80042b8:	5801000c 	.word	0x5801000c

080042bc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80042ca:	4b25      	ldr	r3, [pc, #148]	@ (8004360 <SUBGHZSPI_Receive+0xa4>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	0cdb      	lsrs	r3, r3, #19
 80042d8:	2264      	movs	r2, #100	@ 0x64
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	609a      	str	r2, [r3, #8]
      break;
 80042f0:	e008      	b.n	8004304 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80042f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <SUBGHZSPI_Receive+0xa8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d1ed      	bne.n	80042e0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004304:	4b18      	ldr	r3, [pc, #96]	@ (8004368 <SUBGHZSPI_Receive+0xac>)
 8004306:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	22ff      	movs	r2, #255	@ 0xff
 800430c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800430e:	4b14      	ldr	r3, [pc, #80]	@ (8004360 <SUBGHZSPI_Receive+0xa4>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	0cdb      	lsrs	r3, r3, #19
 800431c:	2264      	movs	r2, #100	@ 0x64
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d105      	bne.n	8004336 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	609a      	str	r2, [r3, #8]
      break;
 8004334:	e008      	b.n	8004348 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3b01      	subs	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <SUBGHZSPI_Receive+0xa8>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d1ed      	bne.n	8004324 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <SUBGHZSPI_Receive+0xa8>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	701a      	strb	r2, [r3, #0]

  return status;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000000 	.word	0x20000000
 8004364:	58010000 	.word	0x58010000
 8004368:	5801000c 	.word	0x5801000c

0800436c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	791b      	ldrb	r3, [r3, #4]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d111      	bne.n	80043a0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <SUBGHZ_CheckDeviceReady+0x44>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800438c:	f7ff fbec 	bl	8003b68 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3b01      	subs	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f9      	bne.n	8004390 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800439c:	f7ff fbd4 	bl	8003b48 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f807 	bl	80043b4 <SUBGHZ_WaitOnBusy>
 80043a6:	4603      	mov	r3, r0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000000 	.word	0x20000000

080043b4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80043c0:	4b12      	ldr	r3, [pc, #72]	@ (800440c <SUBGHZ_WaitOnBusy+0x58>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4413      	add	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	0d1b      	lsrs	r3, r3, #20
 80043ce:	2264      	movs	r2, #100	@ 0x64
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80043d6:	f7ff fbf5 	bl	8003bc4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80043da:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	609a      	str	r2, [r3, #8]
      break;
 80043ec:	e009      	b.n	8004402 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80043f4:	f7ff fbd4 	bl	8003ba0 <LL_PWR_IsActiveFlag_RFBUSYS>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d0e9      	beq.n	80043d6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000000 	.word	0x20000000

08004410 <LL_RCC_GetUSARTClockSource>:
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800441c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	401a      	ands	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	041b      	lsls	r3, r3, #16
 8004428:	4313      	orrs	r3, r2
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <LL_RCC_GetLPUARTClockSource>:
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800443c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004440:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4013      	ands	r3, r2
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e042      	b.n	80044ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fd fb40 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2224      	movs	r2, #36	@ 0x24
 8004480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fb23 	bl	8004ae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f8ac 	bl	8004600 <UART_SetConfig>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e01b      	b.n	80044ea <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fba1 	bl	8004c2a <UART_CheckIdleState>
 80044e8:	4603      	mov	r3, r0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b08a      	sub	sp, #40	@ 0x28
 80044f6:	af02      	add	r7, sp, #8
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004508:	2b20      	cmp	r3, #32
 800450a:	d173      	bne.n	80045f4 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_UART_Transmit+0x26>
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e06c      	b.n	80045f6 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2221      	movs	r2, #33	@ 0x21
 8004528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452c:	f7fd fcac 	bl	8001e88 <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800454a:	d108      	bne.n	800455e <HAL_UART_Transmit+0x6c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	e003      	b.n	8004566 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004566:	e02c      	b.n	80045c2 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2200      	movs	r2, #0
 8004570:	2180      	movs	r1, #128	@ 0x80
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fba7 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e039      	b.n	80045f6 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004596:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	3302      	adds	r3, #2
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e007      	b.n	80045b0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	781a      	ldrb	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3301      	adds	r3, #1
 80045ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1cc      	bne.n	8004568 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	@ 0x40
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fb74 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e006      	b.n	80045f6 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b08c      	sub	sp, #48	@ 0x30
 8004606:	af00      	add	r7, sp, #0
 8004608:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	431a      	orrs	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	431a      	orrs	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	4313      	orrs	r3, r2
 8004626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b94      	ldr	r3, [pc, #592]	@ (8004880 <UART_SetConfig+0x280>)
 8004630:	4013      	ands	r3, r2
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004638:	430b      	orrs	r3, r1
 800463a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a89      	ldr	r2, [pc, #548]	@ (8004884 <UART_SetConfig+0x284>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004668:	4313      	orrs	r3, r2
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004676:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004680:	430b      	orrs	r3, r1
 8004682:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	f023 010f 	bic.w	r1, r3, #15
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a7a      	ldr	r2, [pc, #488]	@ (8004888 <UART_SetConfig+0x288>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d127      	bne.n	80046f4 <UART_SetConfig+0xf4>
 80046a4:	2003      	movs	r0, #3
 80046a6:	f7ff feb3 	bl	8004410 <LL_RCC_GetUSARTClockSource>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d81b      	bhi.n	80046ec <UART_SetConfig+0xec>
 80046b4:	a201      	add	r2, pc, #4	@ (adr r2, 80046bc <UART_SetConfig+0xbc>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	080046cd 	.word	0x080046cd
 80046c0:	080046dd 	.word	0x080046dd
 80046c4:	080046d5 	.word	0x080046d5
 80046c8:	080046e5 	.word	0x080046e5
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046d2:	e080      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80046d4:	2302      	movs	r3, #2
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046da:	e07c      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80046dc:	2304      	movs	r3, #4
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046e2:	e078      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80046e4:	2308      	movs	r3, #8
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ea:	e074      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80046ec:	2310      	movs	r3, #16
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046f2:	e070      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a64      	ldr	r2, [pc, #400]	@ (800488c <UART_SetConfig+0x28c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d138      	bne.n	8004770 <UART_SetConfig+0x170>
 80046fe:	200c      	movs	r0, #12
 8004700:	f7ff fe86 	bl	8004410 <LL_RCC_GetUSARTClockSource>
 8004704:	4603      	mov	r3, r0
 8004706:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800470a:	2b0c      	cmp	r3, #12
 800470c:	d82c      	bhi.n	8004768 <UART_SetConfig+0x168>
 800470e:	a201      	add	r2, pc, #4	@ (adr r2, 8004714 <UART_SetConfig+0x114>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	08004749 	.word	0x08004749
 8004718:	08004769 	.word	0x08004769
 800471c:	08004769 	.word	0x08004769
 8004720:	08004769 	.word	0x08004769
 8004724:	08004759 	.word	0x08004759
 8004728:	08004769 	.word	0x08004769
 800472c:	08004769 	.word	0x08004769
 8004730:	08004769 	.word	0x08004769
 8004734:	08004751 	.word	0x08004751
 8004738:	08004769 	.word	0x08004769
 800473c:	08004769 	.word	0x08004769
 8004740:	08004769 	.word	0x08004769
 8004744:	08004761 	.word	0x08004761
 8004748:	2300      	movs	r3, #0
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800474e:	e042      	b.n	80047d6 <UART_SetConfig+0x1d6>
 8004750:	2302      	movs	r3, #2
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004756:	e03e      	b.n	80047d6 <UART_SetConfig+0x1d6>
 8004758:	2304      	movs	r3, #4
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800475e:	e03a      	b.n	80047d6 <UART_SetConfig+0x1d6>
 8004760:	2308      	movs	r3, #8
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004766:	e036      	b.n	80047d6 <UART_SetConfig+0x1d6>
 8004768:	2310      	movs	r3, #16
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800476e:	e032      	b.n	80047d6 <UART_SetConfig+0x1d6>
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a43      	ldr	r2, [pc, #268]	@ (8004884 <UART_SetConfig+0x284>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d12a      	bne.n	80047d0 <UART_SetConfig+0x1d0>
 800477a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800477e:	f7ff fe59 	bl	8004434 <LL_RCC_GetLPUARTClockSource>
 8004782:	4603      	mov	r3, r0
 8004784:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004788:	d01a      	beq.n	80047c0 <UART_SetConfig+0x1c0>
 800478a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800478e:	d81b      	bhi.n	80047c8 <UART_SetConfig+0x1c8>
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004794:	d00c      	beq.n	80047b0 <UART_SetConfig+0x1b0>
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800479a:	d815      	bhi.n	80047c8 <UART_SetConfig+0x1c8>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <UART_SetConfig+0x1a8>
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a4:	d008      	beq.n	80047b8 <UART_SetConfig+0x1b8>
 80047a6:	e00f      	b.n	80047c8 <UART_SetConfig+0x1c8>
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ae:	e012      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b6:	e00e      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047be:	e00a      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c6:	e006      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ce:	e002      	b.n	80047d6 <UART_SetConfig+0x1d6>
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2a      	ldr	r2, [pc, #168]	@ (8004884 <UART_SetConfig+0x284>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	f040 80a4 	bne.w	800492a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d823      	bhi.n	8004832 <UART_SetConfig+0x232>
 80047ea:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <UART_SetConfig+0x1f0>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004815 	.word	0x08004815
 80047f4:	08004833 	.word	0x08004833
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004833 	.word	0x08004833
 8004800:	08004823 	.word	0x08004823
 8004804:	08004833 	.word	0x08004833
 8004808:	08004833 	.word	0x08004833
 800480c:	08004833 	.word	0x08004833
 8004810:	0800482b 	.word	0x0800482b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004814:	f7fe fea0 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 8004818:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800481a:	e010      	b.n	800483e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800481c:	4b1c      	ldr	r3, [pc, #112]	@ (8004890 <UART_SetConfig+0x290>)
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004820:	e00d      	b.n	800483e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004822:	f7fe fde5 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004826:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004828:	e009      	b.n	800483e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004830:	e005      	b.n	800483e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800483c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8137 	beq.w	8004ab4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	4a12      	ldr	r2, [pc, #72]	@ (8004894 <UART_SetConfig+0x294>)
 800484c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004850:	461a      	mov	r2, r3
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	fbb3 f3f2 	udiv	r3, r3, r2
 8004858:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4413      	add	r3, r2
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	429a      	cmp	r2, r3
 8004868:	d305      	bcc.n	8004876 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	429a      	cmp	r2, r3
 8004874:	d910      	bls.n	8004898 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800487c:	e11a      	b.n	8004ab4 <UART_SetConfig+0x4b4>
 800487e:	bf00      	nop
 8004880:	cfff69f3 	.word	0xcfff69f3
 8004884:	40008000 	.word	0x40008000
 8004888:	40013800 	.word	0x40013800
 800488c:	40004400 	.word	0x40004400
 8004890:	00f42400 	.word	0x00f42400
 8004894:	08008b74 	.word	0x08008b74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	2200      	movs	r2, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	60fa      	str	r2, [r7, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	4a8e      	ldr	r2, [pc, #568]	@ (8004ae0 <UART_SetConfig+0x4e0>)
 80048a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2200      	movs	r2, #0
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048ba:	f7fc fbab 	bl	8001014 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	020b      	lsls	r3, r1, #8
 80048d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048d4:	0202      	lsls	r2, r0, #8
 80048d6:	6979      	ldr	r1, [r7, #20]
 80048d8:	6849      	ldr	r1, [r1, #4]
 80048da:	0849      	lsrs	r1, r1, #1
 80048dc:	2000      	movs	r0, #0
 80048de:	460c      	mov	r4, r1
 80048e0:	4605      	mov	r5, r0
 80048e2:	eb12 0804 	adds.w	r8, r2, r4
 80048e6:	eb43 0905 	adc.w	r9, r3, r5
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	469a      	mov	sl, r3
 80048f2:	4693      	mov	fp, r2
 80048f4:	4652      	mov	r2, sl
 80048f6:	465b      	mov	r3, fp
 80048f8:	4640      	mov	r0, r8
 80048fa:	4649      	mov	r1, r9
 80048fc:	f7fc fb8a 	bl	8001014 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800490e:	d308      	bcc.n	8004922 <UART_SetConfig+0x322>
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004916:	d204      	bcs.n	8004922 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a3a      	ldr	r2, [r7, #32]
 800491e:	60da      	str	r2, [r3, #12]
 8004920:	e0c8      	b.n	8004ab4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004928:	e0c4      	b.n	8004ab4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004932:	d167      	bne.n	8004a04 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004934:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004938:	2b08      	cmp	r3, #8
 800493a:	d828      	bhi.n	800498e <UART_SetConfig+0x38e>
 800493c:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <UART_SetConfig+0x344>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004969 	.word	0x08004969
 8004948:	08004971 	.word	0x08004971
 800494c:	08004979 	.word	0x08004979
 8004950:	0800498f 	.word	0x0800498f
 8004954:	0800497f 	.word	0x0800497f
 8004958:	0800498f 	.word	0x0800498f
 800495c:	0800498f 	.word	0x0800498f
 8004960:	0800498f 	.word	0x0800498f
 8004964:	08004987 	.word	0x08004987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fe fdf6 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 800496c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800496e:	e014      	b.n	800499a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7fe fe04 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8004974:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004976:	e010      	b.n	800499a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b5a      	ldr	r3, [pc, #360]	@ (8004ae4 <UART_SetConfig+0x4e4>)
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800497c:	e00d      	b.n	800499a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fe fd37 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004982:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004984:	e009      	b.n	800499a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800498a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800498c:	e005      	b.n	800499a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8089 	beq.w	8004ab4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a6:	4a4e      	ldr	r2, [pc, #312]	@ (8004ae0 <UART_SetConfig+0x4e0>)
 80049a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ac:	461a      	mov	r2, r3
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049b4:	005a      	lsls	r2, r3, #1
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	441a      	add	r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2b0f      	cmp	r3, #15
 80049cc:	d916      	bls.n	80049fc <UART_SetConfig+0x3fc>
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d4:	d212      	bcs.n	80049fc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f023 030f 	bic.w	r3, r3, #15
 80049de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	8bfb      	ldrh	r3, [r7, #30]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	8bfa      	ldrh	r2, [r7, #30]
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	e05b      	b.n	8004ab4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a02:	e057      	b.n	8004ab4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d828      	bhi.n	8004a5e <UART_SetConfig+0x45e>
 8004a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <UART_SetConfig+0x414>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a49 	.word	0x08004a49
 8004a20:	08004a5f 	.word	0x08004a5f
 8004a24:	08004a4f 	.word	0x08004a4f
 8004a28:	08004a5f 	.word	0x08004a5f
 8004a2c:	08004a5f 	.word	0x08004a5f
 8004a30:	08004a5f 	.word	0x08004a5f
 8004a34:	08004a57 	.word	0x08004a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7fe fd8e 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 8004a3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a3e:	e014      	b.n	8004a6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7fe fd9c 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8004a44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a46:	e010      	b.n	8004a6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a48:	4b26      	ldr	r3, [pc, #152]	@ (8004ae4 <UART_SetConfig+0x4e4>)
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a4c:	e00d      	b.n	8004a6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4e:	f7fe fccf 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004a52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a54:	e009      	b.n	8004a6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a5c:	e005      	b.n	8004a6a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a68:	bf00      	nop
    }

    if (pclk != 0U)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d021      	beq.n	8004ab4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae0 <UART_SetConfig+0x4e0>)
 8004a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	441a      	add	r2, r3
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d909      	bls.n	8004aae <UART_SetConfig+0x4ae>
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa0:	d205      	bcs.n	8004aae <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60da      	str	r2, [r3, #12]
 8004aac:	e002      	b.n	8004ab4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2200      	movs	r2, #0
 8004ace:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ad0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3730      	adds	r7, #48	@ 0x30
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ade:	bf00      	nop
 8004ae0:	08008b74 	.word	0x08008b74
 8004ae4:	00f42400 	.word	0x00f42400

08004ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01a      	beq.n	8004bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004be6:	d10a      	bne.n	8004bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af02      	add	r7, sp, #8
 8004c30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c3a:	f7fd f925 	bl	8001e88 <HAL_GetTick>
 8004c3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d10e      	bne.n	8004c6c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f832 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e028      	b.n	8004cbe <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d10e      	bne.n	8004c98 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f81c 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e012      	b.n	8004cbe <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b09c      	sub	sp, #112	@ 0x70
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd6:	e0af      	b.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cde:	f000 80ab 	beq.w	8004e38 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce2:	f7fd f8d1 	bl	8001e88 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d140      	bne.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d08:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004d0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d18:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e6      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3308      	adds	r3, #8
 8004d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3308      	adds	r3, #8
 8004d48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d4a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004d4c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e5      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e06f      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d057      	beq.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x172>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b80      	cmp	r3, #128	@ 0x80
 8004d8c:	d054      	beq.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x172>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d051      	beq.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004da2:	d149      	bne.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e6      	bne.n	8004dae <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3308      	adds	r3, #8
 8004de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	613b      	str	r3, [r7, #16]
   return(result);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e00:	623a      	str	r2, [r7, #32]
 8004e02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	69f9      	ldr	r1, [r7, #28]
 8004e06:	6a3a      	ldr	r2, [r7, #32]
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e5      	bne.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e010      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4013      	ands	r3, r2
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	f43f af40 	beq.w	8004cd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3770      	adds	r7, #112	@ 0x70
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e027      	b.n	8004ec8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	@ 0x24
 8004e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004ea6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e02d      	b.n	8004f46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2224      	movs	r2, #36	@ 0x24
 8004ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f850 	bl	8004fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e02d      	b.n	8004fc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2224      	movs	r2, #36	@ 0x24
 8004f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f812 	bl	8004fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d108      	bne.n	8004fee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fec:	e031      	b.n	8005052 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fee:	2308      	movs	r3, #8
 8004ff0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	0e5b      	lsrs	r3, r3, #25
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	0f5b      	lsrs	r3, r3, #29
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005016:	7bbb      	ldrb	r3, [r7, #14]
 8005018:	7b3a      	ldrb	r2, [r7, #12]
 800501a:	4910      	ldr	r1, [pc, #64]	@ (800505c <UARTEx_SetNbDataToProcess+0x90>)
 800501c:	5c8a      	ldrb	r2, [r1, r2]
 800501e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005022:	7b3a      	ldrb	r2, [r7, #12]
 8005024:	490e      	ldr	r1, [pc, #56]	@ (8005060 <UARTEx_SetNbDataToProcess+0x94>)
 8005026:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005028:	fb93 f3f2 	sdiv	r3, r3, r2
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	7b7a      	ldrb	r2, [r7, #13]
 8005038:	4908      	ldr	r1, [pc, #32]	@ (800505c <UARTEx_SetNbDataToProcess+0x90>)
 800503a:	5c8a      	ldrb	r2, [r1, r2]
 800503c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005040:	7b7a      	ldrb	r2, [r7, #13]
 8005042:	4907      	ldr	r1, [pc, #28]	@ (8005060 <UARTEx_SetNbDataToProcess+0x94>)
 8005044:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005046:	fb93 f3f2 	sdiv	r3, r3, r2
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	08008b8c 	.word	0x08008b8c
 8005060:	08008b94 	.word	0x08008b94

08005064 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8005068:	f7fc fe3c 	bl	8001ce4 <BSP_RADIO_Init>
 800506c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800506e:	4618      	mov	r0, r3
 8005070:	bd80      	pop	{r7, pc}

08005072 <RBI_GetTxConfig>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_GetTxConfig(void)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8005076:	f7fc fe73 	bl	8001d60 <BSP_RADIO_GetTxConfig>
 800507a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800507c:	4618      	mov	r0, r3
 800507e:	bd80      	pop	{r7, pc}

08005080 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8005084:	f7fc fe73 	bl	8001d6e <BSP_RADIO_IsTCXO>
 8005088:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800508a:	4618      	mov	r0, r3
 800508c:	bd80      	pop	{r7, pc}

0800508e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8005092:	f7fc fe73 	bl	8001d7c <BSP_RADIO_IsDCDC>
 8005096:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}

0800509c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fc fe6e 	bl	8001d8a <BSP_RADIO_GetRFOMaxPowerConfig>
 80050ae:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80050c6:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <SUBGRF_Init+0x84>)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80050cc:	f7fc fbca 	bl	8001864 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80050d0:	2002      	movs	r0, #2
 80050d2:	f000 fe91 	bl	8005df8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80050d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <SUBGRF_Init+0x88>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80050dc:	2000      	movs	r0, #0
 80050de:	f000 f895 	bl	800520c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80050e2:	f7ff ffcd 	bl	8005080 <RBI_IsTCXO>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d10e      	bne.n	800510a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80050ec:	2140      	movs	r1, #64	@ 0x40
 80050ee:	2001      	movs	r0, #1
 80050f0:	f000 f9ba 	bl	8005468 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80050f4:	2100      	movs	r1, #0
 80050f6:	f640 1011 	movw	r0, #2321	@ 0x911
 80050fa:	f000 fcf9 	bl	8005af0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80050fe:	237f      	movs	r3, #127	@ 0x7f
 8005100:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8005102:	7b38      	ldrb	r0, [r7, #12]
 8005104:	f000 f8be 	bl	8005284 <SUBGRF_Calibrate>
 8005108:	e009      	b.n	800511e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800510a:	2120      	movs	r1, #32
 800510c:	f640 1011 	movw	r0, #2321	@ 0x911
 8005110:	f000 fcee 	bl	8005af0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005114:	2120      	movs	r1, #32
 8005116:	f640 1012 	movw	r0, #2322	@ 0x912
 800511a:	f000 fce9 	bl	8005af0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800511e:	210e      	movs	r1, #14
 8005120:	f640 101f 	movw	r0, #2335	@ 0x91f
 8005124:	f000 fce4 	bl	8005af0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8005128:	f7ff ff9c 	bl	8005064 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800512c:	4b05      	ldr	r3, [pc, #20]	@ (8005144 <SUBGRF_Init+0x8c>)
 800512e:	2201      	movs	r2, #1
 8005130:	701a      	strb	r2, [r3, #0]
}
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	200003b0 	.word	0x200003b0
 8005140:	200003ac 	.word	0x200003ac
 8005144:	200003a4 	.word	0x200003a4

08005148 <SUBGRF_GetPayload>:
{
    SUBGRF_WriteBuffer( 0x00, payload, size );
}

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	4613      	mov	r3, r2
 8005154:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800515a:	f107 0317 	add.w	r3, r7, #23
 800515e:	4619      	mov	r1, r3
 8005160:	68b8      	ldr	r0, [r7, #8]
 8005162:	f000 fc47 	bl	80059f4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	79fa      	ldrb	r2, [r7, #7]
 800516c:	429a      	cmp	r2, r3
 800516e:	d201      	bcs.n	8005174 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8005170:	2301      	movs	r3, #1
 8005172:	e007      	b.n	8005184 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8005174:	7df8      	ldrb	r0, [r7, #23]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	68f9      	ldr	r1, [r7, #12]
 800517e:	f000 fd01 	bl	8005b84 <SUBGRF_ReadBuffer>

    return 0;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	b29b      	uxth	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80051a6:	f000 f9e3 	bl	8005570 <SUBGRF_GetPacketType>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d108      	bne.n	80051c2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80051b0:	f107 030c 	add.w	r3, r7, #12
 80051b4:	2202      	movs	r2, #2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80051bc:	f000 fcc0 	bl	8005b40 <SUBGRF_WriteRegisters>
            break;
 80051c0:	e000      	b.n	80051c4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80051c2:	bf00      	nop
    }
}
 80051c4:	bf00      	nop
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	b29b      	uxth	r3, r3
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80051e6:	f000 f9c3 	bl	8005570 <SUBGRF_GetPacketType>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d108      	bne.n	8005202 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80051f0:	f107 030c 	add.w	r3, r7, #12
 80051f4:	2202      	movs	r2, #2
 80051f6:	4619      	mov	r1, r3
 80051f8:	f240 60be 	movw	r0, #1726	@ 0x6be
 80051fc:	f000 fca0 	bl	8005b40 <SUBGRF_WriteRegisters>
            break;
 8005200:	e000      	b.n	8005204 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8005202:	bf00      	nop
    }
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8005216:	1dfb      	adds	r3, r7, #7
 8005218:	2201      	movs	r2, #1
 800521a:	4619      	mov	r1, r3
 800521c:	2080      	movs	r0, #128	@ 0x80
 800521e:	f000 fcd3 	bl	8005bc8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8005228:	4b05      	ldr	r3, [pc, #20]	@ (8005240 <SUBGRF_SetStandby+0x34>)
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800522e:	e002      	b.n	8005236 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8005230:	4b03      	ldr	r3, [pc, #12]	@ (8005240 <SUBGRF_SetStandby+0x34>)
 8005232:	2202      	movs	r2, #2
 8005234:	701a      	strb	r2, [r3, #0]
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	200003a4 	.word	0x200003a4

08005244 <SUBGRF_SetRx>:
    buf[2] = ( uint8_t )( timeout & 0xFF );
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
}

void SUBGRF_SetRx( uint32_t timeout )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800524c:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <SUBGRF_SetRx+0x3c>)
 800524e:	2205      	movs	r2, #5
 8005250:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	b2db      	uxtb	r3, r3
 8005258:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	0a1b      	lsrs	r3, r3, #8
 800525e:	b2db      	uxtb	r3, r3
 8005260:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8005268:	f107 030c 	add.w	r3, r7, #12
 800526c:	2203      	movs	r2, #3
 800526e:	4619      	mov	r1, r3
 8005270:	2082      	movs	r0, #130	@ 0x82
 8005272:	f000 fca9 	bl	8005bc8 <SUBGRF_WriteCommand>
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	200003a4 	.word	0x200003a4

08005284 <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800528c:	793b      	ldrb	r3, [r7, #4]
 800528e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	b25b      	sxtb	r3, r3
 8005296:	019b      	lsls	r3, r3, #6
 8005298:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800529a:	793b      	ldrb	r3, [r7, #4]
 800529c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80052a0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80052a2:	b25b      	sxtb	r3, r3
 80052a4:	015b      	lsls	r3, r3, #5
 80052a6:	b25b      	sxtb	r3, r3
 80052a8:	4313      	orrs	r3, r2
 80052aa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80052ac:	793b      	ldrb	r3, [r7, #4]
 80052ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052b2:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80052b4:	b25b      	sxtb	r3, r3
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80052be:	793b      	ldrb	r3, [r7, #4]
 80052c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80052c4:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80052c6:	b25b      	sxtb	r3, r3
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	b25b      	sxtb	r3, r3
 80052cc:	4313      	orrs	r3, r2
 80052ce:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80052d0:	793b      	ldrb	r3, [r7, #4]
 80052d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052d6:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80052d8:	b25b      	sxtb	r3, r3
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	4313      	orrs	r3, r2
 80052e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80052e2:	793b      	ldrb	r3, [r7, #4]
 80052e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052e8:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80052ea:	b25b      	sxtb	r3, r3
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	b25b      	sxtb	r3, r3
 80052f0:	4313      	orrs	r3, r2
 80052f2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80052f4:	793b      	ldrb	r3, [r7, #4]
 80052f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80052fe:	4313      	orrs	r3, r2
 8005300:	b25b      	sxtb	r3, r3
 8005302:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8005304:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8005306:	f107 030f 	add.w	r3, r7, #15
 800530a:	2201      	movs	r2, #1
 800530c:	4619      	mov	r1, r3
 800530e:	2089      	movs	r0, #137	@ 0x89
 8005310:	f000 fc5a 	bl	8005bc8 <SUBGRF_WriteCommand>
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a1d      	ldr	r2, [pc, #116]	@ (800539c <SUBGRF_CalibrateImage+0x80>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d904      	bls.n	8005336 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800532c:	23e1      	movs	r3, #225	@ 0xe1
 800532e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8005330:	23e9      	movs	r3, #233	@ 0xe9
 8005332:	737b      	strb	r3, [r7, #13]
 8005334:	e027      	b.n	8005386 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a19      	ldr	r2, [pc, #100]	@ (80053a0 <SUBGRF_CalibrateImage+0x84>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d904      	bls.n	8005348 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800533e:	23d7      	movs	r3, #215	@ 0xd7
 8005340:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8005342:	23db      	movs	r3, #219	@ 0xdb
 8005344:	737b      	strb	r3, [r7, #13]
 8005346:	e01e      	b.n	8005386 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a16      	ldr	r2, [pc, #88]	@ (80053a4 <SUBGRF_CalibrateImage+0x88>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d904      	bls.n	800535a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8005350:	23c1      	movs	r3, #193	@ 0xc1
 8005352:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8005354:	23c5      	movs	r3, #197	@ 0xc5
 8005356:	737b      	strb	r3, [r7, #13]
 8005358:	e015      	b.n	8005386 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a12      	ldr	r2, [pc, #72]	@ (80053a8 <SUBGRF_CalibrateImage+0x8c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d904      	bls.n	800536c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8005362:	2375      	movs	r3, #117	@ 0x75
 8005364:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8005366:	2381      	movs	r3, #129	@ 0x81
 8005368:	737b      	strb	r3, [r7, #13]
 800536a:	e00c      	b.n	8005386 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a0f      	ldr	r2, [pc, #60]	@ (80053ac <SUBGRF_CalibrateImage+0x90>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d904      	bls.n	800537e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8005374:	236b      	movs	r3, #107	@ 0x6b
 8005376:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8005378:	236f      	movs	r3, #111	@ 0x6f
 800537a:	737b      	strb	r3, [r7, #13]
 800537c:	e003      	b.n	8005386 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800537e:	2329      	movs	r3, #41	@ 0x29
 8005380:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8005382:	232b      	movs	r3, #43	@ 0x2b
 8005384:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8005386:	f107 030c 	add.w	r3, r7, #12
 800538a:	2202      	movs	r2, #2
 800538c:	4619      	mov	r1, r3
 800538e:	2098      	movs	r0, #152	@ 0x98
 8005390:	f000 fc1a 	bl	8005bc8 <SUBGRF_WriteCommand>
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	35a4e900 	.word	0x35a4e900
 80053a0:	32a9f880 	.word	0x32a9f880
 80053a4:	2de54480 	.word	0x2de54480
 80053a8:	1b6b0b00 	.word	0x1b6b0b00
 80053ac:	1954fc40 	.word	0x1954fc40

080053b0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4604      	mov	r4, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	4611      	mov	r1, r2
 80053bc:	461a      	mov	r2, r3
 80053be:	4623      	mov	r3, r4
 80053c0:	71fb      	strb	r3, [r7, #7]
 80053c2:	4603      	mov	r3, r0
 80053c4:	71bb      	strb	r3, [r7, #6]
 80053c6:	460b      	mov	r3, r1
 80053c8:	717b      	strb	r3, [r7, #5]
 80053ca:	4613      	mov	r3, r2
 80053cc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80053d2:	79bb      	ldrb	r3, [r7, #6]
 80053d4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80053d6:	797b      	ldrb	r3, [r7, #5]
 80053d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80053da:	793b      	ldrb	r3, [r7, #4]
 80053dc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80053de:	f107 030c 	add.w	r3, r7, #12
 80053e2:	2204      	movs	r2, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	2095      	movs	r0, #149	@ 0x95
 80053e8:	f000 fbee 	bl	8005bc8 <SUBGRF_WriteCommand>
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}

080053f4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	461a      	mov	r2, r3
 8005402:	4623      	mov	r3, r4
 8005404:	80fb      	strh	r3, [r7, #6]
 8005406:	4603      	mov	r3, r0
 8005408:	80bb      	strh	r3, [r7, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	807b      	strh	r3, [r7, #2]
 800540e:	4613      	mov	r3, r2
 8005410:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	b29b      	uxth	r3, r3
 8005418:	b2db      	uxtb	r3, r3
 800541a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8005422:	88bb      	ldrh	r3, [r7, #4]
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	b29b      	uxth	r3, r3
 8005428:	b2db      	uxtb	r3, r3
 800542a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800542c:	88bb      	ldrh	r3, [r7, #4]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8005432:	887b      	ldrh	r3, [r7, #2]
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	b29b      	uxth	r3, r3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800543c:	887b      	ldrh	r3, [r7, #2]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8005442:	883b      	ldrh	r3, [r7, #0]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	b29b      	uxth	r3, r3
 8005448:	b2db      	uxtb	r3, r3
 800544a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800544c:	883b      	ldrh	r3, [r7, #0]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8005452:	f107 0308 	add.w	r3, r7, #8
 8005456:	2208      	movs	r2, #8
 8005458:	4619      	mov	r1, r3
 800545a:	2008      	movs	r0, #8
 800545c:	f000 fbb4 	bl	8005bc8 <SUBGRF_WriteCommand>
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bd90      	pop	{r4, r7, pc}

08005468 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	6039      	str	r1, [r7, #0]
 8005472:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	b2db      	uxtb	r3, r3
 800547c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	b2db      	uxtb	r3, r3
 8005484:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	0a1b      	lsrs	r3, r3, #8
 800548a:	b2db      	uxtb	r3, r3
 800548c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8005494:	f107 030c 	add.w	r3, r7, #12
 8005498:	2204      	movs	r2, #4
 800549a:	4619      	mov	r1, r3
 800549c:	2097      	movs	r0, #151	@ 0x97
 800549e:	f000 fb93 	bl	8005bc8 <SUBGRF_WriteCommand>
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80054ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80054ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005530 <SUBGRF_SetRfFrequency+0x84>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	f083 0301 	eor.w	r3, r3, #1
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ff27 	bl	800531c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80054ce:	4b18      	ldr	r3, [pc, #96]	@ (8005530 <SUBGRF_SetRfFrequency+0x84>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	461c      	mov	r4, r3
 80054da:	4615      	mov	r5, r2
 80054dc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80054e0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80054e4:	4a13      	ldr	r2, [pc, #76]	@ (8005534 <SUBGRF_SetRfFrequency+0x88>)
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	f7fb fd91 	bl	8001014 <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4613      	mov	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	0e1b      	lsrs	r3, r3, #24
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	b2db      	uxtb	r3, r3
 8005508:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	0a1b      	lsrs	r3, r3, #8
 800550e:	b2db      	uxtb	r3, r3
 8005510:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8005518:	f107 0308 	add.w	r3, r7, #8
 800551c:	2204      	movs	r2, #4
 800551e:	4619      	mov	r1, r3
 8005520:	2086      	movs	r0, #134	@ 0x86
 8005522:	f000 fb51 	bl	8005bc8 <SUBGRF_WriteCommand>
}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005530:	200003ac 	.word	0x200003ac
 8005534:	01e84800 	.word	0x01e84800

08005538 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8005542:	79fa      	ldrb	r2, [r7, #7]
 8005544:	4b09      	ldr	r3, [pc, #36]	@ (800556c <SUBGRF_SetPacketType+0x34>)
 8005546:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800554e:	2100      	movs	r1, #0
 8005550:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8005554:	f000 facc 	bl	8005af0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8005558:	1dfb      	adds	r3, r7, #7
 800555a:	2201      	movs	r2, #1
 800555c:	4619      	mov	r1, r3
 800555e:	208a      	movs	r0, #138	@ 0x8a
 8005560:	f000 fb32 	bl	8005bc8 <SUBGRF_WriteCommand>
}
 8005564:	bf00      	nop
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200003a5 	.word	0x200003a5

08005570 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
    return PacketType;
 8005574:	4b02      	ldr	r3, [pc, #8]	@ (8005580 <SUBGRF_GetPacketType+0x10>)
 8005576:	781b      	ldrb	r3, [r3, #0]
}
 8005578:	4618      	mov	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	200003a5 	.word	0x200003a5

08005584 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	71fb      	strb	r3, [r7, #7]
 800558e:	460b      	mov	r3, r1
 8005590:	71bb      	strb	r3, [r7, #6]
 8005592:	4613      	mov	r3, r2
 8005594:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d149      	bne.n	8005630 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800559c:	2000      	movs	r0, #0
 800559e:	f7ff fd7d 	bl	800509c <RBI_GetRFOMaxPowerConfig>
 80055a2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80055a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	da01      	bge.n	80055b2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b0e      	cmp	r3, #14
 80055b6:	d10e      	bne.n	80055d6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80055b8:	2301      	movs	r3, #1
 80055ba:	2201      	movs	r2, #1
 80055bc:	2100      	movs	r1, #0
 80055be:	2004      	movs	r0, #4
 80055c0:	f7ff fef6 	bl	80053b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80055c4:	79ba      	ldrb	r2, [r7, #6]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	330e      	adds	r3, #14
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	71bb      	strb	r3, [r7, #6]
 80055d4:	e01f      	b.n	8005616 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b0a      	cmp	r3, #10
 80055da:	d10e      	bne.n	80055fa <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80055dc:	2301      	movs	r3, #1
 80055de:	2201      	movs	r2, #1
 80055e0:	2100      	movs	r1, #0
 80055e2:	2001      	movs	r0, #1
 80055e4:	f7ff fee4 	bl	80053b0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80055e8:	79ba      	ldrb	r2, [r7, #6]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	330d      	adds	r3, #13
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	71bb      	strb	r3, [r7, #6]
 80055f8:	e00d      	b.n	8005616 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80055fa:	2301      	movs	r3, #1
 80055fc:	2201      	movs	r2, #1
 80055fe:	2100      	movs	r1, #0
 8005600:	2007      	movs	r0, #7
 8005602:	f7ff fed5 	bl	80053b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8005606:	79ba      	ldrb	r2, [r7, #6]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	b2db      	uxtb	r3, r3
 8005610:	330e      	adds	r3, #14
 8005612:	b2db      	uxtb	r3, r3
 8005614:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8005616:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800561a:	f113 0f11 	cmn.w	r3, #17
 800561e:	da01      	bge.n	8005624 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8005620:	23ef      	movs	r3, #239	@ 0xef
 8005622:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8005624:	2118      	movs	r1, #24
 8005626:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800562a:	f000 fa61 	bl	8005af0 <SUBGRF_WriteRegister>
 800562e:	e067      	b.n	8005700 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8005630:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8005634:	f000 fa70 	bl	8005b18 <SUBGRF_ReadRegister>
 8005638:	4603      	mov	r3, r0
 800563a:	f043 031e 	orr.w	r3, r3, #30
 800563e:	b2db      	uxtb	r3, r3
 8005640:	4619      	mov	r1, r3
 8005642:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8005646:	f000 fa53 	bl	8005af0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800564a:	2001      	movs	r0, #1
 800564c:	f7ff fd26 	bl	800509c <RBI_GetRFOMaxPowerConfig>
 8005650:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8005652:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	429a      	cmp	r2, r3
 800565a:	da01      	bge.n	8005660 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b14      	cmp	r3, #20
 8005664:	d10e      	bne.n	8005684 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8005666:	2301      	movs	r3, #1
 8005668:	2200      	movs	r2, #0
 800566a:	2105      	movs	r1, #5
 800566c:	2003      	movs	r0, #3
 800566e:	f7ff fe9f 	bl	80053b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8005672:	79ba      	ldrb	r2, [r7, #6]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	3316      	adds	r3, #22
 800567e:	b2db      	uxtb	r3, r3
 8005680:	71bb      	strb	r3, [r7, #6]
 8005682:	e031      	b.n	80056e8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b11      	cmp	r3, #17
 8005688:	d10e      	bne.n	80056a8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800568a:	2301      	movs	r3, #1
 800568c:	2200      	movs	r2, #0
 800568e:	2103      	movs	r1, #3
 8005690:	2002      	movs	r0, #2
 8005692:	f7ff fe8d 	bl	80053b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8005696:	79ba      	ldrb	r2, [r7, #6]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	3316      	adds	r3, #22
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	71bb      	strb	r3, [r7, #6]
 80056a6:	e01f      	b.n	80056e8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b0e      	cmp	r3, #14
 80056ac:	d10e      	bne.n	80056cc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80056ae:	2301      	movs	r3, #1
 80056b0:	2200      	movs	r2, #0
 80056b2:	2102      	movs	r1, #2
 80056b4:	2002      	movs	r0, #2
 80056b6:	f7ff fe7b 	bl	80053b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80056ba:	79ba      	ldrb	r2, [r7, #6]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	330e      	adds	r3, #14
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	71bb      	strb	r3, [r7, #6]
 80056ca:	e00d      	b.n	80056e8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80056cc:	2301      	movs	r3, #1
 80056ce:	2200      	movs	r2, #0
 80056d0:	2107      	movs	r1, #7
 80056d2:	2004      	movs	r0, #4
 80056d4:	f7ff fe6c 	bl	80053b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80056d8:	79ba      	ldrb	r2, [r7, #6]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	3316      	adds	r3, #22
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80056e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80056ec:	f113 0f09 	cmn.w	r3, #9
 80056f0:	da01      	bge.n	80056f6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80056f2:	23f7      	movs	r3, #247	@ 0xf7
 80056f4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80056f6:	2138      	movs	r1, #56	@ 0x38
 80056f8:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80056fc:	f000 f9f8 	bl	8005af0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8005700:	79bb      	ldrb	r3, [r7, #6]
 8005702:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8005704:	797b      	ldrb	r3, [r7, #5]
 8005706:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8005708:	f107 0308 	add.w	r3, r7, #8
 800570c:	2202      	movs	r2, #2
 800570e:	4619      	mov	r1, r3
 8005710:	208e      	movs	r0, #142	@ 0x8e
 8005712:	f000 fa59 	bl	8005bc8 <SUBGRF_WriteCommand>
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8005720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005724:	b086      	sub	sp, #24
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800572e:	f107 0308 	add.w	r3, r7, #8
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	4b5c      	ldr	r3, [pc, #368]	@ (80058b0 <SUBGRF_SetModulationParams+0x190>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d004      	beq.n	800574e <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fef5 	bl	8005538 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b03      	cmp	r3, #3
 8005754:	f200 80a5 	bhi.w	80058a2 <SUBGRF_SetModulationParams+0x182>
 8005758:	a201      	add	r2, pc, #4	@ (adr r2, 8005760 <SUBGRF_SetModulationParams+0x40>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	08005771 	.word	0x08005771
 8005764:	08005831 	.word	0x08005831
 8005768:	080057f3 	.word	0x080057f3
 800576c:	0800585f 	.word	0x0800585f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8005770:	2308      	movs	r3, #8
 8005772:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a4e      	ldr	r2, [pc, #312]	@ (80058b4 <SUBGRF_SetModulationParams+0x194>)
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	0c1b      	lsrs	r3, r3, #16
 8005784:	b2db      	uxtb	r3, r3
 8005786:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	b2db      	uxtb	r3, r3
 800578e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7b1b      	ldrb	r3, [r3, #12]
 800579a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	7b5b      	ldrb	r3, [r3, #13]
 80057a0:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2200      	movs	r2, #0
 80057a8:	461c      	mov	r4, r3
 80057aa:	4615      	mov	r5, r2
 80057ac:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80057b0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80057b4:	4a40      	ldr	r2, [pc, #256]	@ (80058b8 <SUBGRF_SetModulationParams+0x198>)
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	4640      	mov	r0, r8
 80057bc:	4649      	mov	r1, r9
 80057be:	f7fb fc29 	bl	8001014 <__aeabi_uldivmod>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4613      	mov	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80057e0:	7cfb      	ldrb	r3, [r7, #19]
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	f107 0308 	add.w	r3, r7, #8
 80057e8:	4619      	mov	r1, r3
 80057ea:	208b      	movs	r0, #139	@ 0x8b
 80057ec:	f000 f9ec 	bl	8005bc8 <SUBGRF_WriteCommand>
        break;
 80057f0:	e058      	b.n	80058a4 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 80057f2:	2304      	movs	r3, #4
 80057f4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	4a2e      	ldr	r2, [pc, #184]	@ (80058b4 <SUBGRF_SetModulationParams+0x194>)
 80057fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005800:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	0c1b      	lsrs	r3, r3, #16
 8005806:	b2db      	uxtb	r3, r3
 8005808:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	0a1b      	lsrs	r3, r3, #8
 800580e:	b2db      	uxtb	r3, r3
 8005810:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	7d1b      	ldrb	r3, [r3, #20]
 800581c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800581e:	7cfb      	ldrb	r3, [r7, #19]
 8005820:	b29a      	uxth	r2, r3
 8005822:	f107 0308 	add.w	r3, r7, #8
 8005826:	4619      	mov	r1, r3
 8005828:	208b      	movs	r0, #139	@ 0x8b
 800582a:	f000 f9cd 	bl	8005bc8 <SUBGRF_WriteCommand>
        break;
 800582e:	e039      	b.n	80058a4 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8005830:	2304      	movs	r3, #4
 8005832:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	7e1b      	ldrb	r3, [r3, #24]
 8005838:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7e5b      	ldrb	r3, [r3, #25]
 800583e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7e9b      	ldrb	r3, [r3, #26]
 8005844:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	7edb      	ldrb	r3, [r3, #27]
 800584a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800584c:	7cfb      	ldrb	r3, [r7, #19]
 800584e:	b29a      	uxth	r2, r3
 8005850:	f107 0308 	add.w	r3, r7, #8
 8005854:	4619      	mov	r1, r3
 8005856:	208b      	movs	r0, #139	@ 0x8b
 8005858:	f000 f9b6 	bl	8005bc8 <SUBGRF_WriteCommand>

        break;
 800585c:	e022      	b.n	80058a4 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 800585e:	2305      	movs	r3, #5
 8005860:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4a13      	ldr	r2, [pc, #76]	@ (80058b4 <SUBGRF_SetModulationParams+0x194>)
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	0c1b      	lsrs	r3, r3, #16
 8005872:	b2db      	uxtb	r3, r3
 8005874:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	0a1b      	lsrs	r3, r3, #8
 800587a:	b2db      	uxtb	r3, r3
 800587c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7b1b      	ldrb	r3, [r3, #12]
 8005888:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	7b5b      	ldrb	r3, [r3, #13]
 800588e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8005890:	7cfb      	ldrb	r3, [r7, #19]
 8005892:	b29a      	uxth	r2, r3
 8005894:	f107 0308 	add.w	r3, r7, #8
 8005898:	4619      	mov	r1, r3
 800589a:	208b      	movs	r0, #139	@ 0x8b
 800589c:	f000 f994 	bl	8005bc8 <SUBGRF_WriteCommand>
        break;
 80058a0:	e000      	b.n	80058a4 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 80058a2:	bf00      	nop
    }
}
 80058a4:	bf00      	nop
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80058ae:	bf00      	nop
 80058b0:	200003a5 	.word	0x200003a5
 80058b4:	3d090000 	.word	0x3d090000
 80058b8:	01e84800 	.word	0x01e84800

080058bc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80058c8:	f107 030c 	add.w	r3, r7, #12
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	781a      	ldrb	r2, [r3, #0]
 80058d8:	4b44      	ldr	r3, [pc, #272]	@ (80059ec <SUBGRF_SetPacketParams+0x130>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d004      	beq.n	80058ea <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fe27 	bl	8005538 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d878      	bhi.n	80059e4 <SUBGRF_SetPacketParams+0x128>
 80058f2:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <SUBGRF_SetPacketParams+0x3c>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005909 	.word	0x08005909
 80058fc:	08005999 	.word	0x08005999
 8005900:	0800598d 	.word	0x0800598d
 8005904:	08005909 	.word	0x08005909
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	7a5b      	ldrb	r3, [r3, #9]
 800590c:	2bf1      	cmp	r3, #241	@ 0xf1
 800590e:	d10a      	bne.n	8005926 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8005910:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005914:	f7ff fc3a 	bl	800518c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8005918:	f248 0005 	movw	r0, #32773	@ 0x8005
 800591c:	f7ff fc56 	bl	80051cc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8005920:	2302      	movs	r3, #2
 8005922:	75bb      	strb	r3, [r7, #22]
 8005924:	e011      	b.n	800594a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	7a5b      	ldrb	r3, [r3, #9]
 800592a:	2bf2      	cmp	r3, #242	@ 0xf2
 800592c:	d10a      	bne.n	8005944 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800592e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8005932:	f7ff fc2b 	bl	800518c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8005936:	f241 0021 	movw	r0, #4129	@ 0x1021
 800593a:	f7ff fc47 	bl	80051cc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800593e:	2306      	movs	r3, #6
 8005940:	75bb      	strb	r3, [r7, #22]
 8005942:	e002      	b.n	800594a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7a5b      	ldrb	r3, [r3, #9]
 8005948:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800594a:	2309      	movs	r3, #9
 800594c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	885b      	ldrh	r3, [r3, #2]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	b29b      	uxth	r3, r3
 8005956:	b2db      	uxtb	r3, r3
 8005958:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	885b      	ldrh	r3, [r3, #2]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	791b      	ldrb	r3, [r3, #4]
 8005966:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	795b      	ldrb	r3, [r3, #5]
 800596c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	799b      	ldrb	r3, [r3, #6]
 8005972:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	79db      	ldrb	r3, [r3, #7]
 8005978:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	7a1b      	ldrb	r3, [r3, #8]
 800597e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8005980:	7dbb      	ldrb	r3, [r7, #22]
 8005982:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7a9b      	ldrb	r3, [r3, #10]
 8005988:	753b      	strb	r3, [r7, #20]
        break;
 800598a:	e022      	b.n	80059d2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800598c:	2301      	movs	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	7b1b      	ldrb	r3, [r3, #12]
 8005994:	733b      	strb	r3, [r7, #12]
        break;
 8005996:	e01c      	b.n	80059d2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8005998:	2306      	movs	r3, #6
 800599a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	89db      	ldrh	r3, [r3, #14]
 80059a0:	0a1b      	lsrs	r3, r3, #8
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	89db      	ldrh	r3, [r3, #14]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	7c1a      	ldrb	r2, [r3, #16]
 80059b4:	4b0e      	ldr	r3, [pc, #56]	@ (80059f0 <SUBGRF_SetPacketParams+0x134>)
 80059b6:	4611      	mov	r1, r2
 80059b8:	7019      	strb	r1, [r3, #0]
 80059ba:	4613      	mov	r3, r2
 80059bc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	7c5b      	ldrb	r3, [r3, #17]
 80059c2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7c9b      	ldrb	r3, [r3, #18]
 80059c8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7cdb      	ldrb	r3, [r3, #19]
 80059ce:	747b      	strb	r3, [r7, #17]
        break;
 80059d0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	f107 030c 	add.w	r3, r7, #12
 80059da:	4619      	mov	r1, r3
 80059dc:	208c      	movs	r0, #140	@ 0x8c
 80059de:	f000 f8f3 	bl	8005bc8 <SUBGRF_WriteCommand>
 80059e2:	e000      	b.n	80059e6 <SUBGRF_SetPacketParams+0x12a>
        return;
 80059e4:	bf00      	nop
}
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	200003a5 	.word	0x200003a5
 80059f0:	200003a6 	.word	0x200003a6

080059f4 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80059fe:	f107 030c 	add.w	r3, r7, #12
 8005a02:	2202      	movs	r2, #2
 8005a04:	4619      	mov	r1, r3
 8005a06:	2013      	movs	r0, #19
 8005a08:	f000 f900 	bl	8005c0c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8005a0c:	f7ff fdb0 	bl	8005570 <SUBGRF_GetPacketType>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d10d      	bne.n	8005a32 <SUBGRF_GetRxBufferStatus+0x3e>
 8005a16:	4b0c      	ldr	r3, [pc, #48]	@ (8005a48 <SUBGRF_GetRxBufferStatus+0x54>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d108      	bne.n	8005a32 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8005a20:	f240 7002 	movw	r0, #1794	@ 0x702
 8005a24:	f000 f878 	bl	8005b18 <SUBGRF_ReadRegister>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e002      	b.n	8005a38 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8005a32:	7b3a      	ldrb	r2, [r7, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8005a38:	7b7a      	ldrb	r2, [r7, #13]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	701a      	strb	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	200003a6 	.word	0x200003a6

08005a4c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8005a54:	f107 030c 	add.w	r3, r7, #12
 8005a58:	2203      	movs	r2, #3
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	2014      	movs	r0, #20
 8005a5e:	f000 f8d5 	bl	8005c0c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8005a62:	f7ff fd85 	bl	8005570 <SUBGRF_GetPacketType>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <SUBGRF_GetPacketStatus+0x30>
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d013      	beq.n	8005aa2 <SUBGRF_GetPacketStatus+0x56>
 8005a7a:	e02a      	b.n	8005ad2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8005a7c:	7b3a      	ldrb	r2, [r7, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8005a82:	7b7b      	ldrb	r3, [r7, #13]
 8005a84:	425b      	negs	r3, r3
 8005a86:	105b      	asrs	r3, r3, #1
 8005a88:	b25a      	sxtb	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	425b      	negs	r3, r3
 8005a92:	105b      	asrs	r3, r3, #1
 8005a94:	b25a      	sxtb	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	609a      	str	r2, [r3, #8]
            break;
 8005aa0:	e020      	b.n	8005ae4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8005aa2:	7b3b      	ldrb	r3, [r7, #12]
 8005aa4:	425b      	negs	r3, r3
 8005aa6:	105b      	asrs	r3, r3, #1
 8005aa8:	b25a      	sxtb	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8005aae:	7b7b      	ldrb	r3, [r7, #13]
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	109b      	asrs	r3, r3, #2
 8005ab6:	b25a      	sxtb	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
 8005abe:	425b      	negs	r3, r3
 8005ac0:	105b      	asrs	r3, r3, #1
 8005ac2:	b25a      	sxtb	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8005ac8:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <SUBGRF_GetPacketStatus+0xa0>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	611a      	str	r2, [r3, #16]
            break;
 8005ad0:	e008      	b.n	8005ae4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8005ad2:	2214      	movs	r2, #20
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f9af 	bl	8005e3a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	220f      	movs	r2, #15
 8005ae0:	701a      	strb	r2, [r3, #0]
            break;
 8005ae2:	bf00      	nop
    }
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	200003a8 	.word	0x200003a8

08005af0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	460a      	mov	r2, r1
 8005afa:	80fb      	strh	r3, [r7, #6]
 8005afc:	4613      	mov	r3, r2
 8005afe:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8005b00:	1d7a      	adds	r2, r7, #5
 8005b02:	88f9      	ldrh	r1, [r7, #6]
 8005b04:	2301      	movs	r3, #1
 8005b06:	4803      	ldr	r0, [pc, #12]	@ (8005b14 <SUBGRF_WriteRegister+0x24>)
 8005b08:	f7fe f908 	bl	8003d1c <HAL_SUBGHZ_WriteRegisters>
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	200002fc 	.word	0x200002fc

08005b18 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8005b22:	f107 020f 	add.w	r2, r7, #15
 8005b26:	88f9      	ldrh	r1, [r7, #6]
 8005b28:	2301      	movs	r3, #1
 8005b2a:	4804      	ldr	r0, [pc, #16]	@ (8005b3c <SUBGRF_ReadRegister+0x24>)
 8005b2c:	f7fe f955 	bl	8003dda <HAL_SUBGHZ_ReadRegisters>
    return data;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	200002fc 	.word	0x200002fc

08005b40 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	6039      	str	r1, [r7, #0]
 8005b4a:	80fb      	strh	r3, [r7, #6]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b50:	f3ef 8310 	mrs	r3, PRIMASK
 8005b54:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b56:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005b58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b5a:	b672      	cpsid	i
}
 8005b5c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8005b5e:	88bb      	ldrh	r3, [r7, #4]
 8005b60:	88f9      	ldrh	r1, [r7, #6]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	4806      	ldr	r0, [pc, #24]	@ (8005b80 <SUBGRF_WriteRegisters+0x40>)
 8005b66:	f7fe f8d9 	bl	8003d1c <HAL_SUBGHZ_WriteRegisters>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f383 8810 	msr	PRIMASK, r3
}
 8005b74:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005b76:	bf00      	nop
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	200002fc 	.word	0x200002fc

08005b84 <SUBGRF_ReadBuffer>:
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b94:	f3ef 8310 	mrs	r3, PRIMASK
 8005b98:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b9e:	b672      	cpsid	i
}
 8005ba0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8005ba2:	79bb      	ldrb	r3, [r7, #6]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	79f9      	ldrb	r1, [r7, #7]
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	4806      	ldr	r0, [pc, #24]	@ (8005bc4 <SUBGRF_ReadBuffer+0x40>)
 8005bac:	f7fe fa29 	bl	8004002 <HAL_SUBGHZ_ReadBuffer>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f383 8810 	msr	PRIMASK, r3
}
 8005bba:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005bbc:	bf00      	nop
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	200002fc 	.word	0x200002fc

08005bc8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	6039      	str	r1, [r7, #0]
 8005bd2:	71fb      	strb	r3, [r7, #7]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bde:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005be0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005be2:	b672      	cpsid	i
}
 8005be4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8005be6:	88bb      	ldrh	r3, [r7, #4]
 8005be8:	79f9      	ldrb	r1, [r7, #7]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	4806      	ldr	r0, [pc, #24]	@ (8005c08 <SUBGRF_WriteCommand+0x40>)
 8005bee:	f7fe f955 	bl	8003e9c <HAL_SUBGHZ_ExecSetCmd>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f383 8810 	msr	PRIMASK, r3
}
 8005bfc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005bfe:	bf00      	nop
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200002fc 	.word	0x200002fc

08005c0c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c20:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c22:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005c24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c26:	b672      	cpsid	i
}
 8005c28:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8005c2a:	88bb      	ldrh	r3, [r7, #4]
 8005c2c:	79f9      	ldrb	r1, [r7, #7]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	4806      	ldr	r0, [pc, #24]	@ (8005c4c <SUBGRF_ReadCommand+0x40>)
 8005c32:	f7fe f992 	bl	8003f5a <HAL_SUBGHZ_ExecGetCmd>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f383 8810 	msr	PRIMASK, r3
}
 8005c40:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005c42:	bf00      	nop
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200002fc 	.word	0x200002fc

08005c50 <SUBGRF_SetRfTxPower>:
    }
    RBI_ConfigRFSwitch(state);
}

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8005c5e:	f7ff fa08 	bl	8005072 <RBI_GetTxConfig>
 8005c62:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d016      	beq.n	8005c98 <SUBGRF_SetRfTxPower+0x48>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	dc16      	bgt.n	8005c9e <SUBGRF_SetRfTxPower+0x4e>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <SUBGRF_SetRfTxPower+0x2e>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d00a      	beq.n	8005c92 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8005c7c:	e00f      	b.n	8005c9e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8005c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c82:	2b0f      	cmp	r3, #15
 8005c84:	dd02      	ble.n	8005c8c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8005c86:	2302      	movs	r3, #2
 8005c88:	73fb      	strb	r3, [r7, #15]
            break;
 8005c8a:	e009      	b.n	8005ca0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
            break;
 8005c90:	e006      	b.n	8005ca0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8005c92:	2301      	movs	r3, #1
 8005c94:	73fb      	strb	r3, [r7, #15]
            break;
 8005c96:	e003      	b.n	8005ca0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	73fb      	strb	r3, [r7, #15]
            break;
 8005c9c:	e000      	b.n	8005ca0 <SUBGRF_SetRfTxPower+0x50>
            break;
 8005c9e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8005ca0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fc6b 	bl	8005584 <SUBGRF_SetTxParams>

    return paSelect;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8005cc0:	4b03      	ldr	r3, [pc, #12]	@ (8005cd0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	4798      	blx	r3
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	200003b0 	.word	0x200003b0

08005cd4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8005cdc:	4b03      	ldr	r3, [pc, #12]	@ (8005cec <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2002      	movs	r0, #2
 8005ce2:	4798      	blx	r3
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	200003b0 	.word	0x200003b0

08005cf0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8005cf8:	4b03      	ldr	r3, [pc, #12]	@ (8005d08 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2040      	movs	r0, #64	@ 0x40
 8005cfe:	4798      	blx	r3
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	200003b0 	.word	0x200003b0

08005d0c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d005      	beq.n	8005d2e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8005d22:	e00a      	b.n	8005d3a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8005d24:	4b07      	ldr	r3, [pc, #28]	@ (8005d44 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2080      	movs	r0, #128	@ 0x80
 8005d2a:	4798      	blx	r3
            break;
 8005d2c:	e005      	b.n	8005d3a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8005d2e:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005d36:	4798      	blx	r3
            break;
 8005d38:	bf00      	nop
    }
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	200003b0 	.word	0x200003b0

08005d48 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8005d50:	4b04      	ldr	r3, [pc, #16]	@ (8005d64 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005d58:	4798      	blx	r3
}
 8005d5a:	bf00      	nop
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	200003b0 	.word	0x200003b0

08005d68 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8005d70:	4b03      	ldr	r3, [pc, #12]	@ (8005d80 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2020      	movs	r0, #32
 8005d76:	4798      	blx	r3
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	200003b0 	.word	0x200003b0

08005d84 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8005d8c:	4b03      	ldr	r3, [pc, #12]	@ (8005d9c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2004      	movs	r0, #4
 8005d92:	4798      	blx	r3
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	200003b0 	.word	0x200003b0

08005da0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8005da8:	4b03      	ldr	r3, [pc, #12]	@ (8005db8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2008      	movs	r0, #8
 8005dae:	4798      	blx	r3
}
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	200003b0 	.word	0x200003b0

08005dbc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8005dc4:	4b03      	ldr	r3, [pc, #12]	@ (8005dd4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2010      	movs	r0, #16
 8005dca:	4798      	blx	r3
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	200003b0 	.word	0x200003b0

08005dd8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8005de0:	4b04      	ldr	r3, [pc, #16]	@ (8005df4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005de8:	4798      	blx	r3
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200003b0 	.word	0x200003b0

08005df8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8005e02:	f7ff f944 	bl	800508e <RBI_IsDCDC>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d112      	bne.n	8005e32 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8005e0c:	f640 1023 	movw	r0, #2339	@ 0x923
 8005e10:	f7ff fe82 	bl	8005b18 <SUBGRF_ReadRegister>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	f023 0306 	bic.w	r3, r3, #6
 8005e1e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8005e20:	7bfa      	ldrb	r2, [r7, #15]
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f640 1023 	movw	r0, #2339	@ 0x923
 8005e2e:	f7ff fe5f 	bl	8005af0 <SUBGRF_WriteRegister>
  }
}
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70fb      	strb	r3, [r7, #3]
 8005e46:	4613      	mov	r3, r2
 8005e48:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8005e4e:	e004      	b.n	8005e5a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	60fa      	str	r2, [r7, #12]
 8005e56:	78fa      	ldrb	r2, [r7, #3]
 8005e58:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8005e5a:	883b      	ldrh	r3, [r7, #0]
 8005e5c:	1e5a      	subs	r2, r3, #1
 8005e5e:	803a      	strh	r2, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1f5      	bne.n	8005e50 <UTIL_MEM_set_8+0x16>
  }
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <__cvt>:
 8005e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e74:	b088      	sub	sp, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	461d      	mov	r5, r3
 8005e7a:	4614      	mov	r4, r2
 8005e7c:	bfbc      	itt	lt
 8005e7e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005e82:	4614      	movlt	r4, r2
 8005e84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e86:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005e88:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005e8c:	bfb6      	itet	lt
 8005e8e:	461d      	movlt	r5, r3
 8005e90:	2300      	movge	r3, #0
 8005e92:	232d      	movlt	r3, #45	@ 0x2d
 8005e94:	7013      	strb	r3, [r2, #0]
 8005e96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e98:	f023 0820 	bic.w	r8, r3, #32
 8005e9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ea0:	d005      	beq.n	8005eae <__cvt+0x3e>
 8005ea2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ea6:	d100      	bne.n	8005eaa <__cvt+0x3a>
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e000      	b.n	8005eb0 <__cvt+0x40>
 8005eae:	2303      	movs	r3, #3
 8005eb0:	aa07      	add	r2, sp, #28
 8005eb2:	9204      	str	r2, [sp, #16]
 8005eb4:	aa06      	add	r2, sp, #24
 8005eb6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005eba:	e9cd 3600 	strd	r3, r6, [sp]
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	f000 ff3d 	bl	8006d40 <_dtoa_r>
 8005ec6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005eca:	4607      	mov	r7, r0
 8005ecc:	d119      	bne.n	8005f02 <__cvt+0x92>
 8005ece:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ed0:	07db      	lsls	r3, r3, #31
 8005ed2:	d50e      	bpl.n	8005ef2 <__cvt+0x82>
 8005ed4:	eb00 0906 	add.w	r9, r0, r6
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2300      	movs	r3, #0
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fa fdca 	bl	8000a78 <__aeabi_dcmpeq>
 8005ee4:	b108      	cbz	r0, 8005eea <__cvt+0x7a>
 8005ee6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005eea:	2230      	movs	r2, #48	@ 0x30
 8005eec:	9b07      	ldr	r3, [sp, #28]
 8005eee:	454b      	cmp	r3, r9
 8005ef0:	d31e      	bcc.n	8005f30 <__cvt+0xc0>
 8005ef2:	9b07      	ldr	r3, [sp, #28]
 8005ef4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005ef6:	1bdb      	subs	r3, r3, r7
 8005ef8:	4638      	mov	r0, r7
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	b008      	add	sp, #32
 8005efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f02:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f06:	eb00 0906 	add.w	r9, r0, r6
 8005f0a:	d1e5      	bne.n	8005ed8 <__cvt+0x68>
 8005f0c:	7803      	ldrb	r3, [r0, #0]
 8005f0e:	2b30      	cmp	r3, #48	@ 0x30
 8005f10:	d10a      	bne.n	8005f28 <__cvt+0xb8>
 8005f12:	2200      	movs	r2, #0
 8005f14:	2300      	movs	r3, #0
 8005f16:	4620      	mov	r0, r4
 8005f18:	4629      	mov	r1, r5
 8005f1a:	f7fa fdad 	bl	8000a78 <__aeabi_dcmpeq>
 8005f1e:	b918      	cbnz	r0, 8005f28 <__cvt+0xb8>
 8005f20:	f1c6 0601 	rsb	r6, r6, #1
 8005f24:	f8ca 6000 	str.w	r6, [sl]
 8005f28:	f8da 3000 	ldr.w	r3, [sl]
 8005f2c:	4499      	add	r9, r3
 8005f2e:	e7d3      	b.n	8005ed8 <__cvt+0x68>
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	9107      	str	r1, [sp, #28]
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	e7d9      	b.n	8005eec <__cvt+0x7c>

08005f38 <__exponent>:
 8005f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f3a:	2900      	cmp	r1, #0
 8005f3c:	bfba      	itte	lt
 8005f3e:	4249      	neglt	r1, r1
 8005f40:	232d      	movlt	r3, #45	@ 0x2d
 8005f42:	232b      	movge	r3, #43	@ 0x2b
 8005f44:	2909      	cmp	r1, #9
 8005f46:	7002      	strb	r2, [r0, #0]
 8005f48:	7043      	strb	r3, [r0, #1]
 8005f4a:	dd29      	ble.n	8005fa0 <__exponent+0x68>
 8005f4c:	f10d 0307 	add.w	r3, sp, #7
 8005f50:	461d      	mov	r5, r3
 8005f52:	270a      	movs	r7, #10
 8005f54:	461a      	mov	r2, r3
 8005f56:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f5a:	fb07 1416 	mls	r4, r7, r6, r1
 8005f5e:	3430      	adds	r4, #48	@ 0x30
 8005f60:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f64:	460c      	mov	r4, r1
 8005f66:	2c63      	cmp	r4, #99	@ 0x63
 8005f68:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	dcf1      	bgt.n	8005f54 <__exponent+0x1c>
 8005f70:	3130      	adds	r1, #48	@ 0x30
 8005f72:	1e94      	subs	r4, r2, #2
 8005f74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f78:	1c41      	adds	r1, r0, #1
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	42ab      	cmp	r3, r5
 8005f7e:	d30a      	bcc.n	8005f96 <__exponent+0x5e>
 8005f80:	f10d 0309 	add.w	r3, sp, #9
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	42ac      	cmp	r4, r5
 8005f88:	bf88      	it	hi
 8005f8a:	2300      	movhi	r3, #0
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	4403      	add	r3, r0
 8005f90:	1a18      	subs	r0, r3, r0
 8005f92:	b003      	add	sp, #12
 8005f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f96:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f9a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f9e:	e7ed      	b.n	8005f7c <__exponent+0x44>
 8005fa0:	2330      	movs	r3, #48	@ 0x30
 8005fa2:	3130      	adds	r1, #48	@ 0x30
 8005fa4:	7083      	strb	r3, [r0, #2]
 8005fa6:	70c1      	strb	r1, [r0, #3]
 8005fa8:	1d03      	adds	r3, r0, #4
 8005faa:	e7f1      	b.n	8005f90 <__exponent+0x58>

08005fac <_printf_float>:
 8005fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb0:	b091      	sub	sp, #68	@ 0x44
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005fb8:	4616      	mov	r6, r2
 8005fba:	461f      	mov	r7, r3
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	f000 fdbf 	bl	8006b40 <_localeconv_r>
 8005fc2:	6803      	ldr	r3, [r0, #0]
 8005fc4:	9308      	str	r3, [sp, #32]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fa f92a 	bl	8000220 <strlen>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	930e      	str	r3, [sp, #56]	@ 0x38
 8005fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd4:	9009      	str	r0, [sp, #36]	@ 0x24
 8005fd6:	3307      	adds	r3, #7
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	f103 0208 	add.w	r2, r3, #8
 8005fe0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005fe4:	f8d4 b000 	ldr.w	fp, [r4]
 8005fe8:	f8c8 2000 	str.w	r2, [r8]
 8005fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ff0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ff4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ff6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005ffa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ffe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006002:	4b9d      	ldr	r3, [pc, #628]	@ (8006278 <_printf_float+0x2cc>)
 8006004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006008:	f7fa fd68 	bl	8000adc <__aeabi_dcmpun>
 800600c:	bb70      	cbnz	r0, 800606c <_printf_float+0xc0>
 800600e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006012:	4b99      	ldr	r3, [pc, #612]	@ (8006278 <_printf_float+0x2cc>)
 8006014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006018:	f7fa fd42 	bl	8000aa0 <__aeabi_dcmple>
 800601c:	bb30      	cbnz	r0, 800606c <_printf_float+0xc0>
 800601e:	2200      	movs	r2, #0
 8006020:	2300      	movs	r3, #0
 8006022:	4640      	mov	r0, r8
 8006024:	4649      	mov	r1, r9
 8006026:	f7fa fd31 	bl	8000a8c <__aeabi_dcmplt>
 800602a:	b110      	cbz	r0, 8006032 <_printf_float+0x86>
 800602c:	232d      	movs	r3, #45	@ 0x2d
 800602e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006032:	4a92      	ldr	r2, [pc, #584]	@ (800627c <_printf_float+0x2d0>)
 8006034:	4b92      	ldr	r3, [pc, #584]	@ (8006280 <_printf_float+0x2d4>)
 8006036:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800603a:	bf8c      	ite	hi
 800603c:	4690      	movhi	r8, r2
 800603e:	4698      	movls	r8, r3
 8006040:	2303      	movs	r3, #3
 8006042:	6123      	str	r3, [r4, #16]
 8006044:	f02b 0304 	bic.w	r3, fp, #4
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	f04f 0900 	mov.w	r9, #0
 800604e:	9700      	str	r7, [sp, #0]
 8006050:	4633      	mov	r3, r6
 8006052:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006054:	4621      	mov	r1, r4
 8006056:	4628      	mov	r0, r5
 8006058:	f000 f9d4 	bl	8006404 <_printf_common>
 800605c:	3001      	adds	r0, #1
 800605e:	f040 808f 	bne.w	8006180 <_printf_float+0x1d4>
 8006062:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006066:	b011      	add	sp, #68	@ 0x44
 8006068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606c:	4642      	mov	r2, r8
 800606e:	464b      	mov	r3, r9
 8006070:	4640      	mov	r0, r8
 8006072:	4649      	mov	r1, r9
 8006074:	f7fa fd32 	bl	8000adc <__aeabi_dcmpun>
 8006078:	b140      	cbz	r0, 800608c <_printf_float+0xe0>
 800607a:	464b      	mov	r3, r9
 800607c:	2b00      	cmp	r3, #0
 800607e:	bfbc      	itt	lt
 8006080:	232d      	movlt	r3, #45	@ 0x2d
 8006082:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006086:	4a7f      	ldr	r2, [pc, #508]	@ (8006284 <_printf_float+0x2d8>)
 8006088:	4b7f      	ldr	r3, [pc, #508]	@ (8006288 <_printf_float+0x2dc>)
 800608a:	e7d4      	b.n	8006036 <_printf_float+0x8a>
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006094:	d13f      	bne.n	8006116 <_printf_float+0x16a>
 8006096:	2306      	movs	r3, #6
 8006098:	6063      	str	r3, [r4, #4]
 800609a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800609e:	2200      	movs	r2, #0
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	9206      	str	r2, [sp, #24]
 80060a4:	aa0e      	add	r2, sp, #56	@ 0x38
 80060a6:	e9cd a204 	strd	sl, r2, [sp, #16]
 80060aa:	aa0d      	add	r2, sp, #52	@ 0x34
 80060ac:	9203      	str	r2, [sp, #12]
 80060ae:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80060b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	4642      	mov	r2, r8
 80060bc:	464b      	mov	r3, r9
 80060be:	4628      	mov	r0, r5
 80060c0:	910a      	str	r1, [sp, #40]	@ 0x28
 80060c2:	f7ff fed5 	bl	8005e70 <__cvt>
 80060c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060c8:	2947      	cmp	r1, #71	@ 0x47
 80060ca:	4680      	mov	r8, r0
 80060cc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80060ce:	d128      	bne.n	8006122 <_printf_float+0x176>
 80060d0:	1cc8      	adds	r0, r1, #3
 80060d2:	db02      	blt.n	80060da <_printf_float+0x12e>
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	4299      	cmp	r1, r3
 80060d8:	dd40      	ble.n	800615c <_printf_float+0x1b0>
 80060da:	f1aa 0a02 	sub.w	sl, sl, #2
 80060de:	fa5f fa8a 	uxtb.w	sl, sl
 80060e2:	3901      	subs	r1, #1
 80060e4:	4652      	mov	r2, sl
 80060e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80060ea:	910d      	str	r1, [sp, #52]	@ 0x34
 80060ec:	f7ff ff24 	bl	8005f38 <__exponent>
 80060f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060f2:	1813      	adds	r3, r2, r0
 80060f4:	2a01      	cmp	r2, #1
 80060f6:	4681      	mov	r9, r0
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	dc02      	bgt.n	8006102 <_printf_float+0x156>
 80060fc:	6822      	ldr	r2, [r4, #0]
 80060fe:	07d2      	lsls	r2, r2, #31
 8006100:	d501      	bpl.n	8006106 <_printf_float+0x15a>
 8006102:	3301      	adds	r3, #1
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800610a:	2b00      	cmp	r3, #0
 800610c:	d09f      	beq.n	800604e <_printf_float+0xa2>
 800610e:	232d      	movs	r3, #45	@ 0x2d
 8006110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006114:	e79b      	b.n	800604e <_printf_float+0xa2>
 8006116:	2947      	cmp	r1, #71	@ 0x47
 8006118:	d1bf      	bne.n	800609a <_printf_float+0xee>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1bd      	bne.n	800609a <_printf_float+0xee>
 800611e:	2301      	movs	r3, #1
 8006120:	e7ba      	b.n	8006098 <_printf_float+0xec>
 8006122:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006126:	d9dc      	bls.n	80060e2 <_printf_float+0x136>
 8006128:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800612c:	d118      	bne.n	8006160 <_printf_float+0x1b4>
 800612e:	2900      	cmp	r1, #0
 8006130:	6863      	ldr	r3, [r4, #4]
 8006132:	dd0b      	ble.n	800614c <_printf_float+0x1a0>
 8006134:	6121      	str	r1, [r4, #16]
 8006136:	b913      	cbnz	r3, 800613e <_printf_float+0x192>
 8006138:	6822      	ldr	r2, [r4, #0]
 800613a:	07d0      	lsls	r0, r2, #31
 800613c:	d502      	bpl.n	8006144 <_printf_float+0x198>
 800613e:	3301      	adds	r3, #1
 8006140:	440b      	add	r3, r1
 8006142:	6123      	str	r3, [r4, #16]
 8006144:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006146:	f04f 0900 	mov.w	r9, #0
 800614a:	e7dc      	b.n	8006106 <_printf_float+0x15a>
 800614c:	b913      	cbnz	r3, 8006154 <_printf_float+0x1a8>
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	07d2      	lsls	r2, r2, #31
 8006152:	d501      	bpl.n	8006158 <_printf_float+0x1ac>
 8006154:	3302      	adds	r3, #2
 8006156:	e7f4      	b.n	8006142 <_printf_float+0x196>
 8006158:	2301      	movs	r3, #1
 800615a:	e7f2      	b.n	8006142 <_printf_float+0x196>
 800615c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006160:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006162:	4299      	cmp	r1, r3
 8006164:	db05      	blt.n	8006172 <_printf_float+0x1c6>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	6121      	str	r1, [r4, #16]
 800616a:	07d8      	lsls	r0, r3, #31
 800616c:	d5ea      	bpl.n	8006144 <_printf_float+0x198>
 800616e:	1c4b      	adds	r3, r1, #1
 8006170:	e7e7      	b.n	8006142 <_printf_float+0x196>
 8006172:	2900      	cmp	r1, #0
 8006174:	bfd4      	ite	le
 8006176:	f1c1 0202 	rsble	r2, r1, #2
 800617a:	2201      	movgt	r2, #1
 800617c:	4413      	add	r3, r2
 800617e:	e7e0      	b.n	8006142 <_printf_float+0x196>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	055a      	lsls	r2, r3, #21
 8006184:	d407      	bmi.n	8006196 <_printf_float+0x1ea>
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	4642      	mov	r2, r8
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	d12b      	bne.n	80061ec <_printf_float+0x240>
 8006194:	e765      	b.n	8006062 <_printf_float+0xb6>
 8006196:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800619a:	f240 80dd 	bls.w	8006358 <_printf_float+0x3ac>
 800619e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061a2:	2200      	movs	r2, #0
 80061a4:	2300      	movs	r3, #0
 80061a6:	f7fa fc67 	bl	8000a78 <__aeabi_dcmpeq>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d033      	beq.n	8006216 <_printf_float+0x26a>
 80061ae:	4a37      	ldr	r2, [pc, #220]	@ (800628c <_printf_float+0x2e0>)
 80061b0:	2301      	movs	r3, #1
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	f43f af52 	beq.w	8006062 <_printf_float+0xb6>
 80061be:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80061c2:	4543      	cmp	r3, r8
 80061c4:	db02      	blt.n	80061cc <_printf_float+0x220>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	07d8      	lsls	r0, r3, #31
 80061ca:	d50f      	bpl.n	80061ec <_printf_float+0x240>
 80061cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	3001      	adds	r0, #1
 80061d8:	f43f af43 	beq.w	8006062 <_printf_float+0xb6>
 80061dc:	f04f 0900 	mov.w	r9, #0
 80061e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80061e4:	f104 0a1a 	add.w	sl, r4, #26
 80061e8:	45c8      	cmp	r8, r9
 80061ea:	dc09      	bgt.n	8006200 <_printf_float+0x254>
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	079b      	lsls	r3, r3, #30
 80061f0:	f100 8103 	bmi.w	80063fa <_printf_float+0x44e>
 80061f4:	68e0      	ldr	r0, [r4, #12]
 80061f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061f8:	4298      	cmp	r0, r3
 80061fa:	bfb8      	it	lt
 80061fc:	4618      	movlt	r0, r3
 80061fe:	e732      	b.n	8006066 <_printf_float+0xba>
 8006200:	2301      	movs	r3, #1
 8006202:	4652      	mov	r2, sl
 8006204:	4631      	mov	r1, r6
 8006206:	4628      	mov	r0, r5
 8006208:	47b8      	blx	r7
 800620a:	3001      	adds	r0, #1
 800620c:	f43f af29 	beq.w	8006062 <_printf_float+0xb6>
 8006210:	f109 0901 	add.w	r9, r9, #1
 8006214:	e7e8      	b.n	80061e8 <_printf_float+0x23c>
 8006216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	dc39      	bgt.n	8006290 <_printf_float+0x2e4>
 800621c:	4a1b      	ldr	r2, [pc, #108]	@ (800628c <_printf_float+0x2e0>)
 800621e:	2301      	movs	r3, #1
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f af1b 	beq.w	8006062 <_printf_float+0xb6>
 800622c:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006230:	ea59 0303 	orrs.w	r3, r9, r3
 8006234:	d102      	bne.n	800623c <_printf_float+0x290>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	07d9      	lsls	r1, r3, #31
 800623a:	d5d7      	bpl.n	80061ec <_printf_float+0x240>
 800623c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006240:	4631      	mov	r1, r6
 8006242:	4628      	mov	r0, r5
 8006244:	47b8      	blx	r7
 8006246:	3001      	adds	r0, #1
 8006248:	f43f af0b 	beq.w	8006062 <_printf_float+0xb6>
 800624c:	f04f 0a00 	mov.w	sl, #0
 8006250:	f104 0b1a 	add.w	fp, r4, #26
 8006254:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006256:	425b      	negs	r3, r3
 8006258:	4553      	cmp	r3, sl
 800625a:	dc01      	bgt.n	8006260 <_printf_float+0x2b4>
 800625c:	464b      	mov	r3, r9
 800625e:	e793      	b.n	8006188 <_printf_float+0x1dc>
 8006260:	2301      	movs	r3, #1
 8006262:	465a      	mov	r2, fp
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f aef9 	beq.w	8006062 <_printf_float+0xb6>
 8006270:	f10a 0a01 	add.w	sl, sl, #1
 8006274:	e7ee      	b.n	8006254 <_printf_float+0x2a8>
 8006276:	bf00      	nop
 8006278:	7fefffff 	.word	0x7fefffff
 800627c:	08008ba0 	.word	0x08008ba0
 8006280:	08008b9c 	.word	0x08008b9c
 8006284:	08008ba8 	.word	0x08008ba8
 8006288:	08008ba4 	.word	0x08008ba4
 800628c:	08008bac 	.word	0x08008bac
 8006290:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006292:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006296:	4553      	cmp	r3, sl
 8006298:	bfa8      	it	ge
 800629a:	4653      	movge	r3, sl
 800629c:	2b00      	cmp	r3, #0
 800629e:	4699      	mov	r9, r3
 80062a0:	dc36      	bgt.n	8006310 <_printf_float+0x364>
 80062a2:	f04f 0b00 	mov.w	fp, #0
 80062a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062aa:	f104 021a 	add.w	r2, r4, #26
 80062ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80062b2:	eba3 0309 	sub.w	r3, r3, r9
 80062b6:	455b      	cmp	r3, fp
 80062b8:	dc31      	bgt.n	800631e <_printf_float+0x372>
 80062ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062bc:	459a      	cmp	sl, r3
 80062be:	dc3a      	bgt.n	8006336 <_printf_float+0x38a>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	07da      	lsls	r2, r3, #31
 80062c4:	d437      	bmi.n	8006336 <_printf_float+0x38a>
 80062c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062c8:	ebaa 0903 	sub.w	r9, sl, r3
 80062cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ce:	ebaa 0303 	sub.w	r3, sl, r3
 80062d2:	4599      	cmp	r9, r3
 80062d4:	bfa8      	it	ge
 80062d6:	4699      	movge	r9, r3
 80062d8:	f1b9 0f00 	cmp.w	r9, #0
 80062dc:	dc33      	bgt.n	8006346 <_printf_float+0x39a>
 80062de:	f04f 0800 	mov.w	r8, #0
 80062e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062e6:	f104 0b1a 	add.w	fp, r4, #26
 80062ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062ec:	ebaa 0303 	sub.w	r3, sl, r3
 80062f0:	eba3 0309 	sub.w	r3, r3, r9
 80062f4:	4543      	cmp	r3, r8
 80062f6:	f77f af79 	ble.w	80061ec <_printf_float+0x240>
 80062fa:	2301      	movs	r3, #1
 80062fc:	465a      	mov	r2, fp
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	f43f aeac 	beq.w	8006062 <_printf_float+0xb6>
 800630a:	f108 0801 	add.w	r8, r8, #1
 800630e:	e7ec      	b.n	80062ea <_printf_float+0x33e>
 8006310:	4642      	mov	r2, r8
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	d1c2      	bne.n	80062a2 <_printf_float+0x2f6>
 800631c:	e6a1      	b.n	8006062 <_printf_float+0xb6>
 800631e:	2301      	movs	r3, #1
 8006320:	4631      	mov	r1, r6
 8006322:	4628      	mov	r0, r5
 8006324:	920a      	str	r2, [sp, #40]	@ 0x28
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	f43f ae9a 	beq.w	8006062 <_printf_float+0xb6>
 800632e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006330:	f10b 0b01 	add.w	fp, fp, #1
 8006334:	e7bb      	b.n	80062ae <_printf_float+0x302>
 8006336:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	d1c0      	bne.n	80062c6 <_printf_float+0x31a>
 8006344:	e68d      	b.n	8006062 <_printf_float+0xb6>
 8006346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006348:	464b      	mov	r3, r9
 800634a:	4442      	add	r2, r8
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	d1c3      	bne.n	80062de <_printf_float+0x332>
 8006356:	e684      	b.n	8006062 <_printf_float+0xb6>
 8006358:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800635c:	f1ba 0f01 	cmp.w	sl, #1
 8006360:	dc01      	bgt.n	8006366 <_printf_float+0x3ba>
 8006362:	07db      	lsls	r3, r3, #31
 8006364:	d536      	bpl.n	80063d4 <_printf_float+0x428>
 8006366:	2301      	movs	r3, #1
 8006368:	4642      	mov	r2, r8
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	f43f ae76 	beq.w	8006062 <_printf_float+0xb6>
 8006376:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	f43f ae6e 	beq.w	8006062 <_printf_float+0xb6>
 8006386:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800638a:	2200      	movs	r2, #0
 800638c:	2300      	movs	r3, #0
 800638e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006392:	f7fa fb71 	bl	8000a78 <__aeabi_dcmpeq>
 8006396:	b9c0      	cbnz	r0, 80063ca <_printf_float+0x41e>
 8006398:	4653      	mov	r3, sl
 800639a:	f108 0201 	add.w	r2, r8, #1
 800639e:	4631      	mov	r1, r6
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b8      	blx	r7
 80063a4:	3001      	adds	r0, #1
 80063a6:	d10c      	bne.n	80063c2 <_printf_float+0x416>
 80063a8:	e65b      	b.n	8006062 <_printf_float+0xb6>
 80063aa:	2301      	movs	r3, #1
 80063ac:	465a      	mov	r2, fp
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	f43f ae54 	beq.w	8006062 <_printf_float+0xb6>
 80063ba:	f108 0801 	add.w	r8, r8, #1
 80063be:	45d0      	cmp	r8, sl
 80063c0:	dbf3      	blt.n	80063aa <_printf_float+0x3fe>
 80063c2:	464b      	mov	r3, r9
 80063c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80063c8:	e6df      	b.n	800618a <_printf_float+0x1de>
 80063ca:	f04f 0800 	mov.w	r8, #0
 80063ce:	f104 0b1a 	add.w	fp, r4, #26
 80063d2:	e7f4      	b.n	80063be <_printf_float+0x412>
 80063d4:	2301      	movs	r3, #1
 80063d6:	4642      	mov	r2, r8
 80063d8:	e7e1      	b.n	800639e <_printf_float+0x3f2>
 80063da:	2301      	movs	r3, #1
 80063dc:	464a      	mov	r2, r9
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	f43f ae3c 	beq.w	8006062 <_printf_float+0xb6>
 80063ea:	f108 0801 	add.w	r8, r8, #1
 80063ee:	68e3      	ldr	r3, [r4, #12]
 80063f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80063f2:	1a5b      	subs	r3, r3, r1
 80063f4:	4543      	cmp	r3, r8
 80063f6:	dcf0      	bgt.n	80063da <_printf_float+0x42e>
 80063f8:	e6fc      	b.n	80061f4 <_printf_float+0x248>
 80063fa:	f04f 0800 	mov.w	r8, #0
 80063fe:	f104 0919 	add.w	r9, r4, #25
 8006402:	e7f4      	b.n	80063ee <_printf_float+0x442>

08006404 <_printf_common>:
 8006404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	4616      	mov	r6, r2
 800640a:	4698      	mov	r8, r3
 800640c:	688a      	ldr	r2, [r1, #8]
 800640e:	690b      	ldr	r3, [r1, #16]
 8006410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006414:	4293      	cmp	r3, r2
 8006416:	bfb8      	it	lt
 8006418:	4613      	movlt	r3, r2
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006420:	4607      	mov	r7, r0
 8006422:	460c      	mov	r4, r1
 8006424:	b10a      	cbz	r2, 800642a <_printf_common+0x26>
 8006426:	3301      	adds	r3, #1
 8006428:	6033      	str	r3, [r6, #0]
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	0699      	lsls	r1, r3, #26
 800642e:	bf42      	ittt	mi
 8006430:	6833      	ldrmi	r3, [r6, #0]
 8006432:	3302      	addmi	r3, #2
 8006434:	6033      	strmi	r3, [r6, #0]
 8006436:	6825      	ldr	r5, [r4, #0]
 8006438:	f015 0506 	ands.w	r5, r5, #6
 800643c:	d106      	bne.n	800644c <_printf_common+0x48>
 800643e:	f104 0a19 	add.w	sl, r4, #25
 8006442:	68e3      	ldr	r3, [r4, #12]
 8006444:	6832      	ldr	r2, [r6, #0]
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	42ab      	cmp	r3, r5
 800644a:	dc26      	bgt.n	800649a <_printf_common+0x96>
 800644c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	3b00      	subs	r3, #0
 8006454:	bf18      	it	ne
 8006456:	2301      	movne	r3, #1
 8006458:	0692      	lsls	r2, r2, #26
 800645a:	d42b      	bmi.n	80064b4 <_printf_common+0xb0>
 800645c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006460:	4641      	mov	r1, r8
 8006462:	4638      	mov	r0, r7
 8006464:	47c8      	blx	r9
 8006466:	3001      	adds	r0, #1
 8006468:	d01e      	beq.n	80064a8 <_printf_common+0xa4>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	6922      	ldr	r2, [r4, #16]
 800646e:	f003 0306 	and.w	r3, r3, #6
 8006472:	2b04      	cmp	r3, #4
 8006474:	bf02      	ittt	eq
 8006476:	68e5      	ldreq	r5, [r4, #12]
 8006478:	6833      	ldreq	r3, [r6, #0]
 800647a:	1aed      	subeq	r5, r5, r3
 800647c:	68a3      	ldr	r3, [r4, #8]
 800647e:	bf0c      	ite	eq
 8006480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006484:	2500      	movne	r5, #0
 8006486:	4293      	cmp	r3, r2
 8006488:	bfc4      	itt	gt
 800648a:	1a9b      	subgt	r3, r3, r2
 800648c:	18ed      	addgt	r5, r5, r3
 800648e:	2600      	movs	r6, #0
 8006490:	341a      	adds	r4, #26
 8006492:	42b5      	cmp	r5, r6
 8006494:	d11a      	bne.n	80064cc <_printf_common+0xc8>
 8006496:	2000      	movs	r0, #0
 8006498:	e008      	b.n	80064ac <_printf_common+0xa8>
 800649a:	2301      	movs	r3, #1
 800649c:	4652      	mov	r2, sl
 800649e:	4641      	mov	r1, r8
 80064a0:	4638      	mov	r0, r7
 80064a2:	47c8      	blx	r9
 80064a4:	3001      	adds	r0, #1
 80064a6:	d103      	bne.n	80064b0 <_printf_common+0xac>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b0:	3501      	adds	r5, #1
 80064b2:	e7c6      	b.n	8006442 <_printf_common+0x3e>
 80064b4:	18e1      	adds	r1, r4, r3
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	2030      	movs	r0, #48	@ 0x30
 80064ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064be:	4422      	add	r2, r4
 80064c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064c8:	3302      	adds	r3, #2
 80064ca:	e7c7      	b.n	800645c <_printf_common+0x58>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4622      	mov	r2, r4
 80064d0:	4641      	mov	r1, r8
 80064d2:	4638      	mov	r0, r7
 80064d4:	47c8      	blx	r9
 80064d6:	3001      	adds	r0, #1
 80064d8:	d0e6      	beq.n	80064a8 <_printf_common+0xa4>
 80064da:	3601      	adds	r6, #1
 80064dc:	e7d9      	b.n	8006492 <_printf_common+0x8e>
	...

080064e0 <_printf_i>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	7e0f      	ldrb	r7, [r1, #24]
 80064e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064e8:	2f78      	cmp	r7, #120	@ 0x78
 80064ea:	4691      	mov	r9, r2
 80064ec:	4680      	mov	r8, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	469a      	mov	sl, r3
 80064f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064f6:	d807      	bhi.n	8006508 <_printf_i+0x28>
 80064f8:	2f62      	cmp	r7, #98	@ 0x62
 80064fa:	d80a      	bhi.n	8006512 <_printf_i+0x32>
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	f000 80d1 	beq.w	80066a4 <_printf_i+0x1c4>
 8006502:	2f58      	cmp	r7, #88	@ 0x58
 8006504:	f000 80b8 	beq.w	8006678 <_printf_i+0x198>
 8006508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800650c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006510:	e03a      	b.n	8006588 <_printf_i+0xa8>
 8006512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006516:	2b15      	cmp	r3, #21
 8006518:	d8f6      	bhi.n	8006508 <_printf_i+0x28>
 800651a:	a101      	add	r1, pc, #4	@ (adr r1, 8006520 <_printf_i+0x40>)
 800651c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006520:	08006579 	.word	0x08006579
 8006524:	0800658d 	.word	0x0800658d
 8006528:	08006509 	.word	0x08006509
 800652c:	08006509 	.word	0x08006509
 8006530:	08006509 	.word	0x08006509
 8006534:	08006509 	.word	0x08006509
 8006538:	0800658d 	.word	0x0800658d
 800653c:	08006509 	.word	0x08006509
 8006540:	08006509 	.word	0x08006509
 8006544:	08006509 	.word	0x08006509
 8006548:	08006509 	.word	0x08006509
 800654c:	0800668b 	.word	0x0800668b
 8006550:	080065b7 	.word	0x080065b7
 8006554:	08006645 	.word	0x08006645
 8006558:	08006509 	.word	0x08006509
 800655c:	08006509 	.word	0x08006509
 8006560:	080066ad 	.word	0x080066ad
 8006564:	08006509 	.word	0x08006509
 8006568:	080065b7 	.word	0x080065b7
 800656c:	08006509 	.word	0x08006509
 8006570:	08006509 	.word	0x08006509
 8006574:	0800664d 	.word	0x0800664d
 8006578:	6833      	ldr	r3, [r6, #0]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6032      	str	r2, [r6, #0]
 8006580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006588:	2301      	movs	r3, #1
 800658a:	e09c      	b.n	80066c6 <_printf_i+0x1e6>
 800658c:	6833      	ldr	r3, [r6, #0]
 800658e:	6820      	ldr	r0, [r4, #0]
 8006590:	1d19      	adds	r1, r3, #4
 8006592:	6031      	str	r1, [r6, #0]
 8006594:	0606      	lsls	r6, r0, #24
 8006596:	d501      	bpl.n	800659c <_printf_i+0xbc>
 8006598:	681d      	ldr	r5, [r3, #0]
 800659a:	e003      	b.n	80065a4 <_printf_i+0xc4>
 800659c:	0645      	lsls	r5, r0, #25
 800659e:	d5fb      	bpl.n	8006598 <_printf_i+0xb8>
 80065a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065a4:	2d00      	cmp	r5, #0
 80065a6:	da03      	bge.n	80065b0 <_printf_i+0xd0>
 80065a8:	232d      	movs	r3, #45	@ 0x2d
 80065aa:	426d      	negs	r5, r5
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065b0:	4858      	ldr	r0, [pc, #352]	@ (8006714 <_printf_i+0x234>)
 80065b2:	230a      	movs	r3, #10
 80065b4:	e011      	b.n	80065da <_printf_i+0xfa>
 80065b6:	6821      	ldr	r1, [r4, #0]
 80065b8:	6833      	ldr	r3, [r6, #0]
 80065ba:	0608      	lsls	r0, r1, #24
 80065bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80065c0:	d402      	bmi.n	80065c8 <_printf_i+0xe8>
 80065c2:	0649      	lsls	r1, r1, #25
 80065c4:	bf48      	it	mi
 80065c6:	b2ad      	uxthmi	r5, r5
 80065c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80065ca:	4852      	ldr	r0, [pc, #328]	@ (8006714 <_printf_i+0x234>)
 80065cc:	6033      	str	r3, [r6, #0]
 80065ce:	bf14      	ite	ne
 80065d0:	230a      	movne	r3, #10
 80065d2:	2308      	moveq	r3, #8
 80065d4:	2100      	movs	r1, #0
 80065d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065da:	6866      	ldr	r6, [r4, #4]
 80065dc:	60a6      	str	r6, [r4, #8]
 80065de:	2e00      	cmp	r6, #0
 80065e0:	db05      	blt.n	80065ee <_printf_i+0x10e>
 80065e2:	6821      	ldr	r1, [r4, #0]
 80065e4:	432e      	orrs	r6, r5
 80065e6:	f021 0104 	bic.w	r1, r1, #4
 80065ea:	6021      	str	r1, [r4, #0]
 80065ec:	d04b      	beq.n	8006686 <_printf_i+0x1a6>
 80065ee:	4616      	mov	r6, r2
 80065f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80065f4:	fb03 5711 	mls	r7, r3, r1, r5
 80065f8:	5dc7      	ldrb	r7, [r0, r7]
 80065fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065fe:	462f      	mov	r7, r5
 8006600:	42bb      	cmp	r3, r7
 8006602:	460d      	mov	r5, r1
 8006604:	d9f4      	bls.n	80065f0 <_printf_i+0x110>
 8006606:	2b08      	cmp	r3, #8
 8006608:	d10b      	bne.n	8006622 <_printf_i+0x142>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	07df      	lsls	r7, r3, #31
 800660e:	d508      	bpl.n	8006622 <_printf_i+0x142>
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	6861      	ldr	r1, [r4, #4]
 8006614:	4299      	cmp	r1, r3
 8006616:	bfde      	ittt	le
 8006618:	2330      	movle	r3, #48	@ 0x30
 800661a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800661e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006622:	1b92      	subs	r2, r2, r6
 8006624:	6122      	str	r2, [r4, #16]
 8006626:	f8cd a000 	str.w	sl, [sp]
 800662a:	464b      	mov	r3, r9
 800662c:	aa03      	add	r2, sp, #12
 800662e:	4621      	mov	r1, r4
 8006630:	4640      	mov	r0, r8
 8006632:	f7ff fee7 	bl	8006404 <_printf_common>
 8006636:	3001      	adds	r0, #1
 8006638:	d14a      	bne.n	80066d0 <_printf_i+0x1f0>
 800663a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800663e:	b004      	add	sp, #16
 8006640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	f043 0320 	orr.w	r3, r3, #32
 800664a:	6023      	str	r3, [r4, #0]
 800664c:	4832      	ldr	r0, [pc, #200]	@ (8006718 <_printf_i+0x238>)
 800664e:	2778      	movs	r7, #120	@ 0x78
 8006650:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	6831      	ldr	r1, [r6, #0]
 8006658:	061f      	lsls	r7, r3, #24
 800665a:	f851 5b04 	ldr.w	r5, [r1], #4
 800665e:	d402      	bmi.n	8006666 <_printf_i+0x186>
 8006660:	065f      	lsls	r7, r3, #25
 8006662:	bf48      	it	mi
 8006664:	b2ad      	uxthmi	r5, r5
 8006666:	6031      	str	r1, [r6, #0]
 8006668:	07d9      	lsls	r1, r3, #31
 800666a:	bf44      	itt	mi
 800666c:	f043 0320 	orrmi.w	r3, r3, #32
 8006670:	6023      	strmi	r3, [r4, #0]
 8006672:	b11d      	cbz	r5, 800667c <_printf_i+0x19c>
 8006674:	2310      	movs	r3, #16
 8006676:	e7ad      	b.n	80065d4 <_printf_i+0xf4>
 8006678:	4826      	ldr	r0, [pc, #152]	@ (8006714 <_printf_i+0x234>)
 800667a:	e7e9      	b.n	8006650 <_printf_i+0x170>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	f023 0320 	bic.w	r3, r3, #32
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	e7f6      	b.n	8006674 <_printf_i+0x194>
 8006686:	4616      	mov	r6, r2
 8006688:	e7bd      	b.n	8006606 <_printf_i+0x126>
 800668a:	6833      	ldr	r3, [r6, #0]
 800668c:	6825      	ldr	r5, [r4, #0]
 800668e:	6961      	ldr	r1, [r4, #20]
 8006690:	1d18      	adds	r0, r3, #4
 8006692:	6030      	str	r0, [r6, #0]
 8006694:	062e      	lsls	r6, r5, #24
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	d501      	bpl.n	800669e <_printf_i+0x1be>
 800669a:	6019      	str	r1, [r3, #0]
 800669c:	e002      	b.n	80066a4 <_printf_i+0x1c4>
 800669e:	0668      	lsls	r0, r5, #25
 80066a0:	d5fb      	bpl.n	800669a <_printf_i+0x1ba>
 80066a2:	8019      	strh	r1, [r3, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	6123      	str	r3, [r4, #16]
 80066a8:	4616      	mov	r6, r2
 80066aa:	e7bc      	b.n	8006626 <_printf_i+0x146>
 80066ac:	6833      	ldr	r3, [r6, #0]
 80066ae:	1d1a      	adds	r2, r3, #4
 80066b0:	6032      	str	r2, [r6, #0]
 80066b2:	681e      	ldr	r6, [r3, #0]
 80066b4:	6862      	ldr	r2, [r4, #4]
 80066b6:	2100      	movs	r1, #0
 80066b8:	4630      	mov	r0, r6
 80066ba:	f7f9 fd61 	bl	8000180 <memchr>
 80066be:	b108      	cbz	r0, 80066c4 <_printf_i+0x1e4>
 80066c0:	1b80      	subs	r0, r0, r6
 80066c2:	6060      	str	r0, [r4, #4]
 80066c4:	6863      	ldr	r3, [r4, #4]
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	2300      	movs	r3, #0
 80066ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ce:	e7aa      	b.n	8006626 <_printf_i+0x146>
 80066d0:	6923      	ldr	r3, [r4, #16]
 80066d2:	4632      	mov	r2, r6
 80066d4:	4649      	mov	r1, r9
 80066d6:	4640      	mov	r0, r8
 80066d8:	47d0      	blx	sl
 80066da:	3001      	adds	r0, #1
 80066dc:	d0ad      	beq.n	800663a <_printf_i+0x15a>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	079b      	lsls	r3, r3, #30
 80066e2:	d413      	bmi.n	800670c <_printf_i+0x22c>
 80066e4:	68e0      	ldr	r0, [r4, #12]
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	4298      	cmp	r0, r3
 80066ea:	bfb8      	it	lt
 80066ec:	4618      	movlt	r0, r3
 80066ee:	e7a6      	b.n	800663e <_printf_i+0x15e>
 80066f0:	2301      	movs	r3, #1
 80066f2:	4632      	mov	r2, r6
 80066f4:	4649      	mov	r1, r9
 80066f6:	4640      	mov	r0, r8
 80066f8:	47d0      	blx	sl
 80066fa:	3001      	adds	r0, #1
 80066fc:	d09d      	beq.n	800663a <_printf_i+0x15a>
 80066fe:	3501      	adds	r5, #1
 8006700:	68e3      	ldr	r3, [r4, #12]
 8006702:	9903      	ldr	r1, [sp, #12]
 8006704:	1a5b      	subs	r3, r3, r1
 8006706:	42ab      	cmp	r3, r5
 8006708:	dcf2      	bgt.n	80066f0 <_printf_i+0x210>
 800670a:	e7eb      	b.n	80066e4 <_printf_i+0x204>
 800670c:	2500      	movs	r5, #0
 800670e:	f104 0619 	add.w	r6, r4, #25
 8006712:	e7f5      	b.n	8006700 <_printf_i+0x220>
 8006714:	08008bae 	.word	0x08008bae
 8006718:	08008bbf 	.word	0x08008bbf

0800671c <std>:
 800671c:	2300      	movs	r3, #0
 800671e:	b510      	push	{r4, lr}
 8006720:	4604      	mov	r4, r0
 8006722:	e9c0 3300 	strd	r3, r3, [r0]
 8006726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800672a:	6083      	str	r3, [r0, #8]
 800672c:	8181      	strh	r1, [r0, #12]
 800672e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006730:	81c2      	strh	r2, [r0, #14]
 8006732:	6183      	str	r3, [r0, #24]
 8006734:	4619      	mov	r1, r3
 8006736:	2208      	movs	r2, #8
 8006738:	305c      	adds	r0, #92	@ 0x5c
 800673a:	f000 f9f9 	bl	8006b30 <memset>
 800673e:	4b0d      	ldr	r3, [pc, #52]	@ (8006774 <std+0x58>)
 8006740:	6263      	str	r3, [r4, #36]	@ 0x24
 8006742:	4b0d      	ldr	r3, [pc, #52]	@ (8006778 <std+0x5c>)
 8006744:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006746:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <std+0x60>)
 8006748:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800674a:	4b0d      	ldr	r3, [pc, #52]	@ (8006780 <std+0x64>)
 800674c:	6323      	str	r3, [r4, #48]	@ 0x30
 800674e:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <std+0x68>)
 8006750:	6224      	str	r4, [r4, #32]
 8006752:	429c      	cmp	r4, r3
 8006754:	d006      	beq.n	8006764 <std+0x48>
 8006756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800675a:	4294      	cmp	r4, r2
 800675c:	d002      	beq.n	8006764 <std+0x48>
 800675e:	33d0      	adds	r3, #208	@ 0xd0
 8006760:	429c      	cmp	r4, r3
 8006762:	d105      	bne.n	8006770 <std+0x54>
 8006764:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800676c:	f000 ba5c 	b.w	8006c28 <__retarget_lock_init_recursive>
 8006770:	bd10      	pop	{r4, pc}
 8006772:	bf00      	nop
 8006774:	08006981 	.word	0x08006981
 8006778:	080069a3 	.word	0x080069a3
 800677c:	080069db 	.word	0x080069db
 8006780:	080069ff 	.word	0x080069ff
 8006784:	200003b4 	.word	0x200003b4

08006788 <stdio_exit_handler>:
 8006788:	4a02      	ldr	r2, [pc, #8]	@ (8006794 <stdio_exit_handler+0xc>)
 800678a:	4903      	ldr	r1, [pc, #12]	@ (8006798 <stdio_exit_handler+0x10>)
 800678c:	4803      	ldr	r0, [pc, #12]	@ (800679c <stdio_exit_handler+0x14>)
 800678e:	f000 b869 	b.w	8006864 <_fwalk_sglue>
 8006792:	bf00      	nop
 8006794:	20000018 	.word	0x20000018
 8006798:	08008551 	.word	0x08008551
 800679c:	20000028 	.word	0x20000028

080067a0 <cleanup_stdio>:
 80067a0:	6841      	ldr	r1, [r0, #4]
 80067a2:	4b0c      	ldr	r3, [pc, #48]	@ (80067d4 <cleanup_stdio+0x34>)
 80067a4:	4299      	cmp	r1, r3
 80067a6:	b510      	push	{r4, lr}
 80067a8:	4604      	mov	r4, r0
 80067aa:	d001      	beq.n	80067b0 <cleanup_stdio+0x10>
 80067ac:	f001 fed0 	bl	8008550 <_fflush_r>
 80067b0:	68a1      	ldr	r1, [r4, #8]
 80067b2:	4b09      	ldr	r3, [pc, #36]	@ (80067d8 <cleanup_stdio+0x38>)
 80067b4:	4299      	cmp	r1, r3
 80067b6:	d002      	beq.n	80067be <cleanup_stdio+0x1e>
 80067b8:	4620      	mov	r0, r4
 80067ba:	f001 fec9 	bl	8008550 <_fflush_r>
 80067be:	68e1      	ldr	r1, [r4, #12]
 80067c0:	4b06      	ldr	r3, [pc, #24]	@ (80067dc <cleanup_stdio+0x3c>)
 80067c2:	4299      	cmp	r1, r3
 80067c4:	d004      	beq.n	80067d0 <cleanup_stdio+0x30>
 80067c6:	4620      	mov	r0, r4
 80067c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067cc:	f001 bec0 	b.w	8008550 <_fflush_r>
 80067d0:	bd10      	pop	{r4, pc}
 80067d2:	bf00      	nop
 80067d4:	200003b4 	.word	0x200003b4
 80067d8:	2000041c 	.word	0x2000041c
 80067dc:	20000484 	.word	0x20000484

080067e0 <global_stdio_init.part.0>:
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006810 <global_stdio_init.part.0+0x30>)
 80067e4:	4c0b      	ldr	r4, [pc, #44]	@ (8006814 <global_stdio_init.part.0+0x34>)
 80067e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006818 <global_stdio_init.part.0+0x38>)
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	4620      	mov	r0, r4
 80067ec:	2200      	movs	r2, #0
 80067ee:	2104      	movs	r1, #4
 80067f0:	f7ff ff94 	bl	800671c <std>
 80067f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067f8:	2201      	movs	r2, #1
 80067fa:	2109      	movs	r1, #9
 80067fc:	f7ff ff8e 	bl	800671c <std>
 8006800:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006804:	2202      	movs	r2, #2
 8006806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800680a:	2112      	movs	r1, #18
 800680c:	f7ff bf86 	b.w	800671c <std>
 8006810:	200004ec 	.word	0x200004ec
 8006814:	200003b4 	.word	0x200003b4
 8006818:	08006789 	.word	0x08006789

0800681c <__sfp_lock_acquire>:
 800681c:	4801      	ldr	r0, [pc, #4]	@ (8006824 <__sfp_lock_acquire+0x8>)
 800681e:	f000 ba04 	b.w	8006c2a <__retarget_lock_acquire_recursive>
 8006822:	bf00      	nop
 8006824:	200004f5 	.word	0x200004f5

08006828 <__sfp_lock_release>:
 8006828:	4801      	ldr	r0, [pc, #4]	@ (8006830 <__sfp_lock_release+0x8>)
 800682a:	f000 b9ff 	b.w	8006c2c <__retarget_lock_release_recursive>
 800682e:	bf00      	nop
 8006830:	200004f5 	.word	0x200004f5

08006834 <__sinit>:
 8006834:	b510      	push	{r4, lr}
 8006836:	4604      	mov	r4, r0
 8006838:	f7ff fff0 	bl	800681c <__sfp_lock_acquire>
 800683c:	6a23      	ldr	r3, [r4, #32]
 800683e:	b11b      	cbz	r3, 8006848 <__sinit+0x14>
 8006840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006844:	f7ff bff0 	b.w	8006828 <__sfp_lock_release>
 8006848:	4b04      	ldr	r3, [pc, #16]	@ (800685c <__sinit+0x28>)
 800684a:	6223      	str	r3, [r4, #32]
 800684c:	4b04      	ldr	r3, [pc, #16]	@ (8006860 <__sinit+0x2c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1f5      	bne.n	8006840 <__sinit+0xc>
 8006854:	f7ff ffc4 	bl	80067e0 <global_stdio_init.part.0>
 8006858:	e7f2      	b.n	8006840 <__sinit+0xc>
 800685a:	bf00      	nop
 800685c:	080067a1 	.word	0x080067a1
 8006860:	200004ec 	.word	0x200004ec

08006864 <_fwalk_sglue>:
 8006864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006868:	4607      	mov	r7, r0
 800686a:	4688      	mov	r8, r1
 800686c:	4614      	mov	r4, r2
 800686e:	2600      	movs	r6, #0
 8006870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006874:	f1b9 0901 	subs.w	r9, r9, #1
 8006878:	d505      	bpl.n	8006886 <_fwalk_sglue+0x22>
 800687a:	6824      	ldr	r4, [r4, #0]
 800687c:	2c00      	cmp	r4, #0
 800687e:	d1f7      	bne.n	8006870 <_fwalk_sglue+0xc>
 8006880:	4630      	mov	r0, r6
 8006882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006886:	89ab      	ldrh	r3, [r5, #12]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d907      	bls.n	800689c <_fwalk_sglue+0x38>
 800688c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006890:	3301      	adds	r3, #1
 8006892:	d003      	beq.n	800689c <_fwalk_sglue+0x38>
 8006894:	4629      	mov	r1, r5
 8006896:	4638      	mov	r0, r7
 8006898:	47c0      	blx	r8
 800689a:	4306      	orrs	r6, r0
 800689c:	3568      	adds	r5, #104	@ 0x68
 800689e:	e7e9      	b.n	8006874 <_fwalk_sglue+0x10>

080068a0 <iprintf>:
 80068a0:	b40f      	push	{r0, r1, r2, r3}
 80068a2:	b507      	push	{r0, r1, r2, lr}
 80068a4:	4906      	ldr	r1, [pc, #24]	@ (80068c0 <iprintf+0x20>)
 80068a6:	ab04      	add	r3, sp, #16
 80068a8:	6808      	ldr	r0, [r1, #0]
 80068aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ae:	6881      	ldr	r1, [r0, #8]
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	f001 fcb5 	bl	8008220 <_vfiprintf_r>
 80068b6:	b003      	add	sp, #12
 80068b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80068bc:	b004      	add	sp, #16
 80068be:	4770      	bx	lr
 80068c0:	20000024 	.word	0x20000024

080068c4 <_puts_r>:
 80068c4:	6a03      	ldr	r3, [r0, #32]
 80068c6:	b570      	push	{r4, r5, r6, lr}
 80068c8:	6884      	ldr	r4, [r0, #8]
 80068ca:	4605      	mov	r5, r0
 80068cc:	460e      	mov	r6, r1
 80068ce:	b90b      	cbnz	r3, 80068d4 <_puts_r+0x10>
 80068d0:	f7ff ffb0 	bl	8006834 <__sinit>
 80068d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068d6:	07db      	lsls	r3, r3, #31
 80068d8:	d405      	bmi.n	80068e6 <_puts_r+0x22>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	0598      	lsls	r0, r3, #22
 80068de:	d402      	bmi.n	80068e6 <_puts_r+0x22>
 80068e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068e2:	f000 f9a2 	bl	8006c2a <__retarget_lock_acquire_recursive>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	0719      	lsls	r1, r3, #28
 80068ea:	d502      	bpl.n	80068f2 <_puts_r+0x2e>
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d135      	bne.n	800695e <_puts_r+0x9a>
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 f8c5 	bl	8006a84 <__swsetup_r>
 80068fa:	b380      	cbz	r0, 800695e <_puts_r+0x9a>
 80068fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006902:	07da      	lsls	r2, r3, #31
 8006904:	d405      	bmi.n	8006912 <_puts_r+0x4e>
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	059b      	lsls	r3, r3, #22
 800690a:	d402      	bmi.n	8006912 <_puts_r+0x4e>
 800690c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800690e:	f000 f98d 	bl	8006c2c <__retarget_lock_release_recursive>
 8006912:	4628      	mov	r0, r5
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	2b00      	cmp	r3, #0
 8006918:	da04      	bge.n	8006924 <_puts_r+0x60>
 800691a:	69a2      	ldr	r2, [r4, #24]
 800691c:	429a      	cmp	r2, r3
 800691e:	dc17      	bgt.n	8006950 <_puts_r+0x8c>
 8006920:	290a      	cmp	r1, #10
 8006922:	d015      	beq.n	8006950 <_puts_r+0x8c>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	7019      	strb	r1, [r3, #0]
 800692c:	68a3      	ldr	r3, [r4, #8]
 800692e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006932:	3b01      	subs	r3, #1
 8006934:	60a3      	str	r3, [r4, #8]
 8006936:	2900      	cmp	r1, #0
 8006938:	d1ed      	bne.n	8006916 <_puts_r+0x52>
 800693a:	2b00      	cmp	r3, #0
 800693c:	da11      	bge.n	8006962 <_puts_r+0x9e>
 800693e:	4622      	mov	r2, r4
 8006940:	210a      	movs	r1, #10
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f85f 	bl	8006a06 <__swbuf_r>
 8006948:	3001      	adds	r0, #1
 800694a:	d0d7      	beq.n	80068fc <_puts_r+0x38>
 800694c:	250a      	movs	r5, #10
 800694e:	e7d7      	b.n	8006900 <_puts_r+0x3c>
 8006950:	4622      	mov	r2, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f857 	bl	8006a06 <__swbuf_r>
 8006958:	3001      	adds	r0, #1
 800695a:	d1e7      	bne.n	800692c <_puts_r+0x68>
 800695c:	e7ce      	b.n	80068fc <_puts_r+0x38>
 800695e:	3e01      	subs	r6, #1
 8006960:	e7e4      	b.n	800692c <_puts_r+0x68>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	6022      	str	r2, [r4, #0]
 8006968:	220a      	movs	r2, #10
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e7ee      	b.n	800694c <_puts_r+0x88>
	...

08006970 <puts>:
 8006970:	4b02      	ldr	r3, [pc, #8]	@ (800697c <puts+0xc>)
 8006972:	4601      	mov	r1, r0
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	f7ff bfa5 	b.w	80068c4 <_puts_r>
 800697a:	bf00      	nop
 800697c:	20000024 	.word	0x20000024

08006980 <__sread>:
 8006980:	b510      	push	{r4, lr}
 8006982:	460c      	mov	r4, r1
 8006984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006988:	f000 f900 	bl	8006b8c <_read_r>
 800698c:	2800      	cmp	r0, #0
 800698e:	bfab      	itete	ge
 8006990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006992:	89a3      	ldrhlt	r3, [r4, #12]
 8006994:	181b      	addge	r3, r3, r0
 8006996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800699a:	bfac      	ite	ge
 800699c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800699e:	81a3      	strhlt	r3, [r4, #12]
 80069a0:	bd10      	pop	{r4, pc}

080069a2 <__swrite>:
 80069a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a6:	461f      	mov	r7, r3
 80069a8:	898b      	ldrh	r3, [r1, #12]
 80069aa:	05db      	lsls	r3, r3, #23
 80069ac:	4605      	mov	r5, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	4616      	mov	r6, r2
 80069b2:	d505      	bpl.n	80069c0 <__swrite+0x1e>
 80069b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b8:	2302      	movs	r3, #2
 80069ba:	2200      	movs	r2, #0
 80069bc:	f000 f8d4 	bl	8006b68 <_lseek_r>
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069ca:	81a3      	strh	r3, [r4, #12]
 80069cc:	4632      	mov	r2, r6
 80069ce:	463b      	mov	r3, r7
 80069d0:	4628      	mov	r0, r5
 80069d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069d6:	f000 b8eb 	b.w	8006bb0 <_write_r>

080069da <__sseek>:
 80069da:	b510      	push	{r4, lr}
 80069dc:	460c      	mov	r4, r1
 80069de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e2:	f000 f8c1 	bl	8006b68 <_lseek_r>
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	bf15      	itete	ne
 80069ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069f6:	81a3      	strheq	r3, [r4, #12]
 80069f8:	bf18      	it	ne
 80069fa:	81a3      	strhne	r3, [r4, #12]
 80069fc:	bd10      	pop	{r4, pc}

080069fe <__sclose>:
 80069fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a02:	f000 b8a1 	b.w	8006b48 <_close_r>

08006a06 <__swbuf_r>:
 8006a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a08:	460e      	mov	r6, r1
 8006a0a:	4614      	mov	r4, r2
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	b118      	cbz	r0, 8006a18 <__swbuf_r+0x12>
 8006a10:	6a03      	ldr	r3, [r0, #32]
 8006a12:	b90b      	cbnz	r3, 8006a18 <__swbuf_r+0x12>
 8006a14:	f7ff ff0e 	bl	8006834 <__sinit>
 8006a18:	69a3      	ldr	r3, [r4, #24]
 8006a1a:	60a3      	str	r3, [r4, #8]
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	071a      	lsls	r2, r3, #28
 8006a20:	d501      	bpl.n	8006a26 <__swbuf_r+0x20>
 8006a22:	6923      	ldr	r3, [r4, #16]
 8006a24:	b943      	cbnz	r3, 8006a38 <__swbuf_r+0x32>
 8006a26:	4621      	mov	r1, r4
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 f82b 	bl	8006a84 <__swsetup_r>
 8006a2e:	b118      	cbz	r0, 8006a38 <__swbuf_r+0x32>
 8006a30:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006a34:	4638      	mov	r0, r7
 8006a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	6922      	ldr	r2, [r4, #16]
 8006a3c:	1a98      	subs	r0, r3, r2
 8006a3e:	6963      	ldr	r3, [r4, #20]
 8006a40:	b2f6      	uxtb	r6, r6
 8006a42:	4283      	cmp	r3, r0
 8006a44:	4637      	mov	r7, r6
 8006a46:	dc05      	bgt.n	8006a54 <__swbuf_r+0x4e>
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f001 fd80 	bl	8008550 <_fflush_r>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d1ed      	bne.n	8006a30 <__swbuf_r+0x2a>
 8006a54:	68a3      	ldr	r3, [r4, #8]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	60a3      	str	r3, [r4, #8]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	6022      	str	r2, [r4, #0]
 8006a60:	701e      	strb	r6, [r3, #0]
 8006a62:	6962      	ldr	r2, [r4, #20]
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d004      	beq.n	8006a74 <__swbuf_r+0x6e>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	07db      	lsls	r3, r3, #31
 8006a6e:	d5e1      	bpl.n	8006a34 <__swbuf_r+0x2e>
 8006a70:	2e0a      	cmp	r6, #10
 8006a72:	d1df      	bne.n	8006a34 <__swbuf_r+0x2e>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4628      	mov	r0, r5
 8006a78:	f001 fd6a 	bl	8008550 <_fflush_r>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d0d9      	beq.n	8006a34 <__swbuf_r+0x2e>
 8006a80:	e7d6      	b.n	8006a30 <__swbuf_r+0x2a>
	...

08006a84 <__swsetup_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4b29      	ldr	r3, [pc, #164]	@ (8006b2c <__swsetup_r+0xa8>)
 8006a88:	4605      	mov	r5, r0
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	b118      	cbz	r0, 8006a98 <__swsetup_r+0x14>
 8006a90:	6a03      	ldr	r3, [r0, #32]
 8006a92:	b90b      	cbnz	r3, 8006a98 <__swsetup_r+0x14>
 8006a94:	f7ff fece 	bl	8006834 <__sinit>
 8006a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a9c:	0719      	lsls	r1, r3, #28
 8006a9e:	d422      	bmi.n	8006ae6 <__swsetup_r+0x62>
 8006aa0:	06da      	lsls	r2, r3, #27
 8006aa2:	d407      	bmi.n	8006ab4 <__swsetup_r+0x30>
 8006aa4:	2209      	movs	r2, #9
 8006aa6:	602a      	str	r2, [r5, #0]
 8006aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aac:	81a3      	strh	r3, [r4, #12]
 8006aae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ab2:	e033      	b.n	8006b1c <__swsetup_r+0x98>
 8006ab4:	0758      	lsls	r0, r3, #29
 8006ab6:	d512      	bpl.n	8006ade <__swsetup_r+0x5a>
 8006ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aba:	b141      	cbz	r1, 8006ace <__swsetup_r+0x4a>
 8006abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	d002      	beq.n	8006aca <__swsetup_r+0x46>
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f000 ff0b 	bl	80078e0 <_free_r>
 8006aca:	2300      	movs	r3, #0
 8006acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6063      	str	r3, [r4, #4]
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	f043 0308 	orr.w	r3, r3, #8
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	b94b      	cbnz	r3, 8006afe <__swsetup_r+0x7a>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af4:	d003      	beq.n	8006afe <__swsetup_r+0x7a>
 8006af6:	4621      	mov	r1, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	f001 fd77 	bl	80085ec <__smakebuf_r>
 8006afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b02:	f013 0201 	ands.w	r2, r3, #1
 8006b06:	d00a      	beq.n	8006b1e <__swsetup_r+0x9a>
 8006b08:	2200      	movs	r2, #0
 8006b0a:	60a2      	str	r2, [r4, #8]
 8006b0c:	6962      	ldr	r2, [r4, #20]
 8006b0e:	4252      	negs	r2, r2
 8006b10:	61a2      	str	r2, [r4, #24]
 8006b12:	6922      	ldr	r2, [r4, #16]
 8006b14:	b942      	cbnz	r2, 8006b28 <__swsetup_r+0xa4>
 8006b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b1a:	d1c5      	bne.n	8006aa8 <__swsetup_r+0x24>
 8006b1c:	bd38      	pop	{r3, r4, r5, pc}
 8006b1e:	0799      	lsls	r1, r3, #30
 8006b20:	bf58      	it	pl
 8006b22:	6962      	ldrpl	r2, [r4, #20]
 8006b24:	60a2      	str	r2, [r4, #8]
 8006b26:	e7f4      	b.n	8006b12 <__swsetup_r+0x8e>
 8006b28:	2000      	movs	r0, #0
 8006b2a:	e7f7      	b.n	8006b1c <__swsetup_r+0x98>
 8006b2c:	20000024 	.word	0x20000024

08006b30 <memset>:
 8006b30:	4402      	add	r2, r0
 8006b32:	4603      	mov	r3, r0
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d100      	bne.n	8006b3a <memset+0xa>
 8006b38:	4770      	bx	lr
 8006b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b3e:	e7f9      	b.n	8006b34 <memset+0x4>

08006b40 <_localeconv_r>:
 8006b40:	4800      	ldr	r0, [pc, #0]	@ (8006b44 <_localeconv_r+0x4>)
 8006b42:	4770      	bx	lr
 8006b44:	20000164 	.word	0x20000164

08006b48 <_close_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d06      	ldr	r5, [pc, #24]	@ (8006b64 <_close_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	f7fa feea 	bl	800192c <_close>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_close_r+0x1a>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_close_r+0x1a>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	200004f0 	.word	0x200004f0

08006b68 <_lseek_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	@ (8006b88 <_lseek_r+0x20>)
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	602a      	str	r2, [r5, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7fa fefc 	bl	8001974 <_lseek>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_lseek_r+0x1e>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_lseek_r+0x1e>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	200004f0 	.word	0x200004f0

08006b8c <_read_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d07      	ldr	r5, [pc, #28]	@ (8006bac <_read_r+0x20>)
 8006b90:	4604      	mov	r4, r0
 8006b92:	4608      	mov	r0, r1
 8006b94:	4611      	mov	r1, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f7fa fea9 	bl	80018f2 <_read>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_read_r+0x1e>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_read_r+0x1e>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	200004f0 	.word	0x200004f0

08006bb0 <_write_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	@ (8006bd0 <_write_r+0x20>)
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7fa fc2e 	bl	8001420 <_write>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_write_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_write_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	200004f0 	.word	0x200004f0

08006bd4 <__errno>:
 8006bd4:	4b01      	ldr	r3, [pc, #4]	@ (8006bdc <__errno+0x8>)
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	20000024 	.word	0x20000024

08006be0 <__libc_init_array>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	4d0d      	ldr	r5, [pc, #52]	@ (8006c18 <__libc_init_array+0x38>)
 8006be4:	4c0d      	ldr	r4, [pc, #52]	@ (8006c1c <__libc_init_array+0x3c>)
 8006be6:	1b64      	subs	r4, r4, r5
 8006be8:	10a4      	asrs	r4, r4, #2
 8006bea:	2600      	movs	r6, #0
 8006bec:	42a6      	cmp	r6, r4
 8006bee:	d109      	bne.n	8006c04 <__libc_init_array+0x24>
 8006bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8006c20 <__libc_init_array+0x40>)
 8006bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8006c24 <__libc_init_array+0x44>)
 8006bf4:	f001 fe26 	bl	8008844 <_init>
 8006bf8:	1b64      	subs	r4, r4, r5
 8006bfa:	10a4      	asrs	r4, r4, #2
 8006bfc:	2600      	movs	r6, #0
 8006bfe:	42a6      	cmp	r6, r4
 8006c00:	d105      	bne.n	8006c0e <__libc_init_array+0x2e>
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
 8006c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c08:	4798      	blx	r3
 8006c0a:	3601      	adds	r6, #1
 8006c0c:	e7ee      	b.n	8006bec <__libc_init_array+0xc>
 8006c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c12:	4798      	blx	r3
 8006c14:	3601      	adds	r6, #1
 8006c16:	e7f2      	b.n	8006bfe <__libc_init_array+0x1e>
 8006c18:	08008f1c 	.word	0x08008f1c
 8006c1c:	08008f1c 	.word	0x08008f1c
 8006c20:	08008f1c 	.word	0x08008f1c
 8006c24:	08008f20 	.word	0x08008f20

08006c28 <__retarget_lock_init_recursive>:
 8006c28:	4770      	bx	lr

08006c2a <__retarget_lock_acquire_recursive>:
 8006c2a:	4770      	bx	lr

08006c2c <__retarget_lock_release_recursive>:
 8006c2c:	4770      	bx	lr

08006c2e <quorem>:
 8006c2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c32:	6903      	ldr	r3, [r0, #16]
 8006c34:	690c      	ldr	r4, [r1, #16]
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	4607      	mov	r7, r0
 8006c3a:	db7e      	blt.n	8006d3a <quorem+0x10c>
 8006c3c:	3c01      	subs	r4, #1
 8006c3e:	f101 0814 	add.w	r8, r1, #20
 8006c42:	00a3      	lsls	r3, r4, #2
 8006c44:	f100 0514 	add.w	r5, r0, #20
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c60:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c64:	d32e      	bcc.n	8006cc4 <quorem+0x96>
 8006c66:	f04f 0a00 	mov.w	sl, #0
 8006c6a:	46c4      	mov	ip, r8
 8006c6c:	46ae      	mov	lr, r5
 8006c6e:	46d3      	mov	fp, sl
 8006c70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c74:	b298      	uxth	r0, r3
 8006c76:	fb06 a000 	mla	r0, r6, r0, sl
 8006c7a:	0c02      	lsrs	r2, r0, #16
 8006c7c:	0c1b      	lsrs	r3, r3, #16
 8006c7e:	fb06 2303 	mla	r3, r6, r3, r2
 8006c82:	f8de 2000 	ldr.w	r2, [lr]
 8006c86:	b280      	uxth	r0, r0
 8006c88:	b292      	uxth	r2, r2
 8006c8a:	1a12      	subs	r2, r2, r0
 8006c8c:	445a      	add	r2, fp
 8006c8e:	f8de 0000 	ldr.w	r0, [lr]
 8006c92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ca0:	b292      	uxth	r2, r2
 8006ca2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ca6:	45e1      	cmp	r9, ip
 8006ca8:	f84e 2b04 	str.w	r2, [lr], #4
 8006cac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006cb0:	d2de      	bcs.n	8006c70 <quorem+0x42>
 8006cb2:	9b00      	ldr	r3, [sp, #0]
 8006cb4:	58eb      	ldr	r3, [r5, r3]
 8006cb6:	b92b      	cbnz	r3, 8006cc4 <quorem+0x96>
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	3b04      	subs	r3, #4
 8006cbc:	429d      	cmp	r5, r3
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	d32f      	bcc.n	8006d22 <quorem+0xf4>
 8006cc2:	613c      	str	r4, [r7, #16]
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f001 f97d 	bl	8007fc4 <__mcmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	db25      	blt.n	8006d1a <quorem+0xec>
 8006cce:	4629      	mov	r1, r5
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cd6:	f8d1 c000 	ldr.w	ip, [r1]
 8006cda:	fa1f fe82 	uxth.w	lr, r2
 8006cde:	fa1f f38c 	uxth.w	r3, ip
 8006ce2:	eba3 030e 	sub.w	r3, r3, lr
 8006ce6:	4403      	add	r3, r0
 8006ce8:	0c12      	lsrs	r2, r2, #16
 8006cea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006cee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cf8:	45c1      	cmp	r9, r8
 8006cfa:	f841 3b04 	str.w	r3, [r1], #4
 8006cfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d02:	d2e6      	bcs.n	8006cd2 <quorem+0xa4>
 8006d04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d0c:	b922      	cbnz	r2, 8006d18 <quorem+0xea>
 8006d0e:	3b04      	subs	r3, #4
 8006d10:	429d      	cmp	r5, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	d30b      	bcc.n	8006d2e <quorem+0x100>
 8006d16:	613c      	str	r4, [r7, #16]
 8006d18:	3601      	adds	r6, #1
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	b003      	add	sp, #12
 8006d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	3b04      	subs	r3, #4
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	d1cb      	bne.n	8006cc2 <quorem+0x94>
 8006d2a:	3c01      	subs	r4, #1
 8006d2c:	e7c6      	b.n	8006cbc <quorem+0x8e>
 8006d2e:	6812      	ldr	r2, [r2, #0]
 8006d30:	3b04      	subs	r3, #4
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	d1ef      	bne.n	8006d16 <quorem+0xe8>
 8006d36:	3c01      	subs	r4, #1
 8006d38:	e7ea      	b.n	8006d10 <quorem+0xe2>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	e7ee      	b.n	8006d1c <quorem+0xee>
	...

08006d40 <_dtoa_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	69c7      	ldr	r7, [r0, #28]
 8006d46:	b097      	sub	sp, #92	@ 0x5c
 8006d48:	4614      	mov	r4, r2
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006d50:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006d52:	4681      	mov	r9, r0
 8006d54:	b97f      	cbnz	r7, 8006d76 <_dtoa_r+0x36>
 8006d56:	2010      	movs	r0, #16
 8006d58:	f000 fe0c 	bl	8007974 <malloc>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006d62:	b920      	cbnz	r0, 8006d6e <_dtoa_r+0x2e>
 8006d64:	4baa      	ldr	r3, [pc, #680]	@ (8007010 <_dtoa_r+0x2d0>)
 8006d66:	21ef      	movs	r1, #239	@ 0xef
 8006d68:	48aa      	ldr	r0, [pc, #680]	@ (8007014 <_dtoa_r+0x2d4>)
 8006d6a:	f001 fcbb 	bl	80086e4 <__assert_func>
 8006d6e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d72:	6007      	str	r7, [r0, #0]
 8006d74:	60c7      	str	r7, [r0, #12]
 8006d76:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d7a:	6819      	ldr	r1, [r3, #0]
 8006d7c:	b159      	cbz	r1, 8006d96 <_dtoa_r+0x56>
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	604a      	str	r2, [r1, #4]
 8006d82:	2301      	movs	r3, #1
 8006d84:	4093      	lsls	r3, r2
 8006d86:	608b      	str	r3, [r1, #8]
 8006d88:	4648      	mov	r0, r9
 8006d8a:	f000 fee9 	bl	8007b60 <_Bfree>
 8006d8e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	1e2b      	subs	r3, r5, #0
 8006d98:	bfb9      	ittee	lt
 8006d9a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d9e:	9307      	strlt	r3, [sp, #28]
 8006da0:	2300      	movge	r3, #0
 8006da2:	6033      	strge	r3, [r6, #0]
 8006da4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006da8:	4b9b      	ldr	r3, [pc, #620]	@ (8007018 <_dtoa_r+0x2d8>)
 8006daa:	bfbc      	itt	lt
 8006dac:	2201      	movlt	r2, #1
 8006dae:	6032      	strlt	r2, [r6, #0]
 8006db0:	ea33 0308 	bics.w	r3, r3, r8
 8006db4:	d112      	bne.n	8006ddc <_dtoa_r+0x9c>
 8006db6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006db8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006dc2:	4323      	orrs	r3, r4
 8006dc4:	f000 855b 	beq.w	800787e <_dtoa_r+0xb3e>
 8006dc8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dca:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800701c <_dtoa_r+0x2dc>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 855d 	beq.w	800788e <_dtoa_r+0xb4e>
 8006dd4:	f10a 0303 	add.w	r3, sl, #3
 8006dd8:	f000 bd57 	b.w	800788a <_dtoa_r+0xb4a>
 8006ddc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006de0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006de8:	2200      	movs	r2, #0
 8006dea:	2300      	movs	r3, #0
 8006dec:	f7f9 fe44 	bl	8000a78 <__aeabi_dcmpeq>
 8006df0:	4607      	mov	r7, r0
 8006df2:	b158      	cbz	r0, 8006e0c <_dtoa_r+0xcc>
 8006df4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006df6:	2301      	movs	r3, #1
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dfc:	b113      	cbz	r3, 8006e04 <_dtoa_r+0xc4>
 8006dfe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006e00:	4b87      	ldr	r3, [pc, #540]	@ (8007020 <_dtoa_r+0x2e0>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8007024 <_dtoa_r+0x2e4>
 8006e08:	f000 bd41 	b.w	800788e <_dtoa_r+0xb4e>
 8006e0c:	ab14      	add	r3, sp, #80	@ 0x50
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	ab15      	add	r3, sp, #84	@ 0x54
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	4648      	mov	r0, r9
 8006e16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006e1a:	f001 f981 	bl	8008120 <__d2b>
 8006e1e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006e22:	9003      	str	r0, [sp, #12]
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	d077      	beq.n	8006f18 <_dtoa_r+0x1d8>
 8006e28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e2a:	9712      	str	r7, [sp, #72]	@ 0x48
 8006e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e40:	4619      	mov	r1, r3
 8006e42:	2200      	movs	r2, #0
 8006e44:	4b78      	ldr	r3, [pc, #480]	@ (8007028 <_dtoa_r+0x2e8>)
 8006e46:	f7f9 f9f7 	bl	8000238 <__aeabi_dsub>
 8006e4a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ff8 <_dtoa_r+0x2b8>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 fbaa 	bl	80005a8 <__aeabi_dmul>
 8006e54:	a36a      	add	r3, pc, #424	@ (adr r3, 8007000 <_dtoa_r+0x2c0>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f7f9 f9ef 	bl	800023c <__adddf3>
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4630      	mov	r0, r6
 8006e62:	460d      	mov	r5, r1
 8006e64:	f7f9 fb36 	bl	80004d4 <__aeabi_i2d>
 8006e68:	a367      	add	r3, pc, #412	@ (adr r3, 8007008 <_dtoa_r+0x2c8>)
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f7f9 fb9b 	bl	80005a8 <__aeabi_dmul>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4620      	mov	r0, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7f9 f9df 	bl	800023c <__adddf3>
 8006e7e:	4604      	mov	r4, r0
 8006e80:	460d      	mov	r5, r1
 8006e82:	f7f9 fe41 	bl	8000b08 <__aeabi_d2iz>
 8006e86:	2200      	movs	r2, #0
 8006e88:	4607      	mov	r7, r0
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f7f9 fdfc 	bl	8000a8c <__aeabi_dcmplt>
 8006e94:	b140      	cbz	r0, 8006ea8 <_dtoa_r+0x168>
 8006e96:	4638      	mov	r0, r7
 8006e98:	f7f9 fb1c 	bl	80004d4 <__aeabi_i2d>
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	462b      	mov	r3, r5
 8006ea0:	f7f9 fdea 	bl	8000a78 <__aeabi_dcmpeq>
 8006ea4:	b900      	cbnz	r0, 8006ea8 <_dtoa_r+0x168>
 8006ea6:	3f01      	subs	r7, #1
 8006ea8:	2f16      	cmp	r7, #22
 8006eaa:	d853      	bhi.n	8006f54 <_dtoa_r+0x214>
 8006eac:	4b5f      	ldr	r3, [pc, #380]	@ (800702c <_dtoa_r+0x2ec>)
 8006eae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eba:	f7f9 fde7 	bl	8000a8c <__aeabi_dcmplt>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d04a      	beq.n	8006f58 <_dtoa_r+0x218>
 8006ec2:	3f01      	subs	r7, #1
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ec8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006eca:	1b9b      	subs	r3, r3, r6
 8006ecc:	1e5a      	subs	r2, r3, #1
 8006ece:	bf45      	ittet	mi
 8006ed0:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ed4:	9304      	strmi	r3, [sp, #16]
 8006ed6:	2300      	movpl	r3, #0
 8006ed8:	2300      	movmi	r3, #0
 8006eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8006edc:	bf54      	ite	pl
 8006ede:	9304      	strpl	r3, [sp, #16]
 8006ee0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006ee2:	2f00      	cmp	r7, #0
 8006ee4:	db3a      	blt.n	8006f5c <_dtoa_r+0x21c>
 8006ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee8:	970e      	str	r7, [sp, #56]	@ 0x38
 8006eea:	443b      	add	r3, r7
 8006eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eee:	2300      	movs	r3, #0
 8006ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ef4:	2b09      	cmp	r3, #9
 8006ef6:	d864      	bhi.n	8006fc2 <_dtoa_r+0x282>
 8006ef8:	2b05      	cmp	r3, #5
 8006efa:	bfc4      	itt	gt
 8006efc:	3b04      	subgt	r3, #4
 8006efe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006f00:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f02:	f1a3 0302 	sub.w	r3, r3, #2
 8006f06:	bfcc      	ite	gt
 8006f08:	2400      	movgt	r4, #0
 8006f0a:	2401      	movle	r4, #1
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d864      	bhi.n	8006fda <_dtoa_r+0x29a>
 8006f10:	e8df f003 	tbb	[pc, r3]
 8006f14:	2c385553 	.word	0x2c385553
 8006f18:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006f1c:	441e      	add	r6, r3
 8006f1e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	bfc1      	itttt	gt
 8006f26:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f2a:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f2e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f32:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f36:	bfd6      	itet	le
 8006f38:	f1c3 0320 	rsble	r3, r3, #32
 8006f3c:	ea48 0003 	orrgt.w	r0, r8, r3
 8006f40:	fa04 f003 	lslle.w	r0, r4, r3
 8006f44:	f7f9 fab6 	bl	80004b4 <__aeabi_ui2d>
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f4e:	3e01      	subs	r6, #1
 8006f50:	9212      	str	r2, [sp, #72]	@ 0x48
 8006f52:	e775      	b.n	8006e40 <_dtoa_r+0x100>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e7b6      	b.n	8006ec6 <_dtoa_r+0x186>
 8006f58:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006f5a:	e7b5      	b.n	8006ec8 <_dtoa_r+0x188>
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	1bdb      	subs	r3, r3, r7
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	427b      	negs	r3, r7
 8006f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f66:	2300      	movs	r3, #0
 8006f68:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f6a:	e7c2      	b.n	8006ef2 <_dtoa_r+0x1b2>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f72:	eb07 0b03 	add.w	fp, r7, r3
 8006f76:	f10b 0301 	add.w	r3, fp, #1
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	9308      	str	r3, [sp, #32]
 8006f7e:	bfb8      	it	lt
 8006f80:	2301      	movlt	r3, #1
 8006f82:	e006      	b.n	8006f92 <_dtoa_r+0x252>
 8006f84:	2301      	movs	r3, #1
 8006f86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	dd28      	ble.n	8006fe0 <_dtoa_r+0x2a0>
 8006f8e:	469b      	mov	fp, r3
 8006f90:	9308      	str	r3, [sp, #32]
 8006f92:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006f96:	2100      	movs	r1, #0
 8006f98:	2204      	movs	r2, #4
 8006f9a:	f102 0514 	add.w	r5, r2, #20
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	d926      	bls.n	8006ff0 <_dtoa_r+0x2b0>
 8006fa2:	6041      	str	r1, [r0, #4]
 8006fa4:	4648      	mov	r0, r9
 8006fa6:	f000 fd9b 	bl	8007ae0 <_Balloc>
 8006faa:	4682      	mov	sl, r0
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d141      	bne.n	8007034 <_dtoa_r+0x2f4>
 8006fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007030 <_dtoa_r+0x2f0>)
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	f240 11af 	movw	r1, #431	@ 0x1af
 8006fb8:	e6d6      	b.n	8006d68 <_dtoa_r+0x28>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e7e3      	b.n	8006f86 <_dtoa_r+0x246>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e7d5      	b.n	8006f6e <_dtoa_r+0x22e>
 8006fc2:	2401      	movs	r4, #1
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9320      	str	r3, [sp, #128]	@ 0x80
 8006fc8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006fca:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8cd b020 	str.w	fp, [sp, #32]
 8006fd4:	2312      	movs	r3, #18
 8006fd6:	9221      	str	r2, [sp, #132]	@ 0x84
 8006fd8:	e7db      	b.n	8006f92 <_dtoa_r+0x252>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fde:	e7f4      	b.n	8006fca <_dtoa_r+0x28a>
 8006fe0:	f04f 0b01 	mov.w	fp, #1
 8006fe4:	f8cd b020 	str.w	fp, [sp, #32]
 8006fe8:	465b      	mov	r3, fp
 8006fea:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006fee:	e7d0      	b.n	8006f92 <_dtoa_r+0x252>
 8006ff0:	3101      	adds	r1, #1
 8006ff2:	0052      	lsls	r2, r2, #1
 8006ff4:	e7d1      	b.n	8006f9a <_dtoa_r+0x25a>
 8006ff6:	bf00      	nop
 8006ff8:	636f4361 	.word	0x636f4361
 8006ffc:	3fd287a7 	.word	0x3fd287a7
 8007000:	8b60c8b3 	.word	0x8b60c8b3
 8007004:	3fc68a28 	.word	0x3fc68a28
 8007008:	509f79fb 	.word	0x509f79fb
 800700c:	3fd34413 	.word	0x3fd34413
 8007010:	08008bdd 	.word	0x08008bdd
 8007014:	08008bf4 	.word	0x08008bf4
 8007018:	7ff00000 	.word	0x7ff00000
 800701c:	08008bd9 	.word	0x08008bd9
 8007020:	08008bad 	.word	0x08008bad
 8007024:	08008bac 	.word	0x08008bac
 8007028:	3ff80000 	.word	0x3ff80000
 800702c:	08008d48 	.word	0x08008d48
 8007030:	08008c4c 	.word	0x08008c4c
 8007034:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007038:	6018      	str	r0, [r3, #0]
 800703a:	9b08      	ldr	r3, [sp, #32]
 800703c:	2b0e      	cmp	r3, #14
 800703e:	f200 80a1 	bhi.w	8007184 <_dtoa_r+0x444>
 8007042:	2c00      	cmp	r4, #0
 8007044:	f000 809e 	beq.w	8007184 <_dtoa_r+0x444>
 8007048:	2f00      	cmp	r7, #0
 800704a:	dd33      	ble.n	80070b4 <_dtoa_r+0x374>
 800704c:	4b9c      	ldr	r3, [pc, #624]	@ (80072c0 <_dtoa_r+0x580>)
 800704e:	f007 020f 	and.w	r2, r7, #15
 8007052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007056:	e9d3 3400 	ldrd	r3, r4, [r3]
 800705a:	05f8      	lsls	r0, r7, #23
 800705c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007060:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007064:	d516      	bpl.n	8007094 <_dtoa_r+0x354>
 8007066:	4b97      	ldr	r3, [pc, #604]	@ (80072c4 <_dtoa_r+0x584>)
 8007068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800706c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007070:	f7f9 fbc4 	bl	80007fc <__aeabi_ddiv>
 8007074:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007078:	f004 040f 	and.w	r4, r4, #15
 800707c:	2603      	movs	r6, #3
 800707e:	4d91      	ldr	r5, [pc, #580]	@ (80072c4 <_dtoa_r+0x584>)
 8007080:	b954      	cbnz	r4, 8007098 <_dtoa_r+0x358>
 8007082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800708a:	f7f9 fbb7 	bl	80007fc <__aeabi_ddiv>
 800708e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007092:	e028      	b.n	80070e6 <_dtoa_r+0x3a6>
 8007094:	2602      	movs	r6, #2
 8007096:	e7f2      	b.n	800707e <_dtoa_r+0x33e>
 8007098:	07e1      	lsls	r1, r4, #31
 800709a:	d508      	bpl.n	80070ae <_dtoa_r+0x36e>
 800709c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070a4:	f7f9 fa80 	bl	80005a8 <__aeabi_dmul>
 80070a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070ac:	3601      	adds	r6, #1
 80070ae:	1064      	asrs	r4, r4, #1
 80070b0:	3508      	adds	r5, #8
 80070b2:	e7e5      	b.n	8007080 <_dtoa_r+0x340>
 80070b4:	f000 80af 	beq.w	8007216 <_dtoa_r+0x4d6>
 80070b8:	427c      	negs	r4, r7
 80070ba:	4b81      	ldr	r3, [pc, #516]	@ (80072c0 <_dtoa_r+0x580>)
 80070bc:	4d81      	ldr	r5, [pc, #516]	@ (80072c4 <_dtoa_r+0x584>)
 80070be:	f004 020f 	and.w	r2, r4, #15
 80070c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ce:	f7f9 fa6b 	bl	80005a8 <__aeabi_dmul>
 80070d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070d6:	1124      	asrs	r4, r4, #4
 80070d8:	2300      	movs	r3, #0
 80070da:	2602      	movs	r6, #2
 80070dc:	2c00      	cmp	r4, #0
 80070de:	f040 808f 	bne.w	8007200 <_dtoa_r+0x4c0>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1d3      	bne.n	800708e <_dtoa_r+0x34e>
 80070e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070e8:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8094 	beq.w	800721a <_dtoa_r+0x4da>
 80070f2:	4b75      	ldr	r3, [pc, #468]	@ (80072c8 <_dtoa_r+0x588>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	4620      	mov	r0, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	f7f9 fcc7 	bl	8000a8c <__aeabi_dcmplt>
 80070fe:	2800      	cmp	r0, #0
 8007100:	f000 808b 	beq.w	800721a <_dtoa_r+0x4da>
 8007104:	9b08      	ldr	r3, [sp, #32]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 8087 	beq.w	800721a <_dtoa_r+0x4da>
 800710c:	f1bb 0f00 	cmp.w	fp, #0
 8007110:	dd34      	ble.n	800717c <_dtoa_r+0x43c>
 8007112:	4620      	mov	r0, r4
 8007114:	4b6d      	ldr	r3, [pc, #436]	@ (80072cc <_dtoa_r+0x58c>)
 8007116:	2200      	movs	r2, #0
 8007118:	4629      	mov	r1, r5
 800711a:	f7f9 fa45 	bl	80005a8 <__aeabi_dmul>
 800711e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007122:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007126:	3601      	adds	r6, #1
 8007128:	465c      	mov	r4, fp
 800712a:	4630      	mov	r0, r6
 800712c:	f7f9 f9d2 	bl	80004d4 <__aeabi_i2d>
 8007130:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007134:	f7f9 fa38 	bl	80005a8 <__aeabi_dmul>
 8007138:	4b65      	ldr	r3, [pc, #404]	@ (80072d0 <_dtoa_r+0x590>)
 800713a:	2200      	movs	r2, #0
 800713c:	f7f9 f87e 	bl	800023c <__adddf3>
 8007140:	4605      	mov	r5, r0
 8007142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007146:	2c00      	cmp	r4, #0
 8007148:	d16a      	bne.n	8007220 <_dtoa_r+0x4e0>
 800714a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800714e:	4b61      	ldr	r3, [pc, #388]	@ (80072d4 <_dtoa_r+0x594>)
 8007150:	2200      	movs	r2, #0
 8007152:	f7f9 f871 	bl	8000238 <__aeabi_dsub>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800715e:	462a      	mov	r2, r5
 8007160:	4633      	mov	r3, r6
 8007162:	f7f9 fcb1 	bl	8000ac8 <__aeabi_dcmpgt>
 8007166:	2800      	cmp	r0, #0
 8007168:	f040 8298 	bne.w	800769c <_dtoa_r+0x95c>
 800716c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007170:	462a      	mov	r2, r5
 8007172:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007176:	f7f9 fc89 	bl	8000a8c <__aeabi_dcmplt>
 800717a:	bb38      	cbnz	r0, 80071cc <_dtoa_r+0x48c>
 800717c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007180:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007184:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007186:	2b00      	cmp	r3, #0
 8007188:	f2c0 8157 	blt.w	800743a <_dtoa_r+0x6fa>
 800718c:	2f0e      	cmp	r7, #14
 800718e:	f300 8154 	bgt.w	800743a <_dtoa_r+0x6fa>
 8007192:	4b4b      	ldr	r3, [pc, #300]	@ (80072c0 <_dtoa_r+0x580>)
 8007194:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007198:	e9d3 3400 	ldrd	r3, r4, [r3]
 800719c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80071a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f280 80e5 	bge.w	8007372 <_dtoa_r+0x632>
 80071a8:	9b08      	ldr	r3, [sp, #32]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f300 80e1 	bgt.w	8007372 <_dtoa_r+0x632>
 80071b0:	d10c      	bne.n	80071cc <_dtoa_r+0x48c>
 80071b2:	4b48      	ldr	r3, [pc, #288]	@ (80072d4 <_dtoa_r+0x594>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ba:	f7f9 f9f5 	bl	80005a8 <__aeabi_dmul>
 80071be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071c2:	f7f9 fc77 	bl	8000ab4 <__aeabi_dcmpge>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f000 8266 	beq.w	8007698 <_dtoa_r+0x958>
 80071cc:	2400      	movs	r4, #0
 80071ce:	4625      	mov	r5, r4
 80071d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071d2:	4656      	mov	r6, sl
 80071d4:	ea6f 0803 	mvn.w	r8, r3
 80071d8:	2700      	movs	r7, #0
 80071da:	4621      	mov	r1, r4
 80071dc:	4648      	mov	r0, r9
 80071de:	f000 fcbf 	bl	8007b60 <_Bfree>
 80071e2:	2d00      	cmp	r5, #0
 80071e4:	f000 80bd 	beq.w	8007362 <_dtoa_r+0x622>
 80071e8:	b12f      	cbz	r7, 80071f6 <_dtoa_r+0x4b6>
 80071ea:	42af      	cmp	r7, r5
 80071ec:	d003      	beq.n	80071f6 <_dtoa_r+0x4b6>
 80071ee:	4639      	mov	r1, r7
 80071f0:	4648      	mov	r0, r9
 80071f2:	f000 fcb5 	bl	8007b60 <_Bfree>
 80071f6:	4629      	mov	r1, r5
 80071f8:	4648      	mov	r0, r9
 80071fa:	f000 fcb1 	bl	8007b60 <_Bfree>
 80071fe:	e0b0      	b.n	8007362 <_dtoa_r+0x622>
 8007200:	07e2      	lsls	r2, r4, #31
 8007202:	d505      	bpl.n	8007210 <_dtoa_r+0x4d0>
 8007204:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007208:	f7f9 f9ce 	bl	80005a8 <__aeabi_dmul>
 800720c:	3601      	adds	r6, #1
 800720e:	2301      	movs	r3, #1
 8007210:	1064      	asrs	r4, r4, #1
 8007212:	3508      	adds	r5, #8
 8007214:	e762      	b.n	80070dc <_dtoa_r+0x39c>
 8007216:	2602      	movs	r6, #2
 8007218:	e765      	b.n	80070e6 <_dtoa_r+0x3a6>
 800721a:	9c08      	ldr	r4, [sp, #32]
 800721c:	46b8      	mov	r8, r7
 800721e:	e784      	b.n	800712a <_dtoa_r+0x3ea>
 8007220:	4b27      	ldr	r3, [pc, #156]	@ (80072c0 <_dtoa_r+0x580>)
 8007222:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007224:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007228:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800722c:	4454      	add	r4, sl
 800722e:	2900      	cmp	r1, #0
 8007230:	d054      	beq.n	80072dc <_dtoa_r+0x59c>
 8007232:	4929      	ldr	r1, [pc, #164]	@ (80072d8 <_dtoa_r+0x598>)
 8007234:	2000      	movs	r0, #0
 8007236:	f7f9 fae1 	bl	80007fc <__aeabi_ddiv>
 800723a:	4633      	mov	r3, r6
 800723c:	462a      	mov	r2, r5
 800723e:	f7f8 fffb 	bl	8000238 <__aeabi_dsub>
 8007242:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007246:	4656      	mov	r6, sl
 8007248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800724c:	f7f9 fc5c 	bl	8000b08 <__aeabi_d2iz>
 8007250:	4605      	mov	r5, r0
 8007252:	f7f9 f93f 	bl	80004d4 <__aeabi_i2d>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800725e:	f7f8 ffeb 	bl	8000238 <__aeabi_dsub>
 8007262:	3530      	adds	r5, #48	@ 0x30
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800726c:	f806 5b01 	strb.w	r5, [r6], #1
 8007270:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007274:	f7f9 fc0a 	bl	8000a8c <__aeabi_dcmplt>
 8007278:	2800      	cmp	r0, #0
 800727a:	d172      	bne.n	8007362 <_dtoa_r+0x622>
 800727c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007280:	4911      	ldr	r1, [pc, #68]	@ (80072c8 <_dtoa_r+0x588>)
 8007282:	2000      	movs	r0, #0
 8007284:	f7f8 ffd8 	bl	8000238 <__aeabi_dsub>
 8007288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800728c:	f7f9 fbfe 	bl	8000a8c <__aeabi_dcmplt>
 8007290:	2800      	cmp	r0, #0
 8007292:	f040 80b4 	bne.w	80073fe <_dtoa_r+0x6be>
 8007296:	42a6      	cmp	r6, r4
 8007298:	f43f af70 	beq.w	800717c <_dtoa_r+0x43c>
 800729c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072a0:	4b0a      	ldr	r3, [pc, #40]	@ (80072cc <_dtoa_r+0x58c>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	f7f9 f980 	bl	80005a8 <__aeabi_dmul>
 80072a8:	4b08      	ldr	r3, [pc, #32]	@ (80072cc <_dtoa_r+0x58c>)
 80072aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072ae:	2200      	movs	r2, #0
 80072b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072b4:	f7f9 f978 	bl	80005a8 <__aeabi_dmul>
 80072b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072bc:	e7c4      	b.n	8007248 <_dtoa_r+0x508>
 80072be:	bf00      	nop
 80072c0:	08008d48 	.word	0x08008d48
 80072c4:	08008d20 	.word	0x08008d20
 80072c8:	3ff00000 	.word	0x3ff00000
 80072cc:	40240000 	.word	0x40240000
 80072d0:	401c0000 	.word	0x401c0000
 80072d4:	40140000 	.word	0x40140000
 80072d8:	3fe00000 	.word	0x3fe00000
 80072dc:	4631      	mov	r1, r6
 80072de:	4628      	mov	r0, r5
 80072e0:	f7f9 f962 	bl	80005a8 <__aeabi_dmul>
 80072e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80072ea:	4656      	mov	r6, sl
 80072ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072f0:	f7f9 fc0a 	bl	8000b08 <__aeabi_d2iz>
 80072f4:	4605      	mov	r5, r0
 80072f6:	f7f9 f8ed 	bl	80004d4 <__aeabi_i2d>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007302:	f7f8 ff99 	bl	8000238 <__aeabi_dsub>
 8007306:	3530      	adds	r5, #48	@ 0x30
 8007308:	f806 5b01 	strb.w	r5, [r6], #1
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	42a6      	cmp	r6, r4
 8007312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	d124      	bne.n	8007366 <_dtoa_r+0x626>
 800731c:	4baf      	ldr	r3, [pc, #700]	@ (80075dc <_dtoa_r+0x89c>)
 800731e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007322:	f7f8 ff8b 	bl	800023c <__adddf3>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800732e:	f7f9 fbcb 	bl	8000ac8 <__aeabi_dcmpgt>
 8007332:	2800      	cmp	r0, #0
 8007334:	d163      	bne.n	80073fe <_dtoa_r+0x6be>
 8007336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800733a:	49a8      	ldr	r1, [pc, #672]	@ (80075dc <_dtoa_r+0x89c>)
 800733c:	2000      	movs	r0, #0
 800733e:	f7f8 ff7b 	bl	8000238 <__aeabi_dsub>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800734a:	f7f9 fb9f 	bl	8000a8c <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	f43f af14 	beq.w	800717c <_dtoa_r+0x43c>
 8007354:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007356:	1e73      	subs	r3, r6, #1
 8007358:	9313      	str	r3, [sp, #76]	@ 0x4c
 800735a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800735e:	2b30      	cmp	r3, #48	@ 0x30
 8007360:	d0f8      	beq.n	8007354 <_dtoa_r+0x614>
 8007362:	4647      	mov	r7, r8
 8007364:	e03b      	b.n	80073de <_dtoa_r+0x69e>
 8007366:	4b9e      	ldr	r3, [pc, #632]	@ (80075e0 <_dtoa_r+0x8a0>)
 8007368:	f7f9 f91e 	bl	80005a8 <__aeabi_dmul>
 800736c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007370:	e7bc      	b.n	80072ec <_dtoa_r+0x5ac>
 8007372:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007376:	4656      	mov	r6, sl
 8007378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	f7f9 fa3c 	bl	80007fc <__aeabi_ddiv>
 8007384:	f7f9 fbc0 	bl	8000b08 <__aeabi_d2iz>
 8007388:	4680      	mov	r8, r0
 800738a:	f7f9 f8a3 	bl	80004d4 <__aeabi_i2d>
 800738e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007392:	f7f9 f909 	bl	80005a8 <__aeabi_dmul>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4620      	mov	r0, r4
 800739c:	4629      	mov	r1, r5
 800739e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073a2:	f7f8 ff49 	bl	8000238 <__aeabi_dsub>
 80073a6:	f806 4b01 	strb.w	r4, [r6], #1
 80073aa:	9d08      	ldr	r5, [sp, #32]
 80073ac:	eba6 040a 	sub.w	r4, r6, sl
 80073b0:	42a5      	cmp	r5, r4
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	d133      	bne.n	8007420 <_dtoa_r+0x6e0>
 80073b8:	f7f8 ff40 	bl	800023c <__adddf3>
 80073bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c0:	4604      	mov	r4, r0
 80073c2:	460d      	mov	r5, r1
 80073c4:	f7f9 fb80 	bl	8000ac8 <__aeabi_dcmpgt>
 80073c8:	b9c0      	cbnz	r0, 80073fc <_dtoa_r+0x6bc>
 80073ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073ce:	4620      	mov	r0, r4
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7f9 fb51 	bl	8000a78 <__aeabi_dcmpeq>
 80073d6:	b110      	cbz	r0, 80073de <_dtoa_r+0x69e>
 80073d8:	f018 0f01 	tst.w	r8, #1
 80073dc:	d10e      	bne.n	80073fc <_dtoa_r+0x6bc>
 80073de:	9903      	ldr	r1, [sp, #12]
 80073e0:	4648      	mov	r0, r9
 80073e2:	f000 fbbd 	bl	8007b60 <_Bfree>
 80073e6:	2300      	movs	r3, #0
 80073e8:	7033      	strb	r3, [r6, #0]
 80073ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80073ec:	3701      	adds	r7, #1
 80073ee:	601f      	str	r7, [r3, #0]
 80073f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 824b 	beq.w	800788e <_dtoa_r+0xb4e>
 80073f8:	601e      	str	r6, [r3, #0]
 80073fa:	e248      	b.n	800788e <_dtoa_r+0xb4e>
 80073fc:	46b8      	mov	r8, r7
 80073fe:	4633      	mov	r3, r6
 8007400:	461e      	mov	r6, r3
 8007402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007406:	2a39      	cmp	r2, #57	@ 0x39
 8007408:	d106      	bne.n	8007418 <_dtoa_r+0x6d8>
 800740a:	459a      	cmp	sl, r3
 800740c:	d1f8      	bne.n	8007400 <_dtoa_r+0x6c0>
 800740e:	2230      	movs	r2, #48	@ 0x30
 8007410:	f108 0801 	add.w	r8, r8, #1
 8007414:	f88a 2000 	strb.w	r2, [sl]
 8007418:	781a      	ldrb	r2, [r3, #0]
 800741a:	3201      	adds	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	e7a0      	b.n	8007362 <_dtoa_r+0x622>
 8007420:	4b6f      	ldr	r3, [pc, #444]	@ (80075e0 <_dtoa_r+0x8a0>)
 8007422:	2200      	movs	r2, #0
 8007424:	f7f9 f8c0 	bl	80005a8 <__aeabi_dmul>
 8007428:	2200      	movs	r2, #0
 800742a:	2300      	movs	r3, #0
 800742c:	4604      	mov	r4, r0
 800742e:	460d      	mov	r5, r1
 8007430:	f7f9 fb22 	bl	8000a78 <__aeabi_dcmpeq>
 8007434:	2800      	cmp	r0, #0
 8007436:	d09f      	beq.n	8007378 <_dtoa_r+0x638>
 8007438:	e7d1      	b.n	80073de <_dtoa_r+0x69e>
 800743a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800743c:	2a00      	cmp	r2, #0
 800743e:	f000 80ea 	beq.w	8007616 <_dtoa_r+0x8d6>
 8007442:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007444:	2a01      	cmp	r2, #1
 8007446:	f300 80cd 	bgt.w	80075e4 <_dtoa_r+0x8a4>
 800744a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800744c:	2a00      	cmp	r2, #0
 800744e:	f000 80c1 	beq.w	80075d4 <_dtoa_r+0x894>
 8007452:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007456:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007458:	9e04      	ldr	r6, [sp, #16]
 800745a:	9a04      	ldr	r2, [sp, #16]
 800745c:	441a      	add	r2, r3
 800745e:	9204      	str	r2, [sp, #16]
 8007460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007462:	2101      	movs	r1, #1
 8007464:	441a      	add	r2, r3
 8007466:	4648      	mov	r0, r9
 8007468:	9209      	str	r2, [sp, #36]	@ 0x24
 800746a:	f000 fc2d 	bl	8007cc8 <__i2b>
 800746e:	4605      	mov	r5, r0
 8007470:	b166      	cbz	r6, 800748c <_dtoa_r+0x74c>
 8007472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007474:	2b00      	cmp	r3, #0
 8007476:	dd09      	ble.n	800748c <_dtoa_r+0x74c>
 8007478:	42b3      	cmp	r3, r6
 800747a:	9a04      	ldr	r2, [sp, #16]
 800747c:	bfa8      	it	ge
 800747e:	4633      	movge	r3, r6
 8007480:	1ad2      	subs	r2, r2, r3
 8007482:	9204      	str	r2, [sp, #16]
 8007484:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007486:	1af6      	subs	r6, r6, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	9309      	str	r3, [sp, #36]	@ 0x24
 800748c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800748e:	b30b      	cbz	r3, 80074d4 <_dtoa_r+0x794>
 8007490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80c6 	beq.w	8007624 <_dtoa_r+0x8e4>
 8007498:	2c00      	cmp	r4, #0
 800749a:	f000 80c0 	beq.w	800761e <_dtoa_r+0x8de>
 800749e:	4629      	mov	r1, r5
 80074a0:	4622      	mov	r2, r4
 80074a2:	4648      	mov	r0, r9
 80074a4:	f000 fcc8 	bl	8007e38 <__pow5mult>
 80074a8:	9a03      	ldr	r2, [sp, #12]
 80074aa:	4601      	mov	r1, r0
 80074ac:	4605      	mov	r5, r0
 80074ae:	4648      	mov	r0, r9
 80074b0:	f000 fc20 	bl	8007cf4 <__multiply>
 80074b4:	9903      	ldr	r1, [sp, #12]
 80074b6:	4680      	mov	r8, r0
 80074b8:	4648      	mov	r0, r9
 80074ba:	f000 fb51 	bl	8007b60 <_Bfree>
 80074be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074c0:	1b1b      	subs	r3, r3, r4
 80074c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074c4:	f000 80b1 	beq.w	800762a <_dtoa_r+0x8ea>
 80074c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074ca:	4641      	mov	r1, r8
 80074cc:	4648      	mov	r0, r9
 80074ce:	f000 fcb3 	bl	8007e38 <__pow5mult>
 80074d2:	9003      	str	r0, [sp, #12]
 80074d4:	2101      	movs	r1, #1
 80074d6:	4648      	mov	r0, r9
 80074d8:	f000 fbf6 	bl	8007cc8 <__i2b>
 80074dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074de:	4604      	mov	r4, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 81d8 	beq.w	8007896 <_dtoa_r+0xb56>
 80074e6:	461a      	mov	r2, r3
 80074e8:	4601      	mov	r1, r0
 80074ea:	4648      	mov	r0, r9
 80074ec:	f000 fca4 	bl	8007e38 <__pow5mult>
 80074f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	4604      	mov	r4, r0
 80074f6:	f300 809f 	bgt.w	8007638 <_dtoa_r+0x8f8>
 80074fa:	9b06      	ldr	r3, [sp, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f040 8097 	bne.w	8007630 <_dtoa_r+0x8f0>
 8007502:	9b07      	ldr	r3, [sp, #28]
 8007504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 8093 	bne.w	8007634 <_dtoa_r+0x8f4>
 800750e:	9b07      	ldr	r3, [sp, #28]
 8007510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007514:	0d1b      	lsrs	r3, r3, #20
 8007516:	051b      	lsls	r3, r3, #20
 8007518:	b133      	cbz	r3, 8007528 <_dtoa_r+0x7e8>
 800751a:	9b04      	ldr	r3, [sp, #16]
 800751c:	3301      	adds	r3, #1
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007522:	3301      	adds	r3, #1
 8007524:	9309      	str	r3, [sp, #36]	@ 0x24
 8007526:	2301      	movs	r3, #1
 8007528:	930a      	str	r3, [sp, #40]	@ 0x28
 800752a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 81b8 	beq.w	80078a2 <_dtoa_r+0xb62>
 8007532:	6923      	ldr	r3, [r4, #16]
 8007534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007538:	6918      	ldr	r0, [r3, #16]
 800753a:	f000 fb79 	bl	8007c30 <__hi0bits>
 800753e:	f1c0 0020 	rsb	r0, r0, #32
 8007542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007544:	4418      	add	r0, r3
 8007546:	f010 001f 	ands.w	r0, r0, #31
 800754a:	f000 8082 	beq.w	8007652 <_dtoa_r+0x912>
 800754e:	f1c0 0320 	rsb	r3, r0, #32
 8007552:	2b04      	cmp	r3, #4
 8007554:	dd73      	ble.n	800763e <_dtoa_r+0x8fe>
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	f1c0 001c 	rsb	r0, r0, #28
 800755c:	4403      	add	r3, r0
 800755e:	9304      	str	r3, [sp, #16]
 8007560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007562:	4403      	add	r3, r0
 8007564:	4406      	add	r6, r0
 8007566:	9309      	str	r3, [sp, #36]	@ 0x24
 8007568:	9b04      	ldr	r3, [sp, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	dd05      	ble.n	800757a <_dtoa_r+0x83a>
 800756e:	9903      	ldr	r1, [sp, #12]
 8007570:	461a      	mov	r2, r3
 8007572:	4648      	mov	r0, r9
 8007574:	f000 fcba 	bl	8007eec <__lshift>
 8007578:	9003      	str	r0, [sp, #12]
 800757a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	dd05      	ble.n	800758c <_dtoa_r+0x84c>
 8007580:	4621      	mov	r1, r4
 8007582:	461a      	mov	r2, r3
 8007584:	4648      	mov	r0, r9
 8007586:	f000 fcb1 	bl	8007eec <__lshift>
 800758a:	4604      	mov	r4, r0
 800758c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d061      	beq.n	8007656 <_dtoa_r+0x916>
 8007592:	9803      	ldr	r0, [sp, #12]
 8007594:	4621      	mov	r1, r4
 8007596:	f000 fd15 	bl	8007fc4 <__mcmp>
 800759a:	2800      	cmp	r0, #0
 800759c:	da5b      	bge.n	8007656 <_dtoa_r+0x916>
 800759e:	2300      	movs	r3, #0
 80075a0:	9903      	ldr	r1, [sp, #12]
 80075a2:	220a      	movs	r2, #10
 80075a4:	4648      	mov	r0, r9
 80075a6:	f000 fafd 	bl	8007ba4 <__multadd>
 80075aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075ac:	9003      	str	r0, [sp, #12]
 80075ae:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 8177 	beq.w	80078a6 <_dtoa_r+0xb66>
 80075b8:	4629      	mov	r1, r5
 80075ba:	2300      	movs	r3, #0
 80075bc:	220a      	movs	r2, #10
 80075be:	4648      	mov	r0, r9
 80075c0:	f000 faf0 	bl	8007ba4 <__multadd>
 80075c4:	f1bb 0f00 	cmp.w	fp, #0
 80075c8:	4605      	mov	r5, r0
 80075ca:	dc6f      	bgt.n	80076ac <_dtoa_r+0x96c>
 80075cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	dc49      	bgt.n	8007666 <_dtoa_r+0x926>
 80075d2:	e06b      	b.n	80076ac <_dtoa_r+0x96c>
 80075d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80075d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80075da:	e73c      	b.n	8007456 <_dtoa_r+0x716>
 80075dc:	3fe00000 	.word	0x3fe00000
 80075e0:	40240000 	.word	0x40240000
 80075e4:	9b08      	ldr	r3, [sp, #32]
 80075e6:	1e5c      	subs	r4, r3, #1
 80075e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	db09      	blt.n	8007602 <_dtoa_r+0x8c2>
 80075ee:	1b1c      	subs	r4, r3, r4
 80075f0:	9b08      	ldr	r3, [sp, #32]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f6bf af30 	bge.w	8007458 <_dtoa_r+0x718>
 80075f8:	9b04      	ldr	r3, [sp, #16]
 80075fa:	9a08      	ldr	r2, [sp, #32]
 80075fc:	1a9e      	subs	r6, r3, r2
 80075fe:	2300      	movs	r3, #0
 8007600:	e72b      	b.n	800745a <_dtoa_r+0x71a>
 8007602:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007604:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007606:	940a      	str	r4, [sp, #40]	@ 0x28
 8007608:	1ae3      	subs	r3, r4, r3
 800760a:	441a      	add	r2, r3
 800760c:	9e04      	ldr	r6, [sp, #16]
 800760e:	9b08      	ldr	r3, [sp, #32]
 8007610:	920e      	str	r2, [sp, #56]	@ 0x38
 8007612:	2400      	movs	r4, #0
 8007614:	e721      	b.n	800745a <_dtoa_r+0x71a>
 8007616:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007618:	9e04      	ldr	r6, [sp, #16]
 800761a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800761c:	e728      	b.n	8007470 <_dtoa_r+0x730>
 800761e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007622:	e751      	b.n	80074c8 <_dtoa_r+0x788>
 8007624:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007626:	9903      	ldr	r1, [sp, #12]
 8007628:	e750      	b.n	80074cc <_dtoa_r+0x78c>
 800762a:	f8cd 800c 	str.w	r8, [sp, #12]
 800762e:	e751      	b.n	80074d4 <_dtoa_r+0x794>
 8007630:	2300      	movs	r3, #0
 8007632:	e779      	b.n	8007528 <_dtoa_r+0x7e8>
 8007634:	9b06      	ldr	r3, [sp, #24]
 8007636:	e777      	b.n	8007528 <_dtoa_r+0x7e8>
 8007638:	2300      	movs	r3, #0
 800763a:	930a      	str	r3, [sp, #40]	@ 0x28
 800763c:	e779      	b.n	8007532 <_dtoa_r+0x7f2>
 800763e:	d093      	beq.n	8007568 <_dtoa_r+0x828>
 8007640:	9a04      	ldr	r2, [sp, #16]
 8007642:	331c      	adds	r3, #28
 8007644:	441a      	add	r2, r3
 8007646:	9204      	str	r2, [sp, #16]
 8007648:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800764a:	441a      	add	r2, r3
 800764c:	441e      	add	r6, r3
 800764e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007650:	e78a      	b.n	8007568 <_dtoa_r+0x828>
 8007652:	4603      	mov	r3, r0
 8007654:	e7f4      	b.n	8007640 <_dtoa_r+0x900>
 8007656:	9b08      	ldr	r3, [sp, #32]
 8007658:	2b00      	cmp	r3, #0
 800765a:	46b8      	mov	r8, r7
 800765c:	dc20      	bgt.n	80076a0 <_dtoa_r+0x960>
 800765e:	469b      	mov	fp, r3
 8007660:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007662:	2b02      	cmp	r3, #2
 8007664:	dd1e      	ble.n	80076a4 <_dtoa_r+0x964>
 8007666:	f1bb 0f00 	cmp.w	fp, #0
 800766a:	f47f adb1 	bne.w	80071d0 <_dtoa_r+0x490>
 800766e:	4621      	mov	r1, r4
 8007670:	465b      	mov	r3, fp
 8007672:	2205      	movs	r2, #5
 8007674:	4648      	mov	r0, r9
 8007676:	f000 fa95 	bl	8007ba4 <__multadd>
 800767a:	4601      	mov	r1, r0
 800767c:	4604      	mov	r4, r0
 800767e:	9803      	ldr	r0, [sp, #12]
 8007680:	f000 fca0 	bl	8007fc4 <__mcmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	f77f ada3 	ble.w	80071d0 <_dtoa_r+0x490>
 800768a:	4656      	mov	r6, sl
 800768c:	2331      	movs	r3, #49	@ 0x31
 800768e:	f806 3b01 	strb.w	r3, [r6], #1
 8007692:	f108 0801 	add.w	r8, r8, #1
 8007696:	e59f      	b.n	80071d8 <_dtoa_r+0x498>
 8007698:	9c08      	ldr	r4, [sp, #32]
 800769a:	46b8      	mov	r8, r7
 800769c:	4625      	mov	r5, r4
 800769e:	e7f4      	b.n	800768a <_dtoa_r+0x94a>
 80076a0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80076a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8101 	beq.w	80078ae <_dtoa_r+0xb6e>
 80076ac:	2e00      	cmp	r6, #0
 80076ae:	dd05      	ble.n	80076bc <_dtoa_r+0x97c>
 80076b0:	4629      	mov	r1, r5
 80076b2:	4632      	mov	r2, r6
 80076b4:	4648      	mov	r0, r9
 80076b6:	f000 fc19 	bl	8007eec <__lshift>
 80076ba:	4605      	mov	r5, r0
 80076bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d05c      	beq.n	800777c <_dtoa_r+0xa3c>
 80076c2:	6869      	ldr	r1, [r5, #4]
 80076c4:	4648      	mov	r0, r9
 80076c6:	f000 fa0b 	bl	8007ae0 <_Balloc>
 80076ca:	4606      	mov	r6, r0
 80076cc:	b928      	cbnz	r0, 80076da <_dtoa_r+0x99a>
 80076ce:	4b82      	ldr	r3, [pc, #520]	@ (80078d8 <_dtoa_r+0xb98>)
 80076d0:	4602      	mov	r2, r0
 80076d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80076d6:	f7ff bb47 	b.w	8006d68 <_dtoa_r+0x28>
 80076da:	692a      	ldr	r2, [r5, #16]
 80076dc:	3202      	adds	r2, #2
 80076de:	0092      	lsls	r2, r2, #2
 80076e0:	f105 010c 	add.w	r1, r5, #12
 80076e4:	300c      	adds	r0, #12
 80076e6:	f000 ffef 	bl	80086c8 <memcpy>
 80076ea:	2201      	movs	r2, #1
 80076ec:	4631      	mov	r1, r6
 80076ee:	4648      	mov	r0, r9
 80076f0:	f000 fbfc 	bl	8007eec <__lshift>
 80076f4:	f10a 0301 	add.w	r3, sl, #1
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	eb0a 030b 	add.w	r3, sl, fp
 80076fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007700:	9b06      	ldr	r3, [sp, #24]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	462f      	mov	r7, r5
 8007708:	9309      	str	r3, [sp, #36]	@ 0x24
 800770a:	4605      	mov	r5, r0
 800770c:	9b04      	ldr	r3, [sp, #16]
 800770e:	9803      	ldr	r0, [sp, #12]
 8007710:	4621      	mov	r1, r4
 8007712:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007716:	f7ff fa8a 	bl	8006c2e <quorem>
 800771a:	4603      	mov	r3, r0
 800771c:	3330      	adds	r3, #48	@ 0x30
 800771e:	9006      	str	r0, [sp, #24]
 8007720:	4639      	mov	r1, r7
 8007722:	9803      	ldr	r0, [sp, #12]
 8007724:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007726:	f000 fc4d 	bl	8007fc4 <__mcmp>
 800772a:	462a      	mov	r2, r5
 800772c:	9008      	str	r0, [sp, #32]
 800772e:	4621      	mov	r1, r4
 8007730:	4648      	mov	r0, r9
 8007732:	f000 fc63 	bl	8007ffc <__mdiff>
 8007736:	68c2      	ldr	r2, [r0, #12]
 8007738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800773a:	4606      	mov	r6, r0
 800773c:	bb02      	cbnz	r2, 8007780 <_dtoa_r+0xa40>
 800773e:	4601      	mov	r1, r0
 8007740:	9803      	ldr	r0, [sp, #12]
 8007742:	f000 fc3f 	bl	8007fc4 <__mcmp>
 8007746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007748:	4602      	mov	r2, r0
 800774a:	4631      	mov	r1, r6
 800774c:	4648      	mov	r0, r9
 800774e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007752:	f000 fa05 	bl	8007b60 <_Bfree>
 8007756:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007758:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800775a:	9e04      	ldr	r6, [sp, #16]
 800775c:	ea42 0103 	orr.w	r1, r2, r3
 8007760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007762:	4319      	orrs	r1, r3
 8007764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007766:	d10d      	bne.n	8007784 <_dtoa_r+0xa44>
 8007768:	2b39      	cmp	r3, #57	@ 0x39
 800776a:	d027      	beq.n	80077bc <_dtoa_r+0xa7c>
 800776c:	9a08      	ldr	r2, [sp, #32]
 800776e:	2a00      	cmp	r2, #0
 8007770:	dd01      	ble.n	8007776 <_dtoa_r+0xa36>
 8007772:	9b06      	ldr	r3, [sp, #24]
 8007774:	3331      	adds	r3, #49	@ 0x31
 8007776:	f88b 3000 	strb.w	r3, [fp]
 800777a:	e52e      	b.n	80071da <_dtoa_r+0x49a>
 800777c:	4628      	mov	r0, r5
 800777e:	e7b9      	b.n	80076f4 <_dtoa_r+0x9b4>
 8007780:	2201      	movs	r2, #1
 8007782:	e7e2      	b.n	800774a <_dtoa_r+0xa0a>
 8007784:	9908      	ldr	r1, [sp, #32]
 8007786:	2900      	cmp	r1, #0
 8007788:	db04      	blt.n	8007794 <_dtoa_r+0xa54>
 800778a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800778c:	4301      	orrs	r1, r0
 800778e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007790:	4301      	orrs	r1, r0
 8007792:	d120      	bne.n	80077d6 <_dtoa_r+0xa96>
 8007794:	2a00      	cmp	r2, #0
 8007796:	ddee      	ble.n	8007776 <_dtoa_r+0xa36>
 8007798:	9903      	ldr	r1, [sp, #12]
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	2201      	movs	r2, #1
 800779e:	4648      	mov	r0, r9
 80077a0:	f000 fba4 	bl	8007eec <__lshift>
 80077a4:	4621      	mov	r1, r4
 80077a6:	9003      	str	r0, [sp, #12]
 80077a8:	f000 fc0c 	bl	8007fc4 <__mcmp>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	dc02      	bgt.n	80077b8 <_dtoa_r+0xa78>
 80077b2:	d1e0      	bne.n	8007776 <_dtoa_r+0xa36>
 80077b4:	07da      	lsls	r2, r3, #31
 80077b6:	d5de      	bpl.n	8007776 <_dtoa_r+0xa36>
 80077b8:	2b39      	cmp	r3, #57	@ 0x39
 80077ba:	d1da      	bne.n	8007772 <_dtoa_r+0xa32>
 80077bc:	2339      	movs	r3, #57	@ 0x39
 80077be:	f88b 3000 	strb.w	r3, [fp]
 80077c2:	4633      	mov	r3, r6
 80077c4:	461e      	mov	r6, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80077cc:	2a39      	cmp	r2, #57	@ 0x39
 80077ce:	d04e      	beq.n	800786e <_dtoa_r+0xb2e>
 80077d0:	3201      	adds	r2, #1
 80077d2:	701a      	strb	r2, [r3, #0]
 80077d4:	e501      	b.n	80071da <_dtoa_r+0x49a>
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	dd03      	ble.n	80077e2 <_dtoa_r+0xaa2>
 80077da:	2b39      	cmp	r3, #57	@ 0x39
 80077dc:	d0ee      	beq.n	80077bc <_dtoa_r+0xa7c>
 80077de:	3301      	adds	r3, #1
 80077e0:	e7c9      	b.n	8007776 <_dtoa_r+0xa36>
 80077e2:	9a04      	ldr	r2, [sp, #16]
 80077e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80077ea:	428a      	cmp	r2, r1
 80077ec:	d028      	beq.n	8007840 <_dtoa_r+0xb00>
 80077ee:	9903      	ldr	r1, [sp, #12]
 80077f0:	2300      	movs	r3, #0
 80077f2:	220a      	movs	r2, #10
 80077f4:	4648      	mov	r0, r9
 80077f6:	f000 f9d5 	bl	8007ba4 <__multadd>
 80077fa:	42af      	cmp	r7, r5
 80077fc:	9003      	str	r0, [sp, #12]
 80077fe:	f04f 0300 	mov.w	r3, #0
 8007802:	f04f 020a 	mov.w	r2, #10
 8007806:	4639      	mov	r1, r7
 8007808:	4648      	mov	r0, r9
 800780a:	d107      	bne.n	800781c <_dtoa_r+0xadc>
 800780c:	f000 f9ca 	bl	8007ba4 <__multadd>
 8007810:	4607      	mov	r7, r0
 8007812:	4605      	mov	r5, r0
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	3301      	adds	r3, #1
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	e777      	b.n	800770c <_dtoa_r+0x9cc>
 800781c:	f000 f9c2 	bl	8007ba4 <__multadd>
 8007820:	4629      	mov	r1, r5
 8007822:	4607      	mov	r7, r0
 8007824:	2300      	movs	r3, #0
 8007826:	220a      	movs	r2, #10
 8007828:	4648      	mov	r0, r9
 800782a:	f000 f9bb 	bl	8007ba4 <__multadd>
 800782e:	4605      	mov	r5, r0
 8007830:	e7f0      	b.n	8007814 <_dtoa_r+0xad4>
 8007832:	f1bb 0f00 	cmp.w	fp, #0
 8007836:	bfcc      	ite	gt
 8007838:	465e      	movgt	r6, fp
 800783a:	2601      	movle	r6, #1
 800783c:	4456      	add	r6, sl
 800783e:	2700      	movs	r7, #0
 8007840:	9903      	ldr	r1, [sp, #12]
 8007842:	9304      	str	r3, [sp, #16]
 8007844:	2201      	movs	r2, #1
 8007846:	4648      	mov	r0, r9
 8007848:	f000 fb50 	bl	8007eec <__lshift>
 800784c:	4621      	mov	r1, r4
 800784e:	9003      	str	r0, [sp, #12]
 8007850:	f000 fbb8 	bl	8007fc4 <__mcmp>
 8007854:	2800      	cmp	r0, #0
 8007856:	dcb4      	bgt.n	80077c2 <_dtoa_r+0xa82>
 8007858:	d102      	bne.n	8007860 <_dtoa_r+0xb20>
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	07db      	lsls	r3, r3, #31
 800785e:	d4b0      	bmi.n	80077c2 <_dtoa_r+0xa82>
 8007860:	4633      	mov	r3, r6
 8007862:	461e      	mov	r6, r3
 8007864:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007868:	2a30      	cmp	r2, #48	@ 0x30
 800786a:	d0fa      	beq.n	8007862 <_dtoa_r+0xb22>
 800786c:	e4b5      	b.n	80071da <_dtoa_r+0x49a>
 800786e:	459a      	cmp	sl, r3
 8007870:	d1a8      	bne.n	80077c4 <_dtoa_r+0xa84>
 8007872:	2331      	movs	r3, #49	@ 0x31
 8007874:	f108 0801 	add.w	r8, r8, #1
 8007878:	f88a 3000 	strb.w	r3, [sl]
 800787c:	e4ad      	b.n	80071da <_dtoa_r+0x49a>
 800787e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007880:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80078dc <_dtoa_r+0xb9c>
 8007884:	b11b      	cbz	r3, 800788e <_dtoa_r+0xb4e>
 8007886:	f10a 0308 	add.w	r3, sl, #8
 800788a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	4650      	mov	r0, sl
 8007890:	b017      	add	sp, #92	@ 0x5c
 8007892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007896:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007898:	2b01      	cmp	r3, #1
 800789a:	f77f ae2e 	ble.w	80074fa <_dtoa_r+0x7ba>
 800789e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078a2:	2001      	movs	r0, #1
 80078a4:	e64d      	b.n	8007542 <_dtoa_r+0x802>
 80078a6:	f1bb 0f00 	cmp.w	fp, #0
 80078aa:	f77f aed9 	ble.w	8007660 <_dtoa_r+0x920>
 80078ae:	4656      	mov	r6, sl
 80078b0:	9803      	ldr	r0, [sp, #12]
 80078b2:	4621      	mov	r1, r4
 80078b4:	f7ff f9bb 	bl	8006c2e <quorem>
 80078b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80078bc:	f806 3b01 	strb.w	r3, [r6], #1
 80078c0:	eba6 020a 	sub.w	r2, r6, sl
 80078c4:	4593      	cmp	fp, r2
 80078c6:	ddb4      	ble.n	8007832 <_dtoa_r+0xaf2>
 80078c8:	9903      	ldr	r1, [sp, #12]
 80078ca:	2300      	movs	r3, #0
 80078cc:	220a      	movs	r2, #10
 80078ce:	4648      	mov	r0, r9
 80078d0:	f000 f968 	bl	8007ba4 <__multadd>
 80078d4:	9003      	str	r0, [sp, #12]
 80078d6:	e7eb      	b.n	80078b0 <_dtoa_r+0xb70>
 80078d8:	08008c4c 	.word	0x08008c4c
 80078dc:	08008bd0 	.word	0x08008bd0

080078e0 <_free_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4605      	mov	r5, r0
 80078e4:	2900      	cmp	r1, #0
 80078e6:	d041      	beq.n	800796c <_free_r+0x8c>
 80078e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ec:	1f0c      	subs	r4, r1, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bfb8      	it	lt
 80078f2:	18e4      	addlt	r4, r4, r3
 80078f4:	f000 f8e8 	bl	8007ac8 <__malloc_lock>
 80078f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007970 <_free_r+0x90>)
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	b933      	cbnz	r3, 800790c <_free_r+0x2c>
 80078fe:	6063      	str	r3, [r4, #4]
 8007900:	6014      	str	r4, [r2, #0]
 8007902:	4628      	mov	r0, r5
 8007904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007908:	f000 b8e4 	b.w	8007ad4 <__malloc_unlock>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d908      	bls.n	8007922 <_free_r+0x42>
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	1821      	adds	r1, r4, r0
 8007914:	428b      	cmp	r3, r1
 8007916:	bf01      	itttt	eq
 8007918:	6819      	ldreq	r1, [r3, #0]
 800791a:	685b      	ldreq	r3, [r3, #4]
 800791c:	1809      	addeq	r1, r1, r0
 800791e:	6021      	streq	r1, [r4, #0]
 8007920:	e7ed      	b.n	80078fe <_free_r+0x1e>
 8007922:	461a      	mov	r2, r3
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	b10b      	cbz	r3, 800792c <_free_r+0x4c>
 8007928:	42a3      	cmp	r3, r4
 800792a:	d9fa      	bls.n	8007922 <_free_r+0x42>
 800792c:	6811      	ldr	r1, [r2, #0]
 800792e:	1850      	adds	r0, r2, r1
 8007930:	42a0      	cmp	r0, r4
 8007932:	d10b      	bne.n	800794c <_free_r+0x6c>
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	4401      	add	r1, r0
 8007938:	1850      	adds	r0, r2, r1
 800793a:	4283      	cmp	r3, r0
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	d1e0      	bne.n	8007902 <_free_r+0x22>
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	6053      	str	r3, [r2, #4]
 8007946:	4408      	add	r0, r1
 8007948:	6010      	str	r0, [r2, #0]
 800794a:	e7da      	b.n	8007902 <_free_r+0x22>
 800794c:	d902      	bls.n	8007954 <_free_r+0x74>
 800794e:	230c      	movs	r3, #12
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	e7d6      	b.n	8007902 <_free_r+0x22>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	1821      	adds	r1, r4, r0
 8007958:	428b      	cmp	r3, r1
 800795a:	bf04      	itt	eq
 800795c:	6819      	ldreq	r1, [r3, #0]
 800795e:	685b      	ldreq	r3, [r3, #4]
 8007960:	6063      	str	r3, [r4, #4]
 8007962:	bf04      	itt	eq
 8007964:	1809      	addeq	r1, r1, r0
 8007966:	6021      	streq	r1, [r4, #0]
 8007968:	6054      	str	r4, [r2, #4]
 800796a:	e7ca      	b.n	8007902 <_free_r+0x22>
 800796c:	bd38      	pop	{r3, r4, r5, pc}
 800796e:	bf00      	nop
 8007970:	200004fc 	.word	0x200004fc

08007974 <malloc>:
 8007974:	4b02      	ldr	r3, [pc, #8]	@ (8007980 <malloc+0xc>)
 8007976:	4601      	mov	r1, r0
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f000 b825 	b.w	80079c8 <_malloc_r>
 800797e:	bf00      	nop
 8007980:	20000024 	.word	0x20000024

08007984 <sbrk_aligned>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	4e0f      	ldr	r6, [pc, #60]	@ (80079c4 <sbrk_aligned+0x40>)
 8007988:	460c      	mov	r4, r1
 800798a:	6831      	ldr	r1, [r6, #0]
 800798c:	4605      	mov	r5, r0
 800798e:	b911      	cbnz	r1, 8007996 <sbrk_aligned+0x12>
 8007990:	f000 fe8a 	bl	80086a8 <_sbrk_r>
 8007994:	6030      	str	r0, [r6, #0]
 8007996:	4621      	mov	r1, r4
 8007998:	4628      	mov	r0, r5
 800799a:	f000 fe85 	bl	80086a8 <_sbrk_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d103      	bne.n	80079aa <sbrk_aligned+0x26>
 80079a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80079a6:	4620      	mov	r0, r4
 80079a8:	bd70      	pop	{r4, r5, r6, pc}
 80079aa:	1cc4      	adds	r4, r0, #3
 80079ac:	f024 0403 	bic.w	r4, r4, #3
 80079b0:	42a0      	cmp	r0, r4
 80079b2:	d0f8      	beq.n	80079a6 <sbrk_aligned+0x22>
 80079b4:	1a21      	subs	r1, r4, r0
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 fe76 	bl	80086a8 <_sbrk_r>
 80079bc:	3001      	adds	r0, #1
 80079be:	d1f2      	bne.n	80079a6 <sbrk_aligned+0x22>
 80079c0:	e7ef      	b.n	80079a2 <sbrk_aligned+0x1e>
 80079c2:	bf00      	nop
 80079c4:	200004f8 	.word	0x200004f8

080079c8 <_malloc_r>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	1ccd      	adds	r5, r1, #3
 80079ce:	f025 0503 	bic.w	r5, r5, #3
 80079d2:	3508      	adds	r5, #8
 80079d4:	2d0c      	cmp	r5, #12
 80079d6:	bf38      	it	cc
 80079d8:	250c      	movcc	r5, #12
 80079da:	2d00      	cmp	r5, #0
 80079dc:	4606      	mov	r6, r0
 80079de:	db01      	blt.n	80079e4 <_malloc_r+0x1c>
 80079e0:	42a9      	cmp	r1, r5
 80079e2:	d904      	bls.n	80079ee <_malloc_r+0x26>
 80079e4:	230c      	movs	r3, #12
 80079e6:	6033      	str	r3, [r6, #0]
 80079e8:	2000      	movs	r0, #0
 80079ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ac4 <_malloc_r+0xfc>
 80079f2:	f000 f869 	bl	8007ac8 <__malloc_lock>
 80079f6:	f8d8 3000 	ldr.w	r3, [r8]
 80079fa:	461c      	mov	r4, r3
 80079fc:	bb44      	cbnz	r4, 8007a50 <_malloc_r+0x88>
 80079fe:	4629      	mov	r1, r5
 8007a00:	4630      	mov	r0, r6
 8007a02:	f7ff ffbf 	bl	8007984 <sbrk_aligned>
 8007a06:	1c43      	adds	r3, r0, #1
 8007a08:	4604      	mov	r4, r0
 8007a0a:	d158      	bne.n	8007abe <_malloc_r+0xf6>
 8007a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8007a10:	4627      	mov	r7, r4
 8007a12:	2f00      	cmp	r7, #0
 8007a14:	d143      	bne.n	8007a9e <_malloc_r+0xd6>
 8007a16:	2c00      	cmp	r4, #0
 8007a18:	d04b      	beq.n	8007ab2 <_malloc_r+0xea>
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	4630      	mov	r0, r6
 8007a20:	eb04 0903 	add.w	r9, r4, r3
 8007a24:	f000 fe40 	bl	80086a8 <_sbrk_r>
 8007a28:	4581      	cmp	r9, r0
 8007a2a:	d142      	bne.n	8007ab2 <_malloc_r+0xea>
 8007a2c:	6821      	ldr	r1, [r4, #0]
 8007a2e:	1a6d      	subs	r5, r5, r1
 8007a30:	4629      	mov	r1, r5
 8007a32:	4630      	mov	r0, r6
 8007a34:	f7ff ffa6 	bl	8007984 <sbrk_aligned>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d03a      	beq.n	8007ab2 <_malloc_r+0xea>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	442b      	add	r3, r5
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	f8d8 3000 	ldr.w	r3, [r8]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	bb62      	cbnz	r2, 8007aa4 <_malloc_r+0xdc>
 8007a4a:	f8c8 7000 	str.w	r7, [r8]
 8007a4e:	e00f      	b.n	8007a70 <_malloc_r+0xa8>
 8007a50:	6822      	ldr	r2, [r4, #0]
 8007a52:	1b52      	subs	r2, r2, r5
 8007a54:	d420      	bmi.n	8007a98 <_malloc_r+0xd0>
 8007a56:	2a0b      	cmp	r2, #11
 8007a58:	d917      	bls.n	8007a8a <_malloc_r+0xc2>
 8007a5a:	1961      	adds	r1, r4, r5
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	6025      	str	r5, [r4, #0]
 8007a60:	bf18      	it	ne
 8007a62:	6059      	strne	r1, [r3, #4]
 8007a64:	6863      	ldr	r3, [r4, #4]
 8007a66:	bf08      	it	eq
 8007a68:	f8c8 1000 	streq.w	r1, [r8]
 8007a6c:	5162      	str	r2, [r4, r5]
 8007a6e:	604b      	str	r3, [r1, #4]
 8007a70:	4630      	mov	r0, r6
 8007a72:	f000 f82f 	bl	8007ad4 <__malloc_unlock>
 8007a76:	f104 000b 	add.w	r0, r4, #11
 8007a7a:	1d23      	adds	r3, r4, #4
 8007a7c:	f020 0007 	bic.w	r0, r0, #7
 8007a80:	1ac2      	subs	r2, r0, r3
 8007a82:	bf1c      	itt	ne
 8007a84:	1a1b      	subne	r3, r3, r0
 8007a86:	50a3      	strne	r3, [r4, r2]
 8007a88:	e7af      	b.n	80079ea <_malloc_r+0x22>
 8007a8a:	6862      	ldr	r2, [r4, #4]
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	bf0c      	ite	eq
 8007a90:	f8c8 2000 	streq.w	r2, [r8]
 8007a94:	605a      	strne	r2, [r3, #4]
 8007a96:	e7eb      	b.n	8007a70 <_malloc_r+0xa8>
 8007a98:	4623      	mov	r3, r4
 8007a9a:	6864      	ldr	r4, [r4, #4]
 8007a9c:	e7ae      	b.n	80079fc <_malloc_r+0x34>
 8007a9e:	463c      	mov	r4, r7
 8007aa0:	687f      	ldr	r7, [r7, #4]
 8007aa2:	e7b6      	b.n	8007a12 <_malloc_r+0x4a>
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d1fb      	bne.n	8007aa4 <_malloc_r+0xdc>
 8007aac:	2300      	movs	r3, #0
 8007aae:	6053      	str	r3, [r2, #4]
 8007ab0:	e7de      	b.n	8007a70 <_malloc_r+0xa8>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	6033      	str	r3, [r6, #0]
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f000 f80c 	bl	8007ad4 <__malloc_unlock>
 8007abc:	e794      	b.n	80079e8 <_malloc_r+0x20>
 8007abe:	6005      	str	r5, [r0, #0]
 8007ac0:	e7d6      	b.n	8007a70 <_malloc_r+0xa8>
 8007ac2:	bf00      	nop
 8007ac4:	200004fc 	.word	0x200004fc

08007ac8 <__malloc_lock>:
 8007ac8:	4801      	ldr	r0, [pc, #4]	@ (8007ad0 <__malloc_lock+0x8>)
 8007aca:	f7ff b8ae 	b.w	8006c2a <__retarget_lock_acquire_recursive>
 8007ace:	bf00      	nop
 8007ad0:	200004f4 	.word	0x200004f4

08007ad4 <__malloc_unlock>:
 8007ad4:	4801      	ldr	r0, [pc, #4]	@ (8007adc <__malloc_unlock+0x8>)
 8007ad6:	f7ff b8a9 	b.w	8006c2c <__retarget_lock_release_recursive>
 8007ada:	bf00      	nop
 8007adc:	200004f4 	.word	0x200004f4

08007ae0 <_Balloc>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	69c6      	ldr	r6, [r0, #28]
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	b976      	cbnz	r6, 8007b08 <_Balloc+0x28>
 8007aea:	2010      	movs	r0, #16
 8007aec:	f7ff ff42 	bl	8007974 <malloc>
 8007af0:	4602      	mov	r2, r0
 8007af2:	61e0      	str	r0, [r4, #28]
 8007af4:	b920      	cbnz	r0, 8007b00 <_Balloc+0x20>
 8007af6:	4b18      	ldr	r3, [pc, #96]	@ (8007b58 <_Balloc+0x78>)
 8007af8:	4818      	ldr	r0, [pc, #96]	@ (8007b5c <_Balloc+0x7c>)
 8007afa:	216b      	movs	r1, #107	@ 0x6b
 8007afc:	f000 fdf2 	bl	80086e4 <__assert_func>
 8007b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b04:	6006      	str	r6, [r0, #0]
 8007b06:	60c6      	str	r6, [r0, #12]
 8007b08:	69e6      	ldr	r6, [r4, #28]
 8007b0a:	68f3      	ldr	r3, [r6, #12]
 8007b0c:	b183      	cbz	r3, 8007b30 <_Balloc+0x50>
 8007b0e:	69e3      	ldr	r3, [r4, #28]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b16:	b9b8      	cbnz	r0, 8007b48 <_Balloc+0x68>
 8007b18:	2101      	movs	r1, #1
 8007b1a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b1e:	1d72      	adds	r2, r6, #5
 8007b20:	0092      	lsls	r2, r2, #2
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fdfc 	bl	8008720 <_calloc_r>
 8007b28:	b160      	cbz	r0, 8007b44 <_Balloc+0x64>
 8007b2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b2e:	e00e      	b.n	8007b4e <_Balloc+0x6e>
 8007b30:	2221      	movs	r2, #33	@ 0x21
 8007b32:	2104      	movs	r1, #4
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 fdf3 	bl	8008720 <_calloc_r>
 8007b3a:	69e3      	ldr	r3, [r4, #28]
 8007b3c:	60f0      	str	r0, [r6, #12]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e4      	bne.n	8007b0e <_Balloc+0x2e>
 8007b44:	2000      	movs	r0, #0
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	6802      	ldr	r2, [r0, #0]
 8007b4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b54:	e7f7      	b.n	8007b46 <_Balloc+0x66>
 8007b56:	bf00      	nop
 8007b58:	08008bdd 	.word	0x08008bdd
 8007b5c:	08008c5d 	.word	0x08008c5d

08007b60 <_Bfree>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	69c6      	ldr	r6, [r0, #28]
 8007b64:	4605      	mov	r5, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	b976      	cbnz	r6, 8007b88 <_Bfree+0x28>
 8007b6a:	2010      	movs	r0, #16
 8007b6c:	f7ff ff02 	bl	8007974 <malloc>
 8007b70:	4602      	mov	r2, r0
 8007b72:	61e8      	str	r0, [r5, #28]
 8007b74:	b920      	cbnz	r0, 8007b80 <_Bfree+0x20>
 8007b76:	4b09      	ldr	r3, [pc, #36]	@ (8007b9c <_Bfree+0x3c>)
 8007b78:	4809      	ldr	r0, [pc, #36]	@ (8007ba0 <_Bfree+0x40>)
 8007b7a:	218f      	movs	r1, #143	@ 0x8f
 8007b7c:	f000 fdb2 	bl	80086e4 <__assert_func>
 8007b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b84:	6006      	str	r6, [r0, #0]
 8007b86:	60c6      	str	r6, [r0, #12]
 8007b88:	b13c      	cbz	r4, 8007b9a <_Bfree+0x3a>
 8007b8a:	69eb      	ldr	r3, [r5, #28]
 8007b8c:	6862      	ldr	r2, [r4, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b94:	6021      	str	r1, [r4, #0]
 8007b96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
 8007b9c:	08008bdd 	.word	0x08008bdd
 8007ba0:	08008c5d 	.word	0x08008c5d

08007ba4 <__multadd>:
 8007ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba8:	690d      	ldr	r5, [r1, #16]
 8007baa:	4607      	mov	r7, r0
 8007bac:	460c      	mov	r4, r1
 8007bae:	461e      	mov	r6, r3
 8007bb0:	f101 0c14 	add.w	ip, r1, #20
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f8dc 3000 	ldr.w	r3, [ip]
 8007bba:	b299      	uxth	r1, r3
 8007bbc:	fb02 6101 	mla	r1, r2, r1, r6
 8007bc0:	0c1e      	lsrs	r6, r3, #16
 8007bc2:	0c0b      	lsrs	r3, r1, #16
 8007bc4:	fb02 3306 	mla	r3, r2, r6, r3
 8007bc8:	b289      	uxth	r1, r1
 8007bca:	3001      	adds	r0, #1
 8007bcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007bd0:	4285      	cmp	r5, r0
 8007bd2:	f84c 1b04 	str.w	r1, [ip], #4
 8007bd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007bda:	dcec      	bgt.n	8007bb6 <__multadd+0x12>
 8007bdc:	b30e      	cbz	r6, 8007c22 <__multadd+0x7e>
 8007bde:	68a3      	ldr	r3, [r4, #8]
 8007be0:	42ab      	cmp	r3, r5
 8007be2:	dc19      	bgt.n	8007c18 <__multadd+0x74>
 8007be4:	6861      	ldr	r1, [r4, #4]
 8007be6:	4638      	mov	r0, r7
 8007be8:	3101      	adds	r1, #1
 8007bea:	f7ff ff79 	bl	8007ae0 <_Balloc>
 8007bee:	4680      	mov	r8, r0
 8007bf0:	b928      	cbnz	r0, 8007bfe <__multadd+0x5a>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c28 <__multadd+0x84>)
 8007bf6:	480d      	ldr	r0, [pc, #52]	@ (8007c2c <__multadd+0x88>)
 8007bf8:	21ba      	movs	r1, #186	@ 0xba
 8007bfa:	f000 fd73 	bl	80086e4 <__assert_func>
 8007bfe:	6922      	ldr	r2, [r4, #16]
 8007c00:	3202      	adds	r2, #2
 8007c02:	f104 010c 	add.w	r1, r4, #12
 8007c06:	0092      	lsls	r2, r2, #2
 8007c08:	300c      	adds	r0, #12
 8007c0a:	f000 fd5d 	bl	80086c8 <memcpy>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7ff ffa5 	bl	8007b60 <_Bfree>
 8007c16:	4644      	mov	r4, r8
 8007c18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	615e      	str	r6, [r3, #20]
 8007c20:	6125      	str	r5, [r4, #16]
 8007c22:	4620      	mov	r0, r4
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	08008c4c 	.word	0x08008c4c
 8007c2c:	08008c5d 	.word	0x08008c5d

08007c30 <__hi0bits>:
 8007c30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c34:	4603      	mov	r3, r0
 8007c36:	bf36      	itet	cc
 8007c38:	0403      	lslcc	r3, r0, #16
 8007c3a:	2000      	movcs	r0, #0
 8007c3c:	2010      	movcc	r0, #16
 8007c3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c42:	bf3c      	itt	cc
 8007c44:	021b      	lslcc	r3, r3, #8
 8007c46:	3008      	addcc	r0, #8
 8007c48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c4c:	bf3c      	itt	cc
 8007c4e:	011b      	lslcc	r3, r3, #4
 8007c50:	3004      	addcc	r0, #4
 8007c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c56:	bf3c      	itt	cc
 8007c58:	009b      	lslcc	r3, r3, #2
 8007c5a:	3002      	addcc	r0, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	db05      	blt.n	8007c6c <__hi0bits+0x3c>
 8007c60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c64:	f100 0001 	add.w	r0, r0, #1
 8007c68:	bf08      	it	eq
 8007c6a:	2020      	moveq	r0, #32
 8007c6c:	4770      	bx	lr

08007c6e <__lo0bits>:
 8007c6e:	6803      	ldr	r3, [r0, #0]
 8007c70:	4602      	mov	r2, r0
 8007c72:	f013 0007 	ands.w	r0, r3, #7
 8007c76:	d00b      	beq.n	8007c90 <__lo0bits+0x22>
 8007c78:	07d9      	lsls	r1, r3, #31
 8007c7a:	d421      	bmi.n	8007cc0 <__lo0bits+0x52>
 8007c7c:	0798      	lsls	r0, r3, #30
 8007c7e:	bf49      	itett	mi
 8007c80:	085b      	lsrmi	r3, r3, #1
 8007c82:	089b      	lsrpl	r3, r3, #2
 8007c84:	2001      	movmi	r0, #1
 8007c86:	6013      	strmi	r3, [r2, #0]
 8007c88:	bf5c      	itt	pl
 8007c8a:	6013      	strpl	r3, [r2, #0]
 8007c8c:	2002      	movpl	r0, #2
 8007c8e:	4770      	bx	lr
 8007c90:	b299      	uxth	r1, r3
 8007c92:	b909      	cbnz	r1, 8007c98 <__lo0bits+0x2a>
 8007c94:	0c1b      	lsrs	r3, r3, #16
 8007c96:	2010      	movs	r0, #16
 8007c98:	b2d9      	uxtb	r1, r3
 8007c9a:	b909      	cbnz	r1, 8007ca0 <__lo0bits+0x32>
 8007c9c:	3008      	adds	r0, #8
 8007c9e:	0a1b      	lsrs	r3, r3, #8
 8007ca0:	0719      	lsls	r1, r3, #28
 8007ca2:	bf04      	itt	eq
 8007ca4:	091b      	lsreq	r3, r3, #4
 8007ca6:	3004      	addeq	r0, #4
 8007ca8:	0799      	lsls	r1, r3, #30
 8007caa:	bf04      	itt	eq
 8007cac:	089b      	lsreq	r3, r3, #2
 8007cae:	3002      	addeq	r0, #2
 8007cb0:	07d9      	lsls	r1, r3, #31
 8007cb2:	d403      	bmi.n	8007cbc <__lo0bits+0x4e>
 8007cb4:	085b      	lsrs	r3, r3, #1
 8007cb6:	f100 0001 	add.w	r0, r0, #1
 8007cba:	d003      	beq.n	8007cc4 <__lo0bits+0x56>
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	4770      	bx	lr
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	4770      	bx	lr
 8007cc4:	2020      	movs	r0, #32
 8007cc6:	4770      	bx	lr

08007cc8 <__i2b>:
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	460c      	mov	r4, r1
 8007ccc:	2101      	movs	r1, #1
 8007cce:	f7ff ff07 	bl	8007ae0 <_Balloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	b928      	cbnz	r0, 8007ce2 <__i2b+0x1a>
 8007cd6:	4b05      	ldr	r3, [pc, #20]	@ (8007cec <__i2b+0x24>)
 8007cd8:	4805      	ldr	r0, [pc, #20]	@ (8007cf0 <__i2b+0x28>)
 8007cda:	f240 1145 	movw	r1, #325	@ 0x145
 8007cde:	f000 fd01 	bl	80086e4 <__assert_func>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	6144      	str	r4, [r0, #20]
 8007ce6:	6103      	str	r3, [r0, #16]
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	bf00      	nop
 8007cec:	08008c4c 	.word	0x08008c4c
 8007cf0:	08008c5d 	.word	0x08008c5d

08007cf4 <__multiply>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	4617      	mov	r7, r2
 8007cfa:	690a      	ldr	r2, [r1, #16]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	bfa8      	it	ge
 8007d02:	463b      	movge	r3, r7
 8007d04:	4689      	mov	r9, r1
 8007d06:	bfa4      	itt	ge
 8007d08:	460f      	movge	r7, r1
 8007d0a:	4699      	movge	r9, r3
 8007d0c:	693d      	ldr	r5, [r7, #16]
 8007d0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	eb05 060a 	add.w	r6, r5, sl
 8007d1a:	42b3      	cmp	r3, r6
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	bfb8      	it	lt
 8007d20:	3101      	addlt	r1, #1
 8007d22:	f7ff fedd 	bl	8007ae0 <_Balloc>
 8007d26:	b930      	cbnz	r0, 8007d36 <__multiply+0x42>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	4b41      	ldr	r3, [pc, #260]	@ (8007e30 <__multiply+0x13c>)
 8007d2c:	4841      	ldr	r0, [pc, #260]	@ (8007e34 <__multiply+0x140>)
 8007d2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d32:	f000 fcd7 	bl	80086e4 <__assert_func>
 8007d36:	f100 0414 	add.w	r4, r0, #20
 8007d3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007d3e:	4623      	mov	r3, r4
 8007d40:	2200      	movs	r2, #0
 8007d42:	4573      	cmp	r3, lr
 8007d44:	d320      	bcc.n	8007d88 <__multiply+0x94>
 8007d46:	f107 0814 	add.w	r8, r7, #20
 8007d4a:	f109 0114 	add.w	r1, r9, #20
 8007d4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007d52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007d56:	9302      	str	r3, [sp, #8]
 8007d58:	1beb      	subs	r3, r5, r7
 8007d5a:	3b15      	subs	r3, #21
 8007d5c:	f023 0303 	bic.w	r3, r3, #3
 8007d60:	3304      	adds	r3, #4
 8007d62:	3715      	adds	r7, #21
 8007d64:	42bd      	cmp	r5, r7
 8007d66:	bf38      	it	cc
 8007d68:	2304      	movcc	r3, #4
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	9b02      	ldr	r3, [sp, #8]
 8007d6e:	9103      	str	r1, [sp, #12]
 8007d70:	428b      	cmp	r3, r1
 8007d72:	d80c      	bhi.n	8007d8e <__multiply+0x9a>
 8007d74:	2e00      	cmp	r6, #0
 8007d76:	dd03      	ble.n	8007d80 <__multiply+0x8c>
 8007d78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d055      	beq.n	8007e2c <__multiply+0x138>
 8007d80:	6106      	str	r6, [r0, #16]
 8007d82:	b005      	add	sp, #20
 8007d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d88:	f843 2b04 	str.w	r2, [r3], #4
 8007d8c:	e7d9      	b.n	8007d42 <__multiply+0x4e>
 8007d8e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d92:	f1ba 0f00 	cmp.w	sl, #0
 8007d96:	d01f      	beq.n	8007dd8 <__multiply+0xe4>
 8007d98:	46c4      	mov	ip, r8
 8007d9a:	46a1      	mov	r9, r4
 8007d9c:	2700      	movs	r7, #0
 8007d9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007da2:	f8d9 3000 	ldr.w	r3, [r9]
 8007da6:	fa1f fb82 	uxth.w	fp, r2
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	fb0a 330b 	mla	r3, sl, fp, r3
 8007db0:	443b      	add	r3, r7
 8007db2:	f8d9 7000 	ldr.w	r7, [r9]
 8007db6:	0c12      	lsrs	r2, r2, #16
 8007db8:	0c3f      	lsrs	r7, r7, #16
 8007dba:	fb0a 7202 	mla	r2, sl, r2, r7
 8007dbe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dc8:	4565      	cmp	r5, ip
 8007dca:	f849 3b04 	str.w	r3, [r9], #4
 8007dce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007dd2:	d8e4      	bhi.n	8007d9e <__multiply+0xaa>
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	50e7      	str	r7, [r4, r3]
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007dde:	3104      	adds	r1, #4
 8007de0:	f1b9 0f00 	cmp.w	r9, #0
 8007de4:	d020      	beq.n	8007e28 <__multiply+0x134>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	4647      	mov	r7, r8
 8007dea:	46a4      	mov	ip, r4
 8007dec:	f04f 0a00 	mov.w	sl, #0
 8007df0:	f8b7 b000 	ldrh.w	fp, [r7]
 8007df4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007df8:	fb09 220b 	mla	r2, r9, fp, r2
 8007dfc:	4452      	add	r2, sl
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e04:	f84c 3b04 	str.w	r3, [ip], #4
 8007e08:	f857 3b04 	ldr.w	r3, [r7], #4
 8007e0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e10:	f8bc 3000 	ldrh.w	r3, [ip]
 8007e14:	fb09 330a 	mla	r3, r9, sl, r3
 8007e18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007e1c:	42bd      	cmp	r5, r7
 8007e1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e22:	d8e5      	bhi.n	8007df0 <__multiply+0xfc>
 8007e24:	9a01      	ldr	r2, [sp, #4]
 8007e26:	50a3      	str	r3, [r4, r2]
 8007e28:	3404      	adds	r4, #4
 8007e2a:	e79f      	b.n	8007d6c <__multiply+0x78>
 8007e2c:	3e01      	subs	r6, #1
 8007e2e:	e7a1      	b.n	8007d74 <__multiply+0x80>
 8007e30:	08008c4c 	.word	0x08008c4c
 8007e34:	08008c5d 	.word	0x08008c5d

08007e38 <__pow5mult>:
 8007e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e3c:	4615      	mov	r5, r2
 8007e3e:	f012 0203 	ands.w	r2, r2, #3
 8007e42:	4607      	mov	r7, r0
 8007e44:	460e      	mov	r6, r1
 8007e46:	d007      	beq.n	8007e58 <__pow5mult+0x20>
 8007e48:	4c25      	ldr	r4, [pc, #148]	@ (8007ee0 <__pow5mult+0xa8>)
 8007e4a:	3a01      	subs	r2, #1
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e52:	f7ff fea7 	bl	8007ba4 <__multadd>
 8007e56:	4606      	mov	r6, r0
 8007e58:	10ad      	asrs	r5, r5, #2
 8007e5a:	d03d      	beq.n	8007ed8 <__pow5mult+0xa0>
 8007e5c:	69fc      	ldr	r4, [r7, #28]
 8007e5e:	b97c      	cbnz	r4, 8007e80 <__pow5mult+0x48>
 8007e60:	2010      	movs	r0, #16
 8007e62:	f7ff fd87 	bl	8007974 <malloc>
 8007e66:	4602      	mov	r2, r0
 8007e68:	61f8      	str	r0, [r7, #28]
 8007e6a:	b928      	cbnz	r0, 8007e78 <__pow5mult+0x40>
 8007e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee4 <__pow5mult+0xac>)
 8007e6e:	481e      	ldr	r0, [pc, #120]	@ (8007ee8 <__pow5mult+0xb0>)
 8007e70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e74:	f000 fc36 	bl	80086e4 <__assert_func>
 8007e78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e7c:	6004      	str	r4, [r0, #0]
 8007e7e:	60c4      	str	r4, [r0, #12]
 8007e80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e88:	b94c      	cbnz	r4, 8007e9e <__pow5mult+0x66>
 8007e8a:	f240 2171 	movw	r1, #625	@ 0x271
 8007e8e:	4638      	mov	r0, r7
 8007e90:	f7ff ff1a 	bl	8007cc8 <__i2b>
 8007e94:	2300      	movs	r3, #0
 8007e96:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	6003      	str	r3, [r0, #0]
 8007e9e:	f04f 0900 	mov.w	r9, #0
 8007ea2:	07eb      	lsls	r3, r5, #31
 8007ea4:	d50a      	bpl.n	8007ebc <__pow5mult+0x84>
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7ff ff22 	bl	8007cf4 <__multiply>
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7ff fe53 	bl	8007b60 <_Bfree>
 8007eba:	4646      	mov	r6, r8
 8007ebc:	106d      	asrs	r5, r5, #1
 8007ebe:	d00b      	beq.n	8007ed8 <__pow5mult+0xa0>
 8007ec0:	6820      	ldr	r0, [r4, #0]
 8007ec2:	b938      	cbnz	r0, 8007ed4 <__pow5mult+0x9c>
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f7ff ff13 	bl	8007cf4 <__multiply>
 8007ece:	6020      	str	r0, [r4, #0]
 8007ed0:	f8c0 9000 	str.w	r9, [r0]
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	e7e4      	b.n	8007ea2 <__pow5mult+0x6a>
 8007ed8:	4630      	mov	r0, r6
 8007eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ede:	bf00      	nop
 8007ee0:	08008d10 	.word	0x08008d10
 8007ee4:	08008bdd 	.word	0x08008bdd
 8007ee8:	08008c5d 	.word	0x08008c5d

08007eec <__lshift>:
 8007eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	6849      	ldr	r1, [r1, #4]
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007efa:	68a3      	ldr	r3, [r4, #8]
 8007efc:	4607      	mov	r7, r0
 8007efe:	4691      	mov	r9, r2
 8007f00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f04:	f108 0601 	add.w	r6, r8, #1
 8007f08:	42b3      	cmp	r3, r6
 8007f0a:	db0b      	blt.n	8007f24 <__lshift+0x38>
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7ff fde7 	bl	8007ae0 <_Balloc>
 8007f12:	4605      	mov	r5, r0
 8007f14:	b948      	cbnz	r0, 8007f2a <__lshift+0x3e>
 8007f16:	4602      	mov	r2, r0
 8007f18:	4b28      	ldr	r3, [pc, #160]	@ (8007fbc <__lshift+0xd0>)
 8007f1a:	4829      	ldr	r0, [pc, #164]	@ (8007fc0 <__lshift+0xd4>)
 8007f1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f20:	f000 fbe0 	bl	80086e4 <__assert_func>
 8007f24:	3101      	adds	r1, #1
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	e7ee      	b.n	8007f08 <__lshift+0x1c>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f100 0114 	add.w	r1, r0, #20
 8007f30:	f100 0210 	add.w	r2, r0, #16
 8007f34:	4618      	mov	r0, r3
 8007f36:	4553      	cmp	r3, sl
 8007f38:	db33      	blt.n	8007fa2 <__lshift+0xb6>
 8007f3a:	6920      	ldr	r0, [r4, #16]
 8007f3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f40:	f104 0314 	add.w	r3, r4, #20
 8007f44:	f019 091f 	ands.w	r9, r9, #31
 8007f48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f50:	d02b      	beq.n	8007faa <__lshift+0xbe>
 8007f52:	f1c9 0e20 	rsb	lr, r9, #32
 8007f56:	468a      	mov	sl, r1
 8007f58:	2200      	movs	r2, #0
 8007f5a:	6818      	ldr	r0, [r3, #0]
 8007f5c:	fa00 f009 	lsl.w	r0, r0, r9
 8007f60:	4310      	orrs	r0, r2
 8007f62:	f84a 0b04 	str.w	r0, [sl], #4
 8007f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f6a:	459c      	cmp	ip, r3
 8007f6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f70:	d8f3      	bhi.n	8007f5a <__lshift+0x6e>
 8007f72:	ebac 0304 	sub.w	r3, ip, r4
 8007f76:	3b15      	subs	r3, #21
 8007f78:	f023 0303 	bic.w	r3, r3, #3
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	f104 0015 	add.w	r0, r4, #21
 8007f82:	4560      	cmp	r0, ip
 8007f84:	bf88      	it	hi
 8007f86:	2304      	movhi	r3, #4
 8007f88:	50ca      	str	r2, [r1, r3]
 8007f8a:	b10a      	cbz	r2, 8007f90 <__lshift+0xa4>
 8007f8c:	f108 0602 	add.w	r6, r8, #2
 8007f90:	3e01      	subs	r6, #1
 8007f92:	4638      	mov	r0, r7
 8007f94:	612e      	str	r6, [r5, #16]
 8007f96:	4621      	mov	r1, r4
 8007f98:	f7ff fde2 	bl	8007b60 <_Bfree>
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	e7c5      	b.n	8007f36 <__lshift+0x4a>
 8007faa:	3904      	subs	r1, #4
 8007fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fb4:	459c      	cmp	ip, r3
 8007fb6:	d8f9      	bhi.n	8007fac <__lshift+0xc0>
 8007fb8:	e7ea      	b.n	8007f90 <__lshift+0xa4>
 8007fba:	bf00      	nop
 8007fbc:	08008c4c 	.word	0x08008c4c
 8007fc0:	08008c5d 	.word	0x08008c5d

08007fc4 <__mcmp>:
 8007fc4:	690a      	ldr	r2, [r1, #16]
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	6900      	ldr	r0, [r0, #16]
 8007fca:	1a80      	subs	r0, r0, r2
 8007fcc:	b530      	push	{r4, r5, lr}
 8007fce:	d10e      	bne.n	8007fee <__mcmp+0x2a>
 8007fd0:	3314      	adds	r3, #20
 8007fd2:	3114      	adds	r1, #20
 8007fd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fe0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fe4:	4295      	cmp	r5, r2
 8007fe6:	d003      	beq.n	8007ff0 <__mcmp+0x2c>
 8007fe8:	d205      	bcs.n	8007ff6 <__mcmp+0x32>
 8007fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fee:	bd30      	pop	{r4, r5, pc}
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	d3f3      	bcc.n	8007fdc <__mcmp+0x18>
 8007ff4:	e7fb      	b.n	8007fee <__mcmp+0x2a>
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	e7f9      	b.n	8007fee <__mcmp+0x2a>
	...

08007ffc <__mdiff>:
 8007ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	4689      	mov	r9, r1
 8008002:	4606      	mov	r6, r0
 8008004:	4611      	mov	r1, r2
 8008006:	4648      	mov	r0, r9
 8008008:	4614      	mov	r4, r2
 800800a:	f7ff ffdb 	bl	8007fc4 <__mcmp>
 800800e:	1e05      	subs	r5, r0, #0
 8008010:	d112      	bne.n	8008038 <__mdiff+0x3c>
 8008012:	4629      	mov	r1, r5
 8008014:	4630      	mov	r0, r6
 8008016:	f7ff fd63 	bl	8007ae0 <_Balloc>
 800801a:	4602      	mov	r2, r0
 800801c:	b928      	cbnz	r0, 800802a <__mdiff+0x2e>
 800801e:	4b3e      	ldr	r3, [pc, #248]	@ (8008118 <__mdiff+0x11c>)
 8008020:	f240 2137 	movw	r1, #567	@ 0x237
 8008024:	483d      	ldr	r0, [pc, #244]	@ (800811c <__mdiff+0x120>)
 8008026:	f000 fb5d 	bl	80086e4 <__assert_func>
 800802a:	2301      	movs	r3, #1
 800802c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008030:	4610      	mov	r0, r2
 8008032:	b003      	add	sp, #12
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008038:	bfbc      	itt	lt
 800803a:	464b      	movlt	r3, r9
 800803c:	46a1      	movlt	r9, r4
 800803e:	4630      	mov	r0, r6
 8008040:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008044:	bfba      	itte	lt
 8008046:	461c      	movlt	r4, r3
 8008048:	2501      	movlt	r5, #1
 800804a:	2500      	movge	r5, #0
 800804c:	f7ff fd48 	bl	8007ae0 <_Balloc>
 8008050:	4602      	mov	r2, r0
 8008052:	b918      	cbnz	r0, 800805c <__mdiff+0x60>
 8008054:	4b30      	ldr	r3, [pc, #192]	@ (8008118 <__mdiff+0x11c>)
 8008056:	f240 2145 	movw	r1, #581	@ 0x245
 800805a:	e7e3      	b.n	8008024 <__mdiff+0x28>
 800805c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008060:	6926      	ldr	r6, [r4, #16]
 8008062:	60c5      	str	r5, [r0, #12]
 8008064:	f109 0310 	add.w	r3, r9, #16
 8008068:	f109 0514 	add.w	r5, r9, #20
 800806c:	f104 0e14 	add.w	lr, r4, #20
 8008070:	f100 0b14 	add.w	fp, r0, #20
 8008074:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008078:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	46d9      	mov	r9, fp
 8008080:	f04f 0c00 	mov.w	ip, #0
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	f85e 0b04 	ldr.w	r0, [lr], #4
 800808a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	b281      	uxth	r1, r0
 8008092:	fa1f f38a 	uxth.w	r3, sl
 8008096:	1a5b      	subs	r3, r3, r1
 8008098:	0c00      	lsrs	r0, r0, #16
 800809a:	4463      	add	r3, ip
 800809c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080a0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080aa:	4576      	cmp	r6, lr
 80080ac:	f849 3b04 	str.w	r3, [r9], #4
 80080b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080b4:	d8e6      	bhi.n	8008084 <__mdiff+0x88>
 80080b6:	1b33      	subs	r3, r6, r4
 80080b8:	3b15      	subs	r3, #21
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	3415      	adds	r4, #21
 80080c0:	3304      	adds	r3, #4
 80080c2:	42a6      	cmp	r6, r4
 80080c4:	bf38      	it	cc
 80080c6:	2304      	movcc	r3, #4
 80080c8:	441d      	add	r5, r3
 80080ca:	445b      	add	r3, fp
 80080cc:	461e      	mov	r6, r3
 80080ce:	462c      	mov	r4, r5
 80080d0:	4544      	cmp	r4, r8
 80080d2:	d30e      	bcc.n	80080f2 <__mdiff+0xf6>
 80080d4:	f108 0103 	add.w	r1, r8, #3
 80080d8:	1b49      	subs	r1, r1, r5
 80080da:	f021 0103 	bic.w	r1, r1, #3
 80080de:	3d03      	subs	r5, #3
 80080e0:	45a8      	cmp	r8, r5
 80080e2:	bf38      	it	cc
 80080e4:	2100      	movcc	r1, #0
 80080e6:	440b      	add	r3, r1
 80080e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ec:	b191      	cbz	r1, 8008114 <__mdiff+0x118>
 80080ee:	6117      	str	r7, [r2, #16]
 80080f0:	e79e      	b.n	8008030 <__mdiff+0x34>
 80080f2:	f854 1b04 	ldr.w	r1, [r4], #4
 80080f6:	46e6      	mov	lr, ip
 80080f8:	0c08      	lsrs	r0, r1, #16
 80080fa:	fa1c fc81 	uxtah	ip, ip, r1
 80080fe:	4471      	add	r1, lr
 8008100:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008104:	b289      	uxth	r1, r1
 8008106:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800810a:	f846 1b04 	str.w	r1, [r6], #4
 800810e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008112:	e7dd      	b.n	80080d0 <__mdiff+0xd4>
 8008114:	3f01      	subs	r7, #1
 8008116:	e7e7      	b.n	80080e8 <__mdiff+0xec>
 8008118:	08008c4c 	.word	0x08008c4c
 800811c:	08008c5d 	.word	0x08008c5d

08008120 <__d2b>:
 8008120:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008124:	2101      	movs	r1, #1
 8008126:	9e08      	ldr	r6, [sp, #32]
 8008128:	4690      	mov	r8, r2
 800812a:	4699      	mov	r9, r3
 800812c:	f7ff fcd8 	bl	8007ae0 <_Balloc>
 8008130:	4604      	mov	r4, r0
 8008132:	b930      	cbnz	r0, 8008142 <__d2b+0x22>
 8008134:	4602      	mov	r2, r0
 8008136:	4b24      	ldr	r3, [pc, #144]	@ (80081c8 <__d2b+0xa8>)
 8008138:	4824      	ldr	r0, [pc, #144]	@ (80081cc <__d2b+0xac>)
 800813a:	f240 310f 	movw	r1, #783	@ 0x30f
 800813e:	f000 fad1 	bl	80086e4 <__assert_func>
 8008142:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008146:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800814a:	b10d      	cbz	r5, 8008150 <__d2b+0x30>
 800814c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	f1b8 0300 	subs.w	r3, r8, #0
 8008156:	d024      	beq.n	80081a2 <__d2b+0x82>
 8008158:	4668      	mov	r0, sp
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	f7ff fd87 	bl	8007c6e <__lo0bits>
 8008160:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008164:	b1d8      	cbz	r0, 800819e <__d2b+0x7e>
 8008166:	f1c0 0320 	rsb	r3, r0, #32
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	430b      	orrs	r3, r1
 8008170:	40c2      	lsrs	r2, r0
 8008172:	6163      	str	r3, [r4, #20]
 8008174:	9201      	str	r2, [sp, #4]
 8008176:	9b01      	ldr	r3, [sp, #4]
 8008178:	61a3      	str	r3, [r4, #24]
 800817a:	2b00      	cmp	r3, #0
 800817c:	bf0c      	ite	eq
 800817e:	2201      	moveq	r2, #1
 8008180:	2202      	movne	r2, #2
 8008182:	6122      	str	r2, [r4, #16]
 8008184:	b1ad      	cbz	r5, 80081b2 <__d2b+0x92>
 8008186:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800818a:	4405      	add	r5, r0
 800818c:	6035      	str	r5, [r6, #0]
 800818e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008194:	6018      	str	r0, [r3, #0]
 8008196:	4620      	mov	r0, r4
 8008198:	b002      	add	sp, #8
 800819a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800819e:	6161      	str	r1, [r4, #20]
 80081a0:	e7e9      	b.n	8008176 <__d2b+0x56>
 80081a2:	a801      	add	r0, sp, #4
 80081a4:	f7ff fd63 	bl	8007c6e <__lo0bits>
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	6163      	str	r3, [r4, #20]
 80081ac:	3020      	adds	r0, #32
 80081ae:	2201      	movs	r2, #1
 80081b0:	e7e7      	b.n	8008182 <__d2b+0x62>
 80081b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081ba:	6030      	str	r0, [r6, #0]
 80081bc:	6918      	ldr	r0, [r3, #16]
 80081be:	f7ff fd37 	bl	8007c30 <__hi0bits>
 80081c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081c6:	e7e4      	b.n	8008192 <__d2b+0x72>
 80081c8:	08008c4c 	.word	0x08008c4c
 80081cc:	08008c5d 	.word	0x08008c5d

080081d0 <__sfputc_r>:
 80081d0:	6893      	ldr	r3, [r2, #8]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	b410      	push	{r4}
 80081d8:	6093      	str	r3, [r2, #8]
 80081da:	da07      	bge.n	80081ec <__sfputc_r+0x1c>
 80081dc:	6994      	ldr	r4, [r2, #24]
 80081de:	42a3      	cmp	r3, r4
 80081e0:	db01      	blt.n	80081e6 <__sfputc_r+0x16>
 80081e2:	290a      	cmp	r1, #10
 80081e4:	d102      	bne.n	80081ec <__sfputc_r+0x1c>
 80081e6:	bc10      	pop	{r4}
 80081e8:	f7fe bc0d 	b.w	8006a06 <__swbuf_r>
 80081ec:	6813      	ldr	r3, [r2, #0]
 80081ee:	1c58      	adds	r0, r3, #1
 80081f0:	6010      	str	r0, [r2, #0]
 80081f2:	7019      	strb	r1, [r3, #0]
 80081f4:	4608      	mov	r0, r1
 80081f6:	bc10      	pop	{r4}
 80081f8:	4770      	bx	lr

080081fa <__sfputs_r>:
 80081fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fc:	4606      	mov	r6, r0
 80081fe:	460f      	mov	r7, r1
 8008200:	4614      	mov	r4, r2
 8008202:	18d5      	adds	r5, r2, r3
 8008204:	42ac      	cmp	r4, r5
 8008206:	d101      	bne.n	800820c <__sfputs_r+0x12>
 8008208:	2000      	movs	r0, #0
 800820a:	e007      	b.n	800821c <__sfputs_r+0x22>
 800820c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008210:	463a      	mov	r2, r7
 8008212:	4630      	mov	r0, r6
 8008214:	f7ff ffdc 	bl	80081d0 <__sfputc_r>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d1f3      	bne.n	8008204 <__sfputs_r+0xa>
 800821c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008220 <_vfiprintf_r>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	460d      	mov	r5, r1
 8008226:	b09d      	sub	sp, #116	@ 0x74
 8008228:	4614      	mov	r4, r2
 800822a:	4698      	mov	r8, r3
 800822c:	4606      	mov	r6, r0
 800822e:	b118      	cbz	r0, 8008238 <_vfiprintf_r+0x18>
 8008230:	6a03      	ldr	r3, [r0, #32]
 8008232:	b90b      	cbnz	r3, 8008238 <_vfiprintf_r+0x18>
 8008234:	f7fe fafe 	bl	8006834 <__sinit>
 8008238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800823a:	07d9      	lsls	r1, r3, #31
 800823c:	d405      	bmi.n	800824a <_vfiprintf_r+0x2a>
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	059a      	lsls	r2, r3, #22
 8008242:	d402      	bmi.n	800824a <_vfiprintf_r+0x2a>
 8008244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008246:	f7fe fcf0 	bl	8006c2a <__retarget_lock_acquire_recursive>
 800824a:	89ab      	ldrh	r3, [r5, #12]
 800824c:	071b      	lsls	r3, r3, #28
 800824e:	d501      	bpl.n	8008254 <_vfiprintf_r+0x34>
 8008250:	692b      	ldr	r3, [r5, #16]
 8008252:	b99b      	cbnz	r3, 800827c <_vfiprintf_r+0x5c>
 8008254:	4629      	mov	r1, r5
 8008256:	4630      	mov	r0, r6
 8008258:	f7fe fc14 	bl	8006a84 <__swsetup_r>
 800825c:	b170      	cbz	r0, 800827c <_vfiprintf_r+0x5c>
 800825e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008260:	07dc      	lsls	r4, r3, #31
 8008262:	d504      	bpl.n	800826e <_vfiprintf_r+0x4e>
 8008264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008268:	b01d      	add	sp, #116	@ 0x74
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826e:	89ab      	ldrh	r3, [r5, #12]
 8008270:	0598      	lsls	r0, r3, #22
 8008272:	d4f7      	bmi.n	8008264 <_vfiprintf_r+0x44>
 8008274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008276:	f7fe fcd9 	bl	8006c2c <__retarget_lock_release_recursive>
 800827a:	e7f3      	b.n	8008264 <_vfiprintf_r+0x44>
 800827c:	2300      	movs	r3, #0
 800827e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008280:	2320      	movs	r3, #32
 8008282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008286:	f8cd 800c 	str.w	r8, [sp, #12]
 800828a:	2330      	movs	r3, #48	@ 0x30
 800828c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800843c <_vfiprintf_r+0x21c>
 8008290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008294:	f04f 0901 	mov.w	r9, #1
 8008298:	4623      	mov	r3, r4
 800829a:	469a      	mov	sl, r3
 800829c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082a0:	b10a      	cbz	r2, 80082a6 <_vfiprintf_r+0x86>
 80082a2:	2a25      	cmp	r2, #37	@ 0x25
 80082a4:	d1f9      	bne.n	800829a <_vfiprintf_r+0x7a>
 80082a6:	ebba 0b04 	subs.w	fp, sl, r4
 80082aa:	d00b      	beq.n	80082c4 <_vfiprintf_r+0xa4>
 80082ac:	465b      	mov	r3, fp
 80082ae:	4622      	mov	r2, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ffa1 	bl	80081fa <__sfputs_r>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f000 80a7 	beq.w	800840c <_vfiprintf_r+0x1ec>
 80082be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c0:	445a      	add	r2, fp
 80082c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80082c4:	f89a 3000 	ldrb.w	r3, [sl]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 809f 	beq.w	800840c <_vfiprintf_r+0x1ec>
 80082ce:	2300      	movs	r3, #0
 80082d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d8:	f10a 0a01 	add.w	sl, sl, #1
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	9307      	str	r3, [sp, #28]
 80082e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80082e6:	4654      	mov	r4, sl
 80082e8:	2205      	movs	r2, #5
 80082ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ee:	4853      	ldr	r0, [pc, #332]	@ (800843c <_vfiprintf_r+0x21c>)
 80082f0:	f7f7 ff46 	bl	8000180 <memchr>
 80082f4:	9a04      	ldr	r2, [sp, #16]
 80082f6:	b9d8      	cbnz	r0, 8008330 <_vfiprintf_r+0x110>
 80082f8:	06d1      	lsls	r1, r2, #27
 80082fa:	bf44      	itt	mi
 80082fc:	2320      	movmi	r3, #32
 80082fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008302:	0713      	lsls	r3, r2, #28
 8008304:	bf44      	itt	mi
 8008306:	232b      	movmi	r3, #43	@ 0x2b
 8008308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800830c:	f89a 3000 	ldrb.w	r3, [sl]
 8008310:	2b2a      	cmp	r3, #42	@ 0x2a
 8008312:	d015      	beq.n	8008340 <_vfiprintf_r+0x120>
 8008314:	9a07      	ldr	r2, [sp, #28]
 8008316:	4654      	mov	r4, sl
 8008318:	2000      	movs	r0, #0
 800831a:	f04f 0c0a 	mov.w	ip, #10
 800831e:	4621      	mov	r1, r4
 8008320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008324:	3b30      	subs	r3, #48	@ 0x30
 8008326:	2b09      	cmp	r3, #9
 8008328:	d94b      	bls.n	80083c2 <_vfiprintf_r+0x1a2>
 800832a:	b1b0      	cbz	r0, 800835a <_vfiprintf_r+0x13a>
 800832c:	9207      	str	r2, [sp, #28]
 800832e:	e014      	b.n	800835a <_vfiprintf_r+0x13a>
 8008330:	eba0 0308 	sub.w	r3, r0, r8
 8008334:	fa09 f303 	lsl.w	r3, r9, r3
 8008338:	4313      	orrs	r3, r2
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	46a2      	mov	sl, r4
 800833e:	e7d2      	b.n	80082e6 <_vfiprintf_r+0xc6>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	1d19      	adds	r1, r3, #4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	9103      	str	r1, [sp, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfbb      	ittet	lt
 800834c:	425b      	neglt	r3, r3
 800834e:	f042 0202 	orrlt.w	r2, r2, #2
 8008352:	9307      	strge	r3, [sp, #28]
 8008354:	9307      	strlt	r3, [sp, #28]
 8008356:	bfb8      	it	lt
 8008358:	9204      	strlt	r2, [sp, #16]
 800835a:	7823      	ldrb	r3, [r4, #0]
 800835c:	2b2e      	cmp	r3, #46	@ 0x2e
 800835e:	d10a      	bne.n	8008376 <_vfiprintf_r+0x156>
 8008360:	7863      	ldrb	r3, [r4, #1]
 8008362:	2b2a      	cmp	r3, #42	@ 0x2a
 8008364:	d132      	bne.n	80083cc <_vfiprintf_r+0x1ac>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	1d1a      	adds	r2, r3, #4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	9203      	str	r2, [sp, #12]
 800836e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008372:	3402      	adds	r4, #2
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008440 <_vfiprintf_r+0x220>
 800837a:	7821      	ldrb	r1, [r4, #0]
 800837c:	2203      	movs	r2, #3
 800837e:	4650      	mov	r0, sl
 8008380:	f7f7 fefe 	bl	8000180 <memchr>
 8008384:	b138      	cbz	r0, 8008396 <_vfiprintf_r+0x176>
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	eba0 000a 	sub.w	r0, r0, sl
 800838c:	2240      	movs	r2, #64	@ 0x40
 800838e:	4082      	lsls	r2, r0
 8008390:	4313      	orrs	r3, r2
 8008392:	3401      	adds	r4, #1
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839a:	482a      	ldr	r0, [pc, #168]	@ (8008444 <_vfiprintf_r+0x224>)
 800839c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083a0:	2206      	movs	r2, #6
 80083a2:	f7f7 feed 	bl	8000180 <memchr>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d03f      	beq.n	800842a <_vfiprintf_r+0x20a>
 80083aa:	4b27      	ldr	r3, [pc, #156]	@ (8008448 <_vfiprintf_r+0x228>)
 80083ac:	bb1b      	cbnz	r3, 80083f6 <_vfiprintf_r+0x1d6>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	3307      	adds	r3, #7
 80083b2:	f023 0307 	bic.w	r3, r3, #7
 80083b6:	3308      	adds	r3, #8
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083bc:	443b      	add	r3, r7
 80083be:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c0:	e76a      	b.n	8008298 <_vfiprintf_r+0x78>
 80083c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c6:	460c      	mov	r4, r1
 80083c8:	2001      	movs	r0, #1
 80083ca:	e7a8      	b.n	800831e <_vfiprintf_r+0xfe>
 80083cc:	2300      	movs	r3, #0
 80083ce:	3401      	adds	r4, #1
 80083d0:	9305      	str	r3, [sp, #20]
 80083d2:	4619      	mov	r1, r3
 80083d4:	f04f 0c0a 	mov.w	ip, #10
 80083d8:	4620      	mov	r0, r4
 80083da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083de:	3a30      	subs	r2, #48	@ 0x30
 80083e0:	2a09      	cmp	r2, #9
 80083e2:	d903      	bls.n	80083ec <_vfiprintf_r+0x1cc>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0c6      	beq.n	8008376 <_vfiprintf_r+0x156>
 80083e8:	9105      	str	r1, [sp, #20]
 80083ea:	e7c4      	b.n	8008376 <_vfiprintf_r+0x156>
 80083ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f0:	4604      	mov	r4, r0
 80083f2:	2301      	movs	r3, #1
 80083f4:	e7f0      	b.n	80083d8 <_vfiprintf_r+0x1b8>
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4b13      	ldr	r3, [pc, #76]	@ (800844c <_vfiprintf_r+0x22c>)
 80083fe:	a904      	add	r1, sp, #16
 8008400:	4630      	mov	r0, r6
 8008402:	f7fd fdd3 	bl	8005fac <_printf_float>
 8008406:	4607      	mov	r7, r0
 8008408:	1c78      	adds	r0, r7, #1
 800840a:	d1d6      	bne.n	80083ba <_vfiprintf_r+0x19a>
 800840c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800840e:	07d9      	lsls	r1, r3, #31
 8008410:	d405      	bmi.n	800841e <_vfiprintf_r+0x1fe>
 8008412:	89ab      	ldrh	r3, [r5, #12]
 8008414:	059a      	lsls	r2, r3, #22
 8008416:	d402      	bmi.n	800841e <_vfiprintf_r+0x1fe>
 8008418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800841a:	f7fe fc07 	bl	8006c2c <__retarget_lock_release_recursive>
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	065b      	lsls	r3, r3, #25
 8008422:	f53f af1f 	bmi.w	8008264 <_vfiprintf_r+0x44>
 8008426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008428:	e71e      	b.n	8008268 <_vfiprintf_r+0x48>
 800842a:	ab03      	add	r3, sp, #12
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	462a      	mov	r2, r5
 8008430:	4b06      	ldr	r3, [pc, #24]	@ (800844c <_vfiprintf_r+0x22c>)
 8008432:	a904      	add	r1, sp, #16
 8008434:	4630      	mov	r0, r6
 8008436:	f7fe f853 	bl	80064e0 <_printf_i>
 800843a:	e7e4      	b.n	8008406 <_vfiprintf_r+0x1e6>
 800843c:	08008cb6 	.word	0x08008cb6
 8008440:	08008cbc 	.word	0x08008cbc
 8008444:	08008cc0 	.word	0x08008cc0
 8008448:	08005fad 	.word	0x08005fad
 800844c:	080081fb 	.word	0x080081fb

08008450 <__sflush_r>:
 8008450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	0716      	lsls	r6, r2, #28
 8008458:	4605      	mov	r5, r0
 800845a:	460c      	mov	r4, r1
 800845c:	d454      	bmi.n	8008508 <__sflush_r+0xb8>
 800845e:	684b      	ldr	r3, [r1, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	dc02      	bgt.n	800846a <__sflush_r+0x1a>
 8008464:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	dd48      	ble.n	80084fc <__sflush_r+0xac>
 800846a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800846c:	2e00      	cmp	r6, #0
 800846e:	d045      	beq.n	80084fc <__sflush_r+0xac>
 8008470:	2300      	movs	r3, #0
 8008472:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008476:	682f      	ldr	r7, [r5, #0]
 8008478:	6a21      	ldr	r1, [r4, #32]
 800847a:	602b      	str	r3, [r5, #0]
 800847c:	d030      	beq.n	80084e0 <__sflush_r+0x90>
 800847e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	0759      	lsls	r1, r3, #29
 8008484:	d505      	bpl.n	8008492 <__sflush_r+0x42>
 8008486:	6863      	ldr	r3, [r4, #4]
 8008488:	1ad2      	subs	r2, r2, r3
 800848a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800848c:	b10b      	cbz	r3, 8008492 <__sflush_r+0x42>
 800848e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008490:	1ad2      	subs	r2, r2, r3
 8008492:	2300      	movs	r3, #0
 8008494:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008496:	6a21      	ldr	r1, [r4, #32]
 8008498:	4628      	mov	r0, r5
 800849a:	47b0      	blx	r6
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	d106      	bne.n	80084b0 <__sflush_r+0x60>
 80084a2:	6829      	ldr	r1, [r5, #0]
 80084a4:	291d      	cmp	r1, #29
 80084a6:	d82b      	bhi.n	8008500 <__sflush_r+0xb0>
 80084a8:	4a28      	ldr	r2, [pc, #160]	@ (800854c <__sflush_r+0xfc>)
 80084aa:	40ca      	lsrs	r2, r1
 80084ac:	07d6      	lsls	r6, r2, #31
 80084ae:	d527      	bpl.n	8008500 <__sflush_r+0xb0>
 80084b0:	2200      	movs	r2, #0
 80084b2:	6062      	str	r2, [r4, #4]
 80084b4:	04d9      	lsls	r1, r3, #19
 80084b6:	6922      	ldr	r2, [r4, #16]
 80084b8:	6022      	str	r2, [r4, #0]
 80084ba:	d504      	bpl.n	80084c6 <__sflush_r+0x76>
 80084bc:	1c42      	adds	r2, r0, #1
 80084be:	d101      	bne.n	80084c4 <__sflush_r+0x74>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b903      	cbnz	r3, 80084c6 <__sflush_r+0x76>
 80084c4:	6560      	str	r0, [r4, #84]	@ 0x54
 80084c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084c8:	602f      	str	r7, [r5, #0]
 80084ca:	b1b9      	cbz	r1, 80084fc <__sflush_r+0xac>
 80084cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084d0:	4299      	cmp	r1, r3
 80084d2:	d002      	beq.n	80084da <__sflush_r+0x8a>
 80084d4:	4628      	mov	r0, r5
 80084d6:	f7ff fa03 	bl	80078e0 <_free_r>
 80084da:	2300      	movs	r3, #0
 80084dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80084de:	e00d      	b.n	80084fc <__sflush_r+0xac>
 80084e0:	2301      	movs	r3, #1
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b0      	blx	r6
 80084e6:	4602      	mov	r2, r0
 80084e8:	1c50      	adds	r0, r2, #1
 80084ea:	d1c9      	bne.n	8008480 <__sflush_r+0x30>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0c6      	beq.n	8008480 <__sflush_r+0x30>
 80084f2:	2b1d      	cmp	r3, #29
 80084f4:	d001      	beq.n	80084fa <__sflush_r+0xaa>
 80084f6:	2b16      	cmp	r3, #22
 80084f8:	d11d      	bne.n	8008536 <__sflush_r+0xe6>
 80084fa:	602f      	str	r7, [r5, #0]
 80084fc:	2000      	movs	r0, #0
 80084fe:	e021      	b.n	8008544 <__sflush_r+0xf4>
 8008500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008504:	b21b      	sxth	r3, r3
 8008506:	e01a      	b.n	800853e <__sflush_r+0xee>
 8008508:	690f      	ldr	r7, [r1, #16]
 800850a:	2f00      	cmp	r7, #0
 800850c:	d0f6      	beq.n	80084fc <__sflush_r+0xac>
 800850e:	0793      	lsls	r3, r2, #30
 8008510:	680e      	ldr	r6, [r1, #0]
 8008512:	bf08      	it	eq
 8008514:	694b      	ldreq	r3, [r1, #20]
 8008516:	600f      	str	r7, [r1, #0]
 8008518:	bf18      	it	ne
 800851a:	2300      	movne	r3, #0
 800851c:	1bf6      	subs	r6, r6, r7
 800851e:	608b      	str	r3, [r1, #8]
 8008520:	2e00      	cmp	r6, #0
 8008522:	ddeb      	ble.n	80084fc <__sflush_r+0xac>
 8008524:	6a21      	ldr	r1, [r4, #32]
 8008526:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800852a:	4633      	mov	r3, r6
 800852c:	463a      	mov	r2, r7
 800852e:	4628      	mov	r0, r5
 8008530:	47e0      	blx	ip
 8008532:	2800      	cmp	r0, #0
 8008534:	dc07      	bgt.n	8008546 <__sflush_r+0xf6>
 8008536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800853e:	81a3      	strh	r3, [r4, #12]
 8008540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008546:	4407      	add	r7, r0
 8008548:	1a36      	subs	r6, r6, r0
 800854a:	e7e9      	b.n	8008520 <__sflush_r+0xd0>
 800854c:	20400001 	.word	0x20400001

08008550 <_fflush_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	690b      	ldr	r3, [r1, #16]
 8008554:	4605      	mov	r5, r0
 8008556:	460c      	mov	r4, r1
 8008558:	b913      	cbnz	r3, 8008560 <_fflush_r+0x10>
 800855a:	2500      	movs	r5, #0
 800855c:	4628      	mov	r0, r5
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	b118      	cbz	r0, 800856a <_fflush_r+0x1a>
 8008562:	6a03      	ldr	r3, [r0, #32]
 8008564:	b90b      	cbnz	r3, 800856a <_fflush_r+0x1a>
 8008566:	f7fe f965 	bl	8006834 <__sinit>
 800856a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0f3      	beq.n	800855a <_fflush_r+0xa>
 8008572:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008574:	07d0      	lsls	r0, r2, #31
 8008576:	d404      	bmi.n	8008582 <_fflush_r+0x32>
 8008578:	0599      	lsls	r1, r3, #22
 800857a:	d402      	bmi.n	8008582 <_fflush_r+0x32>
 800857c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800857e:	f7fe fb54 	bl	8006c2a <__retarget_lock_acquire_recursive>
 8008582:	4628      	mov	r0, r5
 8008584:	4621      	mov	r1, r4
 8008586:	f7ff ff63 	bl	8008450 <__sflush_r>
 800858a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800858c:	07da      	lsls	r2, r3, #31
 800858e:	4605      	mov	r5, r0
 8008590:	d4e4      	bmi.n	800855c <_fflush_r+0xc>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	059b      	lsls	r3, r3, #22
 8008596:	d4e1      	bmi.n	800855c <_fflush_r+0xc>
 8008598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800859a:	f7fe fb47 	bl	8006c2c <__retarget_lock_release_recursive>
 800859e:	e7dd      	b.n	800855c <_fflush_r+0xc>

080085a0 <__swhatbuf_r>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	460c      	mov	r4, r1
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	2900      	cmp	r1, #0
 80085aa:	b096      	sub	sp, #88	@ 0x58
 80085ac:	4615      	mov	r5, r2
 80085ae:	461e      	mov	r6, r3
 80085b0:	da0d      	bge.n	80085ce <__swhatbuf_r+0x2e>
 80085b2:	89a3      	ldrh	r3, [r4, #12]
 80085b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085b8:	f04f 0100 	mov.w	r1, #0
 80085bc:	bf14      	ite	ne
 80085be:	2340      	movne	r3, #64	@ 0x40
 80085c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085c4:	2000      	movs	r0, #0
 80085c6:	6031      	str	r1, [r6, #0]
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	b016      	add	sp, #88	@ 0x58
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
 80085ce:	466a      	mov	r2, sp
 80085d0:	f000 f848 	bl	8008664 <_fstat_r>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	dbec      	blt.n	80085b2 <__swhatbuf_r+0x12>
 80085d8:	9901      	ldr	r1, [sp, #4]
 80085da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085e2:	4259      	negs	r1, r3
 80085e4:	4159      	adcs	r1, r3
 80085e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085ea:	e7eb      	b.n	80085c4 <__swhatbuf_r+0x24>

080085ec <__smakebuf_r>:
 80085ec:	898b      	ldrh	r3, [r1, #12]
 80085ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f0:	079d      	lsls	r5, r3, #30
 80085f2:	4606      	mov	r6, r0
 80085f4:	460c      	mov	r4, r1
 80085f6:	d507      	bpl.n	8008608 <__smakebuf_r+0x1c>
 80085f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	2301      	movs	r3, #1
 8008602:	6163      	str	r3, [r4, #20]
 8008604:	b003      	add	sp, #12
 8008606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008608:	ab01      	add	r3, sp, #4
 800860a:	466a      	mov	r2, sp
 800860c:	f7ff ffc8 	bl	80085a0 <__swhatbuf_r>
 8008610:	9f00      	ldr	r7, [sp, #0]
 8008612:	4605      	mov	r5, r0
 8008614:	4639      	mov	r1, r7
 8008616:	4630      	mov	r0, r6
 8008618:	f7ff f9d6 	bl	80079c8 <_malloc_r>
 800861c:	b948      	cbnz	r0, 8008632 <__smakebuf_r+0x46>
 800861e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008622:	059a      	lsls	r2, r3, #22
 8008624:	d4ee      	bmi.n	8008604 <__smakebuf_r+0x18>
 8008626:	f023 0303 	bic.w	r3, r3, #3
 800862a:	f043 0302 	orr.w	r3, r3, #2
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	e7e2      	b.n	80085f8 <__smakebuf_r+0xc>
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	6020      	str	r0, [r4, #0]
 8008636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	9b01      	ldr	r3, [sp, #4]
 800863e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008642:	b15b      	cbz	r3, 800865c <__smakebuf_r+0x70>
 8008644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008648:	4630      	mov	r0, r6
 800864a:	f000 f81d 	bl	8008688 <_isatty_r>
 800864e:	b128      	cbz	r0, 800865c <__smakebuf_r+0x70>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	f023 0303 	bic.w	r3, r3, #3
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	431d      	orrs	r5, r3
 8008660:	81a5      	strh	r5, [r4, #12]
 8008662:	e7cf      	b.n	8008604 <__smakebuf_r+0x18>

08008664 <_fstat_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4d07      	ldr	r5, [pc, #28]	@ (8008684 <_fstat_r+0x20>)
 8008668:	2300      	movs	r3, #0
 800866a:	4604      	mov	r4, r0
 800866c:	4608      	mov	r0, r1
 800866e:	4611      	mov	r1, r2
 8008670:	602b      	str	r3, [r5, #0]
 8008672:	f7f9 f966 	bl	8001942 <_fstat>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	d102      	bne.n	8008680 <_fstat_r+0x1c>
 800867a:	682b      	ldr	r3, [r5, #0]
 800867c:	b103      	cbz	r3, 8008680 <_fstat_r+0x1c>
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	bd38      	pop	{r3, r4, r5, pc}
 8008682:	bf00      	nop
 8008684:	200004f0 	.word	0x200004f0

08008688 <_isatty_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d06      	ldr	r5, [pc, #24]	@ (80086a4 <_isatty_r+0x1c>)
 800868c:	2300      	movs	r3, #0
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	602b      	str	r3, [r5, #0]
 8008694:	f7f9 f964 	bl	8001960 <_isatty>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_isatty_r+0x1a>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_isatty_r+0x1a>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	200004f0 	.word	0x200004f0

080086a8 <_sbrk_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d06      	ldr	r5, [pc, #24]	@ (80086c4 <_sbrk_r+0x1c>)
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	f7f9 f96a 	bl	800198c <_sbrk>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_sbrk_r+0x1a>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_sbrk_r+0x1a>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	200004f0 	.word	0x200004f0

080086c8 <memcpy>:
 80086c8:	440a      	add	r2, r1
 80086ca:	4291      	cmp	r1, r2
 80086cc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80086d0:	d100      	bne.n	80086d4 <memcpy+0xc>
 80086d2:	4770      	bx	lr
 80086d4:	b510      	push	{r4, lr}
 80086d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086de:	4291      	cmp	r1, r2
 80086e0:	d1f9      	bne.n	80086d6 <memcpy+0xe>
 80086e2:	bd10      	pop	{r4, pc}

080086e4 <__assert_func>:
 80086e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086e6:	4614      	mov	r4, r2
 80086e8:	461a      	mov	r2, r3
 80086ea:	4b09      	ldr	r3, [pc, #36]	@ (8008710 <__assert_func+0x2c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4605      	mov	r5, r0
 80086f0:	68d8      	ldr	r0, [r3, #12]
 80086f2:	b14c      	cbz	r4, 8008708 <__assert_func+0x24>
 80086f4:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <__assert_func+0x30>)
 80086f6:	9100      	str	r1, [sp, #0]
 80086f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086fc:	4906      	ldr	r1, [pc, #24]	@ (8008718 <__assert_func+0x34>)
 80086fe:	462b      	mov	r3, r5
 8008700:	f000 f842 	bl	8008788 <fiprintf>
 8008704:	f000 f852 	bl	80087ac <abort>
 8008708:	4b04      	ldr	r3, [pc, #16]	@ (800871c <__assert_func+0x38>)
 800870a:	461c      	mov	r4, r3
 800870c:	e7f3      	b.n	80086f6 <__assert_func+0x12>
 800870e:	bf00      	nop
 8008710:	20000024 	.word	0x20000024
 8008714:	08008cd1 	.word	0x08008cd1
 8008718:	08008cde 	.word	0x08008cde
 800871c:	08008d0c 	.word	0x08008d0c

08008720 <_calloc_r>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	fba1 5402 	umull	r5, r4, r1, r2
 8008726:	b934      	cbnz	r4, 8008736 <_calloc_r+0x16>
 8008728:	4629      	mov	r1, r5
 800872a:	f7ff f94d 	bl	80079c8 <_malloc_r>
 800872e:	4606      	mov	r6, r0
 8008730:	b928      	cbnz	r0, 800873e <_calloc_r+0x1e>
 8008732:	4630      	mov	r0, r6
 8008734:	bd70      	pop	{r4, r5, r6, pc}
 8008736:	220c      	movs	r2, #12
 8008738:	6002      	str	r2, [r0, #0]
 800873a:	2600      	movs	r6, #0
 800873c:	e7f9      	b.n	8008732 <_calloc_r+0x12>
 800873e:	462a      	mov	r2, r5
 8008740:	4621      	mov	r1, r4
 8008742:	f7fe f9f5 	bl	8006b30 <memset>
 8008746:	e7f4      	b.n	8008732 <_calloc_r+0x12>

08008748 <__ascii_mbtowc>:
 8008748:	b082      	sub	sp, #8
 800874a:	b901      	cbnz	r1, 800874e <__ascii_mbtowc+0x6>
 800874c:	a901      	add	r1, sp, #4
 800874e:	b142      	cbz	r2, 8008762 <__ascii_mbtowc+0x1a>
 8008750:	b14b      	cbz	r3, 8008766 <__ascii_mbtowc+0x1e>
 8008752:	7813      	ldrb	r3, [r2, #0]
 8008754:	600b      	str	r3, [r1, #0]
 8008756:	7812      	ldrb	r2, [r2, #0]
 8008758:	1e10      	subs	r0, r2, #0
 800875a:	bf18      	it	ne
 800875c:	2001      	movne	r0, #1
 800875e:	b002      	add	sp, #8
 8008760:	4770      	bx	lr
 8008762:	4610      	mov	r0, r2
 8008764:	e7fb      	b.n	800875e <__ascii_mbtowc+0x16>
 8008766:	f06f 0001 	mvn.w	r0, #1
 800876a:	e7f8      	b.n	800875e <__ascii_mbtowc+0x16>

0800876c <__ascii_wctomb>:
 800876c:	4603      	mov	r3, r0
 800876e:	4608      	mov	r0, r1
 8008770:	b141      	cbz	r1, 8008784 <__ascii_wctomb+0x18>
 8008772:	2aff      	cmp	r2, #255	@ 0xff
 8008774:	d904      	bls.n	8008780 <__ascii_wctomb+0x14>
 8008776:	228a      	movs	r2, #138	@ 0x8a
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800877e:	4770      	bx	lr
 8008780:	700a      	strb	r2, [r1, #0]
 8008782:	2001      	movs	r0, #1
 8008784:	4770      	bx	lr
	...

08008788 <fiprintf>:
 8008788:	b40e      	push	{r1, r2, r3}
 800878a:	b503      	push	{r0, r1, lr}
 800878c:	4601      	mov	r1, r0
 800878e:	ab03      	add	r3, sp, #12
 8008790:	4805      	ldr	r0, [pc, #20]	@ (80087a8 <fiprintf+0x20>)
 8008792:	f853 2b04 	ldr.w	r2, [r3], #4
 8008796:	6800      	ldr	r0, [r0, #0]
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	f7ff fd41 	bl	8008220 <_vfiprintf_r>
 800879e:	b002      	add	sp, #8
 80087a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a4:	b003      	add	sp, #12
 80087a6:	4770      	bx	lr
 80087a8:	20000024 	.word	0x20000024

080087ac <abort>:
 80087ac:	b508      	push	{r3, lr}
 80087ae:	2006      	movs	r0, #6
 80087b0:	f000 f82c 	bl	800880c <raise>
 80087b4:	2001      	movs	r0, #1
 80087b6:	f7f9 f891 	bl	80018dc <_exit>

080087ba <_raise_r>:
 80087ba:	291f      	cmp	r1, #31
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4605      	mov	r5, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	d904      	bls.n	80087ce <_raise_r+0x14>
 80087c4:	2316      	movs	r3, #22
 80087c6:	6003      	str	r3, [r0, #0]
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087d0:	b112      	cbz	r2, 80087d8 <_raise_r+0x1e>
 80087d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087d6:	b94b      	cbnz	r3, 80087ec <_raise_r+0x32>
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 f831 	bl	8008840 <_getpid_r>
 80087de:	4622      	mov	r2, r4
 80087e0:	4601      	mov	r1, r0
 80087e2:	4628      	mov	r0, r5
 80087e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e8:	f000 b818 	b.w	800881c <_kill_r>
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d00a      	beq.n	8008806 <_raise_r+0x4c>
 80087f0:	1c59      	adds	r1, r3, #1
 80087f2:	d103      	bne.n	80087fc <_raise_r+0x42>
 80087f4:	2316      	movs	r3, #22
 80087f6:	6003      	str	r3, [r0, #0]
 80087f8:	2001      	movs	r0, #1
 80087fa:	e7e7      	b.n	80087cc <_raise_r+0x12>
 80087fc:	2100      	movs	r1, #0
 80087fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008802:	4620      	mov	r0, r4
 8008804:	4798      	blx	r3
 8008806:	2000      	movs	r0, #0
 8008808:	e7e0      	b.n	80087cc <_raise_r+0x12>
	...

0800880c <raise>:
 800880c:	4b02      	ldr	r3, [pc, #8]	@ (8008818 <raise+0xc>)
 800880e:	4601      	mov	r1, r0
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f7ff bfd2 	b.w	80087ba <_raise_r>
 8008816:	bf00      	nop
 8008818:	20000024 	.word	0x20000024

0800881c <_kill_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4d07      	ldr	r5, [pc, #28]	@ (800883c <_kill_r+0x20>)
 8008820:	2300      	movs	r3, #0
 8008822:	4604      	mov	r4, r0
 8008824:	4608      	mov	r0, r1
 8008826:	4611      	mov	r1, r2
 8008828:	602b      	str	r3, [r5, #0]
 800882a:	f7f9 f847 	bl	80018bc <_kill>
 800882e:	1c43      	adds	r3, r0, #1
 8008830:	d102      	bne.n	8008838 <_kill_r+0x1c>
 8008832:	682b      	ldr	r3, [r5, #0]
 8008834:	b103      	cbz	r3, 8008838 <_kill_r+0x1c>
 8008836:	6023      	str	r3, [r4, #0]
 8008838:	bd38      	pop	{r3, r4, r5, pc}
 800883a:	bf00      	nop
 800883c:	200004f0 	.word	0x200004f0

08008840 <_getpid_r>:
 8008840:	f7f9 b835 	b.w	80018ae <_getpid>

08008844 <_init>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr

08008850 <_fini>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr
