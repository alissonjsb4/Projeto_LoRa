
LoRa_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b064  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  0800b1a8  0800b1a8  0000c1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb40  0800bb40  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb40  0800bb40  0000cb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb48  0800bb48  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb48  0800bb48  0000cb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb4c  0800bb4c  0000cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800bb50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200001e0  0800bd30  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  0800bd30  0000d6c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016403  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003905  00000000  00000000  0002360d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00026f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c2  00000000  00000000  00028568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb7a  00000000  00000000  0002962a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a35  00000000  00000000  000491a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8dea  00000000  00000000  0005ebd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001179c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070fc  00000000  00000000  00117a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011eb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b18c 	.word	0x0800b18c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800b18c 	.word	0x0800b18c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_fmul>:
 8000e74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e7c:	bf1e      	ittt	ne
 8000e7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e82:	ea92 0f0c 	teqne	r2, ip
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d06f      	beq.n	8000f6c <__aeabi_fmul+0xf8>
 8000e8c:	441a      	add	r2, r3
 8000e8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e92:	0240      	lsls	r0, r0, #9
 8000e94:	bf18      	it	ne
 8000e96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e9a:	d01e      	beq.n	8000eda <__aeabi_fmul+0x66>
 8000e9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ea0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ea8:	fba0 3101 	umull	r3, r1, r0, r1
 8000eac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000eb0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000eb4:	bf3e      	ittt	cc
 8000eb6:	0049      	lslcc	r1, r1, #1
 8000eb8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	ea40 0001 	orr.w	r0, r0, r1
 8000ec2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ec6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ec8:	d81d      	bhi.n	8000f06 <__aeabi_fmul+0x92>
 8000eca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ece:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed2:	bf08      	it	eq
 8000ed4:	f020 0001 	biceq.w	r0, r0, #1
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee2:	bf08      	it	eq
 8000ee4:	0249      	lsleq	r1, r1, #9
 8000ee6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000eee:	3a7f      	subs	r2, #127	@ 0x7f
 8000ef0:	bfc2      	ittt	gt
 8000ef2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efa:	4770      	bxgt	lr
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	3a01      	subs	r2, #1
 8000f06:	dc5d      	bgt.n	8000fc4 <__aeabi_fmul+0x150>
 8000f08:	f112 0f19 	cmn.w	r2, #25
 8000f0c:	bfdc      	itt	le
 8000f0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f12:	4770      	bxle	lr
 8000f14:	f1c2 0200 	rsb	r2, r2, #0
 8000f18:	0041      	lsls	r1, r0, #1
 8000f1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f1e:	f1c2 0220 	rsb	r2, r2, #32
 8000f22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f2a:	f140 0000 	adc.w	r0, r0, #0
 8000f2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f32:	bf08      	it	eq
 8000f34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f38:	4770      	bx	lr
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xce>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fmul+0xe6>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e78f      	b.n	8000e8c <__aeabi_fmul+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	bf18      	it	ne
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d00a      	beq.n	8000f92 <__aeabi_fmul+0x11e>
 8000f7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f80:	bf18      	it	ne
 8000f82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	d1d8      	bne.n	8000f3a <__aeabi_fmul+0xc6>
 8000f88:	ea80 0001 	eor.w	r0, r0, r1
 8000f8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f90:	4770      	bx	lr
 8000f92:	f090 0f00 	teq	r0, #0
 8000f96:	bf17      	itett	ne
 8000f98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f9c:	4608      	moveq	r0, r1
 8000f9e:	f091 0f00 	teqne	r1, #0
 8000fa2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000fa6:	d014      	beq.n	8000fd2 <__aeabi_fmul+0x15e>
 8000fa8:	ea92 0f0c 	teq	r2, ip
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_fmul+0x13e>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d10f      	bne.n	8000fd2 <__aeabi_fmul+0x15e>
 8000fb2:	ea93 0f0c 	teq	r3, ip
 8000fb6:	d103      	bne.n	8000fc0 <__aeabi_fmul+0x14c>
 8000fb8:	024b      	lsls	r3, r1, #9
 8000fba:	bf18      	it	ne
 8000fbc:	4608      	movne	r0, r1
 8000fbe:	d108      	bne.n	8000fd2 <__aeabi_fmul+0x15e>
 8000fc0:	ea80 0001 	eor.w	r0, r0, r1
 8000fc4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fc8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fd0:	4770      	bx	lr
 8000fd2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fd6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fda:	4770      	bx	lr

08000fdc <__aeabi_fdiv>:
 8000fdc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fe0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe4:	bf1e      	ittt	ne
 8000fe6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fea:	ea92 0f0c 	teqne	r2, ip
 8000fee:	ea93 0f0c 	teqne	r3, ip
 8000ff2:	d069      	beq.n	80010c8 <__aeabi_fdiv+0xec>
 8000ff4:	eba2 0203 	sub.w	r2, r2, r3
 8000ff8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ffc:	0249      	lsls	r1, r1, #9
 8000ffe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001002:	d037      	beq.n	8001074 <__aeabi_fdiv+0x98>
 8001004:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001008:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800100c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001010:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001014:	428b      	cmp	r3, r1
 8001016:	bf38      	it	cc
 8001018:	005b      	lslcc	r3, r3, #1
 800101a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800101e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001022:	428b      	cmp	r3, r1
 8001024:	bf24      	itt	cs
 8001026:	1a5b      	subcs	r3, r3, r1
 8001028:	ea40 000c 	orrcs.w	r0, r0, ip
 800102c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001030:	bf24      	itt	cs
 8001032:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001036:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800103a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800103e:	bf24      	itt	cs
 8001040:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001044:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001048:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800104c:	bf24      	itt	cs
 800104e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001052:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	bf18      	it	ne
 800105a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800105e:	d1e0      	bne.n	8001022 <__aeabi_fdiv+0x46>
 8001060:	2afd      	cmp	r2, #253	@ 0xfd
 8001062:	f63f af50 	bhi.w	8000f06 <__aeabi_fmul+0x92>
 8001066:	428b      	cmp	r3, r1
 8001068:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800106c:	bf08      	it	eq
 800106e:	f020 0001 	biceq.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001078:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800107c:	327f      	adds	r2, #127	@ 0x7f
 800107e:	bfc2      	ittt	gt
 8001080:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001084:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001088:	4770      	bxgt	lr
 800108a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	3a01      	subs	r2, #1
 8001094:	e737      	b.n	8000f06 <__aeabi_fmul+0x92>
 8001096:	f092 0f00 	teq	r2, #0
 800109a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0040      	lsleq	r0, r0, #1
 80010a2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80010a6:	3a01      	subeq	r2, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xc2>
 80010aa:	ea40 000c 	orr.w	r0, r0, ip
 80010ae:	f093 0f00 	teq	r3, #0
 80010b2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010b6:	bf02      	ittt	eq
 80010b8:	0049      	lsleq	r1, r1, #1
 80010ba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010be:	3b01      	subeq	r3, #1
 80010c0:	d0f9      	beq.n	80010b6 <__aeabi_fdiv+0xda>
 80010c2:	ea41 010c 	orr.w	r1, r1, ip
 80010c6:	e795      	b.n	8000ff4 <__aeabi_fdiv+0x18>
 80010c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010cc:	ea92 0f0c 	teq	r2, ip
 80010d0:	d108      	bne.n	80010e4 <__aeabi_fdiv+0x108>
 80010d2:	0242      	lsls	r2, r0, #9
 80010d4:	f47f af7d 	bne.w	8000fd2 <__aeabi_fmul+0x15e>
 80010d8:	ea93 0f0c 	teq	r3, ip
 80010dc:	f47f af70 	bne.w	8000fc0 <__aeabi_fmul+0x14c>
 80010e0:	4608      	mov	r0, r1
 80010e2:	e776      	b.n	8000fd2 <__aeabi_fmul+0x15e>
 80010e4:	ea93 0f0c 	teq	r3, ip
 80010e8:	d104      	bne.n	80010f4 <__aeabi_fdiv+0x118>
 80010ea:	024b      	lsls	r3, r1, #9
 80010ec:	f43f af4c 	beq.w	8000f88 <__aeabi_fmul+0x114>
 80010f0:	4608      	mov	r0, r1
 80010f2:	e76e      	b.n	8000fd2 <__aeabi_fmul+0x15e>
 80010f4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010f8:	bf18      	it	ne
 80010fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010fe:	d1ca      	bne.n	8001096 <__aeabi_fdiv+0xba>
 8001100:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001104:	f47f af5c 	bne.w	8000fc0 <__aeabi_fmul+0x14c>
 8001108:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800110c:	f47f af3c 	bne.w	8000f88 <__aeabi_fmul+0x114>
 8001110:	e75f      	b.n	8000fd2 <__aeabi_fmul+0x15e>
 8001112:	bf00      	nop

08001114 <__aeabi_uldivmod>:
 8001114:	b953      	cbnz	r3, 800112c <__aeabi_uldivmod+0x18>
 8001116:	b94a      	cbnz	r2, 800112c <__aeabi_uldivmod+0x18>
 8001118:	2900      	cmp	r1, #0
 800111a:	bf08      	it	eq
 800111c:	2800      	cmpeq	r0, #0
 800111e:	bf1c      	itt	ne
 8001120:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001124:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001128:	f000 b9be 	b.w	80014a8 <__aeabi_idiv0>
 800112c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001130:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001134:	f000 f83c 	bl	80011b0 <__udivmoddi4>
 8001138:	f8dd e004 	ldr.w	lr, [sp, #4]
 800113c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001140:	b004      	add	sp, #16
 8001142:	4770      	bx	lr

08001144 <__aeabi_d2lz>:
 8001144:	b538      	push	{r3, r4, r5, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	2300      	movs	r3, #0
 800114a:	4604      	mov	r4, r0
 800114c:	460d      	mov	r5, r1
 800114e:	f7ff fcad 	bl	8000aac <__aeabi_dcmplt>
 8001152:	b928      	cbnz	r0, 8001160 <__aeabi_d2lz+0x1c>
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800115c:	f000 b80a 	b.w	8001174 <__aeabi_d2ulz>
 8001160:	4620      	mov	r0, r4
 8001162:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001166:	f000 f805 	bl	8001174 <__aeabi_d2ulz>
 800116a:	4240      	negs	r0, r0
 800116c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001170:	bd38      	pop	{r3, r4, r5, pc}
 8001172:	bf00      	nop

08001174 <__aeabi_d2ulz>:
 8001174:	b5d0      	push	{r4, r6, r7, lr}
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <__aeabi_d2ulz+0x34>)
 8001178:	2200      	movs	r2, #0
 800117a:	4606      	mov	r6, r0
 800117c:	460f      	mov	r7, r1
 800117e:	f7ff fa23 	bl	80005c8 <__aeabi_dmul>
 8001182:	f7ff fcf9 	bl	8000b78 <__aeabi_d2uiz>
 8001186:	4604      	mov	r4, r0
 8001188:	f7ff f9a4 	bl	80004d4 <__aeabi_ui2d>
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <__aeabi_d2ulz+0x38>)
 800118e:	2200      	movs	r2, #0
 8001190:	f7ff fa1a 	bl	80005c8 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4630      	mov	r0, r6
 800119a:	4639      	mov	r1, r7
 800119c:	f7ff f85c 	bl	8000258 <__aeabi_dsub>
 80011a0:	f7ff fcea 	bl	8000b78 <__aeabi_d2uiz>
 80011a4:	4621      	mov	r1, r4
 80011a6:	bdd0      	pop	{r4, r6, r7, pc}
 80011a8:	3df00000 	.word	0x3df00000
 80011ac:	41f00000 	.word	0x41f00000

080011b0 <__udivmoddi4>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	9d08      	ldr	r5, [sp, #32]
 80011b6:	468e      	mov	lr, r1
 80011b8:	4604      	mov	r4, r0
 80011ba:	4688      	mov	r8, r1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d14a      	bne.n	8001256 <__udivmoddi4+0xa6>
 80011c0:	428a      	cmp	r2, r1
 80011c2:	4617      	mov	r7, r2
 80011c4:	d962      	bls.n	800128c <__udivmoddi4+0xdc>
 80011c6:	fab2 f682 	clz	r6, r2
 80011ca:	b14e      	cbz	r6, 80011e0 <__udivmoddi4+0x30>
 80011cc:	f1c6 0320 	rsb	r3, r6, #32
 80011d0:	fa01 f806 	lsl.w	r8, r1, r6
 80011d4:	fa20 f303 	lsr.w	r3, r0, r3
 80011d8:	40b7      	lsls	r7, r6
 80011da:	ea43 0808 	orr.w	r8, r3, r8
 80011de:	40b4      	lsls	r4, r6
 80011e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011e4:	fa1f fc87 	uxth.w	ip, r7
 80011e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80011ec:	0c23      	lsrs	r3, r4, #16
 80011ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80011f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011f6:	fb01 f20c 	mul.w	r2, r1, ip
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d909      	bls.n	8001212 <__udivmoddi4+0x62>
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001204:	f080 80ea 	bcs.w	80013dc <__udivmoddi4+0x22c>
 8001208:	429a      	cmp	r2, r3
 800120a:	f240 80e7 	bls.w	80013dc <__udivmoddi4+0x22c>
 800120e:	3902      	subs	r1, #2
 8001210:	443b      	add	r3, r7
 8001212:	1a9a      	subs	r2, r3, r2
 8001214:	b2a3      	uxth	r3, r4
 8001216:	fbb2 f0fe 	udiv	r0, r2, lr
 800121a:	fb0e 2210 	mls	r2, lr, r0, r2
 800121e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001222:	fb00 fc0c 	mul.w	ip, r0, ip
 8001226:	459c      	cmp	ip, r3
 8001228:	d909      	bls.n	800123e <__udivmoddi4+0x8e>
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001230:	f080 80d6 	bcs.w	80013e0 <__udivmoddi4+0x230>
 8001234:	459c      	cmp	ip, r3
 8001236:	f240 80d3 	bls.w	80013e0 <__udivmoddi4+0x230>
 800123a:	443b      	add	r3, r7
 800123c:	3802      	subs	r0, #2
 800123e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001242:	eba3 030c 	sub.w	r3, r3, ip
 8001246:	2100      	movs	r1, #0
 8001248:	b11d      	cbz	r5, 8001252 <__udivmoddi4+0xa2>
 800124a:	40f3      	lsrs	r3, r6
 800124c:	2200      	movs	r2, #0
 800124e:	e9c5 3200 	strd	r3, r2, [r5]
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	428b      	cmp	r3, r1
 8001258:	d905      	bls.n	8001266 <__udivmoddi4+0xb6>
 800125a:	b10d      	cbz	r5, 8001260 <__udivmoddi4+0xb0>
 800125c:	e9c5 0100 	strd	r0, r1, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	4608      	mov	r0, r1
 8001264:	e7f5      	b.n	8001252 <__udivmoddi4+0xa2>
 8001266:	fab3 f183 	clz	r1, r3
 800126a:	2900      	cmp	r1, #0
 800126c:	d146      	bne.n	80012fc <__udivmoddi4+0x14c>
 800126e:	4573      	cmp	r3, lr
 8001270:	d302      	bcc.n	8001278 <__udivmoddi4+0xc8>
 8001272:	4282      	cmp	r2, r0
 8001274:	f200 8105 	bhi.w	8001482 <__udivmoddi4+0x2d2>
 8001278:	1a84      	subs	r4, r0, r2
 800127a:	eb6e 0203 	sbc.w	r2, lr, r3
 800127e:	2001      	movs	r0, #1
 8001280:	4690      	mov	r8, r2
 8001282:	2d00      	cmp	r5, #0
 8001284:	d0e5      	beq.n	8001252 <__udivmoddi4+0xa2>
 8001286:	e9c5 4800 	strd	r4, r8, [r5]
 800128a:	e7e2      	b.n	8001252 <__udivmoddi4+0xa2>
 800128c:	2a00      	cmp	r2, #0
 800128e:	f000 8090 	beq.w	80013b2 <__udivmoddi4+0x202>
 8001292:	fab2 f682 	clz	r6, r2
 8001296:	2e00      	cmp	r6, #0
 8001298:	f040 80a4 	bne.w	80013e4 <__udivmoddi4+0x234>
 800129c:	1a8a      	subs	r2, r1, r2
 800129e:	0c03      	lsrs	r3, r0, #16
 80012a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012a4:	b280      	uxth	r0, r0
 80012a6:	b2bc      	uxth	r4, r7
 80012a8:	2101      	movs	r1, #1
 80012aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80012ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80012b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012b6:	fb04 f20c 	mul.w	r2, r4, ip
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d907      	bls.n	80012ce <__udivmoddi4+0x11e>
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80012c4:	d202      	bcs.n	80012cc <__udivmoddi4+0x11c>
 80012c6:	429a      	cmp	r2, r3
 80012c8:	f200 80e0 	bhi.w	800148c <__udivmoddi4+0x2dc>
 80012cc:	46c4      	mov	ip, r8
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80012d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80012d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012dc:	fb02 f404 	mul.w	r4, r2, r4
 80012e0:	429c      	cmp	r4, r3
 80012e2:	d907      	bls.n	80012f4 <__udivmoddi4+0x144>
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80012ea:	d202      	bcs.n	80012f2 <__udivmoddi4+0x142>
 80012ec:	429c      	cmp	r4, r3
 80012ee:	f200 80ca 	bhi.w	8001486 <__udivmoddi4+0x2d6>
 80012f2:	4602      	mov	r2, r0
 80012f4:	1b1b      	subs	r3, r3, r4
 80012f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80012fa:	e7a5      	b.n	8001248 <__udivmoddi4+0x98>
 80012fc:	f1c1 0620 	rsb	r6, r1, #32
 8001300:	408b      	lsls	r3, r1
 8001302:	fa22 f706 	lsr.w	r7, r2, r6
 8001306:	431f      	orrs	r7, r3
 8001308:	fa0e f401 	lsl.w	r4, lr, r1
 800130c:	fa20 f306 	lsr.w	r3, r0, r6
 8001310:	fa2e fe06 	lsr.w	lr, lr, r6
 8001314:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001318:	4323      	orrs	r3, r4
 800131a:	fa00 f801 	lsl.w	r8, r0, r1
 800131e:	fa1f fc87 	uxth.w	ip, r7
 8001322:	fbbe f0f9 	udiv	r0, lr, r9
 8001326:	0c1c      	lsrs	r4, r3, #16
 8001328:	fb09 ee10 	mls	lr, r9, r0, lr
 800132c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001330:	fb00 fe0c 	mul.w	lr, r0, ip
 8001334:	45a6      	cmp	lr, r4
 8001336:	fa02 f201 	lsl.w	r2, r2, r1
 800133a:	d909      	bls.n	8001350 <__udivmoddi4+0x1a0>
 800133c:	193c      	adds	r4, r7, r4
 800133e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8001342:	f080 809c 	bcs.w	800147e <__udivmoddi4+0x2ce>
 8001346:	45a6      	cmp	lr, r4
 8001348:	f240 8099 	bls.w	800147e <__udivmoddi4+0x2ce>
 800134c:	3802      	subs	r0, #2
 800134e:	443c      	add	r4, r7
 8001350:	eba4 040e 	sub.w	r4, r4, lr
 8001354:	fa1f fe83 	uxth.w	lr, r3
 8001358:	fbb4 f3f9 	udiv	r3, r4, r9
 800135c:	fb09 4413 	mls	r4, r9, r3, r4
 8001360:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001364:	fb03 fc0c 	mul.w	ip, r3, ip
 8001368:	45a4      	cmp	ip, r4
 800136a:	d908      	bls.n	800137e <__udivmoddi4+0x1ce>
 800136c:	193c      	adds	r4, r7, r4
 800136e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8001372:	f080 8082 	bcs.w	800147a <__udivmoddi4+0x2ca>
 8001376:	45a4      	cmp	ip, r4
 8001378:	d97f      	bls.n	800147a <__udivmoddi4+0x2ca>
 800137a:	3b02      	subs	r3, #2
 800137c:	443c      	add	r4, r7
 800137e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001382:	eba4 040c 	sub.w	r4, r4, ip
 8001386:	fba0 ec02 	umull	lr, ip, r0, r2
 800138a:	4564      	cmp	r4, ip
 800138c:	4673      	mov	r3, lr
 800138e:	46e1      	mov	r9, ip
 8001390:	d362      	bcc.n	8001458 <__udivmoddi4+0x2a8>
 8001392:	d05f      	beq.n	8001454 <__udivmoddi4+0x2a4>
 8001394:	b15d      	cbz	r5, 80013ae <__udivmoddi4+0x1fe>
 8001396:	ebb8 0203 	subs.w	r2, r8, r3
 800139a:	eb64 0409 	sbc.w	r4, r4, r9
 800139e:	fa04 f606 	lsl.w	r6, r4, r6
 80013a2:	fa22 f301 	lsr.w	r3, r2, r1
 80013a6:	431e      	orrs	r6, r3
 80013a8:	40cc      	lsrs	r4, r1
 80013aa:	e9c5 6400 	strd	r6, r4, [r5]
 80013ae:	2100      	movs	r1, #0
 80013b0:	e74f      	b.n	8001252 <__udivmoddi4+0xa2>
 80013b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80013b6:	0c01      	lsrs	r1, r0, #16
 80013b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013bc:	b280      	uxth	r0, r0
 80013be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013c2:	463b      	mov	r3, r7
 80013c4:	4638      	mov	r0, r7
 80013c6:	463c      	mov	r4, r7
 80013c8:	46b8      	mov	r8, r7
 80013ca:	46be      	mov	lr, r7
 80013cc:	2620      	movs	r6, #32
 80013ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80013d2:	eba2 0208 	sub.w	r2, r2, r8
 80013d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013da:	e766      	b.n	80012aa <__udivmoddi4+0xfa>
 80013dc:	4601      	mov	r1, r0
 80013de:	e718      	b.n	8001212 <__udivmoddi4+0x62>
 80013e0:	4610      	mov	r0, r2
 80013e2:	e72c      	b.n	800123e <__udivmoddi4+0x8e>
 80013e4:	f1c6 0220 	rsb	r2, r6, #32
 80013e8:	fa2e f302 	lsr.w	r3, lr, r2
 80013ec:	40b7      	lsls	r7, r6
 80013ee:	40b1      	lsls	r1, r6
 80013f0:	fa20 f202 	lsr.w	r2, r0, r2
 80013f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013f8:	430a      	orrs	r2, r1
 80013fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80013fe:	b2bc      	uxth	r4, r7
 8001400:	fb0e 3318 	mls	r3, lr, r8, r3
 8001404:	0c11      	lsrs	r1, r2, #16
 8001406:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800140a:	fb08 f904 	mul.w	r9, r8, r4
 800140e:	40b0      	lsls	r0, r6
 8001410:	4589      	cmp	r9, r1
 8001412:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001416:	b280      	uxth	r0, r0
 8001418:	d93e      	bls.n	8001498 <__udivmoddi4+0x2e8>
 800141a:	1879      	adds	r1, r7, r1
 800141c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001420:	d201      	bcs.n	8001426 <__udivmoddi4+0x276>
 8001422:	4589      	cmp	r9, r1
 8001424:	d81f      	bhi.n	8001466 <__udivmoddi4+0x2b6>
 8001426:	eba1 0109 	sub.w	r1, r1, r9
 800142a:	fbb1 f9fe 	udiv	r9, r1, lr
 800142e:	fb09 f804 	mul.w	r8, r9, r4
 8001432:	fb0e 1119 	mls	r1, lr, r9, r1
 8001436:	b292      	uxth	r2, r2
 8001438:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800143c:	4542      	cmp	r2, r8
 800143e:	d229      	bcs.n	8001494 <__udivmoddi4+0x2e4>
 8001440:	18ba      	adds	r2, r7, r2
 8001442:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001446:	d2c4      	bcs.n	80013d2 <__udivmoddi4+0x222>
 8001448:	4542      	cmp	r2, r8
 800144a:	d2c2      	bcs.n	80013d2 <__udivmoddi4+0x222>
 800144c:	f1a9 0102 	sub.w	r1, r9, #2
 8001450:	443a      	add	r2, r7
 8001452:	e7be      	b.n	80013d2 <__udivmoddi4+0x222>
 8001454:	45f0      	cmp	r8, lr
 8001456:	d29d      	bcs.n	8001394 <__udivmoddi4+0x1e4>
 8001458:	ebbe 0302 	subs.w	r3, lr, r2
 800145c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001460:	3801      	subs	r0, #1
 8001462:	46e1      	mov	r9, ip
 8001464:	e796      	b.n	8001394 <__udivmoddi4+0x1e4>
 8001466:	eba7 0909 	sub.w	r9, r7, r9
 800146a:	4449      	add	r1, r9
 800146c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001470:	fbb1 f9fe 	udiv	r9, r1, lr
 8001474:	fb09 f804 	mul.w	r8, r9, r4
 8001478:	e7db      	b.n	8001432 <__udivmoddi4+0x282>
 800147a:	4673      	mov	r3, lr
 800147c:	e77f      	b.n	800137e <__udivmoddi4+0x1ce>
 800147e:	4650      	mov	r0, sl
 8001480:	e766      	b.n	8001350 <__udivmoddi4+0x1a0>
 8001482:	4608      	mov	r0, r1
 8001484:	e6fd      	b.n	8001282 <__udivmoddi4+0xd2>
 8001486:	443b      	add	r3, r7
 8001488:	3a02      	subs	r2, #2
 800148a:	e733      	b.n	80012f4 <__udivmoddi4+0x144>
 800148c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001490:	443b      	add	r3, r7
 8001492:	e71c      	b.n	80012ce <__udivmoddi4+0x11e>
 8001494:	4649      	mov	r1, r9
 8001496:	e79c      	b.n	80013d2 <__udivmoddi4+0x222>
 8001498:	eba1 0109 	sub.w	r1, r1, r9
 800149c:	46c4      	mov	ip, r8
 800149e:	fbb1 f9fe 	udiv	r9, r1, lr
 80014a2:	fb09 f804 	mul.w	r8, r9, r4
 80014a6:	e7c4      	b.n	8001432 <__udivmoddi4+0x282>

080014a8 <__aeabi_idiv0>:
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop

080014ac <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80014b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80014ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80014c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d0:	68fb      	ldr	r3, [r7, #12]
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014e0:	2004      	movs	r0, #4
 80014e2:	f7ff ffe3 	bl	80014ac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff ffe0 	bl	80014ac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	200b      	movs	r0, #11
 80014f2:	f001 f83e 	bl	8002572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f6:	200b      	movs	r0, #11
 80014f8:	f001 f855 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	200c      	movs	r0, #12
 8001502:	f001 f836 	bl	8002572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001506:	200c      	movs	r0, #12
 8001508:	f001 f84d 	bl	80025a6 <HAL_NVIC_EnableIRQ>

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800151c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800151e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	2004      	movs	r0, #4
 8001556:	f7ff ffdb 	bl	8001510 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff ffd8 	bl	8001510 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2138      	movs	r1, #56	@ 0x38
 8001564:	4809      	ldr	r0, [pc, #36]	@ (800158c <MX_GPIO_Init+0x4c>)
 8001566:	f001 fd1b 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800156a:	2338      	movs	r3, #56	@ 0x38
 800156c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4803      	ldr	r0, [pc, #12]	@ (800158c <MX_GPIO_Init+0x4c>)
 8001580:	f001 fbae 	bl	8002ce0 <HAL_GPIO_Init>

}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	48000800 	.word	0x48000800

08001590 <_write>:


/* USER CODE BEGIN 0 */
// Redireciona a saída do printf para a USART2
int _write(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <_write+0x28>)
 80015a8:	f002 fe63 	bl	8004272 <HAL_UART_Transmit>
  return len;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000414 	.word	0x20000414

080015bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80015c0:	f000 fe8a 	bl	80022d8 <HAL_Init>
  SystemClock_Config();
 80015c4:	f000 f848 	bl	8001658 <SystemClock_Config>
  MX_GPIO_Init();
 80015c8:	f7ff ffba 	bl	8001540 <MX_GPIO_Init>
  MX_DMA_Init();
 80015cc:	f7ff ff86 	bl	80014dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015d0:	f000 fc32 	bl	8001e38 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 80015d4:	f000 fb30 	bl	8001c38 <MX_SUBGHZ_Init>

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 80015d8:	2001      	movs	r0, #1
 80015da:	f000 fd77 	bl	80020cc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80015de:	2002      	movs	r0, #2
 80015e0:	f000 fd74 	bl	80020cc <BSP_LED_Init>

  printf("\r\n--- Placa 2: Estacao Base LoRa (TX/RX) Ativa ---\r\n");
 80015e4:	4813      	ldr	r0, [pc, #76]	@ (8001634 <main+0x78>)
 80015e6:	f006 f9a5 	bl	8007934 <puts>
  printf("Firmware v2.0 - Comunicacao Bidirecional\r\n");
 80015ea:	4813      	ldr	r0, [pc, #76]	@ (8001638 <main+0x7c>)
 80015ec:	f006 f9a2 	bl	8007934 <puts>
  Radio_Init();
 80015f0:	f000 f966 	bl	80018c0 <Radio_Init>
  printf("Radio LoRa inicializado.\r\n");
 80015f4:	4811      	ldr	r0, [pc, #68]	@ (800163c <main+0x80>)
 80015f6:	f006 f99d 	bl	8007934 <puts>

  // Inicia recepção de comandos via UART (DMA)
  HAL_UART_Receive_DMA(&huart2, pc_command_buffer, PC_COMMAND_BUFFER_SIZE);
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	4910      	ldr	r1, [pc, #64]	@ (8001640 <main+0x84>)
 80015fe:	4811      	ldr	r0, [pc, #68]	@ (8001644 <main+0x88>)
 8001600:	f002 febe 	bl	8004380 <HAL_UART_Receive_DMA>

  // Coloca o rádio em modo de recepção contínua
  SUBGRF_SetRx(0);
 8001604:	2000      	movs	r0, #0
 8001606:	f004 fb5d 	bl	8005cc4 <SUBGRF_SetRx>
  printf("Pronto para receber pacotes LoRa e comandos do PC...\r\n");
 800160a:	480f      	ldr	r0, [pc, #60]	@ (8001648 <main+0x8c>)
 800160c:	f006 f992 	bl	8007934 <puts>
  printf("Comandos disponiveis:\r\n");
 8001610:	480e      	ldr	r0, [pc, #56]	@ (800164c <main+0x90>)
 8001612:	f006 f98f 	bl	8007934 <puts>
  printf("  SET_FREQ=<frequencia_Hz> - Configura frequencia da radiosonda\r\n");
 8001616:	480e      	ldr	r0, [pc, #56]	@ (8001650 <main+0x94>)
 8001618:	f006 f98c 	bl	8007934 <puts>
  printf("  REBOOT                   - Reinicia a Placa 1\r\n\r\n");
 800161c:	480d      	ldr	r0, [pc, #52]	@ (8001654 <main+0x98>)
 800161e:	f006 f989 	bl	8007934 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    ProcessSerialInput();
 8001622:	f000 f81f 	bl	8001664 <ProcessSerialInput>
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001626:	2101      	movs	r1, #1
 8001628:	2000      	movs	r0, #0
 800162a:	f001 fcf7 	bl	800301c <HAL_PWR_EnterSLEEPMode>
    ProcessSerialInput();
 800162e:	bf00      	nop
 8001630:	e7f7      	b.n	8001622 <main+0x66>
 8001632:	bf00      	nop
 8001634:	0800b1a8 	.word	0x0800b1a8
 8001638:	0800b1dc 	.word	0x0800b1dc
 800163c:	0800b208 	.word	0x0800b208
 8001640:	200002fc 	.word	0x200002fc
 8001644:	20000414 	.word	0x20000414
 8001648:	0800b224 	.word	0x0800b224
 800164c:	0800b25c 	.word	0x0800b25c
 8001650:	0800b274 	.word	0x0800b274
 8001654:	0800b2b8 	.word	0x0800b2b8

08001658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  // ... (Código gerado pelo CubeMX, mantido como está) ...
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <ProcessSerialInput>:

/* USER CODE BEGIN 4 */
void ProcessSerialInput(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
    static char line_buffer[PC_COMMAND_BUFFER_SIZE];
    static uint16_t line_pos = 0;

    uint16_t new_pos = PC_COMMAND_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx);
 800166a:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <ProcessSerialInput+0xb0>)
 800166c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	b29b      	uxth	r3, r3
 8001676:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800167a:	80fb      	strh	r3, [r7, #6]

    while(pc_cmd_old_pos != new_pos)
 800167c:	e040      	b.n	8001700 <ProcessSerialInput+0x9c>
    {
        uint8_t current_char = pc_command_buffer[pc_cmd_old_pos];
 800167e:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <ProcessSerialInput+0xb4>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <ProcessSerialInput+0xb8>)
 8001686:	5c9b      	ldrb	r3, [r3, r2]
 8001688:	717b      	strb	r3, [r7, #5]

        // Echo do caractere digitado
        HAL_UART_Transmit(&huart2, &current_char, 1, 100);
 800168a:	1d79      	adds	r1, r7, #5
 800168c:	2364      	movs	r3, #100	@ 0x64
 800168e:	2201      	movs	r2, #1
 8001690:	4820      	ldr	r0, [pc, #128]	@ (8001714 <ProcessSerialInput+0xb0>)
 8001692:	f002 fdee 	bl	8004272 <HAL_UART_Transmit>

        if (current_char == '\r' || current_char == '\n')
 8001696:	797b      	ldrb	r3, [r7, #5]
 8001698:	2b0d      	cmp	r3, #13
 800169a:	d002      	beq.n	80016a2 <ProcessSerialInput+0x3e>
 800169c:	797b      	ldrb	r3, [r7, #5]
 800169e:	2b0a      	cmp	r3, #10
 80016a0:	d113      	bne.n	80016ca <ProcessSerialInput+0x66>
        {
            if (line_pos > 0)
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <ProcessSerialInput+0xbc>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d01d      	beq.n	80016e6 <ProcessSerialInput+0x82>
            {
                printf("\r\n");
 80016aa:	481e      	ldr	r0, [pc, #120]	@ (8001724 <ProcessSerialInput+0xc0>)
 80016ac:	f006 f942 	bl	8007934 <puts>
                line_buffer[line_pos] = '\0';
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <ProcessSerialInput+0xbc>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <ProcessSerialInput+0xc4>)
 80016b8:	2100      	movs	r1, #0
 80016ba:	5499      	strb	r1, [r3, r2]
                ParseAndSendCommand(line_buffer);
 80016bc:	481a      	ldr	r0, [pc, #104]	@ (8001728 <ProcessSerialInput+0xc4>)
 80016be:	f000 f835 	bl	800172c <ParseAndSendCommand>
                line_pos = 0;
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <ProcessSerialInput+0xbc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	801a      	strh	r2, [r3, #0]
            if (line_pos > 0)
 80016c8:	e00d      	b.n	80016e6 <ProcessSerialInput+0x82>
            }
        }
        else if (line_pos < PC_COMMAND_BUFFER_SIZE - 1)
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <ProcessSerialInput+0xbc>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	2b7e      	cmp	r3, #126	@ 0x7e
 80016d0:	d809      	bhi.n	80016e6 <ProcessSerialInput+0x82>
        {
            line_buffer[line_pos++] = current_char;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <ProcessSerialInput+0xbc>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	b291      	uxth	r1, r2
 80016da:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <ProcessSerialInput+0xbc>)
 80016dc:	8011      	strh	r1, [r2, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	7979      	ldrb	r1, [r7, #5]
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <ProcessSerialInput+0xc4>)
 80016e4:	5499      	strb	r1, [r3, r2]
        }

        pc_cmd_old_pos = (pc_cmd_old_pos + 1) % PC_COMMAND_BUFFER_SIZE;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <ProcessSerialInput+0xb4>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	425a      	negs	r2, r3
 80016ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016f6:	bf58      	it	pl
 80016f8:	4253      	negpl	r3, r2
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <ProcessSerialInput+0xb4>)
 80016fe:	801a      	strh	r2, [r3, #0]
    while(pc_cmd_old_pos != new_pos)
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <ProcessSerialInput+0xb4>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	88fa      	ldrh	r2, [r7, #6]
 8001706:	429a      	cmp	r2, r3
 8001708:	d1b9      	bne.n	800167e <ProcessSerialInput+0x1a>
    }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000414 	.word	0x20000414
 8001718:	2000037c 	.word	0x2000037c
 800171c:	200002fc 	.word	0x200002fc
 8001720:	20000380 	.word	0x20000380
 8001724:	0800b2ec 	.word	0x0800b2ec
 8001728:	20000384 	.word	0x20000384

0800172c <ParseAndSendCommand>:

void ParseAndSendCommand(char* cmd_string)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    CommandPayload_t command_payload;
    char* value_str;

    // Converter para maiúsculas para facilitar comparação
    for(int i = 0; cmd_string[i]; i++) {
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e018      	b.n	800176c <ParseAndSendCommand+0x40>
        if(cmd_string[i] >= 'a' && cmd_string[i] <= 'z') {
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b60      	cmp	r3, #96	@ 0x60
 8001744:	d90f      	bls.n	8001766 <ParseAndSendCommand+0x3a>
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001750:	d809      	bhi.n	8001766 <ParseAndSendCommand+0x3a>
            cmd_string[i] = cmd_string[i] - 'a' + 'A';
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	440b      	add	r3, r1
 8001760:	3a20      	subs	r2, #32
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]
    for(int i = 0; cmd_string[i]; i++) {
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1e0      	bne.n	800173a <ParseAndSendCommand+0xe>
        }
    }

    if (strncmp(cmd_string, "SET_FREQ=", 9) == 0)
 8001778:	2209      	movs	r2, #9
 800177a:	4943      	ldr	r1, [pc, #268]	@ (8001888 <ParseAndSendCommand+0x15c>)
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f006 f9e3 	bl	8007b48 <strncmp>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d13a      	bne.n	80017fe <ParseAndSendCommand+0xd2>
    {
        value_str = cmd_string + 9;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3309      	adds	r3, #9
 800178c:	613b      	str	r3, [r7, #16]
        command_payload.command_value = strtoul(value_str, NULL, 10);
 800178e:	220a      	movs	r2, #10
 8001790:	2100      	movs	r1, #0
 8001792:	6938      	ldr	r0, [r7, #16]
 8001794:	f005 f93c 	bl	8006a10 <strtoul>
 8001798:	4603      	mov	r3, r0
 800179a:	f8c7 3009 	str.w	r3, [r7, #9]
        command_payload.command_type = CMD_SET_FREQ;
 800179e:	2301      	movs	r3, #1
 80017a0:	723b      	strb	r3, [r7, #8]

        if(command_payload.command_value < 400000000 ||
 80017a2:	f8d7 3009 	ldr.w	r3, [r7, #9]
 80017a6:	4a39      	ldr	r2, [pc, #228]	@ (800188c <ParseAndSendCommand+0x160>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d904      	bls.n	80017b6 <ParseAndSendCommand+0x8a>
           command_payload.command_value > 500000000)
 80017ac:	f8d7 3009 	ldr.w	r3, [r7, #9]
        if(command_payload.command_value < 400000000 ||
 80017b0:	4a37      	ldr	r2, [pc, #220]	@ (8001890 <ParseAndSendCommand+0x164>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d903      	bls.n	80017be <ParseAndSendCommand+0x92>
        {
            printf("ERRO: Frequencia fora da faixa (400-500 MHz)\r\n");
 80017b6:	4837      	ldr	r0, [pc, #220]	@ (8001894 <ParseAndSendCommand+0x168>)
 80017b8:	f006 f8bc 	bl	8007934 <puts>
 80017bc:	e061      	b.n	8001882 <ParseAndSendCommand+0x156>
            return;
        }

        printf("Enviando comando LoRa: SET_FREQ com valor: %lu Hz\r\n",
 80017be:	f8d7 3009 	ldr.w	r3, [r7, #9]
 80017c2:	4619      	mov	r1, r3
 80017c4:	4834      	ldr	r0, [pc, #208]	@ (8001898 <ParseAndSendCommand+0x16c>)
 80017c6:	f006 f84d 	bl	8007864 <iprintf>
               command_payload.command_value);

        if(!tx_in_progress)
 80017ca:	4b34      	ldr	r3, [pc, #208]	@ (800189c <ParseAndSendCommand+0x170>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f083 0301 	eor.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00d      	beq.n	80017f6 <ParseAndSendCommand+0xca>
        {
            tx_in_progress = true;
 80017da:	4b30      	ldr	r3, [pc, #192]	@ (800189c <ParseAndSendCommand+0x170>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
            BSP_LED_On(LED_RED);
 80017e0:	2002      	movs	r0, #2
 80017e2:	f000 fcad 	bl	8002140 <BSP_LED_On>
            SUBGRF_SendPayload((uint8_t*)&command_payload, COMMAND_SIZE, 0);
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2200      	movs	r2, #0
 80017ec:	2105      	movs	r1, #5
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 f9d8 	bl	8005ba4 <SUBGRF_SendPayload>
 80017f4:	e045      	b.n	8001882 <ParseAndSendCommand+0x156>
        }
        else
        {
            printf("WARN: Radio ocupado, tente novamente.\r\n");
 80017f6:	482a      	ldr	r0, [pc, #168]	@ (80018a0 <ParseAndSendCommand+0x174>)
 80017f8:	f006 f89c 	bl	8007934 <puts>
 80017fc:	e041      	b.n	8001882 <ParseAndSendCommand+0x156>
        }
    }
    else if (strcmp(cmd_string, "REBOOT") == 0)
 80017fe:	4929      	ldr	r1, [pc, #164]	@ (80018a4 <ParseAndSendCommand+0x178>)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7fe fcbd 	bl	8000180 <strcmp>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d126      	bne.n	800185a <ParseAndSendCommand+0x12e>
    {
        command_payload.command_type = CMD_REBOOT;
 800180c:	2302      	movs	r3, #2
 800180e:	723b      	strb	r3, [r7, #8]
        command_payload.command_value = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	727b      	strb	r3, [r7, #9]
 8001814:	2300      	movs	r3, #0
 8001816:	72bb      	strb	r3, [r7, #10]
 8001818:	2300      	movs	r3, #0
 800181a:	72fb      	strb	r3, [r7, #11]
 800181c:	2300      	movs	r3, #0
 800181e:	733b      	strb	r3, [r7, #12]

        printf("Enviando comando LoRa: REBOOT\r\n");
 8001820:	4821      	ldr	r0, [pc, #132]	@ (80018a8 <ParseAndSendCommand+0x17c>)
 8001822:	f006 f887 	bl	8007934 <puts>

        if(!tx_in_progress)
 8001826:	4b1d      	ldr	r3, [pc, #116]	@ (800189c <ParseAndSendCommand+0x170>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f083 0301 	eor.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00d      	beq.n	8001852 <ParseAndSendCommand+0x126>
        {
            tx_in_progress = true;
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <ParseAndSendCommand+0x170>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
            BSP_LED_On(LED_RED);
 800183c:	2002      	movs	r0, #2
 800183e:	f000 fc7f 	bl	8002140 <BSP_LED_On>
            SUBGRF_SendPayload((uint8_t*)&command_payload, COMMAND_SIZE, 0);
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	2200      	movs	r2, #0
 8001848:	2105      	movs	r1, #5
 800184a:	4618      	mov	r0, r3
 800184c:	f004 f9aa 	bl	8005ba4 <SUBGRF_SendPayload>
 8001850:	e017      	b.n	8001882 <ParseAndSendCommand+0x156>
        }
        else
        {
            printf("WARN: Radio ocupado, tente novamente.\r\n");
 8001852:	4813      	ldr	r0, [pc, #76]	@ (80018a0 <ParseAndSendCommand+0x174>)
 8001854:	f006 f86e 	bl	8007934 <puts>
 8001858:	e013      	b.n	8001882 <ParseAndSendCommand+0x156>
        }
    }
    else if (strcmp(cmd_string, "HELP") == 0)
 800185a:	4914      	ldr	r1, [pc, #80]	@ (80018ac <ParseAndSendCommand+0x180>)
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe fc8f 	bl	8000180 <strcmp>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <ParseAndSendCommand+0x150>
    {
        printf("\r\n=== COMANDOS DISPONIVEIS ===\r\n");
 8001868:	4811      	ldr	r0, [pc, #68]	@ (80018b0 <ParseAndSendCommand+0x184>)
 800186a:	f006 f863 	bl	8007934 <puts>
        printf("SET_FREQ=<frequencia_Hz>\r\n");
 800186e:	4811      	ldr	r0, [pc, #68]	@ (80018b4 <ParseAndSendCommand+0x188>)
 8001870:	f006 f860 	bl	8007934 <puts>
        printf("REBOOT\r\n\r\n");
 8001874:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <ParseAndSendCommand+0x18c>)
 8001876:	f006 f85d 	bl	8007934 <puts>
 800187a:	e002      	b.n	8001882 <ParseAndSendCommand+0x156>
    }
    else
    {
        printf("ERRO: Comando desconhecido. Digite HELP para ver as opcoes.\r\n");
 800187c:	480f      	ldr	r0, [pc, #60]	@ (80018bc <ParseAndSendCommand+0x190>)
 800187e:	f006 f859 	bl	8007934 <puts>
    }
}
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	0800b2f0 	.word	0x0800b2f0
 800188c:	17d783ff 	.word	0x17d783ff
 8001890:	1dcd6500 	.word	0x1dcd6500
 8001894:	0800b2fc 	.word	0x0800b2fc
 8001898:	0800b32c 	.word	0x0800b32c
 800189c:	2000037e 	.word	0x2000037e
 80018a0:	0800b360 	.word	0x0800b360
 80018a4:	0800b388 	.word	0x0800b388
 80018a8:	0800b390 	.word	0x0800b390
 80018ac:	0800b3b0 	.word	0x0800b3b0
 80018b0:	0800b3b8 	.word	0x0800b3b8
 80018b4:	0800b3d8 	.word	0x0800b3d8
 80018b8:	0800b3f4 	.word	0x0800b3f4
 80018bc:	0800b400 	.word	0x0800b400

080018c0 <Radio_Init>:

void Radio_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	@ 0x30
 80018c4:	af00      	add	r7, sp, #0
    SUBGRF_Init(RadioOnDioIrq);
 80018c6:	4818      	ldr	r0, [pc, #96]	@ (8001928 <Radio_Init+0x68>)
 80018c8:	f004 f8f2 	bl	8005ab0 <SUBGRF_Init>
    SUBGRF_SetStandby(STDBY_RC);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f004 f9bd 	bl	8005c4c <SUBGRF_SetStandby>
    SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f004 fb70 	bl	8005fb8 <SUBGRF_SetPacketType>
    SUBGRF_SetRfFrequency(RF_FREQUENCY);
 80018d8:	4814      	ldr	r0, [pc, #80]	@ (800192c <Radio_Init+0x6c>)
 80018da:	f004 fb27 	bl	8005f2c <SUBGRF_SetRfFrequency>
    SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 80018de:	2016      	movs	r0, #22
 80018e0:	f004 ff18 	bl	8006714 <SUBGRF_SetRfTxPower>

    ModulationParams_t modulationParams;
    // ... (configuração dos modulationParams) ...
    SUBGRF_SetModulationParams(&modulationParams);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4618      	mov	r0, r3
 80018ea:	f004 fc59 	bl	80061a0 <SUBGRF_SetModulationParams>

    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 80018ee:	2301      	movs	r3, #1
 80018f0:	703b      	strb	r3, [r7, #0]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 80018f2:	2308      	movs	r3, #8
 80018f4:	81fb      	strh	r3, [r7, #14]
    // CRÍTICO: Usar VARIABLE_LENGTH para suportar diferentes tamanhos de payload
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 80018f6:	2300      	movs	r3, #0
 80018f8:	743b      	strb	r3, [r7, #16]
    packetParams.Params.LoRa.PayloadLength = 255;
 80018fa:	23ff      	movs	r3, #255	@ 0xff
 80018fc:	747b      	strb	r3, [r7, #17]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 80018fe:	2301      	movs	r3, #1
 8001900:	74bb      	strb	r3, [r7, #18]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001902:	2300      	movs	r3, #0
 8001904:	74fb      	strb	r3, [r7, #19]
    SUBGRF_SetPacketParams(&packetParams);
 8001906:	463b      	mov	r3, r7
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fd17 	bl	800633c <SUBGRF_SetPacketParams>

    // Habilita interrupções para TX, RX e erros
    SUBGRF_SetDioIrqParams(
 800190e:	2300      	movs	r3, #0
 8001910:	2200      	movs	r2, #0
 8001912:	f240 2143 	movw	r1, #579	@ 0x243
 8001916:	f240 2043 	movw	r0, #579	@ 0x243
 800191a:	f004 faab 	bl	8005e74 <SUBGRF_SetDioIrqParams>
        IRQ_RX_DONE | IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
        IRQ_RX_DONE | IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
        IRQ_RADIO_NONE,
        IRQ_RADIO_NONE
    );
}
 800191e:	bf00      	nop
 8001920:	3730      	adds	r7, #48	@ 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	08001931 	.word	0x08001931
 800192c:	3689cac0 	.word	0x3689cac0

08001930 <RadioOnDioIrq>:

void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq)
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001940:	d041      	beq.n	80019c6 <RadioOnDioIrq+0x96>
 8001942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001946:	dc4b      	bgt.n	80019e0 <RadioOnDioIrq+0xb0>
 8001948:	2b40      	cmp	r3, #64	@ 0x40
 800194a:	d035      	beq.n	80019b8 <RadioOnDioIrq+0x88>
 800194c:	2b40      	cmp	r3, #64	@ 0x40
 800194e:	dc47      	bgt.n	80019e0 <RadioOnDioIrq+0xb0>
 8001950:	2b01      	cmp	r3, #1
 8001952:	d024      	beq.n	800199e <RadioOnDioIrq+0x6e>
 8001954:	2b02      	cmp	r3, #2
 8001956:	d143      	bne.n	80019e0 <RadioOnDioIrq+0xb0>
    {
        case IRQ_RX_DONE:
            {
                uint8_t received_size = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	77fb      	strb	r3, [r7, #31]
                PacketStatus_t packetStatus;
                SUBGRF_GetPayload(LoRa_rx_buffer, &received_size, 255);
 800195c:	f107 031f 	add.w	r3, r7, #31
 8001960:	22ff      	movs	r2, #255	@ 0xff
 8001962:	4619      	mov	r1, r3
 8001964:	4821      	ldr	r0, [pc, #132]	@ (80019ec <RadioOnDioIrq+0xbc>)
 8001966:	f004 f8fb 	bl	8005b60 <SUBGRF_GetPayload>
                SUBGRF_GetPacketStatus(&packetStatus);
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fdac 	bl	80064cc <SUBGRF_GetPacketStatus>
                printf("\r\nPacote LoRa Recebido! RSSI: %d dBm, SNR: %d\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 8001974:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001978:	4619      	mov	r1, r3
 800197a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800197e:	461a      	mov	r2, r3
 8001980:	481b      	ldr	r0, [pc, #108]	@ (80019f0 <RadioOnDioIrq+0xc0>)
 8001982:	f005 ff6f 	bl	8007864 <iprintf>
                BSP_LED_Toggle(LED_GREEN);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 fc0e 	bl	80021a8 <BSP_LED_Toggle>
                ProcessAndPrintPayload(LoRa_rx_buffer, received_size);
 800198c:	7ffb      	ldrb	r3, [r7, #31]
 800198e:	4619      	mov	r1, r3
 8001990:	4816      	ldr	r0, [pc, #88]	@ (80019ec <RadioOnDioIrq+0xbc>)
 8001992:	f000 f837 	bl	8001a04 <ProcessAndPrintPayload>
            }
            SUBGRF_SetRx(0);
 8001996:	2000      	movs	r0, #0
 8001998:	f004 f994 	bl	8005cc4 <SUBGRF_SetRx>
            break;
 800199c:	e021      	b.n	80019e2 <RadioOnDioIrq+0xb2>

        case IRQ_TX_DONE:
            printf("Comando LoRa enviado com sucesso.\r\n");
 800199e:	4815      	ldr	r0, [pc, #84]	@ (80019f4 <RadioOnDioIrq+0xc4>)
 80019a0:	f005 ffc8 	bl	8007934 <puts>
            tx_in_progress = false;
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <RadioOnDioIrq+0xc8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
            BSP_LED_Off(LED_RED);
 80019aa:	2002      	movs	r0, #2
 80019ac:	f000 fbe2 	bl	8002174 <BSP_LED_Off>
            SUBGRF_SetRx(0); // Volta a ouvir
 80019b0:	2000      	movs	r0, #0
 80019b2:	f004 f987 	bl	8005cc4 <SUBGRF_SetRx>
            break;
 80019b6:	e014      	b.n	80019e2 <RadioOnDioIrq+0xb2>

        case IRQ_CRC_ERROR:
             printf("WARN: Erro de CRC no pacote LoRa.\r\n");
 80019b8:	4810      	ldr	r0, [pc, #64]	@ (80019fc <RadioOnDioIrq+0xcc>)
 80019ba:	f005 ffbb 	bl	8007934 <puts>
             SUBGRF_SetRx(0);
 80019be:	2000      	movs	r0, #0
 80019c0:	f004 f980 	bl	8005cc4 <SUBGRF_SetRx>
             break;
 80019c4:	e00d      	b.n	80019e2 <RadioOnDioIrq+0xb2>
        case IRQ_RX_TX_TIMEOUT:
            printf("WARN: Timeout no radio.\r\n");
 80019c6:	480e      	ldr	r0, [pc, #56]	@ (8001a00 <RadioOnDioIrq+0xd0>)
 80019c8:	f005 ffb4 	bl	8007934 <puts>
            tx_in_progress = false; // Libera a flag de TX
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <RadioOnDioIrq+0xc8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
            BSP_LED_Off(LED_RED);
 80019d2:	2002      	movs	r0, #2
 80019d4:	f000 fbce 	bl	8002174 <BSP_LED_Off>
            SUBGRF_SetRx(0);
 80019d8:	2000      	movs	r0, #0
 80019da:	f004 f973 	bl	8005cc4 <SUBGRF_SetRx>
             break;
 80019de:	e000      	b.n	80019e2 <RadioOnDioIrq+0xb2>

        default:
            break;
 80019e0:	bf00      	nop
    }
}
 80019e2:	bf00      	nop
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200001fc 	.word	0x200001fc
 80019f0:	0800b440 	.word	0x0800b440
 80019f4:	0800b470 	.word	0x0800b470
 80019f8:	2000037e 	.word	0x2000037e
 80019fc:	0800b494 	.word	0x0800b494
 8001a00:	0800b4b8 	.word	0x0800b4b8

08001a04 <ProcessAndPrintPayload>:

void ProcessAndPrintPayload(uint8_t* buffer, uint8_t size) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
  if (size == PAYLOAD_SIZE) {
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	2b14      	cmp	r3, #20
 8001a14:	d173      	bne.n	8001afe <ProcessAndPrintPayload+0xfa>
      LoRaPayload_t* telemetry = (LoRaPayload_t*)buffer;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	61fb      	str	r3, [r7, #28]

      float latitude = telemetry->latitude_raw / 10000000.0f;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f9d4 	bl	8000dcc <__aeabi_i2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	493a      	ldr	r1, [pc, #232]	@ (8001b10 <ProcessAndPrintPayload+0x10c>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fad7 	bl	8000fdc <__aeabi_fdiv>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	61bb      	str	r3, [r7, #24]
      float longitude = telemetry->longitude_raw / 10000000.0f;
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f9c8 	bl	8000dcc <__aeabi_i2f>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4934      	ldr	r1, [pc, #208]	@ (8001b10 <ProcessAndPrintPayload+0x10c>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff facb 	bl	8000fdc <__aeabi_fdiv>
 8001a46:	4603      	mov	r3, r0
 8001a48:	617b      	str	r3, [r7, #20]
      float altitude_m = telemetry->altitude_raw / 1000.0f;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f9bc 	bl	8000dcc <__aeabi_i2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	492f      	ldr	r1, [pc, #188]	@ (8001b14 <ProcessAndPrintPayload+0x110>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fabf 	bl	8000fdc <__aeabi_fdiv>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	613b      	str	r3, [r7, #16]

      bool gpsFixOK = (telemetry->sats_and_fix >> 7) & 0x01;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	7cdb      	ldrb	r3, [r3, #19]
 8001a66:	09db      	lsrs	r3, r3, #7
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
      uint8_t satCount = telemetry->sats_and_fix & 0x7F;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	7cdb      	ldrb	r3, [r3, #19]
 8001a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a80:	73bb      	strb	r3, [r7, #14]

      printf("\r\n---[ PACOTE DE TELEMETRIA DECODIFICADO ]---\r\n");
 8001a82:	4825      	ldr	r0, [pc, #148]	@ (8001b18 <ProcessAndPrintPayload+0x114>)
 8001a84:	f005 ff56 	bl	8007934 <puts>
      printf("  ID do Pacote:   %lu\r\n", telemetry->packet_id);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4823      	ldr	r0, [pc, #140]	@ (8001b1c <ProcessAndPrintPayload+0x118>)
 8001a90:	f005 fee8 	bl	8007864 <iprintf>
      printf("  Latitude:       %f\r\n", latitude);
 8001a94:	69b8      	ldr	r0, [r7, #24]
 8001a96:	f7fe fd3f 	bl	8000518 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4820      	ldr	r0, [pc, #128]	@ (8001b20 <ProcessAndPrintPayload+0x11c>)
 8001aa0:	f005 fee0 	bl	8007864 <iprintf>
      printf("  Longitude:      %f\r\n", longitude);
 8001aa4:	6978      	ldr	r0, [r7, #20]
 8001aa6:	f7fe fd37 	bl	8000518 <__aeabi_f2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	481d      	ldr	r0, [pc, #116]	@ (8001b24 <ProcessAndPrintPayload+0x120>)
 8001ab0:	f005 fed8 	bl	8007864 <iprintf>
      printf("  Altitude:       %.2f m\r\n", altitude_m);
 8001ab4:	6938      	ldr	r0, [r7, #16]
 8001ab6:	f7fe fd2f 	bl	8000518 <__aeabi_f2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	481a      	ldr	r0, [pc, #104]	@ (8001b28 <ProcessAndPrintPayload+0x124>)
 8001ac0:	f005 fed0 	bl	8007864 <iprintf>
      printf("  Voltagem:       %u mV\r\n", telemetry->voltage_mv);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	8a1b      	ldrh	r3, [r3, #16]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	4817      	ldr	r0, [pc, #92]	@ (8001b2c <ProcessAndPrintPayload+0x128>)
 8001ace:	f005 fec9 	bl	8007864 <iprintf>
      printf("  Temp. Radio:    %d C\r\n", telemetry->radio_temp_c);
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4815      	ldr	r0, [pc, #84]	@ (8001b30 <ProcessAndPrintPayload+0x12c>)
 8001adc:	f005 fec2 	bl	8007864 <iprintf>
      printf("  Status GPS:     %s (Satelites: %u)\r\n", gpsFixOK ? "FIX OK" : "NO FIX", satCount);
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <ProcessAndPrintPayload+0xe6>
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <ProcessAndPrintPayload+0x130>)
 8001ae8:	e000      	b.n	8001aec <ProcessAndPrintPayload+0xe8>
 8001aea:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <ProcessAndPrintPayload+0x134>)
 8001aec:	7bba      	ldrb	r2, [r7, #14]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4812      	ldr	r0, [pc, #72]	@ (8001b3c <ProcessAndPrintPayload+0x138>)
 8001af2:	f005 feb7 	bl	8007864 <iprintf>
      printf("-------------------------------------------\r\n\r\n");
 8001af6:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <ProcessAndPrintPayload+0x13c>)
 8001af8:	f005 ff1c 	bl	8007934 <puts>
  } else {
      printf("INFO: Recebido pacote LoRa de tipo desconhecido (tamanho: %d)\r\n", size);
  }
}
 8001afc:	e004      	b.n	8001b08 <ProcessAndPrintPayload+0x104>
      printf("INFO: Recebido pacote LoRa de tipo desconhecido (tamanho: %d)\r\n", size);
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	4619      	mov	r1, r3
 8001b02:	4810      	ldr	r0, [pc, #64]	@ (8001b44 <ProcessAndPrintPayload+0x140>)
 8001b04:	f005 feae 	bl	8007864 <iprintf>
}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	4b189680 	.word	0x4b189680
 8001b14:	447a0000 	.word	0x447a0000
 8001b18:	0800b4d4 	.word	0x0800b4d4
 8001b1c:	0800b504 	.word	0x0800b504
 8001b20:	0800b51c 	.word	0x0800b51c
 8001b24:	0800b534 	.word	0x0800b534
 8001b28:	0800b54c 	.word	0x0800b54c
 8001b2c:	0800b568 	.word	0x0800b568
 8001b30:	0800b584 	.word	0x0800b584
 8001b34:	0800b5a0 	.word	0x0800b5a0
 8001b38:	0800b5a8 	.word	0x0800b5a8
 8001b3c:	0800b5b0 	.word	0x0800b5b0
 8001b40:	0800b5d8 	.word	0x0800b5d8
 8001b44:	0800b608 	.word	0x0800b608

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <Error_Handler+0x8>

08001b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <NMI_Handler+0x4>

08001b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <MemManage_Handler+0x4>

08001b78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb0:	f000 fbec 	bl	800238c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <DMA1_Channel1_IRQHandler+0x10>)
 8001bbe:	f000 fef1 	bl	80029a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200004a8 	.word	0x200004a8

08001bcc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <DMA1_Channel2_IRQHandler+0x10>)
 8001bd2:	f000 fee7 	bl	80029a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000508 	.word	0x20000508

08001be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <USART2_IRQHandler+0x10>)
 8001be6:	f002 fc17 	bl	8004418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000414 	.word	0x20000414

08001bf4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001bfa:	f002 f91b 	bl	8003e34 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000404 	.word	0x20000404

08001c08 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <MX_SUBGHZ_Init+0x20>)
 8001c3e:	2210      	movs	r2, #16
 8001c40:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <MX_SUBGHZ_Init+0x20>)
 8001c44:	f001 fe74 	bl	8003930 <HAL_SUBGHZ_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001c4e:	f7ff ff7b 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000404 	.word	0x20000404

08001c5c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff ffcf 	bl	8001c08 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2032      	movs	r0, #50	@ 0x32
 8001c70:	f000 fc7f 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001c74:	2032      	movs	r0, #50	@ 0x32
 8001c76:	f000 fc96 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  return 1;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c9a:	f005 ffb1 	bl	8007c00 <__errno>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_exit>:

void _exit (int status)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ffe7 	bl	8001c90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc2:	bf00      	nop
 8001cc4:	e7fd      	b.n	8001cc2 <_exit+0x12>

08001cc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e00a      	b.n	8001cee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd8:	f3af 8000 	nop.w
 8001cdc:	4601      	mov	r1, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	60ba      	str	r2, [r7, #8]
 8001ce4:	b2ca      	uxtb	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbf0      	blt.n	8001cd8 <_read+0x12>
  }

  return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d26:	605a      	str	r2, [r3, #4]
  return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <_isatty>:

int _isatty(int file)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f005 ff36 	bl	8007c00 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20010000 	.word	0x20010000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	20000410 	.word	0x20000410
 8001dc8:	200006c8 	.word	0x200006c8

08001dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <LL_AHB2_GRP1_EnableClock>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001de6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <LL_APB1_GRP1_EnableClock>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e3e:	4a23      	ldr	r2, [pc, #140]	@ (8001ecc <MX_USART2_UART_Init+0x94>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e42:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e80:	4811      	ldr	r0, [pc, #68]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e82:	f002 f9a6 	bl	80041d2 <HAL_UART_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e8c:	f7ff fe5c 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e90:	2100      	movs	r1, #0
 8001e92:	480d      	ldr	r0, [pc, #52]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001e94:	f003 fd1a 	bl	80058cc <HAL_UARTEx_SetTxFifoThreshold>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e9e:	f7ff fe53 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4808      	ldr	r0, [pc, #32]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001ea6:	f003 fd4f 	bl	8005948 <HAL_UARTEx_SetRxFifoThreshold>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001eb0:	f7ff fe4a 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eb4:	4804      	ldr	r0, [pc, #16]	@ (8001ec8 <MX_USART2_UART_Init+0x90>)
 8001eb6:	f003 fcd1 	bl	800585c <HAL_UARTEx_DisableFifoMode>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ec0:	f7ff fe42 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000414 	.word	0x20000414
 8001ecc:	40004400 	.word	0x40004400

08001ed0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b096      	sub	sp, #88	@ 0x58
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2238      	movs	r2, #56	@ 0x38
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f005 fe21 	bl	8007b38 <memset>
  if(uartHandle->Instance==USART2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a4e      	ldr	r2, [pc, #312]	@ (8002034 <HAL_UART_MspInit+0x164>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 8094 	bne.w	800202a <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f06:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001f0a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 fb59 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001f1c:	f7ff fe14 	bl	8001b48 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f20:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001f24:	f7ff ff70 	bl	8001e08 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff ff55 	bl	8001dd8 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001f2e:	230c      	movs	r3, #12
 8001f30:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f3e:	2307      	movs	r3, #7
 8001f40:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4c:	f000 fec8 	bl	8002ce0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001f50:	4b39      	ldr	r3, [pc, #228]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f52:	4a3a      	ldr	r2, [pc, #232]	@ (800203c <HAL_UART_MspInit+0x16c>)
 8001f54:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001f56:	4b38      	ldr	r3, [pc, #224]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f58:	2213      	movs	r2, #19
 8001f5a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f5c:	4b36      	ldr	r3, [pc, #216]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f62:	4b35      	ldr	r3, [pc, #212]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f68:	4b33      	ldr	r3, [pc, #204]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f6a:	2280      	movs	r2, #128	@ 0x80
 8001f6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f6e:	4b32      	ldr	r3, [pc, #200]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f74:	4b30      	ldr	r3, [pc, #192]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f80:	4b2d      	ldr	r3, [pc, #180]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f86:	482c      	ldr	r0, [pc, #176]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f88:	f000 fb28 	bl	80025dc <HAL_DMA_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001f92:	f7ff fdd9 	bl	8001b48 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001f96:	2110      	movs	r1, #16
 8001f98:	4827      	ldr	r0, [pc, #156]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001f9a:	f000 fdc9 	bl	8002b30 <HAL_DMA_ConfigChannelAttributes>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 8001fa4:	f7ff fdd0 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001fac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001fb0:	4a21      	ldr	r2, [pc, #132]	@ (8002038 <HAL_UART_MspInit+0x168>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001fb6:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fb8:	4a22      	ldr	r2, [pc, #136]	@ (8002044 <HAL_UART_MspInit+0x174>)
 8001fba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001fbc:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fbe:	2214      	movs	r2, #20
 8001fc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fce:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fd0:	2280      	movs	r2, #128	@ 0x80
 8001fd2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fec:	4814      	ldr	r0, [pc, #80]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8001fee:	f000 faf5 	bl	80025dc <HAL_DMA_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001ff8:	f7ff fda6 	bl	8001b48 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ffc:	2110      	movs	r1, #16
 8001ffe:	4810      	ldr	r0, [pc, #64]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8002000:	f000 fd96 	bl	8002b30 <HAL_DMA_ConfigChannelAttributes>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800200a:	f7ff fd9d 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a0b      	ldr	r2, [pc, #44]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8002012:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002014:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <HAL_UART_MspInit+0x170>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	2025      	movs	r0, #37	@ 0x25
 8002020:	f000 faa7 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002024:	2025      	movs	r0, #37	@ 0x25
 8002026:	f000 fabe 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800202a:	bf00      	nop
 800202c:	3758      	adds	r7, #88	@ 0x58
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40004400 	.word	0x40004400
 8002038:	200004a8 	.word	0x200004a8
 800203c:	40020008 	.word	0x40020008
 8002040:	20000508 	.word	0x20000508
 8002044:	4002001c 	.word	0x4002001c

08002048 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002048:	480d      	ldr	r0, [pc, #52]	@ (8002080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800204a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800204c:	f7ff febe 	bl	8001dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002050:	480c      	ldr	r0, [pc, #48]	@ (8002084 <LoopForever+0x6>)
  ldr r1, =_edata
 8002052:	490d      	ldr	r1, [pc, #52]	@ (8002088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002054:	4a0d      	ldr	r2, [pc, #52]	@ (800208c <LoopForever+0xe>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002058:	e002      	b.n	8002060 <LoopCopyDataInit>

0800205a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800205c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205e:	3304      	adds	r3, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002064:	d3f9      	bcc.n	800205a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002068:	4c0a      	ldr	r4, [pc, #40]	@ (8002094 <LoopForever+0x16>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800206c:	e001      	b.n	8002072 <LoopFillZerobss>

0800206e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002070:	3204      	adds	r2, #4

08002072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002076:	f005 fdc9 	bl	8007c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207a:	f7ff fa9f 	bl	80015bc <main>

0800207e <LoopForever>:

LoopForever:
    b LoopForever
 800207e:	e7fe      	b.n	800207e <LoopForever>
  ldr   r0, =_estack
 8002080:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800208c:	0800bb50 	.word	0x0800bb50
  ldr r2, =_sbss
 8002090:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002094:	200006c8 	.word	0x200006c8

08002098 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC_IRQHandler>

0800209a <LL_AHB2_GRP1_EnableClock>:
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4013      	ands	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
	...

080020cc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80020e6:	2002      	movs	r0, #2
 80020e8:	f7ff ffd7 	bl	800209a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4a12      	ldr	r2, [pc, #72]	@ (8002138 <BSP_LED_Init+0x6c>)
 80020f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020f4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fe:	2302      	movs	r3, #2
 8002100:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <BSP_LED_Init+0x70>)
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	f107 020c 	add.w	r2, r7, #12
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fde5 	bl	8002ce0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	4a08      	ldr	r2, [pc, #32]	@ (800213c <BSP_LED_Init+0x70>)
 800211a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <BSP_LED_Init+0x6c>)
 8002122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	f000 ff39 	bl	8002fa0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	0800b6e8 	.word	0x0800b6e8
 800213c:	20000004 	.word	0x20000004

08002140 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	4a07      	ldr	r2, [pc, #28]	@ (800216c <BSP_LED_On+0x2c>)
 800214e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <BSP_LED_On+0x30>)
 8002156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800215a:	2201      	movs	r2, #1
 800215c:	4619      	mov	r1, r3
 800215e:	f000 ff1f 	bl	8002fa0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000004 	.word	0x20000004
 8002170:	0800b6e8 	.word	0x0800b6e8

08002174 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <BSP_LED_Off+0x2c>)
 8002182:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4a06      	ldr	r2, [pc, #24]	@ (80021a4 <BSP_LED_Off+0x30>)
 800218a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800218e:	2200      	movs	r2, #0
 8002190:	4619      	mov	r1, r3
 8002192:	f000 ff05 	bl	8002fa0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000004 	.word	0x20000004
 80021a4:	0800b6e8 	.word	0x0800b6e8

080021a8 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	4a07      	ldr	r2, [pc, #28]	@ (80021d4 <BSP_LED_Toggle+0x2c>)
 80021b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	4906      	ldr	r1, [pc, #24]	@ (80021d8 <BSP_LED_Toggle+0x30>)
 80021be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f000 ff02 	bl	8002fce <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000004 	.word	0x20000004
 80021d8:	0800b6e8 	.word	0x0800b6e8

080021dc <LL_AHB2_GRP1_EnableClock>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002200:	68fb      	ldr	r3, [r7, #12]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8002220:	2004      	movs	r0, #4
 8002222:	f7ff ffdb 	bl	80021dc <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002226:	2310      	movs	r3, #16
 8002228:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800222a:	2301      	movs	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4812      	ldr	r0, [pc, #72]	@ (8002284 <BSP_RADIO_Init+0x78>)
 800223c:	f000 fd50 	bl	8002ce0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002240:	2320      	movs	r3, #32
 8002242:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	4619      	mov	r1, r3
 8002248:	480e      	ldr	r0, [pc, #56]	@ (8002284 <BSP_RADIO_Init+0x78>)
 800224a:	f000 fd49 	bl	8002ce0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800224e:	2308      	movs	r3, #8
 8002250:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	4619      	mov	r1, r3
 8002256:	480b      	ldr	r0, [pc, #44]	@ (8002284 <BSP_RADIO_Init+0x78>)
 8002258:	f000 fd42 	bl	8002ce0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800225c:	2200      	movs	r2, #0
 800225e:	2120      	movs	r1, #32
 8002260:	4808      	ldr	r0, [pc, #32]	@ (8002284 <BSP_RADIO_Init+0x78>)
 8002262:	f000 fe9d 	bl	8002fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002266:	2200      	movs	r2, #0
 8002268:	2110      	movs	r1, #16
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <BSP_RADIO_Init+0x78>)
 800226c:	f000 fe98 	bl	8002fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002270:	2200      	movs	r2, #0
 8002272:	2108      	movs	r1, #8
 8002274:	4803      	ldr	r0, [pc, #12]	@ (8002284 <BSP_RADIO_Init+0x78>)
 8002276:	f000 fe93 	bl	8002fa0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	48000800 	.word	0x48000800

08002288 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80022a8:	2301      	movs	r3, #1
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80022c2:	230f      	movs	r3, #15
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e001      	b.n	80022cc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80022c8:	2316      	movs	r3, #22
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80022cc:	68fb      	ldr	r3, [r7, #12]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e2:	2003      	movs	r0, #3
 80022e4:	f000 f93a 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022e8:	f001 f842 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <HAL_Init+0x3c>)
 80022f0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 f810 	bl	8002318 <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	71fb      	strb	r3, [r7, #7]
 8002302:	e001      	b.n	8002308 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002304:	f7ff fc26 	bl	8001b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002308:	79fb      	ldrb	r3, [r7, #7]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002324:	4b17      	ldr	r3, [pc, #92]	@ (8002384 <HAL_InitTick+0x6c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d024      	beq.n	8002376 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800232c:	f001 f820 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_InitTick+0x6c>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800233c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	4618      	mov	r0, r3
 8002346:	f000 f93c 	bl	80025c2 <HAL_SYSTICK_Config>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10f      	bne.n	8002370 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	d809      	bhi.n	800236a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002356:	2200      	movs	r2, #0
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800235e:	f000 f908 	bl	8002572 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002362:	4a09      	ldr	r2, [pc, #36]	@ (8002388 <HAL_InitTick+0x70>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e007      	b.n	800237a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	e004      	b.n	800237a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	e001      	b.n	800237a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000014 	.word	0x20000014
 8002388:	20000010 	.word	0x20000010

0800238c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_IncTick+0x1c>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_IncTick+0x20>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4413      	add	r3, r2
 800239c:	4a03      	ldr	r2, [pc, #12]	@ (80023ac <HAL_IncTick+0x20>)
 800239e:	6013      	str	r3, [r2, #0]
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	20000014 	.word	0x20000014
 80023ac:	20000568 	.word	0x20000568

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b02      	ldr	r3, [pc, #8]	@ (80023c0 <HAL_GetTick+0x10>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	20000568 	.word	0x20000568

080023c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f6:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <__NVIC_GetPriorityGrouping+0x18>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 0307 	and.w	r3, r3, #7
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db0b      	blt.n	8002452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4906      	ldr	r1, [pc, #24]	@ (800245c <__NVIC_EnableIRQ+0x34>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	@ (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	@ (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	@ 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800253c:	f7ff ff90 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff2d 	bl	80023c4 <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff44 	bl	800240c <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff92 	bl	80024b4 <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff61 	bl	8002460 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff37 	bl	8002428 <__NVIC_EnableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffa4 	bl	8002518 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e08e      	b.n	800270c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_DMA_Init+0x138>)
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d80f      	bhi.n	800261a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b45      	ldr	r3, [pc, #276]	@ (8002718 <HAL_DMA_Init+0x13c>)
 8002602:	4413      	add	r3, r2
 8002604:	4a45      	ldr	r2, [pc, #276]	@ (800271c <HAL_DMA_Init+0x140>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a42      	ldr	r2, [pc, #264]	@ (8002720 <HAL_DMA_Init+0x144>)
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40
 8002618:	e00e      	b.n	8002638 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	4b40      	ldr	r3, [pc, #256]	@ (8002724 <HAL_DMA_Init+0x148>)
 8002622:	4413      	add	r3, r2
 8002624:	4a3d      	ldr	r2, [pc, #244]	@ (800271c <HAL_DMA_Init+0x140>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	009a      	lsls	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a3c      	ldr	r2, [pc, #240]	@ (8002728 <HAL_DMA_Init+0x14c>)
 8002636:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800264e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002652:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fabc 	bl	8002c08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002698:	d102      	bne.n	80026a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <HAL_DMA_Init+0x106>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d80c      	bhi.n	80026e2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fae5 	bl	8002c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	e008      	b.n	80026f4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40020407 	.word	0x40020407
 8002718:	bffdfff8 	.word	0xbffdfff8
 800271c:	cccccccd 	.word	0xcccccccd
 8002720:	40020000 	.word	0x40020000
 8002724:	bffdfbf8 	.word	0xbffdfbf8
 8002728:	40020400 	.word	0x40020400

0800272c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_DMA_Start_IT+0x20>
 8002748:	2302      	movs	r3, #2
 800274a:	e069      	b.n	8002820 <HAL_DMA_Start_IT+0xf4>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d155      	bne.n	800280c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fa02 	bl	8002b8e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 020e 	orr.w	r2, r2, #14
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e00f      	b.n	80027c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0204 	bic.w	r2, r2, #4
 80027b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 020a 	orr.w	r2, r2, #10
 80027c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e008      	b.n	800281e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e04f      	b.n	80028da <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d008      	beq.n	8002858 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2204      	movs	r2, #4
 800284a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e040      	b.n	80028da <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 020e 	bic.w	r2, r2, #14
 8002866:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002872:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002876:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	f003 021c 	and.w	r2, r3, #28
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f202 	lsl.w	r2, r1, r2
 800289a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00c      	beq.n	80028c8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d005      	beq.n	8002908 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2204      	movs	r2, #4
 8002900:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e047      	b.n	8002998 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 020e 	bic.w	r2, r2, #14
 8002916:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002932:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	f003 021c 	and.w	r2, r3, #28
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f202 	lsl.w	r2, r1, r2
 800294a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002954:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002968:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800296c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002976:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
    }
  }
  return status;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c0:	f003 031c 	and.w	r3, r3, #28
 80029c4:	2204      	movs	r2, #4
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d027      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x7c>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d022      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0204 	bic.w	r2, r2, #4
 80029f6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	f003 021c 	and.w	r2, r3, #28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	2104      	movs	r1, #4
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 8081 	beq.w	8002b18 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002a1e:	e07b      	b.n	8002b18 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a24:	f003 031c 	and.w	r3, r3, #28
 8002a28:	2202      	movs	r2, #2
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03d      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x10c>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d038      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 020a 	bic.w	r2, r2, #10
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b24 <HAL_DMA_IRQHandler+0x180>)
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d909      	bls.n	8002a84 <HAL_DMA_IRQHandler+0xe0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a74:	f003 031c 	and.w	r3, r3, #28
 8002a78:	4a2b      	ldr	r2, [pc, #172]	@ (8002b28 <HAL_DMA_IRQHandler+0x184>)
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	6053      	str	r3, [r2, #4]
 8002a82:	e008      	b.n	8002a96 <HAL_DMA_IRQHandler+0xf2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	f003 031c 	and.w	r3, r3, #28
 8002a8c:	4a27      	ldr	r2, [pc, #156]	@ (8002b2c <HAL_DMA_IRQHandler+0x188>)
 8002a8e:	2102      	movs	r1, #2
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d038      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002aae:	e033      	b.n	8002b18 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab4:	f003 031c 	and.w	r3, r3, #28
 8002ab8:	2208      	movs	r2, #8
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d02a      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x176>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d025      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 020e 	bic.w	r2, r2, #14
 8002adc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f003 021c 	and.w	r2, r3, #28
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
}
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40020080 	.word	0x40020080
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020000 	.word	0x40020000

08002b30 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	72fb      	strb	r3, [r7, #11]
    return status;
 8002b48:	7afb      	ldrb	r3, [r7, #11]
 8002b4a:	e01b      	b.n	8002b84 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e003      	b.n	8002b7a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b78:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	601a      	str	r2, [r3, #0]

  return status;
 8002b82:	7afb      	ldrb	r3, [r7, #11]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ba4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bb6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbc:	f003 021c 	and.w	r2, r3, #28
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d108      	bne.n	8002bee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bec:	e007      	b.n	8002bfe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	60da      	str	r2, [r3, #12]
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d813      	bhi.n	8002c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c28:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	3b08      	subs	r3, #8
 8002c38:	4a14      	ldr	r2, [pc, #80]	@ (8002c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e011      	b.n	8002c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	009a      	lsls	r2, r3, #2
 8002c4c:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002c4e:	4413      	add	r3, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3b08      	subs	r3, #8
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	3307      	adds	r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002c6c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	2201      	movs	r2, #1
 8002c76:	409a      	lsls	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40020407 	.word	0x40020407
 8002c8c:	cccccccd 	.word	0xcccccccd
 8002c90:	4002081c 	.word	0x4002081c
 8002c94:	40020880 	.word	0x40020880

08002c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a08      	ldr	r2, [pc, #32]	@ (8002cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	1000823f 	.word	0x1000823f
 8002cdc:	40020940 	.word	0x40020940

08002ce0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cee:	e140      	b.n	8002f72 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8132 	beq.w	8002f6c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d005      	beq.n	8002d20 <HAL_GPIO_Init+0x40>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d130      	bne.n	8002d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d56:	2201      	movs	r2, #1
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	f003 0201 	and.w	r2, r3, #1
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d017      	beq.n	8002dbe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d123      	bne.n	8002e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	08da      	lsrs	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	220f      	movs	r2, #15
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	6939      	ldr	r1, [r7, #16]
 8002e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 808c 	beq.w	8002f6c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e54:	4a4e      	ldr	r2, [pc, #312]	@ (8002f90 <HAL_GPIO_Init+0x2b0>)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e7e:	d00d      	beq.n	8002e9c <HAL_GPIO_Init+0x1bc>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a44      	ldr	r2, [pc, #272]	@ (8002f94 <HAL_GPIO_Init+0x2b4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <HAL_GPIO_Init+0x1b8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a43      	ldr	r2, [pc, #268]	@ (8002f98 <HAL_GPIO_Init+0x2b8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_GPIO_Init+0x1b4>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e004      	b.n	8002e9e <HAL_GPIO_Init+0x1be>
 8002e94:	2307      	movs	r3, #7
 8002e96:	e002      	b.n	8002e9e <HAL_GPIO_Init+0x1be>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_GPIO_Init+0x1be>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	f002 0203 	and.w	r2, r2, #3
 8002ea4:	0092      	lsls	r2, r2, #2
 8002ea6:	4093      	lsls	r3, r2
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eae:	4938      	ldr	r1, [pc, #224]	@ (8002f90 <HAL_GPIO_Init+0x2b0>)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ebc:	4b37      	ldr	r3, [pc, #220]	@ (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f0a:	4a24      	ldr	r2, [pc, #144]	@ (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002f10:	4b22      	ldr	r3, [pc, #136]	@ (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f16:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002f36:	4a19      	ldr	r2, [pc, #100]	@ (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002f3e:	4b17      	ldr	r3, [pc, #92]	@ (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f44:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002f64:	4a0d      	ldr	r2, [pc, #52]	@ (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f47f aeb7 	bne.w	8002cf0 <HAL_GPIO_Init+0x10>
  }
}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40010000 	.word	0x40010000
 8002f94:	48000400 	.word	0x48000400
 8002f98:	48000800 	.word	0x48000800
 8002f9c:	58000800 	.word	0x58000800

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fbc:	e002      	b.n	8002fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fe0:	887a      	ldrh	r2, [r7, #2]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	041a      	lsls	r2, r3, #16
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	400b      	ands	r3, r1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	619a      	str	r2, [r3, #24]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003004:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a03      	ldr	r2, [pc, #12]	@ (8003018 <HAL_PWR_EnableBkUpAccess+0x18>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	58000400 	.word	0x58000400

0800301c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800302e:	4b13      	ldr	r3, [pc, #76]	@ (800307c <HAL_PWR_EnterSLEEPMode+0x60>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800303a:	d10d      	bne.n	8003058 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800303c:	f000 f830 	bl	80030a0 <HAL_PWREx_DisableLowPowerRunMode>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8003046:	e015      	b.n	8003074 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003048:	4b0c      	ldr	r3, [pc, #48]	@ (800307c <HAL_PWR_EnterSLEEPMode+0x60>)
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003054:	f000 f816 	bl	8003084 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_PWR_EnterSLEEPMode+0x64>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	4a08      	ldr	r2, [pc, #32]	@ (8003080 <HAL_PWR_EnterSLEEPMode+0x64>)
 800305e:	f023 0304 	bic.w	r3, r3, #4
 8003062:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800306a:	bf30      	wfi
 800306c:	e002      	b.n	8003074 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800306e:	bf40      	sev
    __WFE();
 8003070:	bf20      	wfe
    __WFE();
 8003072:	bf20      	wfe
  }
}
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	58000400 	.word	0x58000400
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003088:	4b04      	ldr	r3, [pc, #16]	@ (800309c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a03      	ldr	r2, [pc, #12]	@ (800309c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800308e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	58000400 	.word	0x58000400

080030a0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80030a6:	4b16      	ldr	r3, [pc, #88]	@ (8003100 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a15      	ldr	r2, [pc, #84]	@ (8003100 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80030ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030b0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80030b2:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2232      	movs	r2, #50	@ 0x32
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9b      	lsrs	r3, r3, #18
 80030c4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80030c6:	e002      	b.n	80030ce <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80030ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030da:	d102      	bne.n	80030e2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f2      	bne.n	80030c8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80030e2:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ee:	d101      	bne.n	80030f4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e000      	b.n	80030f6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	58000400 	.word	0x58000400
 8003104:	20000000 	.word	0x20000000
 8003108:	431bde83 	.word	0x431bde83

0800310c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800311a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800311e:	d101      	bne.n	8003124 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b08      	cmp	r3, #8
 800313e:	d101      	bne.n	8003144 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003170:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0303 	and.w	r3, r3, #3
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323e:	f7ff ff9d 	bl	800317c <LL_RCC_GetSysClkSource>
 8003242:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003244:	f7ff ffe8 	bl	8003218 <LL_RCC_PLL_GetMainSource>
 8003248:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x2c>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d139      	bne.n	80032ca <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d136      	bne.n	80032ca <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800325c:	f7ff ff67 	bl	800312e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d115      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x62>
 8003266:	f7ff ff62 	bl	800312e <LL_RCC_MSI_IsEnabledRangeSelect>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	d106      	bne.n	800327e <HAL_RCC_GetSysClockFreq+0x4e>
 8003270:	f7ff ff6d 	bl	800314e <LL_RCC_MSI_GetRange>
 8003274:	4603      	mov	r3, r0
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	e005      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x5a>
 800327e:	f7ff ff71 	bl	8003164 <LL_RCC_MSI_GetRangeAfterStandby>
 8003282:	4603      	mov	r3, r0
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	4a36      	ldr	r2, [pc, #216]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x134>)
 800328c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003290:	e014      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x8c>
 8003292:	f7ff ff4c 	bl	800312e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_GetSysClockFreq+0x7a>
 800329c:	f7ff ff57 	bl	800314e <LL_RCC_MSI_GetRange>
 80032a0:	4603      	mov	r3, r0
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	e005      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x86>
 80032aa:	f7ff ff5b 	bl	8003164 <LL_RCC_MSI_GetRangeAfterStandby>
 80032ae:	4603      	mov	r3, r0
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x134>)
 80032b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032bc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d115      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032c8:	e012      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d102      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032d0:	4b25      	ldr	r3, [pc, #148]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x138>)
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	e00c      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80032dc:	f7ff ff16 	bl	800310c <LL_RCC_HSE_IsEnabledDiv2>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80032e6:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x138>)
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	e001      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <HAL_RCC_GetSysClockFreq+0x13c>)
 80032ee:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f0:	f7ff ff44 	bl	800317c <LL_RCC_GetSysClkSource>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b0c      	cmp	r3, #12
 80032f8:	d12f      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80032fa:	f7ff ff8d 	bl	8003218 <LL_RCC_PLL_GetMainSource>
 80032fe:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0xde>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d003      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0xe4>
 800330c:	e00d      	b.n	800332a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800330e:	4b16      	ldr	r3, [pc, #88]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x138>)
 8003310:	60fb      	str	r3, [r7, #12]
        break;
 8003312:	e00d      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003314:	f7ff fefa 	bl	800310c <LL_RCC_HSE_IsEnabledDiv2>
 8003318:	4603      	mov	r3, r0
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x138>)
 8003320:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003322:	e005      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003324:	4b11      	ldr	r3, [pc, #68]	@ (800336c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003326:	60fb      	str	r3, [r7, #12]
        break;
 8003328:	e002      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	60fb      	str	r3, [r7, #12]
        break;
 800332e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003330:	f7ff ff50 	bl	80031d4 <LL_RCC_PLL_GetN>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	fb03 f402 	mul.w	r4, r3, r2
 800333c:	f7ff ff61 	bl	8003202 <LL_RCC_PLL_GetDivider>
 8003340:	4603      	mov	r3, r0
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	3301      	adds	r3, #1
 8003346:	fbb4 f4f3 	udiv	r4, r4, r3
 800334a:	f7ff ff4f 	bl	80031ec <LL_RCC_PLL_GetR>
 800334e:	4603      	mov	r3, r0
 8003350:	0f5b      	lsrs	r3, r3, #29
 8003352:	3301      	adds	r3, #1
 8003354:	fbb4 f3f3 	udiv	r3, r4, r3
 8003358:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800335a:	697b      	ldr	r3, [r7, #20]
}
 800335c:	4618      	mov	r0, r3
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	bd90      	pop	{r4, r7, pc}
 8003364:	0800b6a8 	.word	0x0800b6a8
 8003368:	00f42400 	.word	0x00f42400
 800336c:	01e84800 	.word	0x01e84800

08003370 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b598      	push	{r3, r4, r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003374:	f7ff ff5c 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 8003378:	4604      	mov	r4, r0
 800337a:	f7ff ff0a 	bl	8003192 <LL_RCC_GetAHBPrescaler>
 800337e:	4603      	mov	r3, r0
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	4a03      	ldr	r2, [pc, #12]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x24>)
 8003388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd98      	pop	{r3, r4, r7, pc}
 8003394:	0800b648 	.word	0x0800b648

08003398 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b598      	push	{r3, r4, r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800339c:	f7ff ffe8 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80033a0:	4604      	mov	r4, r0
 80033a2:	f7ff ff01 	bl	80031a8 <LL_RCC_GetAPB1Prescaler>
 80033a6:	4603      	mov	r3, r0
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	4a03      	ldr	r2, [pc, #12]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd98      	pop	{r3, r4, r7, pc}
 80033b8:	0800b688 	.word	0x0800b688

080033bc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b598      	push	{r3, r4, r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80033c0:	f7ff ffd6 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80033c4:	4604      	mov	r4, r0
 80033c6:	f7ff fefa 	bl	80031be <LL_RCC_GetAPB2Prescaler>
 80033ca:	4603      	mov	r3, r0
 80033cc:	0adb      	lsrs	r3, r3, #11
 80033ce:	4a03      	ldr	r2, [pc, #12]	@ (80033dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd98      	pop	{r3, r4, r7, pc}
 80033dc:	0800b688 	.word	0x0800b688

080033e0 <LL_RCC_LSE_IsReady>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d101      	bne.n	80033f8 <LL_RCC_LSE_IsReady+0x18>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <LL_RCC_LSE_IsReady+0x1a>
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <LL_RCC_SetUSARTClockSource>:
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800340e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	43db      	mvns	r3, r3
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	b29b      	uxth	r3, r3
 800341e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <LL_RCC_SetI2SClockSource>:
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800343a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003442:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003446:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <LL_RCC_SetLPUARTClockSource>:
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003470:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <LL_RCC_SetI2CClockSource>:
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003492:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800349e:	43db      	mvns	r3, r3
 80034a0:	401a      	ands	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80034aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <LL_RCC_SetLPTIMClockSource>:
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80034c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	43db      	mvns	r3, r3
 80034d6:	401a      	ands	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <LL_RCC_SetRNGClockSource>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80034f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003500:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003504:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <LL_RCC_SetADCClockSource>:
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800352e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <LL_RCC_SetRTCClockSource>:
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003558:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <LL_RCC_GetRTCClockSource>:
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <LL_RCC_ForceBackupDomainReset>:
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80035d4:	2300      	movs	r3, #0
 80035d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80035d8:	2300      	movs	r3, #0
 80035da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d058      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80035e8:	f7ff fd0a 	bl	8003000 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ec:	f7fe fee0 	bl	80023b0 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80035f2:	e009      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f4:	f7fe fedc 	bl	80023b0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d902      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	74fb      	strb	r3, [r7, #19]
        break;
 8003606:	e006      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003608:	4b7b      	ldr	r3, [pc, #492]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003614:	d1ee      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d13c      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800361c:	f7ff ffa7 	bl	800356e <LL_RCC_GetRTCClockSource>
 8003620:	4602      	mov	r2, r0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003626:	429a      	cmp	r2, r3
 8003628:	d00f      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003636:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003638:	f7ff ffa5 	bl	8003586 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800363c:	f7ff ffb3 	bl	80035a6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003640:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d014      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe feac 	bl	80023b0 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800365a:	e00b      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe fea8 	bl	80023b0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d902      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	74fb      	strb	r3, [r7, #19]
            break;
 8003672:	e004      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003674:	f7ff feb4 	bl	80033e0 <LL_RCC_LSE_IsReady>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d1ee      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff5b 	bl	8003544 <LL_RCC_SetRTCClockSource>
 800368e:	e004      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
 8003694:	e001      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fea9 	bl	8003402 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fe9e 	bl	8003402 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d004      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fec0 	bl	800345c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d004      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fee6 	bl	80034be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fedb 	bl	80034be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fed0 	bl	80034be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff fea9 	bl	8003486 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fe9e 	bl	8003486 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fe93 	bl	8003486 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d011      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fe5e 	bl	8003432 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377e:	d107      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d010      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fea5 	bl	80034f0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80037ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d011      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fea3 	bl	800351a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037dc:	d107      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80037ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	58000400 	.word	0x58000400

080037fc <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800380c:	4904      	ldr	r1, [pc, #16]	@ (8003820 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	58000400 	.word	0x58000400

08003824 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382e:	4a04      	ldr	r2, [pc, #16]	@ (8003840 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	58000400 	.word	0x58000400

08003844 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	4a04      	ldr	r2, [pc, #16]	@ (8003860 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003850:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	58000400 	.word	0x58000400

08003864 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003868:	4b03      	ldr	r3, [pc, #12]	@ (8003878 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800386a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800386e:	619a      	str	r2, [r3, #24]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	58000400 	.word	0x58000400

0800387c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b02      	cmp	r3, #2
 800388a:	d101      	bne.n	8003890 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	58000400 	.word	0x58000400

080038a0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80038a4:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d101      	bne.n	80038b4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	58000400 	.word	0x58000400

080038c4 <LL_RCC_RF_DisableReset>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <LL_RCC_IsRFUnderReset>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f8:	d101      	bne.n	80038fe <LL_RCC_IsRFUnderReset+0x1a>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <LL_RCC_IsRFUnderReset+0x1c>
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <LL_EXTI_EnableIT_32_63+0x24>)
 8003912:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003916:	4905      	ldr	r1, [pc, #20]	@ (800392c <LL_EXTI_EnableIT_32_63+0x24>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	58000800 	.word	0x58000800

08003930 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d103      	bne.n	8003946 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
    return status;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	e052      	b.n	80039ec <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	799b      	ldrb	r3, [r3, #6]
 800394e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003950:	7bbb      	ldrb	r3, [r7, #14]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_SUBGHZ_Init+0x2c>
 8003956:	7bbb      	ldrb	r3, [r7, #14]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d109      	bne.n	8003970 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe f97a 	bl	8001c5c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003968:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800396c:	f7ff ffcc 	bl	8003908 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003970:	7bbb      	ldrb	r3, [r7, #14]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d126      	bne.n	80039c4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800397c:	f7ff ffa2 	bl	80038c4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003980:	4b1c      	ldr	r3, [pc, #112]	@ (80039f4 <HAL_SUBGHZ_Init+0xc4>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	0cdb      	lsrs	r3, r3, #19
 800398e:	2264      	movs	r2, #100	@ 0x64
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d105      	bne.n	80039a8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	609a      	str	r2, [r3, #8]
        break;
 80039a6:	e007      	b.n	80039b8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80039ae:	f7ff ff99 	bl	80038e4 <LL_RCC_IsRFUnderReset>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ee      	bne.n	8003996 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80039b8:	f7ff ff34 	bl	8003824 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80039bc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80039c0:	f7ff ff1c 	bl	80037fc <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80039c4:	f7ff ff4e 	bl	8003864 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fabc 	bl	8003f50 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	719a      	strb	r2, [r3, #6]

  return status;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000000 	.word	0x20000000

080039f8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	461a      	mov	r2, r3
 8003a04:	460b      	mov	r3, r1
 8003a06:	817b      	strh	r3, [r7, #10]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	799b      	ldrb	r3, [r3, #6]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d14a      	bne.n	8003aac <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	795b      	ldrb	r3, [r3, #5]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e045      	b.n	8003aae <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fb5c 	bl	80040ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a34:	f7ff ff06 	bl	8003844 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003a38:	210d      	movs	r1, #13
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 faa8 	bl	8003f90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003a40:	897b      	ldrh	r3, [r7, #10]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	4619      	mov	r1, r3
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 faa0 	bl	8003f90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003a50:	897b      	ldrh	r3, [r7, #10]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	4619      	mov	r1, r3
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fa9a 	bl	8003f90 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	82bb      	strh	r3, [r7, #20]
 8003a60:	e00a      	b.n	8003a78 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003a62:	8abb      	ldrh	r3, [r7, #20]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fa8f 	bl	8003f90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003a72:	8abb      	ldrh	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	82bb      	strh	r3, [r7, #20]
 8003a78:	8aba      	ldrh	r2, [r7, #20]
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d3f0      	bcc.n	8003a62 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a80:	f7ff fed0 	bl	8003824 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fb55 	bl	8004134 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	75fb      	strb	r3, [r7, #23]
 8003a96:	e001      	b.n	8003a9c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	715a      	strb	r2, [r3, #5]

    return status;
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	e000      	b.n	8003aae <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b088      	sub	sp, #32
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	817b      	strh	r3, [r7, #10]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	799b      	ldrb	r3, [r3, #6]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d14a      	bne.n	8003b6e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	795b      	ldrb	r3, [r3, #5]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e045      	b.n	8003b70 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fafe 	bl	80040ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003af0:	f7ff fea8 	bl	8003844 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003af4:	211d      	movs	r1, #29
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fa4a 	bl	8003f90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003afc:	897b      	ldrh	r3, [r7, #10]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4619      	mov	r1, r3
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa42 	bl	8003f90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003b0c:	897b      	ldrh	r3, [r7, #10]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	4619      	mov	r1, r3
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fa3c 	bl	8003f90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003b18:	2100      	movs	r1, #0
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fa38 	bl	8003f90 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	82fb      	strh	r3, [r7, #22]
 8003b24:	e009      	b.n	8003b3a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fa87 	bl	800403c <SUBGHZSPI_Receive>
      pData++;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003b34:	8afb      	ldrh	r3, [r7, #22]
 8003b36:	3301      	adds	r3, #1
 8003b38:	82fb      	strh	r3, [r7, #22]
 8003b3a:	8afa      	ldrh	r2, [r7, #22]
 8003b3c:	893b      	ldrh	r3, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d3f1      	bcc.n	8003b26 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b42:	f7ff fe6f 	bl	8003824 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 faf4 	bl	8004134 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e001      	b.n	8003b5e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	715a      	strb	r2, [r3, #5]

    return status;
 8003b6a:	7ffb      	ldrb	r3, [r7, #31]
 8003b6c:	e000      	b.n	8003b70 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
  }
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	461a      	mov	r2, r3
 8003b84:	460b      	mov	r3, r1
 8003b86:	72fb      	strb	r3, [r7, #11]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	799b      	ldrb	r3, [r3, #6]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d14a      	bne.n	8003c2c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	795b      	ldrb	r3, [r3, #5]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e045      	b.n	8003c2e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fa9f 	bl	80040ec <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	2b84      	cmp	r3, #132	@ 0x84
 8003bb2:	d002      	beq.n	8003bba <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003bb4:	7afb      	ldrb	r3, [r7, #11]
 8003bb6:	2b94      	cmp	r3, #148	@ 0x94
 8003bb8:	d103      	bne.n	8003bc2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	711a      	strb	r2, [r3, #4]
 8003bc0:	e002      	b.n	8003bc8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003bc8:	f7ff fe3c 	bl	8003844 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f9dd 	bl	8003f90 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	82bb      	strh	r3, [r7, #20]
 8003bda:	e00a      	b.n	8003bf2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003bdc:	8abb      	ldrh	r3, [r7, #20]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	4619      	mov	r1, r3
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f9d2 	bl	8003f90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003bec:	8abb      	ldrh	r3, [r7, #20]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	82bb      	strh	r3, [r7, #20]
 8003bf2:	8aba      	ldrh	r2, [r7, #20]
 8003bf4:	893b      	ldrh	r3, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3f0      	bcc.n	8003bdc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003bfa:	f7ff fe13 	bl	8003824 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
 8003c00:	2b84      	cmp	r3, #132	@ 0x84
 8003c02:	d002      	beq.n	8003c0a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fa95 	bl	8004134 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
 8003c16:	e001      	b.n	8003c1c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	715a      	strb	r2, [r3, #5]

    return status;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	e000      	b.n	8003c2e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b088      	sub	sp, #32
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	461a      	mov	r2, r3
 8003c42:	460b      	mov	r3, r1
 8003c44:	72fb      	strb	r3, [r7, #11]
 8003c46:	4613      	mov	r3, r2
 8003c48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	799b      	ldrb	r3, [r3, #6]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d13d      	bne.n	8003cd4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	795b      	ldrb	r3, [r3, #5]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e038      	b.n	8003cd6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa3e 	bl	80040ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c70:	f7ff fde8 	bl	8003844 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	4619      	mov	r1, r3
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f989 	bl	8003f90 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f985 	bl	8003f90 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	82fb      	strh	r3, [r7, #22]
 8003c8a:	e009      	b.n	8003ca0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003c8c:	69b9      	ldr	r1, [r7, #24]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f9d4 	bl	800403c <SUBGHZSPI_Receive>
      pData++;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3301      	adds	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003c9a:	8afb      	ldrh	r3, [r7, #22]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	82fb      	strh	r3, [r7, #22]
 8003ca0:	8afa      	ldrh	r2, [r7, #22]
 8003ca2:	893b      	ldrh	r3, [r7, #8]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d3f1      	bcc.n	8003c8c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ca8:	f7ff fdbc 	bl	8003824 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fa41 	bl	8004134 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e001      	b.n	8003cc4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	715a      	strb	r2, [r3, #5]

    return status;
 8003cd0:	7ffb      	ldrb	r3, [r7, #31]
 8003cd2:	e000      	b.n	8003cd6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	460b      	mov	r3, r1
 8003cec:	72fb      	strb	r3, [r7, #11]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	799b      	ldrb	r3, [r3, #6]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d13e      	bne.n	8003d7a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	795b      	ldrb	r3, [r3, #5]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e039      	b.n	8003d7c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f9ec 	bl	80040ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d14:	f7ff fd96 	bl	8003844 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003d18:	210e      	movs	r1, #14
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f938 	bl	8003f90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	4619      	mov	r1, r3
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f933 	bl	8003f90 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	82bb      	strh	r3, [r7, #20]
 8003d2e:	e00a      	b.n	8003d46 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003d30:	8abb      	ldrh	r3, [r7, #20]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f928 	bl	8003f90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d40:	8abb      	ldrh	r3, [r7, #20]
 8003d42:	3301      	adds	r3, #1
 8003d44:	82bb      	strh	r3, [r7, #20]
 8003d46:	8aba      	ldrh	r2, [r7, #20]
 8003d48:	893b      	ldrh	r3, [r7, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d3f0      	bcc.n	8003d30 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d4e:	f7ff fd69 	bl	8003824 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f9ee 	bl	8004134 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
 8003d64:	e001      	b.n	8003d6a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	715a      	strb	r2, [r3, #5]

    return status;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	e000      	b.n	8003d7c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	460b      	mov	r3, r1
 8003d92:	72fb      	strb	r3, [r7, #11]
 8003d94:	4613      	mov	r3, r2
 8003d96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	799b      	ldrb	r3, [r3, #6]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d141      	bne.n	8003e2a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	795b      	ldrb	r3, [r3, #5]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e03c      	b.n	8003e2c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f997 	bl	80040ec <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003dbe:	f7ff fd41 	bl	8003844 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003dc2:	211e      	movs	r1, #30
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f8e3 	bl	8003f90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003dca:	7afb      	ldrb	r3, [r7, #11]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f8de 	bl	8003f90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f8da 	bl	8003f90 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	82fb      	strh	r3, [r7, #22]
 8003de0:	e009      	b.n	8003df6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003de2:	69b9      	ldr	r1, [r7, #24]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f929 	bl	800403c <SUBGHZSPI_Receive>
      pData++;
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003df0:	8afb      	ldrh	r3, [r7, #22]
 8003df2:	3301      	adds	r3, #1
 8003df4:	82fb      	strh	r3, [r7, #22]
 8003df6:	8afa      	ldrh	r2, [r7, #22]
 8003df8:	893b      	ldrh	r3, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3f1      	bcc.n	8003de2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003dfe:	f7ff fd11 	bl	8003824 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f996 	bl	8004134 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e001      	b.n	8003e1a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	715a      	strb	r2, [r3, #5]

    return status;
 8003e26:	7ffb      	ldrb	r3, [r7, #31]
 8003e28:	e000      	b.n	8003e2c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
  }
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003e40:	f107 020c 	add.w	r2, r7, #12
 8003e44:	2302      	movs	r3, #2
 8003e46:	2112      	movs	r1, #18
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff fef4 	bl	8003c36 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003e4e:	7b3b      	ldrb	r3, [r7, #12]
 8003e50:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003e52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	b21a      	sxth	r2, r3
 8003e5a:	7b7b      	ldrb	r3, [r7, #13]
 8003e5c:	b21b      	sxth	r3, r3
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003e64:	f107 020c 	add.w	r2, r7, #12
 8003e68:	2302      	movs	r3, #2
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fe83 	bl	8003b78 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003e72:	89fb      	ldrh	r3, [r7, #14]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f002 fc7d 	bl	800677c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003e82:	89fb      	ldrh	r3, [r7, #14]
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8003e8e:	89fb      	ldrh	r3, [r7, #14]
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f002 fc7c 	bl	8006798 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003ea0:	89fb      	ldrh	r3, [r7, #14]
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f002 fccb 	bl	8006848 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003eb2:	89fb      	ldrh	r3, [r7, #14]
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f002 fcd0 	bl	8006864 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003ec4:	89fb      	ldrh	r3, [r7, #14]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f002 fcd5 	bl	8006880 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003ed6:	89fb      	ldrh	r3, [r7, #14]
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f002 fca2 	bl	800682c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003ee8:	89fb      	ldrh	r3, [r7, #14]
 8003eea:	099b      	lsrs	r3, r3, #6
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f002 fc5d 	bl	80067b4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003efa:	89fb      	ldrh	r3, [r7, #14]
 8003efc:	09db      	lsrs	r3, r3, #7
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00e      	beq.n	8003f24 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003f06:	89fb      	ldrh	r3, [r7, #14]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d004      	beq.n	8003f1c <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003f12:	2101      	movs	r1, #1
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f002 fc5b 	bl	80067d0 <HAL_SUBGHZ_CADStatusCallback>
 8003f1a:	e003      	b.n	8003f24 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f002 fc56 	bl	80067d0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003f24:	89fb      	ldrh	r3, [r7, #14]
 8003f26:	0a5b      	lsrs	r3, r3, #9
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f002 fc6b 	bl	800680c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003f36:	89fb      	ldrh	r3, [r7, #14]
 8003f38:	0b9b      	lsrs	r3, r3, #14
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f002 fcaa 	bl	800689c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f58:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <SUBGHZSPI_Init+0x3c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f8c <SUBGHZSPI_Init+0x3c>)
 8003f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f62:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003f64:	4a09      	ldr	r2, [pc, #36]	@ (8003f8c <SUBGHZSPI_Init+0x3c>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003f6c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003f6e:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <SUBGHZSPI_Init+0x3c>)
 8003f70:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003f74:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f76:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <SUBGHZSPI_Init+0x3c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a04      	ldr	r2, [pc, #16]	@ (8003f8c <SUBGHZSPI_Init+0x3c>)
 8003f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f80:	6013      	str	r3, [r2, #0]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	58010000 	.word	0x58010000

08003f90 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003fa0:	4b23      	ldr	r3, [pc, #140]	@ (8004030 <SUBGHZSPI_Transmit+0xa0>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	0cdb      	lsrs	r3, r3, #19
 8003fae:	2264      	movs	r2, #100	@ 0x64
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	609a      	str	r2, [r3, #8]
      break;
 8003fc6:	e008      	b.n	8003fda <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003fce:	4b19      	ldr	r3, [pc, #100]	@ (8004034 <SUBGHZSPI_Transmit+0xa4>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d1ed      	bne.n	8003fb6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003fda:	4b17      	ldr	r3, [pc, #92]	@ (8004038 <SUBGHZSPI_Transmit+0xa8>)
 8003fdc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003fe4:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <SUBGHZSPI_Transmit+0xa0>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	0cdb      	lsrs	r3, r3, #19
 8003ff2:	2264      	movs	r2, #100	@ 0x64
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	609a      	str	r2, [r3, #8]
      break;
 800400a:	e008      	b.n	800401e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3b01      	subs	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004012:	4b08      	ldr	r3, [pc, #32]	@ (8004034 <SUBGHZSPI_Transmit+0xa4>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d1ed      	bne.n	8003ffa <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800401e:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <SUBGHZSPI_Transmit+0xa4>)
 8004020:	68db      	ldr	r3, [r3, #12]

  return status;
 8004022:	7dfb      	ldrb	r3, [r7, #23]
}
 8004024:	4618      	mov	r0, r3
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000000 	.word	0x20000000
 8004034:	58010000 	.word	0x58010000
 8004038:	5801000c 	.word	0x5801000c

0800403c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800404a:	4b25      	ldr	r3, [pc, #148]	@ (80040e0 <SUBGHZSPI_Receive+0xa4>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	0cdb      	lsrs	r3, r3, #19
 8004058:	2264      	movs	r2, #100	@ 0x64
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d105      	bne.n	8004072 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	609a      	str	r2, [r3, #8]
      break;
 8004070:	e008      	b.n	8004084 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b01      	subs	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004078:	4b1a      	ldr	r3, [pc, #104]	@ (80040e4 <SUBGHZSPI_Receive+0xa8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d1ed      	bne.n	8004060 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004084:	4b18      	ldr	r3, [pc, #96]	@ (80040e8 <SUBGHZSPI_Receive+0xac>)
 8004086:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	22ff      	movs	r2, #255	@ 0xff
 800408c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800408e:	4b14      	ldr	r3, [pc, #80]	@ (80040e0 <SUBGHZSPI_Receive+0xa4>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	0cdb      	lsrs	r3, r3, #19
 800409c:	2264      	movs	r2, #100	@ 0x64
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	609a      	str	r2, [r3, #8]
      break;
 80040b4:	e008      	b.n	80040c8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80040bc:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <SUBGHZSPI_Receive+0xa8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d1ed      	bne.n	80040a4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <SUBGHZSPI_Receive+0xa8>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	701a      	strb	r2, [r3, #0]

  return status;
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000000 	.word	0x20000000
 80040e4:	58010000 	.word	0x58010000
 80040e8:	5801000c 	.word	0x5801000c

080040ec <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	791b      	ldrb	r3, [r3, #4]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d111      	bne.n	8004120 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <SUBGHZ_CheckDeviceReady+0x44>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800410c:	f7ff fb9a 	bl	8003844 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b01      	subs	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f9      	bne.n	8004110 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800411c:	f7ff fb82 	bl	8003824 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f807 	bl	8004134 <SUBGHZ_WaitOnBusy>
 8004126:	4603      	mov	r3, r0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000000 	.word	0x20000000

08004134 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004140:	4b12      	ldr	r3, [pc, #72]	@ (800418c <SUBGHZ_WaitOnBusy+0x58>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	0d1b      	lsrs	r3, r3, #20
 800414e:	2264      	movs	r2, #100	@ 0x64
 8004150:	fb02 f303 	mul.w	r3, r2, r3
 8004154:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004156:	f7ff fba3 	bl	80038a0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800415a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	609a      	str	r2, [r3, #8]
      break;
 800416c:	e009      	b.n	8004182 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3b01      	subs	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004174:	f7ff fb82 	bl	800387c <LL_PWR_IsActiveFlag_RFBUSYS>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4013      	ands	r3, r2
 800417e:	2b01      	cmp	r3, #1
 8004180:	d0e9      	beq.n	8004156 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004182:	7dfb      	ldrb	r3, [r7, #23]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000000 	.word	0x20000000

08004190 <LL_RCC_GetUSARTClockSource>:
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800419c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	401a      	ands	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	4313      	orrs	r3, r2
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <LL_RCC_GetLPUARTClockSource>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4013      	ands	r3, r2
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e042      	b.n	800426a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fd fe6a 	bl	8001ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	@ 0x24
 8004200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fec3 	bl	8004fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fc4c 	bl	8004ac0 <UART_SetConfig>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e01b      	b.n	800426a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004240:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004250:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 ff41 	bl	80050ea <UART_CheckIdleState>
 8004268:	4603      	mov	r3, r0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b08a      	sub	sp, #40	@ 0x28
 8004276:	af02      	add	r7, sp, #8
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004288:	2b20      	cmp	r3, #32
 800428a:	d173      	bne.n	8004374 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_UART_Transmit+0x26>
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e06c      	b.n	8004376 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2221      	movs	r2, #33	@ 0x21
 80042a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ac:	f7fe f880 	bl	80023b0 <HAL_GetTick>
 80042b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	88fa      	ldrh	r2, [r7, #6]
 80042be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ca:	d108      	bne.n	80042de <HAL_UART_Transmit+0x6c>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	e003      	b.n	80042e6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042e6:	e02c      	b.n	8004342 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2200      	movs	r2, #0
 80042f0:	2180      	movs	r1, #128	@ 0x80
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 ff47 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e039      	b.n	8004376 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004316:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	3302      	adds	r3, #2
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e007      	b.n	8004330 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	781a      	ldrb	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3301      	adds	r3, #1
 800432e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1cc      	bne.n	80042e8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2200      	movs	r2, #0
 8004356:	2140      	movs	r1, #64	@ 0x40
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 ff14 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e006      	b.n	8004376 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	@ 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004394:	2b20      	cmp	r3, #32
 8004396:	d137      	bne.n	8004408 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Receive_DMA+0x24>
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e030      	b.n	800440a <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a18      	ldr	r2, [pc, #96]	@ (8004414 <HAL_UART_Receive_DMA+0x94>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d01f      	beq.n	80043f8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d018      	beq.n	80043f8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	613b      	str	r3, [r7, #16]
   return(result);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	69f9      	ldr	r1, [r7, #28]
 80043ea:	6a3a      	ldr	r2, [r7, #32]
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e6      	bne.n	80043c6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	461a      	mov	r2, r3
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 ff90 	bl	8005324 <UART_Start_Receive_DMA>
 8004404:	4603      	mov	r3, r0
 8004406:	e000      	b.n	800440a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3728      	adds	r7, #40	@ 0x28
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40008000 	.word	0x40008000

08004418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b0ba      	sub	sp, #232	@ 0xe8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800443e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004442:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004446:	4013      	ands	r3, r2
 8004448:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800444c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d11b      	bne.n	800448c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800446c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 82e3 	beq.w	8004a48 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
      }
      return;
 800448a:	e2dd      	b.n	8004a48 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800448c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8123 	beq.w	80046dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004496:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800449a:	4b8d      	ldr	r3, [pc, #564]	@ (80046d0 <HAL_UART_IRQHandler+0x2b8>)
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80044a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80044a6:	4b8b      	ldr	r3, [pc, #556]	@ (80046d4 <HAL_UART_IRQHandler+0x2bc>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8116 	beq.w	80046dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d011      	beq.n	80044e0 <HAL_UART_IRQHandler+0xc8>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2201      	movs	r2, #1
 80044ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d6:	f043 0201 	orr.w	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d011      	beq.n	8004510 <HAL_UART_IRQHandler+0xf8>
 80044ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2202      	movs	r2, #2
 80044fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	f043 0204 	orr.w	r2, r3, #4
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d011      	beq.n	8004540 <HAL_UART_IRQHandler+0x128>
 800451c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2204      	movs	r2, #4
 800452e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004536:	f043 0202 	orr.w	r2, r3, #2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d017      	beq.n	800457c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800454c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004558:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800455c:	4b5c      	ldr	r3, [pc, #368]	@ (80046d0 <HAL_UART_IRQHandler+0x2b8>)
 800455e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2208      	movs	r2, #8
 800456a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	f043 0208 	orr.w	r2, r3, #8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800457c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <HAL_UART_IRQHandler+0x196>
 8004588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00c      	beq.n	80045ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800459c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8249 	beq.w	8004a4c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d013      	beq.n	80045ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d105      	bne.n	80045de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004602:	2b40      	cmp	r3, #64	@ 0x40
 8004604:	d005      	beq.n	8004612 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800460a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d054      	beq.n	80046bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 ff6c 	bl	80054f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004622:	2b40      	cmp	r3, #64	@ 0x40
 8004624:	d146      	bne.n	80046b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800463c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004652:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800465e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800466a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1d9      	bne.n	8004626 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d017      	beq.n	80046ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004682:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <HAL_UART_IRQHandler+0x2c0>)
 8004684:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe f929 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d019      	beq.n	80046cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80046a6:	4610      	mov	r0, r2
 80046a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046aa:	e00f      	b.n	80046cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f9f2 	bl	8004a96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b2:	e00b      	b.n	80046cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f9ee 	bl	8004a96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ba:	e007      	b.n	80046cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f9ea 	bl	8004a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80046ca:	e1bf      	b.n	8004a4c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	bf00      	nop
    return;
 80046ce:	e1bd      	b.n	8004a4c <HAL_UART_IRQHandler+0x634>
 80046d0:	10000001 	.word	0x10000001
 80046d4:	04000120 	.word	0x04000120
 80046d8:	080057a5 	.word	0x080057a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	f040 8153 	bne.w	800498c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 814c 	beq.w	800498c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8145 	beq.w	800498c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2210      	movs	r2, #16
 8004708:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004714:	2b40      	cmp	r3, #64	@ 0x40
 8004716:	f040 80bb 	bne.w	8004890 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004728:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 818f 	beq.w	8004a50 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004738:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800473c:	429a      	cmp	r2, r3
 800473e:	f080 8187 	bcs.w	8004a50 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004748:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 8087 	bne.w	800486e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800477c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800478a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800478e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004796:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1da      	bne.n	8004760 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3308      	adds	r3, #8
 80047b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3308      	adds	r3, #8
 80047ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e1      	bne.n	80047aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800480a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800480c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004810:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e3      	bne.n	80047e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800483a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483c:	f023 0310 	bic.w	r3, r3, #16
 8004840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800484e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004850:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004854:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800485c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e4      	bne.n	800482c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd ffdd 	bl	8002828 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004880:	b29b      	uxth	r3, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	b29b      	uxth	r3, r3
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f90d 	bl	8004aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800488e:	e0df      	b.n	8004a50 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800489c:	b29b      	uxth	r3, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80d1 	beq.w	8004a54 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80048b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80cc 	beq.w	8004a54 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048de:	647b      	str	r3, [r7, #68]	@ 0x44
 80048e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e4      	bne.n	80048bc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3308      	adds	r3, #8
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	623b      	str	r3, [r7, #32]
   return(result);
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800491a:	633a      	str	r2, [r7, #48]	@ 0x30
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e1      	bne.n	80048f2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0310 	bic.w	r3, r3, #16
 8004956:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	69b9      	ldr	r1, [r7, #24]
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	617b      	str	r3, [r7, #20]
   return(result);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e4      	bne.n	8004942 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800497e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f88f 	bl	8004aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800498a:	e063      	b.n	8004a54 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00e      	beq.n	80049b6 <HAL_UART_IRQHandler+0x59e>
 8004998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800499c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80049ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 ff39 	bl	8005826 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049b4:	e051      	b.n	8004a5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d014      	beq.n	80049ec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80049c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80049ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d03a      	beq.n	8004a58 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	4798      	blx	r3
    }
    return;
 80049ea:	e035      	b.n	8004a58 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <HAL_UART_IRQHandler+0x5f4>
 80049f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fee3 	bl	80057d0 <UART_EndTransmit_IT>
    return;
 8004a0a:	e026      	b.n	8004a5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <HAL_UART_IRQHandler+0x614>
 8004a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 ff10 	bl	800584a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a2a:	e016      	b.n	8004a5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_UART_IRQHandler+0x642>
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	da0c      	bge.n	8004a5a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fef9 	bl	8005838 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a46:	e008      	b.n	8004a5a <HAL_UART_IRQHandler+0x642>
      return;
 8004a48:	bf00      	nop
 8004a4a:	e006      	b.n	8004a5a <HAL_UART_IRQHandler+0x642>
    return;
 8004a4c:	bf00      	nop
 8004a4e:	e004      	b.n	8004a5a <HAL_UART_IRQHandler+0x642>
      return;
 8004a50:	bf00      	nop
 8004a52:	e002      	b.n	8004a5a <HAL_UART_IRQHandler+0x642>
      return;
 8004a54:	bf00      	nop
 8004a56:	e000      	b.n	8004a5a <HAL_UART_IRQHandler+0x642>
    return;
 8004a58:	bf00      	nop
  }
}
 8004a5a:	37e8      	adds	r7, #232	@ 0xe8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr
	...

08004ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b08c      	sub	sp, #48	@ 0x30
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b94      	ldr	r3, [pc, #592]	@ (8004d40 <UART_SetConfig+0x280>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a89      	ldr	r2, [pc, #548]	@ (8004d44 <UART_SetConfig+0x284>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004b36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	f023 010f 	bic.w	r1, r3, #15
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7a      	ldr	r2, [pc, #488]	@ (8004d48 <UART_SetConfig+0x288>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d127      	bne.n	8004bb4 <UART_SetConfig+0xf4>
 8004b64:	2003      	movs	r0, #3
 8004b66:	f7ff fb13 	bl	8004190 <LL_RCC_GetUSARTClockSource>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d81b      	bhi.n	8004bac <UART_SetConfig+0xec>
 8004b74:	a201      	add	r2, pc, #4	@ (adr r2, 8004b7c <UART_SetConfig+0xbc>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004b9d 	.word	0x08004b9d
 8004b84:	08004b95 	.word	0x08004b95
 8004b88:	08004ba5 	.word	0x08004ba5
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b92:	e080      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9a:	e07c      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba2:	e078      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004baa:	e074      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004bac:	2310      	movs	r3, #16
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb2:	e070      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a64      	ldr	r2, [pc, #400]	@ (8004d4c <UART_SetConfig+0x28c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d138      	bne.n	8004c30 <UART_SetConfig+0x170>
 8004bbe:	200c      	movs	r0, #12
 8004bc0:	f7ff fae6 	bl	8004190 <LL_RCC_GetUSARTClockSource>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d82c      	bhi.n	8004c28 <UART_SetConfig+0x168>
 8004bce:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <UART_SetConfig+0x114>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	08004c29 	.word	0x08004c29
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c19 	.word	0x08004c19
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c29 	.word	0x08004c29
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c11 	.word	0x08004c11
 8004bf8:	08004c29 	.word	0x08004c29
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0e:	e042      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c10:	2302      	movs	r3, #2
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c16:	e03e      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1e:	e03a      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c26:	e036      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2e:	e032      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a43      	ldr	r2, [pc, #268]	@ (8004d44 <UART_SetConfig+0x284>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d12a      	bne.n	8004c90 <UART_SetConfig+0x1d0>
 8004c3a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004c3e:	f7ff fab9 	bl	80041b4 <LL_RCC_GetLPUARTClockSource>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c48:	d01a      	beq.n	8004c80 <UART_SetConfig+0x1c0>
 8004c4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c4e:	d81b      	bhi.n	8004c88 <UART_SetConfig+0x1c8>
 8004c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c54:	d00c      	beq.n	8004c70 <UART_SetConfig+0x1b0>
 8004c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c5a:	d815      	bhi.n	8004c88 <UART_SetConfig+0x1c8>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <UART_SetConfig+0x1a8>
 8004c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c64:	d008      	beq.n	8004c78 <UART_SetConfig+0x1b8>
 8004c66:	e00f      	b.n	8004c88 <UART_SetConfig+0x1c8>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e012      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c76:	e00e      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7e:	e00a      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c86:	e006      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c8e:	e002      	b.n	8004c96 <UART_SetConfig+0x1d6>
 8004c90:	2310      	movs	r3, #16
 8004c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004d44 <UART_SetConfig+0x284>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	f040 80a4 	bne.w	8004dea <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d823      	bhi.n	8004cf2 <UART_SetConfig+0x232>
 8004caa:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb0 <UART_SetConfig+0x1f0>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004cf3 	.word	0x08004cf3
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cf3 	.word	0x08004cf3
 8004cc0:	08004ce3 	.word	0x08004ce3
 8004cc4:	08004cf3 	.word	0x08004cf3
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004cf3 	.word	0x08004cf3
 8004cd0:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7fe fb60 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cda:	e010      	b.n	8004cfe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d50 <UART_SetConfig+0x290>)
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ce0:	e00d      	b.n	8004cfe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe faa5 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 8004ce6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ce8:	e009      	b.n	8004cfe <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cf0:	e005      	b.n	8004cfe <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8137 	beq.w	8004f74 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	4a12      	ldr	r2, [pc, #72]	@ (8004d54 <UART_SetConfig+0x294>)
 8004d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d10:	461a      	mov	r2, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d305      	bcc.n	8004d36 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d910      	bls.n	8004d58 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d3c:	e11a      	b.n	8004f74 <UART_SetConfig+0x4b4>
 8004d3e:	bf00      	nop
 8004d40:	cfff69f3 	.word	0xcfff69f3
 8004d44:	40008000 	.word	0x40008000
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40004400 	.word	0x40004400
 8004d50:	00f42400 	.word	0x00f42400
 8004d54:	0800b6f0 	.word	0x0800b6f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	60fa      	str	r2, [r7, #12]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	4a8e      	ldr	r2, [pc, #568]	@ (8004fa0 <UART_SetConfig+0x4e0>)
 8004d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d7a:	f7fc f9cb 	bl	8001114 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4610      	mov	r0, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	020b      	lsls	r3, r1, #8
 8004d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d94:	0202      	lsls	r2, r0, #8
 8004d96:	6979      	ldr	r1, [r7, #20]
 8004d98:	6849      	ldr	r1, [r1, #4]
 8004d9a:	0849      	lsrs	r1, r1, #1
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	4605      	mov	r5, r0
 8004da2:	eb12 0804 	adds.w	r8, r2, r4
 8004da6:	eb43 0905 	adc.w	r9, r3, r5
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	469a      	mov	sl, r3
 8004db2:	4693      	mov	fp, r2
 8004db4:	4652      	mov	r2, sl
 8004db6:	465b      	mov	r3, fp
 8004db8:	4640      	mov	r0, r8
 8004dba:	4649      	mov	r1, r9
 8004dbc:	f7fc f9aa 	bl	8001114 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dce:	d308      	bcc.n	8004de2 <UART_SetConfig+0x322>
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dd6:	d204      	bcs.n	8004de2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	e0c8      	b.n	8004f74 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004de8:	e0c4      	b.n	8004f74 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df2:	d167      	bne.n	8004ec4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004df4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d828      	bhi.n	8004e4e <UART_SetConfig+0x38e>
 8004dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004e04 <UART_SetConfig+0x344>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e39 	.word	0x08004e39
 8004e10:	08004e4f 	.word	0x08004e4f
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e4f 	.word	0x08004e4f
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	08004e47 	.word	0x08004e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fe fab6 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e2e:	e014      	b.n	8004e5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7fe fac4 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8004e34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e36:	e010      	b.n	8004e5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e38:	4b5a      	ldr	r3, [pc, #360]	@ (8004fa4 <UART_SetConfig+0x4e4>)
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e3c:	e00d      	b.n	8004e5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fe f9f7 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 8004e42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e44:	e009      	b.n	8004e5a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e4c:	e005      	b.n	8004e5a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8089 	beq.w	8004f74 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	4a4e      	ldr	r2, [pc, #312]	@ (8004fa0 <UART_SetConfig+0x4e0>)
 8004e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e74:	005a      	lsls	r2, r3, #1
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	441a      	add	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d916      	bls.n	8004ebc <UART_SetConfig+0x3fc>
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d212      	bcs.n	8004ebc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f023 030f 	bic.w	r3, r3, #15
 8004e9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	8bfb      	ldrh	r3, [r7, #30]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	8bfa      	ldrh	r2, [r7, #30]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	e05b      	b.n	8004f74 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ec2:	e057      	b.n	8004f74 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ec4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d828      	bhi.n	8004f1e <UART_SetConfig+0x45e>
 8004ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed4 <UART_SetConfig+0x414>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004f01 	.word	0x08004f01
 8004edc:	08004f09 	.word	0x08004f09
 8004ee0:	08004f1f 	.word	0x08004f1f
 8004ee4:	08004f0f 	.word	0x08004f0f
 8004ee8:	08004f1f 	.word	0x08004f1f
 8004eec:	08004f1f 	.word	0x08004f1f
 8004ef0:	08004f1f 	.word	0x08004f1f
 8004ef4:	08004f17 	.word	0x08004f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fe fa4e 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004efc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004efe:	e014      	b.n	8004f2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f00:	f7fe fa5c 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8004f04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f06:	e010      	b.n	8004f2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f08:	4b26      	ldr	r3, [pc, #152]	@ (8004fa4 <UART_SetConfig+0x4e4>)
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f0c:	e00d      	b.n	8004f2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0e:	f7fe f98f 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 8004f12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f14:	e009      	b.n	8004f2a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f1c:	e005      	b.n	8004f2a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f28:	bf00      	nop
    }

    if (pclk != 0U)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d021      	beq.n	8004f74 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa0 <UART_SetConfig+0x4e0>)
 8004f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	441a      	add	r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	d909      	bls.n	8004f6e <UART_SetConfig+0x4ae>
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f60:	d205      	bcs.n	8004f6e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	e002      	b.n	8004f74 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2200      	movs	r2, #0
 8004f88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3730      	adds	r7, #48	@ 0x30
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9e:	bf00      	nop
 8004fa0:	0800b6f0 	.word	0x0800b6f0
 8004fa4:	00f42400 	.word	0x00f42400

08004fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01a      	beq.n	80050be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050a6:	d10a      	bne.n	80050be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
  }
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050fa:	f7fd f959 	bl	80023b0 <HAL_GetTick>
 80050fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b08      	cmp	r3, #8
 800510c:	d10e      	bne.n	800512c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800510e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f832 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e028      	b.n	800517e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b04      	cmp	r3, #4
 8005138:	d10e      	bne.n	8005158 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f81c 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e012      	b.n	800517e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b09c      	sub	sp, #112	@ 0x70
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	e0af      	b.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800519e:	f000 80ab 	beq.w	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fd f905 	bl	80023b0 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80051b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d140      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80051c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80051cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051d8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80051dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80051e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e6      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3308      	adds	r3, #8
 80051f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	663b      	str	r3, [r7, #96]	@ 0x60
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800520a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800520c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e06f      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d057      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b80      	cmp	r3, #128	@ 0x80
 800524c:	d054      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b40      	cmp	r3, #64	@ 0x40
 8005252:	d051      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800525e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005262:	d149      	bne.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800526c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005282:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
 800528e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800529a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3308      	adds	r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	613b      	str	r3, [r7, #16]
   return(result);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052c0:	623a      	str	r2, [r7, #32]
 80052c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	69f9      	ldr	r1, [r7, #28]
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e010      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	429a      	cmp	r2, r3
 8005314:	f43f af40 	beq.w	8005198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3770      	adds	r7, #112	@ 0x70
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b096      	sub	sp, #88	@ 0x58
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2222      	movs	r2, #34	@ 0x22
 800534c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d02d      	beq.n	80053b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005360:	4a40      	ldr	r2, [pc, #256]	@ (8005464 <UART_Start_Receive_DMA+0x140>)
 8005362:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800536a:	4a3f      	ldr	r2, [pc, #252]	@ (8005468 <UART_Start_Receive_DMA+0x144>)
 800536c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005374:	4a3d      	ldr	r2, [pc, #244]	@ (800546c <UART_Start_Receive_DMA+0x148>)
 8005376:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537e:	2200      	movs	r2, #0
 8005380:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3324      	adds	r3, #36	@ 0x24
 800538e:	4619      	mov	r1, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005394:	461a      	mov	r2, r3
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	f7fd f9c8 	bl	800272c <HAL_DMA_Start_IT>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2210      	movs	r2, #16
 80053a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e051      	b.n	800545a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d018      	beq.n	80053f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80053ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	653b      	str	r3, [r7, #80]	@ 0x50
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005410:	637a      	str	r2, [r7, #52]	@ 0x34
 8005412:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e5      	bne.n	80053f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	613b      	str	r3, [r7, #16]
   return(result);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800543a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3308      	adds	r3, #8
 8005442:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005444:	623a      	str	r2, [r7, #32]
 8005446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	69f9      	ldr	r1, [r7, #28]
 800544a:	6a3a      	ldr	r2, [r7, #32]
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	61bb      	str	r3, [r7, #24]
   return(result);
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e5      	bne.n	8005424 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3758      	adds	r7, #88	@ 0x58
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	080055bb 	.word	0x080055bb
 8005468:	080056e7 	.word	0x080056e7
 800546c:	08005725 	.word	0x08005725

08005470 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005470:	b480      	push	{r7}
 8005472:	b08f      	sub	sp, #60	@ 0x3c
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	61fb      	str	r3, [r7, #28]
   return(result);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800548c:	637b      	str	r3, [r7, #52]	@ 0x34
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005498:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800549c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e6      	bne.n	8005478 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3308      	adds	r3, #8
 80054b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80054c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3308      	adds	r3, #8
 80054c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ca:	61ba      	str	r2, [r7, #24]
 80054cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6979      	ldr	r1, [r7, #20]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	613b      	str	r3, [r7, #16]
   return(result);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e5      	bne.n	80054aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80054e6:	bf00      	nop
 80054e8:	373c      	adds	r7, #60	@ 0x3c
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr

080054f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b095      	sub	sp, #84	@ 0x54
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800550c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005516:	643b      	str	r3, [r7, #64]	@ 0x40
 8005518:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800551c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e6      	bne.n	80054f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3308      	adds	r3, #8
 8005530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	61fb      	str	r3, [r7, #28]
   return(result);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3308      	adds	r3, #8
 800554c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800554e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005550:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e3      	bne.n	800552a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d118      	bne.n	800559c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	60bb      	str	r3, [r7, #8]
   return(result);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 0310 	bic.w	r3, r3, #16
 800557e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6979      	ldr	r1, [r7, #20]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	613b      	str	r3, [r7, #16]
   return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80055b0:	bf00      	nop
 80055b2:	3754      	adds	r7, #84	@ 0x54
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr

080055ba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b09c      	sub	sp, #112	@ 0x70
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d171      	bne.n	80056ba <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80055d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055d8:	2200      	movs	r2, #0
 80055da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005602:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800560a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	667b      	str	r3, [r7, #100]	@ 0x64
 8005628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005630:	647a      	str	r2, [r7, #68]	@ 0x44
 8005632:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800563e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	623b      	str	r3, [r7, #32]
   return(result);
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800565a:	663b      	str	r3, [r7, #96]	@ 0x60
 800565c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3308      	adds	r3, #8
 8005662:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005664:	633a      	str	r2, [r7, #48]	@ 0x30
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800566a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800567a:	2220      	movs	r2, #32
 800567c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005684:	2b01      	cmp	r3, #1
 8005686:	d118      	bne.n	80056ba <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	60fb      	str	r3, [r7, #12]
   return(result);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f023 0310 	bic.w	r3, r3, #16
 800569c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800569e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	69b9      	ldr	r1, [r7, #24]
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	617b      	str	r3, [r7, #20]
   return(result);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e6      	bne.n	8005688 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056bc:	2200      	movs	r2, #0
 80056be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056ce:	4619      	mov	r1, r3
 80056d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056d2:	f7ff f9e9 	bl	8004aa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056d6:	e002      	b.n	80056de <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80056d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056da:	f7ff f9ca 	bl	8004a72 <HAL_UART_RxCpltCallback>
}
 80056de:	bf00      	nop
 80056e0:	3770      	adds	r7, #112	@ 0x70
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d109      	bne.n	8005716 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	4619      	mov	r1, r3
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff f9ca 	bl	8004aa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005714:	e002      	b.n	800571c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff f9b4 	bl	8004a84 <HAL_UART_RxHalfCpltCallback>
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005730:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005738:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005740:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574c:	2b80      	cmp	r3, #128	@ 0x80
 800574e:	d109      	bne.n	8005764 <UART_DMAError+0x40>
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b21      	cmp	r3, #33	@ 0x21
 8005754:	d106      	bne.n	8005764 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2200      	movs	r2, #0
 800575a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800575e:	6978      	ldr	r0, [r7, #20]
 8005760:	f7ff fe86 	bl	8005470 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576e:	2b40      	cmp	r3, #64	@ 0x40
 8005770:	d109      	bne.n	8005786 <UART_DMAError+0x62>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b22      	cmp	r3, #34	@ 0x22
 8005776:	d106      	bne.n	8005786 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2200      	movs	r2, #0
 800577c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005780:	6978      	ldr	r0, [r7, #20]
 8005782:	f7ff feb5 	bl	80054f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578c:	f043 0210 	orr.w	r2, r3, #16
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005796:	6978      	ldr	r0, [r7, #20]
 8005798:	f7ff f97d 	bl	8004a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579c:	bf00      	nop
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff f967 	bl	8004a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6979      	ldr	r1, [r7, #20]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	613b      	str	r3, [r7, #16]
   return(result);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e6      	bne.n	80057d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff f921 	bl	8004a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800581e:	bf00      	nop
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr

0800584a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_UARTEx_DisableFifoMode+0x16>
 800586e:	2302      	movs	r3, #2
 8005870:	e027      	b.n	80058c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2224      	movs	r2, #36	@ 0x24
 800587e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80058a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e02d      	b.n	8005940 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2224      	movs	r2, #36	@ 0x24
 80058f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f84f 	bl	80059c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800595c:	2302      	movs	r3, #2
 800595e:	e02d      	b.n	80059bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2224      	movs	r2, #36	@ 0x24
 800596c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0201 	bic.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f811 	bl	80059c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d108      	bne.n	80059e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059e4:	e031      	b.n	8005a4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059e6:	2308      	movs	r3, #8
 80059e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059ea:	2308      	movs	r3, #8
 80059ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	0e5b      	lsrs	r3, r3, #25
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	0f5b      	lsrs	r3, r3, #29
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	7b3a      	ldrb	r2, [r7, #12]
 8005a12:	4910      	ldr	r1, [pc, #64]	@ (8005a54 <UARTEx_SetNbDataToProcess+0x90>)
 8005a14:	5c8a      	ldrb	r2, [r1, r2]
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a1a:	7b3a      	ldrb	r2, [r7, #12]
 8005a1c:	490e      	ldr	r1, [pc, #56]	@ (8005a58 <UARTEx_SetNbDataToProcess+0x94>)
 8005a1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	7b7a      	ldrb	r2, [r7, #13]
 8005a30:	4908      	ldr	r1, [pc, #32]	@ (8005a54 <UARTEx_SetNbDataToProcess+0x90>)
 8005a32:	5c8a      	ldrb	r2, [r1, r2]
 8005a34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a38:	7b7a      	ldrb	r2, [r7, #13]
 8005a3a:	4907      	ldr	r1, [pc, #28]	@ (8005a58 <UARTEx_SetNbDataToProcess+0x94>)
 8005a3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr
 8005a54:	0800b708 	.word	0x0800b708
 8005a58:	0800b710 	.word	0x0800b710

08005a5c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8005a60:	f7fc fbd4 	bl	800220c <BSP_RADIO_Init>
 8005a64:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <RBI_GetTxConfig>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_GetTxConfig(void)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8005a6e:	f7fc fc0b 	bl	8002288 <BSP_RADIO_GetTxConfig>
 8005a72:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8005a7c:	f7fc fc0b 	bl	8002296 <BSP_RADIO_IsTCXO>
 8005a80:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8005a8a:	f7fc fc0b 	bl	80022a4 <BSP_RADIO_IsDCDC>
 8005a8e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fc fc06 	bl	80022b2 <BSP_RADIO_GetRFOMaxPowerConfig>
 8005aa6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8005abe:	4a1d      	ldr	r2, [pc, #116]	@ (8005b34 <SUBGRF_Init+0x84>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8005ac4:	f7fc f8b8 	bl	8001c38 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8005ac8:	2002      	movs	r0, #2
 8005aca:	f000 fef7 	bl	80068bc <Radio_SMPS_Set>

    ImageCalibrated = false;
 8005ace:	4b1a      	ldr	r3, [pc, #104]	@ (8005b38 <SUBGRF_Init+0x88>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f000 f8b9 	bl	8005c4c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8005ada:	f7ff ffcd 	bl	8005a78 <RBI_IsTCXO>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d10e      	bne.n	8005b02 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8005ae4:	2140      	movs	r1, #64	@ 0x40
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	f000 f9fe 	bl	8005ee8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8005aec:	2100      	movs	r1, #0
 8005aee:	f640 1011 	movw	r0, #2321	@ 0x911
 8005af2:	f000 fd3d 	bl	8006570 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8005af6:	237f      	movs	r3, #127	@ 0x7f
 8005af8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8005afa:	7b38      	ldrb	r0, [r7, #12]
 8005afc:	f000 f902 	bl	8005d04 <SUBGRF_Calibrate>
 8005b00:	e009      	b.n	8005b16 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005b02:	2120      	movs	r1, #32
 8005b04:	f640 1011 	movw	r0, #2321	@ 0x911
 8005b08:	f000 fd32 	bl	8006570 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005b0c:	2120      	movs	r1, #32
 8005b0e:	f640 1012 	movw	r0, #2322	@ 0x912
 8005b12:	f000 fd2d 	bl	8006570 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005b16:	210e      	movs	r1, #14
 8005b18:	f640 101f 	movw	r0, #2335	@ 0x91f
 8005b1c:	f000 fd28 	bl	8006570 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8005b20:	f7ff ff9c 	bl	8005a5c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8005b24:	4b05      	ldr	r3, [pc, #20]	@ (8005b3c <SUBGRF_Init+0x8c>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	701a      	strb	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000578 	.word	0x20000578
 8005b38:	20000574 	.word	0x20000574
 8005b3c:	2000056c 	.word	0x2000056c

08005b40 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	2000      	movs	r0, #0
 8005b54:	f000 fd56 	bl	8006604 <SUBGRF_WriteBuffer>
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8005b72:	f107 0317 	add.w	r3, r7, #23
 8005b76:	4619      	mov	r1, r3
 8005b78:	68b8      	ldr	r0, [r7, #8]
 8005b7a:	f000 fc7b 	bl	8006474 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	79fa      	ldrb	r2, [r7, #7]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d201      	bcs.n	8005b8c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e007      	b.n	8005b9c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8005b8c:	7df8      	ldrb	r0, [r7, #23]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	68f9      	ldr	r1, [r7, #12]
 8005b96:	f000 fd57 	bl	8006648 <SUBGRF_ReadBuffer>

    return 0;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	460b      	mov	r3, r1
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8005bb2:	7afb      	ldrb	r3, [r7, #11]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff ffc2 	bl	8005b40 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f861 	bl	8005c84 <SUBGRF_SetTx>
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8005be4:	f000 fa04 	bl	8005ff0 <SUBGRF_GetPacketType>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d108      	bne.n	8005c00 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8005bee:	f107 030c 	add.w	r3, r7, #12
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8005bfa:	f000 fce1 	bl	80065c0 <SUBGRF_WriteRegisters>
            break;
 8005bfe:	e000      	b.n	8005c02 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8005c00:	bf00      	nop
    }
}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	4603      	mov	r3, r0
 8005c12:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8005c1e:	88fb      	ldrh	r3, [r7, #6]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8005c24:	f000 f9e4 	bl	8005ff0 <SUBGRF_GetPacketType>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d108      	bne.n	8005c40 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8005c2e:	f107 030c 	add.w	r3, r7, #12
 8005c32:	2202      	movs	r2, #2
 8005c34:	4619      	mov	r1, r3
 8005c36:	f240 60be 	movw	r0, #1726	@ 0x6be
 8005c3a:	f000 fcc1 	bl	80065c0 <SUBGRF_WriteRegisters>
            break;
 8005c3e:	e000      	b.n	8005c42 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8005c40:	bf00      	nop
    }
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8005c56:	1dfb      	adds	r3, r7, #7
 8005c58:	2201      	movs	r2, #1
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	2080      	movs	r0, #128	@ 0x80
 8005c5e:	f000 fd15 	bl	800668c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8005c68:	4b05      	ldr	r3, [pc, #20]	@ (8005c80 <SUBGRF_SetStandby+0x34>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8005c6e:	e002      	b.n	8005c76 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8005c70:	4b03      	ldr	r3, [pc, #12]	@ (8005c80 <SUBGRF_SetStandby+0x34>)
 8005c72:	2202      	movs	r2, #2
 8005c74:	701a      	strb	r2, [r3, #0]
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	2000056c 	.word	0x2000056c

08005c84 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <SUBGRF_SetTx+0x3c>)
 8005c8e:	2204      	movs	r2, #4
 8005c90:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	0c1b      	lsrs	r3, r3, #16
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	2203      	movs	r2, #3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	2083      	movs	r0, #131	@ 0x83
 8005cb2:	f000 fceb 	bl	800668c <SUBGRF_WriteCommand>
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2000056c 	.word	0x2000056c

08005cc4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <SUBGRF_SetRx+0x3c>)
 8005cce:	2205      	movs	r2, #5
 8005cd0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8005ce8:	f107 030c 	add.w	r3, r7, #12
 8005cec:	2203      	movs	r2, #3
 8005cee:	4619      	mov	r1, r3
 8005cf0:	2082      	movs	r0, #130	@ 0x82
 8005cf2:	f000 fccb 	bl	800668c <SUBGRF_WriteCommand>
}
 8005cf6:	bf00      	nop
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	2000056c 	.word	0x2000056c

08005d04 <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8005d0c:	793b      	ldrb	r3, [r7, #4]
 8005d0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	b25b      	sxtb	r3, r3
 8005d16:	019b      	lsls	r3, r3, #6
 8005d18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8005d1a:	793b      	ldrb	r3, [r7, #4]
 8005d1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d20:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8005d22:	b25b      	sxtb	r3, r3
 8005d24:	015b      	lsls	r3, r3, #5
 8005d26:	b25b      	sxtb	r3, r3
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8005d2c:	793b      	ldrb	r3, [r7, #4]
 8005d2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d32:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8005d34:	b25b      	sxtb	r3, r3
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	b25b      	sxtb	r3, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8005d3e:	793b      	ldrb	r3, [r7, #4]
 8005d40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d44:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	b25b      	sxtb	r3, r3
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8005d50:	793b      	ldrb	r3, [r7, #4]
 8005d52:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d56:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8005d58:	b25b      	sxtb	r3, r3
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8005d62:	793b      	ldrb	r3, [r7, #4]
 8005d64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d68:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8005d6a:	b25b      	sxtb	r3, r3
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	4313      	orrs	r3, r2
 8005d72:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8005d74:	793b      	ldrb	r3, [r7, #4]
 8005d76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b25b      	sxtb	r3, r3
 8005d82:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8005d84:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8005d86:	f107 030f 	add.w	r3, r7, #15
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	2089      	movs	r0, #137	@ 0x89
 8005d90:	f000 fc7c 	bl	800668c <SUBGRF_WriteCommand>
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <SUBGRF_CalibrateImage+0x80>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d904      	bls.n	8005db6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8005dac:	23e1      	movs	r3, #225	@ 0xe1
 8005dae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8005db0:	23e9      	movs	r3, #233	@ 0xe9
 8005db2:	737b      	strb	r3, [r7, #13]
 8005db4:	e027      	b.n	8005e06 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a19      	ldr	r2, [pc, #100]	@ (8005e20 <SUBGRF_CalibrateImage+0x84>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d904      	bls.n	8005dc8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8005dbe:	23d7      	movs	r3, #215	@ 0xd7
 8005dc0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8005dc2:	23db      	movs	r3, #219	@ 0xdb
 8005dc4:	737b      	strb	r3, [r7, #13]
 8005dc6:	e01e      	b.n	8005e06 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a16      	ldr	r2, [pc, #88]	@ (8005e24 <SUBGRF_CalibrateImage+0x88>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d904      	bls.n	8005dda <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8005dd0:	23c1      	movs	r3, #193	@ 0xc1
 8005dd2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8005dd4:	23c5      	movs	r3, #197	@ 0xc5
 8005dd6:	737b      	strb	r3, [r7, #13]
 8005dd8:	e015      	b.n	8005e06 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a12      	ldr	r2, [pc, #72]	@ (8005e28 <SUBGRF_CalibrateImage+0x8c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d904      	bls.n	8005dec <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8005de2:	2375      	movs	r3, #117	@ 0x75
 8005de4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8005de6:	2381      	movs	r3, #129	@ 0x81
 8005de8:	737b      	strb	r3, [r7, #13]
 8005dea:	e00c      	b.n	8005e06 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a0f      	ldr	r2, [pc, #60]	@ (8005e2c <SUBGRF_CalibrateImage+0x90>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d904      	bls.n	8005dfe <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8005df4:	236b      	movs	r3, #107	@ 0x6b
 8005df6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8005df8:	236f      	movs	r3, #111	@ 0x6f
 8005dfa:	737b      	strb	r3, [r7, #13]
 8005dfc:	e003      	b.n	8005e06 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8005dfe:	2329      	movs	r3, #41	@ 0x29
 8005e00:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8005e02:	232b      	movs	r3, #43	@ 0x2b
 8005e04:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	2098      	movs	r0, #152	@ 0x98
 8005e10:	f000 fc3c 	bl	800668c <SUBGRF_WriteCommand>
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	35a4e900 	.word	0x35a4e900
 8005e20:	32a9f880 	.word	0x32a9f880
 8005e24:	2de54480 	.word	0x2de54480
 8005e28:	1b6b0b00 	.word	0x1b6b0b00
 8005e2c:	1954fc40 	.word	0x1954fc40

08005e30 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4623      	mov	r3, r4
 8005e40:	71fb      	strb	r3, [r7, #7]
 8005e42:	4603      	mov	r3, r0
 8005e44:	71bb      	strb	r3, [r7, #6]
 8005e46:	460b      	mov	r3, r1
 8005e48:	717b      	strb	r3, [r7, #5]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8005e52:	79bb      	ldrb	r3, [r7, #6]
 8005e54:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8005e56:	797b      	ldrb	r3, [r7, #5]
 8005e58:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8005e5a:	793b      	ldrb	r3, [r7, #4]
 8005e5c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	2204      	movs	r2, #4
 8005e64:	4619      	mov	r1, r3
 8005e66:	2095      	movs	r0, #149	@ 0x95
 8005e68:	f000 fc10 	bl	800668c <SUBGRF_WriteCommand>
}
 8005e6c:	bf00      	nop
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd90      	pop	{r4, r7, pc}

08005e74 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	461a      	mov	r2, r3
 8005e82:	4623      	mov	r3, r4
 8005e84:	80fb      	strh	r3, [r7, #6]
 8005e86:	4603      	mov	r3, r0
 8005e88:	80bb      	strh	r3, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	807b      	strh	r3, [r7, #2]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8005ea2:	88bb      	ldrh	r3, [r7, #4]
 8005ea4:	0a1b      	lsrs	r3, r3, #8
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8005eac:	88bb      	ldrh	r3, [r7, #4]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8005eb2:	887b      	ldrh	r3, [r7, #2]
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8005ebc:	887b      	ldrh	r3, [r7, #2]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8005ec2:	883b      	ldrh	r3, [r7, #0]
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8005ecc:	883b      	ldrh	r3, [r7, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8005ed2:	f107 0308 	add.w	r3, r7, #8
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	4619      	mov	r1, r3
 8005eda:	2008      	movs	r0, #8
 8005edc:	f000 fbd6 	bl	800668c <SUBGRF_WriteCommand>
}
 8005ee0:	bf00      	nop
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd90      	pop	{r4, r7, pc}

08005ee8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	0a1b      	lsrs	r3, r3, #8
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8005f14:	f107 030c 	add.w	r3, r7, #12
 8005f18:	2204      	movs	r2, #4
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	2097      	movs	r0, #151	@ 0x97
 8005f1e:	f000 fbb5 	bl	800668c <SUBGRF_WriteCommand>
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8005f2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb0 <SUBGRF_SetRfFrequency+0x84>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f083 0301 	eor.w	r3, r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ff27 	bl	8005d9c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8005f4e:	4b18      	ldr	r3, [pc, #96]	@ (8005fb0 <SUBGRF_SetRfFrequency+0x84>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	461c      	mov	r4, r3
 8005f5a:	4615      	mov	r5, r2
 8005f5c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8005f60:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8005f64:	4a13      	ldr	r2, [pc, #76]	@ (8005fb4 <SUBGRF_SetRfFrequency+0x88>)
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	f7fb f8d1 	bl	8001114 <__aeabi_uldivmod>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4613      	mov	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	0e1b      	lsrs	r3, r3, #24
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8005f98:	f107 0308 	add.w	r3, r7, #8
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	2086      	movs	r0, #134	@ 0x86
 8005fa2:	f000 fb73 	bl	800668c <SUBGRF_WriteCommand>
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005fb0:	20000574 	.word	0x20000574
 8005fb4:	01e84800 	.word	0x01e84800

08005fb8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8005fc2:	79fa      	ldrb	r2, [r7, #7]
 8005fc4:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <SUBGRF_SetPacketType+0x34>)
 8005fc6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8005fce:	2100      	movs	r1, #0
 8005fd0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8005fd4:	f000 facc 	bl	8006570 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8005fd8:	1dfb      	adds	r3, r7, #7
 8005fda:	2201      	movs	r2, #1
 8005fdc:	4619      	mov	r1, r3
 8005fde:	208a      	movs	r0, #138	@ 0x8a
 8005fe0:	f000 fb54 	bl	800668c <SUBGRF_WriteCommand>
}
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	2000056d 	.word	0x2000056d

08005ff0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
    return PacketType;
 8005ff4:	4b02      	ldr	r3, [pc, #8]	@ (8006000 <SUBGRF_GetPacketType+0x10>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr
 8006000:	2000056d 	.word	0x2000056d

08006004 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	4603      	mov	r3, r0
 800600c:	71fb      	strb	r3, [r7, #7]
 800600e:	460b      	mov	r3, r1
 8006010:	71bb      	strb	r3, [r7, #6]
 8006012:	4613      	mov	r3, r2
 8006014:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d149      	bne.n	80060b0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800601c:	2000      	movs	r0, #0
 800601e:	f7ff fd39 	bl	8005a94 <RBI_GetRFOMaxPowerConfig>
 8006022:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8006024:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	429a      	cmp	r2, r3
 800602c:	da01      	bge.n	8006032 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b0e      	cmp	r3, #14
 8006036:	d10e      	bne.n	8006056 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8006038:	2301      	movs	r3, #1
 800603a:	2201      	movs	r2, #1
 800603c:	2100      	movs	r1, #0
 800603e:	2004      	movs	r0, #4
 8006040:	f7ff fef6 	bl	8005e30 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006044:	79ba      	ldrb	r2, [r7, #6]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	b2db      	uxtb	r3, r3
 800604e:	330e      	adds	r3, #14
 8006050:	b2db      	uxtb	r3, r3
 8006052:	71bb      	strb	r3, [r7, #6]
 8006054:	e01f      	b.n	8006096 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b0a      	cmp	r3, #10
 800605a:	d10e      	bne.n	800607a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800605c:	2301      	movs	r3, #1
 800605e:	2201      	movs	r2, #1
 8006060:	2100      	movs	r1, #0
 8006062:	2001      	movs	r0, #1
 8006064:	f7ff fee4 	bl	8005e30 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8006068:	79ba      	ldrb	r2, [r7, #6]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	b2db      	uxtb	r3, r3
 8006072:	330d      	adds	r3, #13
 8006074:	b2db      	uxtb	r3, r3
 8006076:	71bb      	strb	r3, [r7, #6]
 8006078:	e00d      	b.n	8006096 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800607a:	2301      	movs	r3, #1
 800607c:	2201      	movs	r2, #1
 800607e:	2100      	movs	r1, #0
 8006080:	2007      	movs	r0, #7
 8006082:	f7ff fed5 	bl	8005e30 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006086:	79ba      	ldrb	r2, [r7, #6]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	b2db      	uxtb	r3, r3
 8006090:	330e      	adds	r3, #14
 8006092:	b2db      	uxtb	r3, r3
 8006094:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8006096:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800609a:	f113 0f11 	cmn.w	r3, #17
 800609e:	da01      	bge.n	80060a4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80060a0:	23ef      	movs	r3, #239	@ 0xef
 80060a2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80060a4:	2118      	movs	r1, #24
 80060a6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80060aa:	f000 fa61 	bl	8006570 <SUBGRF_WriteRegister>
 80060ae:	e067      	b.n	8006180 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80060b0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80060b4:	f000 fa70 	bl	8006598 <SUBGRF_ReadRegister>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f043 031e 	orr.w	r3, r3, #30
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	4619      	mov	r1, r3
 80060c2:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80060c6:	f000 fa53 	bl	8006570 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80060ca:	2001      	movs	r0, #1
 80060cc:	f7ff fce2 	bl	8005a94 <RBI_GetRFOMaxPowerConfig>
 80060d0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80060d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	da01      	bge.n	80060e0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b14      	cmp	r3, #20
 80060e4:	d10e      	bne.n	8006104 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80060e6:	2301      	movs	r3, #1
 80060e8:	2200      	movs	r2, #0
 80060ea:	2105      	movs	r1, #5
 80060ec:	2003      	movs	r0, #3
 80060ee:	f7ff fe9f 	bl	8005e30 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80060f2:	79ba      	ldrb	r2, [r7, #6]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	3316      	adds	r3, #22
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	71bb      	strb	r3, [r7, #6]
 8006102:	e031      	b.n	8006168 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b11      	cmp	r3, #17
 8006108:	d10e      	bne.n	8006128 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800610a:	2301      	movs	r3, #1
 800610c:	2200      	movs	r2, #0
 800610e:	2103      	movs	r1, #3
 8006110:	2002      	movs	r0, #2
 8006112:	f7ff fe8d 	bl	8005e30 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006116:	79ba      	ldrb	r2, [r7, #6]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	b2db      	uxtb	r3, r3
 8006120:	3316      	adds	r3, #22
 8006122:	b2db      	uxtb	r3, r3
 8006124:	71bb      	strb	r3, [r7, #6]
 8006126:	e01f      	b.n	8006168 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b0e      	cmp	r3, #14
 800612c:	d10e      	bne.n	800614c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800612e:	2301      	movs	r3, #1
 8006130:	2200      	movs	r2, #0
 8006132:	2102      	movs	r1, #2
 8006134:	2002      	movs	r0, #2
 8006136:	f7ff fe7b 	bl	8005e30 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800613a:	79ba      	ldrb	r2, [r7, #6]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	b2db      	uxtb	r3, r3
 8006144:	330e      	adds	r3, #14
 8006146:	b2db      	uxtb	r3, r3
 8006148:	71bb      	strb	r3, [r7, #6]
 800614a:	e00d      	b.n	8006168 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800614c:	2301      	movs	r3, #1
 800614e:	2200      	movs	r2, #0
 8006150:	2107      	movs	r1, #7
 8006152:	2004      	movs	r0, #4
 8006154:	f7ff fe6c 	bl	8005e30 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006158:	79ba      	ldrb	r2, [r7, #6]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	b2db      	uxtb	r3, r3
 8006162:	3316      	adds	r3, #22
 8006164:	b2db      	uxtb	r3, r3
 8006166:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8006168:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800616c:	f113 0f09 	cmn.w	r3, #9
 8006170:	da01      	bge.n	8006176 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8006172:	23f7      	movs	r3, #247	@ 0xf7
 8006174:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8006176:	2138      	movs	r1, #56	@ 0x38
 8006178:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800617c:	f000 f9f8 	bl	8006570 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8006180:	79bb      	ldrb	r3, [r7, #6]
 8006182:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8006184:	797b      	ldrb	r3, [r7, #5]
 8006186:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8006188:	f107 0308 	add.w	r3, r7, #8
 800618c:	2202      	movs	r2, #2
 800618e:	4619      	mov	r1, r3
 8006190:	208e      	movs	r0, #142	@ 0x8e
 8006192:	f000 fa7b 	bl	800668c <SUBGRF_WriteCommand>
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80061a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80061ae:	f107 0308 	add.w	r3, r7, #8
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006330 <SUBGRF_SetModulationParams+0x190>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d004      	beq.n	80061ce <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fef5 	bl	8005fb8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	f200 80a5 	bhi.w	8006322 <SUBGRF_SetModulationParams+0x182>
 80061d8:	a201      	add	r2, pc, #4	@ (adr r2, 80061e0 <SUBGRF_SetModulationParams+0x40>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	080061f1 	.word	0x080061f1
 80061e4:	080062b1 	.word	0x080062b1
 80061e8:	08006273 	.word	0x08006273
 80061ec:	080062df 	.word	0x080062df
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80061f0:	2308      	movs	r3, #8
 80061f2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4a4e      	ldr	r2, [pc, #312]	@ (8006334 <SUBGRF_SetModulationParams+0x194>)
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	0c1b      	lsrs	r3, r3, #16
 8006204:	b2db      	uxtb	r3, r3
 8006206:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	b2db      	uxtb	r3, r3
 800620e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	7b1b      	ldrb	r3, [r3, #12]
 800621a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7b5b      	ldrb	r3, [r3, #13]
 8006220:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2200      	movs	r2, #0
 8006228:	461c      	mov	r4, r3
 800622a:	4615      	mov	r5, r2
 800622c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8006230:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8006234:	4a40      	ldr	r2, [pc, #256]	@ (8006338 <SUBGRF_SetModulationParams+0x198>)
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	4640      	mov	r0, r8
 800623c:	4649      	mov	r1, r9
 800623e:	f7fa ff69 	bl	8001114 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4613      	mov	r3, r2
 8006248:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	b2db      	uxtb	r3, r3
 8006250:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	0a1b      	lsrs	r3, r3, #8
 8006256:	b2db      	uxtb	r3, r3
 8006258:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	b29a      	uxth	r2, r3
 8006264:	f107 0308 	add.w	r3, r7, #8
 8006268:	4619      	mov	r1, r3
 800626a:	208b      	movs	r0, #139	@ 0x8b
 800626c:	f000 fa0e 	bl	800668c <SUBGRF_WriteCommand>
        break;
 8006270:	e058      	b.n	8006324 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8006272:	2304      	movs	r3, #4
 8006274:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	4a2e      	ldr	r2, [pc, #184]	@ (8006334 <SUBGRF_SetModulationParams+0x194>)
 800627c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	0c1b      	lsrs	r3, r3, #16
 8006286:	b2db      	uxtb	r3, r3
 8006288:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	0a1b      	lsrs	r3, r3, #8
 800628e:	b2db      	uxtb	r3, r3
 8006290:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	7d1b      	ldrb	r3, [r3, #20]
 800629c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800629e:	7cfb      	ldrb	r3, [r7, #19]
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f107 0308 	add.w	r3, r7, #8
 80062a6:	4619      	mov	r1, r3
 80062a8:	208b      	movs	r0, #139	@ 0x8b
 80062aa:	f000 f9ef 	bl	800668c <SUBGRF_WriteCommand>
        break;
 80062ae:	e039      	b.n	8006324 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 80062b0:	2304      	movs	r3, #4
 80062b2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	7e1b      	ldrb	r3, [r3, #24]
 80062b8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	7e5b      	ldrb	r3, [r3, #25]
 80062be:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	7e9b      	ldrb	r3, [r3, #26]
 80062c4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	7edb      	ldrb	r3, [r3, #27]
 80062ca:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	f107 0308 	add.w	r3, r7, #8
 80062d4:	4619      	mov	r1, r3
 80062d6:	208b      	movs	r0, #139	@ 0x8b
 80062d8:	f000 f9d8 	bl	800668c <SUBGRF_WriteCommand>

        break;
 80062dc:	e022      	b.n	8006324 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 80062de:	2305      	movs	r3, #5
 80062e0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4a13      	ldr	r2, [pc, #76]	@ (8006334 <SUBGRF_SetModulationParams+0x194>)
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	0c1b      	lsrs	r3, r3, #16
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	7b1b      	ldrb	r3, [r3, #12]
 8006308:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	7b5b      	ldrb	r3, [r3, #13]
 800630e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006310:	7cfb      	ldrb	r3, [r7, #19]
 8006312:	b29a      	uxth	r2, r3
 8006314:	f107 0308 	add.w	r3, r7, #8
 8006318:	4619      	mov	r1, r3
 800631a:	208b      	movs	r0, #139	@ 0x8b
 800631c:	f000 f9b6 	bl	800668c <SUBGRF_WriteCommand>
        break;
 8006320:	e000      	b.n	8006324 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8006322:	bf00      	nop
    }
}
 8006324:	bf00      	nop
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800632e:	bf00      	nop
 8006330:	2000056d 	.word	0x2000056d
 8006334:	3d090000 	.word	0x3d090000
 8006338:	01e84800 	.word	0x01e84800

0800633c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006348:	f107 030c 	add.w	r3, r7, #12
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	4b44      	ldr	r3, [pc, #272]	@ (800646c <SUBGRF_SetPacketParams+0x130>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d004      	beq.n	800636a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f7ff fe27 	bl	8005fb8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b03      	cmp	r3, #3
 8006370:	d878      	bhi.n	8006464 <SUBGRF_SetPacketParams+0x128>
 8006372:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <SUBGRF_SetPacketParams+0x3c>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	08006389 	.word	0x08006389
 800637c:	08006419 	.word	0x08006419
 8006380:	0800640d 	.word	0x0800640d
 8006384:	08006389 	.word	0x08006389
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7a5b      	ldrb	r3, [r3, #9]
 800638c:	2bf1      	cmp	r3, #241	@ 0xf1
 800638e:	d10a      	bne.n	80063a6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8006390:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006394:	f7ff fc19 	bl	8005bca <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006398:	f248 0005 	movw	r0, #32773	@ 0x8005
 800639c:	f7ff fc35 	bl	8005c0a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80063a0:	2302      	movs	r3, #2
 80063a2:	75bb      	strb	r3, [r7, #22]
 80063a4:	e011      	b.n	80063ca <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7a5b      	ldrb	r3, [r3, #9]
 80063aa:	2bf2      	cmp	r3, #242	@ 0xf2
 80063ac:	d10a      	bne.n	80063c4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80063ae:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80063b2:	f7ff fc0a 	bl	8005bca <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80063b6:	f241 0021 	movw	r0, #4129	@ 0x1021
 80063ba:	f7ff fc26 	bl	8005c0a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80063be:	2306      	movs	r3, #6
 80063c0:	75bb      	strb	r3, [r7, #22]
 80063c2:	e002      	b.n	80063ca <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	7a5b      	ldrb	r3, [r3, #9]
 80063c8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80063ca:	2309      	movs	r3, #9
 80063cc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	885b      	ldrh	r3, [r3, #2]
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	885b      	ldrh	r3, [r3, #2]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	791b      	ldrb	r3, [r3, #4]
 80063e6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	795b      	ldrb	r3, [r3, #5]
 80063ec:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	799b      	ldrb	r3, [r3, #6]
 80063f2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	79db      	ldrb	r3, [r3, #7]
 80063f8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	7a1b      	ldrb	r3, [r3, #8]
 80063fe:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8006400:	7dbb      	ldrb	r3, [r7, #22]
 8006402:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	7a9b      	ldrb	r3, [r3, #10]
 8006408:	753b      	strb	r3, [r7, #20]
        break;
 800640a:	e022      	b.n	8006452 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800640c:	2301      	movs	r3, #1
 800640e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	7b1b      	ldrb	r3, [r3, #12]
 8006414:	733b      	strb	r3, [r7, #12]
        break;
 8006416:	e01c      	b.n	8006452 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8006418:	2306      	movs	r3, #6
 800641a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	89db      	ldrh	r3, [r3, #14]
 8006420:	0a1b      	lsrs	r3, r3, #8
 8006422:	b29b      	uxth	r3, r3
 8006424:	b2db      	uxtb	r3, r3
 8006426:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	89db      	ldrh	r3, [r3, #14]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7c1a      	ldrb	r2, [r3, #16]
 8006434:	4b0e      	ldr	r3, [pc, #56]	@ (8006470 <SUBGRF_SetPacketParams+0x134>)
 8006436:	4611      	mov	r1, r2
 8006438:	7019      	strb	r1, [r3, #0]
 800643a:	4613      	mov	r3, r2
 800643c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	7c5b      	ldrb	r3, [r3, #17]
 8006442:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	7c9b      	ldrb	r3, [r3, #18]
 8006448:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	7cdb      	ldrb	r3, [r3, #19]
 800644e:	747b      	strb	r3, [r7, #17]
        break;
 8006450:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8006452:	7dfb      	ldrb	r3, [r7, #23]
 8006454:	b29a      	uxth	r2, r3
 8006456:	f107 030c 	add.w	r3, r7, #12
 800645a:	4619      	mov	r1, r3
 800645c:	208c      	movs	r0, #140	@ 0x8c
 800645e:	f000 f915 	bl	800668c <SUBGRF_WriteCommand>
 8006462:	e000      	b.n	8006466 <SUBGRF_SetPacketParams+0x12a>
        return;
 8006464:	bf00      	nop
}
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	2000056d 	.word	0x2000056d
 8006470:	2000056e 	.word	0x2000056e

08006474 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	2202      	movs	r2, #2
 8006484:	4619      	mov	r1, r3
 8006486:	2013      	movs	r0, #19
 8006488:	f000 f922 	bl	80066d0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800648c:	f7ff fdb0 	bl	8005ff0 <SUBGRF_GetPacketType>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10d      	bne.n	80064b2 <SUBGRF_GetRxBufferStatus+0x3e>
 8006496:	4b0c      	ldr	r3, [pc, #48]	@ (80064c8 <SUBGRF_GetRxBufferStatus+0x54>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d108      	bne.n	80064b2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80064a0:	f240 7002 	movw	r0, #1794	@ 0x702
 80064a4:	f000 f878 	bl	8006598 <SUBGRF_ReadRegister>
 80064a8:	4603      	mov	r3, r0
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	e002      	b.n	80064b8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80064b2:	7b3a      	ldrb	r2, [r7, #12]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80064b8:	7b7a      	ldrb	r2, [r7, #13]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	701a      	strb	r2, [r3, #0]
}
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	2000056e 	.word	0x2000056e

080064cc <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80064d4:	f107 030c 	add.w	r3, r7, #12
 80064d8:	2203      	movs	r2, #3
 80064da:	4619      	mov	r1, r3
 80064dc:	2014      	movs	r0, #20
 80064de:	f000 f8f7 	bl	80066d0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80064e2:	f7ff fd85 	bl	8005ff0 <SUBGRF_GetPacketType>
 80064e6:	4603      	mov	r3, r0
 80064e8:	461a      	mov	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <SUBGRF_GetPacketStatus+0x30>
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d013      	beq.n	8006522 <SUBGRF_GetPacketStatus+0x56>
 80064fa:	e02a      	b.n	8006552 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80064fc:	7b3a      	ldrb	r2, [r7, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006502:	7b7b      	ldrb	r3, [r7, #13]
 8006504:	425b      	negs	r3, r3
 8006506:	105b      	asrs	r3, r3, #1
 8006508:	b25a      	sxtb	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	425b      	negs	r3, r3
 8006512:	105b      	asrs	r3, r3, #1
 8006514:	b25a      	sxtb	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	609a      	str	r2, [r3, #8]
            break;
 8006520:	e020      	b.n	8006564 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8006522:	7b3b      	ldrb	r3, [r7, #12]
 8006524:	425b      	negs	r3, r3
 8006526:	105b      	asrs	r3, r3, #1
 8006528:	b25a      	sxtb	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800652e:	7b7b      	ldrb	r3, [r7, #13]
 8006530:	b25b      	sxtb	r3, r3
 8006532:	3302      	adds	r3, #2
 8006534:	109b      	asrs	r3, r3, #2
 8006536:	b25a      	sxtb	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	425b      	negs	r3, r3
 8006540:	105b      	asrs	r3, r3, #1
 8006542:	b25a      	sxtb	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8006548:	4b08      	ldr	r3, [pc, #32]	@ (800656c <SUBGRF_GetPacketStatus+0xa0>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	611a      	str	r2, [r3, #16]
            break;
 8006550:	e008      	b.n	8006564 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8006552:	2214      	movs	r2, #20
 8006554:	2100      	movs	r1, #0
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f9d1 	bl	80068fe <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	220f      	movs	r2, #15
 8006560:	701a      	strb	r2, [r3, #0]
            break;
 8006562:	bf00      	nop
    }
}
 8006564:	bf00      	nop
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000570 	.word	0x20000570

08006570 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	460a      	mov	r2, r1
 800657a:	80fb      	strh	r3, [r7, #6]
 800657c:	4613      	mov	r3, r2
 800657e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006580:	1d7a      	adds	r2, r7, #5
 8006582:	88f9      	ldrh	r1, [r7, #6]
 8006584:	2301      	movs	r3, #1
 8006586:	4803      	ldr	r0, [pc, #12]	@ (8006594 <SUBGRF_WriteRegister+0x24>)
 8006588:	f7fd fa36 	bl	80039f8 <HAL_SUBGHZ_WriteRegisters>
}
 800658c:	bf00      	nop
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20000404 	.word	0x20000404

08006598 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80065a2:	f107 020f 	add.w	r2, r7, #15
 80065a6:	88f9      	ldrh	r1, [r7, #6]
 80065a8:	2301      	movs	r3, #1
 80065aa:	4804      	ldr	r0, [pc, #16]	@ (80065bc <SUBGRF_ReadRegister+0x24>)
 80065ac:	f7fd fa83 	bl	8003ab6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000404 	.word	0x20000404

080065c0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	6039      	str	r1, [r7, #0]
 80065ca:	80fb      	strh	r3, [r7, #6]
 80065cc:	4613      	mov	r3, r2
 80065ce:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d0:	f3ef 8310 	mrs	r3, PRIMASK
 80065d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80065d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80065d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80065da:	b672      	cpsid	i
}
 80065dc:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80065de:	88bb      	ldrh	r3, [r7, #4]
 80065e0:	88f9      	ldrh	r1, [r7, #6]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	4806      	ldr	r0, [pc, #24]	@ (8006600 <SUBGRF_WriteRegisters+0x40>)
 80065e6:	f7fd fa07 	bl	80039f8 <HAL_SUBGHZ_WriteRegisters>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f383 8810 	msr	PRIMASK, r3
}
 80065f4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000404 	.word	0x20000404

08006604 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	6039      	str	r1, [r7, #0]
 800660e:	71fb      	strb	r3, [r7, #7]
 8006610:	4613      	mov	r3, r2
 8006612:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006614:	f3ef 8310 	mrs	r3, PRIMASK
 8006618:	60fb      	str	r3, [r7, #12]
  return(result);
 800661a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800661c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800661e:	b672      	cpsid	i
}
 8006620:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8006622:	79bb      	ldrb	r3, [r7, #6]
 8006624:	b29b      	uxth	r3, r3
 8006626:	79f9      	ldrb	r1, [r7, #7]
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	4806      	ldr	r0, [pc, #24]	@ (8006644 <SUBGRF_WriteBuffer+0x40>)
 800662c:	f7fd fb57 	bl	8003cde <HAL_SUBGHZ_WriteBuffer>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f383 8810 	msr	PRIMASK, r3
}
 800663a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800663c:	bf00      	nop
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20000404 	.word	0x20000404

08006648 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	6039      	str	r1, [r7, #0]
 8006652:	71fb      	strb	r3, [r7, #7]
 8006654:	4613      	mov	r3, r2
 8006656:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006658:	f3ef 8310 	mrs	r3, PRIMASK
 800665c:	60fb      	str	r3, [r7, #12]
  return(result);
 800665e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006660:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006662:	b672      	cpsid	i
}
 8006664:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8006666:	79bb      	ldrb	r3, [r7, #6]
 8006668:	b29b      	uxth	r3, r3
 800666a:	79f9      	ldrb	r1, [r7, #7]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	4806      	ldr	r0, [pc, #24]	@ (8006688 <SUBGRF_ReadBuffer+0x40>)
 8006670:	f7fd fb88 	bl	8003d84 <HAL_SUBGHZ_ReadBuffer>
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f383 8810 	msr	PRIMASK, r3
}
 800667e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006680:	bf00      	nop
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000404 	.word	0x20000404

0800668c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	6039      	str	r1, [r7, #0]
 8006696:	71fb      	strb	r3, [r7, #7]
 8006698:	4613      	mov	r3, r2
 800669a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800669c:	f3ef 8310 	mrs	r3, PRIMASK
 80066a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80066a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80066a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80066a6:	b672      	cpsid	i
}
 80066a8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80066aa:	88bb      	ldrh	r3, [r7, #4]
 80066ac:	79f9      	ldrb	r1, [r7, #7]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	4806      	ldr	r0, [pc, #24]	@ (80066cc <SUBGRF_WriteCommand+0x40>)
 80066b2:	f7fd fa61 	bl	8003b78 <HAL_SUBGHZ_ExecSetCmd>
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f383 8810 	msr	PRIMASK, r3
}
 80066c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80066c2:	bf00      	nop
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000404 	.word	0x20000404

080066d0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	71fb      	strb	r3, [r7, #7]
 80066dc:	4613      	mov	r3, r2
 80066de:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e0:	f3ef 8310 	mrs	r3, PRIMASK
 80066e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80066e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80066ea:	b672      	cpsid	i
}
 80066ec:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80066ee:	88bb      	ldrh	r3, [r7, #4]
 80066f0:	79f9      	ldrb	r1, [r7, #7]
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	4806      	ldr	r0, [pc, #24]	@ (8006710 <SUBGRF_ReadCommand+0x40>)
 80066f6:	f7fd fa9e 	bl	8003c36 <HAL_SUBGHZ_ExecGetCmd>
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f383 8810 	msr	PRIMASK, r3
}
 8006704:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006706:	bf00      	nop
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000404 	.word	0x20000404

08006714 <SUBGRF_SetRfTxPower>:
    }
    RBI_ConfigRFSwitch(state);
}

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800671e:	2301      	movs	r3, #1
 8006720:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8006722:	f7ff f9a2 	bl	8005a6a <RBI_GetTxConfig>
 8006726:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d016      	beq.n	800675c <SUBGRF_SetRfTxPower+0x48>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b02      	cmp	r3, #2
 8006732:	dc16      	bgt.n	8006762 <SUBGRF_SetRfTxPower+0x4e>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <SUBGRF_SetRfTxPower+0x2e>
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d00a      	beq.n	8006756 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8006740:	e00f      	b.n	8006762 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8006742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006746:	2b0f      	cmp	r3, #15
 8006748:	dd02      	ble.n	8006750 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800674a:	2302      	movs	r3, #2
 800674c:	73fb      	strb	r3, [r7, #15]
            break;
 800674e:	e009      	b.n	8006764 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
            break;
 8006754:	e006      	b.n	8006764 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8006756:	2301      	movs	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
            break;
 800675a:	e003      	b.n	8006764 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800675c:	2302      	movs	r3, #2
 800675e:	73fb      	strb	r3, [r7, #15]
            break;
 8006760:	e000      	b.n	8006764 <SUBGRF_SetRfTxPower+0x50>
            break;
 8006762:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8006764:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2202      	movs	r2, #2
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff fc49 	bl	8006004 <SUBGRF_SetTxParams>

    return paSelect;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8006784:	4b03      	ldr	r3, [pc, #12]	@ (8006794 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2001      	movs	r0, #1
 800678a:	4798      	blx	r3
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000578 	.word	0x20000578

08006798 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80067a0:	4b03      	ldr	r3, [pc, #12]	@ (80067b0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2002      	movs	r0, #2
 80067a6:	4798      	blx	r3
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20000578 	.word	0x20000578

080067b4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80067bc:	4b03      	ldr	r3, [pc, #12]	@ (80067cc <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2040      	movs	r0, #64	@ 0x40
 80067c2:	4798      	blx	r3
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000578 	.word	0x20000578

080067d0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d005      	beq.n	80067f2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80067e6:	e00a      	b.n	80067fe <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80067e8:	4b07      	ldr	r3, [pc, #28]	@ (8006808 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2080      	movs	r0, #128	@ 0x80
 80067ee:	4798      	blx	r3
            break;
 80067f0:	e005      	b.n	80067fe <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80067f2:	4b05      	ldr	r3, [pc, #20]	@ (8006808 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80067fa:	4798      	blx	r3
            break;
 80067fc:	bf00      	nop
    }
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000578 	.word	0x20000578

0800680c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8006814:	4b04      	ldr	r3, [pc, #16]	@ (8006828 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800681c:	4798      	blx	r3
}
 800681e:	bf00      	nop
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000578 	.word	0x20000578

0800682c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8006834:	4b03      	ldr	r3, [pc, #12]	@ (8006844 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2020      	movs	r0, #32
 800683a:	4798      	blx	r3
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000578 	.word	0x20000578

08006848 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8006850:	4b03      	ldr	r3, [pc, #12]	@ (8006860 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2004      	movs	r0, #4
 8006856:	4798      	blx	r3
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	20000578 	.word	0x20000578

08006864 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800686c:	4b03      	ldr	r3, [pc, #12]	@ (800687c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2008      	movs	r0, #8
 8006872:	4798      	blx	r3
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000578 	.word	0x20000578

08006880 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8006888:	4b03      	ldr	r3, [pc, #12]	@ (8006898 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2010      	movs	r0, #16
 800688e:	4798      	blx	r3
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20000578 	.word	0x20000578

0800689c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80068a4:	4b04      	ldr	r3, [pc, #16]	@ (80068b8 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80068ac:	4798      	blx	r3
}
 80068ae:	bf00      	nop
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20000578 	.word	0x20000578

080068bc <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80068c6:	f7ff f8de 	bl	8005a86 <RBI_IsDCDC>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d112      	bne.n	80068f6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80068d0:	f640 1023 	movw	r0, #2339	@ 0x923
 80068d4:	f7ff fe60 	bl	8006598 <SUBGRF_ReadRegister>
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	f023 0306 	bic.w	r3, r3, #6
 80068e2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80068e4:	7bfa      	ldrb	r2, [r7, #15]
 80068e6:	79fb      	ldrb	r3, [r7, #7]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	4619      	mov	r1, r3
 80068ee:	f640 1023 	movw	r0, #2339	@ 0x923
 80068f2:	f7ff fe3d 	bl	8006570 <SUBGRF_WriteRegister>
  }
}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
 800690a:	4613      	mov	r3, r2
 800690c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8006912:	e004      	b.n	800691e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	60fa      	str	r2, [r7, #12]
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800691e:	883b      	ldrh	r3, [r7, #0]
 8006920:	1e5a      	subs	r2, r3, #1
 8006922:	803a      	strh	r2, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f5      	bne.n	8006914 <UTIL_MEM_set_8+0x16>
  }
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <_strtoul_l.isra.0>:
 8006934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006938:	4e34      	ldr	r6, [pc, #208]	@ (8006a0c <_strtoul_l.isra.0+0xd8>)
 800693a:	4686      	mov	lr, r0
 800693c:	460d      	mov	r5, r1
 800693e:	4628      	mov	r0, r5
 8006940:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006944:	5d37      	ldrb	r7, [r6, r4]
 8006946:	f017 0708 	ands.w	r7, r7, #8
 800694a:	d1f8      	bne.n	800693e <_strtoul_l.isra.0+0xa>
 800694c:	2c2d      	cmp	r4, #45	@ 0x2d
 800694e:	d110      	bne.n	8006972 <_strtoul_l.isra.0+0x3e>
 8006950:	782c      	ldrb	r4, [r5, #0]
 8006952:	2701      	movs	r7, #1
 8006954:	1c85      	adds	r5, r0, #2
 8006956:	f033 0010 	bics.w	r0, r3, #16
 800695a:	d115      	bne.n	8006988 <_strtoul_l.isra.0+0x54>
 800695c:	2c30      	cmp	r4, #48	@ 0x30
 800695e:	d10d      	bne.n	800697c <_strtoul_l.isra.0+0x48>
 8006960:	7828      	ldrb	r0, [r5, #0]
 8006962:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006966:	2858      	cmp	r0, #88	@ 0x58
 8006968:	d108      	bne.n	800697c <_strtoul_l.isra.0+0x48>
 800696a:	786c      	ldrb	r4, [r5, #1]
 800696c:	3502      	adds	r5, #2
 800696e:	2310      	movs	r3, #16
 8006970:	e00a      	b.n	8006988 <_strtoul_l.isra.0+0x54>
 8006972:	2c2b      	cmp	r4, #43	@ 0x2b
 8006974:	bf04      	itt	eq
 8006976:	782c      	ldrbeq	r4, [r5, #0]
 8006978:	1c85      	addeq	r5, r0, #2
 800697a:	e7ec      	b.n	8006956 <_strtoul_l.isra.0+0x22>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f6      	bne.n	800696e <_strtoul_l.isra.0+0x3a>
 8006980:	2c30      	cmp	r4, #48	@ 0x30
 8006982:	bf14      	ite	ne
 8006984:	230a      	movne	r3, #10
 8006986:	2308      	moveq	r3, #8
 8006988:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800698c:	2600      	movs	r6, #0
 800698e:	fbb8 f8f3 	udiv	r8, r8, r3
 8006992:	fb03 f908 	mul.w	r9, r3, r8
 8006996:	ea6f 0909 	mvn.w	r9, r9
 800699a:	4630      	mov	r0, r6
 800699c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80069a0:	f1bc 0f09 	cmp.w	ip, #9
 80069a4:	d810      	bhi.n	80069c8 <_strtoul_l.isra.0+0x94>
 80069a6:	4664      	mov	r4, ip
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	dd1e      	ble.n	80069ea <_strtoul_l.isra.0+0xb6>
 80069ac:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80069b0:	d007      	beq.n	80069c2 <_strtoul_l.isra.0+0x8e>
 80069b2:	4580      	cmp	r8, r0
 80069b4:	d316      	bcc.n	80069e4 <_strtoul_l.isra.0+0xb0>
 80069b6:	d101      	bne.n	80069bc <_strtoul_l.isra.0+0x88>
 80069b8:	45a1      	cmp	r9, r4
 80069ba:	db13      	blt.n	80069e4 <_strtoul_l.isra.0+0xb0>
 80069bc:	fb00 4003 	mla	r0, r0, r3, r4
 80069c0:	2601      	movs	r6, #1
 80069c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069c6:	e7e9      	b.n	800699c <_strtoul_l.isra.0+0x68>
 80069c8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80069cc:	f1bc 0f19 	cmp.w	ip, #25
 80069d0:	d801      	bhi.n	80069d6 <_strtoul_l.isra.0+0xa2>
 80069d2:	3c37      	subs	r4, #55	@ 0x37
 80069d4:	e7e8      	b.n	80069a8 <_strtoul_l.isra.0+0x74>
 80069d6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80069da:	f1bc 0f19 	cmp.w	ip, #25
 80069de:	d804      	bhi.n	80069ea <_strtoul_l.isra.0+0xb6>
 80069e0:	3c57      	subs	r4, #87	@ 0x57
 80069e2:	e7e1      	b.n	80069a8 <_strtoul_l.isra.0+0x74>
 80069e4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80069e8:	e7eb      	b.n	80069c2 <_strtoul_l.isra.0+0x8e>
 80069ea:	1c73      	adds	r3, r6, #1
 80069ec:	d106      	bne.n	80069fc <_strtoul_l.isra.0+0xc8>
 80069ee:	2322      	movs	r3, #34	@ 0x22
 80069f0:	f8ce 3000 	str.w	r3, [lr]
 80069f4:	4630      	mov	r0, r6
 80069f6:	b932      	cbnz	r2, 8006a06 <_strtoul_l.isra.0+0xd2>
 80069f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069fc:	b107      	cbz	r7, 8006a00 <_strtoul_l.isra.0+0xcc>
 80069fe:	4240      	negs	r0, r0
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d0f9      	beq.n	80069f8 <_strtoul_l.isra.0+0xc4>
 8006a04:	b106      	cbz	r6, 8006a08 <_strtoul_l.isra.0+0xd4>
 8006a06:	1e69      	subs	r1, r5, #1
 8006a08:	6011      	str	r1, [r2, #0]
 8006a0a:	e7f5      	b.n	80069f8 <_strtoul_l.isra.0+0xc4>
 8006a0c:	0800b719 	.word	0x0800b719

08006a10 <strtoul>:
 8006a10:	4613      	mov	r3, r2
 8006a12:	460a      	mov	r2, r1
 8006a14:	4601      	mov	r1, r0
 8006a16:	4802      	ldr	r0, [pc, #8]	@ (8006a20 <strtoul+0x10>)
 8006a18:	6800      	ldr	r0, [r0, #0]
 8006a1a:	f7ff bf8b 	b.w	8006934 <_strtoul_l.isra.0>
 8006a1e:	bf00      	nop
 8006a20:	20000024 	.word	0x20000024

08006a24 <__cvt>:
 8006a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	b088      	sub	sp, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	461d      	mov	r5, r3
 8006a2e:	4614      	mov	r4, r2
 8006a30:	bfbc      	itt	lt
 8006a32:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006a36:	4614      	movlt	r4, r2
 8006a38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a3a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006a3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006a40:	bfb6      	itet	lt
 8006a42:	461d      	movlt	r5, r3
 8006a44:	2300      	movge	r3, #0
 8006a46:	232d      	movlt	r3, #45	@ 0x2d
 8006a48:	7013      	strb	r3, [r2, #0]
 8006a4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a4c:	f023 0820 	bic.w	r8, r3, #32
 8006a50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a54:	d005      	beq.n	8006a62 <__cvt+0x3e>
 8006a56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a5a:	d100      	bne.n	8006a5e <__cvt+0x3a>
 8006a5c:	3601      	adds	r6, #1
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e000      	b.n	8006a64 <__cvt+0x40>
 8006a62:	2303      	movs	r3, #3
 8006a64:	aa07      	add	r2, sp, #28
 8006a66:	9204      	str	r2, [sp, #16]
 8006a68:	aa06      	add	r2, sp, #24
 8006a6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a6e:	e9cd 3600 	strd	r3, r6, [sp]
 8006a72:	4622      	mov	r2, r4
 8006a74:	462b      	mov	r3, r5
 8006a76:	f001 f97f 	bl	8007d78 <_dtoa_r>
 8006a7a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a7e:	4607      	mov	r7, r0
 8006a80:	d119      	bne.n	8006ab6 <__cvt+0x92>
 8006a82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a84:	07db      	lsls	r3, r3, #31
 8006a86:	d50e      	bpl.n	8006aa6 <__cvt+0x82>
 8006a88:	eb00 0906 	add.w	r9, r0, r6
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4620      	mov	r0, r4
 8006a92:	4629      	mov	r1, r5
 8006a94:	f7fa f800 	bl	8000a98 <__aeabi_dcmpeq>
 8006a98:	b108      	cbz	r0, 8006a9e <__cvt+0x7a>
 8006a9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a9e:	2230      	movs	r2, #48	@ 0x30
 8006aa0:	9b07      	ldr	r3, [sp, #28]
 8006aa2:	454b      	cmp	r3, r9
 8006aa4:	d31e      	bcc.n	8006ae4 <__cvt+0xc0>
 8006aa6:	9b07      	ldr	r3, [sp, #28]
 8006aa8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006aaa:	1bdb      	subs	r3, r3, r7
 8006aac:	4638      	mov	r0, r7
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	b008      	add	sp, #32
 8006ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006aba:	eb00 0906 	add.w	r9, r0, r6
 8006abe:	d1e5      	bne.n	8006a8c <__cvt+0x68>
 8006ac0:	7803      	ldrb	r3, [r0, #0]
 8006ac2:	2b30      	cmp	r3, #48	@ 0x30
 8006ac4:	d10a      	bne.n	8006adc <__cvt+0xb8>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7f9 ffe3 	bl	8000a98 <__aeabi_dcmpeq>
 8006ad2:	b918      	cbnz	r0, 8006adc <__cvt+0xb8>
 8006ad4:	f1c6 0601 	rsb	r6, r6, #1
 8006ad8:	f8ca 6000 	str.w	r6, [sl]
 8006adc:	f8da 3000 	ldr.w	r3, [sl]
 8006ae0:	4499      	add	r9, r3
 8006ae2:	e7d3      	b.n	8006a8c <__cvt+0x68>
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	9107      	str	r1, [sp, #28]
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	e7d9      	b.n	8006aa0 <__cvt+0x7c>

08006aec <__exponent>:
 8006aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aee:	2900      	cmp	r1, #0
 8006af0:	bfba      	itte	lt
 8006af2:	4249      	neglt	r1, r1
 8006af4:	232d      	movlt	r3, #45	@ 0x2d
 8006af6:	232b      	movge	r3, #43	@ 0x2b
 8006af8:	2909      	cmp	r1, #9
 8006afa:	7002      	strb	r2, [r0, #0]
 8006afc:	7043      	strb	r3, [r0, #1]
 8006afe:	dd29      	ble.n	8006b54 <__exponent+0x68>
 8006b00:	f10d 0307 	add.w	r3, sp, #7
 8006b04:	461d      	mov	r5, r3
 8006b06:	270a      	movs	r7, #10
 8006b08:	461a      	mov	r2, r3
 8006b0a:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b0e:	fb07 1416 	mls	r4, r7, r6, r1
 8006b12:	3430      	adds	r4, #48	@ 0x30
 8006b14:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b18:	460c      	mov	r4, r1
 8006b1a:	2c63      	cmp	r4, #99	@ 0x63
 8006b1c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006b20:	4631      	mov	r1, r6
 8006b22:	dcf1      	bgt.n	8006b08 <__exponent+0x1c>
 8006b24:	3130      	adds	r1, #48	@ 0x30
 8006b26:	1e94      	subs	r4, r2, #2
 8006b28:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b2c:	1c41      	adds	r1, r0, #1
 8006b2e:	4623      	mov	r3, r4
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	d30a      	bcc.n	8006b4a <__exponent+0x5e>
 8006b34:	f10d 0309 	add.w	r3, sp, #9
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	42ac      	cmp	r4, r5
 8006b3c:	bf88      	it	hi
 8006b3e:	2300      	movhi	r3, #0
 8006b40:	3302      	adds	r3, #2
 8006b42:	4403      	add	r3, r0
 8006b44:	1a18      	subs	r0, r3, r0
 8006b46:	b003      	add	sp, #12
 8006b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b52:	e7ed      	b.n	8006b30 <__exponent+0x44>
 8006b54:	2330      	movs	r3, #48	@ 0x30
 8006b56:	3130      	adds	r1, #48	@ 0x30
 8006b58:	7083      	strb	r3, [r0, #2]
 8006b5a:	70c1      	strb	r1, [r0, #3]
 8006b5c:	1d03      	adds	r3, r0, #4
 8006b5e:	e7f1      	b.n	8006b44 <__exponent+0x58>

08006b60 <_printf_float>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	b091      	sub	sp, #68	@ 0x44
 8006b66:	460c      	mov	r4, r1
 8006b68:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006b6c:	4616      	mov	r6, r2
 8006b6e:	461f      	mov	r7, r3
 8006b70:	4605      	mov	r5, r0
 8006b72:	f000 fffb 	bl	8007b6c <_localeconv_r>
 8006b76:	6803      	ldr	r3, [r0, #0]
 8006b78:	9308      	str	r3, [sp, #32]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7f9 fb60 	bl	8000240 <strlen>
 8006b80:	2300      	movs	r3, #0
 8006b82:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b84:	f8d8 3000 	ldr.w	r3, [r8]
 8006b88:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b8a:	3307      	adds	r3, #7
 8006b8c:	f023 0307 	bic.w	r3, r3, #7
 8006b90:	f103 0208 	add.w	r2, r3, #8
 8006b94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b98:	f8d4 b000 	ldr.w	fp, [r4]
 8006b9c:	f8c8 2000 	str.w	r2, [r8]
 8006ba0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ba4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006baa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006bae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006bb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006bb6:	4b9d      	ldr	r3, [pc, #628]	@ (8006e2c <_printf_float+0x2cc>)
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bbc:	f7f9 ff9e 	bl	8000afc <__aeabi_dcmpun>
 8006bc0:	bb70      	cbnz	r0, 8006c20 <_printf_float+0xc0>
 8006bc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006bc6:	4b99      	ldr	r3, [pc, #612]	@ (8006e2c <_printf_float+0x2cc>)
 8006bc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bcc:	f7f9 ff78 	bl	8000ac0 <__aeabi_dcmple>
 8006bd0:	bb30      	cbnz	r0, 8006c20 <_printf_float+0xc0>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4649      	mov	r1, r9
 8006bda:	f7f9 ff67 	bl	8000aac <__aeabi_dcmplt>
 8006bde:	b110      	cbz	r0, 8006be6 <_printf_float+0x86>
 8006be0:	232d      	movs	r3, #45	@ 0x2d
 8006be2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006be6:	4a92      	ldr	r2, [pc, #584]	@ (8006e30 <_printf_float+0x2d0>)
 8006be8:	4b92      	ldr	r3, [pc, #584]	@ (8006e34 <_printf_float+0x2d4>)
 8006bea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006bee:	bf8c      	ite	hi
 8006bf0:	4690      	movhi	r8, r2
 8006bf2:	4698      	movls	r8, r3
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	f02b 0304 	bic.w	r3, fp, #4
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	f04f 0900 	mov.w	r9, #0
 8006c02:	9700      	str	r7, [sp, #0]
 8006c04:	4633      	mov	r3, r6
 8006c06:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 f9d4 	bl	8006fb8 <_printf_common>
 8006c10:	3001      	adds	r0, #1
 8006c12:	f040 808f 	bne.w	8006d34 <_printf_float+0x1d4>
 8006c16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c1a:	b011      	add	sp, #68	@ 0x44
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	f7f9 ff68 	bl	8000afc <__aeabi_dcmpun>
 8006c2c:	b140      	cbz	r0, 8006c40 <_printf_float+0xe0>
 8006c2e:	464b      	mov	r3, r9
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfbc      	itt	lt
 8006c34:	232d      	movlt	r3, #45	@ 0x2d
 8006c36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c3a:	4a7f      	ldr	r2, [pc, #508]	@ (8006e38 <_printf_float+0x2d8>)
 8006c3c:	4b7f      	ldr	r3, [pc, #508]	@ (8006e3c <_printf_float+0x2dc>)
 8006c3e:	e7d4      	b.n	8006bea <_printf_float+0x8a>
 8006c40:	6863      	ldr	r3, [r4, #4]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006c48:	d13f      	bne.n	8006cca <_printf_float+0x16a>
 8006c4a:	2306      	movs	r3, #6
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006c52:	2200      	movs	r2, #0
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	9206      	str	r2, [sp, #24]
 8006c58:	aa0e      	add	r2, sp, #56	@ 0x38
 8006c5a:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006c5e:	aa0d      	add	r2, sp, #52	@ 0x34
 8006c60:	9203      	str	r2, [sp, #12]
 8006c62:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006c66:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c6a:	6863      	ldr	r3, [r4, #4]
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	4642      	mov	r2, r8
 8006c70:	464b      	mov	r3, r9
 8006c72:	4628      	mov	r0, r5
 8006c74:	910a      	str	r1, [sp, #40]	@ 0x28
 8006c76:	f7ff fed5 	bl	8006a24 <__cvt>
 8006c7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c7c:	2947      	cmp	r1, #71	@ 0x47
 8006c7e:	4680      	mov	r8, r0
 8006c80:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006c82:	d128      	bne.n	8006cd6 <_printf_float+0x176>
 8006c84:	1cc8      	adds	r0, r1, #3
 8006c86:	db02      	blt.n	8006c8e <_printf_float+0x12e>
 8006c88:	6863      	ldr	r3, [r4, #4]
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	dd40      	ble.n	8006d10 <_printf_float+0x1b0>
 8006c8e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c92:	fa5f fa8a 	uxtb.w	sl, sl
 8006c96:	3901      	subs	r1, #1
 8006c98:	4652      	mov	r2, sl
 8006c9a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c9e:	910d      	str	r1, [sp, #52]	@ 0x34
 8006ca0:	f7ff ff24 	bl	8006aec <__exponent>
 8006ca4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ca6:	1813      	adds	r3, r2, r0
 8006ca8:	2a01      	cmp	r2, #1
 8006caa:	4681      	mov	r9, r0
 8006cac:	6123      	str	r3, [r4, #16]
 8006cae:	dc02      	bgt.n	8006cb6 <_printf_float+0x156>
 8006cb0:	6822      	ldr	r2, [r4, #0]
 8006cb2:	07d2      	lsls	r2, r2, #31
 8006cb4:	d501      	bpl.n	8006cba <_printf_float+0x15a>
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	6123      	str	r3, [r4, #16]
 8006cba:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d09f      	beq.n	8006c02 <_printf_float+0xa2>
 8006cc2:	232d      	movs	r3, #45	@ 0x2d
 8006cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc8:	e79b      	b.n	8006c02 <_printf_float+0xa2>
 8006cca:	2947      	cmp	r1, #71	@ 0x47
 8006ccc:	d1bf      	bne.n	8006c4e <_printf_float+0xee>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1bd      	bne.n	8006c4e <_printf_float+0xee>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e7ba      	b.n	8006c4c <_printf_float+0xec>
 8006cd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cda:	d9dc      	bls.n	8006c96 <_printf_float+0x136>
 8006cdc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006ce0:	d118      	bne.n	8006d14 <_printf_float+0x1b4>
 8006ce2:	2900      	cmp	r1, #0
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	dd0b      	ble.n	8006d00 <_printf_float+0x1a0>
 8006ce8:	6121      	str	r1, [r4, #16]
 8006cea:	b913      	cbnz	r3, 8006cf2 <_printf_float+0x192>
 8006cec:	6822      	ldr	r2, [r4, #0]
 8006cee:	07d0      	lsls	r0, r2, #31
 8006cf0:	d502      	bpl.n	8006cf8 <_printf_float+0x198>
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	440b      	add	r3, r1
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006cfa:	f04f 0900 	mov.w	r9, #0
 8006cfe:	e7dc      	b.n	8006cba <_printf_float+0x15a>
 8006d00:	b913      	cbnz	r3, 8006d08 <_printf_float+0x1a8>
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	07d2      	lsls	r2, r2, #31
 8006d06:	d501      	bpl.n	8006d0c <_printf_float+0x1ac>
 8006d08:	3302      	adds	r3, #2
 8006d0a:	e7f4      	b.n	8006cf6 <_printf_float+0x196>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e7f2      	b.n	8006cf6 <_printf_float+0x196>
 8006d10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d16:	4299      	cmp	r1, r3
 8006d18:	db05      	blt.n	8006d26 <_printf_float+0x1c6>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	6121      	str	r1, [r4, #16]
 8006d1e:	07d8      	lsls	r0, r3, #31
 8006d20:	d5ea      	bpl.n	8006cf8 <_printf_float+0x198>
 8006d22:	1c4b      	adds	r3, r1, #1
 8006d24:	e7e7      	b.n	8006cf6 <_printf_float+0x196>
 8006d26:	2900      	cmp	r1, #0
 8006d28:	bfd4      	ite	le
 8006d2a:	f1c1 0202 	rsble	r2, r1, #2
 8006d2e:	2201      	movgt	r2, #1
 8006d30:	4413      	add	r3, r2
 8006d32:	e7e0      	b.n	8006cf6 <_printf_float+0x196>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	055a      	lsls	r2, r3, #21
 8006d38:	d407      	bmi.n	8006d4a <_printf_float+0x1ea>
 8006d3a:	6923      	ldr	r3, [r4, #16]
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	d12b      	bne.n	8006da0 <_printf_float+0x240>
 8006d48:	e765      	b.n	8006c16 <_printf_float+0xb6>
 8006d4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d4e:	f240 80dd 	bls.w	8006f0c <_printf_float+0x3ac>
 8006d52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d56:	2200      	movs	r2, #0
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f7f9 fe9d 	bl	8000a98 <__aeabi_dcmpeq>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d033      	beq.n	8006dca <_printf_float+0x26a>
 8006d62:	4a37      	ldr	r2, [pc, #220]	@ (8006e40 <_printf_float+0x2e0>)
 8006d64:	2301      	movs	r3, #1
 8006d66:	4631      	mov	r1, r6
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b8      	blx	r7
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f43f af52 	beq.w	8006c16 <_printf_float+0xb6>
 8006d72:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006d76:	4543      	cmp	r3, r8
 8006d78:	db02      	blt.n	8006d80 <_printf_float+0x220>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	07d8      	lsls	r0, r3, #31
 8006d7e:	d50f      	bpl.n	8006da0 <_printf_float+0x240>
 8006d80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	f43f af43 	beq.w	8006c16 <_printf_float+0xb6>
 8006d90:	f04f 0900 	mov.w	r9, #0
 8006d94:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006d98:	f104 0a1a 	add.w	sl, r4, #26
 8006d9c:	45c8      	cmp	r8, r9
 8006d9e:	dc09      	bgt.n	8006db4 <_printf_float+0x254>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	079b      	lsls	r3, r3, #30
 8006da4:	f100 8103 	bmi.w	8006fae <_printf_float+0x44e>
 8006da8:	68e0      	ldr	r0, [r4, #12]
 8006daa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dac:	4298      	cmp	r0, r3
 8006dae:	bfb8      	it	lt
 8006db0:	4618      	movlt	r0, r3
 8006db2:	e732      	b.n	8006c1a <_printf_float+0xba>
 8006db4:	2301      	movs	r3, #1
 8006db6:	4652      	mov	r2, sl
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f43f af29 	beq.w	8006c16 <_printf_float+0xb6>
 8006dc4:	f109 0901 	add.w	r9, r9, #1
 8006dc8:	e7e8      	b.n	8006d9c <_printf_float+0x23c>
 8006dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dc39      	bgt.n	8006e44 <_printf_float+0x2e4>
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e40 <_printf_float+0x2e0>)
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	f43f af1b 	beq.w	8006c16 <_printf_float+0xb6>
 8006de0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006de4:	ea59 0303 	orrs.w	r3, r9, r3
 8006de8:	d102      	bne.n	8006df0 <_printf_float+0x290>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	07d9      	lsls	r1, r3, #31
 8006dee:	d5d7      	bpl.n	8006da0 <_printf_float+0x240>
 8006df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f af0b 	beq.w	8006c16 <_printf_float+0xb6>
 8006e00:	f04f 0a00 	mov.w	sl, #0
 8006e04:	f104 0b1a 	add.w	fp, r4, #26
 8006e08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e0a:	425b      	negs	r3, r3
 8006e0c:	4553      	cmp	r3, sl
 8006e0e:	dc01      	bgt.n	8006e14 <_printf_float+0x2b4>
 8006e10:	464b      	mov	r3, r9
 8006e12:	e793      	b.n	8006d3c <_printf_float+0x1dc>
 8006e14:	2301      	movs	r3, #1
 8006e16:	465a      	mov	r2, fp
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f aef9 	beq.w	8006c16 <_printf_float+0xb6>
 8006e24:	f10a 0a01 	add.w	sl, sl, #1
 8006e28:	e7ee      	b.n	8006e08 <_printf_float+0x2a8>
 8006e2a:	bf00      	nop
 8006e2c:	7fefffff 	.word	0x7fefffff
 8006e30:	0800b81d 	.word	0x0800b81d
 8006e34:	0800b819 	.word	0x0800b819
 8006e38:	0800b825 	.word	0x0800b825
 8006e3c:	0800b821 	.word	0x0800b821
 8006e40:	0800b829 	.word	0x0800b829
 8006e44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e46:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006e4a:	4553      	cmp	r3, sl
 8006e4c:	bfa8      	it	ge
 8006e4e:	4653      	movge	r3, sl
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	4699      	mov	r9, r3
 8006e54:	dc36      	bgt.n	8006ec4 <_printf_float+0x364>
 8006e56:	f04f 0b00 	mov.w	fp, #0
 8006e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e5e:	f104 021a 	add.w	r2, r4, #26
 8006e62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e64:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e66:	eba3 0309 	sub.w	r3, r3, r9
 8006e6a:	455b      	cmp	r3, fp
 8006e6c:	dc31      	bgt.n	8006ed2 <_printf_float+0x372>
 8006e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e70:	459a      	cmp	sl, r3
 8006e72:	dc3a      	bgt.n	8006eea <_printf_float+0x38a>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	07da      	lsls	r2, r3, #31
 8006e78:	d437      	bmi.n	8006eea <_printf_float+0x38a>
 8006e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e7c:	ebaa 0903 	sub.w	r9, sl, r3
 8006e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e82:	ebaa 0303 	sub.w	r3, sl, r3
 8006e86:	4599      	cmp	r9, r3
 8006e88:	bfa8      	it	ge
 8006e8a:	4699      	movge	r9, r3
 8006e8c:	f1b9 0f00 	cmp.w	r9, #0
 8006e90:	dc33      	bgt.n	8006efa <_printf_float+0x39a>
 8006e92:	f04f 0800 	mov.w	r8, #0
 8006e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e9a:	f104 0b1a 	add.w	fp, r4, #26
 8006e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ea0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ea4:	eba3 0309 	sub.w	r3, r3, r9
 8006ea8:	4543      	cmp	r3, r8
 8006eaa:	f77f af79 	ble.w	8006da0 <_printf_float+0x240>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	465a      	mov	r2, fp
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f43f aeac 	beq.w	8006c16 <_printf_float+0xb6>
 8006ebe:	f108 0801 	add.w	r8, r8, #1
 8006ec2:	e7ec      	b.n	8006e9e <_printf_float+0x33e>
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d1c2      	bne.n	8006e56 <_printf_float+0x2f6>
 8006ed0:	e6a1      	b.n	8006c16 <_printf_float+0xb6>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	920a      	str	r2, [sp, #40]	@ 0x28
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f ae9a 	beq.w	8006c16 <_printf_float+0xb6>
 8006ee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ee4:	f10b 0b01 	add.w	fp, fp, #1
 8006ee8:	e7bb      	b.n	8006e62 <_printf_float+0x302>
 8006eea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d1c0      	bne.n	8006e7a <_printf_float+0x31a>
 8006ef8:	e68d      	b.n	8006c16 <_printf_float+0xb6>
 8006efa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006efc:	464b      	mov	r3, r9
 8006efe:	4442      	add	r2, r8
 8006f00:	4631      	mov	r1, r6
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	d1c3      	bne.n	8006e92 <_printf_float+0x332>
 8006f0a:	e684      	b.n	8006c16 <_printf_float+0xb6>
 8006f0c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006f10:	f1ba 0f01 	cmp.w	sl, #1
 8006f14:	dc01      	bgt.n	8006f1a <_printf_float+0x3ba>
 8006f16:	07db      	lsls	r3, r3, #31
 8006f18:	d536      	bpl.n	8006f88 <_printf_float+0x428>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4628      	mov	r0, r5
 8006f22:	47b8      	blx	r7
 8006f24:	3001      	adds	r0, #1
 8006f26:	f43f ae76 	beq.w	8006c16 <_printf_float+0xb6>
 8006f2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	f43f ae6e 	beq.w	8006c16 <_printf_float+0xb6>
 8006f3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2300      	movs	r3, #0
 8006f42:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006f46:	f7f9 fda7 	bl	8000a98 <__aeabi_dcmpeq>
 8006f4a:	b9c0      	cbnz	r0, 8006f7e <_printf_float+0x41e>
 8006f4c:	4653      	mov	r3, sl
 8006f4e:	f108 0201 	add.w	r2, r8, #1
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d10c      	bne.n	8006f76 <_printf_float+0x416>
 8006f5c:	e65b      	b.n	8006c16 <_printf_float+0xb6>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	465a      	mov	r2, fp
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f ae54 	beq.w	8006c16 <_printf_float+0xb6>
 8006f6e:	f108 0801 	add.w	r8, r8, #1
 8006f72:	45d0      	cmp	r8, sl
 8006f74:	dbf3      	blt.n	8006f5e <_printf_float+0x3fe>
 8006f76:	464b      	mov	r3, r9
 8006f78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f7c:	e6df      	b.n	8006d3e <_printf_float+0x1de>
 8006f7e:	f04f 0800 	mov.w	r8, #0
 8006f82:	f104 0b1a 	add.w	fp, r4, #26
 8006f86:	e7f4      	b.n	8006f72 <_printf_float+0x412>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	4642      	mov	r2, r8
 8006f8c:	e7e1      	b.n	8006f52 <_printf_float+0x3f2>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	464a      	mov	r2, r9
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f43f ae3c 	beq.w	8006c16 <_printf_float+0xb6>
 8006f9e:	f108 0801 	add.w	r8, r8, #1
 8006fa2:	68e3      	ldr	r3, [r4, #12]
 8006fa4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fa6:	1a5b      	subs	r3, r3, r1
 8006fa8:	4543      	cmp	r3, r8
 8006faa:	dcf0      	bgt.n	8006f8e <_printf_float+0x42e>
 8006fac:	e6fc      	b.n	8006da8 <_printf_float+0x248>
 8006fae:	f04f 0800 	mov.w	r8, #0
 8006fb2:	f104 0919 	add.w	r9, r4, #25
 8006fb6:	e7f4      	b.n	8006fa2 <_printf_float+0x442>

08006fb8 <_printf_common>:
 8006fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	4698      	mov	r8, r3
 8006fc0:	688a      	ldr	r2, [r1, #8]
 8006fc2:	690b      	ldr	r3, [r1, #16]
 8006fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	bfb8      	it	lt
 8006fcc:	4613      	movlt	r3, r2
 8006fce:	6033      	str	r3, [r6, #0]
 8006fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	b10a      	cbz	r2, 8006fde <_printf_common+0x26>
 8006fda:	3301      	adds	r3, #1
 8006fdc:	6033      	str	r3, [r6, #0]
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	0699      	lsls	r1, r3, #26
 8006fe2:	bf42      	ittt	mi
 8006fe4:	6833      	ldrmi	r3, [r6, #0]
 8006fe6:	3302      	addmi	r3, #2
 8006fe8:	6033      	strmi	r3, [r6, #0]
 8006fea:	6825      	ldr	r5, [r4, #0]
 8006fec:	f015 0506 	ands.w	r5, r5, #6
 8006ff0:	d106      	bne.n	8007000 <_printf_common+0x48>
 8006ff2:	f104 0a19 	add.w	sl, r4, #25
 8006ff6:	68e3      	ldr	r3, [r4, #12]
 8006ff8:	6832      	ldr	r2, [r6, #0]
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	42ab      	cmp	r3, r5
 8006ffe:	dc26      	bgt.n	800704e <_printf_common+0x96>
 8007000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007004:	6822      	ldr	r2, [r4, #0]
 8007006:	3b00      	subs	r3, #0
 8007008:	bf18      	it	ne
 800700a:	2301      	movne	r3, #1
 800700c:	0692      	lsls	r2, r2, #26
 800700e:	d42b      	bmi.n	8007068 <_printf_common+0xb0>
 8007010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007014:	4641      	mov	r1, r8
 8007016:	4638      	mov	r0, r7
 8007018:	47c8      	blx	r9
 800701a:	3001      	adds	r0, #1
 800701c:	d01e      	beq.n	800705c <_printf_common+0xa4>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	6922      	ldr	r2, [r4, #16]
 8007022:	f003 0306 	and.w	r3, r3, #6
 8007026:	2b04      	cmp	r3, #4
 8007028:	bf02      	ittt	eq
 800702a:	68e5      	ldreq	r5, [r4, #12]
 800702c:	6833      	ldreq	r3, [r6, #0]
 800702e:	1aed      	subeq	r5, r5, r3
 8007030:	68a3      	ldr	r3, [r4, #8]
 8007032:	bf0c      	ite	eq
 8007034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007038:	2500      	movne	r5, #0
 800703a:	4293      	cmp	r3, r2
 800703c:	bfc4      	itt	gt
 800703e:	1a9b      	subgt	r3, r3, r2
 8007040:	18ed      	addgt	r5, r5, r3
 8007042:	2600      	movs	r6, #0
 8007044:	341a      	adds	r4, #26
 8007046:	42b5      	cmp	r5, r6
 8007048:	d11a      	bne.n	8007080 <_printf_common+0xc8>
 800704a:	2000      	movs	r0, #0
 800704c:	e008      	b.n	8007060 <_printf_common+0xa8>
 800704e:	2301      	movs	r3, #1
 8007050:	4652      	mov	r2, sl
 8007052:	4641      	mov	r1, r8
 8007054:	4638      	mov	r0, r7
 8007056:	47c8      	blx	r9
 8007058:	3001      	adds	r0, #1
 800705a:	d103      	bne.n	8007064 <_printf_common+0xac>
 800705c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	3501      	adds	r5, #1
 8007066:	e7c6      	b.n	8006ff6 <_printf_common+0x3e>
 8007068:	18e1      	adds	r1, r4, r3
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	2030      	movs	r0, #48	@ 0x30
 800706e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007072:	4422      	add	r2, r4
 8007074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800707c:	3302      	adds	r3, #2
 800707e:	e7c7      	b.n	8007010 <_printf_common+0x58>
 8007080:	2301      	movs	r3, #1
 8007082:	4622      	mov	r2, r4
 8007084:	4641      	mov	r1, r8
 8007086:	4638      	mov	r0, r7
 8007088:	47c8      	blx	r9
 800708a:	3001      	adds	r0, #1
 800708c:	d0e6      	beq.n	800705c <_printf_common+0xa4>
 800708e:	3601      	adds	r6, #1
 8007090:	e7d9      	b.n	8007046 <_printf_common+0x8e>
	...

08007094 <_printf_i>:
 8007094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	7e0f      	ldrb	r7, [r1, #24]
 800709a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800709c:	2f78      	cmp	r7, #120	@ 0x78
 800709e:	4691      	mov	r9, r2
 80070a0:	4680      	mov	r8, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	469a      	mov	sl, r3
 80070a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070aa:	d807      	bhi.n	80070bc <_printf_i+0x28>
 80070ac:	2f62      	cmp	r7, #98	@ 0x62
 80070ae:	d80a      	bhi.n	80070c6 <_printf_i+0x32>
 80070b0:	2f00      	cmp	r7, #0
 80070b2:	f000 80d1 	beq.w	8007258 <_printf_i+0x1c4>
 80070b6:	2f58      	cmp	r7, #88	@ 0x58
 80070b8:	f000 80b8 	beq.w	800722c <_printf_i+0x198>
 80070bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070c4:	e03a      	b.n	800713c <_printf_i+0xa8>
 80070c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070ca:	2b15      	cmp	r3, #21
 80070cc:	d8f6      	bhi.n	80070bc <_printf_i+0x28>
 80070ce:	a101      	add	r1, pc, #4	@ (adr r1, 80070d4 <_printf_i+0x40>)
 80070d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070d4:	0800712d 	.word	0x0800712d
 80070d8:	08007141 	.word	0x08007141
 80070dc:	080070bd 	.word	0x080070bd
 80070e0:	080070bd 	.word	0x080070bd
 80070e4:	080070bd 	.word	0x080070bd
 80070e8:	080070bd 	.word	0x080070bd
 80070ec:	08007141 	.word	0x08007141
 80070f0:	080070bd 	.word	0x080070bd
 80070f4:	080070bd 	.word	0x080070bd
 80070f8:	080070bd 	.word	0x080070bd
 80070fc:	080070bd 	.word	0x080070bd
 8007100:	0800723f 	.word	0x0800723f
 8007104:	0800716b 	.word	0x0800716b
 8007108:	080071f9 	.word	0x080071f9
 800710c:	080070bd 	.word	0x080070bd
 8007110:	080070bd 	.word	0x080070bd
 8007114:	08007261 	.word	0x08007261
 8007118:	080070bd 	.word	0x080070bd
 800711c:	0800716b 	.word	0x0800716b
 8007120:	080070bd 	.word	0x080070bd
 8007124:	080070bd 	.word	0x080070bd
 8007128:	08007201 	.word	0x08007201
 800712c:	6833      	ldr	r3, [r6, #0]
 800712e:	1d1a      	adds	r2, r3, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6032      	str	r2, [r6, #0]
 8007134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800713c:	2301      	movs	r3, #1
 800713e:	e09c      	b.n	800727a <_printf_i+0x1e6>
 8007140:	6833      	ldr	r3, [r6, #0]
 8007142:	6820      	ldr	r0, [r4, #0]
 8007144:	1d19      	adds	r1, r3, #4
 8007146:	6031      	str	r1, [r6, #0]
 8007148:	0606      	lsls	r6, r0, #24
 800714a:	d501      	bpl.n	8007150 <_printf_i+0xbc>
 800714c:	681d      	ldr	r5, [r3, #0]
 800714e:	e003      	b.n	8007158 <_printf_i+0xc4>
 8007150:	0645      	lsls	r5, r0, #25
 8007152:	d5fb      	bpl.n	800714c <_printf_i+0xb8>
 8007154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007158:	2d00      	cmp	r5, #0
 800715a:	da03      	bge.n	8007164 <_printf_i+0xd0>
 800715c:	232d      	movs	r3, #45	@ 0x2d
 800715e:	426d      	negs	r5, r5
 8007160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007164:	4858      	ldr	r0, [pc, #352]	@ (80072c8 <_printf_i+0x234>)
 8007166:	230a      	movs	r3, #10
 8007168:	e011      	b.n	800718e <_printf_i+0xfa>
 800716a:	6821      	ldr	r1, [r4, #0]
 800716c:	6833      	ldr	r3, [r6, #0]
 800716e:	0608      	lsls	r0, r1, #24
 8007170:	f853 5b04 	ldr.w	r5, [r3], #4
 8007174:	d402      	bmi.n	800717c <_printf_i+0xe8>
 8007176:	0649      	lsls	r1, r1, #25
 8007178:	bf48      	it	mi
 800717a:	b2ad      	uxthmi	r5, r5
 800717c:	2f6f      	cmp	r7, #111	@ 0x6f
 800717e:	4852      	ldr	r0, [pc, #328]	@ (80072c8 <_printf_i+0x234>)
 8007180:	6033      	str	r3, [r6, #0]
 8007182:	bf14      	ite	ne
 8007184:	230a      	movne	r3, #10
 8007186:	2308      	moveq	r3, #8
 8007188:	2100      	movs	r1, #0
 800718a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800718e:	6866      	ldr	r6, [r4, #4]
 8007190:	60a6      	str	r6, [r4, #8]
 8007192:	2e00      	cmp	r6, #0
 8007194:	db05      	blt.n	80071a2 <_printf_i+0x10e>
 8007196:	6821      	ldr	r1, [r4, #0]
 8007198:	432e      	orrs	r6, r5
 800719a:	f021 0104 	bic.w	r1, r1, #4
 800719e:	6021      	str	r1, [r4, #0]
 80071a0:	d04b      	beq.n	800723a <_printf_i+0x1a6>
 80071a2:	4616      	mov	r6, r2
 80071a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80071a8:	fb03 5711 	mls	r7, r3, r1, r5
 80071ac:	5dc7      	ldrb	r7, [r0, r7]
 80071ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071b2:	462f      	mov	r7, r5
 80071b4:	42bb      	cmp	r3, r7
 80071b6:	460d      	mov	r5, r1
 80071b8:	d9f4      	bls.n	80071a4 <_printf_i+0x110>
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	d10b      	bne.n	80071d6 <_printf_i+0x142>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	07df      	lsls	r7, r3, #31
 80071c2:	d508      	bpl.n	80071d6 <_printf_i+0x142>
 80071c4:	6923      	ldr	r3, [r4, #16]
 80071c6:	6861      	ldr	r1, [r4, #4]
 80071c8:	4299      	cmp	r1, r3
 80071ca:	bfde      	ittt	le
 80071cc:	2330      	movle	r3, #48	@ 0x30
 80071ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80071d6:	1b92      	subs	r2, r2, r6
 80071d8:	6122      	str	r2, [r4, #16]
 80071da:	f8cd a000 	str.w	sl, [sp]
 80071de:	464b      	mov	r3, r9
 80071e0:	aa03      	add	r2, sp, #12
 80071e2:	4621      	mov	r1, r4
 80071e4:	4640      	mov	r0, r8
 80071e6:	f7ff fee7 	bl	8006fb8 <_printf_common>
 80071ea:	3001      	adds	r0, #1
 80071ec:	d14a      	bne.n	8007284 <_printf_i+0x1f0>
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071f2:	b004      	add	sp, #16
 80071f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	f043 0320 	orr.w	r3, r3, #32
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	4832      	ldr	r0, [pc, #200]	@ (80072cc <_printf_i+0x238>)
 8007202:	2778      	movs	r7, #120	@ 0x78
 8007204:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	6831      	ldr	r1, [r6, #0]
 800720c:	061f      	lsls	r7, r3, #24
 800720e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007212:	d402      	bmi.n	800721a <_printf_i+0x186>
 8007214:	065f      	lsls	r7, r3, #25
 8007216:	bf48      	it	mi
 8007218:	b2ad      	uxthmi	r5, r5
 800721a:	6031      	str	r1, [r6, #0]
 800721c:	07d9      	lsls	r1, r3, #31
 800721e:	bf44      	itt	mi
 8007220:	f043 0320 	orrmi.w	r3, r3, #32
 8007224:	6023      	strmi	r3, [r4, #0]
 8007226:	b11d      	cbz	r5, 8007230 <_printf_i+0x19c>
 8007228:	2310      	movs	r3, #16
 800722a:	e7ad      	b.n	8007188 <_printf_i+0xf4>
 800722c:	4826      	ldr	r0, [pc, #152]	@ (80072c8 <_printf_i+0x234>)
 800722e:	e7e9      	b.n	8007204 <_printf_i+0x170>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	f023 0320 	bic.w	r3, r3, #32
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	e7f6      	b.n	8007228 <_printf_i+0x194>
 800723a:	4616      	mov	r6, r2
 800723c:	e7bd      	b.n	80071ba <_printf_i+0x126>
 800723e:	6833      	ldr	r3, [r6, #0]
 8007240:	6825      	ldr	r5, [r4, #0]
 8007242:	6961      	ldr	r1, [r4, #20]
 8007244:	1d18      	adds	r0, r3, #4
 8007246:	6030      	str	r0, [r6, #0]
 8007248:	062e      	lsls	r6, r5, #24
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	d501      	bpl.n	8007252 <_printf_i+0x1be>
 800724e:	6019      	str	r1, [r3, #0]
 8007250:	e002      	b.n	8007258 <_printf_i+0x1c4>
 8007252:	0668      	lsls	r0, r5, #25
 8007254:	d5fb      	bpl.n	800724e <_printf_i+0x1ba>
 8007256:	8019      	strh	r1, [r3, #0]
 8007258:	2300      	movs	r3, #0
 800725a:	6123      	str	r3, [r4, #16]
 800725c:	4616      	mov	r6, r2
 800725e:	e7bc      	b.n	80071da <_printf_i+0x146>
 8007260:	6833      	ldr	r3, [r6, #0]
 8007262:	1d1a      	adds	r2, r3, #4
 8007264:	6032      	str	r2, [r6, #0]
 8007266:	681e      	ldr	r6, [r3, #0]
 8007268:	6862      	ldr	r2, [r4, #4]
 800726a:	2100      	movs	r1, #0
 800726c:	4630      	mov	r0, r6
 800726e:	f7f8 ff97 	bl	80001a0 <memchr>
 8007272:	b108      	cbz	r0, 8007278 <_printf_i+0x1e4>
 8007274:	1b80      	subs	r0, r0, r6
 8007276:	6060      	str	r0, [r4, #4]
 8007278:	6863      	ldr	r3, [r4, #4]
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	2300      	movs	r3, #0
 800727e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007282:	e7aa      	b.n	80071da <_printf_i+0x146>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	4632      	mov	r2, r6
 8007288:	4649      	mov	r1, r9
 800728a:	4640      	mov	r0, r8
 800728c:	47d0      	blx	sl
 800728e:	3001      	adds	r0, #1
 8007290:	d0ad      	beq.n	80071ee <_printf_i+0x15a>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	079b      	lsls	r3, r3, #30
 8007296:	d413      	bmi.n	80072c0 <_printf_i+0x22c>
 8007298:	68e0      	ldr	r0, [r4, #12]
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	4298      	cmp	r0, r3
 800729e:	bfb8      	it	lt
 80072a0:	4618      	movlt	r0, r3
 80072a2:	e7a6      	b.n	80071f2 <_printf_i+0x15e>
 80072a4:	2301      	movs	r3, #1
 80072a6:	4632      	mov	r2, r6
 80072a8:	4649      	mov	r1, r9
 80072aa:	4640      	mov	r0, r8
 80072ac:	47d0      	blx	sl
 80072ae:	3001      	adds	r0, #1
 80072b0:	d09d      	beq.n	80071ee <_printf_i+0x15a>
 80072b2:	3501      	adds	r5, #1
 80072b4:	68e3      	ldr	r3, [r4, #12]
 80072b6:	9903      	ldr	r1, [sp, #12]
 80072b8:	1a5b      	subs	r3, r3, r1
 80072ba:	42ab      	cmp	r3, r5
 80072bc:	dcf2      	bgt.n	80072a4 <_printf_i+0x210>
 80072be:	e7eb      	b.n	8007298 <_printf_i+0x204>
 80072c0:	2500      	movs	r5, #0
 80072c2:	f104 0619 	add.w	r6, r4, #25
 80072c6:	e7f5      	b.n	80072b4 <_printf_i+0x220>
 80072c8:	0800b82b 	.word	0x0800b82b
 80072cc:	0800b83c 	.word	0x0800b83c

080072d0 <_scanf_float>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	b087      	sub	sp, #28
 80072d6:	4691      	mov	r9, r2
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	688b      	ldr	r3, [r1, #8]
 80072dc:	1e5a      	subs	r2, r3, #1
 80072de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80072e2:	bf81      	itttt	hi
 80072e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80072e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80072ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80072f0:	608b      	strhi	r3, [r1, #8]
 80072f2:	680b      	ldr	r3, [r1, #0]
 80072f4:	460a      	mov	r2, r1
 80072f6:	f04f 0500 	mov.w	r5, #0
 80072fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80072fe:	f842 3b1c 	str.w	r3, [r2], #28
 8007302:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007306:	4680      	mov	r8, r0
 8007308:	460c      	mov	r4, r1
 800730a:	bf98      	it	ls
 800730c:	f04f 0b00 	movls.w	fp, #0
 8007310:	9201      	str	r2, [sp, #4]
 8007312:	4616      	mov	r6, r2
 8007314:	46aa      	mov	sl, r5
 8007316:	462f      	mov	r7, r5
 8007318:	9502      	str	r5, [sp, #8]
 800731a:	68a2      	ldr	r2, [r4, #8]
 800731c:	b15a      	cbz	r2, 8007336 <_scanf_float+0x66>
 800731e:	f8d9 3000 	ldr.w	r3, [r9]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b4e      	cmp	r3, #78	@ 0x4e
 8007326:	d863      	bhi.n	80073f0 <_scanf_float+0x120>
 8007328:	2b40      	cmp	r3, #64	@ 0x40
 800732a:	d83b      	bhi.n	80073a4 <_scanf_float+0xd4>
 800732c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007330:	b2c8      	uxtb	r0, r1
 8007332:	280e      	cmp	r0, #14
 8007334:	d939      	bls.n	80073aa <_scanf_float+0xda>
 8007336:	b11f      	cbz	r7, 8007340 <_scanf_float+0x70>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007344:	f1ba 0f01 	cmp.w	sl, #1
 8007348:	f200 8114 	bhi.w	8007574 <_scanf_float+0x2a4>
 800734c:	9b01      	ldr	r3, [sp, #4]
 800734e:	429e      	cmp	r6, r3
 8007350:	f200 8105 	bhi.w	800755e <_scanf_float+0x28e>
 8007354:	2001      	movs	r0, #1
 8007356:	b007      	add	sp, #28
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007360:	2a0d      	cmp	r2, #13
 8007362:	d8e8      	bhi.n	8007336 <_scanf_float+0x66>
 8007364:	a101      	add	r1, pc, #4	@ (adr r1, 800736c <_scanf_float+0x9c>)
 8007366:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800736a:	bf00      	nop
 800736c:	080074b5 	.word	0x080074b5
 8007370:	08007337 	.word	0x08007337
 8007374:	08007337 	.word	0x08007337
 8007378:	08007337 	.word	0x08007337
 800737c:	08007511 	.word	0x08007511
 8007380:	080074eb 	.word	0x080074eb
 8007384:	08007337 	.word	0x08007337
 8007388:	08007337 	.word	0x08007337
 800738c:	080074c3 	.word	0x080074c3
 8007390:	08007337 	.word	0x08007337
 8007394:	08007337 	.word	0x08007337
 8007398:	08007337 	.word	0x08007337
 800739c:	08007337 	.word	0x08007337
 80073a0:	0800747f 	.word	0x0800747f
 80073a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80073a8:	e7da      	b.n	8007360 <_scanf_float+0x90>
 80073aa:	290e      	cmp	r1, #14
 80073ac:	d8c3      	bhi.n	8007336 <_scanf_float+0x66>
 80073ae:	a001      	add	r0, pc, #4	@ (adr r0, 80073b4 <_scanf_float+0xe4>)
 80073b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073b4:	0800746f 	.word	0x0800746f
 80073b8:	08007337 	.word	0x08007337
 80073bc:	0800746f 	.word	0x0800746f
 80073c0:	080074ff 	.word	0x080074ff
 80073c4:	08007337 	.word	0x08007337
 80073c8:	08007411 	.word	0x08007411
 80073cc:	08007455 	.word	0x08007455
 80073d0:	08007455 	.word	0x08007455
 80073d4:	08007455 	.word	0x08007455
 80073d8:	08007455 	.word	0x08007455
 80073dc:	08007455 	.word	0x08007455
 80073e0:	08007455 	.word	0x08007455
 80073e4:	08007455 	.word	0x08007455
 80073e8:	08007455 	.word	0x08007455
 80073ec:	08007455 	.word	0x08007455
 80073f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80073f2:	d809      	bhi.n	8007408 <_scanf_float+0x138>
 80073f4:	2b60      	cmp	r3, #96	@ 0x60
 80073f6:	d8b1      	bhi.n	800735c <_scanf_float+0x8c>
 80073f8:	2b54      	cmp	r3, #84	@ 0x54
 80073fa:	d07b      	beq.n	80074f4 <_scanf_float+0x224>
 80073fc:	2b59      	cmp	r3, #89	@ 0x59
 80073fe:	d19a      	bne.n	8007336 <_scanf_float+0x66>
 8007400:	2d07      	cmp	r5, #7
 8007402:	d198      	bne.n	8007336 <_scanf_float+0x66>
 8007404:	2508      	movs	r5, #8
 8007406:	e02f      	b.n	8007468 <_scanf_float+0x198>
 8007408:	2b74      	cmp	r3, #116	@ 0x74
 800740a:	d073      	beq.n	80074f4 <_scanf_float+0x224>
 800740c:	2b79      	cmp	r3, #121	@ 0x79
 800740e:	e7f6      	b.n	80073fe <_scanf_float+0x12e>
 8007410:	6821      	ldr	r1, [r4, #0]
 8007412:	05c8      	lsls	r0, r1, #23
 8007414:	d51e      	bpl.n	8007454 <_scanf_float+0x184>
 8007416:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800741a:	6021      	str	r1, [r4, #0]
 800741c:	3701      	adds	r7, #1
 800741e:	f1bb 0f00 	cmp.w	fp, #0
 8007422:	d003      	beq.n	800742c <_scanf_float+0x15c>
 8007424:	3201      	adds	r2, #1
 8007426:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800742a:	60a2      	str	r2, [r4, #8]
 800742c:	68a3      	ldr	r3, [r4, #8]
 800742e:	3b01      	subs	r3, #1
 8007430:	60a3      	str	r3, [r4, #8]
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	3301      	adds	r3, #1
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800743c:	3b01      	subs	r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	f8c9 3004 	str.w	r3, [r9, #4]
 8007444:	f340 8082 	ble.w	800754c <_scanf_float+0x27c>
 8007448:	f8d9 3000 	ldr.w	r3, [r9]
 800744c:	3301      	adds	r3, #1
 800744e:	f8c9 3000 	str.w	r3, [r9]
 8007452:	e762      	b.n	800731a <_scanf_float+0x4a>
 8007454:	eb1a 0105 	adds.w	r1, sl, r5
 8007458:	f47f af6d 	bne.w	8007336 <_scanf_float+0x66>
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007462:	6022      	str	r2, [r4, #0]
 8007464:	460d      	mov	r5, r1
 8007466:	468a      	mov	sl, r1
 8007468:	f806 3b01 	strb.w	r3, [r6], #1
 800746c:	e7de      	b.n	800742c <_scanf_float+0x15c>
 800746e:	6822      	ldr	r2, [r4, #0]
 8007470:	0610      	lsls	r0, r2, #24
 8007472:	f57f af60 	bpl.w	8007336 <_scanf_float+0x66>
 8007476:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800747a:	6022      	str	r2, [r4, #0]
 800747c:	e7f4      	b.n	8007468 <_scanf_float+0x198>
 800747e:	f1ba 0f00 	cmp.w	sl, #0
 8007482:	d10c      	bne.n	800749e <_scanf_float+0x1ce>
 8007484:	b977      	cbnz	r7, 80074a4 <_scanf_float+0x1d4>
 8007486:	6822      	ldr	r2, [r4, #0]
 8007488:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800748c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007490:	d108      	bne.n	80074a4 <_scanf_float+0x1d4>
 8007492:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007496:	6022      	str	r2, [r4, #0]
 8007498:	f04f 0a01 	mov.w	sl, #1
 800749c:	e7e4      	b.n	8007468 <_scanf_float+0x198>
 800749e:	f1ba 0f02 	cmp.w	sl, #2
 80074a2:	d050      	beq.n	8007546 <_scanf_float+0x276>
 80074a4:	2d01      	cmp	r5, #1
 80074a6:	d002      	beq.n	80074ae <_scanf_float+0x1de>
 80074a8:	2d04      	cmp	r5, #4
 80074aa:	f47f af44 	bne.w	8007336 <_scanf_float+0x66>
 80074ae:	3501      	adds	r5, #1
 80074b0:	b2ed      	uxtb	r5, r5
 80074b2:	e7d9      	b.n	8007468 <_scanf_float+0x198>
 80074b4:	f1ba 0f01 	cmp.w	sl, #1
 80074b8:	f47f af3d 	bne.w	8007336 <_scanf_float+0x66>
 80074bc:	f04f 0a02 	mov.w	sl, #2
 80074c0:	e7d2      	b.n	8007468 <_scanf_float+0x198>
 80074c2:	b975      	cbnz	r5, 80074e2 <_scanf_float+0x212>
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	f47f af37 	bne.w	8007338 <_scanf_float+0x68>
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074d4:	f040 80fe 	bne.w	80076d4 <_scanf_float+0x404>
 80074d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074dc:	6022      	str	r2, [r4, #0]
 80074de:	2501      	movs	r5, #1
 80074e0:	e7c2      	b.n	8007468 <_scanf_float+0x198>
 80074e2:	2d03      	cmp	r5, #3
 80074e4:	d0e3      	beq.n	80074ae <_scanf_float+0x1de>
 80074e6:	2d05      	cmp	r5, #5
 80074e8:	e7df      	b.n	80074aa <_scanf_float+0x1da>
 80074ea:	2d02      	cmp	r5, #2
 80074ec:	f47f af23 	bne.w	8007336 <_scanf_float+0x66>
 80074f0:	2503      	movs	r5, #3
 80074f2:	e7b9      	b.n	8007468 <_scanf_float+0x198>
 80074f4:	2d06      	cmp	r5, #6
 80074f6:	f47f af1e 	bne.w	8007336 <_scanf_float+0x66>
 80074fa:	2507      	movs	r5, #7
 80074fc:	e7b4      	b.n	8007468 <_scanf_float+0x198>
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	0591      	lsls	r1, r2, #22
 8007502:	f57f af18 	bpl.w	8007336 <_scanf_float+0x66>
 8007506:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800750a:	6022      	str	r2, [r4, #0]
 800750c:	9702      	str	r7, [sp, #8]
 800750e:	e7ab      	b.n	8007468 <_scanf_float+0x198>
 8007510:	6822      	ldr	r2, [r4, #0]
 8007512:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007516:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800751a:	d005      	beq.n	8007528 <_scanf_float+0x258>
 800751c:	0550      	lsls	r0, r2, #21
 800751e:	f57f af0a 	bpl.w	8007336 <_scanf_float+0x66>
 8007522:	2f00      	cmp	r7, #0
 8007524:	f000 80d6 	beq.w	80076d4 <_scanf_float+0x404>
 8007528:	0591      	lsls	r1, r2, #22
 800752a:	bf58      	it	pl
 800752c:	9902      	ldrpl	r1, [sp, #8]
 800752e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007532:	bf58      	it	pl
 8007534:	1a79      	subpl	r1, r7, r1
 8007536:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800753a:	bf58      	it	pl
 800753c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007540:	6022      	str	r2, [r4, #0]
 8007542:	2700      	movs	r7, #0
 8007544:	e790      	b.n	8007468 <_scanf_float+0x198>
 8007546:	f04f 0a03 	mov.w	sl, #3
 800754a:	e78d      	b.n	8007468 <_scanf_float+0x198>
 800754c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007550:	4649      	mov	r1, r9
 8007552:	4640      	mov	r0, r8
 8007554:	4798      	blx	r3
 8007556:	2800      	cmp	r0, #0
 8007558:	f43f aedf 	beq.w	800731a <_scanf_float+0x4a>
 800755c:	e6eb      	b.n	8007336 <_scanf_float+0x66>
 800755e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007562:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007566:	464a      	mov	r2, r9
 8007568:	4640      	mov	r0, r8
 800756a:	4798      	blx	r3
 800756c:	6923      	ldr	r3, [r4, #16]
 800756e:	3b01      	subs	r3, #1
 8007570:	6123      	str	r3, [r4, #16]
 8007572:	e6eb      	b.n	800734c <_scanf_float+0x7c>
 8007574:	1e6b      	subs	r3, r5, #1
 8007576:	2b06      	cmp	r3, #6
 8007578:	d824      	bhi.n	80075c4 <_scanf_float+0x2f4>
 800757a:	2d02      	cmp	r5, #2
 800757c:	d836      	bhi.n	80075ec <_scanf_float+0x31c>
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	429e      	cmp	r6, r3
 8007582:	f67f aee7 	bls.w	8007354 <_scanf_float+0x84>
 8007586:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800758a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800758e:	464a      	mov	r2, r9
 8007590:	4640      	mov	r0, r8
 8007592:	4798      	blx	r3
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	3b01      	subs	r3, #1
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	e7f0      	b.n	800757e <_scanf_float+0x2ae>
 800759c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80075a4:	464a      	mov	r2, r9
 80075a6:	4640      	mov	r0, r8
 80075a8:	4798      	blx	r3
 80075aa:	6923      	ldr	r3, [r4, #16]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	6123      	str	r3, [r4, #16]
 80075b0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80075b4:	fa5f fa8a 	uxtb.w	sl, sl
 80075b8:	f1ba 0f02 	cmp.w	sl, #2
 80075bc:	d1ee      	bne.n	800759c <_scanf_float+0x2cc>
 80075be:	3d03      	subs	r5, #3
 80075c0:	b2ed      	uxtb	r5, r5
 80075c2:	1b76      	subs	r6, r6, r5
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	05da      	lsls	r2, r3, #23
 80075c8:	d530      	bpl.n	800762c <_scanf_float+0x35c>
 80075ca:	055b      	lsls	r3, r3, #21
 80075cc:	d511      	bpl.n	80075f2 <_scanf_float+0x322>
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	429e      	cmp	r6, r3
 80075d2:	f67f aebf 	bls.w	8007354 <_scanf_float+0x84>
 80075d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075de:	464a      	mov	r2, r9
 80075e0:	4640      	mov	r0, r8
 80075e2:	4798      	blx	r3
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	e7f0      	b.n	80075ce <_scanf_float+0x2fe>
 80075ec:	46aa      	mov	sl, r5
 80075ee:	46b3      	mov	fp, r6
 80075f0:	e7de      	b.n	80075b0 <_scanf_float+0x2e0>
 80075f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	2965      	cmp	r1, #101	@ 0x65
 80075fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80075fe:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007602:	6123      	str	r3, [r4, #16]
 8007604:	d00c      	beq.n	8007620 <_scanf_float+0x350>
 8007606:	2945      	cmp	r1, #69	@ 0x45
 8007608:	d00a      	beq.n	8007620 <_scanf_float+0x350>
 800760a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800760e:	464a      	mov	r2, r9
 8007610:	4640      	mov	r0, r8
 8007612:	4798      	blx	r3
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800761a:	3b01      	subs	r3, #1
 800761c:	1eb5      	subs	r5, r6, #2
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007624:	464a      	mov	r2, r9
 8007626:	4640      	mov	r0, r8
 8007628:	4798      	blx	r3
 800762a:	462e      	mov	r6, r5
 800762c:	6822      	ldr	r2, [r4, #0]
 800762e:	f012 0210 	ands.w	r2, r2, #16
 8007632:	d001      	beq.n	8007638 <_scanf_float+0x368>
 8007634:	2000      	movs	r0, #0
 8007636:	e68e      	b.n	8007356 <_scanf_float+0x86>
 8007638:	7032      	strb	r2, [r6, #0]
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007644:	d125      	bne.n	8007692 <_scanf_float+0x3c2>
 8007646:	9b02      	ldr	r3, [sp, #8]
 8007648:	429f      	cmp	r7, r3
 800764a:	d00a      	beq.n	8007662 <_scanf_float+0x392>
 800764c:	1bda      	subs	r2, r3, r7
 800764e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007652:	429e      	cmp	r6, r3
 8007654:	bf28      	it	cs
 8007656:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800765a:	491f      	ldr	r1, [pc, #124]	@ (80076d8 <_scanf_float+0x408>)
 800765c:	4630      	mov	r0, r6
 800765e:	f000 f971 	bl	8007944 <siprintf>
 8007662:	2200      	movs	r2, #0
 8007664:	9901      	ldr	r1, [sp, #4]
 8007666:	4640      	mov	r0, r8
 8007668:	f002 fcee 	bl	800a048 <_strtod_r>
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	6825      	ldr	r5, [r4, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f015 0f02 	tst.w	r5, #2
 8007676:	4606      	mov	r6, r0
 8007678:	460f      	mov	r7, r1
 800767a:	f103 0204 	add.w	r2, r3, #4
 800767e:	d015      	beq.n	80076ac <_scanf_float+0x3dc>
 8007680:	9903      	ldr	r1, [sp, #12]
 8007682:	600a      	str	r2, [r1, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	e9c3 6700 	strd	r6, r7, [r3]
 800768a:	68e3      	ldr	r3, [r4, #12]
 800768c:	3301      	adds	r3, #1
 800768e:	60e3      	str	r3, [r4, #12]
 8007690:	e7d0      	b.n	8007634 <_scanf_float+0x364>
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d0e4      	beq.n	8007662 <_scanf_float+0x392>
 8007698:	9905      	ldr	r1, [sp, #20]
 800769a:	230a      	movs	r3, #10
 800769c:	3101      	adds	r1, #1
 800769e:	4640      	mov	r0, r8
 80076a0:	f002 fd52 	bl	800a148 <_strtol_r>
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	9e05      	ldr	r6, [sp, #20]
 80076a8:	1ac2      	subs	r2, r0, r3
 80076aa:	e7d0      	b.n	800764e <_scanf_float+0x37e>
 80076ac:	076d      	lsls	r5, r5, #29
 80076ae:	d4e7      	bmi.n	8007680 <_scanf_float+0x3b0>
 80076b0:	9d03      	ldr	r5, [sp, #12]
 80076b2:	602a      	str	r2, [r5, #0]
 80076b4:	681d      	ldr	r5, [r3, #0]
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	f7f9 fa1f 	bl	8000afc <__aeabi_dcmpun>
 80076be:	b120      	cbz	r0, 80076ca <_scanf_float+0x3fa>
 80076c0:	4806      	ldr	r0, [pc, #24]	@ (80076dc <_scanf_float+0x40c>)
 80076c2:	f000 facb 	bl	8007c5c <nanf>
 80076c6:	6028      	str	r0, [r5, #0]
 80076c8:	e7df      	b.n	800768a <_scanf_float+0x3ba>
 80076ca:	4630      	mov	r0, r6
 80076cc:	4639      	mov	r1, r7
 80076ce:	f7f9 fa73 	bl	8000bb8 <__aeabi_d2f>
 80076d2:	e7f8      	b.n	80076c6 <_scanf_float+0x3f6>
 80076d4:	2700      	movs	r7, #0
 80076d6:	e633      	b.n	8007340 <_scanf_float+0x70>
 80076d8:	0800b84d 	.word	0x0800b84d
 80076dc:	0800b98e 	.word	0x0800b98e

080076e0 <std>:
 80076e0:	2300      	movs	r3, #0
 80076e2:	b510      	push	{r4, lr}
 80076e4:	4604      	mov	r4, r0
 80076e6:	e9c0 3300 	strd	r3, r3, [r0]
 80076ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ee:	6083      	str	r3, [r0, #8]
 80076f0:	8181      	strh	r1, [r0, #12]
 80076f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80076f4:	81c2      	strh	r2, [r0, #14]
 80076f6:	6183      	str	r3, [r0, #24]
 80076f8:	4619      	mov	r1, r3
 80076fa:	2208      	movs	r2, #8
 80076fc:	305c      	adds	r0, #92	@ 0x5c
 80076fe:	f000 fa1b 	bl	8007b38 <memset>
 8007702:	4b0d      	ldr	r3, [pc, #52]	@ (8007738 <std+0x58>)
 8007704:	6263      	str	r3, [r4, #36]	@ 0x24
 8007706:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <std+0x5c>)
 8007708:	62a3      	str	r3, [r4, #40]	@ 0x28
 800770a:	4b0d      	ldr	r3, [pc, #52]	@ (8007740 <std+0x60>)
 800770c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800770e:	4b0d      	ldr	r3, [pc, #52]	@ (8007744 <std+0x64>)
 8007710:	6323      	str	r3, [r4, #48]	@ 0x30
 8007712:	4b0d      	ldr	r3, [pc, #52]	@ (8007748 <std+0x68>)
 8007714:	6224      	str	r4, [r4, #32]
 8007716:	429c      	cmp	r4, r3
 8007718:	d006      	beq.n	8007728 <std+0x48>
 800771a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800771e:	4294      	cmp	r4, r2
 8007720:	d002      	beq.n	8007728 <std+0x48>
 8007722:	33d0      	adds	r3, #208	@ 0xd0
 8007724:	429c      	cmp	r4, r3
 8007726:	d105      	bne.n	8007734 <std+0x54>
 8007728:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007730:	f000 ba90 	b.w	8007c54 <__retarget_lock_init_recursive>
 8007734:	bd10      	pop	{r4, pc}
 8007736:	bf00      	nop
 8007738:	08007989 	.word	0x08007989
 800773c:	080079ab 	.word	0x080079ab
 8007740:	080079e3 	.word	0x080079e3
 8007744:	08007a07 	.word	0x08007a07
 8007748:	2000057c 	.word	0x2000057c

0800774c <stdio_exit_handler>:
 800774c:	4a02      	ldr	r2, [pc, #8]	@ (8007758 <stdio_exit_handler+0xc>)
 800774e:	4903      	ldr	r1, [pc, #12]	@ (800775c <stdio_exit_handler+0x10>)
 8007750:	4803      	ldr	r0, [pc, #12]	@ (8007760 <stdio_exit_handler+0x14>)
 8007752:	f000 b869 	b.w	8007828 <_fwalk_sglue>
 8007756:	bf00      	nop
 8007758:	20000018 	.word	0x20000018
 800775c:	0800a77d 	.word	0x0800a77d
 8007760:	20000028 	.word	0x20000028

08007764 <cleanup_stdio>:
 8007764:	6841      	ldr	r1, [r0, #4]
 8007766:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <cleanup_stdio+0x34>)
 8007768:	4299      	cmp	r1, r3
 800776a:	b510      	push	{r4, lr}
 800776c:	4604      	mov	r4, r0
 800776e:	d001      	beq.n	8007774 <cleanup_stdio+0x10>
 8007770:	f003 f804 	bl	800a77c <_fflush_r>
 8007774:	68a1      	ldr	r1, [r4, #8]
 8007776:	4b09      	ldr	r3, [pc, #36]	@ (800779c <cleanup_stdio+0x38>)
 8007778:	4299      	cmp	r1, r3
 800777a:	d002      	beq.n	8007782 <cleanup_stdio+0x1e>
 800777c:	4620      	mov	r0, r4
 800777e:	f002 fffd 	bl	800a77c <_fflush_r>
 8007782:	68e1      	ldr	r1, [r4, #12]
 8007784:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <cleanup_stdio+0x3c>)
 8007786:	4299      	cmp	r1, r3
 8007788:	d004      	beq.n	8007794 <cleanup_stdio+0x30>
 800778a:	4620      	mov	r0, r4
 800778c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007790:	f002 bff4 	b.w	800a77c <_fflush_r>
 8007794:	bd10      	pop	{r4, pc}
 8007796:	bf00      	nop
 8007798:	2000057c 	.word	0x2000057c
 800779c:	200005e4 	.word	0x200005e4
 80077a0:	2000064c 	.word	0x2000064c

080077a4 <global_stdio_init.part.0>:
 80077a4:	b510      	push	{r4, lr}
 80077a6:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <global_stdio_init.part.0+0x30>)
 80077a8:	4c0b      	ldr	r4, [pc, #44]	@ (80077d8 <global_stdio_init.part.0+0x34>)
 80077aa:	4a0c      	ldr	r2, [pc, #48]	@ (80077dc <global_stdio_init.part.0+0x38>)
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	4620      	mov	r0, r4
 80077b0:	2200      	movs	r2, #0
 80077b2:	2104      	movs	r1, #4
 80077b4:	f7ff ff94 	bl	80076e0 <std>
 80077b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077bc:	2201      	movs	r2, #1
 80077be:	2109      	movs	r1, #9
 80077c0:	f7ff ff8e 	bl	80076e0 <std>
 80077c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077c8:	2202      	movs	r2, #2
 80077ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ce:	2112      	movs	r1, #18
 80077d0:	f7ff bf86 	b.w	80076e0 <std>
 80077d4:	200006b4 	.word	0x200006b4
 80077d8:	2000057c 	.word	0x2000057c
 80077dc:	0800774d 	.word	0x0800774d

080077e0 <__sfp_lock_acquire>:
 80077e0:	4801      	ldr	r0, [pc, #4]	@ (80077e8 <__sfp_lock_acquire+0x8>)
 80077e2:	f000 ba38 	b.w	8007c56 <__retarget_lock_acquire_recursive>
 80077e6:	bf00      	nop
 80077e8:	200006bd 	.word	0x200006bd

080077ec <__sfp_lock_release>:
 80077ec:	4801      	ldr	r0, [pc, #4]	@ (80077f4 <__sfp_lock_release+0x8>)
 80077ee:	f000 ba33 	b.w	8007c58 <__retarget_lock_release_recursive>
 80077f2:	bf00      	nop
 80077f4:	200006bd 	.word	0x200006bd

080077f8 <__sinit>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	f7ff fff0 	bl	80077e0 <__sfp_lock_acquire>
 8007800:	6a23      	ldr	r3, [r4, #32]
 8007802:	b11b      	cbz	r3, 800780c <__sinit+0x14>
 8007804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007808:	f7ff bff0 	b.w	80077ec <__sfp_lock_release>
 800780c:	4b04      	ldr	r3, [pc, #16]	@ (8007820 <__sinit+0x28>)
 800780e:	6223      	str	r3, [r4, #32]
 8007810:	4b04      	ldr	r3, [pc, #16]	@ (8007824 <__sinit+0x2c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f5      	bne.n	8007804 <__sinit+0xc>
 8007818:	f7ff ffc4 	bl	80077a4 <global_stdio_init.part.0>
 800781c:	e7f2      	b.n	8007804 <__sinit+0xc>
 800781e:	bf00      	nop
 8007820:	08007765 	.word	0x08007765
 8007824:	200006b4 	.word	0x200006b4

08007828 <_fwalk_sglue>:
 8007828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800782c:	4607      	mov	r7, r0
 800782e:	4688      	mov	r8, r1
 8007830:	4614      	mov	r4, r2
 8007832:	2600      	movs	r6, #0
 8007834:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007838:	f1b9 0901 	subs.w	r9, r9, #1
 800783c:	d505      	bpl.n	800784a <_fwalk_sglue+0x22>
 800783e:	6824      	ldr	r4, [r4, #0]
 8007840:	2c00      	cmp	r4, #0
 8007842:	d1f7      	bne.n	8007834 <_fwalk_sglue+0xc>
 8007844:	4630      	mov	r0, r6
 8007846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800784a:	89ab      	ldrh	r3, [r5, #12]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d907      	bls.n	8007860 <_fwalk_sglue+0x38>
 8007850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007854:	3301      	adds	r3, #1
 8007856:	d003      	beq.n	8007860 <_fwalk_sglue+0x38>
 8007858:	4629      	mov	r1, r5
 800785a:	4638      	mov	r0, r7
 800785c:	47c0      	blx	r8
 800785e:	4306      	orrs	r6, r0
 8007860:	3568      	adds	r5, #104	@ 0x68
 8007862:	e7e9      	b.n	8007838 <_fwalk_sglue+0x10>

08007864 <iprintf>:
 8007864:	b40f      	push	{r0, r1, r2, r3}
 8007866:	b507      	push	{r0, r1, r2, lr}
 8007868:	4906      	ldr	r1, [pc, #24]	@ (8007884 <iprintf+0x20>)
 800786a:	ab04      	add	r3, sp, #16
 800786c:	6808      	ldr	r0, [r1, #0]
 800786e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007872:	6881      	ldr	r1, [r0, #8]
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	f002 fde9 	bl	800a44c <_vfiprintf_r>
 800787a:	b003      	add	sp, #12
 800787c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007880:	b004      	add	sp, #16
 8007882:	4770      	bx	lr
 8007884:	20000024 	.word	0x20000024

08007888 <_puts_r>:
 8007888:	6a03      	ldr	r3, [r0, #32]
 800788a:	b570      	push	{r4, r5, r6, lr}
 800788c:	6884      	ldr	r4, [r0, #8]
 800788e:	4605      	mov	r5, r0
 8007890:	460e      	mov	r6, r1
 8007892:	b90b      	cbnz	r3, 8007898 <_puts_r+0x10>
 8007894:	f7ff ffb0 	bl	80077f8 <__sinit>
 8007898:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800789a:	07db      	lsls	r3, r3, #31
 800789c:	d405      	bmi.n	80078aa <_puts_r+0x22>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	0598      	lsls	r0, r3, #22
 80078a2:	d402      	bmi.n	80078aa <_puts_r+0x22>
 80078a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078a6:	f000 f9d6 	bl	8007c56 <__retarget_lock_acquire_recursive>
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	0719      	lsls	r1, r3, #28
 80078ae:	d502      	bpl.n	80078b6 <_puts_r+0x2e>
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d135      	bne.n	8007922 <_puts_r+0x9a>
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 f8e7 	bl	8007a8c <__swsetup_r>
 80078be:	b380      	cbz	r0, 8007922 <_puts_r+0x9a>
 80078c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80078c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078c6:	07da      	lsls	r2, r3, #31
 80078c8:	d405      	bmi.n	80078d6 <_puts_r+0x4e>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	059b      	lsls	r3, r3, #22
 80078ce:	d402      	bmi.n	80078d6 <_puts_r+0x4e>
 80078d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d2:	f000 f9c1 	bl	8007c58 <__retarget_lock_release_recursive>
 80078d6:	4628      	mov	r0, r5
 80078d8:	bd70      	pop	{r4, r5, r6, pc}
 80078da:	2b00      	cmp	r3, #0
 80078dc:	da04      	bge.n	80078e8 <_puts_r+0x60>
 80078de:	69a2      	ldr	r2, [r4, #24]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	dc17      	bgt.n	8007914 <_puts_r+0x8c>
 80078e4:	290a      	cmp	r1, #10
 80078e6:	d015      	beq.n	8007914 <_puts_r+0x8c>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	6022      	str	r2, [r4, #0]
 80078ee:	7019      	strb	r1, [r3, #0]
 80078f0:	68a3      	ldr	r3, [r4, #8]
 80078f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078f6:	3b01      	subs	r3, #1
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	2900      	cmp	r1, #0
 80078fc:	d1ed      	bne.n	80078da <_puts_r+0x52>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da11      	bge.n	8007926 <_puts_r+0x9e>
 8007902:	4622      	mov	r2, r4
 8007904:	210a      	movs	r1, #10
 8007906:	4628      	mov	r0, r5
 8007908:	f000 f881 	bl	8007a0e <__swbuf_r>
 800790c:	3001      	adds	r0, #1
 800790e:	d0d7      	beq.n	80078c0 <_puts_r+0x38>
 8007910:	250a      	movs	r5, #10
 8007912:	e7d7      	b.n	80078c4 <_puts_r+0x3c>
 8007914:	4622      	mov	r2, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f879 	bl	8007a0e <__swbuf_r>
 800791c:	3001      	adds	r0, #1
 800791e:	d1e7      	bne.n	80078f0 <_puts_r+0x68>
 8007920:	e7ce      	b.n	80078c0 <_puts_r+0x38>
 8007922:	3e01      	subs	r6, #1
 8007924:	e7e4      	b.n	80078f0 <_puts_r+0x68>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	6022      	str	r2, [r4, #0]
 800792c:	220a      	movs	r2, #10
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e7ee      	b.n	8007910 <_puts_r+0x88>
	...

08007934 <puts>:
 8007934:	4b02      	ldr	r3, [pc, #8]	@ (8007940 <puts+0xc>)
 8007936:	4601      	mov	r1, r0
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f7ff bfa5 	b.w	8007888 <_puts_r>
 800793e:	bf00      	nop
 8007940:	20000024 	.word	0x20000024

08007944 <siprintf>:
 8007944:	b40e      	push	{r1, r2, r3}
 8007946:	b510      	push	{r4, lr}
 8007948:	b09d      	sub	sp, #116	@ 0x74
 800794a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800794c:	9002      	str	r0, [sp, #8]
 800794e:	9006      	str	r0, [sp, #24]
 8007950:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007954:	480a      	ldr	r0, [pc, #40]	@ (8007980 <siprintf+0x3c>)
 8007956:	9107      	str	r1, [sp, #28]
 8007958:	9104      	str	r1, [sp, #16]
 800795a:	490a      	ldr	r1, [pc, #40]	@ (8007984 <siprintf+0x40>)
 800795c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007960:	9105      	str	r1, [sp, #20]
 8007962:	2400      	movs	r4, #0
 8007964:	a902      	add	r1, sp, #8
 8007966:	6800      	ldr	r0, [r0, #0]
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800796c:	f002 fc4a 	bl	800a204 <_svfiprintf_r>
 8007970:	9b02      	ldr	r3, [sp, #8]
 8007972:	701c      	strb	r4, [r3, #0]
 8007974:	b01d      	add	sp, #116	@ 0x74
 8007976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800797a:	b003      	add	sp, #12
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	20000024 	.word	0x20000024
 8007984:	ffff0208 	.word	0xffff0208

08007988 <__sread>:
 8007988:	b510      	push	{r4, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007990:	f000 f912 	bl	8007bb8 <_read_r>
 8007994:	2800      	cmp	r0, #0
 8007996:	bfab      	itete	ge
 8007998:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800799a:	89a3      	ldrhlt	r3, [r4, #12]
 800799c:	181b      	addge	r3, r3, r0
 800799e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079a2:	bfac      	ite	ge
 80079a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079a6:	81a3      	strhlt	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__swrite>:
 80079aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ae:	461f      	mov	r7, r3
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	05db      	lsls	r3, r3, #23
 80079b4:	4605      	mov	r5, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	4616      	mov	r6, r2
 80079ba:	d505      	bpl.n	80079c8 <__swrite+0x1e>
 80079bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c0:	2302      	movs	r3, #2
 80079c2:	2200      	movs	r2, #0
 80079c4:	f000 f8e6 	bl	8007b94 <_lseek_r>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	4632      	mov	r2, r6
 80079d6:	463b      	mov	r3, r7
 80079d8:	4628      	mov	r0, r5
 80079da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	f000 b8fd 	b.w	8007bdc <_write_r>

080079e2 <__sseek>:
 80079e2:	b510      	push	{r4, lr}
 80079e4:	460c      	mov	r4, r1
 80079e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ea:	f000 f8d3 	bl	8007b94 <_lseek_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	bf15      	itete	ne
 80079f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079fe:	81a3      	strheq	r3, [r4, #12]
 8007a00:	bf18      	it	ne
 8007a02:	81a3      	strhne	r3, [r4, #12]
 8007a04:	bd10      	pop	{r4, pc}

08007a06 <__sclose>:
 8007a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0a:	f000 b8b3 	b.w	8007b74 <_close_r>

08007a0e <__swbuf_r>:
 8007a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a10:	460e      	mov	r6, r1
 8007a12:	4614      	mov	r4, r2
 8007a14:	4605      	mov	r5, r0
 8007a16:	b118      	cbz	r0, 8007a20 <__swbuf_r+0x12>
 8007a18:	6a03      	ldr	r3, [r0, #32]
 8007a1a:	b90b      	cbnz	r3, 8007a20 <__swbuf_r+0x12>
 8007a1c:	f7ff feec 	bl	80077f8 <__sinit>
 8007a20:	69a3      	ldr	r3, [r4, #24]
 8007a22:	60a3      	str	r3, [r4, #8]
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	071a      	lsls	r2, r3, #28
 8007a28:	d501      	bpl.n	8007a2e <__swbuf_r+0x20>
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	b943      	cbnz	r3, 8007a40 <__swbuf_r+0x32>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	4628      	mov	r0, r5
 8007a32:	f000 f82b 	bl	8007a8c <__swsetup_r>
 8007a36:	b118      	cbz	r0, 8007a40 <__swbuf_r+0x32>
 8007a38:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	6922      	ldr	r2, [r4, #16]
 8007a44:	1a98      	subs	r0, r3, r2
 8007a46:	6963      	ldr	r3, [r4, #20]
 8007a48:	b2f6      	uxtb	r6, r6
 8007a4a:	4283      	cmp	r3, r0
 8007a4c:	4637      	mov	r7, r6
 8007a4e:	dc05      	bgt.n	8007a5c <__swbuf_r+0x4e>
 8007a50:	4621      	mov	r1, r4
 8007a52:	4628      	mov	r0, r5
 8007a54:	f002 fe92 	bl	800a77c <_fflush_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d1ed      	bne.n	8007a38 <__swbuf_r+0x2a>
 8007a5c:	68a3      	ldr	r3, [r4, #8]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	60a3      	str	r3, [r4, #8]
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	6022      	str	r2, [r4, #0]
 8007a68:	701e      	strb	r6, [r3, #0]
 8007a6a:	6962      	ldr	r2, [r4, #20]
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d004      	beq.n	8007a7c <__swbuf_r+0x6e>
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	07db      	lsls	r3, r3, #31
 8007a76:	d5e1      	bpl.n	8007a3c <__swbuf_r+0x2e>
 8007a78:	2e0a      	cmp	r6, #10
 8007a7a:	d1df      	bne.n	8007a3c <__swbuf_r+0x2e>
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f002 fe7c 	bl	800a77c <_fflush_r>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d0d9      	beq.n	8007a3c <__swbuf_r+0x2e>
 8007a88:	e7d6      	b.n	8007a38 <__swbuf_r+0x2a>
	...

08007a8c <__swsetup_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4b29      	ldr	r3, [pc, #164]	@ (8007b34 <__swsetup_r+0xa8>)
 8007a90:	4605      	mov	r5, r0
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	460c      	mov	r4, r1
 8007a96:	b118      	cbz	r0, 8007aa0 <__swsetup_r+0x14>
 8007a98:	6a03      	ldr	r3, [r0, #32]
 8007a9a:	b90b      	cbnz	r3, 8007aa0 <__swsetup_r+0x14>
 8007a9c:	f7ff feac 	bl	80077f8 <__sinit>
 8007aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa4:	0719      	lsls	r1, r3, #28
 8007aa6:	d422      	bmi.n	8007aee <__swsetup_r+0x62>
 8007aa8:	06da      	lsls	r2, r3, #27
 8007aaa:	d407      	bmi.n	8007abc <__swsetup_r+0x30>
 8007aac:	2209      	movs	r2, #9
 8007aae:	602a      	str	r2, [r5, #0]
 8007ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aba:	e033      	b.n	8007b24 <__swsetup_r+0x98>
 8007abc:	0758      	lsls	r0, r3, #29
 8007abe:	d512      	bpl.n	8007ae6 <__swsetup_r+0x5a>
 8007ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ac2:	b141      	cbz	r1, 8007ad6 <__swsetup_r+0x4a>
 8007ac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ac8:	4299      	cmp	r1, r3
 8007aca:	d002      	beq.n	8007ad2 <__swsetup_r+0x46>
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 ff23 	bl	8008918 <_free_r>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	6063      	str	r3, [r4, #4]
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f043 0308 	orr.w	r3, r3, #8
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	b94b      	cbnz	r3, 8007b06 <__swsetup_r+0x7a>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007afc:	d003      	beq.n	8007b06 <__swsetup_r+0x7a>
 8007afe:	4621      	mov	r1, r4
 8007b00:	4628      	mov	r0, r5
 8007b02:	f002 fe89 	bl	800a818 <__smakebuf_r>
 8007b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0a:	f013 0201 	ands.w	r2, r3, #1
 8007b0e:	d00a      	beq.n	8007b26 <__swsetup_r+0x9a>
 8007b10:	2200      	movs	r2, #0
 8007b12:	60a2      	str	r2, [r4, #8]
 8007b14:	6962      	ldr	r2, [r4, #20]
 8007b16:	4252      	negs	r2, r2
 8007b18:	61a2      	str	r2, [r4, #24]
 8007b1a:	6922      	ldr	r2, [r4, #16]
 8007b1c:	b942      	cbnz	r2, 8007b30 <__swsetup_r+0xa4>
 8007b1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b22:	d1c5      	bne.n	8007ab0 <__swsetup_r+0x24>
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	0799      	lsls	r1, r3, #30
 8007b28:	bf58      	it	pl
 8007b2a:	6962      	ldrpl	r2, [r4, #20]
 8007b2c:	60a2      	str	r2, [r4, #8]
 8007b2e:	e7f4      	b.n	8007b1a <__swsetup_r+0x8e>
 8007b30:	2000      	movs	r0, #0
 8007b32:	e7f7      	b.n	8007b24 <__swsetup_r+0x98>
 8007b34:	20000024 	.word	0x20000024

08007b38 <memset>:
 8007b38:	4402      	add	r2, r0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d100      	bne.n	8007b42 <memset+0xa>
 8007b40:	4770      	bx	lr
 8007b42:	f803 1b01 	strb.w	r1, [r3], #1
 8007b46:	e7f9      	b.n	8007b3c <memset+0x4>

08007b48 <strncmp>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	b16a      	cbz	r2, 8007b68 <strncmp+0x20>
 8007b4c:	3901      	subs	r1, #1
 8007b4e:	1884      	adds	r4, r0, r2
 8007b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d103      	bne.n	8007b64 <strncmp+0x1c>
 8007b5c:	42a0      	cmp	r0, r4
 8007b5e:	d001      	beq.n	8007b64 <strncmp+0x1c>
 8007b60:	2a00      	cmp	r2, #0
 8007b62:	d1f5      	bne.n	8007b50 <strncmp+0x8>
 8007b64:	1ad0      	subs	r0, r2, r3
 8007b66:	bd10      	pop	{r4, pc}
 8007b68:	4610      	mov	r0, r2
 8007b6a:	e7fc      	b.n	8007b66 <strncmp+0x1e>

08007b6c <_localeconv_r>:
 8007b6c:	4800      	ldr	r0, [pc, #0]	@ (8007b70 <_localeconv_r+0x4>)
 8007b6e:	4770      	bx	lr
 8007b70:	20000164 	.word	0x20000164

08007b74 <_close_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d06      	ldr	r5, [pc, #24]	@ (8007b90 <_close_r+0x1c>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	602b      	str	r3, [r5, #0]
 8007b80:	f7fa f8be 	bl	8001d00 <_close>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_close_r+0x1a>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_close_r+0x1a>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	200006b8 	.word	0x200006b8

08007b94 <_lseek_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d07      	ldr	r5, [pc, #28]	@ (8007bb4 <_lseek_r+0x20>)
 8007b98:	4604      	mov	r4, r0
 8007b9a:	4608      	mov	r0, r1
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	602a      	str	r2, [r5, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f7fa f8d0 	bl	8001d48 <_lseek>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_lseek_r+0x1e>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_lseek_r+0x1e>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	200006b8 	.word	0x200006b8

08007bb8 <_read_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d07      	ldr	r5, [pc, #28]	@ (8007bd8 <_read_r+0x20>)
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	4608      	mov	r0, r1
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	602a      	str	r2, [r5, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f7fa f87d 	bl	8001cc6 <_read>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_read_r+0x1e>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_read_r+0x1e>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	200006b8 	.word	0x200006b8

08007bdc <_write_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d07      	ldr	r5, [pc, #28]	@ (8007bfc <_write_r+0x20>)
 8007be0:	4604      	mov	r4, r0
 8007be2:	4608      	mov	r0, r1
 8007be4:	4611      	mov	r1, r2
 8007be6:	2200      	movs	r2, #0
 8007be8:	602a      	str	r2, [r5, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	f7f9 fcd0 	bl	8001590 <_write>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d102      	bne.n	8007bfa <_write_r+0x1e>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	b103      	cbz	r3, 8007bfa <_write_r+0x1e>
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	200006b8 	.word	0x200006b8

08007c00 <__errno>:
 8007c00:	4b01      	ldr	r3, [pc, #4]	@ (8007c08 <__errno+0x8>)
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	20000024 	.word	0x20000024

08007c0c <__libc_init_array>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007c44 <__libc_init_array+0x38>)
 8007c10:	4c0d      	ldr	r4, [pc, #52]	@ (8007c48 <__libc_init_array+0x3c>)
 8007c12:	1b64      	subs	r4, r4, r5
 8007c14:	10a4      	asrs	r4, r4, #2
 8007c16:	2600      	movs	r6, #0
 8007c18:	42a6      	cmp	r6, r4
 8007c1a:	d109      	bne.n	8007c30 <__libc_init_array+0x24>
 8007c1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007c4c <__libc_init_array+0x40>)
 8007c1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007c50 <__libc_init_array+0x44>)
 8007c20:	f003 fab4 	bl	800b18c <_init>
 8007c24:	1b64      	subs	r4, r4, r5
 8007c26:	10a4      	asrs	r4, r4, #2
 8007c28:	2600      	movs	r6, #0
 8007c2a:	42a6      	cmp	r6, r4
 8007c2c:	d105      	bne.n	8007c3a <__libc_init_array+0x2e>
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c34:	4798      	blx	r3
 8007c36:	3601      	adds	r6, #1
 8007c38:	e7ee      	b.n	8007c18 <__libc_init_array+0xc>
 8007c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c3e:	4798      	blx	r3
 8007c40:	3601      	adds	r6, #1
 8007c42:	e7f2      	b.n	8007c2a <__libc_init_array+0x1e>
 8007c44:	0800bb48 	.word	0x0800bb48
 8007c48:	0800bb48 	.word	0x0800bb48
 8007c4c:	0800bb48 	.word	0x0800bb48
 8007c50:	0800bb4c 	.word	0x0800bb4c

08007c54 <__retarget_lock_init_recursive>:
 8007c54:	4770      	bx	lr

08007c56 <__retarget_lock_acquire_recursive>:
 8007c56:	4770      	bx	lr

08007c58 <__retarget_lock_release_recursive>:
 8007c58:	4770      	bx	lr
	...

08007c5c <nanf>:
 8007c5c:	4800      	ldr	r0, [pc, #0]	@ (8007c60 <nanf+0x4>)
 8007c5e:	4770      	bx	lr
 8007c60:	7fc00000 	.word	0x7fc00000

08007c64 <quorem>:
 8007c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	6903      	ldr	r3, [r0, #16]
 8007c6a:	690c      	ldr	r4, [r1, #16]
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	4607      	mov	r7, r0
 8007c70:	db7e      	blt.n	8007d70 <quorem+0x10c>
 8007c72:	3c01      	subs	r4, #1
 8007c74:	f101 0814 	add.w	r8, r1, #20
 8007c78:	00a3      	lsls	r3, r4, #2
 8007c7a:	f100 0514 	add.w	r5, r0, #20
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	429a      	cmp	r2, r3
 8007c92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c96:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c9a:	d32e      	bcc.n	8007cfa <quorem+0x96>
 8007c9c:	f04f 0a00 	mov.w	sl, #0
 8007ca0:	46c4      	mov	ip, r8
 8007ca2:	46ae      	mov	lr, r5
 8007ca4:	46d3      	mov	fp, sl
 8007ca6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007caa:	b298      	uxth	r0, r3
 8007cac:	fb06 a000 	mla	r0, r6, r0, sl
 8007cb0:	0c02      	lsrs	r2, r0, #16
 8007cb2:	0c1b      	lsrs	r3, r3, #16
 8007cb4:	fb06 2303 	mla	r3, r6, r3, r2
 8007cb8:	f8de 2000 	ldr.w	r2, [lr]
 8007cbc:	b280      	uxth	r0, r0
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	1a12      	subs	r2, r2, r0
 8007cc2:	445a      	add	r2, fp
 8007cc4:	f8de 0000 	ldr.w	r0, [lr]
 8007cc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007cd2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007cd6:	b292      	uxth	r2, r2
 8007cd8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007cdc:	45e1      	cmp	r9, ip
 8007cde:	f84e 2b04 	str.w	r2, [lr], #4
 8007ce2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ce6:	d2de      	bcs.n	8007ca6 <quorem+0x42>
 8007ce8:	9b00      	ldr	r3, [sp, #0]
 8007cea:	58eb      	ldr	r3, [r5, r3]
 8007cec:	b92b      	cbnz	r3, 8007cfa <quorem+0x96>
 8007cee:	9b01      	ldr	r3, [sp, #4]
 8007cf0:	3b04      	subs	r3, #4
 8007cf2:	429d      	cmp	r5, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	d32f      	bcc.n	8007d58 <quorem+0xf4>
 8007cf8:	613c      	str	r4, [r7, #16]
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f001 f9c8 	bl	8009090 <__mcmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	db25      	blt.n	8007d50 <quorem+0xec>
 8007d04:	4629      	mov	r1, r5
 8007d06:	2000      	movs	r0, #0
 8007d08:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d0c:	f8d1 c000 	ldr.w	ip, [r1]
 8007d10:	fa1f fe82 	uxth.w	lr, r2
 8007d14:	fa1f f38c 	uxth.w	r3, ip
 8007d18:	eba3 030e 	sub.w	r3, r3, lr
 8007d1c:	4403      	add	r3, r0
 8007d1e:	0c12      	lsrs	r2, r2, #16
 8007d20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d2e:	45c1      	cmp	r9, r8
 8007d30:	f841 3b04 	str.w	r3, [r1], #4
 8007d34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d38:	d2e6      	bcs.n	8007d08 <quorem+0xa4>
 8007d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d42:	b922      	cbnz	r2, 8007d4e <quorem+0xea>
 8007d44:	3b04      	subs	r3, #4
 8007d46:	429d      	cmp	r5, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	d30b      	bcc.n	8007d64 <quorem+0x100>
 8007d4c:	613c      	str	r4, [r7, #16]
 8007d4e:	3601      	adds	r6, #1
 8007d50:	4630      	mov	r0, r6
 8007d52:	b003      	add	sp, #12
 8007d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d58:	6812      	ldr	r2, [r2, #0]
 8007d5a:	3b04      	subs	r3, #4
 8007d5c:	2a00      	cmp	r2, #0
 8007d5e:	d1cb      	bne.n	8007cf8 <quorem+0x94>
 8007d60:	3c01      	subs	r4, #1
 8007d62:	e7c6      	b.n	8007cf2 <quorem+0x8e>
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	3b04      	subs	r3, #4
 8007d68:	2a00      	cmp	r2, #0
 8007d6a:	d1ef      	bne.n	8007d4c <quorem+0xe8>
 8007d6c:	3c01      	subs	r4, #1
 8007d6e:	e7ea      	b.n	8007d46 <quorem+0xe2>
 8007d70:	2000      	movs	r0, #0
 8007d72:	e7ee      	b.n	8007d52 <quorem+0xee>
 8007d74:	0000      	movs	r0, r0
	...

08007d78 <_dtoa_r>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	69c7      	ldr	r7, [r0, #28]
 8007d7e:	b097      	sub	sp, #92	@ 0x5c
 8007d80:	4614      	mov	r4, r2
 8007d82:	461d      	mov	r5, r3
 8007d84:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007d88:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007d8a:	4681      	mov	r9, r0
 8007d8c:	b97f      	cbnz	r7, 8007dae <_dtoa_r+0x36>
 8007d8e:	2010      	movs	r0, #16
 8007d90:	f000 fe0c 	bl	80089ac <malloc>
 8007d94:	4602      	mov	r2, r0
 8007d96:	f8c9 001c 	str.w	r0, [r9, #28]
 8007d9a:	b920      	cbnz	r0, 8007da6 <_dtoa_r+0x2e>
 8007d9c:	4baa      	ldr	r3, [pc, #680]	@ (8008048 <_dtoa_r+0x2d0>)
 8007d9e:	21ef      	movs	r1, #239	@ 0xef
 8007da0:	48aa      	ldr	r0, [pc, #680]	@ (800804c <_dtoa_r+0x2d4>)
 8007da2:	f002 fdd5 	bl	800a950 <__assert_func>
 8007da6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007daa:	6007      	str	r7, [r0, #0]
 8007dac:	60c7      	str	r7, [r0, #12]
 8007dae:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	b159      	cbz	r1, 8007dce <_dtoa_r+0x56>
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	604a      	str	r2, [r1, #4]
 8007dba:	2301      	movs	r3, #1
 8007dbc:	4093      	lsls	r3, r2
 8007dbe:	608b      	str	r3, [r1, #8]
 8007dc0:	4648      	mov	r0, r9
 8007dc2:	f000 fee9 	bl	8008b98 <_Bfree>
 8007dc6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	1e2b      	subs	r3, r5, #0
 8007dd0:	bfb9      	ittee	lt
 8007dd2:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007dd6:	9307      	strlt	r3, [sp, #28]
 8007dd8:	2300      	movge	r3, #0
 8007dda:	6033      	strge	r3, [r6, #0]
 8007ddc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007de0:	4b9b      	ldr	r3, [pc, #620]	@ (8008050 <_dtoa_r+0x2d8>)
 8007de2:	bfbc      	itt	lt
 8007de4:	2201      	movlt	r2, #1
 8007de6:	6032      	strlt	r2, [r6, #0]
 8007de8:	ea33 0308 	bics.w	r3, r3, r8
 8007dec:	d112      	bne.n	8007e14 <_dtoa_r+0x9c>
 8007dee:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007df0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007dfa:	4323      	orrs	r3, r4
 8007dfc:	f000 855b 	beq.w	80088b6 <_dtoa_r+0xb3e>
 8007e00:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e02:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8008054 <_dtoa_r+0x2dc>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 855d 	beq.w	80088c6 <_dtoa_r+0xb4e>
 8007e0c:	f10a 0303 	add.w	r3, sl, #3
 8007e10:	f000 bd57 	b.w	80088c2 <_dtoa_r+0xb4a>
 8007e14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e18:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e20:	2200      	movs	r2, #0
 8007e22:	2300      	movs	r3, #0
 8007e24:	f7f8 fe38 	bl	8000a98 <__aeabi_dcmpeq>
 8007e28:	4607      	mov	r7, r0
 8007e2a:	b158      	cbz	r0, 8007e44 <_dtoa_r+0xcc>
 8007e2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e2e:	2301      	movs	r3, #1
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e34:	b113      	cbz	r3, 8007e3c <_dtoa_r+0xc4>
 8007e36:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e38:	4b87      	ldr	r3, [pc, #540]	@ (8008058 <_dtoa_r+0x2e0>)
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800805c <_dtoa_r+0x2e4>
 8007e40:	f000 bd41 	b.w	80088c6 <_dtoa_r+0xb4e>
 8007e44:	ab14      	add	r3, sp, #80	@ 0x50
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	ab15      	add	r3, sp, #84	@ 0x54
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	4648      	mov	r0, r9
 8007e4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e52:	f001 fa35 	bl	80092c0 <__d2b>
 8007e56:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007e5a:	9003      	str	r0, [sp, #12]
 8007e5c:	2e00      	cmp	r6, #0
 8007e5e:	d077      	beq.n	8007f50 <_dtoa_r+0x1d8>
 8007e60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e62:	9712      	str	r7, [sp, #72]	@ 0x48
 8007e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e78:	4619      	mov	r1, r3
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	4b78      	ldr	r3, [pc, #480]	@ (8008060 <_dtoa_r+0x2e8>)
 8007e7e:	f7f8 f9eb 	bl	8000258 <__aeabi_dsub>
 8007e82:	a36b      	add	r3, pc, #428	@ (adr r3, 8008030 <_dtoa_r+0x2b8>)
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f7f8 fb9e 	bl	80005c8 <__aeabi_dmul>
 8007e8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008038 <_dtoa_r+0x2c0>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 f9e3 	bl	800025c <__adddf3>
 8007e96:	4604      	mov	r4, r0
 8007e98:	4630      	mov	r0, r6
 8007e9a:	460d      	mov	r5, r1
 8007e9c:	f7f8 fb2a 	bl	80004f4 <__aeabi_i2d>
 8007ea0:	a367      	add	r3, pc, #412	@ (adr r3, 8008040 <_dtoa_r+0x2c8>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f7f8 fb8f 	bl	80005c8 <__aeabi_dmul>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7f8 f9d3 	bl	800025c <__adddf3>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	460d      	mov	r5, r1
 8007eba:	f7f8 fe35 	bl	8000b28 <__aeabi_d2iz>
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 fdf0 	bl	8000aac <__aeabi_dcmplt>
 8007ecc:	b140      	cbz	r0, 8007ee0 <_dtoa_r+0x168>
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f7f8 fb10 	bl	80004f4 <__aeabi_i2d>
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	f7f8 fdde 	bl	8000a98 <__aeabi_dcmpeq>
 8007edc:	b900      	cbnz	r0, 8007ee0 <_dtoa_r+0x168>
 8007ede:	3f01      	subs	r7, #1
 8007ee0:	2f16      	cmp	r7, #22
 8007ee2:	d853      	bhi.n	8007f8c <_dtoa_r+0x214>
 8007ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8008064 <_dtoa_r+0x2ec>)
 8007ee6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ef2:	f7f8 fddb 	bl	8000aac <__aeabi_dcmplt>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d04a      	beq.n	8007f90 <_dtoa_r+0x218>
 8007efa:	3f01      	subs	r7, #1
 8007efc:	2300      	movs	r3, #0
 8007efe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f02:	1b9b      	subs	r3, r3, r6
 8007f04:	1e5a      	subs	r2, r3, #1
 8007f06:	bf45      	ittet	mi
 8007f08:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f0c:	9304      	strmi	r3, [sp, #16]
 8007f0e:	2300      	movpl	r3, #0
 8007f10:	2300      	movmi	r3, #0
 8007f12:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f14:	bf54      	ite	pl
 8007f16:	9304      	strpl	r3, [sp, #16]
 8007f18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007f1a:	2f00      	cmp	r7, #0
 8007f1c:	db3a      	blt.n	8007f94 <_dtoa_r+0x21c>
 8007f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f20:	970e      	str	r7, [sp, #56]	@ 0x38
 8007f22:	443b      	add	r3, r7
 8007f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f26:	2300      	movs	r3, #0
 8007f28:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f2c:	2b09      	cmp	r3, #9
 8007f2e:	d864      	bhi.n	8007ffa <_dtoa_r+0x282>
 8007f30:	2b05      	cmp	r3, #5
 8007f32:	bfc4      	itt	gt
 8007f34:	3b04      	subgt	r3, #4
 8007f36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007f38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f3a:	f1a3 0302 	sub.w	r3, r3, #2
 8007f3e:	bfcc      	ite	gt
 8007f40:	2400      	movgt	r4, #0
 8007f42:	2401      	movle	r4, #1
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d864      	bhi.n	8008012 <_dtoa_r+0x29a>
 8007f48:	e8df f003 	tbb	[pc, r3]
 8007f4c:	2c385553 	.word	0x2c385553
 8007f50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007f54:	441e      	add	r6, r3
 8007f56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	bfc1      	itttt	gt
 8007f5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f62:	fa08 f803 	lslgt.w	r8, r8, r3
 8007f66:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f6a:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f6e:	bfd6      	itet	le
 8007f70:	f1c3 0320 	rsble	r3, r3, #32
 8007f74:	ea48 0003 	orrgt.w	r0, r8, r3
 8007f78:	fa04 f003 	lslle.w	r0, r4, r3
 8007f7c:	f7f8 faaa 	bl	80004d4 <__aeabi_ui2d>
 8007f80:	2201      	movs	r2, #1
 8007f82:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f86:	3e01      	subs	r6, #1
 8007f88:	9212      	str	r2, [sp, #72]	@ 0x48
 8007f8a:	e775      	b.n	8007e78 <_dtoa_r+0x100>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e7b6      	b.n	8007efe <_dtoa_r+0x186>
 8007f90:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007f92:	e7b5      	b.n	8007f00 <_dtoa_r+0x188>
 8007f94:	9b04      	ldr	r3, [sp, #16]
 8007f96:	1bdb      	subs	r3, r3, r7
 8007f98:	9304      	str	r3, [sp, #16]
 8007f9a:	427b      	negs	r3, r7
 8007f9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fa2:	e7c2      	b.n	8007f2a <_dtoa_r+0x1b2>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007faa:	eb07 0b03 	add.w	fp, r7, r3
 8007fae:	f10b 0301 	add.w	r3, fp, #1
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	9308      	str	r3, [sp, #32]
 8007fb6:	bfb8      	it	lt
 8007fb8:	2301      	movlt	r3, #1
 8007fba:	e006      	b.n	8007fca <_dtoa_r+0x252>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dd28      	ble.n	8008018 <_dtoa_r+0x2a0>
 8007fc6:	469b      	mov	fp, r3
 8007fc8:	9308      	str	r3, [sp, #32]
 8007fca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007fce:	2100      	movs	r1, #0
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	f102 0514 	add.w	r5, r2, #20
 8007fd6:	429d      	cmp	r5, r3
 8007fd8:	d926      	bls.n	8008028 <_dtoa_r+0x2b0>
 8007fda:	6041      	str	r1, [r0, #4]
 8007fdc:	4648      	mov	r0, r9
 8007fde:	f000 fd9b 	bl	8008b18 <_Balloc>
 8007fe2:	4682      	mov	sl, r0
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d141      	bne.n	800806c <_dtoa_r+0x2f4>
 8007fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8008068 <_dtoa_r+0x2f0>)
 8007fea:	4602      	mov	r2, r0
 8007fec:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ff0:	e6d6      	b.n	8007da0 <_dtoa_r+0x28>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e7e3      	b.n	8007fbe <_dtoa_r+0x246>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e7d5      	b.n	8007fa6 <_dtoa_r+0x22e>
 8007ffa:	2401      	movs	r4, #1
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9320      	str	r3, [sp, #128]	@ 0x80
 8008000:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008002:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008006:	2200      	movs	r2, #0
 8008008:	f8cd b020 	str.w	fp, [sp, #32]
 800800c:	2312      	movs	r3, #18
 800800e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008010:	e7db      	b.n	8007fca <_dtoa_r+0x252>
 8008012:	2301      	movs	r3, #1
 8008014:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008016:	e7f4      	b.n	8008002 <_dtoa_r+0x28a>
 8008018:	f04f 0b01 	mov.w	fp, #1
 800801c:	f8cd b020 	str.w	fp, [sp, #32]
 8008020:	465b      	mov	r3, fp
 8008022:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008026:	e7d0      	b.n	8007fca <_dtoa_r+0x252>
 8008028:	3101      	adds	r1, #1
 800802a:	0052      	lsls	r2, r2, #1
 800802c:	e7d1      	b.n	8007fd2 <_dtoa_r+0x25a>
 800802e:	bf00      	nop
 8008030:	636f4361 	.word	0x636f4361
 8008034:	3fd287a7 	.word	0x3fd287a7
 8008038:	8b60c8b3 	.word	0x8b60c8b3
 800803c:	3fc68a28 	.word	0x3fc68a28
 8008040:	509f79fb 	.word	0x509f79fb
 8008044:	3fd34413 	.word	0x3fd34413
 8008048:	0800b85f 	.word	0x0800b85f
 800804c:	0800b876 	.word	0x0800b876
 8008050:	7ff00000 	.word	0x7ff00000
 8008054:	0800b85b 	.word	0x0800b85b
 8008058:	0800b82a 	.word	0x0800b82a
 800805c:	0800b829 	.word	0x0800b829
 8008060:	3ff80000 	.word	0x3ff80000
 8008064:	0800ba28 	.word	0x0800ba28
 8008068:	0800b8ce 	.word	0x0800b8ce
 800806c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008070:	6018      	str	r0, [r3, #0]
 8008072:	9b08      	ldr	r3, [sp, #32]
 8008074:	2b0e      	cmp	r3, #14
 8008076:	f200 80a1 	bhi.w	80081bc <_dtoa_r+0x444>
 800807a:	2c00      	cmp	r4, #0
 800807c:	f000 809e 	beq.w	80081bc <_dtoa_r+0x444>
 8008080:	2f00      	cmp	r7, #0
 8008082:	dd33      	ble.n	80080ec <_dtoa_r+0x374>
 8008084:	4b9c      	ldr	r3, [pc, #624]	@ (80082f8 <_dtoa_r+0x580>)
 8008086:	f007 020f 	and.w	r2, r7, #15
 800808a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800808e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008092:	05f8      	lsls	r0, r7, #23
 8008094:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008098:	ea4f 1427 	mov.w	r4, r7, asr #4
 800809c:	d516      	bpl.n	80080cc <_dtoa_r+0x354>
 800809e:	4b97      	ldr	r3, [pc, #604]	@ (80082fc <_dtoa_r+0x584>)
 80080a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080a8:	f7f8 fbb8 	bl	800081c <__aeabi_ddiv>
 80080ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080b0:	f004 040f 	and.w	r4, r4, #15
 80080b4:	2603      	movs	r6, #3
 80080b6:	4d91      	ldr	r5, [pc, #580]	@ (80082fc <_dtoa_r+0x584>)
 80080b8:	b954      	cbnz	r4, 80080d0 <_dtoa_r+0x358>
 80080ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080c2:	f7f8 fbab 	bl	800081c <__aeabi_ddiv>
 80080c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080ca:	e028      	b.n	800811e <_dtoa_r+0x3a6>
 80080cc:	2602      	movs	r6, #2
 80080ce:	e7f2      	b.n	80080b6 <_dtoa_r+0x33e>
 80080d0:	07e1      	lsls	r1, r4, #31
 80080d2:	d508      	bpl.n	80080e6 <_dtoa_r+0x36e>
 80080d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080dc:	f7f8 fa74 	bl	80005c8 <__aeabi_dmul>
 80080e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080e4:	3601      	adds	r6, #1
 80080e6:	1064      	asrs	r4, r4, #1
 80080e8:	3508      	adds	r5, #8
 80080ea:	e7e5      	b.n	80080b8 <_dtoa_r+0x340>
 80080ec:	f000 80af 	beq.w	800824e <_dtoa_r+0x4d6>
 80080f0:	427c      	negs	r4, r7
 80080f2:	4b81      	ldr	r3, [pc, #516]	@ (80082f8 <_dtoa_r+0x580>)
 80080f4:	4d81      	ldr	r5, [pc, #516]	@ (80082fc <_dtoa_r+0x584>)
 80080f6:	f004 020f 	and.w	r2, r4, #15
 80080fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008106:	f7f8 fa5f 	bl	80005c8 <__aeabi_dmul>
 800810a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800810e:	1124      	asrs	r4, r4, #4
 8008110:	2300      	movs	r3, #0
 8008112:	2602      	movs	r6, #2
 8008114:	2c00      	cmp	r4, #0
 8008116:	f040 808f 	bne.w	8008238 <_dtoa_r+0x4c0>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1d3      	bne.n	80080c6 <_dtoa_r+0x34e>
 800811e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008120:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 8094 	beq.w	8008252 <_dtoa_r+0x4da>
 800812a:	4b75      	ldr	r3, [pc, #468]	@ (8008300 <_dtoa_r+0x588>)
 800812c:	2200      	movs	r2, #0
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 fcbb 	bl	8000aac <__aeabi_dcmplt>
 8008136:	2800      	cmp	r0, #0
 8008138:	f000 808b 	beq.w	8008252 <_dtoa_r+0x4da>
 800813c:	9b08      	ldr	r3, [sp, #32]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 8087 	beq.w	8008252 <_dtoa_r+0x4da>
 8008144:	f1bb 0f00 	cmp.w	fp, #0
 8008148:	dd34      	ble.n	80081b4 <_dtoa_r+0x43c>
 800814a:	4620      	mov	r0, r4
 800814c:	4b6d      	ldr	r3, [pc, #436]	@ (8008304 <_dtoa_r+0x58c>)
 800814e:	2200      	movs	r2, #0
 8008150:	4629      	mov	r1, r5
 8008152:	f7f8 fa39 	bl	80005c8 <__aeabi_dmul>
 8008156:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800815a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800815e:	3601      	adds	r6, #1
 8008160:	465c      	mov	r4, fp
 8008162:	4630      	mov	r0, r6
 8008164:	f7f8 f9c6 	bl	80004f4 <__aeabi_i2d>
 8008168:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800816c:	f7f8 fa2c 	bl	80005c8 <__aeabi_dmul>
 8008170:	4b65      	ldr	r3, [pc, #404]	@ (8008308 <_dtoa_r+0x590>)
 8008172:	2200      	movs	r2, #0
 8008174:	f7f8 f872 	bl	800025c <__adddf3>
 8008178:	4605      	mov	r5, r0
 800817a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800817e:	2c00      	cmp	r4, #0
 8008180:	d16a      	bne.n	8008258 <_dtoa_r+0x4e0>
 8008182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008186:	4b61      	ldr	r3, [pc, #388]	@ (800830c <_dtoa_r+0x594>)
 8008188:	2200      	movs	r2, #0
 800818a:	f7f8 f865 	bl	8000258 <__aeabi_dsub>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008196:	462a      	mov	r2, r5
 8008198:	4633      	mov	r3, r6
 800819a:	f7f8 fca5 	bl	8000ae8 <__aeabi_dcmpgt>
 800819e:	2800      	cmp	r0, #0
 80081a0:	f040 8298 	bne.w	80086d4 <_dtoa_r+0x95c>
 80081a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081a8:	462a      	mov	r2, r5
 80081aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80081ae:	f7f8 fc7d 	bl	8000aac <__aeabi_dcmplt>
 80081b2:	bb38      	cbnz	r0, 8008204 <_dtoa_r+0x48c>
 80081b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80081b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80081bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f2c0 8157 	blt.w	8008472 <_dtoa_r+0x6fa>
 80081c4:	2f0e      	cmp	r7, #14
 80081c6:	f300 8154 	bgt.w	8008472 <_dtoa_r+0x6fa>
 80081ca:	4b4b      	ldr	r3, [pc, #300]	@ (80082f8 <_dtoa_r+0x580>)
 80081cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f280 80e5 	bge.w	80083aa <_dtoa_r+0x632>
 80081e0:	9b08      	ldr	r3, [sp, #32]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f300 80e1 	bgt.w	80083aa <_dtoa_r+0x632>
 80081e8:	d10c      	bne.n	8008204 <_dtoa_r+0x48c>
 80081ea:	4b48      	ldr	r3, [pc, #288]	@ (800830c <_dtoa_r+0x594>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f2:	f7f8 f9e9 	bl	80005c8 <__aeabi_dmul>
 80081f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081fa:	f7f8 fc6b 	bl	8000ad4 <__aeabi_dcmpge>
 80081fe:	2800      	cmp	r0, #0
 8008200:	f000 8266 	beq.w	80086d0 <_dtoa_r+0x958>
 8008204:	2400      	movs	r4, #0
 8008206:	4625      	mov	r5, r4
 8008208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800820a:	4656      	mov	r6, sl
 800820c:	ea6f 0803 	mvn.w	r8, r3
 8008210:	2700      	movs	r7, #0
 8008212:	4621      	mov	r1, r4
 8008214:	4648      	mov	r0, r9
 8008216:	f000 fcbf 	bl	8008b98 <_Bfree>
 800821a:	2d00      	cmp	r5, #0
 800821c:	f000 80bd 	beq.w	800839a <_dtoa_r+0x622>
 8008220:	b12f      	cbz	r7, 800822e <_dtoa_r+0x4b6>
 8008222:	42af      	cmp	r7, r5
 8008224:	d003      	beq.n	800822e <_dtoa_r+0x4b6>
 8008226:	4639      	mov	r1, r7
 8008228:	4648      	mov	r0, r9
 800822a:	f000 fcb5 	bl	8008b98 <_Bfree>
 800822e:	4629      	mov	r1, r5
 8008230:	4648      	mov	r0, r9
 8008232:	f000 fcb1 	bl	8008b98 <_Bfree>
 8008236:	e0b0      	b.n	800839a <_dtoa_r+0x622>
 8008238:	07e2      	lsls	r2, r4, #31
 800823a:	d505      	bpl.n	8008248 <_dtoa_r+0x4d0>
 800823c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008240:	f7f8 f9c2 	bl	80005c8 <__aeabi_dmul>
 8008244:	3601      	adds	r6, #1
 8008246:	2301      	movs	r3, #1
 8008248:	1064      	asrs	r4, r4, #1
 800824a:	3508      	adds	r5, #8
 800824c:	e762      	b.n	8008114 <_dtoa_r+0x39c>
 800824e:	2602      	movs	r6, #2
 8008250:	e765      	b.n	800811e <_dtoa_r+0x3a6>
 8008252:	9c08      	ldr	r4, [sp, #32]
 8008254:	46b8      	mov	r8, r7
 8008256:	e784      	b.n	8008162 <_dtoa_r+0x3ea>
 8008258:	4b27      	ldr	r3, [pc, #156]	@ (80082f8 <_dtoa_r+0x580>)
 800825a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800825c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008260:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008264:	4454      	add	r4, sl
 8008266:	2900      	cmp	r1, #0
 8008268:	d054      	beq.n	8008314 <_dtoa_r+0x59c>
 800826a:	4929      	ldr	r1, [pc, #164]	@ (8008310 <_dtoa_r+0x598>)
 800826c:	2000      	movs	r0, #0
 800826e:	f7f8 fad5 	bl	800081c <__aeabi_ddiv>
 8008272:	4633      	mov	r3, r6
 8008274:	462a      	mov	r2, r5
 8008276:	f7f7 ffef 	bl	8000258 <__aeabi_dsub>
 800827a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800827e:	4656      	mov	r6, sl
 8008280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008284:	f7f8 fc50 	bl	8000b28 <__aeabi_d2iz>
 8008288:	4605      	mov	r5, r0
 800828a:	f7f8 f933 	bl	80004f4 <__aeabi_i2d>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008296:	f7f7 ffdf 	bl	8000258 <__aeabi_dsub>
 800829a:	3530      	adds	r5, #48	@ 0x30
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082a4:	f806 5b01 	strb.w	r5, [r6], #1
 80082a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082ac:	f7f8 fbfe 	bl	8000aac <__aeabi_dcmplt>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d172      	bne.n	800839a <_dtoa_r+0x622>
 80082b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082b8:	4911      	ldr	r1, [pc, #68]	@ (8008300 <_dtoa_r+0x588>)
 80082ba:	2000      	movs	r0, #0
 80082bc:	f7f7 ffcc 	bl	8000258 <__aeabi_dsub>
 80082c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082c4:	f7f8 fbf2 	bl	8000aac <__aeabi_dcmplt>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	f040 80b4 	bne.w	8008436 <_dtoa_r+0x6be>
 80082ce:	42a6      	cmp	r6, r4
 80082d0:	f43f af70 	beq.w	80081b4 <_dtoa_r+0x43c>
 80082d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008304 <_dtoa_r+0x58c>)
 80082da:	2200      	movs	r2, #0
 80082dc:	f7f8 f974 	bl	80005c8 <__aeabi_dmul>
 80082e0:	4b08      	ldr	r3, [pc, #32]	@ (8008304 <_dtoa_r+0x58c>)
 80082e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082e6:	2200      	movs	r2, #0
 80082e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082ec:	f7f8 f96c 	bl	80005c8 <__aeabi_dmul>
 80082f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082f4:	e7c4      	b.n	8008280 <_dtoa_r+0x508>
 80082f6:	bf00      	nop
 80082f8:	0800ba28 	.word	0x0800ba28
 80082fc:	0800ba00 	.word	0x0800ba00
 8008300:	3ff00000 	.word	0x3ff00000
 8008304:	40240000 	.word	0x40240000
 8008308:	401c0000 	.word	0x401c0000
 800830c:	40140000 	.word	0x40140000
 8008310:	3fe00000 	.word	0x3fe00000
 8008314:	4631      	mov	r1, r6
 8008316:	4628      	mov	r0, r5
 8008318:	f7f8 f956 	bl	80005c8 <__aeabi_dmul>
 800831c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008320:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008322:	4656      	mov	r6, sl
 8008324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008328:	f7f8 fbfe 	bl	8000b28 <__aeabi_d2iz>
 800832c:	4605      	mov	r5, r0
 800832e:	f7f8 f8e1 	bl	80004f4 <__aeabi_i2d>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800833a:	f7f7 ff8d 	bl	8000258 <__aeabi_dsub>
 800833e:	3530      	adds	r5, #48	@ 0x30
 8008340:	f806 5b01 	strb.w	r5, [r6], #1
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	42a6      	cmp	r6, r4
 800834a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800834e:	f04f 0200 	mov.w	r2, #0
 8008352:	d124      	bne.n	800839e <_dtoa_r+0x626>
 8008354:	4baf      	ldr	r3, [pc, #700]	@ (8008614 <_dtoa_r+0x89c>)
 8008356:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800835a:	f7f7 ff7f 	bl	800025c <__adddf3>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008366:	f7f8 fbbf 	bl	8000ae8 <__aeabi_dcmpgt>
 800836a:	2800      	cmp	r0, #0
 800836c:	d163      	bne.n	8008436 <_dtoa_r+0x6be>
 800836e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008372:	49a8      	ldr	r1, [pc, #672]	@ (8008614 <_dtoa_r+0x89c>)
 8008374:	2000      	movs	r0, #0
 8008376:	f7f7 ff6f 	bl	8000258 <__aeabi_dsub>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008382:	f7f8 fb93 	bl	8000aac <__aeabi_dcmplt>
 8008386:	2800      	cmp	r0, #0
 8008388:	f43f af14 	beq.w	80081b4 <_dtoa_r+0x43c>
 800838c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800838e:	1e73      	subs	r3, r6, #1
 8008390:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008392:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008396:	2b30      	cmp	r3, #48	@ 0x30
 8008398:	d0f8      	beq.n	800838c <_dtoa_r+0x614>
 800839a:	4647      	mov	r7, r8
 800839c:	e03b      	b.n	8008416 <_dtoa_r+0x69e>
 800839e:	4b9e      	ldr	r3, [pc, #632]	@ (8008618 <_dtoa_r+0x8a0>)
 80083a0:	f7f8 f912 	bl	80005c8 <__aeabi_dmul>
 80083a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80083a8:	e7bc      	b.n	8008324 <_dtoa_r+0x5ac>
 80083aa:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80083ae:	4656      	mov	r6, sl
 80083b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083b4:	4620      	mov	r0, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	f7f8 fa30 	bl	800081c <__aeabi_ddiv>
 80083bc:	f7f8 fbb4 	bl	8000b28 <__aeabi_d2iz>
 80083c0:	4680      	mov	r8, r0
 80083c2:	f7f8 f897 	bl	80004f4 <__aeabi_i2d>
 80083c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ca:	f7f8 f8fd 	bl	80005c8 <__aeabi_dmul>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4620      	mov	r0, r4
 80083d4:	4629      	mov	r1, r5
 80083d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80083da:	f7f7 ff3d 	bl	8000258 <__aeabi_dsub>
 80083de:	f806 4b01 	strb.w	r4, [r6], #1
 80083e2:	9d08      	ldr	r5, [sp, #32]
 80083e4:	eba6 040a 	sub.w	r4, r6, sl
 80083e8:	42a5      	cmp	r5, r4
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	d133      	bne.n	8008458 <_dtoa_r+0x6e0>
 80083f0:	f7f7 ff34 	bl	800025c <__adddf3>
 80083f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083f8:	4604      	mov	r4, r0
 80083fa:	460d      	mov	r5, r1
 80083fc:	f7f8 fb74 	bl	8000ae8 <__aeabi_dcmpgt>
 8008400:	b9c0      	cbnz	r0, 8008434 <_dtoa_r+0x6bc>
 8008402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008406:	4620      	mov	r0, r4
 8008408:	4629      	mov	r1, r5
 800840a:	f7f8 fb45 	bl	8000a98 <__aeabi_dcmpeq>
 800840e:	b110      	cbz	r0, 8008416 <_dtoa_r+0x69e>
 8008410:	f018 0f01 	tst.w	r8, #1
 8008414:	d10e      	bne.n	8008434 <_dtoa_r+0x6bc>
 8008416:	9903      	ldr	r1, [sp, #12]
 8008418:	4648      	mov	r0, r9
 800841a:	f000 fbbd 	bl	8008b98 <_Bfree>
 800841e:	2300      	movs	r3, #0
 8008420:	7033      	strb	r3, [r6, #0]
 8008422:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008424:	3701      	adds	r7, #1
 8008426:	601f      	str	r7, [r3, #0]
 8008428:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 824b 	beq.w	80088c6 <_dtoa_r+0xb4e>
 8008430:	601e      	str	r6, [r3, #0]
 8008432:	e248      	b.n	80088c6 <_dtoa_r+0xb4e>
 8008434:	46b8      	mov	r8, r7
 8008436:	4633      	mov	r3, r6
 8008438:	461e      	mov	r6, r3
 800843a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800843e:	2a39      	cmp	r2, #57	@ 0x39
 8008440:	d106      	bne.n	8008450 <_dtoa_r+0x6d8>
 8008442:	459a      	cmp	sl, r3
 8008444:	d1f8      	bne.n	8008438 <_dtoa_r+0x6c0>
 8008446:	2230      	movs	r2, #48	@ 0x30
 8008448:	f108 0801 	add.w	r8, r8, #1
 800844c:	f88a 2000 	strb.w	r2, [sl]
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	3201      	adds	r2, #1
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	e7a0      	b.n	800839a <_dtoa_r+0x622>
 8008458:	4b6f      	ldr	r3, [pc, #444]	@ (8008618 <_dtoa_r+0x8a0>)
 800845a:	2200      	movs	r2, #0
 800845c:	f7f8 f8b4 	bl	80005c8 <__aeabi_dmul>
 8008460:	2200      	movs	r2, #0
 8008462:	2300      	movs	r3, #0
 8008464:	4604      	mov	r4, r0
 8008466:	460d      	mov	r5, r1
 8008468:	f7f8 fb16 	bl	8000a98 <__aeabi_dcmpeq>
 800846c:	2800      	cmp	r0, #0
 800846e:	d09f      	beq.n	80083b0 <_dtoa_r+0x638>
 8008470:	e7d1      	b.n	8008416 <_dtoa_r+0x69e>
 8008472:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008474:	2a00      	cmp	r2, #0
 8008476:	f000 80ea 	beq.w	800864e <_dtoa_r+0x8d6>
 800847a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800847c:	2a01      	cmp	r2, #1
 800847e:	f300 80cd 	bgt.w	800861c <_dtoa_r+0x8a4>
 8008482:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008484:	2a00      	cmp	r2, #0
 8008486:	f000 80c1 	beq.w	800860c <_dtoa_r+0x894>
 800848a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800848e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008490:	9e04      	ldr	r6, [sp, #16]
 8008492:	9a04      	ldr	r2, [sp, #16]
 8008494:	441a      	add	r2, r3
 8008496:	9204      	str	r2, [sp, #16]
 8008498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800849a:	2101      	movs	r1, #1
 800849c:	441a      	add	r2, r3
 800849e:	4648      	mov	r0, r9
 80084a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80084a2:	f000 fc77 	bl	8008d94 <__i2b>
 80084a6:	4605      	mov	r5, r0
 80084a8:	b166      	cbz	r6, 80084c4 <_dtoa_r+0x74c>
 80084aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dd09      	ble.n	80084c4 <_dtoa_r+0x74c>
 80084b0:	42b3      	cmp	r3, r6
 80084b2:	9a04      	ldr	r2, [sp, #16]
 80084b4:	bfa8      	it	ge
 80084b6:	4633      	movge	r3, r6
 80084b8:	1ad2      	subs	r2, r2, r3
 80084ba:	9204      	str	r2, [sp, #16]
 80084bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084be:	1af6      	subs	r6, r6, r3
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084c6:	b30b      	cbz	r3, 800850c <_dtoa_r+0x794>
 80084c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 80c6 	beq.w	800865c <_dtoa_r+0x8e4>
 80084d0:	2c00      	cmp	r4, #0
 80084d2:	f000 80c0 	beq.w	8008656 <_dtoa_r+0x8de>
 80084d6:	4629      	mov	r1, r5
 80084d8:	4622      	mov	r2, r4
 80084da:	4648      	mov	r0, r9
 80084dc:	f000 fd12 	bl	8008f04 <__pow5mult>
 80084e0:	9a03      	ldr	r2, [sp, #12]
 80084e2:	4601      	mov	r1, r0
 80084e4:	4605      	mov	r5, r0
 80084e6:	4648      	mov	r0, r9
 80084e8:	f000 fc6a 	bl	8008dc0 <__multiply>
 80084ec:	9903      	ldr	r1, [sp, #12]
 80084ee:	4680      	mov	r8, r0
 80084f0:	4648      	mov	r0, r9
 80084f2:	f000 fb51 	bl	8008b98 <_Bfree>
 80084f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084f8:	1b1b      	subs	r3, r3, r4
 80084fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80084fc:	f000 80b1 	beq.w	8008662 <_dtoa_r+0x8ea>
 8008500:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008502:	4641      	mov	r1, r8
 8008504:	4648      	mov	r0, r9
 8008506:	f000 fcfd 	bl	8008f04 <__pow5mult>
 800850a:	9003      	str	r0, [sp, #12]
 800850c:	2101      	movs	r1, #1
 800850e:	4648      	mov	r0, r9
 8008510:	f000 fc40 	bl	8008d94 <__i2b>
 8008514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008516:	4604      	mov	r4, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 81d8 	beq.w	80088ce <_dtoa_r+0xb56>
 800851e:	461a      	mov	r2, r3
 8008520:	4601      	mov	r1, r0
 8008522:	4648      	mov	r0, r9
 8008524:	f000 fcee 	bl	8008f04 <__pow5mult>
 8008528:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800852a:	2b01      	cmp	r3, #1
 800852c:	4604      	mov	r4, r0
 800852e:	f300 809f 	bgt.w	8008670 <_dtoa_r+0x8f8>
 8008532:	9b06      	ldr	r3, [sp, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f040 8097 	bne.w	8008668 <_dtoa_r+0x8f0>
 800853a:	9b07      	ldr	r3, [sp, #28]
 800853c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008540:	2b00      	cmp	r3, #0
 8008542:	f040 8093 	bne.w	800866c <_dtoa_r+0x8f4>
 8008546:	9b07      	ldr	r3, [sp, #28]
 8008548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800854c:	0d1b      	lsrs	r3, r3, #20
 800854e:	051b      	lsls	r3, r3, #20
 8008550:	b133      	cbz	r3, 8008560 <_dtoa_r+0x7e8>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	3301      	adds	r3, #1
 8008556:	9304      	str	r3, [sp, #16]
 8008558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800855a:	3301      	adds	r3, #1
 800855c:	9309      	str	r3, [sp, #36]	@ 0x24
 800855e:	2301      	movs	r3, #1
 8008560:	930a      	str	r3, [sp, #40]	@ 0x28
 8008562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 81b8 	beq.w	80088da <_dtoa_r+0xb62>
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008570:	6918      	ldr	r0, [r3, #16]
 8008572:	f000 fbc3 	bl	8008cfc <__hi0bits>
 8008576:	f1c0 0020 	rsb	r0, r0, #32
 800857a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857c:	4418      	add	r0, r3
 800857e:	f010 001f 	ands.w	r0, r0, #31
 8008582:	f000 8082 	beq.w	800868a <_dtoa_r+0x912>
 8008586:	f1c0 0320 	rsb	r3, r0, #32
 800858a:	2b04      	cmp	r3, #4
 800858c:	dd73      	ble.n	8008676 <_dtoa_r+0x8fe>
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	f1c0 001c 	rsb	r0, r0, #28
 8008594:	4403      	add	r3, r0
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800859a:	4403      	add	r3, r0
 800859c:	4406      	add	r6, r0
 800859e:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dd05      	ble.n	80085b2 <_dtoa_r+0x83a>
 80085a6:	9903      	ldr	r1, [sp, #12]
 80085a8:	461a      	mov	r2, r3
 80085aa:	4648      	mov	r0, r9
 80085ac:	f000 fd04 	bl	8008fb8 <__lshift>
 80085b0:	9003      	str	r0, [sp, #12]
 80085b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dd05      	ble.n	80085c4 <_dtoa_r+0x84c>
 80085b8:	4621      	mov	r1, r4
 80085ba:	461a      	mov	r2, r3
 80085bc:	4648      	mov	r0, r9
 80085be:	f000 fcfb 	bl	8008fb8 <__lshift>
 80085c2:	4604      	mov	r4, r0
 80085c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d061      	beq.n	800868e <_dtoa_r+0x916>
 80085ca:	9803      	ldr	r0, [sp, #12]
 80085cc:	4621      	mov	r1, r4
 80085ce:	f000 fd5f 	bl	8009090 <__mcmp>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	da5b      	bge.n	800868e <_dtoa_r+0x916>
 80085d6:	2300      	movs	r3, #0
 80085d8:	9903      	ldr	r1, [sp, #12]
 80085da:	220a      	movs	r2, #10
 80085dc:	4648      	mov	r0, r9
 80085de:	f000 fafd 	bl	8008bdc <__multadd>
 80085e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085e4:	9003      	str	r0, [sp, #12]
 80085e6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 8177 	beq.w	80088de <_dtoa_r+0xb66>
 80085f0:	4629      	mov	r1, r5
 80085f2:	2300      	movs	r3, #0
 80085f4:	220a      	movs	r2, #10
 80085f6:	4648      	mov	r0, r9
 80085f8:	f000 faf0 	bl	8008bdc <__multadd>
 80085fc:	f1bb 0f00 	cmp.w	fp, #0
 8008600:	4605      	mov	r5, r0
 8008602:	dc6f      	bgt.n	80086e4 <_dtoa_r+0x96c>
 8008604:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008606:	2b02      	cmp	r3, #2
 8008608:	dc49      	bgt.n	800869e <_dtoa_r+0x926>
 800860a:	e06b      	b.n	80086e4 <_dtoa_r+0x96c>
 800860c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800860e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008612:	e73c      	b.n	800848e <_dtoa_r+0x716>
 8008614:	3fe00000 	.word	0x3fe00000
 8008618:	40240000 	.word	0x40240000
 800861c:	9b08      	ldr	r3, [sp, #32]
 800861e:	1e5c      	subs	r4, r3, #1
 8008620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008622:	42a3      	cmp	r3, r4
 8008624:	db09      	blt.n	800863a <_dtoa_r+0x8c2>
 8008626:	1b1c      	subs	r4, r3, r4
 8008628:	9b08      	ldr	r3, [sp, #32]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f6bf af30 	bge.w	8008490 <_dtoa_r+0x718>
 8008630:	9b04      	ldr	r3, [sp, #16]
 8008632:	9a08      	ldr	r2, [sp, #32]
 8008634:	1a9e      	subs	r6, r3, r2
 8008636:	2300      	movs	r3, #0
 8008638:	e72b      	b.n	8008492 <_dtoa_r+0x71a>
 800863a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800863c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800863e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008640:	1ae3      	subs	r3, r4, r3
 8008642:	441a      	add	r2, r3
 8008644:	9e04      	ldr	r6, [sp, #16]
 8008646:	9b08      	ldr	r3, [sp, #32]
 8008648:	920e      	str	r2, [sp, #56]	@ 0x38
 800864a:	2400      	movs	r4, #0
 800864c:	e721      	b.n	8008492 <_dtoa_r+0x71a>
 800864e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008650:	9e04      	ldr	r6, [sp, #16]
 8008652:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008654:	e728      	b.n	80084a8 <_dtoa_r+0x730>
 8008656:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800865a:	e751      	b.n	8008500 <_dtoa_r+0x788>
 800865c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800865e:	9903      	ldr	r1, [sp, #12]
 8008660:	e750      	b.n	8008504 <_dtoa_r+0x78c>
 8008662:	f8cd 800c 	str.w	r8, [sp, #12]
 8008666:	e751      	b.n	800850c <_dtoa_r+0x794>
 8008668:	2300      	movs	r3, #0
 800866a:	e779      	b.n	8008560 <_dtoa_r+0x7e8>
 800866c:	9b06      	ldr	r3, [sp, #24]
 800866e:	e777      	b.n	8008560 <_dtoa_r+0x7e8>
 8008670:	2300      	movs	r3, #0
 8008672:	930a      	str	r3, [sp, #40]	@ 0x28
 8008674:	e779      	b.n	800856a <_dtoa_r+0x7f2>
 8008676:	d093      	beq.n	80085a0 <_dtoa_r+0x828>
 8008678:	9a04      	ldr	r2, [sp, #16]
 800867a:	331c      	adds	r3, #28
 800867c:	441a      	add	r2, r3
 800867e:	9204      	str	r2, [sp, #16]
 8008680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008682:	441a      	add	r2, r3
 8008684:	441e      	add	r6, r3
 8008686:	9209      	str	r2, [sp, #36]	@ 0x24
 8008688:	e78a      	b.n	80085a0 <_dtoa_r+0x828>
 800868a:	4603      	mov	r3, r0
 800868c:	e7f4      	b.n	8008678 <_dtoa_r+0x900>
 800868e:	9b08      	ldr	r3, [sp, #32]
 8008690:	2b00      	cmp	r3, #0
 8008692:	46b8      	mov	r8, r7
 8008694:	dc20      	bgt.n	80086d8 <_dtoa_r+0x960>
 8008696:	469b      	mov	fp, r3
 8008698:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800869a:	2b02      	cmp	r3, #2
 800869c:	dd1e      	ble.n	80086dc <_dtoa_r+0x964>
 800869e:	f1bb 0f00 	cmp.w	fp, #0
 80086a2:	f47f adb1 	bne.w	8008208 <_dtoa_r+0x490>
 80086a6:	4621      	mov	r1, r4
 80086a8:	465b      	mov	r3, fp
 80086aa:	2205      	movs	r2, #5
 80086ac:	4648      	mov	r0, r9
 80086ae:	f000 fa95 	bl	8008bdc <__multadd>
 80086b2:	4601      	mov	r1, r0
 80086b4:	4604      	mov	r4, r0
 80086b6:	9803      	ldr	r0, [sp, #12]
 80086b8:	f000 fcea 	bl	8009090 <__mcmp>
 80086bc:	2800      	cmp	r0, #0
 80086be:	f77f ada3 	ble.w	8008208 <_dtoa_r+0x490>
 80086c2:	4656      	mov	r6, sl
 80086c4:	2331      	movs	r3, #49	@ 0x31
 80086c6:	f806 3b01 	strb.w	r3, [r6], #1
 80086ca:	f108 0801 	add.w	r8, r8, #1
 80086ce:	e59f      	b.n	8008210 <_dtoa_r+0x498>
 80086d0:	9c08      	ldr	r4, [sp, #32]
 80086d2:	46b8      	mov	r8, r7
 80086d4:	4625      	mov	r5, r4
 80086d6:	e7f4      	b.n	80086c2 <_dtoa_r+0x94a>
 80086d8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80086dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 8101 	beq.w	80088e6 <_dtoa_r+0xb6e>
 80086e4:	2e00      	cmp	r6, #0
 80086e6:	dd05      	ble.n	80086f4 <_dtoa_r+0x97c>
 80086e8:	4629      	mov	r1, r5
 80086ea:	4632      	mov	r2, r6
 80086ec:	4648      	mov	r0, r9
 80086ee:	f000 fc63 	bl	8008fb8 <__lshift>
 80086f2:	4605      	mov	r5, r0
 80086f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d05c      	beq.n	80087b4 <_dtoa_r+0xa3c>
 80086fa:	6869      	ldr	r1, [r5, #4]
 80086fc:	4648      	mov	r0, r9
 80086fe:	f000 fa0b 	bl	8008b18 <_Balloc>
 8008702:	4606      	mov	r6, r0
 8008704:	b928      	cbnz	r0, 8008712 <_dtoa_r+0x99a>
 8008706:	4b82      	ldr	r3, [pc, #520]	@ (8008910 <_dtoa_r+0xb98>)
 8008708:	4602      	mov	r2, r0
 800870a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800870e:	f7ff bb47 	b.w	8007da0 <_dtoa_r+0x28>
 8008712:	692a      	ldr	r2, [r5, #16]
 8008714:	3202      	adds	r2, #2
 8008716:	0092      	lsls	r2, r2, #2
 8008718:	f105 010c 	add.w	r1, r5, #12
 800871c:	300c      	adds	r0, #12
 800871e:	f002 f903 	bl	800a928 <memcpy>
 8008722:	2201      	movs	r2, #1
 8008724:	4631      	mov	r1, r6
 8008726:	4648      	mov	r0, r9
 8008728:	f000 fc46 	bl	8008fb8 <__lshift>
 800872c:	f10a 0301 	add.w	r3, sl, #1
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	eb0a 030b 	add.w	r3, sl, fp
 8008736:	930a      	str	r3, [sp, #40]	@ 0x28
 8008738:	9b06      	ldr	r3, [sp, #24]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	462f      	mov	r7, r5
 8008740:	9309      	str	r3, [sp, #36]	@ 0x24
 8008742:	4605      	mov	r5, r0
 8008744:	9b04      	ldr	r3, [sp, #16]
 8008746:	9803      	ldr	r0, [sp, #12]
 8008748:	4621      	mov	r1, r4
 800874a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800874e:	f7ff fa89 	bl	8007c64 <quorem>
 8008752:	4603      	mov	r3, r0
 8008754:	3330      	adds	r3, #48	@ 0x30
 8008756:	9006      	str	r0, [sp, #24]
 8008758:	4639      	mov	r1, r7
 800875a:	9803      	ldr	r0, [sp, #12]
 800875c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800875e:	f000 fc97 	bl	8009090 <__mcmp>
 8008762:	462a      	mov	r2, r5
 8008764:	9008      	str	r0, [sp, #32]
 8008766:	4621      	mov	r1, r4
 8008768:	4648      	mov	r0, r9
 800876a:	f000 fcad 	bl	80090c8 <__mdiff>
 800876e:	68c2      	ldr	r2, [r0, #12]
 8008770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008772:	4606      	mov	r6, r0
 8008774:	bb02      	cbnz	r2, 80087b8 <_dtoa_r+0xa40>
 8008776:	4601      	mov	r1, r0
 8008778:	9803      	ldr	r0, [sp, #12]
 800877a:	f000 fc89 	bl	8009090 <__mcmp>
 800877e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008780:	4602      	mov	r2, r0
 8008782:	4631      	mov	r1, r6
 8008784:	4648      	mov	r0, r9
 8008786:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800878a:	f000 fa05 	bl	8008b98 <_Bfree>
 800878e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008790:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008792:	9e04      	ldr	r6, [sp, #16]
 8008794:	ea42 0103 	orr.w	r1, r2, r3
 8008798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879a:	4319      	orrs	r1, r3
 800879c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800879e:	d10d      	bne.n	80087bc <_dtoa_r+0xa44>
 80087a0:	2b39      	cmp	r3, #57	@ 0x39
 80087a2:	d027      	beq.n	80087f4 <_dtoa_r+0xa7c>
 80087a4:	9a08      	ldr	r2, [sp, #32]
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	dd01      	ble.n	80087ae <_dtoa_r+0xa36>
 80087aa:	9b06      	ldr	r3, [sp, #24]
 80087ac:	3331      	adds	r3, #49	@ 0x31
 80087ae:	f88b 3000 	strb.w	r3, [fp]
 80087b2:	e52e      	b.n	8008212 <_dtoa_r+0x49a>
 80087b4:	4628      	mov	r0, r5
 80087b6:	e7b9      	b.n	800872c <_dtoa_r+0x9b4>
 80087b8:	2201      	movs	r2, #1
 80087ba:	e7e2      	b.n	8008782 <_dtoa_r+0xa0a>
 80087bc:	9908      	ldr	r1, [sp, #32]
 80087be:	2900      	cmp	r1, #0
 80087c0:	db04      	blt.n	80087cc <_dtoa_r+0xa54>
 80087c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80087c4:	4301      	orrs	r1, r0
 80087c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087c8:	4301      	orrs	r1, r0
 80087ca:	d120      	bne.n	800880e <_dtoa_r+0xa96>
 80087cc:	2a00      	cmp	r2, #0
 80087ce:	ddee      	ble.n	80087ae <_dtoa_r+0xa36>
 80087d0:	9903      	ldr	r1, [sp, #12]
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	2201      	movs	r2, #1
 80087d6:	4648      	mov	r0, r9
 80087d8:	f000 fbee 	bl	8008fb8 <__lshift>
 80087dc:	4621      	mov	r1, r4
 80087de:	9003      	str	r0, [sp, #12]
 80087e0:	f000 fc56 	bl	8009090 <__mcmp>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	9b04      	ldr	r3, [sp, #16]
 80087e8:	dc02      	bgt.n	80087f0 <_dtoa_r+0xa78>
 80087ea:	d1e0      	bne.n	80087ae <_dtoa_r+0xa36>
 80087ec:	07da      	lsls	r2, r3, #31
 80087ee:	d5de      	bpl.n	80087ae <_dtoa_r+0xa36>
 80087f0:	2b39      	cmp	r3, #57	@ 0x39
 80087f2:	d1da      	bne.n	80087aa <_dtoa_r+0xa32>
 80087f4:	2339      	movs	r3, #57	@ 0x39
 80087f6:	f88b 3000 	strb.w	r3, [fp]
 80087fa:	4633      	mov	r3, r6
 80087fc:	461e      	mov	r6, r3
 80087fe:	3b01      	subs	r3, #1
 8008800:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008804:	2a39      	cmp	r2, #57	@ 0x39
 8008806:	d04e      	beq.n	80088a6 <_dtoa_r+0xb2e>
 8008808:	3201      	adds	r2, #1
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	e501      	b.n	8008212 <_dtoa_r+0x49a>
 800880e:	2a00      	cmp	r2, #0
 8008810:	dd03      	ble.n	800881a <_dtoa_r+0xaa2>
 8008812:	2b39      	cmp	r3, #57	@ 0x39
 8008814:	d0ee      	beq.n	80087f4 <_dtoa_r+0xa7c>
 8008816:	3301      	adds	r3, #1
 8008818:	e7c9      	b.n	80087ae <_dtoa_r+0xa36>
 800881a:	9a04      	ldr	r2, [sp, #16]
 800881c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800881e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008822:	428a      	cmp	r2, r1
 8008824:	d028      	beq.n	8008878 <_dtoa_r+0xb00>
 8008826:	9903      	ldr	r1, [sp, #12]
 8008828:	2300      	movs	r3, #0
 800882a:	220a      	movs	r2, #10
 800882c:	4648      	mov	r0, r9
 800882e:	f000 f9d5 	bl	8008bdc <__multadd>
 8008832:	42af      	cmp	r7, r5
 8008834:	9003      	str	r0, [sp, #12]
 8008836:	f04f 0300 	mov.w	r3, #0
 800883a:	f04f 020a 	mov.w	r2, #10
 800883e:	4639      	mov	r1, r7
 8008840:	4648      	mov	r0, r9
 8008842:	d107      	bne.n	8008854 <_dtoa_r+0xadc>
 8008844:	f000 f9ca 	bl	8008bdc <__multadd>
 8008848:	4607      	mov	r7, r0
 800884a:	4605      	mov	r5, r0
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	3301      	adds	r3, #1
 8008850:	9304      	str	r3, [sp, #16]
 8008852:	e777      	b.n	8008744 <_dtoa_r+0x9cc>
 8008854:	f000 f9c2 	bl	8008bdc <__multadd>
 8008858:	4629      	mov	r1, r5
 800885a:	4607      	mov	r7, r0
 800885c:	2300      	movs	r3, #0
 800885e:	220a      	movs	r2, #10
 8008860:	4648      	mov	r0, r9
 8008862:	f000 f9bb 	bl	8008bdc <__multadd>
 8008866:	4605      	mov	r5, r0
 8008868:	e7f0      	b.n	800884c <_dtoa_r+0xad4>
 800886a:	f1bb 0f00 	cmp.w	fp, #0
 800886e:	bfcc      	ite	gt
 8008870:	465e      	movgt	r6, fp
 8008872:	2601      	movle	r6, #1
 8008874:	4456      	add	r6, sl
 8008876:	2700      	movs	r7, #0
 8008878:	9903      	ldr	r1, [sp, #12]
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	2201      	movs	r2, #1
 800887e:	4648      	mov	r0, r9
 8008880:	f000 fb9a 	bl	8008fb8 <__lshift>
 8008884:	4621      	mov	r1, r4
 8008886:	9003      	str	r0, [sp, #12]
 8008888:	f000 fc02 	bl	8009090 <__mcmp>
 800888c:	2800      	cmp	r0, #0
 800888e:	dcb4      	bgt.n	80087fa <_dtoa_r+0xa82>
 8008890:	d102      	bne.n	8008898 <_dtoa_r+0xb20>
 8008892:	9b04      	ldr	r3, [sp, #16]
 8008894:	07db      	lsls	r3, r3, #31
 8008896:	d4b0      	bmi.n	80087fa <_dtoa_r+0xa82>
 8008898:	4633      	mov	r3, r6
 800889a:	461e      	mov	r6, r3
 800889c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088a0:	2a30      	cmp	r2, #48	@ 0x30
 80088a2:	d0fa      	beq.n	800889a <_dtoa_r+0xb22>
 80088a4:	e4b5      	b.n	8008212 <_dtoa_r+0x49a>
 80088a6:	459a      	cmp	sl, r3
 80088a8:	d1a8      	bne.n	80087fc <_dtoa_r+0xa84>
 80088aa:	2331      	movs	r3, #49	@ 0x31
 80088ac:	f108 0801 	add.w	r8, r8, #1
 80088b0:	f88a 3000 	strb.w	r3, [sl]
 80088b4:	e4ad      	b.n	8008212 <_dtoa_r+0x49a>
 80088b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008914 <_dtoa_r+0xb9c>
 80088bc:	b11b      	cbz	r3, 80088c6 <_dtoa_r+0xb4e>
 80088be:	f10a 0308 	add.w	r3, sl, #8
 80088c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	4650      	mov	r0, sl
 80088c8:	b017      	add	sp, #92	@ 0x5c
 80088ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	f77f ae2e 	ble.w	8008532 <_dtoa_r+0x7ba>
 80088d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80088da:	2001      	movs	r0, #1
 80088dc:	e64d      	b.n	800857a <_dtoa_r+0x802>
 80088de:	f1bb 0f00 	cmp.w	fp, #0
 80088e2:	f77f aed9 	ble.w	8008698 <_dtoa_r+0x920>
 80088e6:	4656      	mov	r6, sl
 80088e8:	9803      	ldr	r0, [sp, #12]
 80088ea:	4621      	mov	r1, r4
 80088ec:	f7ff f9ba 	bl	8007c64 <quorem>
 80088f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80088f4:	f806 3b01 	strb.w	r3, [r6], #1
 80088f8:	eba6 020a 	sub.w	r2, r6, sl
 80088fc:	4593      	cmp	fp, r2
 80088fe:	ddb4      	ble.n	800886a <_dtoa_r+0xaf2>
 8008900:	9903      	ldr	r1, [sp, #12]
 8008902:	2300      	movs	r3, #0
 8008904:	220a      	movs	r2, #10
 8008906:	4648      	mov	r0, r9
 8008908:	f000 f968 	bl	8008bdc <__multadd>
 800890c:	9003      	str	r0, [sp, #12]
 800890e:	e7eb      	b.n	80088e8 <_dtoa_r+0xb70>
 8008910:	0800b8ce 	.word	0x0800b8ce
 8008914:	0800b852 	.word	0x0800b852

08008918 <_free_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4605      	mov	r5, r0
 800891c:	2900      	cmp	r1, #0
 800891e:	d041      	beq.n	80089a4 <_free_r+0x8c>
 8008920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008924:	1f0c      	subs	r4, r1, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfb8      	it	lt
 800892a:	18e4      	addlt	r4, r4, r3
 800892c:	f000 f8e8 	bl	8008b00 <__malloc_lock>
 8008930:	4a1d      	ldr	r2, [pc, #116]	@ (80089a8 <_free_r+0x90>)
 8008932:	6813      	ldr	r3, [r2, #0]
 8008934:	b933      	cbnz	r3, 8008944 <_free_r+0x2c>
 8008936:	6063      	str	r3, [r4, #4]
 8008938:	6014      	str	r4, [r2, #0]
 800893a:	4628      	mov	r0, r5
 800893c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008940:	f000 b8e4 	b.w	8008b0c <__malloc_unlock>
 8008944:	42a3      	cmp	r3, r4
 8008946:	d908      	bls.n	800895a <_free_r+0x42>
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	1821      	adds	r1, r4, r0
 800894c:	428b      	cmp	r3, r1
 800894e:	bf01      	itttt	eq
 8008950:	6819      	ldreq	r1, [r3, #0]
 8008952:	685b      	ldreq	r3, [r3, #4]
 8008954:	1809      	addeq	r1, r1, r0
 8008956:	6021      	streq	r1, [r4, #0]
 8008958:	e7ed      	b.n	8008936 <_free_r+0x1e>
 800895a:	461a      	mov	r2, r3
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	b10b      	cbz	r3, 8008964 <_free_r+0x4c>
 8008960:	42a3      	cmp	r3, r4
 8008962:	d9fa      	bls.n	800895a <_free_r+0x42>
 8008964:	6811      	ldr	r1, [r2, #0]
 8008966:	1850      	adds	r0, r2, r1
 8008968:	42a0      	cmp	r0, r4
 800896a:	d10b      	bne.n	8008984 <_free_r+0x6c>
 800896c:	6820      	ldr	r0, [r4, #0]
 800896e:	4401      	add	r1, r0
 8008970:	1850      	adds	r0, r2, r1
 8008972:	4283      	cmp	r3, r0
 8008974:	6011      	str	r1, [r2, #0]
 8008976:	d1e0      	bne.n	800893a <_free_r+0x22>
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	6053      	str	r3, [r2, #4]
 800897e:	4408      	add	r0, r1
 8008980:	6010      	str	r0, [r2, #0]
 8008982:	e7da      	b.n	800893a <_free_r+0x22>
 8008984:	d902      	bls.n	800898c <_free_r+0x74>
 8008986:	230c      	movs	r3, #12
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	e7d6      	b.n	800893a <_free_r+0x22>
 800898c:	6820      	ldr	r0, [r4, #0]
 800898e:	1821      	adds	r1, r4, r0
 8008990:	428b      	cmp	r3, r1
 8008992:	bf04      	itt	eq
 8008994:	6819      	ldreq	r1, [r3, #0]
 8008996:	685b      	ldreq	r3, [r3, #4]
 8008998:	6063      	str	r3, [r4, #4]
 800899a:	bf04      	itt	eq
 800899c:	1809      	addeq	r1, r1, r0
 800899e:	6021      	streq	r1, [r4, #0]
 80089a0:	6054      	str	r4, [r2, #4]
 80089a2:	e7ca      	b.n	800893a <_free_r+0x22>
 80089a4:	bd38      	pop	{r3, r4, r5, pc}
 80089a6:	bf00      	nop
 80089a8:	200006c4 	.word	0x200006c4

080089ac <malloc>:
 80089ac:	4b02      	ldr	r3, [pc, #8]	@ (80089b8 <malloc+0xc>)
 80089ae:	4601      	mov	r1, r0
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	f000 b825 	b.w	8008a00 <_malloc_r>
 80089b6:	bf00      	nop
 80089b8:	20000024 	.word	0x20000024

080089bc <sbrk_aligned>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4e0f      	ldr	r6, [pc, #60]	@ (80089fc <sbrk_aligned+0x40>)
 80089c0:	460c      	mov	r4, r1
 80089c2:	6831      	ldr	r1, [r6, #0]
 80089c4:	4605      	mov	r5, r0
 80089c6:	b911      	cbnz	r1, 80089ce <sbrk_aligned+0x12>
 80089c8:	f001 ff9e 	bl	800a908 <_sbrk_r>
 80089cc:	6030      	str	r0, [r6, #0]
 80089ce:	4621      	mov	r1, r4
 80089d0:	4628      	mov	r0, r5
 80089d2:	f001 ff99 	bl	800a908 <_sbrk_r>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	d103      	bne.n	80089e2 <sbrk_aligned+0x26>
 80089da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80089de:	4620      	mov	r0, r4
 80089e0:	bd70      	pop	{r4, r5, r6, pc}
 80089e2:	1cc4      	adds	r4, r0, #3
 80089e4:	f024 0403 	bic.w	r4, r4, #3
 80089e8:	42a0      	cmp	r0, r4
 80089ea:	d0f8      	beq.n	80089de <sbrk_aligned+0x22>
 80089ec:	1a21      	subs	r1, r4, r0
 80089ee:	4628      	mov	r0, r5
 80089f0:	f001 ff8a 	bl	800a908 <_sbrk_r>
 80089f4:	3001      	adds	r0, #1
 80089f6:	d1f2      	bne.n	80089de <sbrk_aligned+0x22>
 80089f8:	e7ef      	b.n	80089da <sbrk_aligned+0x1e>
 80089fa:	bf00      	nop
 80089fc:	200006c0 	.word	0x200006c0

08008a00 <_malloc_r>:
 8008a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	1ccd      	adds	r5, r1, #3
 8008a06:	f025 0503 	bic.w	r5, r5, #3
 8008a0a:	3508      	adds	r5, #8
 8008a0c:	2d0c      	cmp	r5, #12
 8008a0e:	bf38      	it	cc
 8008a10:	250c      	movcc	r5, #12
 8008a12:	2d00      	cmp	r5, #0
 8008a14:	4606      	mov	r6, r0
 8008a16:	db01      	blt.n	8008a1c <_malloc_r+0x1c>
 8008a18:	42a9      	cmp	r1, r5
 8008a1a:	d904      	bls.n	8008a26 <_malloc_r+0x26>
 8008a1c:	230c      	movs	r3, #12
 8008a1e:	6033      	str	r3, [r6, #0]
 8008a20:	2000      	movs	r0, #0
 8008a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008afc <_malloc_r+0xfc>
 8008a2a:	f000 f869 	bl	8008b00 <__malloc_lock>
 8008a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a32:	461c      	mov	r4, r3
 8008a34:	bb44      	cbnz	r4, 8008a88 <_malloc_r+0x88>
 8008a36:	4629      	mov	r1, r5
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7ff ffbf 	bl	80089bc <sbrk_aligned>
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	4604      	mov	r4, r0
 8008a42:	d158      	bne.n	8008af6 <_malloc_r+0xf6>
 8008a44:	f8d8 4000 	ldr.w	r4, [r8]
 8008a48:	4627      	mov	r7, r4
 8008a4a:	2f00      	cmp	r7, #0
 8008a4c:	d143      	bne.n	8008ad6 <_malloc_r+0xd6>
 8008a4e:	2c00      	cmp	r4, #0
 8008a50:	d04b      	beq.n	8008aea <_malloc_r+0xea>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	4639      	mov	r1, r7
 8008a56:	4630      	mov	r0, r6
 8008a58:	eb04 0903 	add.w	r9, r4, r3
 8008a5c:	f001 ff54 	bl	800a908 <_sbrk_r>
 8008a60:	4581      	cmp	r9, r0
 8008a62:	d142      	bne.n	8008aea <_malloc_r+0xea>
 8008a64:	6821      	ldr	r1, [r4, #0]
 8008a66:	1a6d      	subs	r5, r5, r1
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ffa6 	bl	80089bc <sbrk_aligned>
 8008a70:	3001      	adds	r0, #1
 8008a72:	d03a      	beq.n	8008aea <_malloc_r+0xea>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	442b      	add	r3, r5
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	bb62      	cbnz	r2, 8008adc <_malloc_r+0xdc>
 8008a82:	f8c8 7000 	str.w	r7, [r8]
 8008a86:	e00f      	b.n	8008aa8 <_malloc_r+0xa8>
 8008a88:	6822      	ldr	r2, [r4, #0]
 8008a8a:	1b52      	subs	r2, r2, r5
 8008a8c:	d420      	bmi.n	8008ad0 <_malloc_r+0xd0>
 8008a8e:	2a0b      	cmp	r2, #11
 8008a90:	d917      	bls.n	8008ac2 <_malloc_r+0xc2>
 8008a92:	1961      	adds	r1, r4, r5
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	6025      	str	r5, [r4, #0]
 8008a98:	bf18      	it	ne
 8008a9a:	6059      	strne	r1, [r3, #4]
 8008a9c:	6863      	ldr	r3, [r4, #4]
 8008a9e:	bf08      	it	eq
 8008aa0:	f8c8 1000 	streq.w	r1, [r8]
 8008aa4:	5162      	str	r2, [r4, r5]
 8008aa6:	604b      	str	r3, [r1, #4]
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 f82f 	bl	8008b0c <__malloc_unlock>
 8008aae:	f104 000b 	add.w	r0, r4, #11
 8008ab2:	1d23      	adds	r3, r4, #4
 8008ab4:	f020 0007 	bic.w	r0, r0, #7
 8008ab8:	1ac2      	subs	r2, r0, r3
 8008aba:	bf1c      	itt	ne
 8008abc:	1a1b      	subne	r3, r3, r0
 8008abe:	50a3      	strne	r3, [r4, r2]
 8008ac0:	e7af      	b.n	8008a22 <_malloc_r+0x22>
 8008ac2:	6862      	ldr	r2, [r4, #4]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	bf0c      	ite	eq
 8008ac8:	f8c8 2000 	streq.w	r2, [r8]
 8008acc:	605a      	strne	r2, [r3, #4]
 8008ace:	e7eb      	b.n	8008aa8 <_malloc_r+0xa8>
 8008ad0:	4623      	mov	r3, r4
 8008ad2:	6864      	ldr	r4, [r4, #4]
 8008ad4:	e7ae      	b.n	8008a34 <_malloc_r+0x34>
 8008ad6:	463c      	mov	r4, r7
 8008ad8:	687f      	ldr	r7, [r7, #4]
 8008ada:	e7b6      	b.n	8008a4a <_malloc_r+0x4a>
 8008adc:	461a      	mov	r2, r3
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	d1fb      	bne.n	8008adc <_malloc_r+0xdc>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	6053      	str	r3, [r2, #4]
 8008ae8:	e7de      	b.n	8008aa8 <_malloc_r+0xa8>
 8008aea:	230c      	movs	r3, #12
 8008aec:	6033      	str	r3, [r6, #0]
 8008aee:	4630      	mov	r0, r6
 8008af0:	f000 f80c 	bl	8008b0c <__malloc_unlock>
 8008af4:	e794      	b.n	8008a20 <_malloc_r+0x20>
 8008af6:	6005      	str	r5, [r0, #0]
 8008af8:	e7d6      	b.n	8008aa8 <_malloc_r+0xa8>
 8008afa:	bf00      	nop
 8008afc:	200006c4 	.word	0x200006c4

08008b00 <__malloc_lock>:
 8008b00:	4801      	ldr	r0, [pc, #4]	@ (8008b08 <__malloc_lock+0x8>)
 8008b02:	f7ff b8a8 	b.w	8007c56 <__retarget_lock_acquire_recursive>
 8008b06:	bf00      	nop
 8008b08:	200006bc 	.word	0x200006bc

08008b0c <__malloc_unlock>:
 8008b0c:	4801      	ldr	r0, [pc, #4]	@ (8008b14 <__malloc_unlock+0x8>)
 8008b0e:	f7ff b8a3 	b.w	8007c58 <__retarget_lock_release_recursive>
 8008b12:	bf00      	nop
 8008b14:	200006bc 	.word	0x200006bc

08008b18 <_Balloc>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	69c6      	ldr	r6, [r0, #28]
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	460d      	mov	r5, r1
 8008b20:	b976      	cbnz	r6, 8008b40 <_Balloc+0x28>
 8008b22:	2010      	movs	r0, #16
 8008b24:	f7ff ff42 	bl	80089ac <malloc>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	61e0      	str	r0, [r4, #28]
 8008b2c:	b920      	cbnz	r0, 8008b38 <_Balloc+0x20>
 8008b2e:	4b18      	ldr	r3, [pc, #96]	@ (8008b90 <_Balloc+0x78>)
 8008b30:	4818      	ldr	r0, [pc, #96]	@ (8008b94 <_Balloc+0x7c>)
 8008b32:	216b      	movs	r1, #107	@ 0x6b
 8008b34:	f001 ff0c 	bl	800a950 <__assert_func>
 8008b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b3c:	6006      	str	r6, [r0, #0]
 8008b3e:	60c6      	str	r6, [r0, #12]
 8008b40:	69e6      	ldr	r6, [r4, #28]
 8008b42:	68f3      	ldr	r3, [r6, #12]
 8008b44:	b183      	cbz	r3, 8008b68 <_Balloc+0x50>
 8008b46:	69e3      	ldr	r3, [r4, #28]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b4e:	b9b8      	cbnz	r0, 8008b80 <_Balloc+0x68>
 8008b50:	2101      	movs	r1, #1
 8008b52:	fa01 f605 	lsl.w	r6, r1, r5
 8008b56:	1d72      	adds	r2, r6, #5
 8008b58:	0092      	lsls	r2, r2, #2
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f001 ff16 	bl	800a98c <_calloc_r>
 8008b60:	b160      	cbz	r0, 8008b7c <_Balloc+0x64>
 8008b62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b66:	e00e      	b.n	8008b86 <_Balloc+0x6e>
 8008b68:	2221      	movs	r2, #33	@ 0x21
 8008b6a:	2104      	movs	r1, #4
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f001 ff0d 	bl	800a98c <_calloc_r>
 8008b72:	69e3      	ldr	r3, [r4, #28]
 8008b74:	60f0      	str	r0, [r6, #12]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e4      	bne.n	8008b46 <_Balloc+0x2e>
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
 8008b80:	6802      	ldr	r2, [r0, #0]
 8008b82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b86:	2300      	movs	r3, #0
 8008b88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b8c:	e7f7      	b.n	8008b7e <_Balloc+0x66>
 8008b8e:	bf00      	nop
 8008b90:	0800b85f 	.word	0x0800b85f
 8008b94:	0800b8df 	.word	0x0800b8df

08008b98 <_Bfree>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	69c6      	ldr	r6, [r0, #28]
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	b976      	cbnz	r6, 8008bc0 <_Bfree+0x28>
 8008ba2:	2010      	movs	r0, #16
 8008ba4:	f7ff ff02 	bl	80089ac <malloc>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	61e8      	str	r0, [r5, #28]
 8008bac:	b920      	cbnz	r0, 8008bb8 <_Bfree+0x20>
 8008bae:	4b09      	ldr	r3, [pc, #36]	@ (8008bd4 <_Bfree+0x3c>)
 8008bb0:	4809      	ldr	r0, [pc, #36]	@ (8008bd8 <_Bfree+0x40>)
 8008bb2:	218f      	movs	r1, #143	@ 0x8f
 8008bb4:	f001 fecc 	bl	800a950 <__assert_func>
 8008bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bbc:	6006      	str	r6, [r0, #0]
 8008bbe:	60c6      	str	r6, [r0, #12]
 8008bc0:	b13c      	cbz	r4, 8008bd2 <_Bfree+0x3a>
 8008bc2:	69eb      	ldr	r3, [r5, #28]
 8008bc4:	6862      	ldr	r2, [r4, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bcc:	6021      	str	r1, [r4, #0]
 8008bce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	0800b85f 	.word	0x0800b85f
 8008bd8:	0800b8df 	.word	0x0800b8df

08008bdc <__multadd>:
 8008bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be0:	690d      	ldr	r5, [r1, #16]
 8008be2:	4607      	mov	r7, r0
 8008be4:	460c      	mov	r4, r1
 8008be6:	461e      	mov	r6, r3
 8008be8:	f101 0c14 	add.w	ip, r1, #20
 8008bec:	2000      	movs	r0, #0
 8008bee:	f8dc 3000 	ldr.w	r3, [ip]
 8008bf2:	b299      	uxth	r1, r3
 8008bf4:	fb02 6101 	mla	r1, r2, r1, r6
 8008bf8:	0c1e      	lsrs	r6, r3, #16
 8008bfa:	0c0b      	lsrs	r3, r1, #16
 8008bfc:	fb02 3306 	mla	r3, r2, r6, r3
 8008c00:	b289      	uxth	r1, r1
 8008c02:	3001      	adds	r0, #1
 8008c04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c08:	4285      	cmp	r5, r0
 8008c0a:	f84c 1b04 	str.w	r1, [ip], #4
 8008c0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c12:	dcec      	bgt.n	8008bee <__multadd+0x12>
 8008c14:	b30e      	cbz	r6, 8008c5a <__multadd+0x7e>
 8008c16:	68a3      	ldr	r3, [r4, #8]
 8008c18:	42ab      	cmp	r3, r5
 8008c1a:	dc19      	bgt.n	8008c50 <__multadd+0x74>
 8008c1c:	6861      	ldr	r1, [r4, #4]
 8008c1e:	4638      	mov	r0, r7
 8008c20:	3101      	adds	r1, #1
 8008c22:	f7ff ff79 	bl	8008b18 <_Balloc>
 8008c26:	4680      	mov	r8, r0
 8008c28:	b928      	cbnz	r0, 8008c36 <__multadd+0x5a>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c60 <__multadd+0x84>)
 8008c2e:	480d      	ldr	r0, [pc, #52]	@ (8008c64 <__multadd+0x88>)
 8008c30:	21ba      	movs	r1, #186	@ 0xba
 8008c32:	f001 fe8d 	bl	800a950 <__assert_func>
 8008c36:	6922      	ldr	r2, [r4, #16]
 8008c38:	3202      	adds	r2, #2
 8008c3a:	f104 010c 	add.w	r1, r4, #12
 8008c3e:	0092      	lsls	r2, r2, #2
 8008c40:	300c      	adds	r0, #12
 8008c42:	f001 fe71 	bl	800a928 <memcpy>
 8008c46:	4621      	mov	r1, r4
 8008c48:	4638      	mov	r0, r7
 8008c4a:	f7ff ffa5 	bl	8008b98 <_Bfree>
 8008c4e:	4644      	mov	r4, r8
 8008c50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c54:	3501      	adds	r5, #1
 8008c56:	615e      	str	r6, [r3, #20]
 8008c58:	6125      	str	r5, [r4, #16]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c60:	0800b8ce 	.word	0x0800b8ce
 8008c64:	0800b8df 	.word	0x0800b8df

08008c68 <__s2b>:
 8008c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	4615      	mov	r5, r2
 8008c70:	461f      	mov	r7, r3
 8008c72:	2209      	movs	r2, #9
 8008c74:	3308      	adds	r3, #8
 8008c76:	4606      	mov	r6, r0
 8008c78:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	2201      	movs	r2, #1
 8008c80:	429a      	cmp	r2, r3
 8008c82:	db09      	blt.n	8008c98 <__s2b+0x30>
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff ff47 	bl	8008b18 <_Balloc>
 8008c8a:	b940      	cbnz	r0, 8008c9e <__s2b+0x36>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	4b19      	ldr	r3, [pc, #100]	@ (8008cf4 <__s2b+0x8c>)
 8008c90:	4819      	ldr	r0, [pc, #100]	@ (8008cf8 <__s2b+0x90>)
 8008c92:	21d3      	movs	r1, #211	@ 0xd3
 8008c94:	f001 fe5c 	bl	800a950 <__assert_func>
 8008c98:	0052      	lsls	r2, r2, #1
 8008c9a:	3101      	adds	r1, #1
 8008c9c:	e7f0      	b.n	8008c80 <__s2b+0x18>
 8008c9e:	9b08      	ldr	r3, [sp, #32]
 8008ca0:	6143      	str	r3, [r0, #20]
 8008ca2:	2d09      	cmp	r5, #9
 8008ca4:	f04f 0301 	mov.w	r3, #1
 8008ca8:	6103      	str	r3, [r0, #16]
 8008caa:	dd16      	ble.n	8008cda <__s2b+0x72>
 8008cac:	f104 0909 	add.w	r9, r4, #9
 8008cb0:	46c8      	mov	r8, r9
 8008cb2:	442c      	add	r4, r5
 8008cb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008cb8:	4601      	mov	r1, r0
 8008cba:	3b30      	subs	r3, #48	@ 0x30
 8008cbc:	220a      	movs	r2, #10
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7ff ff8c 	bl	8008bdc <__multadd>
 8008cc4:	45a0      	cmp	r8, r4
 8008cc6:	d1f5      	bne.n	8008cb4 <__s2b+0x4c>
 8008cc8:	f1a5 0408 	sub.w	r4, r5, #8
 8008ccc:	444c      	add	r4, r9
 8008cce:	1b2d      	subs	r5, r5, r4
 8008cd0:	1963      	adds	r3, r4, r5
 8008cd2:	42bb      	cmp	r3, r7
 8008cd4:	db04      	blt.n	8008ce0 <__s2b+0x78>
 8008cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cda:	340a      	adds	r4, #10
 8008cdc:	2509      	movs	r5, #9
 8008cde:	e7f6      	b.n	8008cce <__s2b+0x66>
 8008ce0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ce4:	4601      	mov	r1, r0
 8008ce6:	3b30      	subs	r3, #48	@ 0x30
 8008ce8:	220a      	movs	r2, #10
 8008cea:	4630      	mov	r0, r6
 8008cec:	f7ff ff76 	bl	8008bdc <__multadd>
 8008cf0:	e7ee      	b.n	8008cd0 <__s2b+0x68>
 8008cf2:	bf00      	nop
 8008cf4:	0800b8ce 	.word	0x0800b8ce
 8008cf8:	0800b8df 	.word	0x0800b8df

08008cfc <__hi0bits>:
 8008cfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d00:	4603      	mov	r3, r0
 8008d02:	bf36      	itet	cc
 8008d04:	0403      	lslcc	r3, r0, #16
 8008d06:	2000      	movcs	r0, #0
 8008d08:	2010      	movcc	r0, #16
 8008d0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d0e:	bf3c      	itt	cc
 8008d10:	021b      	lslcc	r3, r3, #8
 8008d12:	3008      	addcc	r0, #8
 8008d14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d18:	bf3c      	itt	cc
 8008d1a:	011b      	lslcc	r3, r3, #4
 8008d1c:	3004      	addcc	r0, #4
 8008d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d22:	bf3c      	itt	cc
 8008d24:	009b      	lslcc	r3, r3, #2
 8008d26:	3002      	addcc	r0, #2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	db05      	blt.n	8008d38 <__hi0bits+0x3c>
 8008d2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d30:	f100 0001 	add.w	r0, r0, #1
 8008d34:	bf08      	it	eq
 8008d36:	2020      	moveq	r0, #32
 8008d38:	4770      	bx	lr

08008d3a <__lo0bits>:
 8008d3a:	6803      	ldr	r3, [r0, #0]
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	f013 0007 	ands.w	r0, r3, #7
 8008d42:	d00b      	beq.n	8008d5c <__lo0bits+0x22>
 8008d44:	07d9      	lsls	r1, r3, #31
 8008d46:	d421      	bmi.n	8008d8c <__lo0bits+0x52>
 8008d48:	0798      	lsls	r0, r3, #30
 8008d4a:	bf49      	itett	mi
 8008d4c:	085b      	lsrmi	r3, r3, #1
 8008d4e:	089b      	lsrpl	r3, r3, #2
 8008d50:	2001      	movmi	r0, #1
 8008d52:	6013      	strmi	r3, [r2, #0]
 8008d54:	bf5c      	itt	pl
 8008d56:	6013      	strpl	r3, [r2, #0]
 8008d58:	2002      	movpl	r0, #2
 8008d5a:	4770      	bx	lr
 8008d5c:	b299      	uxth	r1, r3
 8008d5e:	b909      	cbnz	r1, 8008d64 <__lo0bits+0x2a>
 8008d60:	0c1b      	lsrs	r3, r3, #16
 8008d62:	2010      	movs	r0, #16
 8008d64:	b2d9      	uxtb	r1, r3
 8008d66:	b909      	cbnz	r1, 8008d6c <__lo0bits+0x32>
 8008d68:	3008      	adds	r0, #8
 8008d6a:	0a1b      	lsrs	r3, r3, #8
 8008d6c:	0719      	lsls	r1, r3, #28
 8008d6e:	bf04      	itt	eq
 8008d70:	091b      	lsreq	r3, r3, #4
 8008d72:	3004      	addeq	r0, #4
 8008d74:	0799      	lsls	r1, r3, #30
 8008d76:	bf04      	itt	eq
 8008d78:	089b      	lsreq	r3, r3, #2
 8008d7a:	3002      	addeq	r0, #2
 8008d7c:	07d9      	lsls	r1, r3, #31
 8008d7e:	d403      	bmi.n	8008d88 <__lo0bits+0x4e>
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	f100 0001 	add.w	r0, r0, #1
 8008d86:	d003      	beq.n	8008d90 <__lo0bits+0x56>
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	4770      	bx	lr
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	4770      	bx	lr
 8008d90:	2020      	movs	r0, #32
 8008d92:	4770      	bx	lr

08008d94 <__i2b>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	460c      	mov	r4, r1
 8008d98:	2101      	movs	r1, #1
 8008d9a:	f7ff febd 	bl	8008b18 <_Balloc>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	b928      	cbnz	r0, 8008dae <__i2b+0x1a>
 8008da2:	4b05      	ldr	r3, [pc, #20]	@ (8008db8 <__i2b+0x24>)
 8008da4:	4805      	ldr	r0, [pc, #20]	@ (8008dbc <__i2b+0x28>)
 8008da6:	f240 1145 	movw	r1, #325	@ 0x145
 8008daa:	f001 fdd1 	bl	800a950 <__assert_func>
 8008dae:	2301      	movs	r3, #1
 8008db0:	6144      	str	r4, [r0, #20]
 8008db2:	6103      	str	r3, [r0, #16]
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	bf00      	nop
 8008db8:	0800b8ce 	.word	0x0800b8ce
 8008dbc:	0800b8df 	.word	0x0800b8df

08008dc0 <__multiply>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	4617      	mov	r7, r2
 8008dc6:	690a      	ldr	r2, [r1, #16]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	bfa8      	it	ge
 8008dce:	463b      	movge	r3, r7
 8008dd0:	4689      	mov	r9, r1
 8008dd2:	bfa4      	itt	ge
 8008dd4:	460f      	movge	r7, r1
 8008dd6:	4699      	movge	r9, r3
 8008dd8:	693d      	ldr	r5, [r7, #16]
 8008dda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	eb05 060a 	add.w	r6, r5, sl
 8008de6:	42b3      	cmp	r3, r6
 8008de8:	b085      	sub	sp, #20
 8008dea:	bfb8      	it	lt
 8008dec:	3101      	addlt	r1, #1
 8008dee:	f7ff fe93 	bl	8008b18 <_Balloc>
 8008df2:	b930      	cbnz	r0, 8008e02 <__multiply+0x42>
 8008df4:	4602      	mov	r2, r0
 8008df6:	4b41      	ldr	r3, [pc, #260]	@ (8008efc <__multiply+0x13c>)
 8008df8:	4841      	ldr	r0, [pc, #260]	@ (8008f00 <__multiply+0x140>)
 8008dfa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008dfe:	f001 fda7 	bl	800a950 <__assert_func>
 8008e02:	f100 0414 	add.w	r4, r0, #20
 8008e06:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e0a:	4623      	mov	r3, r4
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	4573      	cmp	r3, lr
 8008e10:	d320      	bcc.n	8008e54 <__multiply+0x94>
 8008e12:	f107 0814 	add.w	r8, r7, #20
 8008e16:	f109 0114 	add.w	r1, r9, #20
 8008e1a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008e1e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008e22:	9302      	str	r3, [sp, #8]
 8008e24:	1beb      	subs	r3, r5, r7
 8008e26:	3b15      	subs	r3, #21
 8008e28:	f023 0303 	bic.w	r3, r3, #3
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	3715      	adds	r7, #21
 8008e30:	42bd      	cmp	r5, r7
 8008e32:	bf38      	it	cc
 8008e34:	2304      	movcc	r3, #4
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	9103      	str	r1, [sp, #12]
 8008e3c:	428b      	cmp	r3, r1
 8008e3e:	d80c      	bhi.n	8008e5a <__multiply+0x9a>
 8008e40:	2e00      	cmp	r6, #0
 8008e42:	dd03      	ble.n	8008e4c <__multiply+0x8c>
 8008e44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d055      	beq.n	8008ef8 <__multiply+0x138>
 8008e4c:	6106      	str	r6, [r0, #16]
 8008e4e:	b005      	add	sp, #20
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e54:	f843 2b04 	str.w	r2, [r3], #4
 8008e58:	e7d9      	b.n	8008e0e <__multiply+0x4e>
 8008e5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e5e:	f1ba 0f00 	cmp.w	sl, #0
 8008e62:	d01f      	beq.n	8008ea4 <__multiply+0xe4>
 8008e64:	46c4      	mov	ip, r8
 8008e66:	46a1      	mov	r9, r4
 8008e68:	2700      	movs	r7, #0
 8008e6a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e6e:	f8d9 3000 	ldr.w	r3, [r9]
 8008e72:	fa1f fb82 	uxth.w	fp, r2
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e7c:	443b      	add	r3, r7
 8008e7e:	f8d9 7000 	ldr.w	r7, [r9]
 8008e82:	0c12      	lsrs	r2, r2, #16
 8008e84:	0c3f      	lsrs	r7, r7, #16
 8008e86:	fb0a 7202 	mla	r2, sl, r2, r7
 8008e8a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e94:	4565      	cmp	r5, ip
 8008e96:	f849 3b04 	str.w	r3, [r9], #4
 8008e9a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008e9e:	d8e4      	bhi.n	8008e6a <__multiply+0xaa>
 8008ea0:	9b01      	ldr	r3, [sp, #4]
 8008ea2:	50e7      	str	r7, [r4, r3]
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008eaa:	3104      	adds	r1, #4
 8008eac:	f1b9 0f00 	cmp.w	r9, #0
 8008eb0:	d020      	beq.n	8008ef4 <__multiply+0x134>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	4647      	mov	r7, r8
 8008eb6:	46a4      	mov	ip, r4
 8008eb8:	f04f 0a00 	mov.w	sl, #0
 8008ebc:	f8b7 b000 	ldrh.w	fp, [r7]
 8008ec0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008ec4:	fb09 220b 	mla	r2, r9, fp, r2
 8008ec8:	4452      	add	r2, sl
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed0:	f84c 3b04 	str.w	r3, [ip], #4
 8008ed4:	f857 3b04 	ldr.w	r3, [r7], #4
 8008ed8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008edc:	f8bc 3000 	ldrh.w	r3, [ip]
 8008ee0:	fb09 330a 	mla	r3, r9, sl, r3
 8008ee4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008ee8:	42bd      	cmp	r5, r7
 8008eea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008eee:	d8e5      	bhi.n	8008ebc <__multiply+0xfc>
 8008ef0:	9a01      	ldr	r2, [sp, #4]
 8008ef2:	50a3      	str	r3, [r4, r2]
 8008ef4:	3404      	adds	r4, #4
 8008ef6:	e79f      	b.n	8008e38 <__multiply+0x78>
 8008ef8:	3e01      	subs	r6, #1
 8008efa:	e7a1      	b.n	8008e40 <__multiply+0x80>
 8008efc:	0800b8ce 	.word	0x0800b8ce
 8008f00:	0800b8df 	.word	0x0800b8df

08008f04 <__pow5mult>:
 8008f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f08:	4615      	mov	r5, r2
 8008f0a:	f012 0203 	ands.w	r2, r2, #3
 8008f0e:	4607      	mov	r7, r0
 8008f10:	460e      	mov	r6, r1
 8008f12:	d007      	beq.n	8008f24 <__pow5mult+0x20>
 8008f14:	4c25      	ldr	r4, [pc, #148]	@ (8008fac <__pow5mult+0xa8>)
 8008f16:	3a01      	subs	r2, #1
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f1e:	f7ff fe5d 	bl	8008bdc <__multadd>
 8008f22:	4606      	mov	r6, r0
 8008f24:	10ad      	asrs	r5, r5, #2
 8008f26:	d03d      	beq.n	8008fa4 <__pow5mult+0xa0>
 8008f28:	69fc      	ldr	r4, [r7, #28]
 8008f2a:	b97c      	cbnz	r4, 8008f4c <__pow5mult+0x48>
 8008f2c:	2010      	movs	r0, #16
 8008f2e:	f7ff fd3d 	bl	80089ac <malloc>
 8008f32:	4602      	mov	r2, r0
 8008f34:	61f8      	str	r0, [r7, #28]
 8008f36:	b928      	cbnz	r0, 8008f44 <__pow5mult+0x40>
 8008f38:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb0 <__pow5mult+0xac>)
 8008f3a:	481e      	ldr	r0, [pc, #120]	@ (8008fb4 <__pow5mult+0xb0>)
 8008f3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f40:	f001 fd06 	bl	800a950 <__assert_func>
 8008f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f48:	6004      	str	r4, [r0, #0]
 8008f4a:	60c4      	str	r4, [r0, #12]
 8008f4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f54:	b94c      	cbnz	r4, 8008f6a <__pow5mult+0x66>
 8008f56:	f240 2171 	movw	r1, #625	@ 0x271
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	f7ff ff1a 	bl	8008d94 <__i2b>
 8008f60:	2300      	movs	r3, #0
 8008f62:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f66:	4604      	mov	r4, r0
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	f04f 0900 	mov.w	r9, #0
 8008f6e:	07eb      	lsls	r3, r5, #31
 8008f70:	d50a      	bpl.n	8008f88 <__pow5mult+0x84>
 8008f72:	4631      	mov	r1, r6
 8008f74:	4622      	mov	r2, r4
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7ff ff22 	bl	8008dc0 <__multiply>
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4680      	mov	r8, r0
 8008f80:	4638      	mov	r0, r7
 8008f82:	f7ff fe09 	bl	8008b98 <_Bfree>
 8008f86:	4646      	mov	r6, r8
 8008f88:	106d      	asrs	r5, r5, #1
 8008f8a:	d00b      	beq.n	8008fa4 <__pow5mult+0xa0>
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	b938      	cbnz	r0, 8008fa0 <__pow5mult+0x9c>
 8008f90:	4622      	mov	r2, r4
 8008f92:	4621      	mov	r1, r4
 8008f94:	4638      	mov	r0, r7
 8008f96:	f7ff ff13 	bl	8008dc0 <__multiply>
 8008f9a:	6020      	str	r0, [r4, #0]
 8008f9c:	f8c0 9000 	str.w	r9, [r0]
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	e7e4      	b.n	8008f6e <__pow5mult+0x6a>
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008faa:	bf00      	nop
 8008fac:	0800b9f0 	.word	0x0800b9f0
 8008fb0:	0800b85f 	.word	0x0800b85f
 8008fb4:	0800b8df 	.word	0x0800b8df

08008fb8 <__lshift>:
 8008fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	6849      	ldr	r1, [r1, #4]
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fc6:	68a3      	ldr	r3, [r4, #8]
 8008fc8:	4607      	mov	r7, r0
 8008fca:	4691      	mov	r9, r2
 8008fcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fd0:	f108 0601 	add.w	r6, r8, #1
 8008fd4:	42b3      	cmp	r3, r6
 8008fd6:	db0b      	blt.n	8008ff0 <__lshift+0x38>
 8008fd8:	4638      	mov	r0, r7
 8008fda:	f7ff fd9d 	bl	8008b18 <_Balloc>
 8008fde:	4605      	mov	r5, r0
 8008fe0:	b948      	cbnz	r0, 8008ff6 <__lshift+0x3e>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	4b28      	ldr	r3, [pc, #160]	@ (8009088 <__lshift+0xd0>)
 8008fe6:	4829      	ldr	r0, [pc, #164]	@ (800908c <__lshift+0xd4>)
 8008fe8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008fec:	f001 fcb0 	bl	800a950 <__assert_func>
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	e7ee      	b.n	8008fd4 <__lshift+0x1c>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f100 0114 	add.w	r1, r0, #20
 8008ffc:	f100 0210 	add.w	r2, r0, #16
 8009000:	4618      	mov	r0, r3
 8009002:	4553      	cmp	r3, sl
 8009004:	db33      	blt.n	800906e <__lshift+0xb6>
 8009006:	6920      	ldr	r0, [r4, #16]
 8009008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800900c:	f104 0314 	add.w	r3, r4, #20
 8009010:	f019 091f 	ands.w	r9, r9, #31
 8009014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009018:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800901c:	d02b      	beq.n	8009076 <__lshift+0xbe>
 800901e:	f1c9 0e20 	rsb	lr, r9, #32
 8009022:	468a      	mov	sl, r1
 8009024:	2200      	movs	r2, #0
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	fa00 f009 	lsl.w	r0, r0, r9
 800902c:	4310      	orrs	r0, r2
 800902e:	f84a 0b04 	str.w	r0, [sl], #4
 8009032:	f853 2b04 	ldr.w	r2, [r3], #4
 8009036:	459c      	cmp	ip, r3
 8009038:	fa22 f20e 	lsr.w	r2, r2, lr
 800903c:	d8f3      	bhi.n	8009026 <__lshift+0x6e>
 800903e:	ebac 0304 	sub.w	r3, ip, r4
 8009042:	3b15      	subs	r3, #21
 8009044:	f023 0303 	bic.w	r3, r3, #3
 8009048:	3304      	adds	r3, #4
 800904a:	f104 0015 	add.w	r0, r4, #21
 800904e:	4560      	cmp	r0, ip
 8009050:	bf88      	it	hi
 8009052:	2304      	movhi	r3, #4
 8009054:	50ca      	str	r2, [r1, r3]
 8009056:	b10a      	cbz	r2, 800905c <__lshift+0xa4>
 8009058:	f108 0602 	add.w	r6, r8, #2
 800905c:	3e01      	subs	r6, #1
 800905e:	4638      	mov	r0, r7
 8009060:	612e      	str	r6, [r5, #16]
 8009062:	4621      	mov	r1, r4
 8009064:	f7ff fd98 	bl	8008b98 <_Bfree>
 8009068:	4628      	mov	r0, r5
 800906a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009072:	3301      	adds	r3, #1
 8009074:	e7c5      	b.n	8009002 <__lshift+0x4a>
 8009076:	3904      	subs	r1, #4
 8009078:	f853 2b04 	ldr.w	r2, [r3], #4
 800907c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009080:	459c      	cmp	ip, r3
 8009082:	d8f9      	bhi.n	8009078 <__lshift+0xc0>
 8009084:	e7ea      	b.n	800905c <__lshift+0xa4>
 8009086:	bf00      	nop
 8009088:	0800b8ce 	.word	0x0800b8ce
 800908c:	0800b8df 	.word	0x0800b8df

08009090 <__mcmp>:
 8009090:	690a      	ldr	r2, [r1, #16]
 8009092:	4603      	mov	r3, r0
 8009094:	6900      	ldr	r0, [r0, #16]
 8009096:	1a80      	subs	r0, r0, r2
 8009098:	b530      	push	{r4, r5, lr}
 800909a:	d10e      	bne.n	80090ba <__mcmp+0x2a>
 800909c:	3314      	adds	r3, #20
 800909e:	3114      	adds	r1, #20
 80090a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090b0:	4295      	cmp	r5, r2
 80090b2:	d003      	beq.n	80090bc <__mcmp+0x2c>
 80090b4:	d205      	bcs.n	80090c2 <__mcmp+0x32>
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090ba:	bd30      	pop	{r4, r5, pc}
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d3f3      	bcc.n	80090a8 <__mcmp+0x18>
 80090c0:	e7fb      	b.n	80090ba <__mcmp+0x2a>
 80090c2:	2001      	movs	r0, #1
 80090c4:	e7f9      	b.n	80090ba <__mcmp+0x2a>
	...

080090c8 <__mdiff>:
 80090c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	4689      	mov	r9, r1
 80090ce:	4606      	mov	r6, r0
 80090d0:	4611      	mov	r1, r2
 80090d2:	4648      	mov	r0, r9
 80090d4:	4614      	mov	r4, r2
 80090d6:	f7ff ffdb 	bl	8009090 <__mcmp>
 80090da:	1e05      	subs	r5, r0, #0
 80090dc:	d112      	bne.n	8009104 <__mdiff+0x3c>
 80090de:	4629      	mov	r1, r5
 80090e0:	4630      	mov	r0, r6
 80090e2:	f7ff fd19 	bl	8008b18 <_Balloc>
 80090e6:	4602      	mov	r2, r0
 80090e8:	b928      	cbnz	r0, 80090f6 <__mdiff+0x2e>
 80090ea:	4b3e      	ldr	r3, [pc, #248]	@ (80091e4 <__mdiff+0x11c>)
 80090ec:	f240 2137 	movw	r1, #567	@ 0x237
 80090f0:	483d      	ldr	r0, [pc, #244]	@ (80091e8 <__mdiff+0x120>)
 80090f2:	f001 fc2d 	bl	800a950 <__assert_func>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090fc:	4610      	mov	r0, r2
 80090fe:	b003      	add	sp, #12
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	bfbc      	itt	lt
 8009106:	464b      	movlt	r3, r9
 8009108:	46a1      	movlt	r9, r4
 800910a:	4630      	mov	r0, r6
 800910c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009110:	bfba      	itte	lt
 8009112:	461c      	movlt	r4, r3
 8009114:	2501      	movlt	r5, #1
 8009116:	2500      	movge	r5, #0
 8009118:	f7ff fcfe 	bl	8008b18 <_Balloc>
 800911c:	4602      	mov	r2, r0
 800911e:	b918      	cbnz	r0, 8009128 <__mdiff+0x60>
 8009120:	4b30      	ldr	r3, [pc, #192]	@ (80091e4 <__mdiff+0x11c>)
 8009122:	f240 2145 	movw	r1, #581	@ 0x245
 8009126:	e7e3      	b.n	80090f0 <__mdiff+0x28>
 8009128:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800912c:	6926      	ldr	r6, [r4, #16]
 800912e:	60c5      	str	r5, [r0, #12]
 8009130:	f109 0310 	add.w	r3, r9, #16
 8009134:	f109 0514 	add.w	r5, r9, #20
 8009138:	f104 0e14 	add.w	lr, r4, #20
 800913c:	f100 0b14 	add.w	fp, r0, #20
 8009140:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009144:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	46d9      	mov	r9, fp
 800914c:	f04f 0c00 	mov.w	ip, #0
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009156:	f853 af04 	ldr.w	sl, [r3, #4]!
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	b281      	uxth	r1, r0
 800915e:	fa1f f38a 	uxth.w	r3, sl
 8009162:	1a5b      	subs	r3, r3, r1
 8009164:	0c00      	lsrs	r0, r0, #16
 8009166:	4463      	add	r3, ip
 8009168:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800916c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009170:	b29b      	uxth	r3, r3
 8009172:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009176:	4576      	cmp	r6, lr
 8009178:	f849 3b04 	str.w	r3, [r9], #4
 800917c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009180:	d8e6      	bhi.n	8009150 <__mdiff+0x88>
 8009182:	1b33      	subs	r3, r6, r4
 8009184:	3b15      	subs	r3, #21
 8009186:	f023 0303 	bic.w	r3, r3, #3
 800918a:	3415      	adds	r4, #21
 800918c:	3304      	adds	r3, #4
 800918e:	42a6      	cmp	r6, r4
 8009190:	bf38      	it	cc
 8009192:	2304      	movcc	r3, #4
 8009194:	441d      	add	r5, r3
 8009196:	445b      	add	r3, fp
 8009198:	461e      	mov	r6, r3
 800919a:	462c      	mov	r4, r5
 800919c:	4544      	cmp	r4, r8
 800919e:	d30e      	bcc.n	80091be <__mdiff+0xf6>
 80091a0:	f108 0103 	add.w	r1, r8, #3
 80091a4:	1b49      	subs	r1, r1, r5
 80091a6:	f021 0103 	bic.w	r1, r1, #3
 80091aa:	3d03      	subs	r5, #3
 80091ac:	45a8      	cmp	r8, r5
 80091ae:	bf38      	it	cc
 80091b0:	2100      	movcc	r1, #0
 80091b2:	440b      	add	r3, r1
 80091b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091b8:	b191      	cbz	r1, 80091e0 <__mdiff+0x118>
 80091ba:	6117      	str	r7, [r2, #16]
 80091bc:	e79e      	b.n	80090fc <__mdiff+0x34>
 80091be:	f854 1b04 	ldr.w	r1, [r4], #4
 80091c2:	46e6      	mov	lr, ip
 80091c4:	0c08      	lsrs	r0, r1, #16
 80091c6:	fa1c fc81 	uxtah	ip, ip, r1
 80091ca:	4471      	add	r1, lr
 80091cc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80091d0:	b289      	uxth	r1, r1
 80091d2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80091d6:	f846 1b04 	str.w	r1, [r6], #4
 80091da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091de:	e7dd      	b.n	800919c <__mdiff+0xd4>
 80091e0:	3f01      	subs	r7, #1
 80091e2:	e7e7      	b.n	80091b4 <__mdiff+0xec>
 80091e4:	0800b8ce 	.word	0x0800b8ce
 80091e8:	0800b8df 	.word	0x0800b8df

080091ec <__ulp>:
 80091ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009228 <__ulp+0x3c>)
 80091ee:	400b      	ands	r3, r1
 80091f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dc08      	bgt.n	800920a <__ulp+0x1e>
 80091f8:	425b      	negs	r3, r3
 80091fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80091fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009202:	da04      	bge.n	800920e <__ulp+0x22>
 8009204:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009208:	4113      	asrs	r3, r2
 800920a:	2200      	movs	r2, #0
 800920c:	e008      	b.n	8009220 <__ulp+0x34>
 800920e:	f1a2 0314 	sub.w	r3, r2, #20
 8009212:	2b1e      	cmp	r3, #30
 8009214:	bfda      	itte	le
 8009216:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800921a:	40da      	lsrle	r2, r3
 800921c:	2201      	movgt	r2, #1
 800921e:	2300      	movs	r3, #0
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	7ff00000 	.word	0x7ff00000

0800922c <__b2d>:
 800922c:	6902      	ldr	r2, [r0, #16]
 800922e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009230:	f100 0614 	add.w	r6, r0, #20
 8009234:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009238:	4f20      	ldr	r7, [pc, #128]	@ (80092bc <__b2d+0x90>)
 800923a:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff fd5c 	bl	8008cfc <__hi0bits>
 8009244:	4603      	mov	r3, r0
 8009246:	2b0a      	cmp	r3, #10
 8009248:	f1c0 0020 	rsb	r0, r0, #32
 800924c:	f1a2 0504 	sub.w	r5, r2, #4
 8009250:	6008      	str	r0, [r1, #0]
 8009252:	dc13      	bgt.n	800927c <__b2d+0x50>
 8009254:	42ae      	cmp	r6, r5
 8009256:	bf38      	it	cc
 8009258:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800925c:	f1c3 0c0b 	rsb	ip, r3, #11
 8009260:	bf28      	it	cs
 8009262:	2200      	movcs	r2, #0
 8009264:	3315      	adds	r3, #21
 8009266:	fa24 fe0c 	lsr.w	lr, r4, ip
 800926a:	fa04 f303 	lsl.w	r3, r4, r3
 800926e:	fa22 f20c 	lsr.w	r2, r2, ip
 8009272:	ea4e 0107 	orr.w	r1, lr, r7
 8009276:	431a      	orrs	r2, r3
 8009278:	4610      	mov	r0, r2
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927c:	42ae      	cmp	r6, r5
 800927e:	bf36      	itet	cc
 8009280:	f1a2 0508 	subcc.w	r5, r2, #8
 8009284:	2200      	movcs	r2, #0
 8009286:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800928a:	3b0b      	subs	r3, #11
 800928c:	d012      	beq.n	80092b4 <__b2d+0x88>
 800928e:	f1c3 0720 	rsb	r7, r3, #32
 8009292:	fa22 f107 	lsr.w	r1, r2, r7
 8009296:	409c      	lsls	r4, r3
 8009298:	430c      	orrs	r4, r1
 800929a:	42b5      	cmp	r5, r6
 800929c:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80092a0:	bf8c      	ite	hi
 80092a2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80092a6:	2400      	movls	r4, #0
 80092a8:	409a      	lsls	r2, r3
 80092aa:	40fc      	lsrs	r4, r7
 80092ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80092b0:	4322      	orrs	r2, r4
 80092b2:	e7e1      	b.n	8009278 <__b2d+0x4c>
 80092b4:	ea44 0107 	orr.w	r1, r4, r7
 80092b8:	e7de      	b.n	8009278 <__b2d+0x4c>
 80092ba:	bf00      	nop
 80092bc:	3ff00000 	.word	0x3ff00000

080092c0 <__d2b>:
 80092c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80092c4:	2101      	movs	r1, #1
 80092c6:	9e08      	ldr	r6, [sp, #32]
 80092c8:	4690      	mov	r8, r2
 80092ca:	4699      	mov	r9, r3
 80092cc:	f7ff fc24 	bl	8008b18 <_Balloc>
 80092d0:	4604      	mov	r4, r0
 80092d2:	b930      	cbnz	r0, 80092e2 <__d2b+0x22>
 80092d4:	4602      	mov	r2, r0
 80092d6:	4b24      	ldr	r3, [pc, #144]	@ (8009368 <__d2b+0xa8>)
 80092d8:	4824      	ldr	r0, [pc, #144]	@ (800936c <__d2b+0xac>)
 80092da:	f240 310f 	movw	r1, #783	@ 0x30f
 80092de:	f001 fb37 	bl	800a950 <__assert_func>
 80092e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092ea:	b10d      	cbz	r5, 80092f0 <__d2b+0x30>
 80092ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	f1b8 0300 	subs.w	r3, r8, #0
 80092f6:	d024      	beq.n	8009342 <__d2b+0x82>
 80092f8:	4668      	mov	r0, sp
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	f7ff fd1d 	bl	8008d3a <__lo0bits>
 8009300:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009304:	b1d8      	cbz	r0, 800933e <__d2b+0x7e>
 8009306:	f1c0 0320 	rsb	r3, r0, #32
 800930a:	fa02 f303 	lsl.w	r3, r2, r3
 800930e:	430b      	orrs	r3, r1
 8009310:	40c2      	lsrs	r2, r0
 8009312:	6163      	str	r3, [r4, #20]
 8009314:	9201      	str	r2, [sp, #4]
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	61a3      	str	r3, [r4, #24]
 800931a:	2b00      	cmp	r3, #0
 800931c:	bf0c      	ite	eq
 800931e:	2201      	moveq	r2, #1
 8009320:	2202      	movne	r2, #2
 8009322:	6122      	str	r2, [r4, #16]
 8009324:	b1ad      	cbz	r5, 8009352 <__d2b+0x92>
 8009326:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800932a:	4405      	add	r5, r0
 800932c:	6035      	str	r5, [r6, #0]
 800932e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009334:	6018      	str	r0, [r3, #0]
 8009336:	4620      	mov	r0, r4
 8009338:	b002      	add	sp, #8
 800933a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800933e:	6161      	str	r1, [r4, #20]
 8009340:	e7e9      	b.n	8009316 <__d2b+0x56>
 8009342:	a801      	add	r0, sp, #4
 8009344:	f7ff fcf9 	bl	8008d3a <__lo0bits>
 8009348:	9b01      	ldr	r3, [sp, #4]
 800934a:	6163      	str	r3, [r4, #20]
 800934c:	3020      	adds	r0, #32
 800934e:	2201      	movs	r2, #1
 8009350:	e7e7      	b.n	8009322 <__d2b+0x62>
 8009352:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009356:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800935a:	6030      	str	r0, [r6, #0]
 800935c:	6918      	ldr	r0, [r3, #16]
 800935e:	f7ff fccd 	bl	8008cfc <__hi0bits>
 8009362:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009366:	e7e4      	b.n	8009332 <__d2b+0x72>
 8009368:	0800b8ce 	.word	0x0800b8ce
 800936c:	0800b8df 	.word	0x0800b8df

08009370 <__ratio>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	b085      	sub	sp, #20
 8009376:	e9cd 1000 	strd	r1, r0, [sp]
 800937a:	a902      	add	r1, sp, #8
 800937c:	f7ff ff56 	bl	800922c <__b2d>
 8009380:	468b      	mov	fp, r1
 8009382:	4606      	mov	r6, r0
 8009384:	460f      	mov	r7, r1
 8009386:	9800      	ldr	r0, [sp, #0]
 8009388:	a903      	add	r1, sp, #12
 800938a:	f7ff ff4f 	bl	800922c <__b2d>
 800938e:	9b01      	ldr	r3, [sp, #4]
 8009390:	4689      	mov	r9, r1
 8009392:	460d      	mov	r5, r1
 8009394:	6919      	ldr	r1, [r3, #16]
 8009396:	9b00      	ldr	r3, [sp, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	1ac9      	subs	r1, r1, r3
 800939c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80093a0:	1a9b      	subs	r3, r3, r2
 80093a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bfcd      	iteet	gt
 80093aa:	463a      	movgt	r2, r7
 80093ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80093b0:	462a      	movle	r2, r5
 80093b2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80093b6:	bfd8      	it	le
 80093b8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80093bc:	4604      	mov	r4, r0
 80093be:	4622      	mov	r2, r4
 80093c0:	464b      	mov	r3, r9
 80093c2:	4630      	mov	r0, r6
 80093c4:	4659      	mov	r1, fp
 80093c6:	f7f7 fa29 	bl	800081c <__aeabi_ddiv>
 80093ca:	b005      	add	sp, #20
 80093cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093d0 <__copybits>:
 80093d0:	3901      	subs	r1, #1
 80093d2:	b570      	push	{r4, r5, r6, lr}
 80093d4:	1149      	asrs	r1, r1, #5
 80093d6:	6914      	ldr	r4, [r2, #16]
 80093d8:	3101      	adds	r1, #1
 80093da:	f102 0314 	add.w	r3, r2, #20
 80093de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80093e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80093e6:	1f05      	subs	r5, r0, #4
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	d30c      	bcc.n	8009406 <__copybits+0x36>
 80093ec:	1aa3      	subs	r3, r4, r2
 80093ee:	3b11      	subs	r3, #17
 80093f0:	f023 0303 	bic.w	r3, r3, #3
 80093f4:	3211      	adds	r2, #17
 80093f6:	42a2      	cmp	r2, r4
 80093f8:	bf88      	it	hi
 80093fa:	2300      	movhi	r3, #0
 80093fc:	4418      	add	r0, r3
 80093fe:	2300      	movs	r3, #0
 8009400:	4288      	cmp	r0, r1
 8009402:	d305      	bcc.n	8009410 <__copybits+0x40>
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	f853 6b04 	ldr.w	r6, [r3], #4
 800940a:	f845 6f04 	str.w	r6, [r5, #4]!
 800940e:	e7eb      	b.n	80093e8 <__copybits+0x18>
 8009410:	f840 3b04 	str.w	r3, [r0], #4
 8009414:	e7f4      	b.n	8009400 <__copybits+0x30>

08009416 <__any_on>:
 8009416:	f100 0214 	add.w	r2, r0, #20
 800941a:	6900      	ldr	r0, [r0, #16]
 800941c:	114b      	asrs	r3, r1, #5
 800941e:	4298      	cmp	r0, r3
 8009420:	b510      	push	{r4, lr}
 8009422:	db11      	blt.n	8009448 <__any_on+0x32>
 8009424:	dd0a      	ble.n	800943c <__any_on+0x26>
 8009426:	f011 011f 	ands.w	r1, r1, #31
 800942a:	d007      	beq.n	800943c <__any_on+0x26>
 800942c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009430:	fa24 f001 	lsr.w	r0, r4, r1
 8009434:	fa00 f101 	lsl.w	r1, r0, r1
 8009438:	428c      	cmp	r4, r1
 800943a:	d10b      	bne.n	8009454 <__any_on+0x3e>
 800943c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009440:	4293      	cmp	r3, r2
 8009442:	d803      	bhi.n	800944c <__any_on+0x36>
 8009444:	2000      	movs	r0, #0
 8009446:	bd10      	pop	{r4, pc}
 8009448:	4603      	mov	r3, r0
 800944a:	e7f7      	b.n	800943c <__any_on+0x26>
 800944c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009450:	2900      	cmp	r1, #0
 8009452:	d0f5      	beq.n	8009440 <__any_on+0x2a>
 8009454:	2001      	movs	r0, #1
 8009456:	e7f6      	b.n	8009446 <__any_on+0x30>

08009458 <sulp>:
 8009458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945c:	460f      	mov	r7, r1
 800945e:	4690      	mov	r8, r2
 8009460:	f7ff fec4 	bl	80091ec <__ulp>
 8009464:	4604      	mov	r4, r0
 8009466:	460d      	mov	r5, r1
 8009468:	f1b8 0f00 	cmp.w	r8, #0
 800946c:	d011      	beq.n	8009492 <sulp+0x3a>
 800946e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009472:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009476:	2b00      	cmp	r3, #0
 8009478:	dd0b      	ble.n	8009492 <sulp+0x3a>
 800947a:	051b      	lsls	r3, r3, #20
 800947c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009480:	2400      	movs	r4, #0
 8009482:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009486:	4622      	mov	r2, r4
 8009488:	462b      	mov	r3, r5
 800948a:	f7f7 f89d 	bl	80005c8 <__aeabi_dmul>
 800948e:	4604      	mov	r4, r0
 8009490:	460d      	mov	r5, r1
 8009492:	4620      	mov	r0, r4
 8009494:	4629      	mov	r1, r5
 8009496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800949a:	0000      	movs	r0, r0
 800949c:	0000      	movs	r0, r0
	...

080094a0 <_strtod_l>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	b09f      	sub	sp, #124	@ 0x7c
 80094a6:	460c      	mov	r4, r1
 80094a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80094aa:	2200      	movs	r2, #0
 80094ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80094ae:	9005      	str	r0, [sp, #20]
 80094b0:	f04f 0a00 	mov.w	sl, #0
 80094b4:	f04f 0b00 	mov.w	fp, #0
 80094b8:	460a      	mov	r2, r1
 80094ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80094bc:	7811      	ldrb	r1, [r2, #0]
 80094be:	292b      	cmp	r1, #43	@ 0x2b
 80094c0:	d048      	beq.n	8009554 <_strtod_l+0xb4>
 80094c2:	d836      	bhi.n	8009532 <_strtod_l+0x92>
 80094c4:	290d      	cmp	r1, #13
 80094c6:	d830      	bhi.n	800952a <_strtod_l+0x8a>
 80094c8:	2908      	cmp	r1, #8
 80094ca:	d830      	bhi.n	800952e <_strtod_l+0x8e>
 80094cc:	2900      	cmp	r1, #0
 80094ce:	d039      	beq.n	8009544 <_strtod_l+0xa4>
 80094d0:	2200      	movs	r2, #0
 80094d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80094d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80094d6:	782a      	ldrb	r2, [r5, #0]
 80094d8:	2a30      	cmp	r2, #48	@ 0x30
 80094da:	f040 80b0 	bne.w	800963e <_strtod_l+0x19e>
 80094de:	786a      	ldrb	r2, [r5, #1]
 80094e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094e4:	2a58      	cmp	r2, #88	@ 0x58
 80094e6:	d16c      	bne.n	80095c2 <_strtod_l+0x122>
 80094e8:	9302      	str	r3, [sp, #8]
 80094ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	4a8e      	ldr	r2, [pc, #568]	@ (800972c <_strtod_l+0x28c>)
 80094f4:	9805      	ldr	r0, [sp, #20]
 80094f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80094f8:	a919      	add	r1, sp, #100	@ 0x64
 80094fa:	f001 fac3 	bl	800aa84 <__gethex>
 80094fe:	f010 060f 	ands.w	r6, r0, #15
 8009502:	4604      	mov	r4, r0
 8009504:	d005      	beq.n	8009512 <_strtod_l+0x72>
 8009506:	2e06      	cmp	r6, #6
 8009508:	d126      	bne.n	8009558 <_strtod_l+0xb8>
 800950a:	3501      	adds	r5, #1
 800950c:	2300      	movs	r3, #0
 800950e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009510:	930e      	str	r3, [sp, #56]	@ 0x38
 8009512:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009514:	2b00      	cmp	r3, #0
 8009516:	f040 857e 	bne.w	800a016 <_strtod_l+0xb76>
 800951a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800951c:	b1bb      	cbz	r3, 800954e <_strtod_l+0xae>
 800951e:	4650      	mov	r0, sl
 8009520:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009524:	b01f      	add	sp, #124	@ 0x7c
 8009526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952a:	2920      	cmp	r1, #32
 800952c:	d1d0      	bne.n	80094d0 <_strtod_l+0x30>
 800952e:	3201      	adds	r2, #1
 8009530:	e7c3      	b.n	80094ba <_strtod_l+0x1a>
 8009532:	292d      	cmp	r1, #45	@ 0x2d
 8009534:	d1cc      	bne.n	80094d0 <_strtod_l+0x30>
 8009536:	2101      	movs	r1, #1
 8009538:	910e      	str	r1, [sp, #56]	@ 0x38
 800953a:	1c51      	adds	r1, r2, #1
 800953c:	9119      	str	r1, [sp, #100]	@ 0x64
 800953e:	7852      	ldrb	r2, [r2, #1]
 8009540:	2a00      	cmp	r2, #0
 8009542:	d1c7      	bne.n	80094d4 <_strtod_l+0x34>
 8009544:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009546:	9419      	str	r4, [sp, #100]	@ 0x64
 8009548:	2b00      	cmp	r3, #0
 800954a:	f040 8562 	bne.w	800a012 <_strtod_l+0xb72>
 800954e:	4650      	mov	r0, sl
 8009550:	4659      	mov	r1, fp
 8009552:	e7e7      	b.n	8009524 <_strtod_l+0x84>
 8009554:	2100      	movs	r1, #0
 8009556:	e7ef      	b.n	8009538 <_strtod_l+0x98>
 8009558:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800955a:	b13a      	cbz	r2, 800956c <_strtod_l+0xcc>
 800955c:	2135      	movs	r1, #53	@ 0x35
 800955e:	a81c      	add	r0, sp, #112	@ 0x70
 8009560:	f7ff ff36 	bl	80093d0 <__copybits>
 8009564:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009566:	9805      	ldr	r0, [sp, #20]
 8009568:	f7ff fb16 	bl	8008b98 <_Bfree>
 800956c:	3e01      	subs	r6, #1
 800956e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009570:	2e04      	cmp	r6, #4
 8009572:	d806      	bhi.n	8009582 <_strtod_l+0xe2>
 8009574:	e8df f006 	tbb	[pc, r6]
 8009578:	201d0314 	.word	0x201d0314
 800957c:	14          	.byte	0x14
 800957d:	00          	.byte	0x00
 800957e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009582:	05e1      	lsls	r1, r4, #23
 8009584:	bf48      	it	mi
 8009586:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800958a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800958e:	0d1b      	lsrs	r3, r3, #20
 8009590:	051b      	lsls	r3, r3, #20
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1bd      	bne.n	8009512 <_strtod_l+0x72>
 8009596:	f7fe fb33 	bl	8007c00 <__errno>
 800959a:	2322      	movs	r3, #34	@ 0x22
 800959c:	6003      	str	r3, [r0, #0]
 800959e:	e7b8      	b.n	8009512 <_strtod_l+0x72>
 80095a0:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80095a4:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80095a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80095ac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80095b0:	e7e7      	b.n	8009582 <_strtod_l+0xe2>
 80095b2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009730 <_strtod_l+0x290>
 80095b6:	e7e4      	b.n	8009582 <_strtod_l+0xe2>
 80095b8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80095bc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80095c0:	e7df      	b.n	8009582 <_strtod_l+0xe2>
 80095c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095c4:	1c5a      	adds	r2, r3, #1
 80095c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	2b30      	cmp	r3, #48	@ 0x30
 80095cc:	d0f9      	beq.n	80095c2 <_strtod_l+0x122>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d09f      	beq.n	8009512 <_strtod_l+0x72>
 80095d2:	2301      	movs	r3, #1
 80095d4:	2700      	movs	r7, #0
 80095d6:	9308      	str	r3, [sp, #32]
 80095d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095da:	930c      	str	r3, [sp, #48]	@ 0x30
 80095dc:	970b      	str	r7, [sp, #44]	@ 0x2c
 80095de:	46b9      	mov	r9, r7
 80095e0:	220a      	movs	r2, #10
 80095e2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80095e4:	7805      	ldrb	r5, [r0, #0]
 80095e6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80095ea:	b2d9      	uxtb	r1, r3
 80095ec:	2909      	cmp	r1, #9
 80095ee:	d928      	bls.n	8009642 <_strtod_l+0x1a2>
 80095f0:	4950      	ldr	r1, [pc, #320]	@ (8009734 <_strtod_l+0x294>)
 80095f2:	2201      	movs	r2, #1
 80095f4:	f7fe faa8 	bl	8007b48 <strncmp>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d032      	beq.n	8009662 <_strtod_l+0x1c2>
 80095fc:	2000      	movs	r0, #0
 80095fe:	462a      	mov	r2, r5
 8009600:	900a      	str	r0, [sp, #40]	@ 0x28
 8009602:	464d      	mov	r5, r9
 8009604:	4603      	mov	r3, r0
 8009606:	2a65      	cmp	r2, #101	@ 0x65
 8009608:	d001      	beq.n	800960e <_strtod_l+0x16e>
 800960a:	2a45      	cmp	r2, #69	@ 0x45
 800960c:	d114      	bne.n	8009638 <_strtod_l+0x198>
 800960e:	b91d      	cbnz	r5, 8009618 <_strtod_l+0x178>
 8009610:	9a08      	ldr	r2, [sp, #32]
 8009612:	4302      	orrs	r2, r0
 8009614:	d096      	beq.n	8009544 <_strtod_l+0xa4>
 8009616:	2500      	movs	r5, #0
 8009618:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800961a:	1c62      	adds	r2, r4, #1
 800961c:	9219      	str	r2, [sp, #100]	@ 0x64
 800961e:	7862      	ldrb	r2, [r4, #1]
 8009620:	2a2b      	cmp	r2, #43	@ 0x2b
 8009622:	d07a      	beq.n	800971a <_strtod_l+0x27a>
 8009624:	2a2d      	cmp	r2, #45	@ 0x2d
 8009626:	d07e      	beq.n	8009726 <_strtod_l+0x286>
 8009628:	f04f 0c00 	mov.w	ip, #0
 800962c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009630:	2909      	cmp	r1, #9
 8009632:	f240 8085 	bls.w	8009740 <_strtod_l+0x2a0>
 8009636:	9419      	str	r4, [sp, #100]	@ 0x64
 8009638:	f04f 0800 	mov.w	r8, #0
 800963c:	e0a5      	b.n	800978a <_strtod_l+0x2ea>
 800963e:	2300      	movs	r3, #0
 8009640:	e7c8      	b.n	80095d4 <_strtod_l+0x134>
 8009642:	f1b9 0f08 	cmp.w	r9, #8
 8009646:	bfd8      	it	le
 8009648:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800964a:	f100 0001 	add.w	r0, r0, #1
 800964e:	bfda      	itte	le
 8009650:	fb02 3301 	mlale	r3, r2, r1, r3
 8009654:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009656:	fb02 3707 	mlagt	r7, r2, r7, r3
 800965a:	f109 0901 	add.w	r9, r9, #1
 800965e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009660:	e7bf      	b.n	80095e2 <_strtod_l+0x142>
 8009662:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	9219      	str	r2, [sp, #100]	@ 0x64
 8009668:	785a      	ldrb	r2, [r3, #1]
 800966a:	f1b9 0f00 	cmp.w	r9, #0
 800966e:	d03b      	beq.n	80096e8 <_strtod_l+0x248>
 8009670:	900a      	str	r0, [sp, #40]	@ 0x28
 8009672:	464d      	mov	r5, r9
 8009674:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009678:	2b09      	cmp	r3, #9
 800967a:	d912      	bls.n	80096a2 <_strtod_l+0x202>
 800967c:	2301      	movs	r3, #1
 800967e:	e7c2      	b.n	8009606 <_strtod_l+0x166>
 8009680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	9219      	str	r2, [sp, #100]	@ 0x64
 8009686:	785a      	ldrb	r2, [r3, #1]
 8009688:	3001      	adds	r0, #1
 800968a:	2a30      	cmp	r2, #48	@ 0x30
 800968c:	d0f8      	beq.n	8009680 <_strtod_l+0x1e0>
 800968e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009692:	2b08      	cmp	r3, #8
 8009694:	f200 84c4 	bhi.w	800a020 <_strtod_l+0xb80>
 8009698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800969a:	900a      	str	r0, [sp, #40]	@ 0x28
 800969c:	2000      	movs	r0, #0
 800969e:	930c      	str	r3, [sp, #48]	@ 0x30
 80096a0:	4605      	mov	r5, r0
 80096a2:	3a30      	subs	r2, #48	@ 0x30
 80096a4:	f100 0301 	add.w	r3, r0, #1
 80096a8:	d018      	beq.n	80096dc <_strtod_l+0x23c>
 80096aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096ac:	4419      	add	r1, r3
 80096ae:	910a      	str	r1, [sp, #40]	@ 0x28
 80096b0:	462e      	mov	r6, r5
 80096b2:	f04f 0e0a 	mov.w	lr, #10
 80096b6:	1c71      	adds	r1, r6, #1
 80096b8:	eba1 0c05 	sub.w	ip, r1, r5
 80096bc:	4563      	cmp	r3, ip
 80096be:	dc15      	bgt.n	80096ec <_strtod_l+0x24c>
 80096c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80096c4:	182b      	adds	r3, r5, r0
 80096c6:	2b08      	cmp	r3, #8
 80096c8:	f105 0501 	add.w	r5, r5, #1
 80096cc:	4405      	add	r5, r0
 80096ce:	dc1a      	bgt.n	8009706 <_strtod_l+0x266>
 80096d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096d2:	230a      	movs	r3, #10
 80096d4:	fb03 2301 	mla	r3, r3, r1, r2
 80096d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096da:	2300      	movs	r3, #0
 80096dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096de:	1c51      	adds	r1, r2, #1
 80096e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80096e2:	7852      	ldrb	r2, [r2, #1]
 80096e4:	4618      	mov	r0, r3
 80096e6:	e7c5      	b.n	8009674 <_strtod_l+0x1d4>
 80096e8:	4648      	mov	r0, r9
 80096ea:	e7ce      	b.n	800968a <_strtod_l+0x1ea>
 80096ec:	2e08      	cmp	r6, #8
 80096ee:	dc05      	bgt.n	80096fc <_strtod_l+0x25c>
 80096f0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80096f2:	fb0e f606 	mul.w	r6, lr, r6
 80096f6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80096f8:	460e      	mov	r6, r1
 80096fa:	e7dc      	b.n	80096b6 <_strtod_l+0x216>
 80096fc:	2910      	cmp	r1, #16
 80096fe:	bfd8      	it	le
 8009700:	fb0e f707 	mulle.w	r7, lr, r7
 8009704:	e7f8      	b.n	80096f8 <_strtod_l+0x258>
 8009706:	2b0f      	cmp	r3, #15
 8009708:	bfdc      	itt	le
 800970a:	230a      	movle	r3, #10
 800970c:	fb03 2707 	mlale	r7, r3, r7, r2
 8009710:	e7e3      	b.n	80096da <_strtod_l+0x23a>
 8009712:	2300      	movs	r3, #0
 8009714:	930a      	str	r3, [sp, #40]	@ 0x28
 8009716:	2301      	movs	r3, #1
 8009718:	e77a      	b.n	8009610 <_strtod_l+0x170>
 800971a:	f04f 0c00 	mov.w	ip, #0
 800971e:	1ca2      	adds	r2, r4, #2
 8009720:	9219      	str	r2, [sp, #100]	@ 0x64
 8009722:	78a2      	ldrb	r2, [r4, #2]
 8009724:	e782      	b.n	800962c <_strtod_l+0x18c>
 8009726:	f04f 0c01 	mov.w	ip, #1
 800972a:	e7f8      	b.n	800971e <_strtod_l+0x27e>
 800972c:	0800bb04 	.word	0x0800bb04
 8009730:	7ff00000 	.word	0x7ff00000
 8009734:	0800b938 	.word	0x0800b938
 8009738:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800973a:	1c51      	adds	r1, r2, #1
 800973c:	9119      	str	r1, [sp, #100]	@ 0x64
 800973e:	7852      	ldrb	r2, [r2, #1]
 8009740:	2a30      	cmp	r2, #48	@ 0x30
 8009742:	d0f9      	beq.n	8009738 <_strtod_l+0x298>
 8009744:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009748:	2908      	cmp	r1, #8
 800974a:	f63f af75 	bhi.w	8009638 <_strtod_l+0x198>
 800974e:	3a30      	subs	r2, #48	@ 0x30
 8009750:	9209      	str	r2, [sp, #36]	@ 0x24
 8009752:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009754:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009756:	f04f 080a 	mov.w	r8, #10
 800975a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800975c:	1c56      	adds	r6, r2, #1
 800975e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009760:	7852      	ldrb	r2, [r2, #1]
 8009762:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009766:	f1be 0f09 	cmp.w	lr, #9
 800976a:	d939      	bls.n	80097e0 <_strtod_l+0x340>
 800976c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800976e:	1a76      	subs	r6, r6, r1
 8009770:	2e08      	cmp	r6, #8
 8009772:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009776:	dc03      	bgt.n	8009780 <_strtod_l+0x2e0>
 8009778:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800977a:	4588      	cmp	r8, r1
 800977c:	bfa8      	it	ge
 800977e:	4688      	movge	r8, r1
 8009780:	f1bc 0f00 	cmp.w	ip, #0
 8009784:	d001      	beq.n	800978a <_strtod_l+0x2ea>
 8009786:	f1c8 0800 	rsb	r8, r8, #0
 800978a:	2d00      	cmp	r5, #0
 800978c:	d14e      	bne.n	800982c <_strtod_l+0x38c>
 800978e:	9908      	ldr	r1, [sp, #32]
 8009790:	4308      	orrs	r0, r1
 8009792:	f47f aebe 	bne.w	8009512 <_strtod_l+0x72>
 8009796:	2b00      	cmp	r3, #0
 8009798:	f47f aed4 	bne.w	8009544 <_strtod_l+0xa4>
 800979c:	2a69      	cmp	r2, #105	@ 0x69
 800979e:	d028      	beq.n	80097f2 <_strtod_l+0x352>
 80097a0:	dc25      	bgt.n	80097ee <_strtod_l+0x34e>
 80097a2:	2a49      	cmp	r2, #73	@ 0x49
 80097a4:	d025      	beq.n	80097f2 <_strtod_l+0x352>
 80097a6:	2a4e      	cmp	r2, #78	@ 0x4e
 80097a8:	f47f aecc 	bne.w	8009544 <_strtod_l+0xa4>
 80097ac:	4999      	ldr	r1, [pc, #612]	@ (8009a14 <_strtod_l+0x574>)
 80097ae:	a819      	add	r0, sp, #100	@ 0x64
 80097b0:	f001 fb8a 	bl	800aec8 <__match>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	f43f aec5 	beq.w	8009544 <_strtod_l+0xa4>
 80097ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b28      	cmp	r3, #40	@ 0x28
 80097c0:	d12e      	bne.n	8009820 <_strtod_l+0x380>
 80097c2:	4995      	ldr	r1, [pc, #596]	@ (8009a18 <_strtod_l+0x578>)
 80097c4:	aa1c      	add	r2, sp, #112	@ 0x70
 80097c6:	a819      	add	r0, sp, #100	@ 0x64
 80097c8:	f001 fb92 	bl	800aef0 <__hexnan>
 80097cc:	2805      	cmp	r0, #5
 80097ce:	d127      	bne.n	8009820 <_strtod_l+0x380>
 80097d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80097d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80097da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80097de:	e698      	b.n	8009512 <_strtod_l+0x72>
 80097e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097e2:	fb08 2101 	mla	r1, r8, r1, r2
 80097e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80097ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80097ec:	e7b5      	b.n	800975a <_strtod_l+0x2ba>
 80097ee:	2a6e      	cmp	r2, #110	@ 0x6e
 80097f0:	e7da      	b.n	80097a8 <_strtod_l+0x308>
 80097f2:	498a      	ldr	r1, [pc, #552]	@ (8009a1c <_strtod_l+0x57c>)
 80097f4:	a819      	add	r0, sp, #100	@ 0x64
 80097f6:	f001 fb67 	bl	800aec8 <__match>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	f43f aea2 	beq.w	8009544 <_strtod_l+0xa4>
 8009800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009802:	4987      	ldr	r1, [pc, #540]	@ (8009a20 <_strtod_l+0x580>)
 8009804:	3b01      	subs	r3, #1
 8009806:	a819      	add	r0, sp, #100	@ 0x64
 8009808:	9319      	str	r3, [sp, #100]	@ 0x64
 800980a:	f001 fb5d 	bl	800aec8 <__match>
 800980e:	b910      	cbnz	r0, 8009816 <_strtod_l+0x376>
 8009810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009812:	3301      	adds	r3, #1
 8009814:	9319      	str	r3, [sp, #100]	@ 0x64
 8009816:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009a24 <_strtod_l+0x584>
 800981a:	f04f 0a00 	mov.w	sl, #0
 800981e:	e678      	b.n	8009512 <_strtod_l+0x72>
 8009820:	4881      	ldr	r0, [pc, #516]	@ (8009a28 <_strtod_l+0x588>)
 8009822:	f001 f88f 	bl	800a944 <nan>
 8009826:	4682      	mov	sl, r0
 8009828:	468b      	mov	fp, r1
 800982a:	e672      	b.n	8009512 <_strtod_l+0x72>
 800982c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800982e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009830:	eba8 0303 	sub.w	r3, r8, r3
 8009834:	f1b9 0f00 	cmp.w	r9, #0
 8009838:	bf08      	it	eq
 800983a:	46a9      	moveq	r9, r5
 800983c:	2d10      	cmp	r5, #16
 800983e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009840:	462c      	mov	r4, r5
 8009842:	bfa8      	it	ge
 8009844:	2410      	movge	r4, #16
 8009846:	f7f6 fe45 	bl	80004d4 <__aeabi_ui2d>
 800984a:	2d09      	cmp	r5, #9
 800984c:	4682      	mov	sl, r0
 800984e:	468b      	mov	fp, r1
 8009850:	dc11      	bgt.n	8009876 <_strtod_l+0x3d6>
 8009852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009854:	2b00      	cmp	r3, #0
 8009856:	f43f ae5c 	beq.w	8009512 <_strtod_l+0x72>
 800985a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800985c:	dd76      	ble.n	800994c <_strtod_l+0x4ac>
 800985e:	2b16      	cmp	r3, #22
 8009860:	dc5d      	bgt.n	800991e <_strtod_l+0x47e>
 8009862:	4972      	ldr	r1, [pc, #456]	@ (8009a2c <_strtod_l+0x58c>)
 8009864:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800986c:	4652      	mov	r2, sl
 800986e:	465b      	mov	r3, fp
 8009870:	f7f6 feaa 	bl	80005c8 <__aeabi_dmul>
 8009874:	e7d7      	b.n	8009826 <_strtod_l+0x386>
 8009876:	4b6d      	ldr	r3, [pc, #436]	@ (8009a2c <_strtod_l+0x58c>)
 8009878:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800987c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009880:	f7f6 fea2 	bl	80005c8 <__aeabi_dmul>
 8009884:	4682      	mov	sl, r0
 8009886:	4638      	mov	r0, r7
 8009888:	468b      	mov	fp, r1
 800988a:	f7f6 fe23 	bl	80004d4 <__aeabi_ui2d>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4650      	mov	r0, sl
 8009894:	4659      	mov	r1, fp
 8009896:	f7f6 fce1 	bl	800025c <__adddf3>
 800989a:	2d0f      	cmp	r5, #15
 800989c:	4682      	mov	sl, r0
 800989e:	468b      	mov	fp, r1
 80098a0:	ddd7      	ble.n	8009852 <_strtod_l+0x3b2>
 80098a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a4:	1b2c      	subs	r4, r5, r4
 80098a6:	441c      	add	r4, r3
 80098a8:	2c00      	cmp	r4, #0
 80098aa:	f340 8093 	ble.w	80099d4 <_strtod_l+0x534>
 80098ae:	f014 030f 	ands.w	r3, r4, #15
 80098b2:	d00a      	beq.n	80098ca <_strtod_l+0x42a>
 80098b4:	495d      	ldr	r1, [pc, #372]	@ (8009a2c <_strtod_l+0x58c>)
 80098b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098ba:	4652      	mov	r2, sl
 80098bc:	465b      	mov	r3, fp
 80098be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c2:	f7f6 fe81 	bl	80005c8 <__aeabi_dmul>
 80098c6:	4682      	mov	sl, r0
 80098c8:	468b      	mov	fp, r1
 80098ca:	f034 040f 	bics.w	r4, r4, #15
 80098ce:	d073      	beq.n	80099b8 <_strtod_l+0x518>
 80098d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80098d4:	dd49      	ble.n	800996a <_strtod_l+0x4ca>
 80098d6:	2400      	movs	r4, #0
 80098d8:	46a0      	mov	r8, r4
 80098da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80098dc:	46a1      	mov	r9, r4
 80098de:	9a05      	ldr	r2, [sp, #20]
 80098e0:	f8df b140 	ldr.w	fp, [pc, #320]	@ 8009a24 <_strtod_l+0x584>
 80098e4:	2322      	movs	r3, #34	@ 0x22
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	f04f 0a00 	mov.w	sl, #0
 80098ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f43f ae0f 	beq.w	8009512 <_strtod_l+0x72>
 80098f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098f6:	9805      	ldr	r0, [sp, #20]
 80098f8:	f7ff f94e 	bl	8008b98 <_Bfree>
 80098fc:	9805      	ldr	r0, [sp, #20]
 80098fe:	4649      	mov	r1, r9
 8009900:	f7ff f94a 	bl	8008b98 <_Bfree>
 8009904:	9805      	ldr	r0, [sp, #20]
 8009906:	4641      	mov	r1, r8
 8009908:	f7ff f946 	bl	8008b98 <_Bfree>
 800990c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800990e:	9805      	ldr	r0, [sp, #20]
 8009910:	f7ff f942 	bl	8008b98 <_Bfree>
 8009914:	9805      	ldr	r0, [sp, #20]
 8009916:	4621      	mov	r1, r4
 8009918:	f7ff f93e 	bl	8008b98 <_Bfree>
 800991c:	e5f9      	b.n	8009512 <_strtod_l+0x72>
 800991e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009920:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009924:	4293      	cmp	r3, r2
 8009926:	dbbc      	blt.n	80098a2 <_strtod_l+0x402>
 8009928:	4c40      	ldr	r4, [pc, #256]	@ (8009a2c <_strtod_l+0x58c>)
 800992a:	f1c5 050f 	rsb	r5, r5, #15
 800992e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009932:	4652      	mov	r2, sl
 8009934:	465b      	mov	r3, fp
 8009936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800993a:	f7f6 fe45 	bl	80005c8 <__aeabi_dmul>
 800993e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009940:	1b5d      	subs	r5, r3, r5
 8009942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009946:	e9d4 2300 	ldrd	r2, r3, [r4]
 800994a:	e791      	b.n	8009870 <_strtod_l+0x3d0>
 800994c:	3316      	adds	r3, #22
 800994e:	dba8      	blt.n	80098a2 <_strtod_l+0x402>
 8009950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009952:	eba3 0808 	sub.w	r8, r3, r8
 8009956:	4b35      	ldr	r3, [pc, #212]	@ (8009a2c <_strtod_l+0x58c>)
 8009958:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800995c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009960:	4650      	mov	r0, sl
 8009962:	4659      	mov	r1, fp
 8009964:	f7f6 ff5a 	bl	800081c <__aeabi_ddiv>
 8009968:	e75d      	b.n	8009826 <_strtod_l+0x386>
 800996a:	2300      	movs	r3, #0
 800996c:	4f30      	ldr	r7, [pc, #192]	@ (8009a30 <_strtod_l+0x590>)
 800996e:	1124      	asrs	r4, r4, #4
 8009970:	4650      	mov	r0, sl
 8009972:	4659      	mov	r1, fp
 8009974:	461e      	mov	r6, r3
 8009976:	2c01      	cmp	r4, #1
 8009978:	dc21      	bgt.n	80099be <_strtod_l+0x51e>
 800997a:	b10b      	cbz	r3, 8009980 <_strtod_l+0x4e0>
 800997c:	4682      	mov	sl, r0
 800997e:	468b      	mov	fp, r1
 8009980:	492b      	ldr	r1, [pc, #172]	@ (8009a30 <_strtod_l+0x590>)
 8009982:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009986:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800998a:	4652      	mov	r2, sl
 800998c:	465b      	mov	r3, fp
 800998e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009992:	f7f6 fe19 	bl	80005c8 <__aeabi_dmul>
 8009996:	4b23      	ldr	r3, [pc, #140]	@ (8009a24 <_strtod_l+0x584>)
 8009998:	460a      	mov	r2, r1
 800999a:	400b      	ands	r3, r1
 800999c:	4925      	ldr	r1, [pc, #148]	@ (8009a34 <_strtod_l+0x594>)
 800999e:	428b      	cmp	r3, r1
 80099a0:	4682      	mov	sl, r0
 80099a2:	d898      	bhi.n	80098d6 <_strtod_l+0x436>
 80099a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80099a8:	428b      	cmp	r3, r1
 80099aa:	bf86      	itte	hi
 80099ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009a38 <_strtod_l+0x598>
 80099b0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80099b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80099b8:	2300      	movs	r3, #0
 80099ba:	9308      	str	r3, [sp, #32]
 80099bc:	e076      	b.n	8009aac <_strtod_l+0x60c>
 80099be:	07e2      	lsls	r2, r4, #31
 80099c0:	d504      	bpl.n	80099cc <_strtod_l+0x52c>
 80099c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099c6:	f7f6 fdff 	bl	80005c8 <__aeabi_dmul>
 80099ca:	2301      	movs	r3, #1
 80099cc:	3601      	adds	r6, #1
 80099ce:	1064      	asrs	r4, r4, #1
 80099d0:	3708      	adds	r7, #8
 80099d2:	e7d0      	b.n	8009976 <_strtod_l+0x4d6>
 80099d4:	d0f0      	beq.n	80099b8 <_strtod_l+0x518>
 80099d6:	4264      	negs	r4, r4
 80099d8:	f014 020f 	ands.w	r2, r4, #15
 80099dc:	d00a      	beq.n	80099f4 <_strtod_l+0x554>
 80099de:	4b13      	ldr	r3, [pc, #76]	@ (8009a2c <_strtod_l+0x58c>)
 80099e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099e4:	4650      	mov	r0, sl
 80099e6:	4659      	mov	r1, fp
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f7f6 ff16 	bl	800081c <__aeabi_ddiv>
 80099f0:	4682      	mov	sl, r0
 80099f2:	468b      	mov	fp, r1
 80099f4:	1124      	asrs	r4, r4, #4
 80099f6:	d0df      	beq.n	80099b8 <_strtod_l+0x518>
 80099f8:	2c1f      	cmp	r4, #31
 80099fa:	dd1f      	ble.n	8009a3c <_strtod_l+0x59c>
 80099fc:	2400      	movs	r4, #0
 80099fe:	46a0      	mov	r8, r4
 8009a00:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a02:	46a1      	mov	r9, r4
 8009a04:	9a05      	ldr	r2, [sp, #20]
 8009a06:	2322      	movs	r3, #34	@ 0x22
 8009a08:	f04f 0a00 	mov.w	sl, #0
 8009a0c:	f04f 0b00 	mov.w	fp, #0
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	e76b      	b.n	80098ec <_strtod_l+0x44c>
 8009a14:	0800b826 	.word	0x0800b826
 8009a18:	0800baf0 	.word	0x0800baf0
 8009a1c:	0800b81e 	.word	0x0800b81e
 8009a20:	0800b855 	.word	0x0800b855
 8009a24:	7ff00000 	.word	0x7ff00000
 8009a28:	0800b98e 	.word	0x0800b98e
 8009a2c:	0800ba28 	.word	0x0800ba28
 8009a30:	0800ba00 	.word	0x0800ba00
 8009a34:	7ca00000 	.word	0x7ca00000
 8009a38:	7fefffff 	.word	0x7fefffff
 8009a3c:	f014 0310 	ands.w	r3, r4, #16
 8009a40:	bf18      	it	ne
 8009a42:	236a      	movne	r3, #106	@ 0x6a
 8009a44:	4e78      	ldr	r6, [pc, #480]	@ (8009c28 <_strtod_l+0x788>)
 8009a46:	9308      	str	r3, [sp, #32]
 8009a48:	4650      	mov	r0, sl
 8009a4a:	4659      	mov	r1, fp
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	07e7      	lsls	r7, r4, #31
 8009a50:	d504      	bpl.n	8009a5c <_strtod_l+0x5bc>
 8009a52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a56:	f7f6 fdb7 	bl	80005c8 <__aeabi_dmul>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	1064      	asrs	r4, r4, #1
 8009a5e:	f106 0608 	add.w	r6, r6, #8
 8009a62:	d1f4      	bne.n	8009a4e <_strtod_l+0x5ae>
 8009a64:	b10b      	cbz	r3, 8009a6a <_strtod_l+0x5ca>
 8009a66:	4682      	mov	sl, r0
 8009a68:	468b      	mov	fp, r1
 8009a6a:	9b08      	ldr	r3, [sp, #32]
 8009a6c:	b1b3      	cbz	r3, 8009a9c <_strtod_l+0x5fc>
 8009a6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	4659      	mov	r1, fp
 8009a7a:	dd0f      	ble.n	8009a9c <_strtod_l+0x5fc>
 8009a7c:	2b1f      	cmp	r3, #31
 8009a7e:	dd58      	ble.n	8009b32 <_strtod_l+0x692>
 8009a80:	2b34      	cmp	r3, #52	@ 0x34
 8009a82:	bfde      	ittt	le
 8009a84:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009a88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009a8c:	4093      	lslle	r3, r2
 8009a8e:	f04f 0a00 	mov.w	sl, #0
 8009a92:	bfcc      	ite	gt
 8009a94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009a98:	ea03 0b01 	andle.w	fp, r3, r1
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	4650      	mov	r0, sl
 8009aa2:	4659      	mov	r1, fp
 8009aa4:	f7f6 fff8 	bl	8000a98 <__aeabi_dcmpeq>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d1a7      	bne.n	80099fc <_strtod_l+0x55c>
 8009aac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009ab2:	9805      	ldr	r0, [sp, #20]
 8009ab4:	462b      	mov	r3, r5
 8009ab6:	464a      	mov	r2, r9
 8009ab8:	f7ff f8d6 	bl	8008c68 <__s2b>
 8009abc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f43f af09 	beq.w	80098d6 <_strtod_l+0x436>
 8009ac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ac8:	2a00      	cmp	r2, #0
 8009aca:	eba3 0308 	sub.w	r3, r3, r8
 8009ace:	bfa8      	it	ge
 8009ad0:	2300      	movge	r3, #0
 8009ad2:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ad4:	2400      	movs	r4, #0
 8009ad6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009ada:	9316      	str	r3, [sp, #88]	@ 0x58
 8009adc:	46a0      	mov	r8, r4
 8009ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ae0:	9805      	ldr	r0, [sp, #20]
 8009ae2:	6859      	ldr	r1, [r3, #4]
 8009ae4:	f7ff f818 	bl	8008b18 <_Balloc>
 8009ae8:	4681      	mov	r9, r0
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f43f aef7 	beq.w	80098de <_strtod_l+0x43e>
 8009af0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009af2:	691a      	ldr	r2, [r3, #16]
 8009af4:	3202      	adds	r2, #2
 8009af6:	f103 010c 	add.w	r1, r3, #12
 8009afa:	0092      	lsls	r2, r2, #2
 8009afc:	300c      	adds	r0, #12
 8009afe:	f000 ff13 	bl	800a928 <memcpy>
 8009b02:	ab1c      	add	r3, sp, #112	@ 0x70
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	9805      	ldr	r0, [sp, #20]
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	465b      	mov	r3, fp
 8009b10:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009b14:	f7ff fbd4 	bl	80092c0 <__d2b>
 8009b18:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f43f aedf 	beq.w	80098de <_strtod_l+0x43e>
 8009b20:	9805      	ldr	r0, [sp, #20]
 8009b22:	2101      	movs	r1, #1
 8009b24:	f7ff f936 	bl	8008d94 <__i2b>
 8009b28:	4680      	mov	r8, r0
 8009b2a:	b948      	cbnz	r0, 8009b40 <_strtod_l+0x6a0>
 8009b2c:	f04f 0800 	mov.w	r8, #0
 8009b30:	e6d5      	b.n	80098de <_strtod_l+0x43e>
 8009b32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3a:	ea03 0a0a 	and.w	sl, r3, sl
 8009b3e:	e7ad      	b.n	8009a9c <_strtod_l+0x5fc>
 8009b40:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009b42:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009b44:	2d00      	cmp	r5, #0
 8009b46:	bfab      	itete	ge
 8009b48:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009b4a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009b4c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009b4e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009b50:	bfac      	ite	ge
 8009b52:	18ef      	addge	r7, r5, r3
 8009b54:	1b5e      	sublt	r6, r3, r5
 8009b56:	9b08      	ldr	r3, [sp, #32]
 8009b58:	1aed      	subs	r5, r5, r3
 8009b5a:	4415      	add	r5, r2
 8009b5c:	4b33      	ldr	r3, [pc, #204]	@ (8009c2c <_strtod_l+0x78c>)
 8009b5e:	3d01      	subs	r5, #1
 8009b60:	429d      	cmp	r5, r3
 8009b62:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009b66:	da50      	bge.n	8009c0a <_strtod_l+0x76a>
 8009b68:	1b5b      	subs	r3, r3, r5
 8009b6a:	2b1f      	cmp	r3, #31
 8009b6c:	eba2 0203 	sub.w	r2, r2, r3
 8009b70:	f04f 0101 	mov.w	r1, #1
 8009b74:	dc3d      	bgt.n	8009bf2 <_strtod_l+0x752>
 8009b76:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b80:	18bd      	adds	r5, r7, r2
 8009b82:	9b08      	ldr	r3, [sp, #32]
 8009b84:	42af      	cmp	r7, r5
 8009b86:	4416      	add	r6, r2
 8009b88:	441e      	add	r6, r3
 8009b8a:	463b      	mov	r3, r7
 8009b8c:	bfa8      	it	ge
 8009b8e:	462b      	movge	r3, r5
 8009b90:	42b3      	cmp	r3, r6
 8009b92:	bfa8      	it	ge
 8009b94:	4633      	movge	r3, r6
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bfc2      	ittt	gt
 8009b9a:	1aed      	subgt	r5, r5, r3
 8009b9c:	1af6      	subgt	r6, r6, r3
 8009b9e:	1aff      	subgt	r7, r7, r3
 8009ba0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dd16      	ble.n	8009bd4 <_strtod_l+0x734>
 8009ba6:	4641      	mov	r1, r8
 8009ba8:	9805      	ldr	r0, [sp, #20]
 8009baa:	461a      	mov	r2, r3
 8009bac:	f7ff f9aa 	bl	8008f04 <__pow5mult>
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0ba      	beq.n	8009b2c <_strtod_l+0x68c>
 8009bb6:	4601      	mov	r1, r0
 8009bb8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009bba:	9805      	ldr	r0, [sp, #20]
 8009bbc:	f7ff f900 	bl	8008dc0 <__multiply>
 8009bc0:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	f43f ae8b 	beq.w	80098de <_strtod_l+0x43e>
 8009bc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bca:	9805      	ldr	r0, [sp, #20]
 8009bcc:	f7fe ffe4 	bl	8008b98 <_Bfree>
 8009bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bd4:	2d00      	cmp	r5, #0
 8009bd6:	dc1d      	bgt.n	8009c14 <_strtod_l+0x774>
 8009bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dd28      	ble.n	8009c30 <_strtod_l+0x790>
 8009bde:	4649      	mov	r1, r9
 8009be0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009be2:	9805      	ldr	r0, [sp, #20]
 8009be4:	f7ff f98e 	bl	8008f04 <__pow5mult>
 8009be8:	4681      	mov	r9, r0
 8009bea:	bb08      	cbnz	r0, 8009c30 <_strtod_l+0x790>
 8009bec:	f04f 0900 	mov.w	r9, #0
 8009bf0:	e675      	b.n	80098de <_strtod_l+0x43e>
 8009bf2:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009bf6:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009bfa:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009bfe:	35e2      	adds	r5, #226	@ 0xe2
 8009c00:	fa01 f305 	lsl.w	r3, r1, r5
 8009c04:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c06:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009c08:	e7ba      	b.n	8009b80 <_strtod_l+0x6e0>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c0e:	2301      	movs	r3, #1
 8009c10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c12:	e7b5      	b.n	8009b80 <_strtod_l+0x6e0>
 8009c14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c16:	9805      	ldr	r0, [sp, #20]
 8009c18:	462a      	mov	r2, r5
 8009c1a:	f7ff f9cd 	bl	8008fb8 <__lshift>
 8009c1e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d1d9      	bne.n	8009bd8 <_strtod_l+0x738>
 8009c24:	e65b      	b.n	80098de <_strtod_l+0x43e>
 8009c26:	bf00      	nop
 8009c28:	0800bb18 	.word	0x0800bb18
 8009c2c:	fffffc02 	.word	0xfffffc02
 8009c30:	2e00      	cmp	r6, #0
 8009c32:	dd07      	ble.n	8009c44 <_strtod_l+0x7a4>
 8009c34:	4649      	mov	r1, r9
 8009c36:	9805      	ldr	r0, [sp, #20]
 8009c38:	4632      	mov	r2, r6
 8009c3a:	f7ff f9bd 	bl	8008fb8 <__lshift>
 8009c3e:	4681      	mov	r9, r0
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d0d3      	beq.n	8009bec <_strtod_l+0x74c>
 8009c44:	2f00      	cmp	r7, #0
 8009c46:	dd08      	ble.n	8009c5a <_strtod_l+0x7ba>
 8009c48:	4641      	mov	r1, r8
 8009c4a:	9805      	ldr	r0, [sp, #20]
 8009c4c:	463a      	mov	r2, r7
 8009c4e:	f7ff f9b3 	bl	8008fb8 <__lshift>
 8009c52:	4680      	mov	r8, r0
 8009c54:	2800      	cmp	r0, #0
 8009c56:	f43f ae42 	beq.w	80098de <_strtod_l+0x43e>
 8009c5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c5c:	9805      	ldr	r0, [sp, #20]
 8009c5e:	464a      	mov	r2, r9
 8009c60:	f7ff fa32 	bl	80090c8 <__mdiff>
 8009c64:	4604      	mov	r4, r0
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f43f ae39 	beq.w	80098de <_strtod_l+0x43e>
 8009c6c:	68c3      	ldr	r3, [r0, #12]
 8009c6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c70:	2300      	movs	r3, #0
 8009c72:	60c3      	str	r3, [r0, #12]
 8009c74:	4641      	mov	r1, r8
 8009c76:	f7ff fa0b 	bl	8009090 <__mcmp>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	da3d      	bge.n	8009cfa <_strtod_l+0x85a>
 8009c7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c80:	ea53 030a 	orrs.w	r3, r3, sl
 8009c84:	d163      	bne.n	8009d4e <_strtod_l+0x8ae>
 8009c86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d15f      	bne.n	8009d4e <_strtod_l+0x8ae>
 8009c8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c92:	0d1b      	lsrs	r3, r3, #20
 8009c94:	051b      	lsls	r3, r3, #20
 8009c96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c9a:	d958      	bls.n	8009d4e <_strtod_l+0x8ae>
 8009c9c:	6963      	ldr	r3, [r4, #20]
 8009c9e:	b913      	cbnz	r3, 8009ca6 <_strtod_l+0x806>
 8009ca0:	6923      	ldr	r3, [r4, #16]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	dd53      	ble.n	8009d4e <_strtod_l+0x8ae>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	2201      	movs	r2, #1
 8009caa:	9805      	ldr	r0, [sp, #20]
 8009cac:	f7ff f984 	bl	8008fb8 <__lshift>
 8009cb0:	4641      	mov	r1, r8
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	f7ff f9ec 	bl	8009090 <__mcmp>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	dd48      	ble.n	8009d4e <_strtod_l+0x8ae>
 8009cbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009cc0:	9a08      	ldr	r2, [sp, #32]
 8009cc2:	0d1b      	lsrs	r3, r3, #20
 8009cc4:	051b      	lsls	r3, r3, #20
 8009cc6:	2a00      	cmp	r2, #0
 8009cc8:	d062      	beq.n	8009d90 <_strtod_l+0x8f0>
 8009cca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009cce:	d85f      	bhi.n	8009d90 <_strtod_l+0x8f0>
 8009cd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009cd4:	f67f ae96 	bls.w	8009a04 <_strtod_l+0x564>
 8009cd8:	4ba3      	ldr	r3, [pc, #652]	@ (8009f68 <_strtod_l+0xac8>)
 8009cda:	4650      	mov	r0, sl
 8009cdc:	4659      	mov	r1, fp
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f7f6 fc72 	bl	80005c8 <__aeabi_dmul>
 8009ce4:	4ba1      	ldr	r3, [pc, #644]	@ (8009f6c <_strtod_l+0xacc>)
 8009ce6:	400b      	ands	r3, r1
 8009ce8:	4682      	mov	sl, r0
 8009cea:	468b      	mov	fp, r1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f47f ae01 	bne.w	80098f4 <_strtod_l+0x454>
 8009cf2:	9a05      	ldr	r2, [sp, #20]
 8009cf4:	2322      	movs	r3, #34	@ 0x22
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	e5fc      	b.n	80098f4 <_strtod_l+0x454>
 8009cfa:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009cfe:	d165      	bne.n	8009dcc <_strtod_l+0x92c>
 8009d00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d06:	b35a      	cbz	r2, 8009d60 <_strtod_l+0x8c0>
 8009d08:	4a99      	ldr	r2, [pc, #612]	@ (8009f70 <_strtod_l+0xad0>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d12b      	bne.n	8009d66 <_strtod_l+0x8c6>
 8009d0e:	9b08      	ldr	r3, [sp, #32]
 8009d10:	4651      	mov	r1, sl
 8009d12:	b303      	cbz	r3, 8009d56 <_strtod_l+0x8b6>
 8009d14:	4b95      	ldr	r3, [pc, #596]	@ (8009f6c <_strtod_l+0xacc>)
 8009d16:	465a      	mov	r2, fp
 8009d18:	4013      	ands	r3, r2
 8009d1a:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d22:	d81b      	bhi.n	8009d5c <_strtod_l+0x8bc>
 8009d24:	0d1b      	lsrs	r3, r3, #20
 8009d26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2e:	4299      	cmp	r1, r3
 8009d30:	d119      	bne.n	8009d66 <_strtod_l+0x8c6>
 8009d32:	4b90      	ldr	r3, [pc, #576]	@ (8009f74 <_strtod_l+0xad4>)
 8009d34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d102      	bne.n	8009d40 <_strtod_l+0x8a0>
 8009d3a:	3101      	adds	r1, #1
 8009d3c:	f43f adcf 	beq.w	80098de <_strtod_l+0x43e>
 8009d40:	4b8a      	ldr	r3, [pc, #552]	@ (8009f6c <_strtod_l+0xacc>)
 8009d42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d44:	401a      	ands	r2, r3
 8009d46:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009d4a:	f04f 0a00 	mov.w	sl, #0
 8009d4e:	9b08      	ldr	r3, [sp, #32]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1c1      	bne.n	8009cd8 <_strtod_l+0x838>
 8009d54:	e5ce      	b.n	80098f4 <_strtod_l+0x454>
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d5a:	e7e8      	b.n	8009d2e <_strtod_l+0x88e>
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	e7e6      	b.n	8009d2e <_strtod_l+0x88e>
 8009d60:	ea53 030a 	orrs.w	r3, r3, sl
 8009d64:	d0aa      	beq.n	8009cbc <_strtod_l+0x81c>
 8009d66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d68:	b1db      	cbz	r3, 8009da2 <_strtod_l+0x902>
 8009d6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d6c:	4213      	tst	r3, r2
 8009d6e:	d0ee      	beq.n	8009d4e <_strtod_l+0x8ae>
 8009d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d72:	9a08      	ldr	r2, [sp, #32]
 8009d74:	4650      	mov	r0, sl
 8009d76:	4659      	mov	r1, fp
 8009d78:	b1bb      	cbz	r3, 8009daa <_strtod_l+0x90a>
 8009d7a:	f7ff fb6d 	bl	8009458 <sulp>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d86:	f7f6 fa69 	bl	800025c <__adddf3>
 8009d8a:	4682      	mov	sl, r0
 8009d8c:	468b      	mov	fp, r1
 8009d8e:	e7de      	b.n	8009d4e <_strtod_l+0x8ae>
 8009d90:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009d94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d9c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009da0:	e7d5      	b.n	8009d4e <_strtod_l+0x8ae>
 8009da2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009da4:	ea13 0f0a 	tst.w	r3, sl
 8009da8:	e7e1      	b.n	8009d6e <_strtod_l+0x8ce>
 8009daa:	f7ff fb55 	bl	8009458 <sulp>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009db6:	f7f6 fa4f 	bl	8000258 <__aeabi_dsub>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4682      	mov	sl, r0
 8009dc0:	468b      	mov	fp, r1
 8009dc2:	f7f6 fe69 	bl	8000a98 <__aeabi_dcmpeq>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d0c1      	beq.n	8009d4e <_strtod_l+0x8ae>
 8009dca:	e61b      	b.n	8009a04 <_strtod_l+0x564>
 8009dcc:	4641      	mov	r1, r8
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f7ff face 	bl	8009370 <__ratio>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460f      	mov	r7, r1
 8009dde:	f7f6 fe6f 	bl	8000ac0 <__aeabi_dcmple>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d06d      	beq.n	8009ec2 <_strtod_l+0xa22>
 8009de6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d178      	bne.n	8009ede <_strtod_l+0xa3e>
 8009dec:	f1ba 0f00 	cmp.w	sl, #0
 8009df0:	d156      	bne.n	8009ea0 <_strtod_l+0xa00>
 8009df2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d158      	bne.n	8009eae <_strtod_l+0xa0e>
 8009dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8009f78 <_strtod_l+0xad8>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	4630      	mov	r0, r6
 8009e02:	4639      	mov	r1, r7
 8009e04:	f7f6 fe52 	bl	8000aac <__aeabi_dcmplt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d157      	bne.n	8009ebc <_strtod_l+0xa1c>
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4b5a      	ldr	r3, [pc, #360]	@ (8009f7c <_strtod_l+0xadc>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	f7f6 fbd8 	bl	80005c8 <__aeabi_dmul>
 8009e18:	4606      	mov	r6, r0
 8009e1a:	460f      	mov	r7, r1
 8009e1c:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009e20:	9606      	str	r6, [sp, #24]
 8009e22:	9307      	str	r3, [sp, #28]
 8009e24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e28:	4d50      	ldr	r5, [pc, #320]	@ (8009f6c <_strtod_l+0xacc>)
 8009e2a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009e2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e30:	401d      	ands	r5, r3
 8009e32:	4b53      	ldr	r3, [pc, #332]	@ (8009f80 <_strtod_l+0xae0>)
 8009e34:	429d      	cmp	r5, r3
 8009e36:	f040 80a9 	bne.w	8009f8c <_strtod_l+0xaec>
 8009e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e3c:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009e40:	4650      	mov	r0, sl
 8009e42:	4659      	mov	r1, fp
 8009e44:	f7ff f9d2 	bl	80091ec <__ulp>
 8009e48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e4c:	f7f6 fbbc 	bl	80005c8 <__aeabi_dmul>
 8009e50:	4652      	mov	r2, sl
 8009e52:	465b      	mov	r3, fp
 8009e54:	f7f6 fa02 	bl	800025c <__adddf3>
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4944      	ldr	r1, [pc, #272]	@ (8009f6c <_strtod_l+0xacc>)
 8009e5c:	4a49      	ldr	r2, [pc, #292]	@ (8009f84 <_strtod_l+0xae4>)
 8009e5e:	4019      	ands	r1, r3
 8009e60:	4291      	cmp	r1, r2
 8009e62:	4682      	mov	sl, r0
 8009e64:	d942      	bls.n	8009eec <_strtod_l+0xa4c>
 8009e66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e68:	4b42      	ldr	r3, [pc, #264]	@ (8009f74 <_strtod_l+0xad4>)
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d103      	bne.n	8009e76 <_strtod_l+0x9d6>
 8009e6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e70:	3301      	adds	r3, #1
 8009e72:	f43f ad34 	beq.w	80098de <_strtod_l+0x43e>
 8009e76:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8009f74 <_strtod_l+0xad4>
 8009e7a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009e7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e80:	9805      	ldr	r0, [sp, #20]
 8009e82:	f7fe fe89 	bl	8008b98 <_Bfree>
 8009e86:	9805      	ldr	r0, [sp, #20]
 8009e88:	4649      	mov	r1, r9
 8009e8a:	f7fe fe85 	bl	8008b98 <_Bfree>
 8009e8e:	9805      	ldr	r0, [sp, #20]
 8009e90:	4641      	mov	r1, r8
 8009e92:	f7fe fe81 	bl	8008b98 <_Bfree>
 8009e96:	9805      	ldr	r0, [sp, #20]
 8009e98:	4621      	mov	r1, r4
 8009e9a:	f7fe fe7d 	bl	8008b98 <_Bfree>
 8009e9e:	e61e      	b.n	8009ade <_strtod_l+0x63e>
 8009ea0:	f1ba 0f01 	cmp.w	sl, #1
 8009ea4:	d103      	bne.n	8009eae <_strtod_l+0xa0e>
 8009ea6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f43f adab 	beq.w	8009a04 <_strtod_l+0x564>
 8009eae:	4b36      	ldr	r3, [pc, #216]	@ (8009f88 <_strtod_l+0xae8>)
 8009eb0:	4f31      	ldr	r7, [pc, #196]	@ (8009f78 <_strtod_l+0xad8>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009eb8:	2600      	movs	r6, #0
 8009eba:	e7b3      	b.n	8009e24 <_strtod_l+0x984>
 8009ebc:	4f2f      	ldr	r7, [pc, #188]	@ (8009f7c <_strtod_l+0xadc>)
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	e7ac      	b.n	8009e1c <_strtod_l+0x97c>
 8009ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8009f7c <_strtod_l+0xadc>)
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f7f6 fb7d 	bl	80005c8 <__aeabi_dmul>
 8009ece:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0a1      	beq.n	8009e1c <_strtod_l+0x97c>
 8009ed8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009edc:	e7a2      	b.n	8009e24 <_strtod_l+0x984>
 8009ede:	4b26      	ldr	r3, [pc, #152]	@ (8009f78 <_strtod_l+0xad8>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ee6:	4616      	mov	r6, r2
 8009ee8:	461f      	mov	r7, r3
 8009eea:	e79b      	b.n	8009e24 <_strtod_l+0x984>
 8009eec:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009ef0:	9b08      	ldr	r3, [sp, #32]
 8009ef2:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1c1      	bne.n	8009e7e <_strtod_l+0x9de>
 8009efa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009efe:	0d1b      	lsrs	r3, r3, #20
 8009f00:	051b      	lsls	r3, r3, #20
 8009f02:	429d      	cmp	r5, r3
 8009f04:	d1bb      	bne.n	8009e7e <_strtod_l+0x9de>
 8009f06:	4630      	mov	r0, r6
 8009f08:	4639      	mov	r1, r7
 8009f0a:	f7f7 f91b 	bl	8001144 <__aeabi_d2lz>
 8009f0e:	f7f6 fb2d 	bl	800056c <__aeabi_l2d>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	4630      	mov	r0, r6
 8009f18:	4639      	mov	r1, r7
 8009f1a:	f7f6 f99d 	bl	8000258 <__aeabi_dsub>
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4602      	mov	r2, r0
 8009f22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009f26:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f2c:	ea46 060a 	orr.w	r6, r6, sl
 8009f30:	431e      	orrs	r6, r3
 8009f32:	d068      	beq.n	800a006 <_strtod_l+0xb66>
 8009f34:	a308      	add	r3, pc, #32	@ (adr r3, 8009f58 <_strtod_l+0xab8>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f7f6 fdb7 	bl	8000aac <__aeabi_dcmplt>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f47f acd8 	bne.w	80098f4 <_strtod_l+0x454>
 8009f44:	a306      	add	r3, pc, #24	@ (adr r3, 8009f60 <_strtod_l+0xac0>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f4e:	f7f6 fdcb 	bl	8000ae8 <__aeabi_dcmpgt>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d093      	beq.n	8009e7e <_strtod_l+0x9de>
 8009f56:	e4cd      	b.n	80098f4 <_strtod_l+0x454>
 8009f58:	94a03595 	.word	0x94a03595
 8009f5c:	3fdfffff 	.word	0x3fdfffff
 8009f60:	35afe535 	.word	0x35afe535
 8009f64:	3fe00000 	.word	0x3fe00000
 8009f68:	39500000 	.word	0x39500000
 8009f6c:	7ff00000 	.word	0x7ff00000
 8009f70:	000fffff 	.word	0x000fffff
 8009f74:	7fefffff 	.word	0x7fefffff
 8009f78:	3ff00000 	.word	0x3ff00000
 8009f7c:	3fe00000 	.word	0x3fe00000
 8009f80:	7fe00000 	.word	0x7fe00000
 8009f84:	7c9fffff 	.word	0x7c9fffff
 8009f88:	bff00000 	.word	0xbff00000
 8009f8c:	9b08      	ldr	r3, [sp, #32]
 8009f8e:	b323      	cbz	r3, 8009fda <_strtod_l+0xb3a>
 8009f90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009f94:	d821      	bhi.n	8009fda <_strtod_l+0xb3a>
 8009f96:	a328      	add	r3, pc, #160	@ (adr r3, 800a038 <_strtod_l+0xb98>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	4639      	mov	r1, r7
 8009fa0:	f7f6 fd8e 	bl	8000ac0 <__aeabi_dcmple>
 8009fa4:	b1a0      	cbz	r0, 8009fd0 <_strtod_l+0xb30>
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7f6 fde5 	bl	8000b78 <__aeabi_d2uiz>
 8009fae:	2801      	cmp	r0, #1
 8009fb0:	bf38      	it	cc
 8009fb2:	2001      	movcc	r0, #1
 8009fb4:	f7f6 fa8e 	bl	80004d4 <__aeabi_ui2d>
 8009fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460f      	mov	r7, r1
 8009fbe:	b9fb      	cbnz	r3, 800a000 <_strtod_l+0xb60>
 8009fc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009fc4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009fc6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009fc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009fcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009fd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009fd6:	1b5b      	subs	r3, r3, r5
 8009fd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009fda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009fe2:	f7ff f903 	bl	80091ec <__ulp>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4650      	mov	r0, sl
 8009fec:	4659      	mov	r1, fp
 8009fee:	f7f6 faeb 	bl	80005c8 <__aeabi_dmul>
 8009ff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009ff6:	f7f6 f931 	bl	800025c <__adddf3>
 8009ffa:	4682      	mov	sl, r0
 8009ffc:	468b      	mov	fp, r1
 8009ffe:	e777      	b.n	8009ef0 <_strtod_l+0xa50>
 800a000:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a004:	e7e0      	b.n	8009fc8 <_strtod_l+0xb28>
 800a006:	a30e      	add	r3, pc, #56	@ (adr r3, 800a040 <_strtod_l+0xba0>)
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f7f6 fd4e 	bl	8000aac <__aeabi_dcmplt>
 800a010:	e79f      	b.n	8009f52 <_strtod_l+0xab2>
 800a012:	2300      	movs	r3, #0
 800a014:	930e      	str	r3, [sp, #56]	@ 0x38
 800a016:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a018:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	f7ff ba7d 	b.w	800951a <_strtod_l+0x7a>
 800a020:	2a65      	cmp	r2, #101	@ 0x65
 800a022:	f43f ab76 	beq.w	8009712 <_strtod_l+0x272>
 800a026:	2a45      	cmp	r2, #69	@ 0x45
 800a028:	f43f ab73 	beq.w	8009712 <_strtod_l+0x272>
 800a02c:	2301      	movs	r3, #1
 800a02e:	f7ff bbae 	b.w	800978e <_strtod_l+0x2ee>
 800a032:	bf00      	nop
 800a034:	f3af 8000 	nop.w
 800a038:	ffc00000 	.word	0xffc00000
 800a03c:	41dfffff 	.word	0x41dfffff
 800a040:	94a03595 	.word	0x94a03595
 800a044:	3fcfffff 	.word	0x3fcfffff

0800a048 <_strtod_r>:
 800a048:	4b01      	ldr	r3, [pc, #4]	@ (800a050 <_strtod_r+0x8>)
 800a04a:	f7ff ba29 	b.w	80094a0 <_strtod_l>
 800a04e:	bf00      	nop
 800a050:	20000074 	.word	0x20000074

0800a054 <_strtol_l.isra.0>:
 800a054:	2b24      	cmp	r3, #36	@ 0x24
 800a056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a05a:	4686      	mov	lr, r0
 800a05c:	4690      	mov	r8, r2
 800a05e:	d801      	bhi.n	800a064 <_strtol_l.isra.0+0x10>
 800a060:	2b01      	cmp	r3, #1
 800a062:	d106      	bne.n	800a072 <_strtol_l.isra.0+0x1e>
 800a064:	f7fd fdcc 	bl	8007c00 <__errno>
 800a068:	2316      	movs	r3, #22
 800a06a:	6003      	str	r3, [r0, #0]
 800a06c:	2000      	movs	r0, #0
 800a06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a072:	4834      	ldr	r0, [pc, #208]	@ (800a144 <_strtol_l.isra.0+0xf0>)
 800a074:	460d      	mov	r5, r1
 800a076:	462a      	mov	r2, r5
 800a078:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a07c:	5d06      	ldrb	r6, [r0, r4]
 800a07e:	f016 0608 	ands.w	r6, r6, #8
 800a082:	d1f8      	bne.n	800a076 <_strtol_l.isra.0+0x22>
 800a084:	2c2d      	cmp	r4, #45	@ 0x2d
 800a086:	d110      	bne.n	800a0aa <_strtol_l.isra.0+0x56>
 800a088:	782c      	ldrb	r4, [r5, #0]
 800a08a:	2601      	movs	r6, #1
 800a08c:	1c95      	adds	r5, r2, #2
 800a08e:	f033 0210 	bics.w	r2, r3, #16
 800a092:	d115      	bne.n	800a0c0 <_strtol_l.isra.0+0x6c>
 800a094:	2c30      	cmp	r4, #48	@ 0x30
 800a096:	d10d      	bne.n	800a0b4 <_strtol_l.isra.0+0x60>
 800a098:	782a      	ldrb	r2, [r5, #0]
 800a09a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a09e:	2a58      	cmp	r2, #88	@ 0x58
 800a0a0:	d108      	bne.n	800a0b4 <_strtol_l.isra.0+0x60>
 800a0a2:	786c      	ldrb	r4, [r5, #1]
 800a0a4:	3502      	adds	r5, #2
 800a0a6:	2310      	movs	r3, #16
 800a0a8:	e00a      	b.n	800a0c0 <_strtol_l.isra.0+0x6c>
 800a0aa:	2c2b      	cmp	r4, #43	@ 0x2b
 800a0ac:	bf04      	itt	eq
 800a0ae:	782c      	ldrbeq	r4, [r5, #0]
 800a0b0:	1c95      	addeq	r5, r2, #2
 800a0b2:	e7ec      	b.n	800a08e <_strtol_l.isra.0+0x3a>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1f6      	bne.n	800a0a6 <_strtol_l.isra.0+0x52>
 800a0b8:	2c30      	cmp	r4, #48	@ 0x30
 800a0ba:	bf14      	ite	ne
 800a0bc:	230a      	movne	r3, #10
 800a0be:	2308      	moveq	r3, #8
 800a0c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a0c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	fbbc f9f3 	udiv	r9, ip, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a0d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a0d8:	2f09      	cmp	r7, #9
 800a0da:	d80f      	bhi.n	800a0fc <_strtol_l.isra.0+0xa8>
 800a0dc:	463c      	mov	r4, r7
 800a0de:	42a3      	cmp	r3, r4
 800a0e0:	dd1b      	ble.n	800a11a <_strtol_l.isra.0+0xc6>
 800a0e2:	1c57      	adds	r7, r2, #1
 800a0e4:	d007      	beq.n	800a0f6 <_strtol_l.isra.0+0xa2>
 800a0e6:	4581      	cmp	r9, r0
 800a0e8:	d314      	bcc.n	800a114 <_strtol_l.isra.0+0xc0>
 800a0ea:	d101      	bne.n	800a0f0 <_strtol_l.isra.0+0x9c>
 800a0ec:	45a2      	cmp	sl, r4
 800a0ee:	db11      	blt.n	800a114 <_strtol_l.isra.0+0xc0>
 800a0f0:	fb00 4003 	mla	r0, r0, r3, r4
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0fa:	e7eb      	b.n	800a0d4 <_strtol_l.isra.0+0x80>
 800a0fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a100:	2f19      	cmp	r7, #25
 800a102:	d801      	bhi.n	800a108 <_strtol_l.isra.0+0xb4>
 800a104:	3c37      	subs	r4, #55	@ 0x37
 800a106:	e7ea      	b.n	800a0de <_strtol_l.isra.0+0x8a>
 800a108:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a10c:	2f19      	cmp	r7, #25
 800a10e:	d804      	bhi.n	800a11a <_strtol_l.isra.0+0xc6>
 800a110:	3c57      	subs	r4, #87	@ 0x57
 800a112:	e7e4      	b.n	800a0de <_strtol_l.isra.0+0x8a>
 800a114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a118:	e7ed      	b.n	800a0f6 <_strtol_l.isra.0+0xa2>
 800a11a:	1c53      	adds	r3, r2, #1
 800a11c:	d108      	bne.n	800a130 <_strtol_l.isra.0+0xdc>
 800a11e:	2322      	movs	r3, #34	@ 0x22
 800a120:	f8ce 3000 	str.w	r3, [lr]
 800a124:	4660      	mov	r0, ip
 800a126:	f1b8 0f00 	cmp.w	r8, #0
 800a12a:	d0a0      	beq.n	800a06e <_strtol_l.isra.0+0x1a>
 800a12c:	1e69      	subs	r1, r5, #1
 800a12e:	e006      	b.n	800a13e <_strtol_l.isra.0+0xea>
 800a130:	b106      	cbz	r6, 800a134 <_strtol_l.isra.0+0xe0>
 800a132:	4240      	negs	r0, r0
 800a134:	f1b8 0f00 	cmp.w	r8, #0
 800a138:	d099      	beq.n	800a06e <_strtol_l.isra.0+0x1a>
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	d1f6      	bne.n	800a12c <_strtol_l.isra.0+0xd8>
 800a13e:	f8c8 1000 	str.w	r1, [r8]
 800a142:	e794      	b.n	800a06e <_strtol_l.isra.0+0x1a>
 800a144:	0800b719 	.word	0x0800b719

0800a148 <_strtol_r>:
 800a148:	f7ff bf84 	b.w	800a054 <_strtol_l.isra.0>

0800a14c <__ssputs_r>:
 800a14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a150:	688e      	ldr	r6, [r1, #8]
 800a152:	461f      	mov	r7, r3
 800a154:	42be      	cmp	r6, r7
 800a156:	680b      	ldr	r3, [r1, #0]
 800a158:	4682      	mov	sl, r0
 800a15a:	460c      	mov	r4, r1
 800a15c:	4690      	mov	r8, r2
 800a15e:	d82d      	bhi.n	800a1bc <__ssputs_r+0x70>
 800a160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a168:	d026      	beq.n	800a1b8 <__ssputs_r+0x6c>
 800a16a:	6965      	ldr	r5, [r4, #20]
 800a16c:	6909      	ldr	r1, [r1, #16]
 800a16e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a172:	eba3 0901 	sub.w	r9, r3, r1
 800a176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a17a:	1c7b      	adds	r3, r7, #1
 800a17c:	444b      	add	r3, r9
 800a17e:	106d      	asrs	r5, r5, #1
 800a180:	429d      	cmp	r5, r3
 800a182:	bf38      	it	cc
 800a184:	461d      	movcc	r5, r3
 800a186:	0553      	lsls	r3, r2, #21
 800a188:	d527      	bpl.n	800a1da <__ssputs_r+0x8e>
 800a18a:	4629      	mov	r1, r5
 800a18c:	f7fe fc38 	bl	8008a00 <_malloc_r>
 800a190:	4606      	mov	r6, r0
 800a192:	b360      	cbz	r0, 800a1ee <__ssputs_r+0xa2>
 800a194:	6921      	ldr	r1, [r4, #16]
 800a196:	464a      	mov	r2, r9
 800a198:	f000 fbc6 	bl	800a928 <memcpy>
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1a6:	81a3      	strh	r3, [r4, #12]
 800a1a8:	6126      	str	r6, [r4, #16]
 800a1aa:	6165      	str	r5, [r4, #20]
 800a1ac:	444e      	add	r6, r9
 800a1ae:	eba5 0509 	sub.w	r5, r5, r9
 800a1b2:	6026      	str	r6, [r4, #0]
 800a1b4:	60a5      	str	r5, [r4, #8]
 800a1b6:	463e      	mov	r6, r7
 800a1b8:	42be      	cmp	r6, r7
 800a1ba:	d900      	bls.n	800a1be <__ssputs_r+0x72>
 800a1bc:	463e      	mov	r6, r7
 800a1be:	6820      	ldr	r0, [r4, #0]
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	f000 fb64 	bl	800a890 <memmove>
 800a1c8:	68a3      	ldr	r3, [r4, #8]
 800a1ca:	1b9b      	subs	r3, r3, r6
 800a1cc:	60a3      	str	r3, [r4, #8]
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	4433      	add	r3, r6
 800a1d2:	6023      	str	r3, [r4, #0]
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1da:	462a      	mov	r2, r5
 800a1dc:	f000 ff35 	bl	800b04a <_realloc_r>
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d1e0      	bne.n	800a1a8 <__ssputs_r+0x5c>
 800a1e6:	6921      	ldr	r1, [r4, #16]
 800a1e8:	4650      	mov	r0, sl
 800a1ea:	f7fe fb95 	bl	8008918 <_free_r>
 800a1ee:	230c      	movs	r3, #12
 800a1f0:	f8ca 3000 	str.w	r3, [sl]
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1fa:	81a3      	strh	r3, [r4, #12]
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a200:	e7e9      	b.n	800a1d6 <__ssputs_r+0x8a>
	...

0800a204 <_svfiprintf_r>:
 800a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a208:	4698      	mov	r8, r3
 800a20a:	898b      	ldrh	r3, [r1, #12]
 800a20c:	061b      	lsls	r3, r3, #24
 800a20e:	b09d      	sub	sp, #116	@ 0x74
 800a210:	4607      	mov	r7, r0
 800a212:	460d      	mov	r5, r1
 800a214:	4614      	mov	r4, r2
 800a216:	d510      	bpl.n	800a23a <_svfiprintf_r+0x36>
 800a218:	690b      	ldr	r3, [r1, #16]
 800a21a:	b973      	cbnz	r3, 800a23a <_svfiprintf_r+0x36>
 800a21c:	2140      	movs	r1, #64	@ 0x40
 800a21e:	f7fe fbef 	bl	8008a00 <_malloc_r>
 800a222:	6028      	str	r0, [r5, #0]
 800a224:	6128      	str	r0, [r5, #16]
 800a226:	b930      	cbnz	r0, 800a236 <_svfiprintf_r+0x32>
 800a228:	230c      	movs	r3, #12
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a230:	b01d      	add	sp, #116	@ 0x74
 800a232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a236:	2340      	movs	r3, #64	@ 0x40
 800a238:	616b      	str	r3, [r5, #20]
 800a23a:	2300      	movs	r3, #0
 800a23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a23e:	2320      	movs	r3, #32
 800a240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a244:	f8cd 800c 	str.w	r8, [sp, #12]
 800a248:	2330      	movs	r3, #48	@ 0x30
 800a24a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a3e8 <_svfiprintf_r+0x1e4>
 800a24e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a252:	f04f 0901 	mov.w	r9, #1
 800a256:	4623      	mov	r3, r4
 800a258:	469a      	mov	sl, r3
 800a25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a25e:	b10a      	cbz	r2, 800a264 <_svfiprintf_r+0x60>
 800a260:	2a25      	cmp	r2, #37	@ 0x25
 800a262:	d1f9      	bne.n	800a258 <_svfiprintf_r+0x54>
 800a264:	ebba 0b04 	subs.w	fp, sl, r4
 800a268:	d00b      	beq.n	800a282 <_svfiprintf_r+0x7e>
 800a26a:	465b      	mov	r3, fp
 800a26c:	4622      	mov	r2, r4
 800a26e:	4629      	mov	r1, r5
 800a270:	4638      	mov	r0, r7
 800a272:	f7ff ff6b 	bl	800a14c <__ssputs_r>
 800a276:	3001      	adds	r0, #1
 800a278:	f000 80a7 	beq.w	800a3ca <_svfiprintf_r+0x1c6>
 800a27c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a27e:	445a      	add	r2, fp
 800a280:	9209      	str	r2, [sp, #36]	@ 0x24
 800a282:	f89a 3000 	ldrb.w	r3, [sl]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 809f 	beq.w	800a3ca <_svfiprintf_r+0x1c6>
 800a28c:	2300      	movs	r3, #0
 800a28e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a296:	f10a 0a01 	add.w	sl, sl, #1
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	9307      	str	r3, [sp, #28]
 800a29e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2a4:	4654      	mov	r4, sl
 800a2a6:	2205      	movs	r2, #5
 800a2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ac:	484e      	ldr	r0, [pc, #312]	@ (800a3e8 <_svfiprintf_r+0x1e4>)
 800a2ae:	f7f5 ff77 	bl	80001a0 <memchr>
 800a2b2:	9a04      	ldr	r2, [sp, #16]
 800a2b4:	b9d8      	cbnz	r0, 800a2ee <_svfiprintf_r+0xea>
 800a2b6:	06d0      	lsls	r0, r2, #27
 800a2b8:	bf44      	itt	mi
 800a2ba:	2320      	movmi	r3, #32
 800a2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2c0:	0711      	lsls	r1, r2, #28
 800a2c2:	bf44      	itt	mi
 800a2c4:	232b      	movmi	r3, #43	@ 0x2b
 800a2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2d0:	d015      	beq.n	800a2fe <_svfiprintf_r+0xfa>
 800a2d2:	9a07      	ldr	r2, [sp, #28]
 800a2d4:	4654      	mov	r4, sl
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	f04f 0c0a 	mov.w	ip, #10
 800a2dc:	4621      	mov	r1, r4
 800a2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2e2:	3b30      	subs	r3, #48	@ 0x30
 800a2e4:	2b09      	cmp	r3, #9
 800a2e6:	d94b      	bls.n	800a380 <_svfiprintf_r+0x17c>
 800a2e8:	b1b0      	cbz	r0, 800a318 <_svfiprintf_r+0x114>
 800a2ea:	9207      	str	r2, [sp, #28]
 800a2ec:	e014      	b.n	800a318 <_svfiprintf_r+0x114>
 800a2ee:	eba0 0308 	sub.w	r3, r0, r8
 800a2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	9304      	str	r3, [sp, #16]
 800a2fa:	46a2      	mov	sl, r4
 800a2fc:	e7d2      	b.n	800a2a4 <_svfiprintf_r+0xa0>
 800a2fe:	9b03      	ldr	r3, [sp, #12]
 800a300:	1d19      	adds	r1, r3, #4
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	9103      	str	r1, [sp, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	bfbb      	ittet	lt
 800a30a:	425b      	neglt	r3, r3
 800a30c:	f042 0202 	orrlt.w	r2, r2, #2
 800a310:	9307      	strge	r3, [sp, #28]
 800a312:	9307      	strlt	r3, [sp, #28]
 800a314:	bfb8      	it	lt
 800a316:	9204      	strlt	r2, [sp, #16]
 800a318:	7823      	ldrb	r3, [r4, #0]
 800a31a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a31c:	d10a      	bne.n	800a334 <_svfiprintf_r+0x130>
 800a31e:	7863      	ldrb	r3, [r4, #1]
 800a320:	2b2a      	cmp	r3, #42	@ 0x2a
 800a322:	d132      	bne.n	800a38a <_svfiprintf_r+0x186>
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	1d1a      	adds	r2, r3, #4
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	9203      	str	r2, [sp, #12]
 800a32c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a330:	3402      	adds	r4, #2
 800a332:	9305      	str	r3, [sp, #20]
 800a334:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a3ec <_svfiprintf_r+0x1e8>
 800a338:	7821      	ldrb	r1, [r4, #0]
 800a33a:	2203      	movs	r2, #3
 800a33c:	4650      	mov	r0, sl
 800a33e:	f7f5 ff2f 	bl	80001a0 <memchr>
 800a342:	b138      	cbz	r0, 800a354 <_svfiprintf_r+0x150>
 800a344:	9b04      	ldr	r3, [sp, #16]
 800a346:	eba0 000a 	sub.w	r0, r0, sl
 800a34a:	2240      	movs	r2, #64	@ 0x40
 800a34c:	4082      	lsls	r2, r0
 800a34e:	4313      	orrs	r3, r2
 800a350:	3401      	adds	r4, #1
 800a352:	9304      	str	r3, [sp, #16]
 800a354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a358:	4825      	ldr	r0, [pc, #148]	@ (800a3f0 <_svfiprintf_r+0x1ec>)
 800a35a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a35e:	2206      	movs	r2, #6
 800a360:	f7f5 ff1e 	bl	80001a0 <memchr>
 800a364:	2800      	cmp	r0, #0
 800a366:	d036      	beq.n	800a3d6 <_svfiprintf_r+0x1d2>
 800a368:	4b22      	ldr	r3, [pc, #136]	@ (800a3f4 <_svfiprintf_r+0x1f0>)
 800a36a:	bb1b      	cbnz	r3, 800a3b4 <_svfiprintf_r+0x1b0>
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	3307      	adds	r3, #7
 800a370:	f023 0307 	bic.w	r3, r3, #7
 800a374:	3308      	adds	r3, #8
 800a376:	9303      	str	r3, [sp, #12]
 800a378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a37a:	4433      	add	r3, r6
 800a37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a37e:	e76a      	b.n	800a256 <_svfiprintf_r+0x52>
 800a380:	fb0c 3202 	mla	r2, ip, r2, r3
 800a384:	460c      	mov	r4, r1
 800a386:	2001      	movs	r0, #1
 800a388:	e7a8      	b.n	800a2dc <_svfiprintf_r+0xd8>
 800a38a:	2300      	movs	r3, #0
 800a38c:	3401      	adds	r4, #1
 800a38e:	9305      	str	r3, [sp, #20]
 800a390:	4619      	mov	r1, r3
 800a392:	f04f 0c0a 	mov.w	ip, #10
 800a396:	4620      	mov	r0, r4
 800a398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a39c:	3a30      	subs	r2, #48	@ 0x30
 800a39e:	2a09      	cmp	r2, #9
 800a3a0:	d903      	bls.n	800a3aa <_svfiprintf_r+0x1a6>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0c6      	beq.n	800a334 <_svfiprintf_r+0x130>
 800a3a6:	9105      	str	r1, [sp, #20]
 800a3a8:	e7c4      	b.n	800a334 <_svfiprintf_r+0x130>
 800a3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e7f0      	b.n	800a396 <_svfiprintf_r+0x192>
 800a3b4:	ab03      	add	r3, sp, #12
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	462a      	mov	r2, r5
 800a3ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a3f8 <_svfiprintf_r+0x1f4>)
 800a3bc:	a904      	add	r1, sp, #16
 800a3be:	4638      	mov	r0, r7
 800a3c0:	f7fc fbce 	bl	8006b60 <_printf_float>
 800a3c4:	1c42      	adds	r2, r0, #1
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	d1d6      	bne.n	800a378 <_svfiprintf_r+0x174>
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	065b      	lsls	r3, r3, #25
 800a3ce:	f53f af2d 	bmi.w	800a22c <_svfiprintf_r+0x28>
 800a3d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3d4:	e72c      	b.n	800a230 <_svfiprintf_r+0x2c>
 800a3d6:	ab03      	add	r3, sp, #12
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	462a      	mov	r2, r5
 800a3dc:	4b06      	ldr	r3, [pc, #24]	@ (800a3f8 <_svfiprintf_r+0x1f4>)
 800a3de:	a904      	add	r1, sp, #16
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	f7fc fe57 	bl	8007094 <_printf_i>
 800a3e6:	e7ed      	b.n	800a3c4 <_svfiprintf_r+0x1c0>
 800a3e8:	0800b93a 	.word	0x0800b93a
 800a3ec:	0800b940 	.word	0x0800b940
 800a3f0:	0800b944 	.word	0x0800b944
 800a3f4:	08006b61 	.word	0x08006b61
 800a3f8:	0800a14d 	.word	0x0800a14d

0800a3fc <__sfputc_r>:
 800a3fc:	6893      	ldr	r3, [r2, #8]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	b410      	push	{r4}
 800a404:	6093      	str	r3, [r2, #8]
 800a406:	da07      	bge.n	800a418 <__sfputc_r+0x1c>
 800a408:	6994      	ldr	r4, [r2, #24]
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	db01      	blt.n	800a412 <__sfputc_r+0x16>
 800a40e:	290a      	cmp	r1, #10
 800a410:	d102      	bne.n	800a418 <__sfputc_r+0x1c>
 800a412:	bc10      	pop	{r4}
 800a414:	f7fd bafb 	b.w	8007a0e <__swbuf_r>
 800a418:	6813      	ldr	r3, [r2, #0]
 800a41a:	1c58      	adds	r0, r3, #1
 800a41c:	6010      	str	r0, [r2, #0]
 800a41e:	7019      	strb	r1, [r3, #0]
 800a420:	4608      	mov	r0, r1
 800a422:	bc10      	pop	{r4}
 800a424:	4770      	bx	lr

0800a426 <__sfputs_r>:
 800a426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a428:	4606      	mov	r6, r0
 800a42a:	460f      	mov	r7, r1
 800a42c:	4614      	mov	r4, r2
 800a42e:	18d5      	adds	r5, r2, r3
 800a430:	42ac      	cmp	r4, r5
 800a432:	d101      	bne.n	800a438 <__sfputs_r+0x12>
 800a434:	2000      	movs	r0, #0
 800a436:	e007      	b.n	800a448 <__sfputs_r+0x22>
 800a438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43c:	463a      	mov	r2, r7
 800a43e:	4630      	mov	r0, r6
 800a440:	f7ff ffdc 	bl	800a3fc <__sfputc_r>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d1f3      	bne.n	800a430 <__sfputs_r+0xa>
 800a448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a44c <_vfiprintf_r>:
 800a44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a450:	460d      	mov	r5, r1
 800a452:	b09d      	sub	sp, #116	@ 0x74
 800a454:	4614      	mov	r4, r2
 800a456:	4698      	mov	r8, r3
 800a458:	4606      	mov	r6, r0
 800a45a:	b118      	cbz	r0, 800a464 <_vfiprintf_r+0x18>
 800a45c:	6a03      	ldr	r3, [r0, #32]
 800a45e:	b90b      	cbnz	r3, 800a464 <_vfiprintf_r+0x18>
 800a460:	f7fd f9ca 	bl	80077f8 <__sinit>
 800a464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a466:	07d9      	lsls	r1, r3, #31
 800a468:	d405      	bmi.n	800a476 <_vfiprintf_r+0x2a>
 800a46a:	89ab      	ldrh	r3, [r5, #12]
 800a46c:	059a      	lsls	r2, r3, #22
 800a46e:	d402      	bmi.n	800a476 <_vfiprintf_r+0x2a>
 800a470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a472:	f7fd fbf0 	bl	8007c56 <__retarget_lock_acquire_recursive>
 800a476:	89ab      	ldrh	r3, [r5, #12]
 800a478:	071b      	lsls	r3, r3, #28
 800a47a:	d501      	bpl.n	800a480 <_vfiprintf_r+0x34>
 800a47c:	692b      	ldr	r3, [r5, #16]
 800a47e:	b99b      	cbnz	r3, 800a4a8 <_vfiprintf_r+0x5c>
 800a480:	4629      	mov	r1, r5
 800a482:	4630      	mov	r0, r6
 800a484:	f7fd fb02 	bl	8007a8c <__swsetup_r>
 800a488:	b170      	cbz	r0, 800a4a8 <_vfiprintf_r+0x5c>
 800a48a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a48c:	07dc      	lsls	r4, r3, #31
 800a48e:	d504      	bpl.n	800a49a <_vfiprintf_r+0x4e>
 800a490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a494:	b01d      	add	sp, #116	@ 0x74
 800a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49a:	89ab      	ldrh	r3, [r5, #12]
 800a49c:	0598      	lsls	r0, r3, #22
 800a49e:	d4f7      	bmi.n	800a490 <_vfiprintf_r+0x44>
 800a4a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4a2:	f7fd fbd9 	bl	8007c58 <__retarget_lock_release_recursive>
 800a4a6:	e7f3      	b.n	800a490 <_vfiprintf_r+0x44>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4ac:	2320      	movs	r3, #32
 800a4ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4b6:	2330      	movs	r3, #48	@ 0x30
 800a4b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a668 <_vfiprintf_r+0x21c>
 800a4bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4c0:	f04f 0901 	mov.w	r9, #1
 800a4c4:	4623      	mov	r3, r4
 800a4c6:	469a      	mov	sl, r3
 800a4c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4cc:	b10a      	cbz	r2, 800a4d2 <_vfiprintf_r+0x86>
 800a4ce:	2a25      	cmp	r2, #37	@ 0x25
 800a4d0:	d1f9      	bne.n	800a4c6 <_vfiprintf_r+0x7a>
 800a4d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a4d6:	d00b      	beq.n	800a4f0 <_vfiprintf_r+0xa4>
 800a4d8:	465b      	mov	r3, fp
 800a4da:	4622      	mov	r2, r4
 800a4dc:	4629      	mov	r1, r5
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7ff ffa1 	bl	800a426 <__sfputs_r>
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	f000 80a7 	beq.w	800a638 <_vfiprintf_r+0x1ec>
 800a4ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4ec:	445a      	add	r2, fp
 800a4ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 809f 	beq.w	800a638 <_vfiprintf_r+0x1ec>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a504:	f10a 0a01 	add.w	sl, sl, #1
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	9307      	str	r3, [sp, #28]
 800a50c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a510:	931a      	str	r3, [sp, #104]	@ 0x68
 800a512:	4654      	mov	r4, sl
 800a514:	2205      	movs	r2, #5
 800a516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51a:	4853      	ldr	r0, [pc, #332]	@ (800a668 <_vfiprintf_r+0x21c>)
 800a51c:	f7f5 fe40 	bl	80001a0 <memchr>
 800a520:	9a04      	ldr	r2, [sp, #16]
 800a522:	b9d8      	cbnz	r0, 800a55c <_vfiprintf_r+0x110>
 800a524:	06d1      	lsls	r1, r2, #27
 800a526:	bf44      	itt	mi
 800a528:	2320      	movmi	r3, #32
 800a52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a52e:	0713      	lsls	r3, r2, #28
 800a530:	bf44      	itt	mi
 800a532:	232b      	movmi	r3, #43	@ 0x2b
 800a534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a538:	f89a 3000 	ldrb.w	r3, [sl]
 800a53c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a53e:	d015      	beq.n	800a56c <_vfiprintf_r+0x120>
 800a540:	9a07      	ldr	r2, [sp, #28]
 800a542:	4654      	mov	r4, sl
 800a544:	2000      	movs	r0, #0
 800a546:	f04f 0c0a 	mov.w	ip, #10
 800a54a:	4621      	mov	r1, r4
 800a54c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a550:	3b30      	subs	r3, #48	@ 0x30
 800a552:	2b09      	cmp	r3, #9
 800a554:	d94b      	bls.n	800a5ee <_vfiprintf_r+0x1a2>
 800a556:	b1b0      	cbz	r0, 800a586 <_vfiprintf_r+0x13a>
 800a558:	9207      	str	r2, [sp, #28]
 800a55a:	e014      	b.n	800a586 <_vfiprintf_r+0x13a>
 800a55c:	eba0 0308 	sub.w	r3, r0, r8
 800a560:	fa09 f303 	lsl.w	r3, r9, r3
 800a564:	4313      	orrs	r3, r2
 800a566:	9304      	str	r3, [sp, #16]
 800a568:	46a2      	mov	sl, r4
 800a56a:	e7d2      	b.n	800a512 <_vfiprintf_r+0xc6>
 800a56c:	9b03      	ldr	r3, [sp, #12]
 800a56e:	1d19      	adds	r1, r3, #4
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	9103      	str	r1, [sp, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	bfbb      	ittet	lt
 800a578:	425b      	neglt	r3, r3
 800a57a:	f042 0202 	orrlt.w	r2, r2, #2
 800a57e:	9307      	strge	r3, [sp, #28]
 800a580:	9307      	strlt	r3, [sp, #28]
 800a582:	bfb8      	it	lt
 800a584:	9204      	strlt	r2, [sp, #16]
 800a586:	7823      	ldrb	r3, [r4, #0]
 800a588:	2b2e      	cmp	r3, #46	@ 0x2e
 800a58a:	d10a      	bne.n	800a5a2 <_vfiprintf_r+0x156>
 800a58c:	7863      	ldrb	r3, [r4, #1]
 800a58e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a590:	d132      	bne.n	800a5f8 <_vfiprintf_r+0x1ac>
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	1d1a      	adds	r2, r3, #4
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	9203      	str	r2, [sp, #12]
 800a59a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a59e:	3402      	adds	r4, #2
 800a5a0:	9305      	str	r3, [sp, #20]
 800a5a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a66c <_vfiprintf_r+0x220>
 800a5a6:	7821      	ldrb	r1, [r4, #0]
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	4650      	mov	r0, sl
 800a5ac:	f7f5 fdf8 	bl	80001a0 <memchr>
 800a5b0:	b138      	cbz	r0, 800a5c2 <_vfiprintf_r+0x176>
 800a5b2:	9b04      	ldr	r3, [sp, #16]
 800a5b4:	eba0 000a 	sub.w	r0, r0, sl
 800a5b8:	2240      	movs	r2, #64	@ 0x40
 800a5ba:	4082      	lsls	r2, r0
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	3401      	adds	r4, #1
 800a5c0:	9304      	str	r3, [sp, #16]
 800a5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c6:	482a      	ldr	r0, [pc, #168]	@ (800a670 <_vfiprintf_r+0x224>)
 800a5c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5cc:	2206      	movs	r2, #6
 800a5ce:	f7f5 fde7 	bl	80001a0 <memchr>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d03f      	beq.n	800a656 <_vfiprintf_r+0x20a>
 800a5d6:	4b27      	ldr	r3, [pc, #156]	@ (800a674 <_vfiprintf_r+0x228>)
 800a5d8:	bb1b      	cbnz	r3, 800a622 <_vfiprintf_r+0x1d6>
 800a5da:	9b03      	ldr	r3, [sp, #12]
 800a5dc:	3307      	adds	r3, #7
 800a5de:	f023 0307 	bic.w	r3, r3, #7
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	9303      	str	r3, [sp, #12]
 800a5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e8:	443b      	add	r3, r7
 800a5ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ec:	e76a      	b.n	800a4c4 <_vfiprintf_r+0x78>
 800a5ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	2001      	movs	r0, #1
 800a5f6:	e7a8      	b.n	800a54a <_vfiprintf_r+0xfe>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	3401      	adds	r4, #1
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	4619      	mov	r1, r3
 800a600:	f04f 0c0a 	mov.w	ip, #10
 800a604:	4620      	mov	r0, r4
 800a606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a60a:	3a30      	subs	r2, #48	@ 0x30
 800a60c:	2a09      	cmp	r2, #9
 800a60e:	d903      	bls.n	800a618 <_vfiprintf_r+0x1cc>
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0c6      	beq.n	800a5a2 <_vfiprintf_r+0x156>
 800a614:	9105      	str	r1, [sp, #20]
 800a616:	e7c4      	b.n	800a5a2 <_vfiprintf_r+0x156>
 800a618:	fb0c 2101 	mla	r1, ip, r1, r2
 800a61c:	4604      	mov	r4, r0
 800a61e:	2301      	movs	r3, #1
 800a620:	e7f0      	b.n	800a604 <_vfiprintf_r+0x1b8>
 800a622:	ab03      	add	r3, sp, #12
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	462a      	mov	r2, r5
 800a628:	4b13      	ldr	r3, [pc, #76]	@ (800a678 <_vfiprintf_r+0x22c>)
 800a62a:	a904      	add	r1, sp, #16
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7fc fa97 	bl	8006b60 <_printf_float>
 800a632:	4607      	mov	r7, r0
 800a634:	1c78      	adds	r0, r7, #1
 800a636:	d1d6      	bne.n	800a5e6 <_vfiprintf_r+0x19a>
 800a638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a63a:	07d9      	lsls	r1, r3, #31
 800a63c:	d405      	bmi.n	800a64a <_vfiprintf_r+0x1fe>
 800a63e:	89ab      	ldrh	r3, [r5, #12]
 800a640:	059a      	lsls	r2, r3, #22
 800a642:	d402      	bmi.n	800a64a <_vfiprintf_r+0x1fe>
 800a644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a646:	f7fd fb07 	bl	8007c58 <__retarget_lock_release_recursive>
 800a64a:	89ab      	ldrh	r3, [r5, #12]
 800a64c:	065b      	lsls	r3, r3, #25
 800a64e:	f53f af1f 	bmi.w	800a490 <_vfiprintf_r+0x44>
 800a652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a654:	e71e      	b.n	800a494 <_vfiprintf_r+0x48>
 800a656:	ab03      	add	r3, sp, #12
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	462a      	mov	r2, r5
 800a65c:	4b06      	ldr	r3, [pc, #24]	@ (800a678 <_vfiprintf_r+0x22c>)
 800a65e:	a904      	add	r1, sp, #16
 800a660:	4630      	mov	r0, r6
 800a662:	f7fc fd17 	bl	8007094 <_printf_i>
 800a666:	e7e4      	b.n	800a632 <_vfiprintf_r+0x1e6>
 800a668:	0800b93a 	.word	0x0800b93a
 800a66c:	0800b940 	.word	0x0800b940
 800a670:	0800b944 	.word	0x0800b944
 800a674:	08006b61 	.word	0x08006b61
 800a678:	0800a427 	.word	0x0800a427

0800a67c <__sflush_r>:
 800a67c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a682:	0716      	lsls	r6, r2, #28
 800a684:	4605      	mov	r5, r0
 800a686:	460c      	mov	r4, r1
 800a688:	d454      	bmi.n	800a734 <__sflush_r+0xb8>
 800a68a:	684b      	ldr	r3, [r1, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dc02      	bgt.n	800a696 <__sflush_r+0x1a>
 800a690:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a692:	2b00      	cmp	r3, #0
 800a694:	dd48      	ble.n	800a728 <__sflush_r+0xac>
 800a696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a698:	2e00      	cmp	r6, #0
 800a69a:	d045      	beq.n	800a728 <__sflush_r+0xac>
 800a69c:	2300      	movs	r3, #0
 800a69e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6a2:	682f      	ldr	r7, [r5, #0]
 800a6a4:	6a21      	ldr	r1, [r4, #32]
 800a6a6:	602b      	str	r3, [r5, #0]
 800a6a8:	d030      	beq.n	800a70c <__sflush_r+0x90>
 800a6aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	0759      	lsls	r1, r3, #29
 800a6b0:	d505      	bpl.n	800a6be <__sflush_r+0x42>
 800a6b2:	6863      	ldr	r3, [r4, #4]
 800a6b4:	1ad2      	subs	r2, r2, r3
 800a6b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6b8:	b10b      	cbz	r3, 800a6be <__sflush_r+0x42>
 800a6ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6bc:	1ad2      	subs	r2, r2, r3
 800a6be:	2300      	movs	r3, #0
 800a6c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6c2:	6a21      	ldr	r1, [r4, #32]
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	47b0      	blx	r6
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	d106      	bne.n	800a6dc <__sflush_r+0x60>
 800a6ce:	6829      	ldr	r1, [r5, #0]
 800a6d0:	291d      	cmp	r1, #29
 800a6d2:	d82b      	bhi.n	800a72c <__sflush_r+0xb0>
 800a6d4:	4a28      	ldr	r2, [pc, #160]	@ (800a778 <__sflush_r+0xfc>)
 800a6d6:	40ca      	lsrs	r2, r1
 800a6d8:	07d6      	lsls	r6, r2, #31
 800a6da:	d527      	bpl.n	800a72c <__sflush_r+0xb0>
 800a6dc:	2200      	movs	r2, #0
 800a6de:	6062      	str	r2, [r4, #4]
 800a6e0:	04d9      	lsls	r1, r3, #19
 800a6e2:	6922      	ldr	r2, [r4, #16]
 800a6e4:	6022      	str	r2, [r4, #0]
 800a6e6:	d504      	bpl.n	800a6f2 <__sflush_r+0x76>
 800a6e8:	1c42      	adds	r2, r0, #1
 800a6ea:	d101      	bne.n	800a6f0 <__sflush_r+0x74>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b903      	cbnz	r3, 800a6f2 <__sflush_r+0x76>
 800a6f0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6f4:	602f      	str	r7, [r5, #0]
 800a6f6:	b1b9      	cbz	r1, 800a728 <__sflush_r+0xac>
 800a6f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6fc:	4299      	cmp	r1, r3
 800a6fe:	d002      	beq.n	800a706 <__sflush_r+0x8a>
 800a700:	4628      	mov	r0, r5
 800a702:	f7fe f909 	bl	8008918 <_free_r>
 800a706:	2300      	movs	r3, #0
 800a708:	6363      	str	r3, [r4, #52]	@ 0x34
 800a70a:	e00d      	b.n	800a728 <__sflush_r+0xac>
 800a70c:	2301      	movs	r3, #1
 800a70e:	4628      	mov	r0, r5
 800a710:	47b0      	blx	r6
 800a712:	4602      	mov	r2, r0
 800a714:	1c50      	adds	r0, r2, #1
 800a716:	d1c9      	bne.n	800a6ac <__sflush_r+0x30>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0c6      	beq.n	800a6ac <__sflush_r+0x30>
 800a71e:	2b1d      	cmp	r3, #29
 800a720:	d001      	beq.n	800a726 <__sflush_r+0xaa>
 800a722:	2b16      	cmp	r3, #22
 800a724:	d11d      	bne.n	800a762 <__sflush_r+0xe6>
 800a726:	602f      	str	r7, [r5, #0]
 800a728:	2000      	movs	r0, #0
 800a72a:	e021      	b.n	800a770 <__sflush_r+0xf4>
 800a72c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a730:	b21b      	sxth	r3, r3
 800a732:	e01a      	b.n	800a76a <__sflush_r+0xee>
 800a734:	690f      	ldr	r7, [r1, #16]
 800a736:	2f00      	cmp	r7, #0
 800a738:	d0f6      	beq.n	800a728 <__sflush_r+0xac>
 800a73a:	0793      	lsls	r3, r2, #30
 800a73c:	680e      	ldr	r6, [r1, #0]
 800a73e:	bf08      	it	eq
 800a740:	694b      	ldreq	r3, [r1, #20]
 800a742:	600f      	str	r7, [r1, #0]
 800a744:	bf18      	it	ne
 800a746:	2300      	movne	r3, #0
 800a748:	1bf6      	subs	r6, r6, r7
 800a74a:	608b      	str	r3, [r1, #8]
 800a74c:	2e00      	cmp	r6, #0
 800a74e:	ddeb      	ble.n	800a728 <__sflush_r+0xac>
 800a750:	6a21      	ldr	r1, [r4, #32]
 800a752:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a756:	4633      	mov	r3, r6
 800a758:	463a      	mov	r2, r7
 800a75a:	4628      	mov	r0, r5
 800a75c:	47e0      	blx	ip
 800a75e:	2800      	cmp	r0, #0
 800a760:	dc07      	bgt.n	800a772 <__sflush_r+0xf6>
 800a762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a772:	4407      	add	r7, r0
 800a774:	1a36      	subs	r6, r6, r0
 800a776:	e7e9      	b.n	800a74c <__sflush_r+0xd0>
 800a778:	20400001 	.word	0x20400001

0800a77c <_fflush_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	690b      	ldr	r3, [r1, #16]
 800a780:	4605      	mov	r5, r0
 800a782:	460c      	mov	r4, r1
 800a784:	b913      	cbnz	r3, 800a78c <_fflush_r+0x10>
 800a786:	2500      	movs	r5, #0
 800a788:	4628      	mov	r0, r5
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	b118      	cbz	r0, 800a796 <_fflush_r+0x1a>
 800a78e:	6a03      	ldr	r3, [r0, #32]
 800a790:	b90b      	cbnz	r3, 800a796 <_fflush_r+0x1a>
 800a792:	f7fd f831 	bl	80077f8 <__sinit>
 800a796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0f3      	beq.n	800a786 <_fflush_r+0xa>
 800a79e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7a0:	07d0      	lsls	r0, r2, #31
 800a7a2:	d404      	bmi.n	800a7ae <_fflush_r+0x32>
 800a7a4:	0599      	lsls	r1, r3, #22
 800a7a6:	d402      	bmi.n	800a7ae <_fflush_r+0x32>
 800a7a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7aa:	f7fd fa54 	bl	8007c56 <__retarget_lock_acquire_recursive>
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	f7ff ff63 	bl	800a67c <__sflush_r>
 800a7b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7b8:	07da      	lsls	r2, r3, #31
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	d4e4      	bmi.n	800a788 <_fflush_r+0xc>
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	059b      	lsls	r3, r3, #22
 800a7c2:	d4e1      	bmi.n	800a788 <_fflush_r+0xc>
 800a7c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7c6:	f7fd fa47 	bl	8007c58 <__retarget_lock_release_recursive>
 800a7ca:	e7dd      	b.n	800a788 <_fflush_r+0xc>

0800a7cc <__swhatbuf_r>:
 800a7cc:	b570      	push	{r4, r5, r6, lr}
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d4:	2900      	cmp	r1, #0
 800a7d6:	b096      	sub	sp, #88	@ 0x58
 800a7d8:	4615      	mov	r5, r2
 800a7da:	461e      	mov	r6, r3
 800a7dc:	da0d      	bge.n	800a7fa <__swhatbuf_r+0x2e>
 800a7de:	89a3      	ldrh	r3, [r4, #12]
 800a7e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7e4:	f04f 0100 	mov.w	r1, #0
 800a7e8:	bf14      	ite	ne
 800a7ea:	2340      	movne	r3, #64	@ 0x40
 800a7ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	6031      	str	r1, [r6, #0]
 800a7f4:	602b      	str	r3, [r5, #0]
 800a7f6:	b016      	add	sp, #88	@ 0x58
 800a7f8:	bd70      	pop	{r4, r5, r6, pc}
 800a7fa:	466a      	mov	r2, sp
 800a7fc:	f000 f862 	bl	800a8c4 <_fstat_r>
 800a800:	2800      	cmp	r0, #0
 800a802:	dbec      	blt.n	800a7de <__swhatbuf_r+0x12>
 800a804:	9901      	ldr	r1, [sp, #4]
 800a806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a80a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a80e:	4259      	negs	r1, r3
 800a810:	4159      	adcs	r1, r3
 800a812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a816:	e7eb      	b.n	800a7f0 <__swhatbuf_r+0x24>

0800a818 <__smakebuf_r>:
 800a818:	898b      	ldrh	r3, [r1, #12]
 800a81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a81c:	079d      	lsls	r5, r3, #30
 800a81e:	4606      	mov	r6, r0
 800a820:	460c      	mov	r4, r1
 800a822:	d507      	bpl.n	800a834 <__smakebuf_r+0x1c>
 800a824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	6123      	str	r3, [r4, #16]
 800a82c:	2301      	movs	r3, #1
 800a82e:	6163      	str	r3, [r4, #20]
 800a830:	b003      	add	sp, #12
 800a832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a834:	ab01      	add	r3, sp, #4
 800a836:	466a      	mov	r2, sp
 800a838:	f7ff ffc8 	bl	800a7cc <__swhatbuf_r>
 800a83c:	9f00      	ldr	r7, [sp, #0]
 800a83e:	4605      	mov	r5, r0
 800a840:	4639      	mov	r1, r7
 800a842:	4630      	mov	r0, r6
 800a844:	f7fe f8dc 	bl	8008a00 <_malloc_r>
 800a848:	b948      	cbnz	r0, 800a85e <__smakebuf_r+0x46>
 800a84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a84e:	059a      	lsls	r2, r3, #22
 800a850:	d4ee      	bmi.n	800a830 <__smakebuf_r+0x18>
 800a852:	f023 0303 	bic.w	r3, r3, #3
 800a856:	f043 0302 	orr.w	r3, r3, #2
 800a85a:	81a3      	strh	r3, [r4, #12]
 800a85c:	e7e2      	b.n	800a824 <__smakebuf_r+0xc>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	6020      	str	r0, [r4, #0]
 800a862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a866:	81a3      	strh	r3, [r4, #12]
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a86e:	b15b      	cbz	r3, 800a888 <__smakebuf_r+0x70>
 800a870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a874:	4630      	mov	r0, r6
 800a876:	f000 f837 	bl	800a8e8 <_isatty_r>
 800a87a:	b128      	cbz	r0, 800a888 <__smakebuf_r+0x70>
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	f023 0303 	bic.w	r3, r3, #3
 800a882:	f043 0301 	orr.w	r3, r3, #1
 800a886:	81a3      	strh	r3, [r4, #12]
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	431d      	orrs	r5, r3
 800a88c:	81a5      	strh	r5, [r4, #12]
 800a88e:	e7cf      	b.n	800a830 <__smakebuf_r+0x18>

0800a890 <memmove>:
 800a890:	4288      	cmp	r0, r1
 800a892:	b510      	push	{r4, lr}
 800a894:	eb01 0402 	add.w	r4, r1, r2
 800a898:	d902      	bls.n	800a8a0 <memmove+0x10>
 800a89a:	4284      	cmp	r4, r0
 800a89c:	4623      	mov	r3, r4
 800a89e:	d807      	bhi.n	800a8b0 <memmove+0x20>
 800a8a0:	1e43      	subs	r3, r0, #1
 800a8a2:	42a1      	cmp	r1, r4
 800a8a4:	d008      	beq.n	800a8b8 <memmove+0x28>
 800a8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8ae:	e7f8      	b.n	800a8a2 <memmove+0x12>
 800a8b0:	4402      	add	r2, r0
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	428a      	cmp	r2, r1
 800a8b6:	d100      	bne.n	800a8ba <memmove+0x2a>
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8c2:	e7f7      	b.n	800a8b4 <memmove+0x24>

0800a8c4 <_fstat_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d07      	ldr	r5, [pc, #28]	@ (800a8e4 <_fstat_r+0x20>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	602b      	str	r3, [r5, #0]
 800a8d2:	f7f7 fa20 	bl	8001d16 <_fstat>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d102      	bne.n	800a8e0 <_fstat_r+0x1c>
 800a8da:	682b      	ldr	r3, [r5, #0]
 800a8dc:	b103      	cbz	r3, 800a8e0 <_fstat_r+0x1c>
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
 800a8e2:	bf00      	nop
 800a8e4:	200006b8 	.word	0x200006b8

0800a8e8 <_isatty_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	4d06      	ldr	r5, [pc, #24]	@ (800a904 <_isatty_r+0x1c>)
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	f7f7 fa1e 	bl	8001d34 <_isatty>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_isatty_r+0x1a>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_isatty_r+0x1a>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	200006b8 	.word	0x200006b8

0800a908 <_sbrk_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d06      	ldr	r5, [pc, #24]	@ (800a924 <_sbrk_r+0x1c>)
 800a90c:	2300      	movs	r3, #0
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	f7f7 fa24 	bl	8001d60 <_sbrk>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_sbrk_r+0x1a>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_sbrk_r+0x1a>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	200006b8 	.word	0x200006b8

0800a928 <memcpy>:
 800a928:	440a      	add	r2, r1
 800a92a:	4291      	cmp	r1, r2
 800a92c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a930:	d100      	bne.n	800a934 <memcpy+0xc>
 800a932:	4770      	bx	lr
 800a934:	b510      	push	{r4, lr}
 800a936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a93a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a93e:	4291      	cmp	r1, r2
 800a940:	d1f9      	bne.n	800a936 <memcpy+0xe>
 800a942:	bd10      	pop	{r4, pc}

0800a944 <nan>:
 800a944:	4901      	ldr	r1, [pc, #4]	@ (800a94c <nan+0x8>)
 800a946:	2000      	movs	r0, #0
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	7ff80000 	.word	0x7ff80000

0800a950 <__assert_func>:
 800a950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a952:	4614      	mov	r4, r2
 800a954:	461a      	mov	r2, r3
 800a956:	4b09      	ldr	r3, [pc, #36]	@ (800a97c <__assert_func+0x2c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4605      	mov	r5, r0
 800a95c:	68d8      	ldr	r0, [r3, #12]
 800a95e:	b14c      	cbz	r4, 800a974 <__assert_func+0x24>
 800a960:	4b07      	ldr	r3, [pc, #28]	@ (800a980 <__assert_func+0x30>)
 800a962:	9100      	str	r1, [sp, #0]
 800a964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a968:	4906      	ldr	r1, [pc, #24]	@ (800a984 <__assert_func+0x34>)
 800a96a:	462b      	mov	r3, r5
 800a96c:	f000 fba8 	bl	800b0c0 <fiprintf>
 800a970:	f000 fbb8 	bl	800b0e4 <abort>
 800a974:	4b04      	ldr	r3, [pc, #16]	@ (800a988 <__assert_func+0x38>)
 800a976:	461c      	mov	r4, r3
 800a978:	e7f3      	b.n	800a962 <__assert_func+0x12>
 800a97a:	bf00      	nop
 800a97c:	20000024 	.word	0x20000024
 800a980:	0800b953 	.word	0x0800b953
 800a984:	0800b960 	.word	0x0800b960
 800a988:	0800b98e 	.word	0x0800b98e

0800a98c <_calloc_r>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	fba1 5402 	umull	r5, r4, r1, r2
 800a992:	b934      	cbnz	r4, 800a9a2 <_calloc_r+0x16>
 800a994:	4629      	mov	r1, r5
 800a996:	f7fe f833 	bl	8008a00 <_malloc_r>
 800a99a:	4606      	mov	r6, r0
 800a99c:	b928      	cbnz	r0, 800a9aa <_calloc_r+0x1e>
 800a99e:	4630      	mov	r0, r6
 800a9a0:	bd70      	pop	{r4, r5, r6, pc}
 800a9a2:	220c      	movs	r2, #12
 800a9a4:	6002      	str	r2, [r0, #0]
 800a9a6:	2600      	movs	r6, #0
 800a9a8:	e7f9      	b.n	800a99e <_calloc_r+0x12>
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	f7fd f8c3 	bl	8007b38 <memset>
 800a9b2:	e7f4      	b.n	800a99e <_calloc_r+0x12>

0800a9b4 <rshift>:
 800a9b4:	6903      	ldr	r3, [r0, #16]
 800a9b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9c2:	f100 0414 	add.w	r4, r0, #20
 800a9c6:	dd45      	ble.n	800aa54 <rshift+0xa0>
 800a9c8:	f011 011f 	ands.w	r1, r1, #31
 800a9cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9d4:	d10c      	bne.n	800a9f0 <rshift+0x3c>
 800a9d6:	f100 0710 	add.w	r7, r0, #16
 800a9da:	4629      	mov	r1, r5
 800a9dc:	42b1      	cmp	r1, r6
 800a9de:	d334      	bcc.n	800aa4a <rshift+0x96>
 800a9e0:	1a9b      	subs	r3, r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	1eea      	subs	r2, r5, #3
 800a9e6:	4296      	cmp	r6, r2
 800a9e8:	bf38      	it	cc
 800a9ea:	2300      	movcc	r3, #0
 800a9ec:	4423      	add	r3, r4
 800a9ee:	e015      	b.n	800aa1c <rshift+0x68>
 800a9f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9f4:	f1c1 0820 	rsb	r8, r1, #32
 800a9f8:	40cf      	lsrs	r7, r1
 800a9fa:	f105 0e04 	add.w	lr, r5, #4
 800a9fe:	46a1      	mov	r9, r4
 800aa00:	4576      	cmp	r6, lr
 800aa02:	46f4      	mov	ip, lr
 800aa04:	d815      	bhi.n	800aa32 <rshift+0x7e>
 800aa06:	1a9a      	subs	r2, r3, r2
 800aa08:	0092      	lsls	r2, r2, #2
 800aa0a:	3a04      	subs	r2, #4
 800aa0c:	3501      	adds	r5, #1
 800aa0e:	42ae      	cmp	r6, r5
 800aa10:	bf38      	it	cc
 800aa12:	2200      	movcc	r2, #0
 800aa14:	18a3      	adds	r3, r4, r2
 800aa16:	50a7      	str	r7, [r4, r2]
 800aa18:	b107      	cbz	r7, 800aa1c <rshift+0x68>
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	1b1a      	subs	r2, r3, r4
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa24:	bf08      	it	eq
 800aa26:	2300      	moveq	r3, #0
 800aa28:	6102      	str	r2, [r0, #16]
 800aa2a:	bf08      	it	eq
 800aa2c:	6143      	streq	r3, [r0, #20]
 800aa2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa32:	f8dc c000 	ldr.w	ip, [ip]
 800aa36:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa3a:	ea4c 0707 	orr.w	r7, ip, r7
 800aa3e:	f849 7b04 	str.w	r7, [r9], #4
 800aa42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa46:	40cf      	lsrs	r7, r1
 800aa48:	e7da      	b.n	800aa00 <rshift+0x4c>
 800aa4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa52:	e7c3      	b.n	800a9dc <rshift+0x28>
 800aa54:	4623      	mov	r3, r4
 800aa56:	e7e1      	b.n	800aa1c <rshift+0x68>

0800aa58 <__hexdig_fun>:
 800aa58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa5c:	2b09      	cmp	r3, #9
 800aa5e:	d802      	bhi.n	800aa66 <__hexdig_fun+0xe>
 800aa60:	3820      	subs	r0, #32
 800aa62:	b2c0      	uxtb	r0, r0
 800aa64:	4770      	bx	lr
 800aa66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa6a:	2b05      	cmp	r3, #5
 800aa6c:	d801      	bhi.n	800aa72 <__hexdig_fun+0x1a>
 800aa6e:	3847      	subs	r0, #71	@ 0x47
 800aa70:	e7f7      	b.n	800aa62 <__hexdig_fun+0xa>
 800aa72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa76:	2b05      	cmp	r3, #5
 800aa78:	d801      	bhi.n	800aa7e <__hexdig_fun+0x26>
 800aa7a:	3827      	subs	r0, #39	@ 0x27
 800aa7c:	e7f1      	b.n	800aa62 <__hexdig_fun+0xa>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	4770      	bx	lr
	...

0800aa84 <__gethex>:
 800aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	468a      	mov	sl, r1
 800aa8c:	9302      	str	r3, [sp, #8]
 800aa8e:	680b      	ldr	r3, [r1, #0]
 800aa90:	9001      	str	r0, [sp, #4]
 800aa92:	4690      	mov	r8, r2
 800aa94:	1c9c      	adds	r4, r3, #2
 800aa96:	46a1      	mov	r9, r4
 800aa98:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa9c:	2830      	cmp	r0, #48	@ 0x30
 800aa9e:	d0fa      	beq.n	800aa96 <__gethex+0x12>
 800aaa0:	eba9 0303 	sub.w	r3, r9, r3
 800aaa4:	f1a3 0b02 	sub.w	fp, r3, #2
 800aaa8:	f7ff ffd6 	bl	800aa58 <__hexdig_fun>
 800aaac:	4605      	mov	r5, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d168      	bne.n	800ab84 <__gethex+0x100>
 800aab2:	49a0      	ldr	r1, [pc, #640]	@ (800ad34 <__gethex+0x2b0>)
 800aab4:	2201      	movs	r2, #1
 800aab6:	4648      	mov	r0, r9
 800aab8:	f7fd f846 	bl	8007b48 <strncmp>
 800aabc:	4607      	mov	r7, r0
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d167      	bne.n	800ab92 <__gethex+0x10e>
 800aac2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aac6:	4626      	mov	r6, r4
 800aac8:	f7ff ffc6 	bl	800aa58 <__hexdig_fun>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d062      	beq.n	800ab96 <__gethex+0x112>
 800aad0:	4623      	mov	r3, r4
 800aad2:	7818      	ldrb	r0, [r3, #0]
 800aad4:	2830      	cmp	r0, #48	@ 0x30
 800aad6:	4699      	mov	r9, r3
 800aad8:	f103 0301 	add.w	r3, r3, #1
 800aadc:	d0f9      	beq.n	800aad2 <__gethex+0x4e>
 800aade:	f7ff ffbb 	bl	800aa58 <__hexdig_fun>
 800aae2:	fab0 f580 	clz	r5, r0
 800aae6:	096d      	lsrs	r5, r5, #5
 800aae8:	f04f 0b01 	mov.w	fp, #1
 800aaec:	464a      	mov	r2, r9
 800aaee:	4616      	mov	r6, r2
 800aaf0:	3201      	adds	r2, #1
 800aaf2:	7830      	ldrb	r0, [r6, #0]
 800aaf4:	f7ff ffb0 	bl	800aa58 <__hexdig_fun>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d1f8      	bne.n	800aaee <__gethex+0x6a>
 800aafc:	498d      	ldr	r1, [pc, #564]	@ (800ad34 <__gethex+0x2b0>)
 800aafe:	2201      	movs	r2, #1
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7fd f821 	bl	8007b48 <strncmp>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d13f      	bne.n	800ab8a <__gethex+0x106>
 800ab0a:	b944      	cbnz	r4, 800ab1e <__gethex+0x9a>
 800ab0c:	1c74      	adds	r4, r6, #1
 800ab0e:	4622      	mov	r2, r4
 800ab10:	4616      	mov	r6, r2
 800ab12:	3201      	adds	r2, #1
 800ab14:	7830      	ldrb	r0, [r6, #0]
 800ab16:	f7ff ff9f 	bl	800aa58 <__hexdig_fun>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d1f8      	bne.n	800ab10 <__gethex+0x8c>
 800ab1e:	1ba4      	subs	r4, r4, r6
 800ab20:	00a7      	lsls	r7, r4, #2
 800ab22:	7833      	ldrb	r3, [r6, #0]
 800ab24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab28:	2b50      	cmp	r3, #80	@ 0x50
 800ab2a:	d13e      	bne.n	800abaa <__gethex+0x126>
 800ab2c:	7873      	ldrb	r3, [r6, #1]
 800ab2e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab30:	d033      	beq.n	800ab9a <__gethex+0x116>
 800ab32:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab34:	d034      	beq.n	800aba0 <__gethex+0x11c>
 800ab36:	1c71      	adds	r1, r6, #1
 800ab38:	2400      	movs	r4, #0
 800ab3a:	7808      	ldrb	r0, [r1, #0]
 800ab3c:	f7ff ff8c 	bl	800aa58 <__hexdig_fun>
 800ab40:	1e43      	subs	r3, r0, #1
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b18      	cmp	r3, #24
 800ab46:	d830      	bhi.n	800abaa <__gethex+0x126>
 800ab48:	f1a0 0210 	sub.w	r2, r0, #16
 800ab4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab50:	f7ff ff82 	bl	800aa58 <__hexdig_fun>
 800ab54:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ab58:	fa5f fc8c 	uxtb.w	ip, ip
 800ab5c:	f1bc 0f18 	cmp.w	ip, #24
 800ab60:	f04f 030a 	mov.w	r3, #10
 800ab64:	d91e      	bls.n	800aba4 <__gethex+0x120>
 800ab66:	b104      	cbz	r4, 800ab6a <__gethex+0xe6>
 800ab68:	4252      	negs	r2, r2
 800ab6a:	4417      	add	r7, r2
 800ab6c:	f8ca 1000 	str.w	r1, [sl]
 800ab70:	b1ed      	cbz	r5, 800abae <__gethex+0x12a>
 800ab72:	f1bb 0f00 	cmp.w	fp, #0
 800ab76:	bf0c      	ite	eq
 800ab78:	2506      	moveq	r5, #6
 800ab7a:	2500      	movne	r5, #0
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	b005      	add	sp, #20
 800ab80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab84:	2500      	movs	r5, #0
 800ab86:	462c      	mov	r4, r5
 800ab88:	e7b0      	b.n	800aaec <__gethex+0x68>
 800ab8a:	2c00      	cmp	r4, #0
 800ab8c:	d1c7      	bne.n	800ab1e <__gethex+0x9a>
 800ab8e:	4627      	mov	r7, r4
 800ab90:	e7c7      	b.n	800ab22 <__gethex+0x9e>
 800ab92:	464e      	mov	r6, r9
 800ab94:	462f      	mov	r7, r5
 800ab96:	2501      	movs	r5, #1
 800ab98:	e7c3      	b.n	800ab22 <__gethex+0x9e>
 800ab9a:	2400      	movs	r4, #0
 800ab9c:	1cb1      	adds	r1, r6, #2
 800ab9e:	e7cc      	b.n	800ab3a <__gethex+0xb6>
 800aba0:	2401      	movs	r4, #1
 800aba2:	e7fb      	b.n	800ab9c <__gethex+0x118>
 800aba4:	fb03 0002 	mla	r0, r3, r2, r0
 800aba8:	e7ce      	b.n	800ab48 <__gethex+0xc4>
 800abaa:	4631      	mov	r1, r6
 800abac:	e7de      	b.n	800ab6c <__gethex+0xe8>
 800abae:	eba6 0309 	sub.w	r3, r6, r9
 800abb2:	3b01      	subs	r3, #1
 800abb4:	4629      	mov	r1, r5
 800abb6:	2b07      	cmp	r3, #7
 800abb8:	dc0a      	bgt.n	800abd0 <__gethex+0x14c>
 800abba:	9801      	ldr	r0, [sp, #4]
 800abbc:	f7fd ffac 	bl	8008b18 <_Balloc>
 800abc0:	4604      	mov	r4, r0
 800abc2:	b940      	cbnz	r0, 800abd6 <__gethex+0x152>
 800abc4:	4b5c      	ldr	r3, [pc, #368]	@ (800ad38 <__gethex+0x2b4>)
 800abc6:	4602      	mov	r2, r0
 800abc8:	21e4      	movs	r1, #228	@ 0xe4
 800abca:	485c      	ldr	r0, [pc, #368]	@ (800ad3c <__gethex+0x2b8>)
 800abcc:	f7ff fec0 	bl	800a950 <__assert_func>
 800abd0:	3101      	adds	r1, #1
 800abd2:	105b      	asrs	r3, r3, #1
 800abd4:	e7ef      	b.n	800abb6 <__gethex+0x132>
 800abd6:	f100 0a14 	add.w	sl, r0, #20
 800abda:	2300      	movs	r3, #0
 800abdc:	4655      	mov	r5, sl
 800abde:	469b      	mov	fp, r3
 800abe0:	45b1      	cmp	r9, r6
 800abe2:	d337      	bcc.n	800ac54 <__gethex+0x1d0>
 800abe4:	f845 bb04 	str.w	fp, [r5], #4
 800abe8:	eba5 050a 	sub.w	r5, r5, sl
 800abec:	10ad      	asrs	r5, r5, #2
 800abee:	6125      	str	r5, [r4, #16]
 800abf0:	4658      	mov	r0, fp
 800abf2:	f7fe f883 	bl	8008cfc <__hi0bits>
 800abf6:	016d      	lsls	r5, r5, #5
 800abf8:	f8d8 6000 	ldr.w	r6, [r8]
 800abfc:	1a2d      	subs	r5, r5, r0
 800abfe:	42b5      	cmp	r5, r6
 800ac00:	dd54      	ble.n	800acac <__gethex+0x228>
 800ac02:	1bad      	subs	r5, r5, r6
 800ac04:	4629      	mov	r1, r5
 800ac06:	4620      	mov	r0, r4
 800ac08:	f7fe fc05 	bl	8009416 <__any_on>
 800ac0c:	4681      	mov	r9, r0
 800ac0e:	b178      	cbz	r0, 800ac30 <__gethex+0x1ac>
 800ac10:	1e6b      	subs	r3, r5, #1
 800ac12:	1159      	asrs	r1, r3, #5
 800ac14:	f003 021f 	and.w	r2, r3, #31
 800ac18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac1c:	f04f 0901 	mov.w	r9, #1
 800ac20:	fa09 f202 	lsl.w	r2, r9, r2
 800ac24:	420a      	tst	r2, r1
 800ac26:	d003      	beq.n	800ac30 <__gethex+0x1ac>
 800ac28:	454b      	cmp	r3, r9
 800ac2a:	dc36      	bgt.n	800ac9a <__gethex+0x216>
 800ac2c:	f04f 0902 	mov.w	r9, #2
 800ac30:	4629      	mov	r1, r5
 800ac32:	4620      	mov	r0, r4
 800ac34:	f7ff febe 	bl	800a9b4 <rshift>
 800ac38:	442f      	add	r7, r5
 800ac3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac3e:	42bb      	cmp	r3, r7
 800ac40:	da42      	bge.n	800acc8 <__gethex+0x244>
 800ac42:	9801      	ldr	r0, [sp, #4]
 800ac44:	4621      	mov	r1, r4
 800ac46:	f7fd ffa7 	bl	8008b98 <_Bfree>
 800ac4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	25a3      	movs	r5, #163	@ 0xa3
 800ac52:	e793      	b.n	800ab7c <__gethex+0xf8>
 800ac54:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac58:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac5a:	d012      	beq.n	800ac82 <__gethex+0x1fe>
 800ac5c:	2b20      	cmp	r3, #32
 800ac5e:	d104      	bne.n	800ac6a <__gethex+0x1e6>
 800ac60:	f845 bb04 	str.w	fp, [r5], #4
 800ac64:	f04f 0b00 	mov.w	fp, #0
 800ac68:	465b      	mov	r3, fp
 800ac6a:	7830      	ldrb	r0, [r6, #0]
 800ac6c:	9303      	str	r3, [sp, #12]
 800ac6e:	f7ff fef3 	bl	800aa58 <__hexdig_fun>
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	f000 000f 	and.w	r0, r0, #15
 800ac78:	4098      	lsls	r0, r3
 800ac7a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac7e:	3304      	adds	r3, #4
 800ac80:	e7ae      	b.n	800abe0 <__gethex+0x15c>
 800ac82:	45b1      	cmp	r9, r6
 800ac84:	d8ea      	bhi.n	800ac5c <__gethex+0x1d8>
 800ac86:	492b      	ldr	r1, [pc, #172]	@ (800ad34 <__gethex+0x2b0>)
 800ac88:	9303      	str	r3, [sp, #12]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7fc ff5b 	bl	8007b48 <strncmp>
 800ac92:	9b03      	ldr	r3, [sp, #12]
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d1e1      	bne.n	800ac5c <__gethex+0x1d8>
 800ac98:	e7a2      	b.n	800abe0 <__gethex+0x15c>
 800ac9a:	1ea9      	subs	r1, r5, #2
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f7fe fbba 	bl	8009416 <__any_on>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d0c2      	beq.n	800ac2c <__gethex+0x1a8>
 800aca6:	f04f 0903 	mov.w	r9, #3
 800acaa:	e7c1      	b.n	800ac30 <__gethex+0x1ac>
 800acac:	da09      	bge.n	800acc2 <__gethex+0x23e>
 800acae:	1b75      	subs	r5, r6, r5
 800acb0:	4621      	mov	r1, r4
 800acb2:	9801      	ldr	r0, [sp, #4]
 800acb4:	462a      	mov	r2, r5
 800acb6:	f7fe f97f 	bl	8008fb8 <__lshift>
 800acba:	1b7f      	subs	r7, r7, r5
 800acbc:	4604      	mov	r4, r0
 800acbe:	f100 0a14 	add.w	sl, r0, #20
 800acc2:	f04f 0900 	mov.w	r9, #0
 800acc6:	e7b8      	b.n	800ac3a <__gethex+0x1b6>
 800acc8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800accc:	42bd      	cmp	r5, r7
 800acce:	dd6f      	ble.n	800adb0 <__gethex+0x32c>
 800acd0:	1bed      	subs	r5, r5, r7
 800acd2:	42ae      	cmp	r6, r5
 800acd4:	dc34      	bgt.n	800ad40 <__gethex+0x2bc>
 800acd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d022      	beq.n	800ad24 <__gethex+0x2a0>
 800acde:	2b03      	cmp	r3, #3
 800ace0:	d024      	beq.n	800ad2c <__gethex+0x2a8>
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d115      	bne.n	800ad12 <__gethex+0x28e>
 800ace6:	42ae      	cmp	r6, r5
 800ace8:	d113      	bne.n	800ad12 <__gethex+0x28e>
 800acea:	2e01      	cmp	r6, #1
 800acec:	d10b      	bne.n	800ad06 <__gethex+0x282>
 800acee:	9a02      	ldr	r2, [sp, #8]
 800acf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	2301      	movs	r3, #1
 800acf8:	6123      	str	r3, [r4, #16]
 800acfa:	f8ca 3000 	str.w	r3, [sl]
 800acfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad00:	2562      	movs	r5, #98	@ 0x62
 800ad02:	601c      	str	r4, [r3, #0]
 800ad04:	e73a      	b.n	800ab7c <__gethex+0xf8>
 800ad06:	1e71      	subs	r1, r6, #1
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f7fe fb84 	bl	8009416 <__any_on>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d1ed      	bne.n	800acee <__gethex+0x26a>
 800ad12:	9801      	ldr	r0, [sp, #4]
 800ad14:	4621      	mov	r1, r4
 800ad16:	f7fd ff3f 	bl	8008b98 <_Bfree>
 800ad1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	2550      	movs	r5, #80	@ 0x50
 800ad22:	e72b      	b.n	800ab7c <__gethex+0xf8>
 800ad24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1f3      	bne.n	800ad12 <__gethex+0x28e>
 800ad2a:	e7e0      	b.n	800acee <__gethex+0x26a>
 800ad2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1dd      	bne.n	800acee <__gethex+0x26a>
 800ad32:	e7ee      	b.n	800ad12 <__gethex+0x28e>
 800ad34:	0800b938 	.word	0x0800b938
 800ad38:	0800b8ce 	.word	0x0800b8ce
 800ad3c:	0800b98f 	.word	0x0800b98f
 800ad40:	1e6f      	subs	r7, r5, #1
 800ad42:	f1b9 0f00 	cmp.w	r9, #0
 800ad46:	d130      	bne.n	800adaa <__gethex+0x326>
 800ad48:	b127      	cbz	r7, 800ad54 <__gethex+0x2d0>
 800ad4a:	4639      	mov	r1, r7
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f7fe fb62 	bl	8009416 <__any_on>
 800ad52:	4681      	mov	r9, r0
 800ad54:	117a      	asrs	r2, r7, #5
 800ad56:	2301      	movs	r3, #1
 800ad58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad5c:	f007 071f 	and.w	r7, r7, #31
 800ad60:	40bb      	lsls	r3, r7
 800ad62:	4213      	tst	r3, r2
 800ad64:	4629      	mov	r1, r5
 800ad66:	4620      	mov	r0, r4
 800ad68:	bf18      	it	ne
 800ad6a:	f049 0902 	orrne.w	r9, r9, #2
 800ad6e:	f7ff fe21 	bl	800a9b4 <rshift>
 800ad72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad76:	1b76      	subs	r6, r6, r5
 800ad78:	2502      	movs	r5, #2
 800ad7a:	f1b9 0f00 	cmp.w	r9, #0
 800ad7e:	d047      	beq.n	800ae10 <__gethex+0x38c>
 800ad80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d015      	beq.n	800adb4 <__gethex+0x330>
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d017      	beq.n	800adbc <__gethex+0x338>
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d109      	bne.n	800ada4 <__gethex+0x320>
 800ad90:	f019 0f02 	tst.w	r9, #2
 800ad94:	d006      	beq.n	800ada4 <__gethex+0x320>
 800ad96:	f8da 3000 	ldr.w	r3, [sl]
 800ad9a:	ea49 0903 	orr.w	r9, r9, r3
 800ad9e:	f019 0f01 	tst.w	r9, #1
 800ada2:	d10e      	bne.n	800adc2 <__gethex+0x33e>
 800ada4:	f045 0510 	orr.w	r5, r5, #16
 800ada8:	e032      	b.n	800ae10 <__gethex+0x38c>
 800adaa:	f04f 0901 	mov.w	r9, #1
 800adae:	e7d1      	b.n	800ad54 <__gethex+0x2d0>
 800adb0:	2501      	movs	r5, #1
 800adb2:	e7e2      	b.n	800ad7a <__gethex+0x2f6>
 800adb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adb6:	f1c3 0301 	rsb	r3, r3, #1
 800adba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d0f0      	beq.n	800ada4 <__gethex+0x320>
 800adc2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adc6:	f104 0314 	add.w	r3, r4, #20
 800adca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800add2:	f04f 0c00 	mov.w	ip, #0
 800add6:	4618      	mov	r0, r3
 800add8:	f853 2b04 	ldr.w	r2, [r3], #4
 800addc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800ade0:	d01b      	beq.n	800ae1a <__gethex+0x396>
 800ade2:	3201      	adds	r2, #1
 800ade4:	6002      	str	r2, [r0, #0]
 800ade6:	2d02      	cmp	r5, #2
 800ade8:	f104 0314 	add.w	r3, r4, #20
 800adec:	d13c      	bne.n	800ae68 <__gethex+0x3e4>
 800adee:	f8d8 2000 	ldr.w	r2, [r8]
 800adf2:	3a01      	subs	r2, #1
 800adf4:	42b2      	cmp	r2, r6
 800adf6:	d109      	bne.n	800ae0c <__gethex+0x388>
 800adf8:	1171      	asrs	r1, r6, #5
 800adfa:	2201      	movs	r2, #1
 800adfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae00:	f006 061f 	and.w	r6, r6, #31
 800ae04:	fa02 f606 	lsl.w	r6, r2, r6
 800ae08:	421e      	tst	r6, r3
 800ae0a:	d13a      	bne.n	800ae82 <__gethex+0x3fe>
 800ae0c:	f045 0520 	orr.w	r5, r5, #32
 800ae10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae12:	601c      	str	r4, [r3, #0]
 800ae14:	9b02      	ldr	r3, [sp, #8]
 800ae16:	601f      	str	r7, [r3, #0]
 800ae18:	e6b0      	b.n	800ab7c <__gethex+0xf8>
 800ae1a:	4299      	cmp	r1, r3
 800ae1c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae20:	d8d9      	bhi.n	800add6 <__gethex+0x352>
 800ae22:	68a3      	ldr	r3, [r4, #8]
 800ae24:	459b      	cmp	fp, r3
 800ae26:	db17      	blt.n	800ae58 <__gethex+0x3d4>
 800ae28:	6861      	ldr	r1, [r4, #4]
 800ae2a:	9801      	ldr	r0, [sp, #4]
 800ae2c:	3101      	adds	r1, #1
 800ae2e:	f7fd fe73 	bl	8008b18 <_Balloc>
 800ae32:	4681      	mov	r9, r0
 800ae34:	b918      	cbnz	r0, 800ae3e <__gethex+0x3ba>
 800ae36:	4b1a      	ldr	r3, [pc, #104]	@ (800aea0 <__gethex+0x41c>)
 800ae38:	4602      	mov	r2, r0
 800ae3a:	2184      	movs	r1, #132	@ 0x84
 800ae3c:	e6c5      	b.n	800abca <__gethex+0x146>
 800ae3e:	6922      	ldr	r2, [r4, #16]
 800ae40:	3202      	adds	r2, #2
 800ae42:	f104 010c 	add.w	r1, r4, #12
 800ae46:	0092      	lsls	r2, r2, #2
 800ae48:	300c      	adds	r0, #12
 800ae4a:	f7ff fd6d 	bl	800a928 <memcpy>
 800ae4e:	4621      	mov	r1, r4
 800ae50:	9801      	ldr	r0, [sp, #4]
 800ae52:	f7fd fea1 	bl	8008b98 <_Bfree>
 800ae56:	464c      	mov	r4, r9
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae60:	6122      	str	r2, [r4, #16]
 800ae62:	2201      	movs	r2, #1
 800ae64:	615a      	str	r2, [r3, #20]
 800ae66:	e7be      	b.n	800ade6 <__gethex+0x362>
 800ae68:	6922      	ldr	r2, [r4, #16]
 800ae6a:	455a      	cmp	r2, fp
 800ae6c:	dd0b      	ble.n	800ae86 <__gethex+0x402>
 800ae6e:	2101      	movs	r1, #1
 800ae70:	4620      	mov	r0, r4
 800ae72:	f7ff fd9f 	bl	800a9b4 <rshift>
 800ae76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae7a:	3701      	adds	r7, #1
 800ae7c:	42bb      	cmp	r3, r7
 800ae7e:	f6ff aee0 	blt.w	800ac42 <__gethex+0x1be>
 800ae82:	2501      	movs	r5, #1
 800ae84:	e7c2      	b.n	800ae0c <__gethex+0x388>
 800ae86:	f016 061f 	ands.w	r6, r6, #31
 800ae8a:	d0fa      	beq.n	800ae82 <__gethex+0x3fe>
 800ae8c:	4453      	add	r3, sl
 800ae8e:	f1c6 0620 	rsb	r6, r6, #32
 800ae92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae96:	f7fd ff31 	bl	8008cfc <__hi0bits>
 800ae9a:	42b0      	cmp	r0, r6
 800ae9c:	dbe7      	blt.n	800ae6e <__gethex+0x3ea>
 800ae9e:	e7f0      	b.n	800ae82 <__gethex+0x3fe>
 800aea0:	0800b8ce 	.word	0x0800b8ce

0800aea4 <L_shift>:
 800aea4:	f1c2 0208 	rsb	r2, r2, #8
 800aea8:	0092      	lsls	r2, r2, #2
 800aeaa:	b570      	push	{r4, r5, r6, lr}
 800aeac:	f1c2 0620 	rsb	r6, r2, #32
 800aeb0:	6843      	ldr	r3, [r0, #4]
 800aeb2:	6804      	ldr	r4, [r0, #0]
 800aeb4:	fa03 f506 	lsl.w	r5, r3, r6
 800aeb8:	432c      	orrs	r4, r5
 800aeba:	40d3      	lsrs	r3, r2
 800aebc:	6004      	str	r4, [r0, #0]
 800aebe:	f840 3f04 	str.w	r3, [r0, #4]!
 800aec2:	4288      	cmp	r0, r1
 800aec4:	d3f4      	bcc.n	800aeb0 <L_shift+0xc>
 800aec6:	bd70      	pop	{r4, r5, r6, pc}

0800aec8 <__match>:
 800aec8:	b530      	push	{r4, r5, lr}
 800aeca:	6803      	ldr	r3, [r0, #0]
 800aecc:	3301      	adds	r3, #1
 800aece:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aed2:	b914      	cbnz	r4, 800aeda <__match+0x12>
 800aed4:	6003      	str	r3, [r0, #0]
 800aed6:	2001      	movs	r0, #1
 800aed8:	bd30      	pop	{r4, r5, pc}
 800aeda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aede:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aee2:	2d19      	cmp	r5, #25
 800aee4:	bf98      	it	ls
 800aee6:	3220      	addls	r2, #32
 800aee8:	42a2      	cmp	r2, r4
 800aeea:	d0f0      	beq.n	800aece <__match+0x6>
 800aeec:	2000      	movs	r0, #0
 800aeee:	e7f3      	b.n	800aed8 <__match+0x10>

0800aef0 <__hexnan>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	680b      	ldr	r3, [r1, #0]
 800aef6:	6801      	ldr	r1, [r0, #0]
 800aef8:	115e      	asrs	r6, r3, #5
 800aefa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aefe:	f013 031f 	ands.w	r3, r3, #31
 800af02:	b087      	sub	sp, #28
 800af04:	bf18      	it	ne
 800af06:	3604      	addne	r6, #4
 800af08:	2500      	movs	r5, #0
 800af0a:	1f37      	subs	r7, r6, #4
 800af0c:	4682      	mov	sl, r0
 800af0e:	4690      	mov	r8, r2
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	f846 5c04 	str.w	r5, [r6, #-4]
 800af16:	46b9      	mov	r9, r7
 800af18:	463c      	mov	r4, r7
 800af1a:	9502      	str	r5, [sp, #8]
 800af1c:	46ab      	mov	fp, r5
 800af1e:	784a      	ldrb	r2, [r1, #1]
 800af20:	1c4b      	adds	r3, r1, #1
 800af22:	9303      	str	r3, [sp, #12]
 800af24:	b342      	cbz	r2, 800af78 <__hexnan+0x88>
 800af26:	4610      	mov	r0, r2
 800af28:	9105      	str	r1, [sp, #20]
 800af2a:	9204      	str	r2, [sp, #16]
 800af2c:	f7ff fd94 	bl	800aa58 <__hexdig_fun>
 800af30:	2800      	cmp	r0, #0
 800af32:	d151      	bne.n	800afd8 <__hexnan+0xe8>
 800af34:	9a04      	ldr	r2, [sp, #16]
 800af36:	9905      	ldr	r1, [sp, #20]
 800af38:	2a20      	cmp	r2, #32
 800af3a:	d818      	bhi.n	800af6e <__hexnan+0x7e>
 800af3c:	9b02      	ldr	r3, [sp, #8]
 800af3e:	459b      	cmp	fp, r3
 800af40:	dd13      	ble.n	800af6a <__hexnan+0x7a>
 800af42:	454c      	cmp	r4, r9
 800af44:	d206      	bcs.n	800af54 <__hexnan+0x64>
 800af46:	2d07      	cmp	r5, #7
 800af48:	dc04      	bgt.n	800af54 <__hexnan+0x64>
 800af4a:	462a      	mov	r2, r5
 800af4c:	4649      	mov	r1, r9
 800af4e:	4620      	mov	r0, r4
 800af50:	f7ff ffa8 	bl	800aea4 <L_shift>
 800af54:	4544      	cmp	r4, r8
 800af56:	d952      	bls.n	800affe <__hexnan+0x10e>
 800af58:	2300      	movs	r3, #0
 800af5a:	f1a4 0904 	sub.w	r9, r4, #4
 800af5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af62:	f8cd b008 	str.w	fp, [sp, #8]
 800af66:	464c      	mov	r4, r9
 800af68:	461d      	mov	r5, r3
 800af6a:	9903      	ldr	r1, [sp, #12]
 800af6c:	e7d7      	b.n	800af1e <__hexnan+0x2e>
 800af6e:	2a29      	cmp	r2, #41	@ 0x29
 800af70:	d157      	bne.n	800b022 <__hexnan+0x132>
 800af72:	3102      	adds	r1, #2
 800af74:	f8ca 1000 	str.w	r1, [sl]
 800af78:	f1bb 0f00 	cmp.w	fp, #0
 800af7c:	d051      	beq.n	800b022 <__hexnan+0x132>
 800af7e:	454c      	cmp	r4, r9
 800af80:	d206      	bcs.n	800af90 <__hexnan+0xa0>
 800af82:	2d07      	cmp	r5, #7
 800af84:	dc04      	bgt.n	800af90 <__hexnan+0xa0>
 800af86:	462a      	mov	r2, r5
 800af88:	4649      	mov	r1, r9
 800af8a:	4620      	mov	r0, r4
 800af8c:	f7ff ff8a 	bl	800aea4 <L_shift>
 800af90:	4544      	cmp	r4, r8
 800af92:	d936      	bls.n	800b002 <__hexnan+0x112>
 800af94:	f1a8 0204 	sub.w	r2, r8, #4
 800af98:	4623      	mov	r3, r4
 800af9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800af9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800afa2:	429f      	cmp	r7, r3
 800afa4:	d2f9      	bcs.n	800af9a <__hexnan+0xaa>
 800afa6:	1b3b      	subs	r3, r7, r4
 800afa8:	f023 0303 	bic.w	r3, r3, #3
 800afac:	3304      	adds	r3, #4
 800afae:	3401      	adds	r4, #1
 800afb0:	3e03      	subs	r6, #3
 800afb2:	42b4      	cmp	r4, r6
 800afb4:	bf88      	it	hi
 800afb6:	2304      	movhi	r3, #4
 800afb8:	4443      	add	r3, r8
 800afba:	2200      	movs	r2, #0
 800afbc:	f843 2b04 	str.w	r2, [r3], #4
 800afc0:	429f      	cmp	r7, r3
 800afc2:	d2fb      	bcs.n	800afbc <__hexnan+0xcc>
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	b91b      	cbnz	r3, 800afd0 <__hexnan+0xe0>
 800afc8:	4547      	cmp	r7, r8
 800afca:	d128      	bne.n	800b01e <__hexnan+0x12e>
 800afcc:	2301      	movs	r3, #1
 800afce:	603b      	str	r3, [r7, #0]
 800afd0:	2005      	movs	r0, #5
 800afd2:	b007      	add	sp, #28
 800afd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd8:	3501      	adds	r5, #1
 800afda:	2d08      	cmp	r5, #8
 800afdc:	f10b 0b01 	add.w	fp, fp, #1
 800afe0:	dd06      	ble.n	800aff0 <__hexnan+0x100>
 800afe2:	4544      	cmp	r4, r8
 800afe4:	d9c1      	bls.n	800af6a <__hexnan+0x7a>
 800afe6:	2300      	movs	r3, #0
 800afe8:	f844 3c04 	str.w	r3, [r4, #-4]
 800afec:	2501      	movs	r5, #1
 800afee:	3c04      	subs	r4, #4
 800aff0:	6822      	ldr	r2, [r4, #0]
 800aff2:	f000 000f 	and.w	r0, r0, #15
 800aff6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800affa:	6020      	str	r0, [r4, #0]
 800affc:	e7b5      	b.n	800af6a <__hexnan+0x7a>
 800affe:	2508      	movs	r5, #8
 800b000:	e7b3      	b.n	800af6a <__hexnan+0x7a>
 800b002:	9b01      	ldr	r3, [sp, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d0dd      	beq.n	800afc4 <__hexnan+0xd4>
 800b008:	f1c3 0320 	rsb	r3, r3, #32
 800b00c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b010:	40da      	lsrs	r2, r3
 800b012:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b016:	4013      	ands	r3, r2
 800b018:	f846 3c04 	str.w	r3, [r6, #-4]
 800b01c:	e7d2      	b.n	800afc4 <__hexnan+0xd4>
 800b01e:	3f04      	subs	r7, #4
 800b020:	e7d0      	b.n	800afc4 <__hexnan+0xd4>
 800b022:	2004      	movs	r0, #4
 800b024:	e7d5      	b.n	800afd2 <__hexnan+0xe2>

0800b026 <__ascii_mbtowc>:
 800b026:	b082      	sub	sp, #8
 800b028:	b901      	cbnz	r1, 800b02c <__ascii_mbtowc+0x6>
 800b02a:	a901      	add	r1, sp, #4
 800b02c:	b142      	cbz	r2, 800b040 <__ascii_mbtowc+0x1a>
 800b02e:	b14b      	cbz	r3, 800b044 <__ascii_mbtowc+0x1e>
 800b030:	7813      	ldrb	r3, [r2, #0]
 800b032:	600b      	str	r3, [r1, #0]
 800b034:	7812      	ldrb	r2, [r2, #0]
 800b036:	1e10      	subs	r0, r2, #0
 800b038:	bf18      	it	ne
 800b03a:	2001      	movne	r0, #1
 800b03c:	b002      	add	sp, #8
 800b03e:	4770      	bx	lr
 800b040:	4610      	mov	r0, r2
 800b042:	e7fb      	b.n	800b03c <__ascii_mbtowc+0x16>
 800b044:	f06f 0001 	mvn.w	r0, #1
 800b048:	e7f8      	b.n	800b03c <__ascii_mbtowc+0x16>

0800b04a <_realloc_r>:
 800b04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04e:	4607      	mov	r7, r0
 800b050:	4614      	mov	r4, r2
 800b052:	460d      	mov	r5, r1
 800b054:	b921      	cbnz	r1, 800b060 <_realloc_r+0x16>
 800b056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b05a:	4611      	mov	r1, r2
 800b05c:	f7fd bcd0 	b.w	8008a00 <_malloc_r>
 800b060:	b92a      	cbnz	r2, 800b06e <_realloc_r+0x24>
 800b062:	f7fd fc59 	bl	8008918 <_free_r>
 800b066:	4625      	mov	r5, r4
 800b068:	4628      	mov	r0, r5
 800b06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b06e:	f000 f840 	bl	800b0f2 <_malloc_usable_size_r>
 800b072:	4284      	cmp	r4, r0
 800b074:	4606      	mov	r6, r0
 800b076:	d802      	bhi.n	800b07e <_realloc_r+0x34>
 800b078:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b07c:	d8f4      	bhi.n	800b068 <_realloc_r+0x1e>
 800b07e:	4621      	mov	r1, r4
 800b080:	4638      	mov	r0, r7
 800b082:	f7fd fcbd 	bl	8008a00 <_malloc_r>
 800b086:	4680      	mov	r8, r0
 800b088:	b908      	cbnz	r0, 800b08e <_realloc_r+0x44>
 800b08a:	4645      	mov	r5, r8
 800b08c:	e7ec      	b.n	800b068 <_realloc_r+0x1e>
 800b08e:	42b4      	cmp	r4, r6
 800b090:	4622      	mov	r2, r4
 800b092:	4629      	mov	r1, r5
 800b094:	bf28      	it	cs
 800b096:	4632      	movcs	r2, r6
 800b098:	f7ff fc46 	bl	800a928 <memcpy>
 800b09c:	4629      	mov	r1, r5
 800b09e:	4638      	mov	r0, r7
 800b0a0:	f7fd fc3a 	bl	8008918 <_free_r>
 800b0a4:	e7f1      	b.n	800b08a <_realloc_r+0x40>

0800b0a6 <__ascii_wctomb>:
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	b141      	cbz	r1, 800b0be <__ascii_wctomb+0x18>
 800b0ac:	2aff      	cmp	r2, #255	@ 0xff
 800b0ae:	d904      	bls.n	800b0ba <__ascii_wctomb+0x14>
 800b0b0:	228a      	movs	r2, #138	@ 0x8a
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0b8:	4770      	bx	lr
 800b0ba:	700a      	strb	r2, [r1, #0]
 800b0bc:	2001      	movs	r0, #1
 800b0be:	4770      	bx	lr

0800b0c0 <fiprintf>:
 800b0c0:	b40e      	push	{r1, r2, r3}
 800b0c2:	b503      	push	{r0, r1, lr}
 800b0c4:	4601      	mov	r1, r0
 800b0c6:	ab03      	add	r3, sp, #12
 800b0c8:	4805      	ldr	r0, [pc, #20]	@ (800b0e0 <fiprintf+0x20>)
 800b0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ce:	6800      	ldr	r0, [r0, #0]
 800b0d0:	9301      	str	r3, [sp, #4]
 800b0d2:	f7ff f9bb 	bl	800a44c <_vfiprintf_r>
 800b0d6:	b002      	add	sp, #8
 800b0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0dc:	b003      	add	sp, #12
 800b0de:	4770      	bx	lr
 800b0e0:	20000024 	.word	0x20000024

0800b0e4 <abort>:
 800b0e4:	b508      	push	{r3, lr}
 800b0e6:	2006      	movs	r0, #6
 800b0e8:	f000 f834 	bl	800b154 <raise>
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	f7f6 fddf 	bl	8001cb0 <_exit>

0800b0f2 <_malloc_usable_size_r>:
 800b0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0f6:	1f18      	subs	r0, r3, #4
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	bfbc      	itt	lt
 800b0fc:	580b      	ldrlt	r3, [r1, r0]
 800b0fe:	18c0      	addlt	r0, r0, r3
 800b100:	4770      	bx	lr

0800b102 <_raise_r>:
 800b102:	291f      	cmp	r1, #31
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4605      	mov	r5, r0
 800b108:	460c      	mov	r4, r1
 800b10a:	d904      	bls.n	800b116 <_raise_r+0x14>
 800b10c:	2316      	movs	r3, #22
 800b10e:	6003      	str	r3, [r0, #0]
 800b110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b114:	bd38      	pop	{r3, r4, r5, pc}
 800b116:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b118:	b112      	cbz	r2, 800b120 <_raise_r+0x1e>
 800b11a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b11e:	b94b      	cbnz	r3, 800b134 <_raise_r+0x32>
 800b120:	4628      	mov	r0, r5
 800b122:	f000 f831 	bl	800b188 <_getpid_r>
 800b126:	4622      	mov	r2, r4
 800b128:	4601      	mov	r1, r0
 800b12a:	4628      	mov	r0, r5
 800b12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b130:	f000 b818 	b.w	800b164 <_kill_r>
 800b134:	2b01      	cmp	r3, #1
 800b136:	d00a      	beq.n	800b14e <_raise_r+0x4c>
 800b138:	1c59      	adds	r1, r3, #1
 800b13a:	d103      	bne.n	800b144 <_raise_r+0x42>
 800b13c:	2316      	movs	r3, #22
 800b13e:	6003      	str	r3, [r0, #0]
 800b140:	2001      	movs	r0, #1
 800b142:	e7e7      	b.n	800b114 <_raise_r+0x12>
 800b144:	2100      	movs	r1, #0
 800b146:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b14a:	4620      	mov	r0, r4
 800b14c:	4798      	blx	r3
 800b14e:	2000      	movs	r0, #0
 800b150:	e7e0      	b.n	800b114 <_raise_r+0x12>
	...

0800b154 <raise>:
 800b154:	4b02      	ldr	r3, [pc, #8]	@ (800b160 <raise+0xc>)
 800b156:	4601      	mov	r1, r0
 800b158:	6818      	ldr	r0, [r3, #0]
 800b15a:	f7ff bfd2 	b.w	800b102 <_raise_r>
 800b15e:	bf00      	nop
 800b160:	20000024 	.word	0x20000024

0800b164 <_kill_r>:
 800b164:	b538      	push	{r3, r4, r5, lr}
 800b166:	4d07      	ldr	r5, [pc, #28]	@ (800b184 <_kill_r+0x20>)
 800b168:	2300      	movs	r3, #0
 800b16a:	4604      	mov	r4, r0
 800b16c:	4608      	mov	r0, r1
 800b16e:	4611      	mov	r1, r2
 800b170:	602b      	str	r3, [r5, #0]
 800b172:	f7f6 fd8d 	bl	8001c90 <_kill>
 800b176:	1c43      	adds	r3, r0, #1
 800b178:	d102      	bne.n	800b180 <_kill_r+0x1c>
 800b17a:	682b      	ldr	r3, [r5, #0]
 800b17c:	b103      	cbz	r3, 800b180 <_kill_r+0x1c>
 800b17e:	6023      	str	r3, [r4, #0]
 800b180:	bd38      	pop	{r3, r4, r5, pc}
 800b182:	bf00      	nop
 800b184:	200006b8 	.word	0x200006b8

0800b188 <_getpid_r>:
 800b188:	f7f6 bd7b 	b.w	8001c82 <_getpid>

0800b18c <_init>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	bf00      	nop
 800b190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b192:	bc08      	pop	{r3}
 800b194:	469e      	mov	lr, r3
 800b196:	4770      	bx	lr

0800b198 <_fini>:
 800b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19a:	bf00      	nop
 800b19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b19e:	bc08      	pop	{r3}
 800b1a0:	469e      	mov	lr, r3
 800b1a2:	4770      	bx	lr
