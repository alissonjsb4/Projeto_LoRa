
LoRa_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c74c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  0800c890  0800c890  0000d890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d264  0800d264  0000f1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d264  0800d264  0000e264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d26c  0800d26c  0000f1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d26c  0800d26c  0000e26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d270  0800d270  0000e270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800d274  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001e4  0800d458  0000f1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800d458  0000f4e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016812  00000000  00000000  0000f20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003901  00000000  00000000  00025a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00029328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d6  00000000  00000000  0002a990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb5f  00000000  00000000  0002ba66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bb5  00000000  00000000  0004b5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8ef0  00000000  00000000  0006117a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a06a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070dc  00000000  00000000  0011a0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0012118c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c874 	.word	0x0800c874

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800c874 	.word	0x0800c874

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ea6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	@ 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	@ 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001104:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001108:	f000 b9be 	b.w	8001488 <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f83c 	bl	8001190 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	2200      	movs	r2, #0
 8001128:	2300      	movs	r3, #0
 800112a:	4604      	mov	r4, r0
 800112c:	460d      	mov	r5, r1
 800112e:	f7ff fcad 	bl	8000a8c <__aeabi_dcmplt>
 8001132:	b928      	cbnz	r0, 8001140 <__aeabi_d2lz+0x1c>
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800113c:	f000 b80a 	b.w	8001154 <__aeabi_d2ulz>
 8001140:	4620      	mov	r0, r4
 8001142:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001146:	f000 f805 	bl	8001154 <__aeabi_d2ulz>
 800114a:	4240      	negs	r0, r0
 800114c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001150:	bd38      	pop	{r3, r4, r5, pc}
 8001152:	bf00      	nop

08001154 <__aeabi_d2ulz>:
 8001154:	b5d0      	push	{r4, r6, r7, lr}
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__aeabi_d2ulz+0x34>)
 8001158:	2200      	movs	r2, #0
 800115a:	4606      	mov	r6, r0
 800115c:	460f      	mov	r7, r1
 800115e:	f7ff fa23 	bl	80005a8 <__aeabi_dmul>
 8001162:	f7ff fcf9 	bl	8000b58 <__aeabi_d2uiz>
 8001166:	4604      	mov	r4, r0
 8001168:	f7ff f9a4 	bl	80004b4 <__aeabi_ui2d>
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <__aeabi_d2ulz+0x38>)
 800116e:	2200      	movs	r2, #0
 8001170:	f7ff fa1a 	bl	80005a8 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4630      	mov	r0, r6
 800117a:	4639      	mov	r1, r7
 800117c:	f7ff f85c 	bl	8000238 <__aeabi_dsub>
 8001180:	f7ff fcea 	bl	8000b58 <__aeabi_d2uiz>
 8001184:	4621      	mov	r1, r4
 8001186:	bdd0      	pop	{r4, r6, r7, pc}
 8001188:	3df00000 	.word	0x3df00000
 800118c:	41f00000 	.word	0x41f00000

08001190 <__udivmoddi4>:
 8001190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001194:	9d08      	ldr	r5, [sp, #32]
 8001196:	468e      	mov	lr, r1
 8001198:	4604      	mov	r4, r0
 800119a:	4688      	mov	r8, r1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d14a      	bne.n	8001236 <__udivmoddi4+0xa6>
 80011a0:	428a      	cmp	r2, r1
 80011a2:	4617      	mov	r7, r2
 80011a4:	d962      	bls.n	800126c <__udivmoddi4+0xdc>
 80011a6:	fab2 f682 	clz	r6, r2
 80011aa:	b14e      	cbz	r6, 80011c0 <__udivmoddi4+0x30>
 80011ac:	f1c6 0320 	rsb	r3, r6, #32
 80011b0:	fa01 f806 	lsl.w	r8, r1, r6
 80011b4:	fa20 f303 	lsr.w	r3, r0, r3
 80011b8:	40b7      	lsls	r7, r6
 80011ba:	ea43 0808 	orr.w	r8, r3, r8
 80011be:	40b4      	lsls	r4, r6
 80011c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011c4:	fa1f fc87 	uxth.w	ip, r7
 80011c8:	fbb8 f1fe 	udiv	r1, r8, lr
 80011cc:	0c23      	lsrs	r3, r4, #16
 80011ce:	fb0e 8811 	mls	r8, lr, r1, r8
 80011d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011d6:	fb01 f20c 	mul.w	r2, r1, ip
 80011da:	429a      	cmp	r2, r3
 80011dc:	d909      	bls.n	80011f2 <__udivmoddi4+0x62>
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80011e4:	f080 80ea 	bcs.w	80013bc <__udivmoddi4+0x22c>
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f240 80e7 	bls.w	80013bc <__udivmoddi4+0x22c>
 80011ee:	3902      	subs	r1, #2
 80011f0:	443b      	add	r3, r7
 80011f2:	1a9a      	subs	r2, r3, r2
 80011f4:	b2a3      	uxth	r3, r4
 80011f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80011fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80011fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001202:	fb00 fc0c 	mul.w	ip, r0, ip
 8001206:	459c      	cmp	ip, r3
 8001208:	d909      	bls.n	800121e <__udivmoddi4+0x8e>
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001210:	f080 80d6 	bcs.w	80013c0 <__udivmoddi4+0x230>
 8001214:	459c      	cmp	ip, r3
 8001216:	f240 80d3 	bls.w	80013c0 <__udivmoddi4+0x230>
 800121a:	443b      	add	r3, r7
 800121c:	3802      	subs	r0, #2
 800121e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001222:	eba3 030c 	sub.w	r3, r3, ip
 8001226:	2100      	movs	r1, #0
 8001228:	b11d      	cbz	r5, 8001232 <__udivmoddi4+0xa2>
 800122a:	40f3      	lsrs	r3, r6
 800122c:	2200      	movs	r2, #0
 800122e:	e9c5 3200 	strd	r3, r2, [r5]
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	428b      	cmp	r3, r1
 8001238:	d905      	bls.n	8001246 <__udivmoddi4+0xb6>
 800123a:	b10d      	cbz	r5, 8001240 <__udivmoddi4+0xb0>
 800123c:	e9c5 0100 	strd	r0, r1, [r5]
 8001240:	2100      	movs	r1, #0
 8001242:	4608      	mov	r0, r1
 8001244:	e7f5      	b.n	8001232 <__udivmoddi4+0xa2>
 8001246:	fab3 f183 	clz	r1, r3
 800124a:	2900      	cmp	r1, #0
 800124c:	d146      	bne.n	80012dc <__udivmoddi4+0x14c>
 800124e:	4573      	cmp	r3, lr
 8001250:	d302      	bcc.n	8001258 <__udivmoddi4+0xc8>
 8001252:	4282      	cmp	r2, r0
 8001254:	f200 8105 	bhi.w	8001462 <__udivmoddi4+0x2d2>
 8001258:	1a84      	subs	r4, r0, r2
 800125a:	eb6e 0203 	sbc.w	r2, lr, r3
 800125e:	2001      	movs	r0, #1
 8001260:	4690      	mov	r8, r2
 8001262:	2d00      	cmp	r5, #0
 8001264:	d0e5      	beq.n	8001232 <__udivmoddi4+0xa2>
 8001266:	e9c5 4800 	strd	r4, r8, [r5]
 800126a:	e7e2      	b.n	8001232 <__udivmoddi4+0xa2>
 800126c:	2a00      	cmp	r2, #0
 800126e:	f000 8090 	beq.w	8001392 <__udivmoddi4+0x202>
 8001272:	fab2 f682 	clz	r6, r2
 8001276:	2e00      	cmp	r6, #0
 8001278:	f040 80a4 	bne.w	80013c4 <__udivmoddi4+0x234>
 800127c:	1a8a      	subs	r2, r1, r2
 800127e:	0c03      	lsrs	r3, r0, #16
 8001280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001284:	b280      	uxth	r0, r0
 8001286:	b2bc      	uxth	r4, r7
 8001288:	2101      	movs	r1, #1
 800128a:	fbb2 fcfe 	udiv	ip, r2, lr
 800128e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001296:	fb04 f20c 	mul.w	r2, r4, ip
 800129a:	429a      	cmp	r2, r3
 800129c:	d907      	bls.n	80012ae <__udivmoddi4+0x11e>
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80012a4:	d202      	bcs.n	80012ac <__udivmoddi4+0x11c>
 80012a6:	429a      	cmp	r2, r3
 80012a8:	f200 80e0 	bhi.w	800146c <__udivmoddi4+0x2dc>
 80012ac:	46c4      	mov	ip, r8
 80012ae:	1a9b      	subs	r3, r3, r2
 80012b0:	fbb3 f2fe 	udiv	r2, r3, lr
 80012b4:	fb0e 3312 	mls	r3, lr, r2, r3
 80012b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012bc:	fb02 f404 	mul.w	r4, r2, r4
 80012c0:	429c      	cmp	r4, r3
 80012c2:	d907      	bls.n	80012d4 <__udivmoddi4+0x144>
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80012ca:	d202      	bcs.n	80012d2 <__udivmoddi4+0x142>
 80012cc:	429c      	cmp	r4, r3
 80012ce:	f200 80ca 	bhi.w	8001466 <__udivmoddi4+0x2d6>
 80012d2:	4602      	mov	r2, r0
 80012d4:	1b1b      	subs	r3, r3, r4
 80012d6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80012da:	e7a5      	b.n	8001228 <__udivmoddi4+0x98>
 80012dc:	f1c1 0620 	rsb	r6, r1, #32
 80012e0:	408b      	lsls	r3, r1
 80012e2:	fa22 f706 	lsr.w	r7, r2, r6
 80012e6:	431f      	orrs	r7, r3
 80012e8:	fa0e f401 	lsl.w	r4, lr, r1
 80012ec:	fa20 f306 	lsr.w	r3, r0, r6
 80012f0:	fa2e fe06 	lsr.w	lr, lr, r6
 80012f4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80012f8:	4323      	orrs	r3, r4
 80012fa:	fa00 f801 	lsl.w	r8, r0, r1
 80012fe:	fa1f fc87 	uxth.w	ip, r7
 8001302:	fbbe f0f9 	udiv	r0, lr, r9
 8001306:	0c1c      	lsrs	r4, r3, #16
 8001308:	fb09 ee10 	mls	lr, r9, r0, lr
 800130c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001310:	fb00 fe0c 	mul.w	lr, r0, ip
 8001314:	45a6      	cmp	lr, r4
 8001316:	fa02 f201 	lsl.w	r2, r2, r1
 800131a:	d909      	bls.n	8001330 <__udivmoddi4+0x1a0>
 800131c:	193c      	adds	r4, r7, r4
 800131e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8001322:	f080 809c 	bcs.w	800145e <__udivmoddi4+0x2ce>
 8001326:	45a6      	cmp	lr, r4
 8001328:	f240 8099 	bls.w	800145e <__udivmoddi4+0x2ce>
 800132c:	3802      	subs	r0, #2
 800132e:	443c      	add	r4, r7
 8001330:	eba4 040e 	sub.w	r4, r4, lr
 8001334:	fa1f fe83 	uxth.w	lr, r3
 8001338:	fbb4 f3f9 	udiv	r3, r4, r9
 800133c:	fb09 4413 	mls	r4, r9, r3, r4
 8001340:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001344:	fb03 fc0c 	mul.w	ip, r3, ip
 8001348:	45a4      	cmp	ip, r4
 800134a:	d908      	bls.n	800135e <__udivmoddi4+0x1ce>
 800134c:	193c      	adds	r4, r7, r4
 800134e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8001352:	f080 8082 	bcs.w	800145a <__udivmoddi4+0x2ca>
 8001356:	45a4      	cmp	ip, r4
 8001358:	d97f      	bls.n	800145a <__udivmoddi4+0x2ca>
 800135a:	3b02      	subs	r3, #2
 800135c:	443c      	add	r4, r7
 800135e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001362:	eba4 040c 	sub.w	r4, r4, ip
 8001366:	fba0 ec02 	umull	lr, ip, r0, r2
 800136a:	4564      	cmp	r4, ip
 800136c:	4673      	mov	r3, lr
 800136e:	46e1      	mov	r9, ip
 8001370:	d362      	bcc.n	8001438 <__udivmoddi4+0x2a8>
 8001372:	d05f      	beq.n	8001434 <__udivmoddi4+0x2a4>
 8001374:	b15d      	cbz	r5, 800138e <__udivmoddi4+0x1fe>
 8001376:	ebb8 0203 	subs.w	r2, r8, r3
 800137a:	eb64 0409 	sbc.w	r4, r4, r9
 800137e:	fa04 f606 	lsl.w	r6, r4, r6
 8001382:	fa22 f301 	lsr.w	r3, r2, r1
 8001386:	431e      	orrs	r6, r3
 8001388:	40cc      	lsrs	r4, r1
 800138a:	e9c5 6400 	strd	r6, r4, [r5]
 800138e:	2100      	movs	r1, #0
 8001390:	e74f      	b.n	8001232 <__udivmoddi4+0xa2>
 8001392:	fbb1 fcf2 	udiv	ip, r1, r2
 8001396:	0c01      	lsrs	r1, r0, #16
 8001398:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800139c:	b280      	uxth	r0, r0
 800139e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013a2:	463b      	mov	r3, r7
 80013a4:	4638      	mov	r0, r7
 80013a6:	463c      	mov	r4, r7
 80013a8:	46b8      	mov	r8, r7
 80013aa:	46be      	mov	lr, r7
 80013ac:	2620      	movs	r6, #32
 80013ae:	fbb1 f1f7 	udiv	r1, r1, r7
 80013b2:	eba2 0208 	sub.w	r2, r2, r8
 80013b6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013ba:	e766      	b.n	800128a <__udivmoddi4+0xfa>
 80013bc:	4601      	mov	r1, r0
 80013be:	e718      	b.n	80011f2 <__udivmoddi4+0x62>
 80013c0:	4610      	mov	r0, r2
 80013c2:	e72c      	b.n	800121e <__udivmoddi4+0x8e>
 80013c4:	f1c6 0220 	rsb	r2, r6, #32
 80013c8:	fa2e f302 	lsr.w	r3, lr, r2
 80013cc:	40b7      	lsls	r7, r6
 80013ce:	40b1      	lsls	r1, r6
 80013d0:	fa20 f202 	lsr.w	r2, r0, r2
 80013d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d8:	430a      	orrs	r2, r1
 80013da:	fbb3 f8fe 	udiv	r8, r3, lr
 80013de:	b2bc      	uxth	r4, r7
 80013e0:	fb0e 3318 	mls	r3, lr, r8, r3
 80013e4:	0c11      	lsrs	r1, r2, #16
 80013e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80013ea:	fb08 f904 	mul.w	r9, r8, r4
 80013ee:	40b0      	lsls	r0, r6
 80013f0:	4589      	cmp	r9, r1
 80013f2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80013f6:	b280      	uxth	r0, r0
 80013f8:	d93e      	bls.n	8001478 <__udivmoddi4+0x2e8>
 80013fa:	1879      	adds	r1, r7, r1
 80013fc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001400:	d201      	bcs.n	8001406 <__udivmoddi4+0x276>
 8001402:	4589      	cmp	r9, r1
 8001404:	d81f      	bhi.n	8001446 <__udivmoddi4+0x2b6>
 8001406:	eba1 0109 	sub.w	r1, r1, r9
 800140a:	fbb1 f9fe 	udiv	r9, r1, lr
 800140e:	fb09 f804 	mul.w	r8, r9, r4
 8001412:	fb0e 1119 	mls	r1, lr, r9, r1
 8001416:	b292      	uxth	r2, r2
 8001418:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800141c:	4542      	cmp	r2, r8
 800141e:	d229      	bcs.n	8001474 <__udivmoddi4+0x2e4>
 8001420:	18ba      	adds	r2, r7, r2
 8001422:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001426:	d2c4      	bcs.n	80013b2 <__udivmoddi4+0x222>
 8001428:	4542      	cmp	r2, r8
 800142a:	d2c2      	bcs.n	80013b2 <__udivmoddi4+0x222>
 800142c:	f1a9 0102 	sub.w	r1, r9, #2
 8001430:	443a      	add	r2, r7
 8001432:	e7be      	b.n	80013b2 <__udivmoddi4+0x222>
 8001434:	45f0      	cmp	r8, lr
 8001436:	d29d      	bcs.n	8001374 <__udivmoddi4+0x1e4>
 8001438:	ebbe 0302 	subs.w	r3, lr, r2
 800143c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001440:	3801      	subs	r0, #1
 8001442:	46e1      	mov	r9, ip
 8001444:	e796      	b.n	8001374 <__udivmoddi4+0x1e4>
 8001446:	eba7 0909 	sub.w	r9, r7, r9
 800144a:	4449      	add	r1, r9
 800144c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001450:	fbb1 f9fe 	udiv	r9, r1, lr
 8001454:	fb09 f804 	mul.w	r8, r9, r4
 8001458:	e7db      	b.n	8001412 <__udivmoddi4+0x282>
 800145a:	4673      	mov	r3, lr
 800145c:	e77f      	b.n	800135e <__udivmoddi4+0x1ce>
 800145e:	4650      	mov	r0, sl
 8001460:	e766      	b.n	8001330 <__udivmoddi4+0x1a0>
 8001462:	4608      	mov	r0, r1
 8001464:	e6fd      	b.n	8001262 <__udivmoddi4+0xd2>
 8001466:	443b      	add	r3, r7
 8001468:	3a02      	subs	r2, #2
 800146a:	e733      	b.n	80012d4 <__udivmoddi4+0x144>
 800146c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001470:	443b      	add	r3, r7
 8001472:	e71c      	b.n	80012ae <__udivmoddi4+0x11e>
 8001474:	4649      	mov	r1, r9
 8001476:	e79c      	b.n	80013b2 <__udivmoddi4+0x222>
 8001478:	eba1 0109 	sub.w	r1, r1, r9
 800147c:	46c4      	mov	ip, r8
 800147e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001482:	fb09 f804 	mul.w	r8, r9, r4
 8001486:	e7c4      	b.n	8001412 <__udivmoddi4+0x282>

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001498:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800149a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014b0:	68fb      	ldr	r3, [r7, #12]
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014c0:	2004      	movs	r0, #4
 80014c2:	f7ff ffe3 	bl	800148c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff ffe0 	bl	800148c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	200b      	movs	r0, #11
 80014d2:	f001 f8fe 	bl	80026d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014d6:	200b      	movs	r0, #11
 80014d8:	f001 f915 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	200c      	movs	r0, #12
 80014e2:	f001 f8f6 	bl	80026d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014e6:	200c      	movs	r0, #12
 80014e8:	f001 f90d 	bl	8002706 <HAL_NVIC_EnableIRQ>

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4313      	orrs	r3, r2
 8001506:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	2004      	movs	r0, #4
 8001536:	f7ff ffdb 	bl	80014f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff ffd8 	bl	80014f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2138      	movs	r1, #56	@ 0x38
 8001544:	4809      	ldr	r0, [pc, #36]	@ (800156c <MX_GPIO_Init+0x4c>)
 8001546:	f001 fd21 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800154a:	2338      	movs	r3, #56	@ 0x38
 800154c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4803      	ldr	r0, [pc, #12]	@ (800156c <MX_GPIO_Init+0x4c>)
 8001560:	f001 fbb4 	bl	8002ccc <HAL_GPIO_Init>

}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	48000800 	.word	0x48000800

08001570 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redireciona a saída do printf para a USART2 (nossa porta de debug para o PC)
int _write(int file, char *ptr, int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	b29a      	uxth	r2, r3
 8001580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	4804      	ldr	r0, [pc, #16]	@ (8001598 <_write+0x28>)
 8001588:	f003 fe11 	bl	80051ae <HAL_UART_Transmit>
  return len;
 800158c:	687b      	ldr	r3, [r7, #4]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000230 	.word	0x20000230

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a0:	f000 ff4a 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a4:	f000 f848 	bl	8001638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a8:	f7ff ffba 	bl	8001520 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ac:	f7ff ff86 	bl	80014bc <MX_DMA_Init>
  MX_SUBGHZ_Init();
 80015b0:	f000 fc26 	bl	8001e00 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80015b4:	f000 fd24 	bl	8002000 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f000 fe6b 	bl	8002294 <BSP_LED_Init>

  printf("\r\n--- LoRa_Base (MASTER NODE) ---\r\n");
 80015be:	4817      	ldr	r0, [pc, #92]	@ (800161c <main+0x80>)
 80015c0:	f007 fd2e 	bl	8009020 <puts>
  printf("Estacao Base com Menu de Comandos\r\n");
 80015c4:	4816      	ldr	r0, [pc, #88]	@ (8001620 <main+0x84>)
 80015c6:	f007 fd2b 	bl	8009020 <puts>

  Radio_Init();
 80015ca:	f000 fa81 	bl	8001ad0 <Radio_Init>
  printf("Radio LoRa inicializado em modo MASTER.\r\n");
 80015ce:	4815      	ldr	r0, [pc, #84]	@ (8001624 <main+0x88>)
 80015d0:	f007 fd26 	bl	8009020 <puts>

  ShowMenu();
 80015d4:	f000 f882 	bl	80016dc <ShowMenu>

  // Inicia recepção não-bloqueante da UART para o menu
  HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	4913      	ldr	r1, [pc, #76]	@ (8001628 <main+0x8c>)
 80015dc:	4813      	ldr	r0, [pc, #76]	@ (800162c <main+0x90>)
 80015de:	f003 fe6d 	bl	80052bc <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Verifica timeout de resposta
    if (aguardando_resposta) {
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <main+0x94>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <main+0x54>
      CheckResponseTimeout();
 80015ec:	f000 fa3c 	bl	8001a68 <CheckResponseTimeout>
    }

    // O processamento acontece nos callbacks de interrupção
    // O processador pode entrar em modo sleep para economizar energia
    if (!aguardando_resposta && !lora_tx_busy) {
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <main+0x94>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f083 0301 	eor.w	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <main+0x46>
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <main+0x98>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f083 0301 	eor.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0e8      	beq.n	80015e2 <main+0x46>
      HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001610:	2101      	movs	r1, #1
 8001612:	2000      	movs	r0, #0
 8001614:	f001 fcf8 	bl	8003008 <HAL_PWR_EnterSLEEPMode>
    if (aguardando_resposta) {
 8001618:	e7e3      	b.n	80015e2 <main+0x46>
 800161a:	bf00      	nop
 800161c:	0800c890 	.word	0x0800c890
 8001620:	0800c8b4 	.word	0x0800c8b4
 8001624:	0800c8d8 	.word	0x0800c8d8
 8001628:	20000214 	.word	0x20000214
 800162c:	20000230 	.word	0x20000230
 8001630:	20000215 	.word	0x20000215
 8001634:	20000216 	.word	0x20000216

08001638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b09a      	sub	sp, #104	@ 0x68
 800163c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163e:	f107 0320 	add.w	r3, r7, #32
 8001642:	2248      	movs	r2, #72	@ 0x48
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f007 fdec 	bl	8009224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <SystemClock_Config+0xa0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001666:	4a1c      	ldr	r2, [pc, #112]	@ (80016d8 <SystemClock_Config+0xa0>)
 8001668:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <SystemClock_Config+0xa0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800167a:	2320      	movs	r3, #32
 800167c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800167e:	2301      	movs	r3, #1
 8001680:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001682:	2300      	movs	r3, #0
 8001684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001686:	2360      	movs	r3, #96	@ 0x60
 8001688:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800168a:	2300      	movs	r3, #0
 800168c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	4618      	mov	r0, r3
 8001694:	f001 fff4 	bl	8003680 <HAL_RCC_OscConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800169e:	f000 fb37 	bl	8001d10 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80016a2:	234f      	movs	r3, #79	@ 0x4f
 80016a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fb60 	bl	8003d84 <HAL_RCC_ClockConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016ca:	f000 fb21 	bl	8001d10 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	3768      	adds	r7, #104	@ 0x68
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	58000400 	.word	0x58000400

080016dc <ShowMenu>:

/* USER CODE BEGIN 4 */
// --- Implementação das Funções ---

void ShowMenu(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
    printf("\r\n=== MENU DE COMANDOS ===\r\n");
 80016e0:	4808      	ldr	r0, [pc, #32]	@ (8001704 <ShowMenu+0x28>)
 80016e2:	f007 fc9d 	bl	8009020 <puts>
    printf("1 - Solicitar Telemetria\r\n");
 80016e6:	4808      	ldr	r0, [pc, #32]	@ (8001708 <ShowMenu+0x2c>)
 80016e8:	f007 fc9a 	bl	8009020 <puts>
    printf("2 - Realizar uma leitura ou escrita\r\n");
 80016ec:	4807      	ldr	r0, [pc, #28]	@ (800170c <ShowMenu+0x30>)
 80016ee:	f007 fc97 	bl	8009020 <puts>
    printf("3 - Solicitar a execução de um comando\r\n");
 80016f2:	4807      	ldr	r0, [pc, #28]	@ (8001710 <ShowMenu+0x34>)
 80016f4:	f007 fc94 	bl	8009020 <puts>
    printf("Digite o numero do comando: ");
 80016f8:	4806      	ldr	r0, [pc, #24]	@ (8001714 <ShowMenu+0x38>)
 80016fa:	f007 fc29 	bl	8008f50 <iprintf>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	0800c904 	.word	0x0800c904
 8001708:	0800c920 	.word	0x0800c920
 800170c:	0800c93c 	.word	0x0800c93c
 8001710:	0800c964 	.word	0x0800c964
 8001714:	0800c990 	.word	0x0800c990

08001718 <ProcessUserInput>:

void ProcessUserInput(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
    switch (uart_rx_char)
 800171c:	4b3f      	ldr	r3, [pc, #252]	@ (800181c <ProcessUserInput+0x104>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b33      	cmp	r3, #51	@ 0x33
 8001722:	d048      	beq.n	80017b6 <ProcessUserInput+0x9e>
 8001724:	2b33      	cmp	r3, #51	@ 0x33
 8001726:	dc67      	bgt.n	80017f8 <ProcessUserInput+0xe0>
 8001728:	2b31      	cmp	r3, #49	@ 0x31
 800172a:	d002      	beq.n	8001732 <ProcessUserInput+0x1a>
 800172c:	2b32      	cmp	r3, #50	@ 0x32
 800172e:	d021      	beq.n	8001774 <ProcessUserInput+0x5c>
 8001730:	e062      	b.n	80017f8 <ProcessUserInput+0xe0>
    {
        case '1':
            printf("1\r\n");
 8001732:	483b      	ldr	r0, [pc, #236]	@ (8001820 <ProcessUserInput+0x108>)
 8001734:	f007 fc74 	bl	8009020 <puts>
            if (!aguardando_resposta && !lora_tx_busy) {
 8001738:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <ProcessUserInput+0x10c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f083 0301 	eor.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d011      	beq.n	800176c <ProcessUserInput+0x54>
 8001748:	4b37      	ldr	r3, [pc, #220]	@ (8001828 <ProcessUserInput+0x110>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <ProcessUserInput+0x54>
                printf("Solicitando telemetria...\r\n");
 8001758:	4834      	ldr	r0, [pc, #208]	@ (800182c <ProcessUserInput+0x114>)
 800175a:	f007 fc61 	bl	8009020 <puts>
                SendCommand(CMD_TYPE_REQUEST, REQUEST_TELEMETRY_PACKET, NULL, 0);
 800175e:	2300      	movs	r3, #0
 8001760:	2200      	movs	r2, #0
 8001762:	21a0      	movs	r1, #160	@ 0xa0
 8001764:	2004      	movs	r0, #4
 8001766:	f000 f875 	bl	8001854 <SendCommand>
            } else {
                printf("ERRO: Operacao em andamento, aguarde.\r\n");
            }
            break;
 800176a:	e04f      	b.n	800180c <ProcessUserInput+0xf4>
                printf("ERRO: Operacao em andamento, aguarde.\r\n");
 800176c:	4830      	ldr	r0, [pc, #192]	@ (8001830 <ProcessUserInput+0x118>)
 800176e:	f007 fc57 	bl	8009020 <puts>
            break;
 8001772:	e04b      	b.n	800180c <ProcessUserInput+0xf4>

        case '2':
            printf("2\r\n");
 8001774:	482f      	ldr	r0, [pc, #188]	@ (8001834 <ProcessUserInput+0x11c>)
 8001776:	f007 fc53 	bl	8009020 <puts>
            if (!aguardando_resposta && !lora_tx_busy) {
 800177a:	4b2a      	ldr	r3, [pc, #168]	@ (8001824 <ProcessUserInput+0x10c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f083 0301 	eor.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d011      	beq.n	80017ae <ProcessUserInput+0x96>
 800178a:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <ProcessUserInput+0x110>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f083 0301 	eor.w	r3, r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <ProcessUserInput+0x96>
                printf("Solicitando execução de comando da radiossonda...\r\n");
 800179a:	4827      	ldr	r0, [pc, #156]	@ (8001838 <ProcessUserInput+0x120>)
 800179c:	f007 fc40 	bl	8009020 <puts>
                SendCommand(CMD_TYPE_EXECUTE, ACTION_RESET_MCU, NULL, 0);
 80017a0:	2300      	movs	r3, #0
 80017a2:	2200      	movs	r2, #0
 80017a4:	2180      	movs	r1, #128	@ 0x80
 80017a6:	2003      	movs	r0, #3
 80017a8:	f000 f854 	bl	8001854 <SendCommand>
            } else {
				printf("ERRO: Operacao em andamento, aguarde.\r\n");
			}
            break;
 80017ac:	e02e      	b.n	800180c <ProcessUserInput+0xf4>
				printf("ERRO: Operacao em andamento, aguarde.\r\n");
 80017ae:	4820      	ldr	r0, [pc, #128]	@ (8001830 <ProcessUserInput+0x118>)
 80017b0:	f007 fc36 	bl	8009020 <puts>
            break;
 80017b4:	e02a      	b.n	800180c <ProcessUserInput+0xf4>

        case '3':
            printf("3\r\n");
 80017b6:	4821      	ldr	r0, [pc, #132]	@ (800183c <ProcessUserInput+0x124>)
 80017b8:	f007 fc32 	bl	8009020 <puts>
            if (!aguardando_resposta && !lora_tx_busy) {
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <ProcessUserInput+0x10c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f083 0301 	eor.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d011      	beq.n	80017f0 <ProcessUserInput+0xd8>
 80017cc:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <ProcessUserInput+0x110>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f083 0301 	eor.w	r3, r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <ProcessUserInput+0xd8>
                printf("Solicitando leitura/escrita da radiossonda...\r\n");
 80017dc:	4818      	ldr	r0, [pc, #96]	@ (8001840 <ProcessUserInput+0x128>)
 80017de:	f007 fc1f 	bl	8009020 <puts>
                SendCommand(CMD_TYPE_WRITE, 0x00, lora_rx_buffer, 100); //eventualmente deverá ser outra função ou uma função adaptada para receber o parâmetro de escrita ou leitura
 80017e2:	2364      	movs	r3, #100	@ 0x64
 80017e4:	4a17      	ldr	r2, [pc, #92]	@ (8001844 <ProcessUserInput+0x12c>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	2002      	movs	r0, #2
 80017ea:	f000 f833 	bl	8001854 <SendCommand>
            } else {
                printf("ERRO: Operacao em andamento, aguarde.\r\n");
            }
            break;
 80017ee:	e00d      	b.n	800180c <ProcessUserInput+0xf4>
                printf("ERRO: Operacao em andamento, aguarde.\r\n");
 80017f0:	480f      	ldr	r0, [pc, #60]	@ (8001830 <ProcessUserInput+0x118>)
 80017f2:	f007 fc15 	bl	8009020 <puts>
            break;
 80017f6:	e009      	b.n	800180c <ProcessUserInput+0xf4>

        default:
            printf("%c\r\n", uart_rx_char);
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <ProcessUserInput+0x104>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4812      	ldr	r0, [pc, #72]	@ (8001848 <ProcessUserInput+0x130>)
 8001800:	f007 fba6 	bl	8008f50 <iprintf>
            printf("Comando invalido! Digite 1, 2 ou 3.\r\n");
 8001804:	4811      	ldr	r0, [pc, #68]	@ (800184c <ProcessUserInput+0x134>)
 8001806:	f007 fc0b 	bl	8009020 <puts>
            break;
 800180a:	bf00      	nop
    }

    // Reinicia a recepção da UART
    HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
 800180c:	2201      	movs	r2, #1
 800180e:	4903      	ldr	r1, [pc, #12]	@ (800181c <ProcessUserInput+0x104>)
 8001810:	480f      	ldr	r0, [pc, #60]	@ (8001850 <ProcessUserInput+0x138>)
 8001812:	f003 fd53 	bl	80052bc <HAL_UART_Receive_IT>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000214 	.word	0x20000214
 8001820:	0800c9b0 	.word	0x0800c9b0
 8001824:	20000215 	.word	0x20000215
 8001828:	20000216 	.word	0x20000216
 800182c:	0800c9b4 	.word	0x0800c9b4
 8001830:	0800c9d0 	.word	0x0800c9d0
 8001834:	0800c9f8 	.word	0x0800c9f8
 8001838:	0800c9fc 	.word	0x0800c9fc
 800183c:	0800ca34 	.word	0x0800ca34
 8001840:	0800ca38 	.word	0x0800ca38
 8001844:	20000200 	.word	0x20000200
 8001848:	0800ca68 	.word	0x0800ca68
 800184c:	0800ca70 	.word	0x0800ca70
 8001850:	20000230 	.word	0x20000230

08001854 <SendCommand>:

void SendCommand(CommandType_t type, ParameterID_t param, uint8_t* data, uint8_t len) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	603a      	str	r2, [r7, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	460b      	mov	r3, r1
 8001864:	71bb      	strb	r3, [r7, #6]
 8001866:	4613      	mov	r3, r2
 8001868:	717b      	strb	r3, [r7, #5]
    // 1. Inicializa a struct inteira com zeros.
    // Isso resolve o aviso de "uninitialized" e já limpa o payload_data.
    CommandPacket_t cmd_packet = {0};
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	f8c3 2007 	str.w	r2, [r3, #7]

    // 2. Preenche o cabeçalho do pacote com os valores corretos.
    cmd_packet.sequence_number = ++command_sequence; // Supondo que command_sequence é uma var global
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <SendCommand+0xb8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	4a23      	ldr	r2, [pc, #140]	@ (800190c <SendCommand+0xb8>)
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b22      	ldr	r3, [pc, #136]	@ (800190c <SendCommand+0xb8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	61fb      	str	r3, [r7, #28]
    cmd_packet.command_type = type;
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f887 3020 	strb.w	r3, [r7, #32]
    cmd_packet.parameter_id = param;
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    cmd_packet.payload_len = len;
 8001894:	797b      	ldrb	r3, [r7, #5]
 8001896:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    // 3. Copia os dados do payload, se houver.
    // A validação de 'len' garante que não copiaremos lixo de memória.
    if (data!= NULL && len > 0 && len <= MAX_PAYLOAD_DATA_SIZE) {
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <SendCommand+0x66>
 80018a0:	797b      	ldrb	r3, [r7, #5]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <SendCommand+0x66>
 80018a6:	797b      	ldrb	r3, [r7, #5]
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d806      	bhi.n	80018ba <SendCommand+0x66>
        memcpy(cmd_packet.payload_data, data, len);
 80018ac:	f8d7 3023 	ldr.w	r3, [r7, #35]	@ 0x23
 80018b0:	797a      	ldrb	r2, [r7, #5]
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f007 fd34 	bl	8009322 <memcpy>
    }

    // A chamada 'memset' anterior foi removida por ser desnecessária e perigosa.

    lora_tx_busy = true;
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <SendCommand+0xbc>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
    last_command_sent = type; // Corrigido para usar o 'type' passado para a função
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <SendCommand+0xc0>)
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	7013      	strb	r3, [r2, #0]

    // Configura os parâmetros do rádio (seu código aqui está correto)
    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 80018c6:	2301      	movs	r3, #1
 80018c8:	723b      	strb	r3, [r7, #8]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 80018ca:	2308      	movs	r3, #8
 80018cc:	82fb      	strh	r3, [r7, #22]
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 80018ce:	2301      	movs	r3, #1
 80018d0:	763b      	strb	r3, [r7, #24]
    packetParams.Params.LoRa.PayloadLength = MAX_PACKET_SIZE; // Sempre envia o pacote de tamanho máximo
 80018d2:	230b      	movs	r3, #11
 80018d4:	767b      	strb	r3, [r7, #25]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 80018d6:	2301      	movs	r3, #1
 80018d8:	76bb      	strb	r3, [r7, #26]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80018da:	2300      	movs	r3, #0
 80018dc:	76fb      	strb	r3, [r7, #27]
    SUBGRF_SetPacketParams(&packetParams);
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4618      	mov	r0, r3
 80018e4:	f006 f918 	bl	8007b18 <SUBGRF_SetPacketParams>

    printf("Transmitindo comando %d (seq: %lu)...\r\n", type, cmd_packet.sequence_number);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	4619      	mov	r1, r3
 80018ee:	480a      	ldr	r0, [pc, #40]	@ (8001918 <SendCommand+0xc4>)
 80018f0:	f007 fb2e 	bl	8008f50 <iprintf>

    // Envia a struct inteira. O receptor irá ignorar o padding.
    SUBGRF_SendPayload((uint8_t*)&cmd_packet, MAX_PACKET_SIZE, 0);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	210b      	movs	r1, #11
 80018fc:	4618      	mov	r0, r3
 80018fe:	f005 fd3f 	bl	8007380 <SUBGRF_SendPayload>
}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	@ 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000218 	.word	0x20000218
 8001910:	20000216 	.word	0x20000216
 8001914:	20000000 	.word	0x20000000
 8001918:	0800ca98 	.word	0x0800ca98

0800191c <ProcessTelemetryResponse>:

void ProcessTelemetryResponse(uint8_t* buffer, uint8_t size)
{
 800191c:	b5b0      	push	{r4, r5, r7, lr}
 800191e:	b08c      	sub	sp, #48	@ 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
    // 1. Validação do tamanho do pacote recebido. Esta parte está perfeita.
    if (size!= TELEMETRY_PAYLOAD_SIZE) {
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	2b14      	cmp	r3, #20
 800192c:	d006      	beq.n	800193c <ProcessTelemetryResponse+0x20>
        printf("ERRO: Telemetria com tamanho de pacote inválido: %d (esperado: %d)\r\n", size, TELEMETRY_PAYLOAD_SIZE);
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	2214      	movs	r2, #20
 8001932:	4619      	mov	r1, r3
 8001934:	483e      	ldr	r0, [pc, #248]	@ (8001a30 <ProcessTelemetryResponse+0x114>)
 8001936:	f007 fb0b 	bl	8008f50 <iprintf>
 800193a:	e076      	b.n	8001a2a <ProcessTelemetryResponse+0x10e>
    LoRaPayload_t telemetry_data;

    // 3. Copia de forma segura APENAS os bytes que correspondem à telemetria real
    // do início do buffer maior para a nossa variável local.
    // Isso ignora efetivamente o padding no final do buffer.
    memcpy(&telemetry_data, buffer, sizeof(LoRaPayload_t));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f107 040c 	add.w	r4, r7, #12
 8001942:	461d      	mov	r5, r3
 8001944:	6828      	ldr	r0, [r5, #0]
 8001946:	6869      	ldr	r1, [r5, #4]
 8001948:	68aa      	ldr	r2, [r5, #8]
 800194a:	68eb      	ldr	r3, [r5, #12]
 800194c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194e:	6928      	ldr	r0, [r5, #16]
 8001950:	6020      	str	r0, [r4, #0]

    // 4. Todas as operações agora usam a cópia local limpa e segura.
    float latitude = telemetry_data.latitude_raw / 10000000.0f;
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fa29 	bl	8000dac <__aeabi_i2f>
 800195a:	4603      	mov	r3, r0
 800195c:	4935      	ldr	r1, [pc, #212]	@ (8001a34 <ProcessTelemetryResponse+0x118>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fb2c 	bl	8000fbc <__aeabi_fdiv>
 8001964:	4603      	mov	r3, r0
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float longitude = telemetry_data.longitude_raw / 10000000.0f;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fa1e 	bl	8000dac <__aeabi_i2f>
 8001970:	4603      	mov	r3, r0
 8001972:	4930      	ldr	r1, [pc, #192]	@ (8001a34 <ProcessTelemetryResponse+0x118>)
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fb21 	bl	8000fbc <__aeabi_fdiv>
 800197a:	4603      	mov	r3, r0
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
    float altitude_m = telemetry_data.altitude_raw / 1000.0f;
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fa13 	bl	8000dac <__aeabi_i2f>
 8001986:	4603      	mov	r3, r0
 8001988:	492b      	ldr	r1, [pc, #172]	@ (8001a38 <ProcessTelemetryResponse+0x11c>)
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fb16 	bl	8000fbc <__aeabi_fdiv>
 8001990:	4603      	mov	r3, r0
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24

    bool gpsFixOK = (telemetry_data.sats_and_fix >> 7) & 0x01;
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	09db      	lsrs	r3, r3, #7
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t satCount = telemetry_data.sats_and_fix & 0x7F;
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    printf("\r\n======\r\n");
 80019b4:	4821      	ldr	r0, [pc, #132]	@ (8001a3c <ProcessTelemetryResponse+0x120>)
 80019b6:	f007 fb33 	bl	8009020 <puts>
    printf("  ID do Pacote:   %lu\r\n", telemetry_data.packet_id);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4619      	mov	r1, r3
 80019be:	4820      	ldr	r0, [pc, #128]	@ (8001a40 <ProcessTelemetryResponse+0x124>)
 80019c0:	f007 fac6 	bl	8008f50 <iprintf>
    printf("  Latitude:       %.7f\r\n", latitude);
 80019c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019c6:	f7fe fd97 	bl	80004f8 <__aeabi_f2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	481d      	ldr	r0, [pc, #116]	@ (8001a44 <ProcessTelemetryResponse+0x128>)
 80019d0:	f007 fabe 	bl	8008f50 <iprintf>
    printf("  Longitude:      %.7f\r\n", longitude);
 80019d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019d6:	f7fe fd8f 	bl	80004f8 <__aeabi_f2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	481a      	ldr	r0, [pc, #104]	@ (8001a48 <ProcessTelemetryResponse+0x12c>)
 80019e0:	f007 fab6 	bl	8008f50 <iprintf>
    printf("  Altitude:       %.2f m\r\n", altitude_m);
 80019e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019e6:	f7fe fd87 	bl	80004f8 <__aeabi_f2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4817      	ldr	r0, [pc, #92]	@ (8001a4c <ProcessTelemetryResponse+0x130>)
 80019f0:	f007 faae 	bl	8008f50 <iprintf>
    printf("  Voltagem:       %u mV\r\n", telemetry_data.voltage_mv);
 80019f4:	8bbb      	ldrh	r3, [r7, #28]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4815      	ldr	r0, [pc, #84]	@ (8001a50 <ProcessTelemetryResponse+0x134>)
 80019fa:	f007 faa9 	bl	8008f50 <iprintf>
    printf("  Temp. Radio:    %d C\r\n", telemetry_data.radio_temp_c);
 80019fe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a02:	4619      	mov	r1, r3
 8001a04:	4813      	ldr	r0, [pc, #76]	@ (8001a54 <ProcessTelemetryResponse+0x138>)
 8001a06:	f007 faa3 	bl	8008f50 <iprintf>
    printf("  Status GPS:     %s (Sats: %u)\r\n", gpsFixOK? "FIX OK" : "NO FIX", satCount);
 8001a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <ProcessTelemetryResponse+0xfa>
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <ProcessTelemetryResponse+0x13c>)
 8001a14:	e000      	b.n	8001a18 <ProcessTelemetryResponse+0xfc>
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <ProcessTelemetryResponse+0x140>)
 8001a18:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4810      	ldr	r0, [pc, #64]	@ (8001a60 <ProcessTelemetryResponse+0x144>)
 8001a20:	f007 fa96 	bl	8008f50 <iprintf>
    printf("==============================\r\n");
 8001a24:	480f      	ldr	r0, [pc, #60]	@ (8001a64 <ProcessTelemetryResponse+0x148>)
 8001a26:	f007 fafb 	bl	8009020 <puts>

    // Retorna ao menu
//    ShowMenu();
}
 8001a2a:	3730      	adds	r7, #48	@ 0x30
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a30:	0800cac0 	.word	0x0800cac0
 8001a34:	4b189680 	.word	0x4b189680
 8001a38:	447a0000 	.word	0x447a0000
 8001a3c:	0800cb08 	.word	0x0800cb08
 8001a40:	0800cb14 	.word	0x0800cb14
 8001a44:	0800cb2c 	.word	0x0800cb2c
 8001a48:	0800cb48 	.word	0x0800cb48
 8001a4c:	0800cb64 	.word	0x0800cb64
 8001a50:	0800cb80 	.word	0x0800cb80
 8001a54:	0800cb9c 	.word	0x0800cb9c
 8001a58:	0800cbb8 	.word	0x0800cbb8
 8001a5c:	0800cbc0 	.word	0x0800cbc0
 8001a60:	0800cbc8 	.word	0x0800cbc8
 8001a64:	0800cbec 	.word	0x0800cbec

08001a68 <CheckResponseTimeout>:

void CheckResponseTimeout(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
    if (HAL_GetTick() - response_timer > RESPONSE_TIMEOUT_MS) {
 8001a6e:	f000 fd4f 	bl	8002510 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <CheckResponseTimeout+0x5c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d91c      	bls.n	8001abc <CheckResponseTimeout+0x54>
        printf("TIMEOUT: Nenhuma resposta recebida em %d ms.\r\n", RESPONSE_TIMEOUT_MS);
 8001a82:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001a86:	4810      	ldr	r0, [pc, #64]	@ (8001ac8 <CheckResponseTimeout+0x60>)
 8001a88:	f007 fa62 	bl	8008f50 <iprintf>
        aguardando_resposta = false;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <CheckResponseTimeout+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]

        // Reconfigura para modo de recepção padrão (comandos)
        PacketParams_t packetParams;
        packetParams.PacketType = PACKET_TYPE_LORA;
 8001a92:	2301      	movs	r3, #1
 8001a94:	713b      	strb	r3, [r7, #4]
        packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8001a96:	2308      	movs	r3, #8
 8001a98:	827b      	strh	r3, [r7, #18]
        packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	753b      	strb	r3, [r7, #20]
        packetParams.Params.LoRa.PayloadLength = MAX_PACKET_SIZE;
 8001a9e:	230b      	movs	r3, #11
 8001aa0:	757b      	strb	r3, [r7, #21]
        packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75bb      	strb	r3, [r7, #22]
        packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
        SUBGRF_SetPacketParams(&packetParams);
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f006 f833 	bl	8007b18 <SUBGRF_SetPacketParams>

        SUBGRF_SetRx(0); // Volta para recepção contínua
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f005 fcf4 	bl	80074a0 <SUBGRF_SetRx>

        ShowMenu();
 8001ab8:	f7ff fe10 	bl	80016dc <ShowMenu>
    }
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000021c 	.word	0x2000021c
 8001ac8:	0800cc0c 	.word	0x0800cc0c
 8001acc:	20000215 	.word	0x20000215

08001ad0 <Radio_Init>:

void Radio_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	@ 0x30
 8001ad4:	af00      	add	r7, sp, #0
    SUBGRF_Init(RadioOnDioIrq);
 8001ad6:	4820      	ldr	r0, [pc, #128]	@ (8001b58 <Radio_Init+0x88>)
 8001ad8:	f005 fbd8 	bl	800728c <SUBGRF_Init>

    SUBGRF_SetStandby(STDBY_RC);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f005 fca3 	bl	8007428 <SUBGRF_SetStandby>
    SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f005 fe56 	bl	8007794 <SUBGRF_SetPacketType>
    SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8001ae8:	481c      	ldr	r0, [pc, #112]	@ (8001b5c <Radio_Init+0x8c>)
 8001aea:	f005 fe0d 	bl	8007708 <SUBGRF_SetRfFrequency>
    SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8001aee:	2016      	movs	r0, #22
 8001af0:	f006 f9fe 	bl	8007ef0 <SUBGRF_SetRfTxPower>

    ModulationParams_t modulationParams;
    modulationParams.PacketType = PACKET_TYPE_LORA;
 8001af4:	2301      	movs	r3, #1
 8001af6:	753b      	strb	r3, [r7, #20]
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 8001af8:	230a      	movs	r3, #10
 8001afa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 8001afe:	2304      	movs	r3, #4
 8001b00:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    modulationParams.Params.LoRa.CodingRate = LORA_CODINGRATE;
 8001b04:	2304      	movs	r3, #4
 8001b06:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    SUBGRF_SetModulationParams(&modulationParams);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4618      	mov	r0, r3
 8001b16:	f005 ff31 	bl	800797c <SUBGRF_SetModulationParams>

    // Configuração inicial para receber ACKs (comandos têm tamanho menor)
    PacketParams_t packetParams;
    packetParams.PacketType = PACKET_TYPE_LORA;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	703b      	strb	r3, [r7, #0]
    packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	81fb      	strh	r3, [r7, #14]
    packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001b22:	2301      	movs	r3, #1
 8001b24:	743b      	strb	r3, [r7, #16]
    packetParams.Params.LoRa.PayloadLength = MAX_PACKET_SIZE;
 8001b26:	230b      	movs	r3, #11
 8001b28:	747b      	strb	r3, [r7, #17]
    packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	74bb      	strb	r3, [r7, #18]
    packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	74fb      	strb	r3, [r7, #19]
    SUBGRF_SetPacketParams(&packetParams);
 8001b32:	463b      	mov	r3, r7
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 ffef 	bl	8007b18 <SUBGRF_SetPacketParams>

    // Configura interrupções para TX e RX
    SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_DONE | IRQ_CRC_ERROR | IRQ_RX_TX_TIMEOUT,
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f240 2143 	movw	r1, #579	@ 0x243
 8001b42:	f240 2043 	movw	r0, #579	@ 0x243
 8001b46:	f005 fd83 	bl	8007650 <SUBGRF_SetDioIrqParams>
                           IRQ_TX_DONE | IRQ_RX_DONE | IRQ_CRC_ERROR | IRQ_RX_TX_TIMEOUT,
                           IRQ_RADIO_NONE, IRQ_RADIO_NONE);

    // Inicia em modo de recepção contínua (aguardando possíveis respostas)
    SUBGRF_SetRx(0);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f005 fca8 	bl	80074a0 <SUBGRF_SetRx>
}
 8001b50:	bf00      	nop
 8001b52:	3730      	adds	r7, #48	@ 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	08001b61 	.word	0x08001b61
 8001b5c:	3689cac0 	.word	0x3689cac0

08001b60 <RadioOnDioIrq>:

void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08e      	sub	sp, #56	@ 0x38
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq)
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b70:	f000 8087 	beq.w	8001c82 <RadioOnDioIrq+0x122>
 8001b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b78:	f300 809b 	bgt.w	8001cb2 <RadioOnDioIrq+0x152>
 8001b7c:	2b40      	cmp	r3, #64	@ 0x40
 8001b7e:	d074      	beq.n	8001c6a <RadioOnDioIrq+0x10a>
 8001b80:	2b40      	cmp	r3, #64	@ 0x40
 8001b82:	f300 8096 	bgt.w	8001cb2 <RadioOnDioIrq+0x152>
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d002      	beq.n	8001b90 <RadioOnDioIrq+0x30>
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d033      	beq.n	8001bf6 <RadioOnDioIrq+0x96>
            SUBGRF_SetRx(0);
            ShowMenu();
            break;

        default:
            break;
 8001b8e:	e090      	b.n	8001cb2 <RadioOnDioIrq+0x152>
            printf("LoRa TX concluida.\r\n");
 8001b90:	484a      	ldr	r0, [pc, #296]	@ (8001cbc <RadioOnDioIrq+0x15c>)
 8001b92:	f007 fa45 	bl	8009020 <puts>
            lora_tx_busy = false;
 8001b96:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc0 <RadioOnDioIrq+0x160>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
            packetParams.PacketType = PACKET_TYPE_LORA;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	867b      	strh	r3, [r7, #50]	@ 0x32
            packetParams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH; // Mantemos o tamanho fixo
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            packetParams.Params.LoRa.PayloadLength = TELEMETRY_PAYLOAD_SIZE;      // AJUSTE CRÍTICO: Sempre esperamos o tamanho máximo
 8001bac:	2314      	movs	r3, #20
 8001bae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
            packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SUBGRF_SetPacketParams(&packetParams);
 8001bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f005 ffa8 	bl	8007b18 <SUBGRF_SetPacketParams>
            if (last_command_sent == CMD_TYPE_REQUEST || last_command_sent == CMD_TYPE_READ) {
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <RadioOnDioIrq+0x164>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d003      	beq.n	8001bd8 <RadioOnDioIrq+0x78>
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc4 <RadioOnDioIrq+0x164>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d10a      	bne.n	8001bee <RadioOnDioIrq+0x8e>
                printf("Aguardando resposta...\r\n");
 8001bd8:	483b      	ldr	r0, [pc, #236]	@ (8001cc8 <RadioOnDioIrq+0x168>)
 8001bda:	f007 fa21 	bl	8009020 <puts>
                aguardando_resposta = true;
 8001bde:	4b3b      	ldr	r3, [pc, #236]	@ (8001ccc <RadioOnDioIrq+0x16c>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
                response_timer = HAL_GetTick();
 8001be4:	f000 fc94 	bl	8002510 <HAL_GetTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4a39      	ldr	r2, [pc, #228]	@ (8001cd0 <RadioOnDioIrq+0x170>)
 8001bec:	6013      	str	r3, [r2, #0]
            SUBGRF_SetRx(0);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f005 fc56 	bl	80074a0 <SUBGRF_SetRx>
            break;
 8001bf4:	e05e      	b.n	8001cb4 <RadioOnDioIrq+0x154>
                uint8_t received_size = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                BSP_LED_Toggle(LED_GREEN);
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f000 fb83 	bl	8002308 <BSP_LED_Toggle>
                aguardando_resposta = false;
 8001c02:	4b32      	ldr	r3, [pc, #200]	@ (8001ccc <RadioOnDioIrq+0x16c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
                SUBGRF_GetPayload(lora_rx_buffer, &received_size, TELEMETRY_PAYLOAD_SIZE);
 8001c08:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8001c0c:	2214      	movs	r2, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4830      	ldr	r0, [pc, #192]	@ (8001cd4 <RadioOnDioIrq+0x174>)
 8001c12:	f005 fb93 	bl	800733c <SUBGRF_GetPayload>
                SUBGRF_GetPacketStatus(&packetStatus);
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f006 f844 	bl	8007ca8 <SUBGRF_GetPacketStatus>
                       packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt, received_size);
 8001c20:	f997 3018 	ldrsb.w	r3, [r7, #24]
                printf("Resposta LoRa recebida! RSSI: %d dBm, SNR: %d, Size: %d\r\n",
 8001c24:	4619      	mov	r1, r3
                       packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt, received_size);
 8001c26:	f997 3019 	ldrsb.w	r3, [r7, #25]
                printf("Resposta LoRa recebida! RSSI: %d dBm, SNR: %d, Size: %d\r\n",
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c30:	4829      	ldr	r0, [pc, #164]	@ (8001cd8 <RadioOnDioIrq+0x178>)
 8001c32:	f007 f98d 	bl	8008f50 <iprintf>
                if (received_size == TELEMETRY_PAYLOAD_SIZE) {
 8001c36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c3a:	2b14      	cmp	r3, #20
 8001c3c:	d108      	bne.n	8001c50 <RadioOnDioIrq+0xf0>
                	ProcessTelemetryResponse(lora_rx_buffer, received_size);
 8001c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c42:	4619      	mov	r1, r3
 8001c44:	4823      	ldr	r0, [pc, #140]	@ (8001cd4 <RadioOnDioIrq+0x174>)
 8001c46:	f7ff fe69 	bl	800191c <ProcessTelemetryResponse>
                    ShowMenu();
 8001c4a:	f7ff fd47 	bl	80016dc <ShowMenu>
 8001c4e:	e008      	b.n	8001c62 <RadioOnDioIrq+0x102>
                    printf("ERRO: Resposta com tamanho inesperado: %d (esperado: %d)\r\n", received_size, TELEMETRY_PAYLOAD_SIZE);
 8001c50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c54:	2214      	movs	r2, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4820      	ldr	r0, [pc, #128]	@ (8001cdc <RadioOnDioIrq+0x17c>)
 8001c5a:	f007 f979 	bl	8008f50 <iprintf>
                    ShowMenu();
 8001c5e:	f7ff fd3d 	bl	80016dc <ShowMenu>
                SUBGRF_SetRx(0); // Apenas volte a ouvir.
 8001c62:	2000      	movs	r0, #0
 8001c64:	f005 fc1c 	bl	80074a0 <SUBGRF_SetRx>
            break;
 8001c68:	e024      	b.n	8001cb4 <RadioOnDioIrq+0x154>
            printf("WARN: Erro de CRC na resposta LoRa.\r\n");
 8001c6a:	481d      	ldr	r0, [pc, #116]	@ (8001ce0 <RadioOnDioIrq+0x180>)
 8001c6c:	f007 f9d8 	bl	8009020 <puts>
            aguardando_resposta = false;
 8001c70:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <RadioOnDioIrq+0x16c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
            SUBGRF_SetRx(0);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f005 fc12 	bl	80074a0 <SUBGRF_SetRx>
            ShowMenu();
 8001c7c:	f7ff fd2e 	bl	80016dc <ShowMenu>
            break;
 8001c80:	e018      	b.n	8001cb4 <RadioOnDioIrq+0x154>
            if (aguardando_resposta) {
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <RadioOnDioIrq+0x16c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <RadioOnDioIrq+0x134>
                printf("ERRO: Timeout! Nenhuma resposta recebida.\r\n");
 8001c8c:	4815      	ldr	r0, [pc, #84]	@ (8001ce4 <RadioOnDioIrq+0x184>)
 8001c8e:	f007 f9c7 	bl	8009020 <puts>
 8001c92:	e002      	b.n	8001c9a <RadioOnDioIrq+0x13a>
                printf("WARN: LoRa timeout.\r\n");
 8001c94:	4814      	ldr	r0, [pc, #80]	@ (8001ce8 <RadioOnDioIrq+0x188>)
 8001c96:	f007 f9c3 	bl	8009020 <puts>
            lora_tx_busy = false;
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <RadioOnDioIrq+0x160>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
            aguardando_resposta = false;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <RadioOnDioIrq+0x16c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
            SUBGRF_SetRx(0);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f005 fbfa 	bl	80074a0 <SUBGRF_SetRx>
            ShowMenu();
 8001cac:	f7ff fd16 	bl	80016dc <ShowMenu>
            break;
 8001cb0:	e000      	b.n	8001cb4 <RadioOnDioIrq+0x154>
            break;
 8001cb2:	bf00      	nop
    }
}
 8001cb4:	bf00      	nop
 8001cb6:	3738      	adds	r7, #56	@ 0x38
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	0800cc3c 	.word	0x0800cc3c
 8001cc0:	20000216 	.word	0x20000216
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	0800cc50 	.word	0x0800cc50
 8001ccc:	20000215 	.word	0x20000215
 8001cd0:	2000021c 	.word	0x2000021c
 8001cd4:	20000200 	.word	0x20000200
 8001cd8:	0800cc68 	.word	0x0800cc68
 8001cdc:	0800cca4 	.word	0x0800cca4
 8001ce0:	0800cce0 	.word	0x0800cce0
 8001ce4:	0800cd08 	.word	0x0800cd08
 8001ce8:	0800cd34 	.word	0x0800cd34

08001cec <HAL_UART_RxCpltCallback>:

// Callback da UART para processar entrada do usuário
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <HAL_UART_RxCpltCallback+0x20>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_UART_RxCpltCallback+0x16>
        ProcessUserInput();
 8001cfe:	f7ff fd0b 	bl	8001718 <ProcessUserInput>
    }
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40004400 	.word	0x40004400

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <Error_Handler+0x8>

08001d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <NMI_Handler+0x4>

08001d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <MemManage_Handler+0x4>

08001d40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <BusFault_Handler+0x4>

08001d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <UsageFault_Handler+0x4>

08001d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d78:	f000 fbb8 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <DMA1_Channel1_IRQHandler+0x10>)
 8001d86:	f000 fe3f 	bl	8002a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200002c4 	.word	0x200002c4

08001d94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <DMA1_Channel2_IRQHandler+0x10>)
 8001d9a:	f000 fe35 	bl	8002a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000324 	.word	0x20000324

08001da8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <USART2_IRQHandler+0x10>)
 8001dae:	f003 fad1 	bl	8005354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000230 	.word	0x20000230

08001dbc <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <SUBGHZ_Radio_IRQHandler+0x10>)
 8001dc2:	f002 ffd5 	bl	8004d70 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000220 	.word	0x20000220

08001dd0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ddc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001dde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001df4:	68fb      	ldr	r3, [r7, #12]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <MX_SUBGHZ_Init+0x20>)
 8001e06:	2210      	movs	r2, #16
 8001e08:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_SUBGHZ_Init+0x20>)
 8001e0c:	f002 fd2e 	bl	800486c <HAL_SUBGHZ_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e16:	f7ff ff7b 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000220 	.word	0x20000220

08001e24 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff ffcf 	bl	8001dd0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2032      	movs	r0, #50	@ 0x32
 8001e38:	f000 fc4b 	bl	80026d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e3c:	2032      	movs	r0, #50	@ 0x32
 8001e3e:	f000 fc62 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  return 1;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <_kill>:

int _kill(int pid, int sig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e62:	f007 fa31 	bl	80092c8 <__errno>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2216      	movs	r2, #22
 8001e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_exit>:

void _exit (int status)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe7 	bl	8001e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e8a:	bf00      	nop
 8001e8c:	e7fd      	b.n	8001e8a <_exit+0x12>

08001e8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e00a      	b.n	8001eb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ea0:	f3af 8000 	nop.w
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	60ba      	str	r2, [r7, #8]
 8001eac:	b2ca      	uxtb	r2, r1
 8001eae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dbf0      	blt.n	8001ea0 <_read+0x12>
  }

  return len;
 8001ebe:	687b      	ldr	r3, [r7, #4]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eee:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <_isatty>:

int _isatty(int file)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f04:	2301      	movs	r3, #1
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	@ (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f007 f9b6 	bl	80092c8 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20010000 	.word	0x20010000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	2000022c 	.word	0x2000022c
 8001f90:	200004e8 	.word	0x200004e8

08001f94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <LL_AHB2_GRP1_EnableClock>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <LL_APB1_GRP1_EnableClock>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002004:	4b22      	ldr	r3, [pc, #136]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 8002006:	4a23      	ldr	r2, [pc, #140]	@ (8002094 <MX_USART2_UART_Init+0x94>)
 8002008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800200a:	4b21      	ldr	r3, [pc, #132]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 800200c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b1f      	ldr	r3, [pc, #124]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b1d      	ldr	r3, [pc, #116]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800201e:	4b1c      	ldr	r3, [pc, #112]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 800203e:	2200      	movs	r2, #0
 8002040:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 8002044:	2200      	movs	r2, #0
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002048:	4811      	ldr	r0, [pc, #68]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 800204a:	f003 f860 	bl	800510e <HAL_UART_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002054:	f7ff fe5c 	bl	8001d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002058:	2100      	movs	r1, #0
 800205a:	480d      	ldr	r0, [pc, #52]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 800205c:	f005 f823 	bl	80070a6 <HAL_UARTEx_SetTxFifoThreshold>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002066:	f7ff fe53 	bl	8001d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	4808      	ldr	r0, [pc, #32]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 800206e:	f005 f858 	bl	8007122 <HAL_UARTEx_SetRxFifoThreshold>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002078:	f7ff fe4a 	bl	8001d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800207c:	4804      	ldr	r0, [pc, #16]	@ (8002090 <MX_USART2_UART_Init+0x90>)
 800207e:	f004 ffda 	bl	8007036 <HAL_UARTEx_DisableFifoMode>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002088:	f7ff fe42 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000230 	.word	0x20000230
 8002094:	40004400 	.word	0x40004400

08002098 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b096      	sub	sp, #88	@ 0x58
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2238      	movs	r2, #56	@ 0x38
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f007 f8b3 	bl	8009224 <memset>
  if(uartHandle->Instance==USART2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a4e      	ldr	r2, [pc, #312]	@ (80021fc <HAL_UART_MspInit+0x164>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	f040 8094 	bne.w	80021f2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020ca:	2302      	movs	r3, #2
 80020cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020ce:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80020d2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fa13 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80020e4:	f7ff fe14 	bl	8001d10 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80020ec:	f7ff ff70 	bl	8001fd0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7ff ff55 	bl	8001fa0 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80020f6:	230c      	movs	r3, #12
 80020f8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002106:	2307      	movs	r3, #7
 8002108:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800210e:	4619      	mov	r1, r3
 8002110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002114:	f000 fdda 	bl	8002ccc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002118:	4b39      	ldr	r3, [pc, #228]	@ (8002200 <HAL_UART_MspInit+0x168>)
 800211a:	4a3a      	ldr	r2, [pc, #232]	@ (8002204 <HAL_UART_MspInit+0x16c>)
 800211c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800211e:	4b38      	ldr	r3, [pc, #224]	@ (8002200 <HAL_UART_MspInit+0x168>)
 8002120:	2213      	movs	r2, #19
 8002122:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002124:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <HAL_UART_MspInit+0x168>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800212a:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <HAL_UART_MspInit+0x168>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002130:	4b33      	ldr	r3, [pc, #204]	@ (8002200 <HAL_UART_MspInit+0x168>)
 8002132:	2280      	movs	r2, #128	@ 0x80
 8002134:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002136:	4b32      	ldr	r3, [pc, #200]	@ (8002200 <HAL_UART_MspInit+0x168>)
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800213c:	4b30      	ldr	r3, [pc, #192]	@ (8002200 <HAL_UART_MspInit+0x168>)
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002142:	4b2f      	ldr	r3, [pc, #188]	@ (8002200 <HAL_UART_MspInit+0x168>)
 8002144:	2220      	movs	r2, #32
 8002146:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002148:	4b2d      	ldr	r3, [pc, #180]	@ (8002200 <HAL_UART_MspInit+0x168>)
 800214a:	2200      	movs	r2, #0
 800214c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800214e:	482c      	ldr	r0, [pc, #176]	@ (8002200 <HAL_UART_MspInit+0x168>)
 8002150:	f000 faf4 	bl	800273c <HAL_DMA_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800215a:	f7ff fdd9 	bl	8001d10 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800215e:	2110      	movs	r1, #16
 8002160:	4827      	ldr	r0, [pc, #156]	@ (8002200 <HAL_UART_MspInit+0x168>)
 8002162:	f000 fd17 	bl	8002b94 <HAL_DMA_ConfigChannelAttributes>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 800216c:	f7ff fdd0 	bl	8001d10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <HAL_UART_MspInit+0x168>)
 8002174:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002178:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <HAL_UART_MspInit+0x168>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <HAL_UART_MspInit+0x170>)
 8002180:	4a22      	ldr	r2, [pc, #136]	@ (800220c <HAL_UART_MspInit+0x174>)
 8002182:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002184:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <HAL_UART_MspInit+0x170>)
 8002186:	2214      	movs	r2, #20
 8002188:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800218a:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <HAL_UART_MspInit+0x170>)
 800218c:	2210      	movs	r2, #16
 800218e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <HAL_UART_MspInit+0x170>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002196:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <HAL_UART_MspInit+0x170>)
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219c:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <HAL_UART_MspInit+0x170>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a2:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_UART_MspInit+0x170>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80021a8:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <HAL_UART_MspInit+0x170>)
 80021aa:	2220      	movs	r2, #32
 80021ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021ae:	4b16      	ldr	r3, [pc, #88]	@ (8002208 <HAL_UART_MspInit+0x170>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021b4:	4814      	ldr	r0, [pc, #80]	@ (8002208 <HAL_UART_MspInit+0x170>)
 80021b6:	f000 fac1 	bl	800273c <HAL_DMA_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80021c0:	f7ff fda6 	bl	8001d10 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80021c4:	2110      	movs	r1, #16
 80021c6:	4810      	ldr	r0, [pc, #64]	@ (8002208 <HAL_UART_MspInit+0x170>)
 80021c8:	f000 fce4 	bl	8002b94 <HAL_DMA_ConfigChannelAttributes>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80021d2:	f7ff fd9d 	bl	8001d10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002208 <HAL_UART_MspInit+0x170>)
 80021da:	67da      	str	r2, [r3, #124]	@ 0x7c
 80021dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <HAL_UART_MspInit+0x170>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2025      	movs	r0, #37	@ 0x25
 80021e8:	f000 fa73 	bl	80026d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021ec:	2025      	movs	r0, #37	@ 0x25
 80021ee:	f000 fa8a 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021f2:	bf00      	nop
 80021f4:	3758      	adds	r7, #88	@ 0x58
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40004400 	.word	0x40004400
 8002200:	200002c4 	.word	0x200002c4
 8002204:	40020008 	.word	0x40020008
 8002208:	20000324 	.word	0x20000324
 800220c:	4002001c 	.word	0x4002001c

08002210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002210:	480d      	ldr	r0, [pc, #52]	@ (8002248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002212:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002214:	f7ff febe 	bl	8001f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002218:	480c      	ldr	r0, [pc, #48]	@ (800224c <LoopForever+0x6>)
  ldr r1, =_edata
 800221a:	490d      	ldr	r1, [pc, #52]	@ (8002250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <LoopForever+0xe>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002230:	4c0a      	ldr	r4, [pc, #40]	@ (800225c <LoopForever+0x16>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800223e:	f007 f849 	bl	80092d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002242:	f7ff f9ab 	bl	800159c <main>

08002246 <LoopForever>:

LoopForever:
    b LoopForever
 8002246:	e7fe      	b.n	8002246 <LoopForever>
  ldr   r0, =_estack
 8002248:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002254:	0800d274 	.word	0x0800d274
  ldr r2, =_sbss
 8002258:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800225c:	200004e4 	.word	0x200004e4

08002260 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC_IRQHandler>

08002262 <LL_AHB2_GRP1_EnableClock>:
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800226e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002270:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4313      	orrs	r3, r2
 8002278:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7ff ffd7 	bl	8002262 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <BSP_LED_Init+0x6c>)
 80022b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022bc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <BSP_LED_Init+0x70>)
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	f107 020c 	add.w	r2, r7, #12
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fcf7 	bl	8002ccc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4a08      	ldr	r2, [pc, #32]	@ (8002304 <BSP_LED_Init+0x70>)
 80022e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <BSP_LED_Init+0x6c>)
 80022ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ee:	2200      	movs	r2, #0
 80022f0:	4619      	mov	r1, r3
 80022f2:	f000 fe4b 	bl	8002f8c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	0800ce08 	.word	0x0800ce08
 8002304:	20000008 	.word	0x20000008

08002308 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	4a07      	ldr	r2, [pc, #28]	@ (8002334 <BSP_LED_Toggle+0x2c>)
 8002316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	4906      	ldr	r1, [pc, #24]	@ (8002338 <BSP_LED_Toggle+0x30>)
 800231e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002322:	4619      	mov	r1, r3
 8002324:	4610      	mov	r0, r2
 8002326:	f000 fe48 	bl	8002fba <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000008 	.word	0x20000008
 8002338:	0800ce08 	.word	0x0800ce08

0800233c <LL_AHB2_GRP1_EnableClock>:
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002348:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800234a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002358:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002360:	68fb      	ldr	r3, [r7, #12]
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8002380:	2004      	movs	r0, #4
 8002382:	f7ff ffdb 	bl	800233c <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002386:	2310      	movs	r3, #16
 8002388:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800238a:	2301      	movs	r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4812      	ldr	r0, [pc, #72]	@ (80023e4 <BSP_RADIO_Init+0x78>)
 800239c:	f000 fc96 	bl	8002ccc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80023a0:	2320      	movs	r3, #32
 80023a2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	480e      	ldr	r0, [pc, #56]	@ (80023e4 <BSP_RADIO_Init+0x78>)
 80023aa:	f000 fc8f 	bl	8002ccc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80023ae:	2308      	movs	r3, #8
 80023b0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	480b      	ldr	r0, [pc, #44]	@ (80023e4 <BSP_RADIO_Init+0x78>)
 80023b8:	f000 fc88 	bl	8002ccc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80023bc:	2200      	movs	r2, #0
 80023be:	2120      	movs	r1, #32
 80023c0:	4808      	ldr	r0, [pc, #32]	@ (80023e4 <BSP_RADIO_Init+0x78>)
 80023c2:	f000 fde3 	bl	8002f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80023c6:	2200      	movs	r2, #0
 80023c8:	2110      	movs	r1, #16
 80023ca:	4806      	ldr	r0, [pc, #24]	@ (80023e4 <BSP_RADIO_Init+0x78>)
 80023cc:	f000 fdde 	bl	8002f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80023d0:	2200      	movs	r2, #0
 80023d2:	2108      	movs	r1, #8
 80023d4:	4803      	ldr	r0, [pc, #12]	@ (80023e4 <BSP_RADIO_Init+0x78>)
 80023d6:	f000 fdd9 	bl	8002f8c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	48000800 	.word	0x48000800

080023e8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80023fa:	2301      	movs	r3, #1
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002422:	230f      	movs	r3, #15
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e001      	b.n	800242c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002428:	2316      	movs	r3, #22
 800242a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800242c:	68fb      	ldr	r3, [r7, #12]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002442:	2003      	movs	r0, #3
 8002444:	f000 f93a 	bl	80026bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002448:	f001 fe7e 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 800244c:	4603      	mov	r3, r0
 800244e:	4a09      	ldr	r2, [pc, #36]	@ (8002474 <HAL_Init+0x3c>)
 8002450:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f810 	bl	8002478 <HAL_InitTick>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	e001      	b.n	8002468 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002464:	f7ff fc5a 	bl	8001d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002468:	79fb      	ldrb	r3, [r7, #7]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002484:	4b17      	ldr	r3, [pc, #92]	@ (80024e4 <HAL_InitTick+0x6c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d024      	beq.n	80024d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800248c:	f001 fe5c 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <HAL_InitTick+0x6c>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800249c:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f93c 	bl	8002722 <HAL_SYSTICK_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10f      	bne.n	80024d0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d809      	bhi.n	80024ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b6:	2200      	movs	r2, #0
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024be:	f000 f908 	bl	80026d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c2:	4a09      	ldr	r2, [pc, #36]	@ (80024e8 <HAL_InitTick+0x70>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e007      	b.n	80024da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e004      	b.n	80024da <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e001      	b.n	80024da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000018 	.word	0x20000018
 80024e8:	20000014 	.word	0x20000014

080024ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_IncTick+0x1c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_IncTick+0x20>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a03      	ldr	r2, [pc, #12]	@ (800250c <HAL_IncTick+0x20>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	20000018 	.word	0x20000018
 800250c:	20000384 	.word	0x20000384

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b02      	ldr	r3, [pc, #8]	@ (8002520 <HAL_GetTick+0x10>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	20000384 	.word	0x20000384

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db0b      	blt.n	80025b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4906      	ldr	r1, [pc, #24]	@ (80025bc <__NVIC_EnableIRQ+0x34>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2001      	movs	r0, #1
 80025aa:	fa00 f202 	lsl.w	r2, r0, r2
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	@ (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	@ 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002688:	d301      	bcc.n	800268e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268a:	2301      	movs	r3, #1
 800268c:	e00f      	b.n	80026ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268e:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <SysTick_Config+0x40>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002696:	210f      	movs	r1, #15
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800269c:	f7ff ff90 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <SysTick_Config+0x40>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a6:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <SysTick_Config+0x40>)
 80026a8:	2207      	movs	r2, #7
 80026aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	e000e010 	.word	0xe000e010

080026bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ff2d 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff44 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff92 	bl	8002614 <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff61 	bl	80025c0 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff37 	bl	8002588 <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffa4 	bl	8002678 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e08e      	b.n	800286c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <HAL_DMA_Init+0x138>)
 8002756:	429a      	cmp	r2, r3
 8002758:	d80f      	bhi.n	800277a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	4b45      	ldr	r3, [pc, #276]	@ (8002878 <HAL_DMA_Init+0x13c>)
 8002762:	4413      	add	r3, r2
 8002764:	4a45      	ldr	r2, [pc, #276]	@ (800287c <HAL_DMA_Init+0x140>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	009a      	lsls	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a42      	ldr	r2, [pc, #264]	@ (8002880 <HAL_DMA_Init+0x144>)
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
 8002778:	e00e      	b.n	8002798 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	4b40      	ldr	r3, [pc, #256]	@ (8002884 <HAL_DMA_Init+0x148>)
 8002782:	4413      	add	r3, r2
 8002784:	4a3d      	ldr	r2, [pc, #244]	@ (800287c <HAL_DMA_Init+0x140>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	009a      	lsls	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a3c      	ldr	r2, [pc, #240]	@ (8002888 <HAL_DMA_Init+0x14c>)
 8002796:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80027ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa02 	bl	8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027f8:	d102      	bne.n	8002800 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002808:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800280c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002816:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d010      	beq.n	8002842 <HAL_DMA_Init+0x106>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d80c      	bhi.n	8002842 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fa2b 	bl	8002c84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	e008      	b.n	8002854 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40020407 	.word	0x40020407
 8002878:	bffdfff8 	.word	0xbffdfff8
 800287c:	cccccccd 	.word	0xcccccccd
 8002880:	40020000 	.word	0x40020000
 8002884:	bffdfbf8 	.word	0xbffdfbf8
 8002888:	40020400 	.word	0x40020400

0800288c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e04f      	b.n	800293e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d008      	beq.n	80028bc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2204      	movs	r2, #4
 80028ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e040      	b.n	800293e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 020e 	bic.w	r2, r2, #14
 80028ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	f003 021c 	and.w	r2, r3, #28
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002908:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00c      	beq.n	800292c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002920:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800292a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d005      	beq.n	800296c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2204      	movs	r2, #4
 8002964:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	e047      	b.n	80029fc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 020e 	bic.w	r2, r2, #14
 800297a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002996:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800299a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a0:	f003 021c 	and.w	r2, r3, #28
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00c      	beq.n	80029dc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
    }
  }
  return status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a24:	f003 031c 	and.w	r3, r3, #28
 8002a28:	2204      	movs	r2, #4
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d027      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x7c>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d022      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	f003 021c 	and.w	r2, r3, #28
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	2104      	movs	r1, #4
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8081 	beq.w	8002b7c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002a82:	e07b      	b.n	8002b7c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	f003 031c 	and.w	r3, r3, #28
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d03d      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x10c>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d038      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 020a 	bic.w	r2, r2, #10
 8002abe:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b2e      	ldr	r3, [pc, #184]	@ (8002b88 <HAL_DMA_IRQHandler+0x180>)
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d909      	bls.n	8002ae8 <HAL_DMA_IRQHandler+0xe0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad8:	f003 031c 	and.w	r3, r3, #28
 8002adc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b8c <HAL_DMA_IRQHandler+0x184>)
 8002ade:	2102      	movs	r1, #2
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	6053      	str	r3, [r2, #4]
 8002ae6:	e008      	b.n	8002afa <HAL_DMA_IRQHandler+0xf2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	f003 031c 	and.w	r3, r3, #28
 8002af0:	4a27      	ldr	r2, [pc, #156]	@ (8002b90 <HAL_DMA_IRQHandler+0x188>)
 8002af2:	2102      	movs	r1, #2
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d038      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002b12:	e033      	b.n	8002b7c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b18:	f003 031c 	and.w	r3, r3, #28
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d02a      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x176>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d025      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 020e 	bic.w	r2, r2, #14
 8002b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	f003 021c 	and.w	r2, r3, #28
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f202 	lsl.w	r2, r1, r2
 8002b54:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
}
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40020080 	.word	0x40020080
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020000 	.word	0x40020000

08002b94 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	72fb      	strb	r3, [r7, #11]
    return status;
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	e01b      	b.n	8002be8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e003      	b.n	8002bde <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	601a      	str	r2, [r3, #0]

  return status;
 8002be6:	7afb      	ldrb	r3, [r7, #11]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
	...

08002bf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d813      	bhi.n	8002c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c14:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	3b08      	subs	r3, #8
 8002c24:	4a14      	ldr	r2, [pc, #80]	@ (8002c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e011      	b.n	8002c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	009a      	lsls	r2, r3, #2
 8002c38:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	3b08      	subs	r3, #8
 8002c48:	4a0b      	ldr	r2, [pc, #44]	@ (8002c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	3307      	adds	r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002c58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2201      	movs	r2, #1
 8002c62:	409a      	lsls	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40020407 	.word	0x40020407
 8002c78:	cccccccd 	.word	0xcccccccd
 8002c7c:	4002081c 	.word	0x4002081c
 8002c80:	40020880 	.word	0x40020880

08002c84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c94:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a08      	ldr	r2, [pc, #32]	@ (8002cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ca8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	1000823f 	.word	0x1000823f
 8002cc8:	40020940 	.word	0x40020940

08002ccc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cda:	e140      	b.n	8002f5e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8132 	beq.w	8002f58 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d005      	beq.n	8002d0c <HAL_GPIO_Init+0x40>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d130      	bne.n	8002d6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d42:	2201      	movs	r2, #1
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f003 0201 	and.w	r2, r3, #1
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d017      	beq.n	8002daa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	2203      	movs	r2, #3
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d123      	bne.n	8002dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	08da      	lsrs	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3208      	adds	r2, #8
 8002dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	220f      	movs	r2, #15
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	08da      	lsrs	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3208      	adds	r2, #8
 8002df8:	6939      	ldr	r1, [r7, #16]
 8002dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0203 	and.w	r2, r3, #3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 808c 	beq.w	8002f58 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e40:	4a4e      	ldr	r2, [pc, #312]	@ (8002f7c <HAL_GPIO_Init+0x2b0>)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	2207      	movs	r2, #7
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e6a:	d00d      	beq.n	8002e88 <HAL_GPIO_Init+0x1bc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a44      	ldr	r2, [pc, #272]	@ (8002f80 <HAL_GPIO_Init+0x2b4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d007      	beq.n	8002e84 <HAL_GPIO_Init+0x1b8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a43      	ldr	r2, [pc, #268]	@ (8002f84 <HAL_GPIO_Init+0x2b8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <HAL_GPIO_Init+0x1b4>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e004      	b.n	8002e8a <HAL_GPIO_Init+0x1be>
 8002e80:	2307      	movs	r3, #7
 8002e82:	e002      	b.n	8002e8a <HAL_GPIO_Init+0x1be>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_GPIO_Init+0x1be>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	f002 0203 	and.w	r2, r2, #3
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	4093      	lsls	r3, r2
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9a:	4938      	ldr	r1, [pc, #224]	@ (8002f7c <HAL_GPIO_Init+0x2b0>)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ea8:	4b37      	ldr	r3, [pc, #220]	@ (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ef6:	4a24      	ldr	r2, [pc, #144]	@ (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002efc:	4b22      	ldr	r3, [pc, #136]	@ (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f02:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002f22:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002f2a:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f30:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f aeb7 	bne.w	8002cdc <HAL_GPIO_Init+0x10>
  }
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	48000400 	.word	0x48000400
 8002f84:	48000800 	.word	0x48000800
 8002f88:	58000800 	.word	0x58000800

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fcc:	887a      	ldrh	r2, [r7, #2]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	041a      	lsls	r2, r3, #16
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43d9      	mvns	r1, r3
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	400b      	ands	r3, r1
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	619a      	str	r2, [r3, #24]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff0:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a03      	ldr	r2, [pc, #12]	@ (8003004 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	58000400 	.word	0x58000400

08003008 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800301a:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_PWR_EnterSLEEPMode+0x60>)
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003026:	d10d      	bne.n	8003044 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003028:	f000 f83c 	bl	80030a4 <HAL_PWREx_DisableLowPowerRunMode>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8003032:	e015      	b.n	8003060 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003040:	f000 f822 	bl	8003088 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_PWR_EnterSLEEPMode+0x64>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4a08      	ldr	r2, [pc, #32]	@ (800306c <HAL_PWR_EnterSLEEPMode+0x64>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003056:	bf30      	wfi
 8003058:	e002      	b.n	8003060 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800305a:	bf40      	sev
    __WFE();
 800305c:	bf20      	wfe
    __WFE();
 800305e:	bf20      	wfe
  }
}
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	58000400 	.word	0x58000400
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003074:	4b03      	ldr	r3, [pc, #12]	@ (8003084 <HAL_PWREx_GetVoltageRange+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	58000400 	.word	0x58000400

08003088 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800308c:	4b04      	ldr	r3, [pc, #16]	@ (80030a0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a03      	ldr	r2, [pc, #12]	@ (80030a0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8003092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003096:	6013      	str	r3, [r2, #0]
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	58000400 	.word	0x58000400

080030a4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80030aa:	4b16      	ldr	r3, [pc, #88]	@ (8003104 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a15      	ldr	r2, [pc, #84]	@ (8003104 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80030b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030b4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80030b6:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2232      	movs	r2, #50	@ 0x32
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	4a12      	ldr	r2, [pc, #72]	@ (800310c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0c9b      	lsrs	r3, r3, #18
 80030c8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80030ca:	e002      	b.n	80030d2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80030d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030de:	d102      	bne.n	80030e6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f2      	bne.n	80030cc <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80030e6:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f2:	d101      	bne.n	80030f8 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e000      	b.n	80030fa <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	58000400 	.word	0x58000400
 8003108:	20000004 	.word	0x20000004
 800310c:	431bde83 	.word	0x431bde83

08003110 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003114:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003120:	d101      	bne.n	8003126 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	58000400 	.word	0x58000400

08003134 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003142:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800315e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003162:	6013      	str	r3, [r2, #0]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800317a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800317e:	d101      	bne.n	8003184 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800319c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031d8:	d101      	bne.n	80031de <LL_RCC_HSE_IsReady+0x18>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <LL_RCC_HSE_IsReady+0x1a>
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fa:	6013      	str	r3, [r2, #0]
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003212:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003232:	d101      	bne.n	8003238 <LL_RCC_HSI_IsReady+0x18>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <LL_RCC_HSI_IsReady+0x1a>
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800324a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	d101      	bne.n	8003282 <LL_RCC_LSE_IsReady+0x18>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <LL_RCC_LSE_IsReady+0x1a>
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003298:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80032d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d101      	bne.n	80032e4 <LL_RCC_LSI_IsReady+0x18>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <LL_RCC_LSI_IsReady+0x1a>
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6013      	str	r3, [r2, #0]
}
 8003302:	bf00      	nop
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6013      	str	r3, [r2, #0]
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d101      	bne.n	800333c <LL_RCC_MSI_IsReady+0x16>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <LL_RCC_MSI_IsReady+0x18>
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b08      	cmp	r3, #8
 8003356:	d101      	bne.n	800335c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003388:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 030c 	and.w	r3, r3, #12
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800340a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800342e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003454:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003458:	f023 020f 	bic.w	r2, r3, #15
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4313      	orrs	r3, r2
 800348e:	608b      	str	r3, [r1, #8]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80034a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80034da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80034f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800350a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800352a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800353c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800354a:	6013      	str	r3, [r2, #0]
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003566:	d101      	bne.n	800356c <LL_RCC_PLL_IsReady+0x18>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <LL_RCC_PLL_IsReady+0x1a>
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003586:	4618      	mov	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0303 	and.w	r3, r3, #3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e2:	d101      	bne.n	80035e8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80035fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003606:	d101      	bne.n	800360c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800361a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800361e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003622:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362a:	d101      	bne.n	8003630 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800364c:	d101      	bne.n	8003652 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800366a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800366e:	d101      	bne.n	8003674 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
	...

08003680 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e36f      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003692:	f7ff fea6 	bl	80033e2 <LL_RCC_GetSysClkSource>
 8003696:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003698:	f7ff ff8f 	bl	80035ba <LL_RCC_PLL_GetMainSource>
 800369c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80c4 	beq.w	8003834 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_RCC_OscConfig+0x3e>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d176      	bne.n	80037a6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d173      	bne.n	80037a6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e353      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_OscConfig+0x68>
 80036dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036e6:	e006      	b.n	80036f6 <HAL_RCC_OscConfig+0x76>
 80036e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d222      	bcs.n	8003740 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fd5a 	bl	80041b8 <RCC_SetFlashLatencyFromMSIRange>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e331      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800370e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fe2b 	bl	8003394 <LL_RCC_MSI_SetCalibTrimming>
 800373e:	e021      	b.n	8003784 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800374a:	f043 0308 	orr.w	r3, r3, #8
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fe12 	bl	8003394 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fd1f 	bl	80041b8 <RCC_SetFlashLatencyFromMSIRange>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e2f6      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003784:	f000 fce0 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8003788:	4603      	mov	r3, r0
 800378a:	4aa7      	ldr	r2, [pc, #668]	@ (8003a28 <HAL_RCC_OscConfig+0x3a8>)
 800378c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800378e:	4ba7      	ldr	r3, [pc, #668]	@ (8003a2c <HAL_RCC_OscConfig+0x3ac>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fe70 	bl	8002478 <HAL_InitTick>
 8003798:	4603      	mov	r3, r0
 800379a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d047      	beq.n	8003832 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	e2e5      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d02c      	beq.n	8003808 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037ae:	f7ff fd9e 	bl	80032ee <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037b2:	f7fe fead 	bl	8002510 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037ba:	f7fe fea9 	bl	8002510 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e2d2      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80037cc:	f7ff fdab 	bl	8003326 <LL_RCC_MSI_IsReady>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f1      	beq.n	80037ba <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fdc7 	bl	8003394 <LL_RCC_MSI_SetCalibTrimming>
 8003806:	e015      	b.n	8003834 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003808:	f7ff fd7f 	bl	800330a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800380c:	f7fe fe80 	bl	8002510 <HAL_GetTick>
 8003810:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003814:	f7fe fe7c 	bl	8002510 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e2a5      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003826:	f7ff fd7e 	bl	8003326 <LL_RCC_MSI_IsReady>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f1      	bne.n	8003814 <HAL_RCC_OscConfig+0x194>
 8003830:	e000      	b.n	8003834 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003832:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d058      	beq.n	80038f2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b08      	cmp	r3, #8
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x1d2>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d108      	bne.n	800385e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d105      	bne.n	800385e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d14b      	bne.n	80038f2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e289      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387c:	d102      	bne.n	8003884 <HAL_RCC_OscConfig+0x204>
 800387e:	f7ff fc86 	bl	800318e <LL_RCC_HSE_Enable>
 8003882:	e00d      	b.n	80038a0 <HAL_RCC_OscConfig+0x220>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800388c:	d104      	bne.n	8003898 <HAL_RCC_OscConfig+0x218>
 800388e:	f7ff fc51 	bl	8003134 <LL_RCC_HSE_EnableTcxo>
 8003892:	f7ff fc7c 	bl	800318e <LL_RCC_HSE_Enable>
 8003896:	e003      	b.n	80038a0 <HAL_RCC_OscConfig+0x220>
 8003898:	f7ff fc87 	bl	80031aa <LL_RCC_HSE_Disable>
 800389c:	f7ff fc58 	bl	8003150 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d012      	beq.n	80038ce <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fe32 	bl	8002510 <HAL_GetTick>
 80038ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe fe2e 	bl	8002510 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e257      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80038c2:	f7ff fc80 	bl	80031c6 <LL_RCC_HSE_IsReady>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f1      	beq.n	80038b0 <HAL_RCC_OscConfig+0x230>
 80038cc:	e011      	b.n	80038f2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fe fe1f 	bl	8002510 <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d6:	f7fe fe1b 	bl	8002510 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b64      	cmp	r3, #100	@ 0x64
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e244      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80038e8:	f7ff fc6d 	bl	80031c6 <LL_RCC_HSE_IsReady>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f1      	bne.n	80038d6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d046      	beq.n	800398c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d005      	beq.n	8003910 <HAL_RCC_OscConfig+0x290>
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d10e      	bne.n	8003928 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d10b      	bne.n	8003928 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e22a      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fc8e 	bl	8003242 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003926:	e031      	b.n	800398c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d019      	beq.n	8003964 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003930:	f7ff fc5a 	bl	80031e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe fdec 	bl	8002510 <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393c:	f7fe fde8 	bl	8002510 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e211      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800394e:	f7ff fc67 	bl	8003220 <LL_RCC_HSI_IsReady>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f1      	beq.n	800393c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fc70 	bl	8003242 <LL_RCC_HSI_SetCalibTrimming>
 8003962:	e013      	b.n	800398c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003964:	f7ff fc4e 	bl	8003204 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe fdd2 	bl	8002510 <HAL_GetTick>
 800396c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7fe fdce 	bl	8002510 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1f7      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003982:	f7ff fc4d 	bl	8003220 <LL_RCC_HSI_IsReady>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f1      	bne.n	8003970 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d06e      	beq.n	8003a76 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d056      	beq.n	8003a4e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80039a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d031      	beq.n	8003a1c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e1d0      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d013      	beq.n	8003a02 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80039da:	f7ff fc67 	bl	80032ac <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039de:	f7fe fd97 	bl	8002510 <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e6:	f7fe fd93 	bl	8002510 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b11      	cmp	r3, #17
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1bc      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80039f8:	f7ff fc68 	bl	80032cc <LL_RCC_LSI_IsReady>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f1      	bne.n	80039e6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a0a:	f023 0210 	bic.w	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1c:	f7ff fc36 	bl	800328c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a20:	f7fe fd76 	bl	8002510 <HAL_GetTick>
 8003a24:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003a26:	e00c      	b.n	8003a42 <HAL_RCC_OscConfig+0x3c2>
 8003a28:	20000004 	.word	0x20000004
 8003a2c:	20000014 	.word	0x20000014
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a30:	f7fe fd6e 	bl	8002510 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b11      	cmp	r3, #17
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e197      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003a42:	f7ff fc43 	bl	80032cc <LL_RCC_LSI_IsReady>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f1      	beq.n	8003a30 <HAL_RCC_OscConfig+0x3b0>
 8003a4c:	e013      	b.n	8003a76 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a4e:	f7ff fc2d 	bl	80032ac <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a52:	f7fe fd5d 	bl	8002510 <HAL_GetTick>
 8003a56:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5a:	f7fe fd59 	bl	8002510 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b11      	cmp	r3, #17
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e182      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003a6c:	f7ff fc2e 	bl	80032cc <LL_RCC_LSI_IsReady>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f1      	bne.n	8003a5a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80d8 	beq.w	8003c34 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003a84:	f7ff fb44 	bl	8003110 <LL_PWR_IsEnabledBkUpAccess>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d113      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003a8e:	f7ff faad 	bl	8002fec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a92:	f7fe fd3d 	bl	8002510 <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9a:	f7fe fd39 	bl	8002510 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e162      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003aac:	f7ff fb30 	bl	8003110 <LL_PWR_IsEnabledBkUpAccess>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f1      	beq.n	8003a9a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d07b      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b85      	cmp	r3, #133	@ 0x85
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ada:	f043 0304 	orr.w	r3, r3, #4
 8003ade:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fd15 	bl	8002510 <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe fd07 	bl	8002510 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e12e      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003b14:	f7ff fba9 	bl	800326a <LL_RCC_LSE_IsReady>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ef      	beq.n	8003afe <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b81      	cmp	r3, #129	@ 0x81
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b85      	cmp	r3, #133	@ 0x85
 8003b2c:	d121      	bne.n	8003b72 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fcef 	bl	8002510 <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe fce1 	bl	8002510 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e108      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ec      	beq.n	8003b4a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003b70:	e060      	b.n	8003c34 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fccd 	bl	8002510 <HAL_GetTick>
 8003b76:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fe fcbf 	bl	8002510 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0e6      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ec      	bne.n	8003b8e <HAL_RCC_OscConfig+0x50e>
 8003bb4:	e03e      	b.n	8003c34 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe fcab 	bl	8002510 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fc9d 	bl	8002510 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e0c4      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ec      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf8:	f7fe fc8a 	bl	8002510 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fe fc7c 	bl	8002510 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0a3      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003c2a:	f7ff fb1e 	bl	800326a <LL_RCC_LSE_IsReady>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ef      	bne.n	8003c14 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8099 	beq.w	8003d70 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	d06c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d14b      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	f7ff fc74 	bl	8003538 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fc5e 	bl	8002510 <HAL_GetTick>
 8003c54:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fe fc5a 	bl	8002510 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b0a      	cmp	r3, #10
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e083      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003c6a:	f7ff fc73 	bl	8003554 <LL_RCC_PLL_IsReady>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f1      	bne.n	8003c58 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	4b40      	ldr	r3, [pc, #256]	@ (8003d7c <HAL_RCC_OscConfig+0x6fc>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c86:	4311      	orrs	r1, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c8c:	0212      	lsls	r2, r2, #8
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c9a:	4311      	orrs	r1, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003caa:	f7ff fc37 	bl	800351c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fc27 	bl	8002510 <HAL_GetTick>
 8003cc2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fe fc23 	bl	8002510 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b0a      	cmp	r3, #10
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e04c      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003cd8:	f7ff fc3c 	bl	8003554 <LL_RCC_PLL_IsReady>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f1      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x646>
 8003ce2:	e045      	b.n	8003d70 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce4:	f7ff fc28 	bl	8003538 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fc12 	bl	8002510 <HAL_GetTick>
 8003cec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fe fc0e 	bl	8002510 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b0a      	cmp	r3, #10
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e037      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003d02:	f7ff fc27 	bl	8003554 <LL_RCC_PLL_IsReady>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f1      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d16:	4b1a      	ldr	r3, [pc, #104]	@ (8003d80 <HAL_RCC_OscConfig+0x700>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60cb      	str	r3, [r1, #12]
 8003d1c:	e028      	b.n	8003d70 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e023      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f003 0203 	and.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d115      	bne.n	8003d6c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d10e      	bne.n	8003d6c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	11c1808c 	.word	0x11c1808c
 8003d80:	eefefffc 	.word	0xeefefffc

08003d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e12c      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b98      	ldr	r3, [pc, #608]	@ (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d91b      	bls.n	8003dde <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b95      	ldr	r3, [pc, #596]	@ (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 0207 	bic.w	r2, r3, #7
 8003dae:	4993      	ldr	r1, [pc, #588]	@ (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db6:	f7fe fbab 	bl	8002510 <HAL_GetTick>
 8003dba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003dbe:	f7fe fba7 	bl	8002510 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e110      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd0:	4b8a      	ldr	r3, [pc, #552]	@ (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d1ef      	bne.n	8003dbe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fb02 	bl	80033f8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003df4:	f7fe fb8c 	bl	8002510 <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003dfc:	f7fe fb88 	bl	8002510 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0f1      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003e0e:	f7ff fbdf 	bl	80035d0 <LL_RCC_IsActiveFlag_HPRE>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f1      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d016      	beq.n	8003e52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff faf8 	bl	800341e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e2e:	f7fe fb6f 	bl	8002510 <HAL_GetTick>
 8003e32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e36:	f7fe fb6b 	bl	8002510 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0d4      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e48:	f7ff fbd3 	bl	80035f2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f1      	beq.n	8003e36 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff faf0 	bl	8003448 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e68:	f7fe fb52 	bl	8002510 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e70:	f7fe fb4e 	bl	8002510 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e0b7      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e82:	f7ff fbc8 	bl	8003616 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f1      	beq.n	8003e70 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d016      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fae9 	bl	8003474 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ea2:	f7fe fb35 	bl	8002510 <HAL_GetTick>
 8003ea6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003eaa:	f7fe fb31 	bl	8002510 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e09a      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003ebc:	f7ff fbbd 	bl	800363a <LL_RCC_IsActiveFlag_PPRE1>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f1      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fade 	bl	800349a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ede:	f7fe fb17 	bl	8002510 <HAL_GetTick>
 8003ee2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ee6:	f7fe fb13 	bl	8002510 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e07c      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ef8:	f7ff fbb0 	bl	800365c <LL_RCC_IsActiveFlag_PPRE2>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f1      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d043      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d106      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003f16:	f7ff f956 	bl	80031c6 <LL_RCC_HSE_IsReady>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d11e      	bne.n	8003f5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e066      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003f2c:	f7ff fb12 	bl	8003554 <LL_RCC_PLL_IsReady>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d113      	bne.n	8003f5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e05b      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003f42:	f7ff f9f0 	bl	8003326 <LL_RCC_MSI_IsReady>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e050      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003f50:	f7ff f966 	bl	8003220 <LL_RCC_HSI_IsReady>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e049      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fa2a 	bl	80033bc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f68:	f7fe fad2 	bl	8002510 <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f70:	f7fe face 	bl	8002510 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e035      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	f7ff fa2c 	bl	80033e2 <LL_RCC_GetSysClkSource>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d1ec      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f96:	4b19      	ldr	r3, [pc, #100]	@ (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d21b      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa4:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 0207 	bic.w	r2, r3, #7
 8003fac:	4913      	ldr	r1, [pc, #76]	@ (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fe faac 	bl	8002510 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fbc:	f7fe faa8 	bl	8002510 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e011      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1ef      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fdc:	f000 f8b4 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4a07      	ldr	r2, [pc, #28]	@ (8004000 <HAL_RCC_ClockConfig+0x27c>)
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003fe6:	4b07      	ldr	r3, [pc, #28]	@ (8004004 <HAL_RCC_ClockConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fa44 	bl	8002478 <HAL_InitTick>
 8003ff0:	4603      	mov	r3, r0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	58004000 	.word	0x58004000
 8004000:	20000004 	.word	0x20000004
 8004004:	20000014 	.word	0x20000014

08004008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004016:	f7ff f9e4 	bl	80033e2 <LL_RCC_GetSysClkSource>
 800401a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800401c:	f7ff facd 	bl	80035ba <LL_RCC_PLL_GetMainSource>
 8004020:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x2c>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d139      	bne.n	80040a2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d136      	bne.n	80040a2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004034:	f7ff f987 	bl	8003346 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d115      	bne.n	800406a <HAL_RCC_GetSysClockFreq+0x62>
 800403e:	f7ff f982 	bl	8003346 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004042:	4603      	mov	r3, r0
 8004044:	2b01      	cmp	r3, #1
 8004046:	d106      	bne.n	8004056 <HAL_RCC_GetSysClockFreq+0x4e>
 8004048:	f7ff f98d 	bl	8003366 <LL_RCC_MSI_GetRange>
 800404c:	4603      	mov	r3, r0
 800404e:	0a1b      	lsrs	r3, r3, #8
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	e005      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x5a>
 8004056:	f7ff f991 	bl	800337c <LL_RCC_MSI_GetRangeAfterStandby>
 800405a:	4603      	mov	r3, r0
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	4a36      	ldr	r2, [pc, #216]	@ (800413c <HAL_RCC_GetSysClockFreq+0x134>)
 8004064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004068:	e014      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x8c>
 800406a:	f7ff f96c 	bl	8003346 <LL_RCC_MSI_IsEnabledRangeSelect>
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <HAL_RCC_GetSysClockFreq+0x7a>
 8004074:	f7ff f977 	bl	8003366 <LL_RCC_MSI_GetRange>
 8004078:	4603      	mov	r3, r0
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	e005      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x86>
 8004082:	f7ff f97b 	bl	800337c <LL_RCC_MSI_GetRangeAfterStandby>
 8004086:	4603      	mov	r3, r0
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	4a2b      	ldr	r2, [pc, #172]	@ (800413c <HAL_RCC_GetSysClockFreq+0x134>)
 8004090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004094:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d115      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040a0:	e012      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d102      	bne.n	80040ae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040a8:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x138>)
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	e00c      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d109      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80040b4:	f7ff f85a 	bl	800316c <LL_RCC_HSE_IsEnabledDiv2>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d102      	bne.n	80040c4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80040be:	4b20      	ldr	r3, [pc, #128]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x138>)
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e001      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80040c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x13c>)
 80040c6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c8:	f7ff f98b 	bl	80033e2 <LL_RCC_GetSysClkSource>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	d12f      	bne.n	8004132 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80040d2:	f7ff fa72 	bl	80035ba <LL_RCC_PLL_GetMainSource>
 80040d6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0xde>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d003      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0xe4>
 80040e4:	e00d      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80040e6:	4b16      	ldr	r3, [pc, #88]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x138>)
 80040e8:	60fb      	str	r3, [r7, #12]
        break;
 80040ea:	e00d      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80040ec:	f7ff f83e 	bl	800316c <LL_RCC_HSE_IsEnabledDiv2>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d102      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80040f6:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x138>)
 80040f8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80040fa:	e005      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80040fc:	4b11      	ldr	r3, [pc, #68]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x13c>)
 80040fe:	60fb      	str	r3, [r7, #12]
        break;
 8004100:	e002      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	60fb      	str	r3, [r7, #12]
        break;
 8004106:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004108:	f7ff fa35 	bl	8003576 <LL_RCC_PLL_GetN>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	fb03 f402 	mul.w	r4, r3, r2
 8004114:	f7ff fa46 	bl	80035a4 <LL_RCC_PLL_GetDivider>
 8004118:	4603      	mov	r3, r0
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	3301      	adds	r3, #1
 800411e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004122:	f7ff fa34 	bl	800358e <LL_RCC_PLL_GetR>
 8004126:	4603      	mov	r3, r0
 8004128:	0f5b      	lsrs	r3, r3, #29
 800412a:	3301      	adds	r3, #1
 800412c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004130:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004132:	697b      	ldr	r3, [r7, #20]
}
 8004134:	4618      	mov	r0, r3
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}
 800413c:	0800cdc8 	.word	0x0800cdc8
 8004140:	00f42400 	.word	0x00f42400
 8004144:	01e84800 	.word	0x01e84800

08004148 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004148:	b598      	push	{r3, r4, r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800414c:	f7ff ff5c 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8004150:	4604      	mov	r4, r0
 8004152:	f7ff f9b5 	bl	80034c0 <LL_RCC_GetAHBPrescaler>
 8004156:	4603      	mov	r3, r0
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	4a03      	ldr	r2, [pc, #12]	@ (800416c <HAL_RCC_GetHCLKFreq+0x24>)
 8004160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004164:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd98      	pop	{r3, r4, r7, pc}
 800416c:	0800cd68 	.word	0x0800cd68

08004170 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004170:	b598      	push	{r3, r4, r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004174:	f7ff ffe8 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8004178:	4604      	mov	r4, r0
 800417a:	f7ff f9b9 	bl	80034f0 <LL_RCC_GetAPB1Prescaler>
 800417e:	4603      	mov	r3, r0
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	4a03      	ldr	r2, [pc, #12]	@ (8004190 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004188:	fa24 f303 	lsr.w	r3, r4, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd98      	pop	{r3, r4, r7, pc}
 8004190:	0800cda8 	.word	0x0800cda8

08004194 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004194:	b598      	push	{r3, r4, r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004198:	f7ff ffd6 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 800419c:	4604      	mov	r4, r0
 800419e:	f7ff f9b2 	bl	8003506 <LL_RCC_GetAPB2Prescaler>
 80041a2:	4603      	mov	r3, r0
 80041a4:	0adb      	lsrs	r3, r3, #11
 80041a6:	4a03      	ldr	r2, [pc, #12]	@ (80041b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	bd98      	pop	{r3, r4, r7, pc}
 80041b4:	0800cda8 	.word	0x0800cda8

080041b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	4a10      	ldr	r2, [pc, #64]	@ (800420c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80041ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ce:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80041d0:	f7ff f981 	bl	80034d6 <LL_RCC_GetAHB3Prescaler>
 80041d4:	4603      	mov	r3, r0
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004210 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80041de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4a09      	ldr	r2, [pc, #36]	@ (8004214 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	0c9c      	lsrs	r4, r3, #18
 80041f4:	f7fe ff3c 	bl	8003070 <HAL_PWREx_GetVoltageRange>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4619      	mov	r1, r3
 80041fc:	4620      	mov	r0, r4
 80041fe:	f000 f80b 	bl	8004218 <RCC_SetFlashLatency>
 8004202:	4603      	mov	r3, r0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}
 800420c:	0800cdc8 	.word	0x0800cdc8
 8004210:	0800cd68 	.word	0x0800cd68
 8004214:	431bde83 	.word	0x431bde83

08004218 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	@ 0x38
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004222:	4a3a      	ldr	r2, [pc, #232]	@ (800430c <RCC_SetFlashLatency+0xf4>)
 8004224:	f107 0320 	add.w	r3, r7, #32
 8004228:	e892 0003 	ldmia.w	r2, {r0, r1}
 800422c:	6018      	str	r0, [r3, #0]
 800422e:	3304      	adds	r3, #4
 8004230:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004232:	4a37      	ldr	r2, [pc, #220]	@ (8004310 <RCC_SetFlashLatency+0xf8>)
 8004234:	f107 0318 	add.w	r3, r7, #24
 8004238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800423c:	6018      	str	r0, [r3, #0]
 800423e:	3304      	adds	r3, #4
 8004240:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004242:	4a34      	ldr	r2, [pc, #208]	@ (8004314 <RCC_SetFlashLatency+0xfc>)
 8004244:	f107 030c 	add.w	r3, r7, #12
 8004248:	ca07      	ldmia	r2, {r0, r1, r2}
 800424a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800424e:	2300      	movs	r3, #0
 8004250:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004258:	d11b      	bne.n	8004292 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800425a:	2300      	movs	r3, #0
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
 800425e:	e014      	b.n	800428a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	3338      	adds	r3, #56	@ 0x38
 8004266:	443b      	add	r3, r7
 8004268:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4293      	cmp	r3, r2
 8004272:	d807      	bhi.n	8004284 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	3338      	adds	r3, #56	@ 0x38
 800427a:	443b      	add	r3, r7
 800427c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004280:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004282:	e021      	b.n	80042c8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	3301      	adds	r3, #1
 8004288:	633b      	str	r3, [r7, #48]	@ 0x30
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	2b02      	cmp	r3, #2
 800428e:	d9e7      	bls.n	8004260 <RCC_SetFlashLatency+0x48>
 8004290:	e01a      	b.n	80042c8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004292:	2300      	movs	r3, #0
 8004294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004296:	e014      	b.n	80042c2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	3338      	adds	r3, #56	@ 0x38
 800429e:	443b      	add	r3, r7
 80042a0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80042a4:	461a      	mov	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d807      	bhi.n	80042bc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3338      	adds	r3, #56	@ 0x38
 80042b2:	443b      	add	r3, r7
 80042b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80042b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042ba:	e005      	b.n	80042c8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80042bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042be:	3301      	adds	r3, #1
 80042c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d9e7      	bls.n	8004298 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042c8:	4b13      	ldr	r3, [pc, #76]	@ (8004318 <RCC_SetFlashLatency+0x100>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 0207 	bic.w	r2, r3, #7
 80042d0:	4911      	ldr	r1, [pc, #68]	@ (8004318 <RCC_SetFlashLatency+0x100>)
 80042d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d4:	4313      	orrs	r3, r2
 80042d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042d8:	f7fe f91a 	bl	8002510 <HAL_GetTick>
 80042dc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80042de:	e008      	b.n	80042f2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80042e0:	f7fe f916 	bl	8002510 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e007      	b.n	8004302 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80042f2:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <RCC_SetFlashLatency+0x100>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d1ef      	bne.n	80042e0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3738      	adds	r7, #56	@ 0x38
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	0800cd4c 	.word	0x0800cd4c
 8004310:	0800cd54 	.word	0x0800cd54
 8004314:	0800cd5c 	.word	0x0800cd5c
 8004318:	58004000 	.word	0x58004000

0800431c <LL_RCC_LSE_IsReady>:
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b02      	cmp	r3, #2
 800432e:	d101      	bne.n	8004334 <LL_RCC_LSE_IsReady+0x18>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <LL_RCC_LSE_IsReady+0x1a>
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <LL_RCC_SetUSARTClockSource>:
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800434a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	43db      	mvns	r3, r3
 8004354:	401a      	ands	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <LL_RCC_SetI2SClockSource>:
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004382:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <LL_RCC_SetLPUARTClockSource>:
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	4770      	bx	lr

080043c2 <LL_RCC_SetI2CClockSource>:
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80043ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80043da:	43db      	mvns	r3, r3
 80043dc:	401a      	ands	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80043e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <LL_RCC_SetLPTIMClockSource>:
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004406:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <LL_RCC_SetRNGClockSource>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004440:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <LL_RCC_SetADCClockSource>:
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800445e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004466:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800446a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <LL_RCC_SetRTCClockSource>:
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004494:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_GetRTCClockSource>:
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <LL_RCC_ForceBackupDomainReset>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80044da:	bf00      	nop
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80044e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80044fa:	bf00      	nop
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
	...

08004504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004510:	2300      	movs	r3, #0
 8004512:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004514:	2300      	movs	r3, #0
 8004516:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d058      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004524:	f7fe fd62 	bl	8002fec <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004528:	f7fd fff2 	bl	8002510 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800452e:	e009      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004530:	f7fd ffee 	bl	8002510 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d902      	bls.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	74fb      	strb	r3, [r7, #19]
        break;
 8004542:	e006      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004544:	4b7b      	ldr	r3, [pc, #492]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004550:	d1ee      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004552:	7cfb      	ldrb	r3, [r7, #19]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d13c      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004558:	f7ff ffa7 	bl	80044aa <LL_RCC_GetRTCClockSource>
 800455c:	4602      	mov	r2, r0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004562:	429a      	cmp	r2, r3
 8004564:	d00f      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004572:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004574:	f7ff ffa5 	bl	80044c2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004578:	f7ff ffb3 	bl	80044e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800457c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d014      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fd ffbe 	bl	8002510 <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004596:	e00b      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fd ffba 	bl	8002510 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d902      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	74fb      	strb	r3, [r7, #19]
            break;
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80045b0:	f7ff feb4 	bl	800431c <LL_RCC_LSE_IsReady>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d1ee      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff5b 	bl	8004480 <LL_RCC_SetRTCClockSource>
 80045ca:	e004      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	74bb      	strb	r3, [r7, #18]
 80045d0:	e001      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d2:	7cfb      	ldrb	r3, [r7, #19]
 80045d4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fea9 	bl	800433e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fe9e 	bl	800433e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d004      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fec0 	bl	8004398 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fee6 	bl	80043fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004636:	2b00      	cmp	r3, #0
 8004638:	d004      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fedb 	bl	80043fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fed0 	bl	80043fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d004      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fea9 	bl	80043c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d004      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fe9e 	bl	80043c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fe93 	bl	80043c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d011      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fe5e 	bl	800436e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ba:	d107      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d010      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fea5 	bl	800442c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d011      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fea3 	bl	8004456 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004718:	d107      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004728:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800472a:	7cbb      	ldrb	r3, [r7, #18]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	58000400 	.word	0x58000400

08004738 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004748:	4904      	ldr	r1, [pc, #16]	@ (800475c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	58000400 	.word	0x58000400

08004760 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476a:	4a04      	ldr	r2, [pc, #16]	@ (800477c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800476c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	58000400 	.word	0x58000400

08004780 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004784:	4b05      	ldr	r3, [pc, #20]	@ (800479c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478a:	4a04      	ldr	r2, [pc, #16]	@ (800479c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800478c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	58000400 	.word	0x58000400

080047a0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80047a4:	4b03      	ldr	r3, [pc, #12]	@ (80047b4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80047a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047aa:	619a      	str	r2, [r3, #24]
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	58000400 	.word	0x58000400

080047b8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80047bc:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d101      	bne.n	80047cc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	58000400 	.word	0x58000400

080047dc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80047e0:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d101      	bne.n	80047f0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	58000400 	.word	0x58000400

08004800 <LL_RCC_RF_DisableReset>:
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800480c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004810:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004814:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <LL_RCC_IsRFUnderReset>:
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800482c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004834:	d101      	bne.n	800483a <LL_RCC_IsRFUnderReset+0x1a>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <LL_RCC_IsRFUnderReset+0x1c>
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <LL_EXTI_EnableIT_32_63+0x24>)
 800484e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004852:	4905      	ldr	r1, [pc, #20]	@ (8004868 <LL_EXTI_EnableIT_32_63+0x24>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	58000800 	.word	0x58000800

0800486c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d103      	bne.n	8004882 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
    return status;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	e052      	b.n	8004928 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	799b      	ldrb	r3, [r3, #6]
 800488a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800488c:	7bbb      	ldrb	r3, [r7, #14]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_SUBGHZ_Init+0x2c>
 8004892:	7bbb      	ldrb	r3, [r7, #14]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d109      	bne.n	80048ac <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd fac0 	bl	8001e24 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80048a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80048a8:	f7ff ffcc 	bl	8004844 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d126      	bne.n	8004900 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80048b8:	f7ff ffa2 	bl	8004800 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004930 <HAL_SUBGHZ_Init+0xc4>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	0cdb      	lsrs	r3, r3, #19
 80048ca:	2264      	movs	r2, #100	@ 0x64
 80048cc:	fb02 f303 	mul.w	r3, r2, r3
 80048d0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	609a      	str	r2, [r3, #8]
        break;
 80048e2:	e007      	b.n	80048f4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80048ea:	f7ff ff99 	bl	8004820 <LL_RCC_IsRFUnderReset>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ee      	bne.n	80048d2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80048f4:	f7ff ff34 	bl	8004760 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80048f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80048fc:	f7ff ff1c 	bl	8004738 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004900:	f7ff ff4e 	bl	80047a0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fabc 	bl	8004e8c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	719a      	strb	r2, [r3, #6]

  return status;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000004 	.word	0x20000004

08004934 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	461a      	mov	r2, r3
 8004940:	460b      	mov	r3, r1
 8004942:	817b      	strh	r3, [r7, #10]
 8004944:	4613      	mov	r3, r2
 8004946:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	799b      	ldrb	r3, [r3, #6]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b01      	cmp	r3, #1
 8004950:	d14a      	bne.n	80049e8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	795b      	ldrb	r3, [r3, #5]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800495a:	2302      	movs	r3, #2
 800495c:	e045      	b.n	80049ea <HAL_SUBGHZ_WriteRegisters+0xb6>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2202      	movs	r2, #2
 8004968:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fb5c 	bl	8005028 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004970:	f7ff ff06 	bl	8004780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004974:	210d      	movs	r1, #13
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 faa8 	bl	8004ecc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800497c:	897b      	ldrh	r3, [r7, #10]
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	b29b      	uxth	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	4619      	mov	r1, r3
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 faa0 	bl	8004ecc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800498c:	897b      	ldrh	r3, [r7, #10]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fa9a 	bl	8004ecc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004998:	2300      	movs	r3, #0
 800499a:	82bb      	strh	r3, [r7, #20]
 800499c:	e00a      	b.n	80049b4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800499e:	8abb      	ldrh	r3, [r7, #20]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4413      	add	r3, r2
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fa8f 	bl	8004ecc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80049ae:	8abb      	ldrh	r3, [r7, #20]
 80049b0:	3301      	adds	r3, #1
 80049b2:	82bb      	strh	r3, [r7, #20]
 80049b4:	8aba      	ldrh	r2, [r7, #20]
 80049b6:	893b      	ldrh	r3, [r7, #8]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3f0      	bcc.n	800499e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049bc:	f7ff fed0 	bl	8004760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fb55 	bl	8005070 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	75fb      	strb	r3, [r7, #23]
 80049d2:	e001      	b.n	80049d8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	715a      	strb	r2, [r3, #5]

    return status;
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	e000      	b.n	80049ea <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
  }
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b088      	sub	sp, #32
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	461a      	mov	r2, r3
 80049fe:	460b      	mov	r3, r1
 8004a00:	817b      	strh	r3, [r7, #10]
 8004a02:	4613      	mov	r3, r2
 8004a04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	799b      	ldrb	r3, [r3, #6]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d14a      	bne.n	8004aaa <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	795b      	ldrb	r3, [r3, #5]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e045      	b.n	8004aac <HAL_SUBGHZ_ReadRegisters+0xba>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fafe 	bl	8005028 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a2c:	f7ff fea8 	bl	8004780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004a30:	211d      	movs	r1, #29
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fa4a 	bl	8004ecc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004a38:	897b      	ldrh	r3, [r7, #10]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	4619      	mov	r1, r3
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fa42 	bl	8004ecc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004a48:	897b      	ldrh	r3, [r7, #10]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fa3c 	bl	8004ecc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004a54:	2100      	movs	r1, #0
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fa38 	bl	8004ecc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	82fb      	strh	r3, [r7, #22]
 8004a60:	e009      	b.n	8004a76 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a62:	69b9      	ldr	r1, [r7, #24]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fa87 	bl	8004f78 <SUBGHZSPI_Receive>
      pData++;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004a70:	8afb      	ldrh	r3, [r7, #22]
 8004a72:	3301      	adds	r3, #1
 8004a74:	82fb      	strh	r3, [r7, #22]
 8004a76:	8afa      	ldrh	r2, [r7, #22]
 8004a78:	893b      	ldrh	r3, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d3f1      	bcc.n	8004a62 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a7e:	f7ff fe6f 	bl	8004760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 faf4 	bl	8005070 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e001      	b.n	8004a9a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	715a      	strb	r2, [r3, #5]

    return status;
 8004aa6:	7ffb      	ldrb	r3, [r7, #31]
 8004aa8:	e000      	b.n	8004aac <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	72fb      	strb	r3, [r7, #11]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	799b      	ldrb	r3, [r3, #6]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d14a      	bne.n	8004b68 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	795b      	ldrb	r3, [r3, #5]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e045      	b.n	8004b6a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fa9f 	bl	8005028 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	2b84      	cmp	r3, #132	@ 0x84
 8004aee:	d002      	beq.n	8004af6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004af0:	7afb      	ldrb	r3, [r7, #11]
 8004af2:	2b94      	cmp	r3, #148	@ 0x94
 8004af4:	d103      	bne.n	8004afe <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	711a      	strb	r2, [r3, #4]
 8004afc:	e002      	b.n	8004b04 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b04:	f7ff fe3c 	bl	8004780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004b08:	7afb      	ldrb	r3, [r7, #11]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f9dd 	bl	8004ecc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	82bb      	strh	r3, [r7, #20]
 8004b16:	e00a      	b.n	8004b2e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004b18:	8abb      	ldrh	r3, [r7, #20]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	4619      	mov	r1, r3
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f9d2 	bl	8004ecc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b28:	8abb      	ldrh	r3, [r7, #20]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	82bb      	strh	r3, [r7, #20]
 8004b2e:	8aba      	ldrh	r2, [r7, #20]
 8004b30:	893b      	ldrh	r3, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d3f0      	bcc.n	8004b18 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b36:	f7ff fe13 	bl	8004760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004b3a:	7afb      	ldrb	r3, [r7, #11]
 8004b3c:	2b84      	cmp	r3, #132	@ 0x84
 8004b3e:	d002      	beq.n	8004b46 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fa95 	bl	8005070 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
 8004b52:	e001      	b.n	8004b58 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	715a      	strb	r2, [r3, #5]

    return status;
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
 8004b66:	e000      	b.n	8004b6a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
  }
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b088      	sub	sp, #32
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	460b      	mov	r3, r1
 8004b80:	72fb      	strb	r3, [r7, #11]
 8004b82:	4613      	mov	r3, r2
 8004b84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	799b      	ldrb	r3, [r3, #6]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d13d      	bne.n	8004c10 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	795b      	ldrb	r3, [r3, #5]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e038      	b.n	8004c12 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fa3e 	bl	8005028 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004bac:	f7ff fde8 	bl	8004780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004bb0:	7afb      	ldrb	r3, [r7, #11]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f989 	bl	8004ecc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004bba:	2100      	movs	r1, #0
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f985 	bl	8004ecc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	82fb      	strh	r3, [r7, #22]
 8004bc6:	e009      	b.n	8004bdc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004bc8:	69b9      	ldr	r1, [r7, #24]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f9d4 	bl	8004f78 <SUBGHZSPI_Receive>
      pData++;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004bd6:	8afb      	ldrh	r3, [r7, #22]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	82fb      	strh	r3, [r7, #22]
 8004bdc:	8afa      	ldrh	r2, [r7, #22]
 8004bde:	893b      	ldrh	r3, [r7, #8]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3f1      	bcc.n	8004bc8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004be4:	f7ff fdbc 	bl	8004760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fa41 	bl	8005070 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e001      	b.n	8004c00 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	715a      	strb	r2, [r3, #5]

    return status;
 8004c0c:	7ffb      	ldrb	r3, [r7, #31]
 8004c0e:	e000      	b.n	8004c12 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	461a      	mov	r2, r3
 8004c26:	460b      	mov	r3, r1
 8004c28:	72fb      	strb	r3, [r7, #11]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	799b      	ldrb	r3, [r3, #6]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d13e      	bne.n	8004cb6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	795b      	ldrb	r3, [r3, #5]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e039      	b.n	8004cb8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f9ec 	bl	8005028 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004c50:	f7ff fd96 	bl	8004780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004c54:	210e      	movs	r1, #14
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f938 	bl	8004ecc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004c5c:	7afb      	ldrb	r3, [r7, #11]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f933 	bl	8004ecc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004c66:	2300      	movs	r3, #0
 8004c68:	82bb      	strh	r3, [r7, #20]
 8004c6a:	e00a      	b.n	8004c82 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004c6c:	8abb      	ldrh	r3, [r7, #20]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	4413      	add	r3, r2
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	4619      	mov	r1, r3
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f928 	bl	8004ecc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004c7c:	8abb      	ldrh	r3, [r7, #20]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	82bb      	strh	r3, [r7, #20]
 8004c82:	8aba      	ldrh	r2, [r7, #20]
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d3f0      	bcc.n	8004c6c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004c8a:	f7ff fd69 	bl	8004760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f9ee 	bl	8005070 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
 8004ca0:	e001      	b.n	8004ca6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	715a      	strb	r2, [r3, #5]

    return status;
 8004cb2:	7dfb      	ldrb	r3, [r7, #23]
 8004cb4:	e000      	b.n	8004cb8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
  }
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	460b      	mov	r3, r1
 8004cce:	72fb      	strb	r3, [r7, #11]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	799b      	ldrb	r3, [r3, #6]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d141      	bne.n	8004d66 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	795b      	ldrb	r3, [r3, #5]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e03c      	b.n	8004d68 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f997 	bl	8005028 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004cfa:	f7ff fd41 	bl	8004780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004cfe:	211e      	movs	r1, #30
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f8e3 	bl	8004ecc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f8de 	bl	8004ecc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004d10:	2100      	movs	r1, #0
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f8da 	bl	8004ecc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	82fb      	strh	r3, [r7, #22]
 8004d1c:	e009      	b.n	8004d32 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004d1e:	69b9      	ldr	r1, [r7, #24]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f929 	bl	8004f78 <SUBGHZSPI_Receive>
      pData++;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004d2c:	8afb      	ldrh	r3, [r7, #22]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	82fb      	strh	r3, [r7, #22]
 8004d32:	8afa      	ldrh	r2, [r7, #22]
 8004d34:	893b      	ldrh	r3, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d3f1      	bcc.n	8004d1e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004d3a:	f7ff fd11 	bl	8004760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f996 	bl	8005070 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e001      	b.n	8004d56 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	715a      	strb	r2, [r3, #5]

    return status;
 8004d62:	7ffb      	ldrb	r3, [r7, #31]
 8004d64:	e000      	b.n	8004d68 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
  }
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004d78:	2300      	movs	r3, #0
 8004d7a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004d7c:	f107 020c 	add.w	r2, r7, #12
 8004d80:	2302      	movs	r3, #2
 8004d82:	2112      	movs	r1, #18
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fef4 	bl	8004b72 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004d8a:	7b3b      	ldrb	r3, [r7, #12]
 8004d8c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	b21a      	sxth	r2, r3
 8004d96:	7b7b      	ldrb	r3, [r7, #13]
 8004d98:	b21b      	sxth	r3, r3
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	b21b      	sxth	r3, r3
 8004d9e:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004da0:	f107 020c 	add.w	r2, r7, #12
 8004da4:	2302      	movs	r3, #2
 8004da6:	2102      	movs	r1, #2
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff fe83 	bl	8004ab4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004dae:	89fb      	ldrh	r3, [r7, #14]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f003 f8cd 	bl	8007f58 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004dbe:	89fb      	ldrh	r3, [r7, #14]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004dca:	89fb      	ldrh	r3, [r7, #14]
 8004dcc:	099b      	lsrs	r3, r3, #6
 8004dce:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f003 f8cc 	bl	8007f74 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004ddc:	89fb      	ldrh	r3, [r7, #14]
 8004dde:	089b      	lsrs	r3, r3, #2
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f003 f91b 	bl	8008024 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004dee:	89fb      	ldrh	r3, [r7, #14]
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f003 f920 	bl	8008040 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004e00:	89fb      	ldrh	r3, [r7, #14]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f003 f925 	bl	800805c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004e12:	89fb      	ldrh	r3, [r7, #14]
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f003 f8f2 	bl	8008008 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004e24:	89fb      	ldrh	r3, [r7, #14]
 8004e26:	099b      	lsrs	r3, r3, #6
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f003 f8ad 	bl	8007f90 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004e36:	89fb      	ldrh	r3, [r7, #14]
 8004e38:	09db      	lsrs	r3, r3, #7
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00e      	beq.n	8004e60 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004e42:	89fb      	ldrh	r3, [r7, #14]
 8004e44:	0a1b      	lsrs	r3, r3, #8
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d004      	beq.n	8004e58 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004e4e:	2101      	movs	r1, #1
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f003 f8ab 	bl	8007fac <HAL_SUBGHZ_CADStatusCallback>
 8004e56:	e003      	b.n	8004e60 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004e58:	2100      	movs	r1, #0
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f003 f8a6 	bl	8007fac <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004e60:	89fb      	ldrh	r3, [r7, #14]
 8004e62:	0a5b      	lsrs	r3, r3, #9
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f003 f8bb 	bl	8007fe8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004e72:	89fb      	ldrh	r3, [r7, #14]
 8004e74:	0b9b      	lsrs	r3, r3, #14
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f003 f8fa 	bl	8008078 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <SUBGHZSPI_Init+0x3c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0b      	ldr	r2, [pc, #44]	@ (8004ec8 <SUBGHZSPI_Init+0x3c>)
 8004e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e9e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004ea0:	4a09      	ldr	r2, [pc, #36]	@ (8004ec8 <SUBGHZSPI_Init+0x3c>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004ea8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004eaa:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <SUBGHZSPI_Init+0x3c>)
 8004eac:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004eb2:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <SUBGHZSPI_Init+0x3c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a04      	ldr	r2, [pc, #16]	@ (8004ec8 <SUBGHZSPI_Init+0x3c>)
 8004eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ebc:	6013      	str	r3, [r2, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	58010000 	.word	0x58010000

08004ecc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004edc:	4b23      	ldr	r3, [pc, #140]	@ (8004f6c <SUBGHZSPI_Transmit+0xa0>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	0cdb      	lsrs	r3, r3, #19
 8004eea:	2264      	movs	r2, #100	@ 0x64
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	609a      	str	r2, [r3, #8]
      break;
 8004f02:	e008      	b.n	8004f16 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004f0a:	4b19      	ldr	r3, [pc, #100]	@ (8004f70 <SUBGHZSPI_Transmit+0xa4>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d1ed      	bne.n	8004ef2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004f16:	4b17      	ldr	r3, [pc, #92]	@ (8004f74 <SUBGHZSPI_Transmit+0xa8>)
 8004f18:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004f20:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <SUBGHZSPI_Transmit+0xa0>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	0cdb      	lsrs	r3, r3, #19
 8004f2e:	2264      	movs	r2, #100	@ 0x64
 8004f30:	fb02 f303 	mul.w	r3, r2, r3
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	609a      	str	r2, [r3, #8]
      break;
 8004f46:	e008      	b.n	8004f5a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004f4e:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <SUBGHZSPI_Transmit+0xa4>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d1ed      	bne.n	8004f36 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004f5a:	4b05      	ldr	r3, [pc, #20]	@ (8004f70 <SUBGHZSPI_Transmit+0xa4>)
 8004f5c:	68db      	ldr	r3, [r3, #12]

  return status;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000004 	.word	0x20000004
 8004f70:	58010000 	.word	0x58010000
 8004f74:	5801000c 	.word	0x5801000c

08004f78 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004f86:	4b25      	ldr	r3, [pc, #148]	@ (800501c <SUBGHZSPI_Receive+0xa4>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	0cdb      	lsrs	r3, r3, #19
 8004f94:	2264      	movs	r2, #100	@ 0x64
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d105      	bne.n	8004fae <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	609a      	str	r2, [r3, #8]
      break;
 8004fac:	e008      	b.n	8004fc0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005020 <SUBGHZSPI_Receive+0xa8>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d1ed      	bne.n	8004f9c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004fc0:	4b18      	ldr	r3, [pc, #96]	@ (8005024 <SUBGHZSPI_Receive+0xac>)
 8004fc2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	22ff      	movs	r2, #255	@ 0xff
 8004fc8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004fca:	4b14      	ldr	r3, [pc, #80]	@ (800501c <SUBGHZSPI_Receive+0xa4>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	0cdb      	lsrs	r3, r3, #19
 8004fd8:	2264      	movs	r2, #100	@ 0x64
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	609a      	str	r2, [r3, #8]
      break;
 8004ff0:	e008      	b.n	8005004 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004ff8:	4b09      	ldr	r3, [pc, #36]	@ (8005020 <SUBGHZSPI_Receive+0xa8>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d1ed      	bne.n	8004fe0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005004:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <SUBGHZSPI_Receive+0xa8>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	701a      	strb	r2, [r3, #0]

  return status;
 800500e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005010:	4618      	mov	r0, r3
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000004 	.word	0x20000004
 8005020:	58010000 	.word	0x58010000
 8005024:	5801000c 	.word	0x5801000c

08005028 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	791b      	ldrb	r3, [r3, #4]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d111      	bne.n	800505c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005038:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <SUBGHZ_CheckDeviceReady+0x44>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005048:	f7ff fb9a 	bl	8004780 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3b01      	subs	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f9      	bne.n	800504c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005058:	f7ff fb82 	bl	8004760 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f807 	bl	8005070 <SUBGHZ_WaitOnBusy>
 8005062:	4603      	mov	r3, r0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20000004 	.word	0x20000004

08005070 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800507c:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <SUBGHZ_WaitOnBusy+0x58>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	0d1b      	lsrs	r3, r3, #20
 800508a:	2264      	movs	r2, #100	@ 0x64
 800508c:	fb02 f303 	mul.w	r3, r2, r3
 8005090:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8005092:	f7ff fba3 	bl	80047dc <LL_PWR_IsActiveFlag_RFBUSYMS>
 8005096:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	609a      	str	r2, [r3, #8]
      break;
 80050a8:	e009      	b.n	80050be <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80050b0:	f7ff fb82 	bl	80047b8 <LL_PWR_IsActiveFlag_RFBUSYS>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d0e9      	beq.n	8005092 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80050be:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000004 	.word	0x20000004

080050cc <LL_RCC_GetUSARTClockSource>:
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80050d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	401a      	ands	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	4313      	orrs	r3, r2
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <LL_RCC_GetLPUARTClockSource>:
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4013      	ands	r3, r2
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e042      	b.n	80051a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc ffb0 	bl	8002098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2224      	movs	r2, #36	@ 0x24
 800513c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 feb1 	bl	8005ec0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fc3a 	bl	80059d8 <UART_SetConfig>
 8005164:	4603      	mov	r3, r0
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e01b      	b.n	80051a6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800517c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800518c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 ff2f 	bl	8006002 <UART_CheckIdleState>
 80051a4:	4603      	mov	r3, r0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b08a      	sub	sp, #40	@ 0x28
 80051b2:	af02      	add	r7, sp, #8
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d173      	bne.n	80052b0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Transmit+0x26>
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e06c      	b.n	80052b2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2221      	movs	r2, #33	@ 0x21
 80051e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051e8:	f7fd f992 	bl	8002510 <HAL_GetTick>
 80051ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	88fa      	ldrh	r2, [r7, #6]
 80051f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	88fa      	ldrh	r2, [r7, #6]
 80051fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005206:	d108      	bne.n	800521a <HAL_UART_Transmit+0x6c>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e003      	b.n	8005222 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005222:	e02c      	b.n	800527e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2200      	movs	r2, #0
 800522c:	2180      	movs	r1, #128	@ 0x80
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 ff35 	bl	800609e <UART_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e039      	b.n	80052b2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005252:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	3302      	adds	r3, #2
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	e007      	b.n	800526c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	781a      	ldrb	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	3301      	adds	r3, #1
 800526a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1cc      	bne.n	8005224 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	2140      	movs	r1, #64	@ 0x40
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 ff02 	bl	800609e <UART_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e006      	b.n	80052b2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	@ 0x28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d137      	bne.n	8005344 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_UART_Receive_IT+0x24>
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e030      	b.n	8005346 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a18      	ldr	r2, [pc, #96]	@ (8005350 <HAL_UART_Receive_IT+0x94>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d01f      	beq.n	8005334 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d018      	beq.n	8005334 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	613b      	str	r3, [r7, #16]
   return(result);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	623b      	str	r3, [r7, #32]
 8005322:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	69f9      	ldr	r1, [r7, #28]
 8005326:	6a3a      	ldr	r2, [r7, #32]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	61bb      	str	r3, [r7, #24]
   return(result);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	461a      	mov	r2, r3
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 ff7e 	bl	800623c <UART_Start_Receive_IT>
 8005340:	4603      	mov	r3, r0
 8005342:	e000      	b.n	8005346 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005344:	2302      	movs	r3, #2
  }
}
 8005346:	4618      	mov	r0, r3
 8005348:	3728      	adds	r7, #40	@ 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40008000 	.word	0x40008000

08005354 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b0ba      	sub	sp, #232	@ 0xe8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800537a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800537e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005382:	4013      	ands	r3, r2
 8005384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d11b      	bne.n	80053c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d015      	beq.n	80053c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800539c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 82e3 	beq.w	8005984 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
      }
      return;
 80053c6:	e2dd      	b.n	8005984 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8123 	beq.w	8005618 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80053d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80053d6:	4b8d      	ldr	r3, [pc, #564]	@ (800560c <HAL_UART_IRQHandler+0x2b8>)
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80053de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053e2:	4b8b      	ldr	r3, [pc, #556]	@ (8005610 <HAL_UART_IRQHandler+0x2bc>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8116 	beq.w	8005618 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d011      	beq.n	800541c <HAL_UART_IRQHandler+0xc8>
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2201      	movs	r2, #1
 800540a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800541c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d011      	beq.n	800544c <HAL_UART_IRQHandler+0xf8>
 8005428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2202      	movs	r2, #2
 800543a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005442:	f043 0204 	orr.w	r2, r3, #4
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d011      	beq.n	800547c <HAL_UART_IRQHandler+0x128>
 8005458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00b      	beq.n	800547c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2204      	movs	r2, #4
 800546a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005472:	f043 0202 	orr.w	r2, r3, #2
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800547c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d017      	beq.n	80054b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005494:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005498:	4b5c      	ldr	r3, [pc, #368]	@ (800560c <HAL_UART_IRQHandler+0x2b8>)
 800549a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2208      	movs	r2, #8
 80054a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ae:	f043 0208 	orr.w	r2, r3, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d012      	beq.n	80054ea <HAL_UART_IRQHandler+0x196>
 80054c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00c      	beq.n	80054ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8249 	beq.w	8005988 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d013      	beq.n	800552a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d105      	bne.n	800551a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800550e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005530:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553e:	2b40      	cmp	r3, #64	@ 0x40
 8005540:	d005      	beq.n	800554e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005546:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800554a:	2b00      	cmp	r3, #0
 800554c:	d054      	beq.n	80055f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 ff94 	bl	800647c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555e:	2b40      	cmp	r3, #64	@ 0x40
 8005560:	d146      	bne.n	80055f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800557c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800558e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800559a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1d9      	bne.n	8005562 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d017      	beq.n	80055e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055be:	4a15      	ldr	r2, [pc, #84]	@ (8005614 <HAL_UART_IRQHandler+0x2c0>)
 80055c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fd f9bd 	bl	8002948 <HAL_DMA_Abort_IT>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d019      	beq.n	8005608 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80055e2:	4610      	mov	r0, r2
 80055e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e6:	e00f      	b.n	8005608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f9e0 	bl	80059ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ee:	e00b      	b.n	8005608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f9dc 	bl	80059ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f6:	e007      	b.n	8005608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f9d8 	bl	80059ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005606:	e1bf      	b.n	8005988 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	bf00      	nop
    return;
 800560a:	e1bd      	b.n	8005988 <HAL_UART_IRQHandler+0x634>
 800560c:	10000001 	.word	0x10000001
 8005610:	04000120 	.word	0x04000120
 8005614:	08006547 	.word	0x08006547

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800561c:	2b01      	cmp	r3, #1
 800561e:	f040 8153 	bne.w	80058c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 814c 	beq.w	80058c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8145 	beq.w	80058c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2210      	movs	r2, #16
 8005644:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	f040 80bb 	bne.w	80057cc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 818f 	beq.w	800598c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005674:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005678:	429a      	cmp	r2, r3
 800567a:	f080 8187 	bcs.w	800598c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005684:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	f040 8087 	bne.w	80057aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1da      	bne.n	800569c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800570a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800570e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005712:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800571c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e1      	bne.n	80056e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3308      	adds	r3, #8
 8005742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005748:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800574c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e3      	bne.n	8005722 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005778:	f023 0310 	bic.w	r3, r3, #16
 800577c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800578a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800578c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e4      	bne.n	8005768 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fd f871 	bl	800288c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f8fb 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057ca:	e0df      	b.n	800598c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057d8:	b29b      	uxth	r3, r3
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80d1 	beq.w	8005990 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80057ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80cc 	beq.w	8005990 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005808:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800580c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800581a:	647b      	str	r3, [r7, #68]	@ 0x44
 800581c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005820:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e4      	bne.n	80057f8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3308      	adds	r3, #8
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	623b      	str	r3, [r7, #32]
   return(result);
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005856:	633a      	str	r2, [r7, #48]	@ 0x30
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800585c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e1      	bne.n	800582e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	60fb      	str	r3, [r7, #12]
   return(result);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0310 	bic.w	r3, r3, #16
 8005892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	69b9      	ldr	r1, [r7, #24]
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	617b      	str	r3, [r7, #20]
   return(result);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e4      	bne.n	800587e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f87d 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058c6:	e063      	b.n	8005990 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00e      	beq.n	80058f2 <HAL_UART_IRQHandler+0x59e>
 80058d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fb88 	bl	8007000 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058f0:	e051      	b.n	8005996 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d014      	beq.n	8005928 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d105      	bne.n	8005916 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800590a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800591a:	2b00      	cmp	r3, #0
 800591c:	d03a      	beq.n	8005994 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
    }
    return;
 8005926:	e035      	b.n	8005994 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <HAL_UART_IRQHandler+0x5f4>
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fe16 	bl	8006572 <UART_EndTransmit_IT>
    return;
 8005946:	e026      	b.n	8005996 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <HAL_UART_IRQHandler+0x614>
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005958:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 fb5f 	bl	8007024 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005966:	e016      	b.n	8005996 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d010      	beq.n	8005996 <HAL_UART_IRQHandler+0x642>
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005978:	2b00      	cmp	r3, #0
 800597a:	da0c      	bge.n	8005996 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 fb48 	bl	8007012 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005982:	e008      	b.n	8005996 <HAL_UART_IRQHandler+0x642>
      return;
 8005984:	bf00      	nop
 8005986:	e006      	b.n	8005996 <HAL_UART_IRQHandler+0x642>
    return;
 8005988:	bf00      	nop
 800598a:	e004      	b.n	8005996 <HAL_UART_IRQHandler+0x642>
      return;
 800598c:	bf00      	nop
 800598e:	e002      	b.n	8005996 <HAL_UART_IRQHandler+0x642>
      return;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_UART_IRQHandler+0x642>
    return;
 8005994:	bf00      	nop
  }
}
 8005996:	37e8      	adds	r7, #232	@ 0xe8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr

080059ae <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
	...

080059d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059dc:	b08c      	sub	sp, #48	@ 0x30
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b94      	ldr	r3, [pc, #592]	@ (8005c58 <UART_SetConfig+0x280>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a89      	ldr	r2, [pc, #548]	@ (8005c5c <UART_SetConfig+0x284>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a40:	4313      	orrs	r3, r2
 8005a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005a4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	6812      	ldr	r2, [r2, #0]
 8005a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a62:	f023 010f 	bic.w	r1, r3, #15
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a7a      	ldr	r2, [pc, #488]	@ (8005c60 <UART_SetConfig+0x288>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d127      	bne.n	8005acc <UART_SetConfig+0xf4>
 8005a7c:	2003      	movs	r0, #3
 8005a7e:	f7ff fb25 	bl	80050cc <LL_RCC_GetUSARTClockSource>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d81b      	bhi.n	8005ac4 <UART_SetConfig+0xec>
 8005a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a94 <UART_SetConfig+0xbc>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005abd 	.word	0x08005abd
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aaa:	e080      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005aac:	2302      	movs	r3, #2
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab2:	e07c      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aba:	e078      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac2:	e074      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aca:	e070      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a64      	ldr	r2, [pc, #400]	@ (8005c64 <UART_SetConfig+0x28c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d138      	bne.n	8005b48 <UART_SetConfig+0x170>
 8005ad6:	200c      	movs	r0, #12
 8005ad8:	f7ff faf8 	bl	80050cc <LL_RCC_GetUSARTClockSource>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005ae2:	2b0c      	cmp	r3, #12
 8005ae4:	d82c      	bhi.n	8005b40 <UART_SetConfig+0x168>
 8005ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <UART_SetConfig+0x114>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b21 	.word	0x08005b21
 8005af0:	08005b41 	.word	0x08005b41
 8005af4:	08005b41 	.word	0x08005b41
 8005af8:	08005b41 	.word	0x08005b41
 8005afc:	08005b31 	.word	0x08005b31
 8005b00:	08005b41 	.word	0x08005b41
 8005b04:	08005b41 	.word	0x08005b41
 8005b08:	08005b41 	.word	0x08005b41
 8005b0c:	08005b29 	.word	0x08005b29
 8005b10:	08005b41 	.word	0x08005b41
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	08005b41 	.word	0x08005b41
 8005b1c:	08005b39 	.word	0x08005b39
 8005b20:	2300      	movs	r3, #0
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b26:	e042      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b2e:	e03e      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005b30:	2304      	movs	r3, #4
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b36:	e03a      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005b38:	2308      	movs	r3, #8
 8005b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3e:	e036      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005b40:	2310      	movs	r3, #16
 8005b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b46:	e032      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a43      	ldr	r2, [pc, #268]	@ (8005c5c <UART_SetConfig+0x284>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d12a      	bne.n	8005ba8 <UART_SetConfig+0x1d0>
 8005b52:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005b56:	f7ff facb 	bl	80050f0 <LL_RCC_GetLPUARTClockSource>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b60:	d01a      	beq.n	8005b98 <UART_SetConfig+0x1c0>
 8005b62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b66:	d81b      	bhi.n	8005ba0 <UART_SetConfig+0x1c8>
 8005b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b6c:	d00c      	beq.n	8005b88 <UART_SetConfig+0x1b0>
 8005b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b72:	d815      	bhi.n	8005ba0 <UART_SetConfig+0x1c8>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <UART_SetConfig+0x1a8>
 8005b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b7c:	d008      	beq.n	8005b90 <UART_SetConfig+0x1b8>
 8005b7e:	e00f      	b.n	8005ba0 <UART_SetConfig+0x1c8>
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b86:	e012      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8e:	e00e      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005b90:	2304      	movs	r3, #4
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b96:	e00a      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b9e:	e006      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ba6:	e002      	b.n	8005bae <UART_SetConfig+0x1d6>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c5c <UART_SetConfig+0x284>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	f040 80a4 	bne.w	8005d02 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d823      	bhi.n	8005c0a <UART_SetConfig+0x232>
 8005bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <UART_SetConfig+0x1f0>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bed 	.word	0x08005bed
 8005bcc:	08005c0b 	.word	0x08005c0b
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005c0b 	.word	0x08005c0b
 8005bd8:	08005bfb 	.word	0x08005bfb
 8005bdc:	08005c0b 	.word	0x08005c0b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c0b 	.word	0x08005c0b
 8005be8:	08005c03 	.word	0x08005c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bec:	f7fe fac0 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8005bf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bf2:	e010      	b.n	8005c16 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c68 <UART_SetConfig+0x290>)
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bf8:	e00d      	b.n	8005c16 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfa:	f7fe fa05 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8005bfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c00:	e009      	b.n	8005c16 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c08:	e005      	b.n	8005c16 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8137 	beq.w	8005e8c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	4a12      	ldr	r2, [pc, #72]	@ (8005c6c <UART_SetConfig+0x294>)
 8005c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	4413      	add	r3, r2
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d305      	bcc.n	8005c4e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d910      	bls.n	8005c70 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c54:	e11a      	b.n	8005e8c <UART_SetConfig+0x4b4>
 8005c56:	bf00      	nop
 8005c58:	cfff69f3 	.word	0xcfff69f3
 8005c5c:	40008000 	.word	0x40008000
 8005c60:	40013800 	.word	0x40013800
 8005c64:	40004400 	.word	0x40004400
 8005c68:	00f42400 	.word	0x00f42400
 8005c6c:	0800ce10 	.word	0x0800ce10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	2200      	movs	r2, #0
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	60fa      	str	r2, [r7, #12]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	4a8e      	ldr	r2, [pc, #568]	@ (8005eb8 <UART_SetConfig+0x4e0>)
 8005c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2200      	movs	r2, #0
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	607a      	str	r2, [r7, #4]
 8005c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c92:	f7fb fa2f 	bl	80010f4 <__aeabi_uldivmod>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	020b      	lsls	r3, r1, #8
 8005ca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cac:	0202      	lsls	r2, r0, #8
 8005cae:	6979      	ldr	r1, [r7, #20]
 8005cb0:	6849      	ldr	r1, [r1, #4]
 8005cb2:	0849      	lsrs	r1, r1, #1
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	4605      	mov	r5, r0
 8005cba:	eb12 0804 	adds.w	r8, r2, r4
 8005cbe:	eb43 0905 	adc.w	r9, r3, r5
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	469a      	mov	sl, r3
 8005cca:	4693      	mov	fp, r2
 8005ccc:	4652      	mov	r2, sl
 8005cce:	465b      	mov	r3, fp
 8005cd0:	4640      	mov	r0, r8
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	f7fb fa0e 	bl	80010f4 <__aeabi_uldivmod>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4613      	mov	r3, r2
 8005cde:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ce6:	d308      	bcc.n	8005cfa <UART_SetConfig+0x322>
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cee:	d204      	bcs.n	8005cfa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a3a      	ldr	r2, [r7, #32]
 8005cf6:	60da      	str	r2, [r3, #12]
 8005cf8:	e0c8      	b.n	8005e8c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d00:	e0c4      	b.n	8005e8c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d0a:	d167      	bne.n	8005ddc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d828      	bhi.n	8005d66 <UART_SetConfig+0x38e>
 8005d14:	a201      	add	r2, pc, #4	@ (adr r2, 8005d1c <UART_SetConfig+0x344>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d51 	.word	0x08005d51
 8005d28:	08005d67 	.word	0x08005d67
 8005d2c:	08005d57 	.word	0x08005d57
 8005d30:	08005d67 	.word	0x08005d67
 8005d34:	08005d67 	.word	0x08005d67
 8005d38:	08005d67 	.word	0x08005d67
 8005d3c:	08005d5f 	.word	0x08005d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d40:	f7fe fa16 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8005d44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d46:	e014      	b.n	8005d72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fe fa24 	bl	8004194 <HAL_RCC_GetPCLK2Freq>
 8005d4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d4e:	e010      	b.n	8005d72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d50:	4b5a      	ldr	r3, [pc, #360]	@ (8005ebc <UART_SetConfig+0x4e4>)
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d54:	e00d      	b.n	8005d72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d56:	f7fe f957 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8005d5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d5c:	e009      	b.n	8005d72 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d64:	e005      	b.n	8005d72 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8089 	beq.w	8005e8c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8005eb8 <UART_SetConfig+0x4e0>)
 8005d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d8c:	005a      	lsls	r2, r3, #1
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	441a      	add	r2, r3
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	2b0f      	cmp	r3, #15
 8005da4:	d916      	bls.n	8005dd4 <UART_SetConfig+0x3fc>
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dac:	d212      	bcs.n	8005dd4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f023 030f 	bic.w	r3, r3, #15
 8005db6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	085b      	lsrs	r3, r3, #1
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	8bfb      	ldrh	r3, [r7, #30]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	8bfa      	ldrh	r2, [r7, #30]
 8005dd0:	60da      	str	r2, [r3, #12]
 8005dd2:	e05b      	b.n	8005e8c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005dda:	e057      	b.n	8005e8c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ddc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d828      	bhi.n	8005e36 <UART_SetConfig+0x45e>
 8005de4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dec <UART_SetConfig+0x414>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	08005e37 	.word	0x08005e37
 8005dfc:	08005e27 	.word	0x08005e27
 8005e00:	08005e37 	.word	0x08005e37
 8005e04:	08005e37 	.word	0x08005e37
 8005e08:	08005e37 	.word	0x08005e37
 8005e0c:	08005e2f 	.word	0x08005e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e10:	f7fe f9ae 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8005e14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e16:	e014      	b.n	8005e42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e18:	f7fe f9bc 	bl	8004194 <HAL_RCC_GetPCLK2Freq>
 8005e1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e1e:	e010      	b.n	8005e42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e20:	4b26      	ldr	r3, [pc, #152]	@ (8005ebc <UART_SetConfig+0x4e4>)
 8005e22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e24:	e00d      	b.n	8005e42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fe f8ef 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8005e2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e2c:	e009      	b.n	8005e42 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e34:	e005      	b.n	8005e42 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e40:	bf00      	nop
    }

    if (pclk != 0U)
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d021      	beq.n	8005e8c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005eb8 <UART_SetConfig+0x4e0>)
 8005e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e52:	461a      	mov	r2, r3
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	441a      	add	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	2b0f      	cmp	r3, #15
 8005e70:	d909      	bls.n	8005e86 <UART_SetConfig+0x4ae>
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e78:	d205      	bcs.n	8005e86 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60da      	str	r2, [r3, #12]
 8005e84:	e002      	b.n	8005e8c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005ea8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3730      	adds	r7, #48	@ 0x30
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eb6:	bf00      	nop
 8005eb8:	0800ce10 	.word	0x0800ce10
 8005ebc:	00f42400 	.word	0x00f42400

08005ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01a      	beq.n	8005fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fbe:	d10a      	bne.n	8005fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr

08006002 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b086      	sub	sp, #24
 8006006:	af02      	add	r7, sp, #8
 8006008:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006012:	f7fc fa7d 	bl	8002510 <HAL_GetTick>
 8006016:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b08      	cmp	r3, #8
 8006024:	d10e      	bne.n	8006044 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006026:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f832 	bl	800609e <UART_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e028      	b.n	8006096 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b04      	cmp	r3, #4
 8006050:	d10e      	bne.n	8006070 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006052:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f81c 	bl	800609e <UART_WaitOnFlagUntilTimeout>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e012      	b.n	8006096 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b09c      	sub	sp, #112	@ 0x70
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	4613      	mov	r3, r2
 80060ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ae:	e0af      	b.n	8006210 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060b6:	f000 80ab 	beq.w	8006210 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ba:	f7fc fa29 	bl	8002510 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d302      	bcc.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80060ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d140      	bne.n	8006152 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80060de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060e0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80060e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060f0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80060f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80060fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e6      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006114:	f023 0301 	bic.w	r3, r3, #1
 8006118:	663b      	str	r3, [r7, #96]	@ 0x60
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006122:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006124:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006128:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e5      	bne.n	8006102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e06f      	b.n	8006232 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d057      	beq.n	8006210 <UART_WaitOnFlagUntilTimeout+0x172>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b80      	cmp	r3, #128	@ 0x80
 8006164:	d054      	beq.n	8006210 <UART_WaitOnFlagUntilTimeout+0x172>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b40      	cmp	r3, #64	@ 0x40
 800616a:	d051      	beq.n	8006210 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800617a:	d149      	bne.n	8006210 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006184:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800619a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80061b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e6      	bne.n	8006186 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3308      	adds	r3, #8
 80061be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	613b      	str	r3, [r7, #16]
   return(result);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f023 0301 	bic.w	r3, r3, #1
 80061ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3308      	adds	r3, #8
 80061d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80061d8:	623a      	str	r2, [r7, #32]
 80061da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	69f9      	ldr	r1, [r7, #28]
 80061de:	6a3a      	ldr	r2, [r7, #32]
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e010      	b.n	8006232 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69da      	ldr	r2, [r3, #28]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4013      	ands	r3, r2
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	429a      	cmp	r2, r3
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	429a      	cmp	r2, r3
 800622c:	f43f af40 	beq.w	80060b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3770      	adds	r7, #112	@ 0x70
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800623c:	b480      	push	{r7}
 800623e:	b0a3      	sub	sp, #140	@ 0x8c
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626e:	d10e      	bne.n	800628e <UART_Start_Receive_IT+0x52>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d105      	bne.n	8006284 <UART_Start_Receive_IT+0x48>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800627e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006282:	e02d      	b.n	80062e0 <UART_Start_Receive_IT+0xa4>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	22ff      	movs	r2, #255	@ 0xff
 8006288:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800628c:	e028      	b.n	80062e0 <UART_Start_Receive_IT+0xa4>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10d      	bne.n	80062b2 <UART_Start_Receive_IT+0x76>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <UART_Start_Receive_IT+0x6c>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	22ff      	movs	r2, #255	@ 0xff
 80062a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062a6:	e01b      	b.n	80062e0 <UART_Start_Receive_IT+0xa4>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	227f      	movs	r2, #127	@ 0x7f
 80062ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062b0:	e016      	b.n	80062e0 <UART_Start_Receive_IT+0xa4>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ba:	d10d      	bne.n	80062d8 <UART_Start_Receive_IT+0x9c>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <UART_Start_Receive_IT+0x92>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	227f      	movs	r2, #127	@ 0x7f
 80062c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062cc:	e008      	b.n	80062e0 <UART_Start_Receive_IT+0xa4>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	223f      	movs	r2, #63	@ 0x3f
 80062d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062d6:	e003      	b.n	80062e0 <UART_Start_Receive_IT+0xa4>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2222      	movs	r2, #34	@ 0x22
 80062ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3308      	adds	r3, #8
 80062f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006300:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006314:	673a      	str	r2, [r7, #112]	@ 0x70
 8006316:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800631a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006322:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e3      	bne.n	80062f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800632c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006330:	d14f      	bne.n	80063d2 <UART_Start_Receive_IT+0x196>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006338:	88fa      	ldrh	r2, [r7, #6]
 800633a:	429a      	cmp	r2, r3
 800633c:	d349      	bcc.n	80063d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006346:	d107      	bne.n	8006358 <UART_Start_Receive_IT+0x11c>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a46      	ldr	r2, [pc, #280]	@ (800646c <UART_Start_Receive_IT+0x230>)
 8006354:	675a      	str	r2, [r3, #116]	@ 0x74
 8006356:	e002      	b.n	800635e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4a45      	ldr	r2, [pc, #276]	@ (8006470 <UART_Start_Receive_IT+0x234>)
 800635c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01a      	beq.n	800639c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800637a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800638a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800638e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e4      	bne.n	8006366 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3308      	adds	r3, #8
 80063a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3308      	adds	r3, #8
 80063ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80063bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80063be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80063ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e5      	bne.n	800639c <UART_Start_Receive_IT+0x160>
 80063d0:	e046      	b.n	8006460 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063da:	d107      	bne.n	80063ec <UART_Start_Receive_IT+0x1b0>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4a23      	ldr	r2, [pc, #140]	@ (8006474 <UART_Start_Receive_IT+0x238>)
 80063e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80063ea:	e002      	b.n	80063f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a22      	ldr	r2, [pc, #136]	@ (8006478 <UART_Start_Receive_IT+0x23c>)
 80063f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d019      	beq.n	800642e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800640e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006418:	637b      	str	r3, [r7, #52]	@ 0x34
 800641a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800641e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e6      	bne.n	80063fa <UART_Start_Receive_IT+0x1be>
 800642c:	e018      	b.n	8006460 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	613b      	str	r3, [r7, #16]
   return(result);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f043 0320 	orr.w	r3, r3, #32
 8006442:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800644c:	623b      	str	r3, [r7, #32]
 800644e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	69f9      	ldr	r1, [r7, #28]
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	61bb      	str	r3, [r7, #24]
   return(result);
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e6      	bne.n	800642e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	378c      	adds	r7, #140	@ 0x8c
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr
 800646c:	08006c99 	.word	0x08006c99
 8006470:	08006939 	.word	0x08006939
 8006474:	08006781 	.word	0x08006781
 8006478:	080065c9 	.word	0x080065c9

0800647c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800647c:	b480      	push	{r7}
 800647e:	b095      	sub	sp, #84	@ 0x54
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006498:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80064a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e6      	bne.n	8006484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3308      	adds	r3, #8
 80064bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3308      	adds	r3, #8
 80064d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e3      	bne.n	80064b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d118      	bne.n	8006528 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	60bb      	str	r3, [r7, #8]
   return(result);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f023 0310 	bic.w	r3, r3, #16
 800650a:	647b      	str	r3, [r7, #68]	@ 0x44
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	6979      	ldr	r1, [r7, #20]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	613b      	str	r3, [r7, #16]
   return(result);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e6      	bne.n	80064f6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2220      	movs	r2, #32
 800652c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800653c:	bf00      	nop
 800653e:	3754      	adds	r7, #84	@ 0x54
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr

08006546 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff fa22 	bl	80059ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b088      	sub	sp, #32
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	60bb      	str	r3, [r7, #8]
   return(result);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6979      	ldr	r1, [r7, #20]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	613b      	str	r3, [r7, #16]
   return(result);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e6      	bne.n	800657a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff f9ee 	bl	800599c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c0:	bf00      	nop
 80065c2:	3720      	adds	r7, #32
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b09c      	sub	sp, #112	@ 0x70
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80065d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065e0:	2b22      	cmp	r3, #34	@ 0x22
 80065e2:	f040 80be 	bne.w	8006762 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065f4:	b2d9      	uxtb	r1, r3
 80065f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006600:	400a      	ands	r2, r1
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	f040 80a1 	bne.w	8006772 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800663e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800664e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006650:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006654:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800665c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e6      	bne.n	8006630 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	667b      	str	r3, [r7, #100]	@ 0x64
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006682:	647a      	str	r2, [r7, #68]	@ 0x44
 8006684:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e5      	bne.n	8006662 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a33      	ldr	r2, [pc, #204]	@ (800677c <UART_RxISR_8BIT+0x1b4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d01f      	beq.n	80066f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d018      	beq.n	80066f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	623b      	str	r3, [r7, #32]
   return(result);
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80066e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e6      	bne.n	80066c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d12e      	bne.n	800675a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	69b9      	ldr	r1, [r7, #24]
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	617b      	str	r3, [r7, #20]
   return(result);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e6      	bne.n	8006702 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b10      	cmp	r3, #16
 8006740:	d103      	bne.n	800674a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2210      	movs	r2, #16
 8006748:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff f934 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006758:	e00b      	b.n	8006772 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fb fac6 	bl	8001cec <HAL_UART_RxCpltCallback>
}
 8006760:	e007      	b.n	8006772 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699a      	ldr	r2, [r3, #24]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0208 	orr.w	r2, r2, #8
 8006770:	619a      	str	r2, [r3, #24]
}
 8006772:	bf00      	nop
 8006774:	3770      	adds	r7, #112	@ 0x70
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40008000 	.word	0x40008000

08006780 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b09c      	sub	sp, #112	@ 0x70
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800678e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006798:	2b22      	cmp	r3, #34	@ 0x22
 800679a:	f040 80be 	bne.w	800691a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80067b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067b6:	4013      	ands	r3, r2
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c2:	1c9a      	adds	r2, r3, #2
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 80a1 	bne.w	800692a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006806:	657b      	str	r3, [r7, #84]	@ 0x54
 8006808:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800680c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e6      	bne.n	80067e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	f023 0301 	bic.w	r3, r3, #1
 8006830:	663b      	str	r3, [r7, #96]	@ 0x60
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3308      	adds	r3, #8
 8006838:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800683a:	643a      	str	r2, [r7, #64]	@ 0x40
 800683c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a33      	ldr	r2, [pc, #204]	@ (8006934 <UART_RxISR_16BIT+0x1b4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d01f      	beq.n	80068ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d018      	beq.n	80068ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	61fb      	str	r3, [r7, #28]
   return(result);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800688e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800689a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800689e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e6      	bne.n	800687a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d12e      	bne.n	8006912 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f023 0310 	bic.w	r3, r3, #16
 80068ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	613b      	str	r3, [r7, #16]
   return(result);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f003 0310 	and.w	r3, r3, #16
 80068f6:	2b10      	cmp	r3, #16
 80068f8:	d103      	bne.n	8006902 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2210      	movs	r2, #16
 8006900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff f858 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006910:	e00b      	b.n	800692a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fb f9ea 	bl	8001cec <HAL_UART_RxCpltCallback>
}
 8006918:	e007      	b.n	800692a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699a      	ldr	r2, [r3, #24]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0208 	orr.w	r2, r2, #8
 8006928:	619a      	str	r2, [r3, #24]
}
 800692a:	bf00      	nop
 800692c:	3770      	adds	r7, #112	@ 0x70
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40008000 	.word	0x40008000

08006938 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b0ac      	sub	sp, #176	@ 0xb0
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006946:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800696e:	2b22      	cmp	r3, #34	@ 0x22
 8006970:	f040 8182 	bne.w	8006c78 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800697a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800697e:	e125      	b.n	8006bcc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800698a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800698e:	b2d9      	uxtb	r1, r3
 8006990:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006994:	b2da      	uxtb	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800699a:	400a      	ands	r2, r1
 800699c:	b2d2      	uxtb	r2, r2
 800699e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80069c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d053      	beq.n	8006a7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d011      	beq.n	8006a02 <UART_RxISR_8BIT_FIFOEN+0xca>
 80069de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80069e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00b      	beq.n	8006a02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2201      	movs	r2, #1
 80069f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f8:	f043 0201 	orr.w	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00b      	beq.n	8006a32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a28:	f043 0204 	orr.w	r2, r3, #4
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d011      	beq.n	8006a62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a58:	f043 0202 	orr.w	r2, r3, #2
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d006      	beq.n	8006a7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7fe ff9e 	bl	80059ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f040 80a2 	bne.w	8006bcc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006aac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006ab0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006ab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e4      	bne.n	8006a88 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ae6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006ae8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006aec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006af4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e1      	bne.n	8006abe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a5f      	ldr	r2, [pc, #380]	@ (8006c90 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d021      	beq.n	8006b5c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01a      	beq.n	8006b5c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b48:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b4a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e4      	bne.n	8006b26 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d130      	bne.n	8006bc6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	f023 0310 	bic.w	r3, r3, #16
 8006b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e4      	bne.n	8006b6a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	d103      	bne.n	8006bb6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2210      	movs	r2, #16
 8006bb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fe fefe 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
 8006bc4:	e002      	b.n	8006bcc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fb f890 	bl	8001cec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bcc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d006      	beq.n	8006be2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f aecf 	bne.w	8006980 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006be8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d049      	beq.n	8006c88 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006bfa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d242      	bcs.n	8006c88 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e3      	bne.n	8006c02 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006c3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f043 0320 	orr.w	r3, r3, #32
 8006c54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6979      	ldr	r1, [r7, #20]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e4      	bne.n	8006c40 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c76:	e007      	b.n	8006c88 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0208 	orr.w	r2, r2, #8
 8006c86:	619a      	str	r2, [r3, #24]
}
 8006c88:	bf00      	nop
 8006c8a:	37b0      	adds	r7, #176	@ 0xb0
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40008000 	.word	0x40008000
 8006c94:	080065c9 	.word	0x080065c9

08006c98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b0ae      	sub	sp, #184	@ 0xb8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ca6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cce:	2b22      	cmp	r3, #34	@ 0x22
 8006cd0:	f040 8186 	bne.w	8006fe0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006cda:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cde:	e129      	b.n	8006f34 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006cf2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006cf6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d08:	1c9a      	adds	r2, r3, #2
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d053      	beq.n	8006dde <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d011      	beq.n	8006d66 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00b      	beq.n	8006d66 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2201      	movs	r2, #1
 8006d54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5c:	f043 0201 	orr.w	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d011      	beq.n	8006d96 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2202      	movs	r2, #2
 8006d84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8c:	f043 0204 	orr.w	r2, r3, #4
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d011      	beq.n	8006dc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2204      	movs	r2, #4
 8006db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbc:	f043 0202 	orr.w	r2, r3, #2
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d006      	beq.n	8006dde <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fe fdec 	bl	80059ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f040 80a4 	bne.w	8006f34 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e12:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e2      	bne.n	8006dec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006e4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e1      	bne.n	8006e26 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a5f      	ldr	r2, [pc, #380]	@ (8006ff8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d021      	beq.n	8006ec4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01a      	beq.n	8006ec4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ea2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eb2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006eb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e4      	bne.n	8006e8e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d130      	bne.n	8006f2e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee2:	f023 0310 	bic.w	r3, r3, #16
 8006ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ef6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006efa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e4      	bne.n	8006ed2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f003 0310 	and.w	r3, r3, #16
 8006f12:	2b10      	cmp	r3, #16
 8006f14:	d103      	bne.n	8006f1e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fe fd4a 	bl	80059c0 <HAL_UARTEx_RxEventCallback>
 8006f2c:	e002      	b.n	8006f34 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fa fedc 	bl	8001cec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f34:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d006      	beq.n	8006f4a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f47f aecb 	bne.w	8006ce0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f50:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f54:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d049      	beq.n	8006ff0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f62:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d242      	bcs.n	8006ff0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	623b      	str	r3, [r7, #32]
   return(result);
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006f8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e3      	bne.n	8006f6a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a15      	ldr	r2, [pc, #84]	@ (8006ffc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006fa6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f043 0320 	orr.w	r3, r3, #32
 8006fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	69b9      	ldr	r1, [r7, #24]
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e4      	bne.n	8006fa8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fde:	e007      	b.n	8006ff0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0208 	orr.w	r2, r2, #8
 8006fee:	619a      	str	r2, [r3, #24]
}
 8006ff0:	bf00      	nop
 8006ff2:	37b8      	adds	r7, #184	@ 0xb8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40008000 	.word	0x40008000
 8006ffc:	08006781 	.word	0x08006781

08007000 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr

08007012 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr

08007036 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_UARTEx_DisableFifoMode+0x16>
 8007048:	2302      	movs	r3, #2
 800704a:	e027      	b.n	800709c <HAL_UARTEx_DisableFifoMode+0x66>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	@ 0x24
 8007058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0201 	bic.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800707a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr

080070a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e02d      	b.n	800711a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2224      	movs	r2, #36	@ 0x24
 80070ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f850 	bl	80071a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007136:	2302      	movs	r3, #2
 8007138:	e02d      	b.n	8007196 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2224      	movs	r2, #36	@ 0x24
 8007146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f812 	bl	80071a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d108      	bne.n	80071c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071c0:	e031      	b.n	8007226 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071c2:	2308      	movs	r3, #8
 80071c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071c6:	2308      	movs	r3, #8
 80071c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	0e5b      	lsrs	r3, r3, #25
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	0f5b      	lsrs	r3, r3, #29
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	7b3a      	ldrb	r2, [r7, #12]
 80071ee:	4910      	ldr	r1, [pc, #64]	@ (8007230 <UARTEx_SetNbDataToProcess+0x90>)
 80071f0:	5c8a      	ldrb	r2, [r1, r2]
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071f6:	7b3a      	ldrb	r2, [r7, #12]
 80071f8:	490e      	ldr	r1, [pc, #56]	@ (8007234 <UARTEx_SetNbDataToProcess+0x94>)
 80071fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	7b7a      	ldrb	r2, [r7, #13]
 800720c:	4908      	ldr	r1, [pc, #32]	@ (8007230 <UARTEx_SetNbDataToProcess+0x90>)
 800720e:	5c8a      	ldrb	r2, [r1, r2]
 8007210:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007214:	7b7a      	ldrb	r2, [r7, #13]
 8007216:	4907      	ldr	r1, [pc, #28]	@ (8007234 <UARTEx_SetNbDataToProcess+0x94>)
 8007218:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800721a:	fb93 f3f2 	sdiv	r3, r3, r2
 800721e:	b29a      	uxth	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr
 8007230:	0800ce28 	.word	0x0800ce28
 8007234:	0800ce30 	.word	0x0800ce30

08007238 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800723c:	f7fb f896 	bl	800236c <BSP_RADIO_Init>
 8007240:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8007242:	4618      	mov	r0, r3
 8007244:	bd80      	pop	{r7, pc}

08007246 <RBI_GetTxConfig>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_GetTxConfig(void)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800724a:	f7fb f8cd 	bl	80023e8 <BSP_RADIO_GetTxConfig>
 800724e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}

08007254 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8007258:	f7fb f8cd 	bl	80023f6 <BSP_RADIO_IsTCXO>
 800725c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800725e:	4618      	mov	r0, r3
 8007260:	bd80      	pop	{r7, pc}

08007262 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8007266:	f7fb f8cd 	bl	8002404 <BSP_RADIO_IsDCDC>
 800726a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800726c:	4618      	mov	r0, r3
 800726e:	bd80      	pop	{r7, pc}

08007270 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	4618      	mov	r0, r3
 800727e:	f7fb f8c8 	bl	8002412 <BSP_RADIO_GetRFOMaxPowerConfig>
 8007282:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800729a:	4a1d      	ldr	r2, [pc, #116]	@ (8007310 <SUBGRF_Init+0x84>)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80072a0:	f7fa fdae 	bl	8001e00 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80072a4:	2002      	movs	r0, #2
 80072a6:	f000 fef7 	bl	8008098 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80072aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007314 <SUBGRF_Init+0x88>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80072b0:	2000      	movs	r0, #0
 80072b2:	f000 f8b9 	bl	8007428 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80072b6:	f7ff ffcd 	bl	8007254 <RBI_IsTCXO>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d10e      	bne.n	80072de <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80072c0:	2140      	movs	r1, #64	@ 0x40
 80072c2:	2001      	movs	r0, #1
 80072c4:	f000 f9fe 	bl	80076c4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80072c8:	2100      	movs	r1, #0
 80072ca:	f640 1011 	movw	r0, #2321	@ 0x911
 80072ce:	f000 fd3d 	bl	8007d4c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80072d2:	237f      	movs	r3, #127	@ 0x7f
 80072d4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80072d6:	7b38      	ldrb	r0, [r7, #12]
 80072d8:	f000 f902 	bl	80074e0 <SUBGRF_Calibrate>
 80072dc:	e009      	b.n	80072f2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80072de:	2120      	movs	r1, #32
 80072e0:	f640 1011 	movw	r0, #2321	@ 0x911
 80072e4:	f000 fd32 	bl	8007d4c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80072e8:	2120      	movs	r1, #32
 80072ea:	f640 1012 	movw	r0, #2322	@ 0x912
 80072ee:	f000 fd2d 	bl	8007d4c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80072f2:	210e      	movs	r1, #14
 80072f4:	f640 101f 	movw	r0, #2335	@ 0x91f
 80072f8:	f000 fd28 	bl	8007d4c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80072fc:	f7ff ff9c 	bl	8007238 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8007300:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <SUBGRF_Init+0x8c>)
 8007302:	2201      	movs	r2, #1
 8007304:	701a      	strb	r2, [r3, #0]
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000394 	.word	0x20000394
 8007314:	20000390 	.word	0x20000390
 8007318:	20000388 	.word	0x20000388

0800731c <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	461a      	mov	r2, r3
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	2000      	movs	r0, #0
 8007330:	f000 fd56 	bl	8007de0 <SUBGRF_WriteBuffer>
}
 8007334:	bf00      	nop
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	4613      	mov	r3, r2
 8007348:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800734e:	f107 0317 	add.w	r3, r7, #23
 8007352:	4619      	mov	r1, r3
 8007354:	68b8      	ldr	r0, [r7, #8]
 8007356:	f000 fc7b 	bl	8007c50 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	79fa      	ldrb	r2, [r7, #7]
 8007360:	429a      	cmp	r2, r3
 8007362:	d201      	bcs.n	8007368 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8007364:	2301      	movs	r3, #1
 8007366:	e007      	b.n	8007378 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8007368:	7df8      	ldrb	r0, [r7, #23]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	68f9      	ldr	r1, [r7, #12]
 8007372:	f000 fd57 	bl	8007e24 <SUBGRF_ReadBuffer>

    return 0;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	460b      	mov	r3, r1
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800738e:	7afb      	ldrb	r3, [r7, #11]
 8007390:	4619      	mov	r1, r3
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7ff ffc2 	bl	800731c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f861 	bl	8007460 <SUBGRF_SetTx>
}
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	4603      	mov	r3, r0
 80073ae:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	0a1b      	lsrs	r3, r3, #8
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80073c0:	f000 fa04 	bl	80077cc <SUBGRF_GetPacketType>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d108      	bne.n	80073dc <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80073ca:	f107 030c 	add.w	r3, r7, #12
 80073ce:	2202      	movs	r2, #2
 80073d0:	4619      	mov	r1, r3
 80073d2:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80073d6:	f000 fce1 	bl	8007d9c <SUBGRF_WriteRegisters>
            break;
 80073da:	e000      	b.n	80073de <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80073dc:	bf00      	nop
    }
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	4603      	mov	r3, r0
 80073ee:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	0a1b      	lsrs	r3, r3, #8
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007400:	f000 f9e4 	bl	80077cc <SUBGRF_GetPacketType>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d108      	bne.n	800741c <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800740a:	f107 030c 	add.w	r3, r7, #12
 800740e:	2202      	movs	r2, #2
 8007410:	4619      	mov	r1, r3
 8007412:	f240 60be 	movw	r0, #1726	@ 0x6be
 8007416:	f000 fcc1 	bl	8007d9c <SUBGRF_WriteRegisters>
            break;
 800741a:	e000      	b.n	800741e <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800741c:	bf00      	nop
    }
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8007432:	1dfb      	adds	r3, r7, #7
 8007434:	2201      	movs	r2, #1
 8007436:	4619      	mov	r1, r3
 8007438:	2080      	movs	r0, #128	@ 0x80
 800743a:	f000 fd15 	bl	8007e68 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8007444:	4b05      	ldr	r3, [pc, #20]	@ (800745c <SUBGRF_SetStandby+0x34>)
 8007446:	2201      	movs	r2, #1
 8007448:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800744a:	e002      	b.n	8007452 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800744c:	4b03      	ldr	r3, [pc, #12]	@ (800745c <SUBGRF_SetStandby+0x34>)
 800744e:	2202      	movs	r2, #2
 8007450:	701a      	strb	r2, [r3, #0]
}
 8007452:	bf00      	nop
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20000388 	.word	0x20000388

08007460 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8007468:	4b0c      	ldr	r3, [pc, #48]	@ (800749c <SUBGRF_SetTx+0x3c>)
 800746a:	2204      	movs	r2, #4
 800746c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	0c1b      	lsrs	r3, r3, #16
 8007472:	b2db      	uxtb	r3, r3
 8007474:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	0a1b      	lsrs	r3, r3, #8
 800747a:	b2db      	uxtb	r3, r3
 800747c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8007484:	f107 030c 	add.w	r3, r7, #12
 8007488:	2203      	movs	r2, #3
 800748a:	4619      	mov	r1, r3
 800748c:	2083      	movs	r0, #131	@ 0x83
 800748e:	f000 fceb 	bl	8007e68 <SUBGRF_WriteCommand>
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000388 	.word	0x20000388

080074a0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80074a8:	4b0c      	ldr	r3, [pc, #48]	@ (80074dc <SUBGRF_SetRx+0x3c>)
 80074aa:	2205      	movs	r2, #5
 80074ac:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	0c1b      	lsrs	r3, r3, #16
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80074c4:	f107 030c 	add.w	r3, r7, #12
 80074c8:	2203      	movs	r2, #3
 80074ca:	4619      	mov	r1, r3
 80074cc:	2082      	movs	r0, #130	@ 0x82
 80074ce:	f000 fccb 	bl	8007e68 <SUBGRF_WriteCommand>
}
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000388 	.word	0x20000388

080074e0 <SUBGRF_Calibrate>:
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
}

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80074e8:	793b      	ldrb	r3, [r7, #4]
 80074ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	b25b      	sxtb	r3, r3
 80074f2:	019b      	lsls	r3, r3, #6
 80074f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80074f6:	793b      	ldrb	r3, [r7, #4]
 80074f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80074fc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80074fe:	b25b      	sxtb	r3, r3
 8007500:	015b      	lsls	r3, r3, #5
 8007502:	b25b      	sxtb	r3, r3
 8007504:	4313      	orrs	r3, r2
 8007506:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007508:	793b      	ldrb	r3, [r7, #4]
 800750a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800750e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007510:	b25b      	sxtb	r3, r3
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	b25b      	sxtb	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800751a:	793b      	ldrb	r3, [r7, #4]
 800751c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007520:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007522:	b25b      	sxtb	r3, r3
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	b25b      	sxtb	r3, r3
 8007528:	4313      	orrs	r3, r2
 800752a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800752c:	793b      	ldrb	r3, [r7, #4]
 800752e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007532:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007534:	b25b      	sxtb	r3, r3
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	b25b      	sxtb	r3, r3
 800753a:	4313      	orrs	r3, r2
 800753c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800753e:	793b      	ldrb	r3, [r7, #4]
 8007540:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007544:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007546:	b25b      	sxtb	r3, r3
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	b25b      	sxtb	r3, r3
 800754c:	4313      	orrs	r3, r2
 800754e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8007550:	793b      	ldrb	r3, [r7, #4]
 8007552:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007556:	b2db      	uxtb	r3, r3
 8007558:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800755a:	4313      	orrs	r3, r2
 800755c:	b25b      	sxtb	r3, r3
 800755e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007560:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007562:	f107 030f 	add.w	r3, r7, #15
 8007566:	2201      	movs	r2, #1
 8007568:	4619      	mov	r1, r3
 800756a:	2089      	movs	r0, #137	@ 0x89
 800756c:	f000 fc7c 	bl	8007e68 <SUBGRF_WriteCommand>
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a1d      	ldr	r2, [pc, #116]	@ (80075f8 <SUBGRF_CalibrateImage+0x80>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d904      	bls.n	8007592 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8007588:	23e1      	movs	r3, #225	@ 0xe1
 800758a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800758c:	23e9      	movs	r3, #233	@ 0xe9
 800758e:	737b      	strb	r3, [r7, #13]
 8007590:	e027      	b.n	80075e2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a19      	ldr	r2, [pc, #100]	@ (80075fc <SUBGRF_CalibrateImage+0x84>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d904      	bls.n	80075a4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800759a:	23d7      	movs	r3, #215	@ 0xd7
 800759c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800759e:	23db      	movs	r3, #219	@ 0xdb
 80075a0:	737b      	strb	r3, [r7, #13]
 80075a2:	e01e      	b.n	80075e2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a16      	ldr	r2, [pc, #88]	@ (8007600 <SUBGRF_CalibrateImage+0x88>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d904      	bls.n	80075b6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80075ac:	23c1      	movs	r3, #193	@ 0xc1
 80075ae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80075b0:	23c5      	movs	r3, #197	@ 0xc5
 80075b2:	737b      	strb	r3, [r7, #13]
 80075b4:	e015      	b.n	80075e2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a12      	ldr	r2, [pc, #72]	@ (8007604 <SUBGRF_CalibrateImage+0x8c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d904      	bls.n	80075c8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80075be:	2375      	movs	r3, #117	@ 0x75
 80075c0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80075c2:	2381      	movs	r3, #129	@ 0x81
 80075c4:	737b      	strb	r3, [r7, #13]
 80075c6:	e00c      	b.n	80075e2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a0f      	ldr	r2, [pc, #60]	@ (8007608 <SUBGRF_CalibrateImage+0x90>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d904      	bls.n	80075da <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80075d0:	236b      	movs	r3, #107	@ 0x6b
 80075d2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80075d4:	236f      	movs	r3, #111	@ 0x6f
 80075d6:	737b      	strb	r3, [r7, #13]
 80075d8:	e003      	b.n	80075e2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80075da:	2329      	movs	r3, #41	@ 0x29
 80075dc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80075de:	232b      	movs	r3, #43	@ 0x2b
 80075e0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80075e2:	f107 030c 	add.w	r3, r7, #12
 80075e6:	2202      	movs	r2, #2
 80075e8:	4619      	mov	r1, r3
 80075ea:	2098      	movs	r0, #152	@ 0x98
 80075ec:	f000 fc3c 	bl	8007e68 <SUBGRF_WriteCommand>
}
 80075f0:	bf00      	nop
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	35a4e900 	.word	0x35a4e900
 80075fc:	32a9f880 	.word	0x32a9f880
 8007600:	2de54480 	.word	0x2de54480
 8007604:	1b6b0b00 	.word	0x1b6b0b00
 8007608:	1954fc40 	.word	0x1954fc40

0800760c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800760c:	b590      	push	{r4, r7, lr}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	4611      	mov	r1, r2
 8007618:	461a      	mov	r2, r3
 800761a:	4623      	mov	r3, r4
 800761c:	71fb      	strb	r3, [r7, #7]
 800761e:	4603      	mov	r3, r0
 8007620:	71bb      	strb	r3, [r7, #6]
 8007622:	460b      	mov	r3, r1
 8007624:	717b      	strb	r3, [r7, #5]
 8007626:	4613      	mov	r3, r2
 8007628:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800762e:	79bb      	ldrb	r3, [r7, #6]
 8007630:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8007632:	797b      	ldrb	r3, [r7, #5]
 8007634:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8007636:	793b      	ldrb	r3, [r7, #4]
 8007638:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800763a:	f107 030c 	add.w	r3, r7, #12
 800763e:	2204      	movs	r2, #4
 8007640:	4619      	mov	r1, r3
 8007642:	2095      	movs	r0, #149	@ 0x95
 8007644:	f000 fc10 	bl	8007e68 <SUBGRF_WriteCommand>
}
 8007648:	bf00      	nop
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	bd90      	pop	{r4, r7, pc}

08007650 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	4611      	mov	r1, r2
 800765c:	461a      	mov	r2, r3
 800765e:	4623      	mov	r3, r4
 8007660:	80fb      	strh	r3, [r7, #6]
 8007662:	4603      	mov	r3, r0
 8007664:	80bb      	strh	r3, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	807b      	strh	r3, [r7, #2]
 800766a:	4613      	mov	r3, r2
 800766c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800766e:	88fb      	ldrh	r3, [r7, #6]
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	b29b      	uxth	r3, r3
 8007674:	b2db      	uxtb	r3, r3
 8007676:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007678:	88fb      	ldrh	r3, [r7, #6]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800767e:	88bb      	ldrh	r3, [r7, #4]
 8007680:	0a1b      	lsrs	r3, r3, #8
 8007682:	b29b      	uxth	r3, r3
 8007684:	b2db      	uxtb	r3, r3
 8007686:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007688:	88bb      	ldrh	r3, [r7, #4]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800768e:	887b      	ldrh	r3, [r7, #2]
 8007690:	0a1b      	lsrs	r3, r3, #8
 8007692:	b29b      	uxth	r3, r3
 8007694:	b2db      	uxtb	r3, r3
 8007696:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007698:	887b      	ldrh	r3, [r7, #2]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800769e:	883b      	ldrh	r3, [r7, #0]
 80076a0:	0a1b      	lsrs	r3, r3, #8
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80076a8:	883b      	ldrh	r3, [r7, #0]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80076ae:	f107 0308 	add.w	r3, r7, #8
 80076b2:	2208      	movs	r2, #8
 80076b4:	4619      	mov	r1, r3
 80076b6:	2008      	movs	r0, #8
 80076b8:	f000 fbd6 	bl	8007e68 <SUBGRF_WriteCommand>
}
 80076bc:	bf00      	nop
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd90      	pop	{r4, r7, pc}

080076c4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	0c1b      	lsrs	r3, r3, #16
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	0a1b      	lsrs	r3, r3, #8
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80076f0:	f107 030c 	add.w	r3, r7, #12
 80076f4:	2204      	movs	r2, #4
 80076f6:	4619      	mov	r1, r3
 80076f8:	2097      	movs	r0, #151	@ 0x97
 80076fa:	f000 fbb5 	bl	8007e68 <SUBGRF_WriteCommand>
}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8007708:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8007716:	4b1d      	ldr	r3, [pc, #116]	@ (800778c <SUBGRF_SetRfFrequency+0x84>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	f083 0301 	eor.w	r3, r3, #1
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff ff27 	bl	8007578 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800772a:	4b18      	ldr	r3, [pc, #96]	@ (800778c <SUBGRF_SetRfFrequency+0x84>)
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	461c      	mov	r4, r3
 8007736:	4615      	mov	r5, r2
 8007738:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800773c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8007740:	4a13      	ldr	r2, [pc, #76]	@ (8007790 <SUBGRF_SetRfFrequency+0x88>)
 8007742:	f04f 0300 	mov.w	r3, #0
 8007746:	4640      	mov	r0, r8
 8007748:	4649      	mov	r1, r9
 800774a:	f7f9 fcd3 	bl	80010f4 <__aeabi_uldivmod>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4613      	mov	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	0e1b      	lsrs	r3, r3, #24
 800775a:	b2db      	uxtb	r3, r3
 800775c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	0c1b      	lsrs	r3, r3, #16
 8007762:	b2db      	uxtb	r3, r3
 8007764:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	0a1b      	lsrs	r3, r3, #8
 800776a:	b2db      	uxtb	r3, r3
 800776c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8007774:	f107 0308 	add.w	r3, r7, #8
 8007778:	2204      	movs	r2, #4
 800777a:	4619      	mov	r1, r3
 800777c:	2086      	movs	r0, #134	@ 0x86
 800777e:	f000 fb73 	bl	8007e68 <SUBGRF_WriteCommand>
}
 8007782:	bf00      	nop
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800778c:	20000390 	.word	0x20000390
 8007790:	01e84800 	.word	0x01e84800

08007794 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800779e:	79fa      	ldrb	r2, [r7, #7]
 80077a0:	4b09      	ldr	r3, [pc, #36]	@ (80077c8 <SUBGRF_SetPacketType+0x34>)
 80077a2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80077a4:	79fb      	ldrb	r3, [r7, #7]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d104      	bne.n	80077b4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80077aa:	2100      	movs	r1, #0
 80077ac:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80077b0:	f000 facc 	bl	8007d4c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80077b4:	1dfb      	adds	r3, r7, #7
 80077b6:	2201      	movs	r2, #1
 80077b8:	4619      	mov	r1, r3
 80077ba:	208a      	movs	r0, #138	@ 0x8a
 80077bc:	f000 fb54 	bl	8007e68 <SUBGRF_WriteCommand>
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20000389 	.word	0x20000389

080077cc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
    return PacketType;
 80077d0:	4b02      	ldr	r3, [pc, #8]	@ (80077dc <SUBGRF_GetPacketType+0x10>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr
 80077dc:	20000389 	.word	0x20000389

080077e0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	71fb      	strb	r3, [r7, #7]
 80077ea:	460b      	mov	r3, r1
 80077ec:	71bb      	strb	r3, [r7, #6]
 80077ee:	4613      	mov	r3, r2
 80077f0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d149      	bne.n	800788c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80077f8:	2000      	movs	r0, #0
 80077fa:	f7ff fd39 	bl	8007270 <RBI_GetRFOMaxPowerConfig>
 80077fe:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8007800:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	429a      	cmp	r2, r3
 8007808:	da01      	bge.n	800780e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b0e      	cmp	r3, #14
 8007812:	d10e      	bne.n	8007832 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8007814:	2301      	movs	r3, #1
 8007816:	2201      	movs	r2, #1
 8007818:	2100      	movs	r1, #0
 800781a:	2004      	movs	r0, #4
 800781c:	f7ff fef6 	bl	800760c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007820:	79ba      	ldrb	r2, [r7, #6]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	b2db      	uxtb	r3, r3
 800782a:	330e      	adds	r3, #14
 800782c:	b2db      	uxtb	r3, r3
 800782e:	71bb      	strb	r3, [r7, #6]
 8007830:	e01f      	b.n	8007872 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b0a      	cmp	r3, #10
 8007836:	d10e      	bne.n	8007856 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8007838:	2301      	movs	r3, #1
 800783a:	2201      	movs	r2, #1
 800783c:	2100      	movs	r1, #0
 800783e:	2001      	movs	r0, #1
 8007840:	f7ff fee4 	bl	800760c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8007844:	79ba      	ldrb	r2, [r7, #6]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	b2db      	uxtb	r3, r3
 800784e:	330d      	adds	r3, #13
 8007850:	b2db      	uxtb	r3, r3
 8007852:	71bb      	strb	r3, [r7, #6]
 8007854:	e00d      	b.n	8007872 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8007856:	2301      	movs	r3, #1
 8007858:	2201      	movs	r2, #1
 800785a:	2100      	movs	r1, #0
 800785c:	2007      	movs	r0, #7
 800785e:	f7ff fed5 	bl	800760c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007862:	79ba      	ldrb	r2, [r7, #6]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	b2db      	uxtb	r3, r3
 800786c:	330e      	adds	r3, #14
 800786e:	b2db      	uxtb	r3, r3
 8007870:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8007872:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007876:	f113 0f11 	cmn.w	r3, #17
 800787a:	da01      	bge.n	8007880 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800787c:	23ef      	movs	r3, #239	@ 0xef
 800787e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8007880:	2118      	movs	r1, #24
 8007882:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8007886:	f000 fa61 	bl	8007d4c <SUBGRF_WriteRegister>
 800788a:	e067      	b.n	800795c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800788c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8007890:	f000 fa70 	bl	8007d74 <SUBGRF_ReadRegister>
 8007894:	4603      	mov	r3, r0
 8007896:	f043 031e 	orr.w	r3, r3, #30
 800789a:	b2db      	uxtb	r3, r3
 800789c:	4619      	mov	r1, r3
 800789e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80078a2:	f000 fa53 	bl	8007d4c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80078a6:	2001      	movs	r0, #1
 80078a8:	f7ff fce2 	bl	8007270 <RBI_GetRFOMaxPowerConfig>
 80078ac:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80078ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	da01      	bge.n	80078bc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b14      	cmp	r3, #20
 80078c0:	d10e      	bne.n	80078e0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80078c2:	2301      	movs	r3, #1
 80078c4:	2200      	movs	r2, #0
 80078c6:	2105      	movs	r1, #5
 80078c8:	2003      	movs	r0, #3
 80078ca:	f7ff fe9f 	bl	800760c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80078ce:	79ba      	ldrb	r2, [r7, #6]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	3316      	adds	r3, #22
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	71bb      	strb	r3, [r7, #6]
 80078de:	e031      	b.n	8007944 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b11      	cmp	r3, #17
 80078e4:	d10e      	bne.n	8007904 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80078e6:	2301      	movs	r3, #1
 80078e8:	2200      	movs	r2, #0
 80078ea:	2103      	movs	r1, #3
 80078ec:	2002      	movs	r0, #2
 80078ee:	f7ff fe8d 	bl	800760c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80078f2:	79ba      	ldrb	r2, [r7, #6]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	3316      	adds	r3, #22
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	71bb      	strb	r3, [r7, #6]
 8007902:	e01f      	b.n	8007944 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b0e      	cmp	r3, #14
 8007908:	d10e      	bne.n	8007928 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800790a:	2301      	movs	r3, #1
 800790c:	2200      	movs	r2, #0
 800790e:	2102      	movs	r1, #2
 8007910:	2002      	movs	r0, #2
 8007912:	f7ff fe7b 	bl	800760c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007916:	79ba      	ldrb	r2, [r7, #6]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	b2db      	uxtb	r3, r3
 8007920:	330e      	adds	r3, #14
 8007922:	b2db      	uxtb	r3, r3
 8007924:	71bb      	strb	r3, [r7, #6]
 8007926:	e00d      	b.n	8007944 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8007928:	2301      	movs	r3, #1
 800792a:	2200      	movs	r2, #0
 800792c:	2107      	movs	r1, #7
 800792e:	2004      	movs	r0, #4
 8007930:	f7ff fe6c 	bl	800760c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007934:	79ba      	ldrb	r2, [r7, #6]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	b2db      	uxtb	r3, r3
 800793e:	3316      	adds	r3, #22
 8007940:	b2db      	uxtb	r3, r3
 8007942:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8007944:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007948:	f113 0f09 	cmn.w	r3, #9
 800794c:	da01      	bge.n	8007952 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800794e:	23f7      	movs	r3, #247	@ 0xf7
 8007950:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8007952:	2138      	movs	r1, #56	@ 0x38
 8007954:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8007958:	f000 f9f8 	bl	8007d4c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800795c:	79bb      	ldrb	r3, [r7, #6]
 800795e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8007960:	797b      	ldrb	r3, [r7, #5]
 8007962:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8007964:	f107 0308 	add.w	r3, r7, #8
 8007968:	2202      	movs	r2, #2
 800796a:	4619      	mov	r1, r3
 800796c:	208e      	movs	r0, #142	@ 0x8e
 800796e:	f000 fa7b 	bl	8007e68 <SUBGRF_WriteCommand>
}
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800797c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007980:	b086      	sub	sp, #24
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800798a:	f107 0308 	add.w	r3, r7, #8
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	4b5c      	ldr	r3, [pc, #368]	@ (8007b0c <SUBGRF_SetModulationParams+0x190>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d004      	beq.n	80079aa <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff fef5 	bl	8007794 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	f200 80a5 	bhi.w	8007afe <SUBGRF_SetModulationParams+0x182>
 80079b4:	a201      	add	r2, pc, #4	@ (adr r2, 80079bc <SUBGRF_SetModulationParams+0x40>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	08007a8d 	.word	0x08007a8d
 80079c4:	08007a4f 	.word	0x08007a4f
 80079c8:	08007abb 	.word	0x08007abb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80079cc:	2308      	movs	r3, #8
 80079ce:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	4a4e      	ldr	r2, [pc, #312]	@ (8007b10 <SUBGRF_SetModulationParams+0x194>)
 80079d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079da:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	0c1b      	lsrs	r3, r3, #16
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	0a1b      	lsrs	r3, r3, #8
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7b1b      	ldrb	r3, [r3, #12]
 80079f6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	7b5b      	ldrb	r3, [r3, #13]
 80079fc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	2200      	movs	r2, #0
 8007a04:	461c      	mov	r4, r3
 8007a06:	4615      	mov	r5, r2
 8007a08:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8007a0c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8007a10:	4a40      	ldr	r2, [pc, #256]	@ (8007b14 <SUBGRF_SetModulationParams+0x198>)
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	4640      	mov	r0, r8
 8007a18:	4649      	mov	r1, r9
 8007a1a:	f7f9 fb6b 	bl	80010f4 <__aeabi_uldivmod>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4613      	mov	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	0c1b      	lsrs	r3, r3, #16
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	0a1b      	lsrs	r3, r3, #8
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007a3c:	7cfb      	ldrb	r3, [r7, #19]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	f107 0308 	add.w	r3, r7, #8
 8007a44:	4619      	mov	r1, r3
 8007a46:	208b      	movs	r0, #139	@ 0x8b
 8007a48:	f000 fa0e 	bl	8007e68 <SUBGRF_WriteCommand>
        break;
 8007a4c:	e058      	b.n	8007b00 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007a4e:	2304      	movs	r3, #4
 8007a50:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	4a2e      	ldr	r2, [pc, #184]	@ (8007b10 <SUBGRF_SetModulationParams+0x194>)
 8007a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	0a1b      	lsrs	r3, r3, #8
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7d1b      	ldrb	r3, [r3, #20]
 8007a78:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007a7a:	7cfb      	ldrb	r3, [r7, #19]
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	f107 0308 	add.w	r3, r7, #8
 8007a82:	4619      	mov	r1, r3
 8007a84:	208b      	movs	r0, #139	@ 0x8b
 8007a86:	f000 f9ef 	bl	8007e68 <SUBGRF_WriteCommand>
        break;
 8007a8a:	e039      	b.n	8007b00 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7e1b      	ldrb	r3, [r3, #24]
 8007a94:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	7e5b      	ldrb	r3, [r3, #25]
 8007a9a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	7e9b      	ldrb	r3, [r3, #26]
 8007aa0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7edb      	ldrb	r3, [r3, #27]
 8007aa6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007aa8:	7cfb      	ldrb	r3, [r7, #19]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	f107 0308 	add.w	r3, r7, #8
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	208b      	movs	r0, #139	@ 0x8b
 8007ab4:	f000 f9d8 	bl	8007e68 <SUBGRF_WriteCommand>

        break;
 8007ab8:	e022      	b.n	8007b00 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8007aba:	2305      	movs	r3, #5
 8007abc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4a13      	ldr	r2, [pc, #76]	@ (8007b10 <SUBGRF_SetModulationParams+0x194>)
 8007ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	0c1b      	lsrs	r3, r3, #16
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	0a1b      	lsrs	r3, r3, #8
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7b1b      	ldrb	r3, [r3, #12]
 8007ae4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7b5b      	ldrb	r3, [r3, #13]
 8007aea:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007aec:	7cfb      	ldrb	r3, [r7, #19]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f107 0308 	add.w	r3, r7, #8
 8007af4:	4619      	mov	r1, r3
 8007af6:	208b      	movs	r0, #139	@ 0x8b
 8007af8:	f000 f9b6 	bl	8007e68 <SUBGRF_WriteCommand>
        break;
 8007afc:	e000      	b.n	8007b00 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8007afe:	bf00      	nop
    }
}
 8007b00:	bf00      	nop
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000389 	.word	0x20000389
 8007b10:	3d090000 	.word	0x3d090000
 8007b14:	01e84800 	.word	0x01e84800

08007b18 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	605a      	str	r2, [r3, #4]
 8007b2e:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	781a      	ldrb	r2, [r3, #0]
 8007b34:	4b44      	ldr	r3, [pc, #272]	@ (8007c48 <SUBGRF_SetPacketParams+0x130>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d004      	beq.n	8007b46 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fe27 	bl	8007794 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d878      	bhi.n	8007c40 <SUBGRF_SetPacketParams+0x128>
 8007b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <SUBGRF_SetPacketParams+0x3c>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b65 	.word	0x08007b65
 8007b58:	08007bf5 	.word	0x08007bf5
 8007b5c:	08007be9 	.word	0x08007be9
 8007b60:	08007b65 	.word	0x08007b65
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	7a5b      	ldrb	r3, [r3, #9]
 8007b68:	2bf1      	cmp	r3, #241	@ 0xf1
 8007b6a:	d10a      	bne.n	8007b82 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007b6c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007b70:	f7ff fc19 	bl	80073a6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007b74:	f248 0005 	movw	r0, #32773	@ 0x8005
 8007b78:	f7ff fc35 	bl	80073e6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	75bb      	strb	r3, [r7, #22]
 8007b80:	e011      	b.n	8007ba6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	7a5b      	ldrb	r3, [r3, #9]
 8007b86:	2bf2      	cmp	r3, #242	@ 0xf2
 8007b88:	d10a      	bne.n	8007ba0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007b8a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8007b8e:	f7ff fc0a 	bl	80073a6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007b92:	f241 0021 	movw	r0, #4129	@ 0x1021
 8007b96:	f7ff fc26 	bl	80073e6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007b9a:	2306      	movs	r3, #6
 8007b9c:	75bb      	strb	r3, [r7, #22]
 8007b9e:	e002      	b.n	8007ba6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7a5b      	ldrb	r3, [r3, #9]
 8007ba4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8007ba6:	2309      	movs	r3, #9
 8007ba8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	885b      	ldrh	r3, [r3, #2]
 8007bae:	0a1b      	lsrs	r3, r3, #8
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	885b      	ldrh	r3, [r3, #2]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	795b      	ldrb	r3, [r3, #5]
 8007bc8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	799b      	ldrb	r3, [r3, #6]
 8007bce:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	79db      	ldrb	r3, [r3, #7]
 8007bd4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7a1b      	ldrb	r3, [r3, #8]
 8007bda:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007bdc:	7dbb      	ldrb	r3, [r7, #22]
 8007bde:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	7a9b      	ldrb	r3, [r3, #10]
 8007be4:	753b      	strb	r3, [r7, #20]
        break;
 8007be6:	e022      	b.n	8007c2e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007be8:	2301      	movs	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	7b1b      	ldrb	r3, [r3, #12]
 8007bf0:	733b      	strb	r3, [r7, #12]
        break;
 8007bf2:	e01c      	b.n	8007c2e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8007bf4:	2306      	movs	r3, #6
 8007bf6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	89db      	ldrh	r3, [r3, #14]
 8007bfc:	0a1b      	lsrs	r3, r3, #8
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	89db      	ldrh	r3, [r3, #14]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7c1a      	ldrb	r2, [r3, #16]
 8007c10:	4b0e      	ldr	r3, [pc, #56]	@ (8007c4c <SUBGRF_SetPacketParams+0x134>)
 8007c12:	4611      	mov	r1, r2
 8007c14:	7019      	strb	r1, [r3, #0]
 8007c16:	4613      	mov	r3, r2
 8007c18:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	7c5b      	ldrb	r3, [r3, #17]
 8007c1e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7c9b      	ldrb	r3, [r3, #18]
 8007c24:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	7cdb      	ldrb	r3, [r3, #19]
 8007c2a:	747b      	strb	r3, [r7, #17]
        break;
 8007c2c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	f107 030c 	add.w	r3, r7, #12
 8007c36:	4619      	mov	r1, r3
 8007c38:	208c      	movs	r0, #140	@ 0x8c
 8007c3a:	f000 f915 	bl	8007e68 <SUBGRF_WriteCommand>
 8007c3e:	e000      	b.n	8007c42 <SUBGRF_SetPacketParams+0x12a>
        return;
 8007c40:	bf00      	nop
}
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20000389 	.word	0x20000389
 8007c4c:	2000038a 	.word	0x2000038a

08007c50 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007c5a:	f107 030c 	add.w	r3, r7, #12
 8007c5e:	2202      	movs	r2, #2
 8007c60:	4619      	mov	r1, r3
 8007c62:	2013      	movs	r0, #19
 8007c64:	f000 f922 	bl	8007eac <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007c68:	f7ff fdb0 	bl	80077cc <SUBGRF_GetPacketType>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d10d      	bne.n	8007c8e <SUBGRF_GetRxBufferStatus+0x3e>
 8007c72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca4 <SUBGRF_GetRxBufferStatus+0x54>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d108      	bne.n	8007c8e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007c7c:	f240 7002 	movw	r0, #1794	@ 0x702
 8007c80:	f000 f878 	bl	8007d74 <SUBGRF_ReadRegister>
 8007c84:	4603      	mov	r3, r0
 8007c86:	461a      	mov	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	701a      	strb	r2, [r3, #0]
 8007c8c:	e002      	b.n	8007c94 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8007c8e:	7b3a      	ldrb	r2, [r7, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007c94:	7b7a      	ldrb	r2, [r7, #13]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	701a      	strb	r2, [r3, #0]
}
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2000038a 	.word	0x2000038a

08007ca8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007cb0:	f107 030c 	add.w	r3, r7, #12
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	2014      	movs	r0, #20
 8007cba:	f000 f8f7 	bl	8007eac <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007cbe:	f7ff fd85 	bl	80077cc <SUBGRF_GetPacketType>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <SUBGRF_GetPacketStatus+0x30>
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d013      	beq.n	8007cfe <SUBGRF_GetPacketStatus+0x56>
 8007cd6:	e02a      	b.n	8007d2e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007cd8:	7b3a      	ldrb	r2, [r7, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007cde:	7b7b      	ldrb	r3, [r7, #13]
 8007ce0:	425b      	negs	r3, r3
 8007ce2:	105b      	asrs	r3, r3, #1
 8007ce4:	b25a      	sxtb	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	425b      	negs	r3, r3
 8007cee:	105b      	asrs	r3, r3, #1
 8007cf0:	b25a      	sxtb	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	609a      	str	r2, [r3, #8]
            break;
 8007cfc:	e020      	b.n	8007d40 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007cfe:	7b3b      	ldrb	r3, [r7, #12]
 8007d00:	425b      	negs	r3, r3
 8007d02:	105b      	asrs	r3, r3, #1
 8007d04:	b25a      	sxtb	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8007d0a:	7b7b      	ldrb	r3, [r7, #13]
 8007d0c:	b25b      	sxtb	r3, r3
 8007d0e:	3302      	adds	r3, #2
 8007d10:	109b      	asrs	r3, r3, #2
 8007d12:	b25a      	sxtb	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	425b      	negs	r3, r3
 8007d1c:	105b      	asrs	r3, r3, #1
 8007d1e:	b25a      	sxtb	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007d24:	4b08      	ldr	r3, [pc, #32]	@ (8007d48 <SUBGRF_GetPacketStatus+0xa0>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	611a      	str	r2, [r3, #16]
            break;
 8007d2c:	e008      	b.n	8007d40 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8007d2e:	2214      	movs	r2, #20
 8007d30:	2100      	movs	r1, #0
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f9d1 	bl	80080da <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	220f      	movs	r2, #15
 8007d3c:	701a      	strb	r2, [r3, #0]
            break;
 8007d3e:	bf00      	nop
    }
}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	2000038c 	.word	0x2000038c

08007d4c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	460a      	mov	r2, r1
 8007d56:	80fb      	strh	r3, [r7, #6]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007d5c:	1d7a      	adds	r2, r7, #5
 8007d5e:	88f9      	ldrh	r1, [r7, #6]
 8007d60:	2301      	movs	r3, #1
 8007d62:	4803      	ldr	r0, [pc, #12]	@ (8007d70 <SUBGRF_WriteRegister+0x24>)
 8007d64:	f7fc fde6 	bl	8004934 <HAL_SUBGHZ_WriteRegisters>
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000220 	.word	0x20000220

08007d74 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8007d7e:	f107 020f 	add.w	r2, r7, #15
 8007d82:	88f9      	ldrh	r1, [r7, #6]
 8007d84:	2301      	movs	r3, #1
 8007d86:	4804      	ldr	r0, [pc, #16]	@ (8007d98 <SUBGRF_ReadRegister+0x24>)
 8007d88:	f7fc fe33 	bl	80049f2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000220 	.word	0x20000220

08007d9c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	6039      	str	r1, [r7, #0]
 8007da6:	80fb      	strh	r3, [r7, #6]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dac:	f3ef 8310 	mrs	r3, PRIMASK
 8007db0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007db2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007db4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007db6:	b672      	cpsid	i
}
 8007db8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007dba:	88bb      	ldrh	r3, [r7, #4]
 8007dbc:	88f9      	ldrh	r1, [r7, #6]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4806      	ldr	r0, [pc, #24]	@ (8007ddc <SUBGRF_WriteRegisters+0x40>)
 8007dc2:	f7fc fdb7 	bl	8004934 <HAL_SUBGHZ_WriteRegisters>
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f383 8810 	msr	PRIMASK, r3
}
 8007dd0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007dd2:	bf00      	nop
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000220 	.word	0x20000220

08007de0 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	71fb      	strb	r3, [r7, #7]
 8007dec:	4613      	mov	r3, r2
 8007dee:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007df0:	f3ef 8310 	mrs	r3, PRIMASK
 8007df4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007df6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007df8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dfa:	b672      	cpsid	i
}
 8007dfc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007dfe:	79bb      	ldrb	r3, [r7, #6]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	79f9      	ldrb	r1, [r7, #7]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	4806      	ldr	r0, [pc, #24]	@ (8007e20 <SUBGRF_WriteBuffer+0x40>)
 8007e08:	f7fc ff07 	bl	8004c1a <HAL_SUBGHZ_WriteBuffer>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f383 8810 	msr	PRIMASK, r3
}
 8007e16:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007e18:	bf00      	nop
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000220 	.word	0x20000220

08007e24 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	6039      	str	r1, [r7, #0]
 8007e2e:	71fb      	strb	r3, [r7, #7]
 8007e30:	4613      	mov	r3, r2
 8007e32:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e34:	f3ef 8310 	mrs	r3, PRIMASK
 8007e38:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007e3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e3e:	b672      	cpsid	i
}
 8007e40:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007e42:	79bb      	ldrb	r3, [r7, #6]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	79f9      	ldrb	r1, [r7, #7]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	4806      	ldr	r0, [pc, #24]	@ (8007e64 <SUBGRF_ReadBuffer+0x40>)
 8007e4c:	f7fc ff38 	bl	8004cc0 <HAL_SUBGHZ_ReadBuffer>
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f383 8810 	msr	PRIMASK, r3
}
 8007e5a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007e5c:	bf00      	nop
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000220 	.word	0x20000220

08007e68 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
 8007e74:	4613      	mov	r3, r2
 8007e76:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e78:	f3ef 8310 	mrs	r3, PRIMASK
 8007e7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007e80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e82:	b672      	cpsid	i
}
 8007e84:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007e86:	88bb      	ldrh	r3, [r7, #4]
 8007e88:	79f9      	ldrb	r1, [r7, #7]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	4806      	ldr	r0, [pc, #24]	@ (8007ea8 <SUBGRF_WriteCommand+0x40>)
 8007e8e:	f7fc fe11 	bl	8004ab4 <HAL_SUBGHZ_ExecSetCmd>
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f383 8810 	msr	PRIMASK, r3
}
 8007e9c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007e9e:	bf00      	nop
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000220 	.word	0x20000220

08007eac <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ec0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007ec4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ec6:	b672      	cpsid	i
}
 8007ec8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007eca:	88bb      	ldrh	r3, [r7, #4]
 8007ecc:	79f9      	ldrb	r1, [r7, #7]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	4806      	ldr	r0, [pc, #24]	@ (8007eec <SUBGRF_ReadCommand+0x40>)
 8007ed2:	f7fc fe4e 	bl	8004b72 <HAL_SUBGHZ_ExecGetCmd>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f383 8810 	msr	PRIMASK, r3
}
 8007ee0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007ee2:	bf00      	nop
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000220 	.word	0x20000220

08007ef0 <SUBGRF_SetRfTxPower>:
    }
    RBI_ConfigRFSwitch(state);
}

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007efa:	2301      	movs	r3, #1
 8007efc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007efe:	f7ff f9a2 	bl	8007246 <RBI_GetTxConfig>
 8007f02:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d016      	beq.n	8007f38 <SUBGRF_SetRfTxPower+0x48>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	dc16      	bgt.n	8007f3e <SUBGRF_SetRfTxPower+0x4e>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <SUBGRF_SetRfTxPower+0x2e>
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d00a      	beq.n	8007f32 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8007f1c:	e00f      	b.n	8007f3e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8007f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f22:	2b0f      	cmp	r3, #15
 8007f24:	dd02      	ble.n	8007f2c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8007f26:	2302      	movs	r3, #2
 8007f28:	73fb      	strb	r3, [r7, #15]
            break;
 8007f2a:	e009      	b.n	8007f40 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73fb      	strb	r3, [r7, #15]
            break;
 8007f30:	e006      	b.n	8007f40 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8007f32:	2301      	movs	r3, #1
 8007f34:	73fb      	strb	r3, [r7, #15]
            break;
 8007f36:	e003      	b.n	8007f40 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	73fb      	strb	r3, [r7, #15]
            break;
 8007f3c:	e000      	b.n	8007f40 <SUBGRF_SetRfTxPower+0x50>
            break;
 8007f3e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007f40:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	2202      	movs	r2, #2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fc49 	bl	80077e0 <SUBGRF_SetTxParams>

    return paSelect;
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8007f60:	4b03      	ldr	r3, [pc, #12]	@ (8007f70 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2001      	movs	r0, #1
 8007f66:	4798      	blx	r3
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000394 	.word	0x20000394

08007f74 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007f7c:	4b03      	ldr	r3, [pc, #12]	@ (8007f8c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2002      	movs	r0, #2
 8007f82:	4798      	blx	r3
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000394 	.word	0x20000394

08007f90 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8007f98:	4b03      	ldr	r3, [pc, #12]	@ (8007fa8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2040      	movs	r0, #64	@ 0x40
 8007f9e:	4798      	blx	r3
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20000394 	.word	0x20000394

08007fac <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d005      	beq.n	8007fce <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8007fc2:	e00a      	b.n	8007fda <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007fc4:	4b07      	ldr	r3, [pc, #28]	@ (8007fe4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2080      	movs	r0, #128	@ 0x80
 8007fca:	4798      	blx	r3
            break;
 8007fcc:	e005      	b.n	8007fda <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8007fce:	4b05      	ldr	r3, [pc, #20]	@ (8007fe4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007fd6:	4798      	blx	r3
            break;
 8007fd8:	bf00      	nop
    }
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000394 	.word	0x20000394

08007fe8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8007ff0:	4b04      	ldr	r3, [pc, #16]	@ (8008004 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007ff8:	4798      	blx	r3
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000394 	.word	0x20000394

08008008 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8008010:	4b03      	ldr	r3, [pc, #12]	@ (8008020 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2020      	movs	r0, #32
 8008016:	4798      	blx	r3
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20000394 	.word	0x20000394

08008024 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800802c:	4b03      	ldr	r3, [pc, #12]	@ (800803c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2004      	movs	r0, #4
 8008032:	4798      	blx	r3
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20000394 	.word	0x20000394

08008040 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8008048:	4b03      	ldr	r3, [pc, #12]	@ (8008058 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2008      	movs	r0, #8
 800804e:	4798      	blx	r3
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20000394 	.word	0x20000394

0800805c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8008064:	4b03      	ldr	r3, [pc, #12]	@ (8008074 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2010      	movs	r0, #16
 800806a:	4798      	blx	r3
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20000394 	.word	0x20000394

08008078 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8008080:	4b04      	ldr	r3, [pc, #16]	@ (8008094 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008088:	4798      	blx	r3
}
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20000394 	.word	0x20000394

08008098 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80080a2:	f7ff f8de 	bl	8007262 <RBI_IsDCDC>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d112      	bne.n	80080d2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80080ac:	f640 1023 	movw	r0, #2339	@ 0x923
 80080b0:	f7ff fe60 	bl	8007d74 <SUBGRF_ReadRegister>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	f023 0306 	bic.w	r3, r3, #6
 80080be:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80080c0:	7bfa      	ldrb	r2, [r7, #15]
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	4619      	mov	r1, r3
 80080ca:	f640 1023 	movw	r0, #2339	@ 0x923
 80080ce:	f7ff fe3d 	bl	8007d4c <SUBGRF_WriteRegister>
  }
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80080da:	b480      	push	{r7}
 80080dc:	b085      	sub	sp, #20
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
 80080e6:	4613      	mov	r3, r2
 80080e8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80080ee:	e004      	b.n	80080fa <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	60fa      	str	r2, [r7, #12]
 80080f6:	78fa      	ldrb	r2, [r7, #3]
 80080f8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80080fa:	883b      	ldrh	r3, [r7, #0]
 80080fc:	1e5a      	subs	r2, r3, #1
 80080fe:	803a      	strh	r2, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f5      	bne.n	80080f0 <UTIL_MEM_set_8+0x16>
  }
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr

08008110 <__cvt>:
 8008110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	b088      	sub	sp, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	461d      	mov	r5, r3
 800811a:	4614      	mov	r4, r2
 800811c:	bfbc      	itt	lt
 800811e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008122:	4614      	movlt	r4, r2
 8008124:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008126:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008128:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800812c:	bfb6      	itet	lt
 800812e:	461d      	movlt	r5, r3
 8008130:	2300      	movge	r3, #0
 8008132:	232d      	movlt	r3, #45	@ 0x2d
 8008134:	7013      	strb	r3, [r2, #0]
 8008136:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008138:	f023 0820 	bic.w	r8, r3, #32
 800813c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008140:	d005      	beq.n	800814e <__cvt+0x3e>
 8008142:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008146:	d100      	bne.n	800814a <__cvt+0x3a>
 8008148:	3601      	adds	r6, #1
 800814a:	2302      	movs	r3, #2
 800814c:	e000      	b.n	8008150 <__cvt+0x40>
 800814e:	2303      	movs	r3, #3
 8008150:	aa07      	add	r2, sp, #28
 8008152:	9204      	str	r2, [sp, #16]
 8008154:	aa06      	add	r2, sp, #24
 8008156:	e9cd a202 	strd	sl, r2, [sp, #8]
 800815a:	e9cd 3600 	strd	r3, r6, [sp]
 800815e:	4622      	mov	r2, r4
 8008160:	462b      	mov	r3, r5
 8008162:	f001 f979 	bl	8009458 <_dtoa_r>
 8008166:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800816a:	4607      	mov	r7, r0
 800816c:	d119      	bne.n	80081a2 <__cvt+0x92>
 800816e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008170:	07db      	lsls	r3, r3, #31
 8008172:	d50e      	bpl.n	8008192 <__cvt+0x82>
 8008174:	eb00 0906 	add.w	r9, r0, r6
 8008178:	2200      	movs	r2, #0
 800817a:	2300      	movs	r3, #0
 800817c:	4620      	mov	r0, r4
 800817e:	4629      	mov	r1, r5
 8008180:	f7f8 fc7a 	bl	8000a78 <__aeabi_dcmpeq>
 8008184:	b108      	cbz	r0, 800818a <__cvt+0x7a>
 8008186:	f8cd 901c 	str.w	r9, [sp, #28]
 800818a:	2230      	movs	r2, #48	@ 0x30
 800818c:	9b07      	ldr	r3, [sp, #28]
 800818e:	454b      	cmp	r3, r9
 8008190:	d31e      	bcc.n	80081d0 <__cvt+0xc0>
 8008192:	9b07      	ldr	r3, [sp, #28]
 8008194:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008196:	1bdb      	subs	r3, r3, r7
 8008198:	4638      	mov	r0, r7
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	b008      	add	sp, #32
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081a6:	eb00 0906 	add.w	r9, r0, r6
 80081aa:	d1e5      	bne.n	8008178 <__cvt+0x68>
 80081ac:	7803      	ldrb	r3, [r0, #0]
 80081ae:	2b30      	cmp	r3, #48	@ 0x30
 80081b0:	d10a      	bne.n	80081c8 <__cvt+0xb8>
 80081b2:	2200      	movs	r2, #0
 80081b4:	2300      	movs	r3, #0
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 fc5d 	bl	8000a78 <__aeabi_dcmpeq>
 80081be:	b918      	cbnz	r0, 80081c8 <__cvt+0xb8>
 80081c0:	f1c6 0601 	rsb	r6, r6, #1
 80081c4:	f8ca 6000 	str.w	r6, [sl]
 80081c8:	f8da 3000 	ldr.w	r3, [sl]
 80081cc:	4499      	add	r9, r3
 80081ce:	e7d3      	b.n	8008178 <__cvt+0x68>
 80081d0:	1c59      	adds	r1, r3, #1
 80081d2:	9107      	str	r1, [sp, #28]
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	e7d9      	b.n	800818c <__cvt+0x7c>

080081d8 <__exponent>:
 80081d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081da:	2900      	cmp	r1, #0
 80081dc:	bfba      	itte	lt
 80081de:	4249      	neglt	r1, r1
 80081e0:	232d      	movlt	r3, #45	@ 0x2d
 80081e2:	232b      	movge	r3, #43	@ 0x2b
 80081e4:	2909      	cmp	r1, #9
 80081e6:	7002      	strb	r2, [r0, #0]
 80081e8:	7043      	strb	r3, [r0, #1]
 80081ea:	dd29      	ble.n	8008240 <__exponent+0x68>
 80081ec:	f10d 0307 	add.w	r3, sp, #7
 80081f0:	461d      	mov	r5, r3
 80081f2:	270a      	movs	r7, #10
 80081f4:	461a      	mov	r2, r3
 80081f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80081fa:	fb07 1416 	mls	r4, r7, r6, r1
 80081fe:	3430      	adds	r4, #48	@ 0x30
 8008200:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008204:	460c      	mov	r4, r1
 8008206:	2c63      	cmp	r4, #99	@ 0x63
 8008208:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800820c:	4631      	mov	r1, r6
 800820e:	dcf1      	bgt.n	80081f4 <__exponent+0x1c>
 8008210:	3130      	adds	r1, #48	@ 0x30
 8008212:	1e94      	subs	r4, r2, #2
 8008214:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008218:	1c41      	adds	r1, r0, #1
 800821a:	4623      	mov	r3, r4
 800821c:	42ab      	cmp	r3, r5
 800821e:	d30a      	bcc.n	8008236 <__exponent+0x5e>
 8008220:	f10d 0309 	add.w	r3, sp, #9
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	42ac      	cmp	r4, r5
 8008228:	bf88      	it	hi
 800822a:	2300      	movhi	r3, #0
 800822c:	3302      	adds	r3, #2
 800822e:	4403      	add	r3, r0
 8008230:	1a18      	subs	r0, r3, r0
 8008232:	b003      	add	sp, #12
 8008234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008236:	f813 6b01 	ldrb.w	r6, [r3], #1
 800823a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800823e:	e7ed      	b.n	800821c <__exponent+0x44>
 8008240:	2330      	movs	r3, #48	@ 0x30
 8008242:	3130      	adds	r1, #48	@ 0x30
 8008244:	7083      	strb	r3, [r0, #2]
 8008246:	70c1      	strb	r1, [r0, #3]
 8008248:	1d03      	adds	r3, r0, #4
 800824a:	e7f1      	b.n	8008230 <__exponent+0x58>

0800824c <_printf_float>:
 800824c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008250:	b091      	sub	sp, #68	@ 0x44
 8008252:	460c      	mov	r4, r1
 8008254:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008258:	4616      	mov	r6, r2
 800825a:	461f      	mov	r7, r3
 800825c:	4605      	mov	r5, r0
 800825e:	f000 ffe9 	bl	8009234 <_localeconv_r>
 8008262:	6803      	ldr	r3, [r0, #0]
 8008264:	9308      	str	r3, [sp, #32]
 8008266:	4618      	mov	r0, r3
 8008268:	f7f7 ffda 	bl	8000220 <strlen>
 800826c:	2300      	movs	r3, #0
 800826e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008270:	f8d8 3000 	ldr.w	r3, [r8]
 8008274:	9009      	str	r0, [sp, #36]	@ 0x24
 8008276:	3307      	adds	r3, #7
 8008278:	f023 0307 	bic.w	r3, r3, #7
 800827c:	f103 0208 	add.w	r2, r3, #8
 8008280:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008284:	f8d4 b000 	ldr.w	fp, [r4]
 8008288:	f8c8 2000 	str.w	r2, [r8]
 800828c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008290:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008294:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008296:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800829a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800829e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082a2:	4b9d      	ldr	r3, [pc, #628]	@ (8008518 <_printf_float+0x2cc>)
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082a8:	f7f8 fc18 	bl	8000adc <__aeabi_dcmpun>
 80082ac:	bb70      	cbnz	r0, 800830c <_printf_float+0xc0>
 80082ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082b2:	4b99      	ldr	r3, [pc, #612]	@ (8008518 <_printf_float+0x2cc>)
 80082b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082b8:	f7f8 fbf2 	bl	8000aa0 <__aeabi_dcmple>
 80082bc:	bb30      	cbnz	r0, 800830c <_printf_float+0xc0>
 80082be:	2200      	movs	r2, #0
 80082c0:	2300      	movs	r3, #0
 80082c2:	4640      	mov	r0, r8
 80082c4:	4649      	mov	r1, r9
 80082c6:	f7f8 fbe1 	bl	8000a8c <__aeabi_dcmplt>
 80082ca:	b110      	cbz	r0, 80082d2 <_printf_float+0x86>
 80082cc:	232d      	movs	r3, #45	@ 0x2d
 80082ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082d2:	4a92      	ldr	r2, [pc, #584]	@ (800851c <_printf_float+0x2d0>)
 80082d4:	4b92      	ldr	r3, [pc, #584]	@ (8008520 <_printf_float+0x2d4>)
 80082d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082da:	bf8c      	ite	hi
 80082dc:	4690      	movhi	r8, r2
 80082de:	4698      	movls	r8, r3
 80082e0:	2303      	movs	r3, #3
 80082e2:	6123      	str	r3, [r4, #16]
 80082e4:	f02b 0304 	bic.w	r3, fp, #4
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	f04f 0900 	mov.w	r9, #0
 80082ee:	9700      	str	r7, [sp, #0]
 80082f0:	4633      	mov	r3, r6
 80082f2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80082f4:	4621      	mov	r1, r4
 80082f6:	4628      	mov	r0, r5
 80082f8:	f000 f9d4 	bl	80086a4 <_printf_common>
 80082fc:	3001      	adds	r0, #1
 80082fe:	f040 808f 	bne.w	8008420 <_printf_float+0x1d4>
 8008302:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008306:	b011      	add	sp, #68	@ 0x44
 8008308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830c:	4642      	mov	r2, r8
 800830e:	464b      	mov	r3, r9
 8008310:	4640      	mov	r0, r8
 8008312:	4649      	mov	r1, r9
 8008314:	f7f8 fbe2 	bl	8000adc <__aeabi_dcmpun>
 8008318:	b140      	cbz	r0, 800832c <_printf_float+0xe0>
 800831a:	464b      	mov	r3, r9
 800831c:	2b00      	cmp	r3, #0
 800831e:	bfbc      	itt	lt
 8008320:	232d      	movlt	r3, #45	@ 0x2d
 8008322:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008326:	4a7f      	ldr	r2, [pc, #508]	@ (8008524 <_printf_float+0x2d8>)
 8008328:	4b7f      	ldr	r3, [pc, #508]	@ (8008528 <_printf_float+0x2dc>)
 800832a:	e7d4      	b.n	80082d6 <_printf_float+0x8a>
 800832c:	6863      	ldr	r3, [r4, #4]
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008334:	d13f      	bne.n	80083b6 <_printf_float+0x16a>
 8008336:	2306      	movs	r3, #6
 8008338:	6063      	str	r3, [r4, #4]
 800833a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800833e:	2200      	movs	r2, #0
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	9206      	str	r2, [sp, #24]
 8008344:	aa0e      	add	r2, sp, #56	@ 0x38
 8008346:	e9cd a204 	strd	sl, r2, [sp, #16]
 800834a:	aa0d      	add	r2, sp, #52	@ 0x34
 800834c:	9203      	str	r2, [sp, #12]
 800834e:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008352:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008356:	6863      	ldr	r3, [r4, #4]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	4642      	mov	r2, r8
 800835c:	464b      	mov	r3, r9
 800835e:	4628      	mov	r0, r5
 8008360:	910a      	str	r1, [sp, #40]	@ 0x28
 8008362:	f7ff fed5 	bl	8008110 <__cvt>
 8008366:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008368:	2947      	cmp	r1, #71	@ 0x47
 800836a:	4680      	mov	r8, r0
 800836c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800836e:	d128      	bne.n	80083c2 <_printf_float+0x176>
 8008370:	1cc8      	adds	r0, r1, #3
 8008372:	db02      	blt.n	800837a <_printf_float+0x12e>
 8008374:	6863      	ldr	r3, [r4, #4]
 8008376:	4299      	cmp	r1, r3
 8008378:	dd40      	ble.n	80083fc <_printf_float+0x1b0>
 800837a:	f1aa 0a02 	sub.w	sl, sl, #2
 800837e:	fa5f fa8a 	uxtb.w	sl, sl
 8008382:	3901      	subs	r1, #1
 8008384:	4652      	mov	r2, sl
 8008386:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800838a:	910d      	str	r1, [sp, #52]	@ 0x34
 800838c:	f7ff ff24 	bl	80081d8 <__exponent>
 8008390:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008392:	1813      	adds	r3, r2, r0
 8008394:	2a01      	cmp	r2, #1
 8008396:	4681      	mov	r9, r0
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	dc02      	bgt.n	80083a2 <_printf_float+0x156>
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	07d2      	lsls	r2, r2, #31
 80083a0:	d501      	bpl.n	80083a6 <_printf_float+0x15a>
 80083a2:	3301      	adds	r3, #1
 80083a4:	6123      	str	r3, [r4, #16]
 80083a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d09f      	beq.n	80082ee <_printf_float+0xa2>
 80083ae:	232d      	movs	r3, #45	@ 0x2d
 80083b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083b4:	e79b      	b.n	80082ee <_printf_float+0xa2>
 80083b6:	2947      	cmp	r1, #71	@ 0x47
 80083b8:	d1bf      	bne.n	800833a <_printf_float+0xee>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1bd      	bne.n	800833a <_printf_float+0xee>
 80083be:	2301      	movs	r3, #1
 80083c0:	e7ba      	b.n	8008338 <_printf_float+0xec>
 80083c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083c6:	d9dc      	bls.n	8008382 <_printf_float+0x136>
 80083c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80083cc:	d118      	bne.n	8008400 <_printf_float+0x1b4>
 80083ce:	2900      	cmp	r1, #0
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	dd0b      	ble.n	80083ec <_printf_float+0x1a0>
 80083d4:	6121      	str	r1, [r4, #16]
 80083d6:	b913      	cbnz	r3, 80083de <_printf_float+0x192>
 80083d8:	6822      	ldr	r2, [r4, #0]
 80083da:	07d0      	lsls	r0, r2, #31
 80083dc:	d502      	bpl.n	80083e4 <_printf_float+0x198>
 80083de:	3301      	adds	r3, #1
 80083e0:	440b      	add	r3, r1
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	e7dc      	b.n	80083a6 <_printf_float+0x15a>
 80083ec:	b913      	cbnz	r3, 80083f4 <_printf_float+0x1a8>
 80083ee:	6822      	ldr	r2, [r4, #0]
 80083f0:	07d2      	lsls	r2, r2, #31
 80083f2:	d501      	bpl.n	80083f8 <_printf_float+0x1ac>
 80083f4:	3302      	adds	r3, #2
 80083f6:	e7f4      	b.n	80083e2 <_printf_float+0x196>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e7f2      	b.n	80083e2 <_printf_float+0x196>
 80083fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008402:	4299      	cmp	r1, r3
 8008404:	db05      	blt.n	8008412 <_printf_float+0x1c6>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	6121      	str	r1, [r4, #16]
 800840a:	07d8      	lsls	r0, r3, #31
 800840c:	d5ea      	bpl.n	80083e4 <_printf_float+0x198>
 800840e:	1c4b      	adds	r3, r1, #1
 8008410:	e7e7      	b.n	80083e2 <_printf_float+0x196>
 8008412:	2900      	cmp	r1, #0
 8008414:	bfd4      	ite	le
 8008416:	f1c1 0202 	rsble	r2, r1, #2
 800841a:	2201      	movgt	r2, #1
 800841c:	4413      	add	r3, r2
 800841e:	e7e0      	b.n	80083e2 <_printf_float+0x196>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	055a      	lsls	r2, r3, #21
 8008424:	d407      	bmi.n	8008436 <_printf_float+0x1ea>
 8008426:	6923      	ldr	r3, [r4, #16]
 8008428:	4642      	mov	r2, r8
 800842a:	4631      	mov	r1, r6
 800842c:	4628      	mov	r0, r5
 800842e:	47b8      	blx	r7
 8008430:	3001      	adds	r0, #1
 8008432:	d12b      	bne.n	800848c <_printf_float+0x240>
 8008434:	e765      	b.n	8008302 <_printf_float+0xb6>
 8008436:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800843a:	f240 80dd 	bls.w	80085f8 <_printf_float+0x3ac>
 800843e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008442:	2200      	movs	r2, #0
 8008444:	2300      	movs	r3, #0
 8008446:	f7f8 fb17 	bl	8000a78 <__aeabi_dcmpeq>
 800844a:	2800      	cmp	r0, #0
 800844c:	d033      	beq.n	80084b6 <_printf_float+0x26a>
 800844e:	4a37      	ldr	r2, [pc, #220]	@ (800852c <_printf_float+0x2e0>)
 8008450:	2301      	movs	r3, #1
 8008452:	4631      	mov	r1, r6
 8008454:	4628      	mov	r0, r5
 8008456:	47b8      	blx	r7
 8008458:	3001      	adds	r0, #1
 800845a:	f43f af52 	beq.w	8008302 <_printf_float+0xb6>
 800845e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008462:	4543      	cmp	r3, r8
 8008464:	db02      	blt.n	800846c <_printf_float+0x220>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	07d8      	lsls	r0, r3, #31
 800846a:	d50f      	bpl.n	800848c <_printf_float+0x240>
 800846c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008470:	4631      	mov	r1, r6
 8008472:	4628      	mov	r0, r5
 8008474:	47b8      	blx	r7
 8008476:	3001      	adds	r0, #1
 8008478:	f43f af43 	beq.w	8008302 <_printf_float+0xb6>
 800847c:	f04f 0900 	mov.w	r9, #0
 8008480:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008484:	f104 0a1a 	add.w	sl, r4, #26
 8008488:	45c8      	cmp	r8, r9
 800848a:	dc09      	bgt.n	80084a0 <_printf_float+0x254>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	079b      	lsls	r3, r3, #30
 8008490:	f100 8103 	bmi.w	800869a <_printf_float+0x44e>
 8008494:	68e0      	ldr	r0, [r4, #12]
 8008496:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008498:	4298      	cmp	r0, r3
 800849a:	bfb8      	it	lt
 800849c:	4618      	movlt	r0, r3
 800849e:	e732      	b.n	8008306 <_printf_float+0xba>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4652      	mov	r2, sl
 80084a4:	4631      	mov	r1, r6
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	f43f af29 	beq.w	8008302 <_printf_float+0xb6>
 80084b0:	f109 0901 	add.w	r9, r9, #1
 80084b4:	e7e8      	b.n	8008488 <_printf_float+0x23c>
 80084b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dc39      	bgt.n	8008530 <_printf_float+0x2e4>
 80084bc:	4a1b      	ldr	r2, [pc, #108]	@ (800852c <_printf_float+0x2e0>)
 80084be:	2301      	movs	r3, #1
 80084c0:	4631      	mov	r1, r6
 80084c2:	4628      	mov	r0, r5
 80084c4:	47b8      	blx	r7
 80084c6:	3001      	adds	r0, #1
 80084c8:	f43f af1b 	beq.w	8008302 <_printf_float+0xb6>
 80084cc:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80084d0:	ea59 0303 	orrs.w	r3, r9, r3
 80084d4:	d102      	bne.n	80084dc <_printf_float+0x290>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	07d9      	lsls	r1, r3, #31
 80084da:	d5d7      	bpl.n	800848c <_printf_float+0x240>
 80084dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80084e0:	4631      	mov	r1, r6
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	f43f af0b 	beq.w	8008302 <_printf_float+0xb6>
 80084ec:	f04f 0a00 	mov.w	sl, #0
 80084f0:	f104 0b1a 	add.w	fp, r4, #26
 80084f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084f6:	425b      	negs	r3, r3
 80084f8:	4553      	cmp	r3, sl
 80084fa:	dc01      	bgt.n	8008500 <_printf_float+0x2b4>
 80084fc:	464b      	mov	r3, r9
 80084fe:	e793      	b.n	8008428 <_printf_float+0x1dc>
 8008500:	2301      	movs	r3, #1
 8008502:	465a      	mov	r2, fp
 8008504:	4631      	mov	r1, r6
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	f43f aef9 	beq.w	8008302 <_printf_float+0xb6>
 8008510:	f10a 0a01 	add.w	sl, sl, #1
 8008514:	e7ee      	b.n	80084f4 <_printf_float+0x2a8>
 8008516:	bf00      	nop
 8008518:	7fefffff 	.word	0x7fefffff
 800851c:	0800ce3c 	.word	0x0800ce3c
 8008520:	0800ce38 	.word	0x0800ce38
 8008524:	0800ce44 	.word	0x0800ce44
 8008528:	0800ce40 	.word	0x0800ce40
 800852c:	0800ce48 	.word	0x0800ce48
 8008530:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008532:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008536:	4553      	cmp	r3, sl
 8008538:	bfa8      	it	ge
 800853a:	4653      	movge	r3, sl
 800853c:	2b00      	cmp	r3, #0
 800853e:	4699      	mov	r9, r3
 8008540:	dc36      	bgt.n	80085b0 <_printf_float+0x364>
 8008542:	f04f 0b00 	mov.w	fp, #0
 8008546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800854a:	f104 021a 	add.w	r2, r4, #26
 800854e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008550:	930a      	str	r3, [sp, #40]	@ 0x28
 8008552:	eba3 0309 	sub.w	r3, r3, r9
 8008556:	455b      	cmp	r3, fp
 8008558:	dc31      	bgt.n	80085be <_printf_float+0x372>
 800855a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800855c:	459a      	cmp	sl, r3
 800855e:	dc3a      	bgt.n	80085d6 <_printf_float+0x38a>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	07da      	lsls	r2, r3, #31
 8008564:	d437      	bmi.n	80085d6 <_printf_float+0x38a>
 8008566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008568:	ebaa 0903 	sub.w	r9, sl, r3
 800856c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800856e:	ebaa 0303 	sub.w	r3, sl, r3
 8008572:	4599      	cmp	r9, r3
 8008574:	bfa8      	it	ge
 8008576:	4699      	movge	r9, r3
 8008578:	f1b9 0f00 	cmp.w	r9, #0
 800857c:	dc33      	bgt.n	80085e6 <_printf_float+0x39a>
 800857e:	f04f 0800 	mov.w	r8, #0
 8008582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008586:	f104 0b1a 	add.w	fp, r4, #26
 800858a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800858c:	ebaa 0303 	sub.w	r3, sl, r3
 8008590:	eba3 0309 	sub.w	r3, r3, r9
 8008594:	4543      	cmp	r3, r8
 8008596:	f77f af79 	ble.w	800848c <_printf_float+0x240>
 800859a:	2301      	movs	r3, #1
 800859c:	465a      	mov	r2, fp
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f aeac 	beq.w	8008302 <_printf_float+0xb6>
 80085aa:	f108 0801 	add.w	r8, r8, #1
 80085ae:	e7ec      	b.n	800858a <_printf_float+0x33e>
 80085b0:	4642      	mov	r2, r8
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	d1c2      	bne.n	8008542 <_printf_float+0x2f6>
 80085bc:	e6a1      	b.n	8008302 <_printf_float+0xb6>
 80085be:	2301      	movs	r3, #1
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f ae9a 	beq.w	8008302 <_printf_float+0xb6>
 80085ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085d0:	f10b 0b01 	add.w	fp, fp, #1
 80085d4:	e7bb      	b.n	800854e <_printf_float+0x302>
 80085d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80085da:	4631      	mov	r1, r6
 80085dc:	4628      	mov	r0, r5
 80085de:	47b8      	blx	r7
 80085e0:	3001      	adds	r0, #1
 80085e2:	d1c0      	bne.n	8008566 <_printf_float+0x31a>
 80085e4:	e68d      	b.n	8008302 <_printf_float+0xb6>
 80085e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085e8:	464b      	mov	r3, r9
 80085ea:	4442      	add	r2, r8
 80085ec:	4631      	mov	r1, r6
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	d1c3      	bne.n	800857e <_printf_float+0x332>
 80085f6:	e684      	b.n	8008302 <_printf_float+0xb6>
 80085f8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80085fc:	f1ba 0f01 	cmp.w	sl, #1
 8008600:	dc01      	bgt.n	8008606 <_printf_float+0x3ba>
 8008602:	07db      	lsls	r3, r3, #31
 8008604:	d536      	bpl.n	8008674 <_printf_float+0x428>
 8008606:	2301      	movs	r3, #1
 8008608:	4642      	mov	r2, r8
 800860a:	4631      	mov	r1, r6
 800860c:	4628      	mov	r0, r5
 800860e:	47b8      	blx	r7
 8008610:	3001      	adds	r0, #1
 8008612:	f43f ae76 	beq.w	8008302 <_printf_float+0xb6>
 8008616:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	47b8      	blx	r7
 8008620:	3001      	adds	r0, #1
 8008622:	f43f ae6e 	beq.w	8008302 <_printf_float+0xb6>
 8008626:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800862a:	2200      	movs	r2, #0
 800862c:	2300      	movs	r3, #0
 800862e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008632:	f7f8 fa21 	bl	8000a78 <__aeabi_dcmpeq>
 8008636:	b9c0      	cbnz	r0, 800866a <_printf_float+0x41e>
 8008638:	4653      	mov	r3, sl
 800863a:	f108 0201 	add.w	r2, r8, #1
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	d10c      	bne.n	8008662 <_printf_float+0x416>
 8008648:	e65b      	b.n	8008302 <_printf_float+0xb6>
 800864a:	2301      	movs	r3, #1
 800864c:	465a      	mov	r2, fp
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	47b8      	blx	r7
 8008654:	3001      	adds	r0, #1
 8008656:	f43f ae54 	beq.w	8008302 <_printf_float+0xb6>
 800865a:	f108 0801 	add.w	r8, r8, #1
 800865e:	45d0      	cmp	r8, sl
 8008660:	dbf3      	blt.n	800864a <_printf_float+0x3fe>
 8008662:	464b      	mov	r3, r9
 8008664:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008668:	e6df      	b.n	800842a <_printf_float+0x1de>
 800866a:	f04f 0800 	mov.w	r8, #0
 800866e:	f104 0b1a 	add.w	fp, r4, #26
 8008672:	e7f4      	b.n	800865e <_printf_float+0x412>
 8008674:	2301      	movs	r3, #1
 8008676:	4642      	mov	r2, r8
 8008678:	e7e1      	b.n	800863e <_printf_float+0x3f2>
 800867a:	2301      	movs	r3, #1
 800867c:	464a      	mov	r2, r9
 800867e:	4631      	mov	r1, r6
 8008680:	4628      	mov	r0, r5
 8008682:	47b8      	blx	r7
 8008684:	3001      	adds	r0, #1
 8008686:	f43f ae3c 	beq.w	8008302 <_printf_float+0xb6>
 800868a:	f108 0801 	add.w	r8, r8, #1
 800868e:	68e3      	ldr	r3, [r4, #12]
 8008690:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008692:	1a5b      	subs	r3, r3, r1
 8008694:	4543      	cmp	r3, r8
 8008696:	dcf0      	bgt.n	800867a <_printf_float+0x42e>
 8008698:	e6fc      	b.n	8008494 <_printf_float+0x248>
 800869a:	f04f 0800 	mov.w	r8, #0
 800869e:	f104 0919 	add.w	r9, r4, #25
 80086a2:	e7f4      	b.n	800868e <_printf_float+0x442>

080086a4 <_printf_common>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	4616      	mov	r6, r2
 80086aa:	4698      	mov	r8, r3
 80086ac:	688a      	ldr	r2, [r1, #8]
 80086ae:	690b      	ldr	r3, [r1, #16]
 80086b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086b4:	4293      	cmp	r3, r2
 80086b6:	bfb8      	it	lt
 80086b8:	4613      	movlt	r3, r2
 80086ba:	6033      	str	r3, [r6, #0]
 80086bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086c0:	4607      	mov	r7, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	b10a      	cbz	r2, 80086ca <_printf_common+0x26>
 80086c6:	3301      	adds	r3, #1
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	0699      	lsls	r1, r3, #26
 80086ce:	bf42      	ittt	mi
 80086d0:	6833      	ldrmi	r3, [r6, #0]
 80086d2:	3302      	addmi	r3, #2
 80086d4:	6033      	strmi	r3, [r6, #0]
 80086d6:	6825      	ldr	r5, [r4, #0]
 80086d8:	f015 0506 	ands.w	r5, r5, #6
 80086dc:	d106      	bne.n	80086ec <_printf_common+0x48>
 80086de:	f104 0a19 	add.w	sl, r4, #25
 80086e2:	68e3      	ldr	r3, [r4, #12]
 80086e4:	6832      	ldr	r2, [r6, #0]
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	42ab      	cmp	r3, r5
 80086ea:	dc26      	bgt.n	800873a <_printf_common+0x96>
 80086ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	3b00      	subs	r3, #0
 80086f4:	bf18      	it	ne
 80086f6:	2301      	movne	r3, #1
 80086f8:	0692      	lsls	r2, r2, #26
 80086fa:	d42b      	bmi.n	8008754 <_printf_common+0xb0>
 80086fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008700:	4641      	mov	r1, r8
 8008702:	4638      	mov	r0, r7
 8008704:	47c8      	blx	r9
 8008706:	3001      	adds	r0, #1
 8008708:	d01e      	beq.n	8008748 <_printf_common+0xa4>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	6922      	ldr	r2, [r4, #16]
 800870e:	f003 0306 	and.w	r3, r3, #6
 8008712:	2b04      	cmp	r3, #4
 8008714:	bf02      	ittt	eq
 8008716:	68e5      	ldreq	r5, [r4, #12]
 8008718:	6833      	ldreq	r3, [r6, #0]
 800871a:	1aed      	subeq	r5, r5, r3
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	bf0c      	ite	eq
 8008720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008724:	2500      	movne	r5, #0
 8008726:	4293      	cmp	r3, r2
 8008728:	bfc4      	itt	gt
 800872a:	1a9b      	subgt	r3, r3, r2
 800872c:	18ed      	addgt	r5, r5, r3
 800872e:	2600      	movs	r6, #0
 8008730:	341a      	adds	r4, #26
 8008732:	42b5      	cmp	r5, r6
 8008734:	d11a      	bne.n	800876c <_printf_common+0xc8>
 8008736:	2000      	movs	r0, #0
 8008738:	e008      	b.n	800874c <_printf_common+0xa8>
 800873a:	2301      	movs	r3, #1
 800873c:	4652      	mov	r2, sl
 800873e:	4641      	mov	r1, r8
 8008740:	4638      	mov	r0, r7
 8008742:	47c8      	blx	r9
 8008744:	3001      	adds	r0, #1
 8008746:	d103      	bne.n	8008750 <_printf_common+0xac>
 8008748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008750:	3501      	adds	r5, #1
 8008752:	e7c6      	b.n	80086e2 <_printf_common+0x3e>
 8008754:	18e1      	adds	r1, r4, r3
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	2030      	movs	r0, #48	@ 0x30
 800875a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800875e:	4422      	add	r2, r4
 8008760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008768:	3302      	adds	r3, #2
 800876a:	e7c7      	b.n	80086fc <_printf_common+0x58>
 800876c:	2301      	movs	r3, #1
 800876e:	4622      	mov	r2, r4
 8008770:	4641      	mov	r1, r8
 8008772:	4638      	mov	r0, r7
 8008774:	47c8      	blx	r9
 8008776:	3001      	adds	r0, #1
 8008778:	d0e6      	beq.n	8008748 <_printf_common+0xa4>
 800877a:	3601      	adds	r6, #1
 800877c:	e7d9      	b.n	8008732 <_printf_common+0x8e>
	...

08008780 <_printf_i>:
 8008780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	7e0f      	ldrb	r7, [r1, #24]
 8008786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008788:	2f78      	cmp	r7, #120	@ 0x78
 800878a:	4691      	mov	r9, r2
 800878c:	4680      	mov	r8, r0
 800878e:	460c      	mov	r4, r1
 8008790:	469a      	mov	sl, r3
 8008792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008796:	d807      	bhi.n	80087a8 <_printf_i+0x28>
 8008798:	2f62      	cmp	r7, #98	@ 0x62
 800879a:	d80a      	bhi.n	80087b2 <_printf_i+0x32>
 800879c:	2f00      	cmp	r7, #0
 800879e:	f000 80d1 	beq.w	8008944 <_printf_i+0x1c4>
 80087a2:	2f58      	cmp	r7, #88	@ 0x58
 80087a4:	f000 80b8 	beq.w	8008918 <_printf_i+0x198>
 80087a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087b0:	e03a      	b.n	8008828 <_printf_i+0xa8>
 80087b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087b6:	2b15      	cmp	r3, #21
 80087b8:	d8f6      	bhi.n	80087a8 <_printf_i+0x28>
 80087ba:	a101      	add	r1, pc, #4	@ (adr r1, 80087c0 <_printf_i+0x40>)
 80087bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087c0:	08008819 	.word	0x08008819
 80087c4:	0800882d 	.word	0x0800882d
 80087c8:	080087a9 	.word	0x080087a9
 80087cc:	080087a9 	.word	0x080087a9
 80087d0:	080087a9 	.word	0x080087a9
 80087d4:	080087a9 	.word	0x080087a9
 80087d8:	0800882d 	.word	0x0800882d
 80087dc:	080087a9 	.word	0x080087a9
 80087e0:	080087a9 	.word	0x080087a9
 80087e4:	080087a9 	.word	0x080087a9
 80087e8:	080087a9 	.word	0x080087a9
 80087ec:	0800892b 	.word	0x0800892b
 80087f0:	08008857 	.word	0x08008857
 80087f4:	080088e5 	.word	0x080088e5
 80087f8:	080087a9 	.word	0x080087a9
 80087fc:	080087a9 	.word	0x080087a9
 8008800:	0800894d 	.word	0x0800894d
 8008804:	080087a9 	.word	0x080087a9
 8008808:	08008857 	.word	0x08008857
 800880c:	080087a9 	.word	0x080087a9
 8008810:	080087a9 	.word	0x080087a9
 8008814:	080088ed 	.word	0x080088ed
 8008818:	6833      	ldr	r3, [r6, #0]
 800881a:	1d1a      	adds	r2, r3, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6032      	str	r2, [r6, #0]
 8008820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008828:	2301      	movs	r3, #1
 800882a:	e09c      	b.n	8008966 <_printf_i+0x1e6>
 800882c:	6833      	ldr	r3, [r6, #0]
 800882e:	6820      	ldr	r0, [r4, #0]
 8008830:	1d19      	adds	r1, r3, #4
 8008832:	6031      	str	r1, [r6, #0]
 8008834:	0606      	lsls	r6, r0, #24
 8008836:	d501      	bpl.n	800883c <_printf_i+0xbc>
 8008838:	681d      	ldr	r5, [r3, #0]
 800883a:	e003      	b.n	8008844 <_printf_i+0xc4>
 800883c:	0645      	lsls	r5, r0, #25
 800883e:	d5fb      	bpl.n	8008838 <_printf_i+0xb8>
 8008840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008844:	2d00      	cmp	r5, #0
 8008846:	da03      	bge.n	8008850 <_printf_i+0xd0>
 8008848:	232d      	movs	r3, #45	@ 0x2d
 800884a:	426d      	negs	r5, r5
 800884c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008850:	4858      	ldr	r0, [pc, #352]	@ (80089b4 <_printf_i+0x234>)
 8008852:	230a      	movs	r3, #10
 8008854:	e011      	b.n	800887a <_printf_i+0xfa>
 8008856:	6821      	ldr	r1, [r4, #0]
 8008858:	6833      	ldr	r3, [r6, #0]
 800885a:	0608      	lsls	r0, r1, #24
 800885c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008860:	d402      	bmi.n	8008868 <_printf_i+0xe8>
 8008862:	0649      	lsls	r1, r1, #25
 8008864:	bf48      	it	mi
 8008866:	b2ad      	uxthmi	r5, r5
 8008868:	2f6f      	cmp	r7, #111	@ 0x6f
 800886a:	4852      	ldr	r0, [pc, #328]	@ (80089b4 <_printf_i+0x234>)
 800886c:	6033      	str	r3, [r6, #0]
 800886e:	bf14      	ite	ne
 8008870:	230a      	movne	r3, #10
 8008872:	2308      	moveq	r3, #8
 8008874:	2100      	movs	r1, #0
 8008876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800887a:	6866      	ldr	r6, [r4, #4]
 800887c:	60a6      	str	r6, [r4, #8]
 800887e:	2e00      	cmp	r6, #0
 8008880:	db05      	blt.n	800888e <_printf_i+0x10e>
 8008882:	6821      	ldr	r1, [r4, #0]
 8008884:	432e      	orrs	r6, r5
 8008886:	f021 0104 	bic.w	r1, r1, #4
 800888a:	6021      	str	r1, [r4, #0]
 800888c:	d04b      	beq.n	8008926 <_printf_i+0x1a6>
 800888e:	4616      	mov	r6, r2
 8008890:	fbb5 f1f3 	udiv	r1, r5, r3
 8008894:	fb03 5711 	mls	r7, r3, r1, r5
 8008898:	5dc7      	ldrb	r7, [r0, r7]
 800889a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800889e:	462f      	mov	r7, r5
 80088a0:	42bb      	cmp	r3, r7
 80088a2:	460d      	mov	r5, r1
 80088a4:	d9f4      	bls.n	8008890 <_printf_i+0x110>
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d10b      	bne.n	80088c2 <_printf_i+0x142>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	07df      	lsls	r7, r3, #31
 80088ae:	d508      	bpl.n	80088c2 <_printf_i+0x142>
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	6861      	ldr	r1, [r4, #4]
 80088b4:	4299      	cmp	r1, r3
 80088b6:	bfde      	ittt	le
 80088b8:	2330      	movle	r3, #48	@ 0x30
 80088ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088be:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80088c2:	1b92      	subs	r2, r2, r6
 80088c4:	6122      	str	r2, [r4, #16]
 80088c6:	f8cd a000 	str.w	sl, [sp]
 80088ca:	464b      	mov	r3, r9
 80088cc:	aa03      	add	r2, sp, #12
 80088ce:	4621      	mov	r1, r4
 80088d0:	4640      	mov	r0, r8
 80088d2:	f7ff fee7 	bl	80086a4 <_printf_common>
 80088d6:	3001      	adds	r0, #1
 80088d8:	d14a      	bne.n	8008970 <_printf_i+0x1f0>
 80088da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088de:	b004      	add	sp, #16
 80088e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	f043 0320 	orr.w	r3, r3, #32
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	4832      	ldr	r0, [pc, #200]	@ (80089b8 <_printf_i+0x238>)
 80088ee:	2778      	movs	r7, #120	@ 0x78
 80088f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	6831      	ldr	r1, [r6, #0]
 80088f8:	061f      	lsls	r7, r3, #24
 80088fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80088fe:	d402      	bmi.n	8008906 <_printf_i+0x186>
 8008900:	065f      	lsls	r7, r3, #25
 8008902:	bf48      	it	mi
 8008904:	b2ad      	uxthmi	r5, r5
 8008906:	6031      	str	r1, [r6, #0]
 8008908:	07d9      	lsls	r1, r3, #31
 800890a:	bf44      	itt	mi
 800890c:	f043 0320 	orrmi.w	r3, r3, #32
 8008910:	6023      	strmi	r3, [r4, #0]
 8008912:	b11d      	cbz	r5, 800891c <_printf_i+0x19c>
 8008914:	2310      	movs	r3, #16
 8008916:	e7ad      	b.n	8008874 <_printf_i+0xf4>
 8008918:	4826      	ldr	r0, [pc, #152]	@ (80089b4 <_printf_i+0x234>)
 800891a:	e7e9      	b.n	80088f0 <_printf_i+0x170>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	f023 0320 	bic.w	r3, r3, #32
 8008922:	6023      	str	r3, [r4, #0]
 8008924:	e7f6      	b.n	8008914 <_printf_i+0x194>
 8008926:	4616      	mov	r6, r2
 8008928:	e7bd      	b.n	80088a6 <_printf_i+0x126>
 800892a:	6833      	ldr	r3, [r6, #0]
 800892c:	6825      	ldr	r5, [r4, #0]
 800892e:	6961      	ldr	r1, [r4, #20]
 8008930:	1d18      	adds	r0, r3, #4
 8008932:	6030      	str	r0, [r6, #0]
 8008934:	062e      	lsls	r6, r5, #24
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	d501      	bpl.n	800893e <_printf_i+0x1be>
 800893a:	6019      	str	r1, [r3, #0]
 800893c:	e002      	b.n	8008944 <_printf_i+0x1c4>
 800893e:	0668      	lsls	r0, r5, #25
 8008940:	d5fb      	bpl.n	800893a <_printf_i+0x1ba>
 8008942:	8019      	strh	r1, [r3, #0]
 8008944:	2300      	movs	r3, #0
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	4616      	mov	r6, r2
 800894a:	e7bc      	b.n	80088c6 <_printf_i+0x146>
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	1d1a      	adds	r2, r3, #4
 8008950:	6032      	str	r2, [r6, #0]
 8008952:	681e      	ldr	r6, [r3, #0]
 8008954:	6862      	ldr	r2, [r4, #4]
 8008956:	2100      	movs	r1, #0
 8008958:	4630      	mov	r0, r6
 800895a:	f7f7 fc11 	bl	8000180 <memchr>
 800895e:	b108      	cbz	r0, 8008964 <_printf_i+0x1e4>
 8008960:	1b80      	subs	r0, r0, r6
 8008962:	6060      	str	r0, [r4, #4]
 8008964:	6863      	ldr	r3, [r4, #4]
 8008966:	6123      	str	r3, [r4, #16]
 8008968:	2300      	movs	r3, #0
 800896a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800896e:	e7aa      	b.n	80088c6 <_printf_i+0x146>
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	4632      	mov	r2, r6
 8008974:	4649      	mov	r1, r9
 8008976:	4640      	mov	r0, r8
 8008978:	47d0      	blx	sl
 800897a:	3001      	adds	r0, #1
 800897c:	d0ad      	beq.n	80088da <_printf_i+0x15a>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	079b      	lsls	r3, r3, #30
 8008982:	d413      	bmi.n	80089ac <_printf_i+0x22c>
 8008984:	68e0      	ldr	r0, [r4, #12]
 8008986:	9b03      	ldr	r3, [sp, #12]
 8008988:	4298      	cmp	r0, r3
 800898a:	bfb8      	it	lt
 800898c:	4618      	movlt	r0, r3
 800898e:	e7a6      	b.n	80088de <_printf_i+0x15e>
 8008990:	2301      	movs	r3, #1
 8008992:	4632      	mov	r2, r6
 8008994:	4649      	mov	r1, r9
 8008996:	4640      	mov	r0, r8
 8008998:	47d0      	blx	sl
 800899a:	3001      	adds	r0, #1
 800899c:	d09d      	beq.n	80088da <_printf_i+0x15a>
 800899e:	3501      	adds	r5, #1
 80089a0:	68e3      	ldr	r3, [r4, #12]
 80089a2:	9903      	ldr	r1, [sp, #12]
 80089a4:	1a5b      	subs	r3, r3, r1
 80089a6:	42ab      	cmp	r3, r5
 80089a8:	dcf2      	bgt.n	8008990 <_printf_i+0x210>
 80089aa:	e7eb      	b.n	8008984 <_printf_i+0x204>
 80089ac:	2500      	movs	r5, #0
 80089ae:	f104 0619 	add.w	r6, r4, #25
 80089b2:	e7f5      	b.n	80089a0 <_printf_i+0x220>
 80089b4:	0800ce4a 	.word	0x0800ce4a
 80089b8:	0800ce5b 	.word	0x0800ce5b

080089bc <_scanf_float>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	b087      	sub	sp, #28
 80089c2:	4691      	mov	r9, r2
 80089c4:	9303      	str	r3, [sp, #12]
 80089c6:	688b      	ldr	r3, [r1, #8]
 80089c8:	1e5a      	subs	r2, r3, #1
 80089ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80089ce:	bf81      	itttt	hi
 80089d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80089d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80089d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80089dc:	608b      	strhi	r3, [r1, #8]
 80089de:	680b      	ldr	r3, [r1, #0]
 80089e0:	460a      	mov	r2, r1
 80089e2:	f04f 0500 	mov.w	r5, #0
 80089e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80089ea:	f842 3b1c 	str.w	r3, [r2], #28
 80089ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089f2:	4680      	mov	r8, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	bf98      	it	ls
 80089f8:	f04f 0b00 	movls.w	fp, #0
 80089fc:	9201      	str	r2, [sp, #4]
 80089fe:	4616      	mov	r6, r2
 8008a00:	46aa      	mov	sl, r5
 8008a02:	462f      	mov	r7, r5
 8008a04:	9502      	str	r5, [sp, #8]
 8008a06:	68a2      	ldr	r2, [r4, #8]
 8008a08:	b15a      	cbz	r2, 8008a22 <_scanf_float+0x66>
 8008a0a:	f8d9 3000 	ldr.w	r3, [r9]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a12:	d863      	bhi.n	8008adc <_scanf_float+0x120>
 8008a14:	2b40      	cmp	r3, #64	@ 0x40
 8008a16:	d83b      	bhi.n	8008a90 <_scanf_float+0xd4>
 8008a18:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008a1c:	b2c8      	uxtb	r0, r1
 8008a1e:	280e      	cmp	r0, #14
 8008a20:	d939      	bls.n	8008a96 <_scanf_float+0xda>
 8008a22:	b11f      	cbz	r7, 8008a2c <_scanf_float+0x70>
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008a30:	f1ba 0f01 	cmp.w	sl, #1
 8008a34:	f200 8114 	bhi.w	8008c60 <_scanf_float+0x2a4>
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	429e      	cmp	r6, r3
 8008a3c:	f200 8105 	bhi.w	8008c4a <_scanf_float+0x28e>
 8008a40:	2001      	movs	r0, #1
 8008a42:	b007      	add	sp, #28
 8008a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a48:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008a4c:	2a0d      	cmp	r2, #13
 8008a4e:	d8e8      	bhi.n	8008a22 <_scanf_float+0x66>
 8008a50:	a101      	add	r1, pc, #4	@ (adr r1, 8008a58 <_scanf_float+0x9c>)
 8008a52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008ba1 	.word	0x08008ba1
 8008a5c:	08008a23 	.word	0x08008a23
 8008a60:	08008a23 	.word	0x08008a23
 8008a64:	08008a23 	.word	0x08008a23
 8008a68:	08008bfd 	.word	0x08008bfd
 8008a6c:	08008bd7 	.word	0x08008bd7
 8008a70:	08008a23 	.word	0x08008a23
 8008a74:	08008a23 	.word	0x08008a23
 8008a78:	08008baf 	.word	0x08008baf
 8008a7c:	08008a23 	.word	0x08008a23
 8008a80:	08008a23 	.word	0x08008a23
 8008a84:	08008a23 	.word	0x08008a23
 8008a88:	08008a23 	.word	0x08008a23
 8008a8c:	08008b6b 	.word	0x08008b6b
 8008a90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008a94:	e7da      	b.n	8008a4c <_scanf_float+0x90>
 8008a96:	290e      	cmp	r1, #14
 8008a98:	d8c3      	bhi.n	8008a22 <_scanf_float+0x66>
 8008a9a:	a001      	add	r0, pc, #4	@ (adr r0, 8008aa0 <_scanf_float+0xe4>)
 8008a9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008aa0:	08008b5b 	.word	0x08008b5b
 8008aa4:	08008a23 	.word	0x08008a23
 8008aa8:	08008b5b 	.word	0x08008b5b
 8008aac:	08008beb 	.word	0x08008beb
 8008ab0:	08008a23 	.word	0x08008a23
 8008ab4:	08008afd 	.word	0x08008afd
 8008ab8:	08008b41 	.word	0x08008b41
 8008abc:	08008b41 	.word	0x08008b41
 8008ac0:	08008b41 	.word	0x08008b41
 8008ac4:	08008b41 	.word	0x08008b41
 8008ac8:	08008b41 	.word	0x08008b41
 8008acc:	08008b41 	.word	0x08008b41
 8008ad0:	08008b41 	.word	0x08008b41
 8008ad4:	08008b41 	.word	0x08008b41
 8008ad8:	08008b41 	.word	0x08008b41
 8008adc:	2b6e      	cmp	r3, #110	@ 0x6e
 8008ade:	d809      	bhi.n	8008af4 <_scanf_float+0x138>
 8008ae0:	2b60      	cmp	r3, #96	@ 0x60
 8008ae2:	d8b1      	bhi.n	8008a48 <_scanf_float+0x8c>
 8008ae4:	2b54      	cmp	r3, #84	@ 0x54
 8008ae6:	d07b      	beq.n	8008be0 <_scanf_float+0x224>
 8008ae8:	2b59      	cmp	r3, #89	@ 0x59
 8008aea:	d19a      	bne.n	8008a22 <_scanf_float+0x66>
 8008aec:	2d07      	cmp	r5, #7
 8008aee:	d198      	bne.n	8008a22 <_scanf_float+0x66>
 8008af0:	2508      	movs	r5, #8
 8008af2:	e02f      	b.n	8008b54 <_scanf_float+0x198>
 8008af4:	2b74      	cmp	r3, #116	@ 0x74
 8008af6:	d073      	beq.n	8008be0 <_scanf_float+0x224>
 8008af8:	2b79      	cmp	r3, #121	@ 0x79
 8008afa:	e7f6      	b.n	8008aea <_scanf_float+0x12e>
 8008afc:	6821      	ldr	r1, [r4, #0]
 8008afe:	05c8      	lsls	r0, r1, #23
 8008b00:	d51e      	bpl.n	8008b40 <_scanf_float+0x184>
 8008b02:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b06:	6021      	str	r1, [r4, #0]
 8008b08:	3701      	adds	r7, #1
 8008b0a:	f1bb 0f00 	cmp.w	fp, #0
 8008b0e:	d003      	beq.n	8008b18 <_scanf_float+0x15c>
 8008b10:	3201      	adds	r2, #1
 8008b12:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008b16:	60a2      	str	r2, [r4, #8]
 8008b18:	68a3      	ldr	r3, [r4, #8]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	60a3      	str	r3, [r4, #8]
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	3301      	adds	r3, #1
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008b30:	f340 8082 	ble.w	8008c38 <_scanf_float+0x27c>
 8008b34:	f8d9 3000 	ldr.w	r3, [r9]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	f8c9 3000 	str.w	r3, [r9]
 8008b3e:	e762      	b.n	8008a06 <_scanf_float+0x4a>
 8008b40:	eb1a 0105 	adds.w	r1, sl, r5
 8008b44:	f47f af6d 	bne.w	8008a22 <_scanf_float+0x66>
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008b4e:	6022      	str	r2, [r4, #0]
 8008b50:	460d      	mov	r5, r1
 8008b52:	468a      	mov	sl, r1
 8008b54:	f806 3b01 	strb.w	r3, [r6], #1
 8008b58:	e7de      	b.n	8008b18 <_scanf_float+0x15c>
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	0610      	lsls	r0, r2, #24
 8008b5e:	f57f af60 	bpl.w	8008a22 <_scanf_float+0x66>
 8008b62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b66:	6022      	str	r2, [r4, #0]
 8008b68:	e7f4      	b.n	8008b54 <_scanf_float+0x198>
 8008b6a:	f1ba 0f00 	cmp.w	sl, #0
 8008b6e:	d10c      	bne.n	8008b8a <_scanf_float+0x1ce>
 8008b70:	b977      	cbnz	r7, 8008b90 <_scanf_float+0x1d4>
 8008b72:	6822      	ldr	r2, [r4, #0]
 8008b74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008b78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008b7c:	d108      	bne.n	8008b90 <_scanf_float+0x1d4>
 8008b7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008b82:	6022      	str	r2, [r4, #0]
 8008b84:	f04f 0a01 	mov.w	sl, #1
 8008b88:	e7e4      	b.n	8008b54 <_scanf_float+0x198>
 8008b8a:	f1ba 0f02 	cmp.w	sl, #2
 8008b8e:	d050      	beq.n	8008c32 <_scanf_float+0x276>
 8008b90:	2d01      	cmp	r5, #1
 8008b92:	d002      	beq.n	8008b9a <_scanf_float+0x1de>
 8008b94:	2d04      	cmp	r5, #4
 8008b96:	f47f af44 	bne.w	8008a22 <_scanf_float+0x66>
 8008b9a:	3501      	adds	r5, #1
 8008b9c:	b2ed      	uxtb	r5, r5
 8008b9e:	e7d9      	b.n	8008b54 <_scanf_float+0x198>
 8008ba0:	f1ba 0f01 	cmp.w	sl, #1
 8008ba4:	f47f af3d 	bne.w	8008a22 <_scanf_float+0x66>
 8008ba8:	f04f 0a02 	mov.w	sl, #2
 8008bac:	e7d2      	b.n	8008b54 <_scanf_float+0x198>
 8008bae:	b975      	cbnz	r5, 8008bce <_scanf_float+0x212>
 8008bb0:	2f00      	cmp	r7, #0
 8008bb2:	f47f af37 	bne.w	8008a24 <_scanf_float+0x68>
 8008bb6:	6822      	ldr	r2, [r4, #0]
 8008bb8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bbc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008bc0:	f040 80fe 	bne.w	8008dc0 <_scanf_float+0x404>
 8008bc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008bc8:	6022      	str	r2, [r4, #0]
 8008bca:	2501      	movs	r5, #1
 8008bcc:	e7c2      	b.n	8008b54 <_scanf_float+0x198>
 8008bce:	2d03      	cmp	r5, #3
 8008bd0:	d0e3      	beq.n	8008b9a <_scanf_float+0x1de>
 8008bd2:	2d05      	cmp	r5, #5
 8008bd4:	e7df      	b.n	8008b96 <_scanf_float+0x1da>
 8008bd6:	2d02      	cmp	r5, #2
 8008bd8:	f47f af23 	bne.w	8008a22 <_scanf_float+0x66>
 8008bdc:	2503      	movs	r5, #3
 8008bde:	e7b9      	b.n	8008b54 <_scanf_float+0x198>
 8008be0:	2d06      	cmp	r5, #6
 8008be2:	f47f af1e 	bne.w	8008a22 <_scanf_float+0x66>
 8008be6:	2507      	movs	r5, #7
 8008be8:	e7b4      	b.n	8008b54 <_scanf_float+0x198>
 8008bea:	6822      	ldr	r2, [r4, #0]
 8008bec:	0591      	lsls	r1, r2, #22
 8008bee:	f57f af18 	bpl.w	8008a22 <_scanf_float+0x66>
 8008bf2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008bf6:	6022      	str	r2, [r4, #0]
 8008bf8:	9702      	str	r7, [sp, #8]
 8008bfa:	e7ab      	b.n	8008b54 <_scanf_float+0x198>
 8008bfc:	6822      	ldr	r2, [r4, #0]
 8008bfe:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c02:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c06:	d005      	beq.n	8008c14 <_scanf_float+0x258>
 8008c08:	0550      	lsls	r0, r2, #21
 8008c0a:	f57f af0a 	bpl.w	8008a22 <_scanf_float+0x66>
 8008c0e:	2f00      	cmp	r7, #0
 8008c10:	f000 80d6 	beq.w	8008dc0 <_scanf_float+0x404>
 8008c14:	0591      	lsls	r1, r2, #22
 8008c16:	bf58      	it	pl
 8008c18:	9902      	ldrpl	r1, [sp, #8]
 8008c1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c1e:	bf58      	it	pl
 8008c20:	1a79      	subpl	r1, r7, r1
 8008c22:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008c26:	bf58      	it	pl
 8008c28:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c2c:	6022      	str	r2, [r4, #0]
 8008c2e:	2700      	movs	r7, #0
 8008c30:	e790      	b.n	8008b54 <_scanf_float+0x198>
 8008c32:	f04f 0a03 	mov.w	sl, #3
 8008c36:	e78d      	b.n	8008b54 <_scanf_float+0x198>
 8008c38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	4640      	mov	r0, r8
 8008c40:	4798      	blx	r3
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f43f aedf 	beq.w	8008a06 <_scanf_float+0x4a>
 8008c48:	e6eb      	b.n	8008a22 <_scanf_float+0x66>
 8008c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c52:	464a      	mov	r2, r9
 8008c54:	4640      	mov	r0, r8
 8008c56:	4798      	blx	r3
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	6123      	str	r3, [r4, #16]
 8008c5e:	e6eb      	b.n	8008a38 <_scanf_float+0x7c>
 8008c60:	1e6b      	subs	r3, r5, #1
 8008c62:	2b06      	cmp	r3, #6
 8008c64:	d824      	bhi.n	8008cb0 <_scanf_float+0x2f4>
 8008c66:	2d02      	cmp	r5, #2
 8008c68:	d836      	bhi.n	8008cd8 <_scanf_float+0x31c>
 8008c6a:	9b01      	ldr	r3, [sp, #4]
 8008c6c:	429e      	cmp	r6, r3
 8008c6e:	f67f aee7 	bls.w	8008a40 <_scanf_float+0x84>
 8008c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c7a:	464a      	mov	r2, r9
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	4798      	blx	r3
 8008c80:	6923      	ldr	r3, [r4, #16]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	e7f0      	b.n	8008c6a <_scanf_float+0x2ae>
 8008c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c8c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008c90:	464a      	mov	r2, r9
 8008c92:	4640      	mov	r0, r8
 8008c94:	4798      	blx	r3
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008ca0:	fa5f fa8a 	uxtb.w	sl, sl
 8008ca4:	f1ba 0f02 	cmp.w	sl, #2
 8008ca8:	d1ee      	bne.n	8008c88 <_scanf_float+0x2cc>
 8008caa:	3d03      	subs	r5, #3
 8008cac:	b2ed      	uxtb	r5, r5
 8008cae:	1b76      	subs	r6, r6, r5
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	05da      	lsls	r2, r3, #23
 8008cb4:	d530      	bpl.n	8008d18 <_scanf_float+0x35c>
 8008cb6:	055b      	lsls	r3, r3, #21
 8008cb8:	d511      	bpl.n	8008cde <_scanf_float+0x322>
 8008cba:	9b01      	ldr	r3, [sp, #4]
 8008cbc:	429e      	cmp	r6, r3
 8008cbe:	f67f aebf 	bls.w	8008a40 <_scanf_float+0x84>
 8008cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cca:	464a      	mov	r2, r9
 8008ccc:	4640      	mov	r0, r8
 8008cce:	4798      	blx	r3
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	6123      	str	r3, [r4, #16]
 8008cd6:	e7f0      	b.n	8008cba <_scanf_float+0x2fe>
 8008cd8:	46aa      	mov	sl, r5
 8008cda:	46b3      	mov	fp, r6
 8008cdc:	e7de      	b.n	8008c9c <_scanf_float+0x2e0>
 8008cde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ce2:	6923      	ldr	r3, [r4, #16]
 8008ce4:	2965      	cmp	r1, #101	@ 0x65
 8008ce6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008cea:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008cee:	6123      	str	r3, [r4, #16]
 8008cf0:	d00c      	beq.n	8008d0c <_scanf_float+0x350>
 8008cf2:	2945      	cmp	r1, #69	@ 0x45
 8008cf4:	d00a      	beq.n	8008d0c <_scanf_float+0x350>
 8008cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cfa:	464a      	mov	r2, r9
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	4798      	blx	r3
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	1eb5      	subs	r5, r6, #2
 8008d0a:	6123      	str	r3, [r4, #16]
 8008d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d10:	464a      	mov	r2, r9
 8008d12:	4640      	mov	r0, r8
 8008d14:	4798      	blx	r3
 8008d16:	462e      	mov	r6, r5
 8008d18:	6822      	ldr	r2, [r4, #0]
 8008d1a:	f012 0210 	ands.w	r2, r2, #16
 8008d1e:	d001      	beq.n	8008d24 <_scanf_float+0x368>
 8008d20:	2000      	movs	r0, #0
 8008d22:	e68e      	b.n	8008a42 <_scanf_float+0x86>
 8008d24:	7032      	strb	r2, [r6, #0]
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d30:	d125      	bne.n	8008d7e <_scanf_float+0x3c2>
 8008d32:	9b02      	ldr	r3, [sp, #8]
 8008d34:	429f      	cmp	r7, r3
 8008d36:	d00a      	beq.n	8008d4e <_scanf_float+0x392>
 8008d38:	1bda      	subs	r2, r3, r7
 8008d3a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008d3e:	429e      	cmp	r6, r3
 8008d40:	bf28      	it	cs
 8008d42:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008d46:	491f      	ldr	r1, [pc, #124]	@ (8008dc4 <_scanf_float+0x408>)
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f000 f971 	bl	8009030 <siprintf>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	9901      	ldr	r1, [sp, #4]
 8008d52:	4640      	mov	r0, r8
 8008d54:	f002 fce8 	bl	800b728 <_strtod_r>
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	6825      	ldr	r5, [r4, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f015 0f02 	tst.w	r5, #2
 8008d62:	4606      	mov	r6, r0
 8008d64:	460f      	mov	r7, r1
 8008d66:	f103 0204 	add.w	r2, r3, #4
 8008d6a:	d015      	beq.n	8008d98 <_scanf_float+0x3dc>
 8008d6c:	9903      	ldr	r1, [sp, #12]
 8008d6e:	600a      	str	r2, [r1, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	e9c3 6700 	strd	r6, r7, [r3]
 8008d76:	68e3      	ldr	r3, [r4, #12]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60e3      	str	r3, [r4, #12]
 8008d7c:	e7d0      	b.n	8008d20 <_scanf_float+0x364>
 8008d7e:	9b04      	ldr	r3, [sp, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0e4      	beq.n	8008d4e <_scanf_float+0x392>
 8008d84:	9905      	ldr	r1, [sp, #20]
 8008d86:	230a      	movs	r3, #10
 8008d88:	3101      	adds	r1, #1
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	f002 fd4c 	bl	800b828 <_strtol_r>
 8008d90:	9b04      	ldr	r3, [sp, #16]
 8008d92:	9e05      	ldr	r6, [sp, #20]
 8008d94:	1ac2      	subs	r2, r0, r3
 8008d96:	e7d0      	b.n	8008d3a <_scanf_float+0x37e>
 8008d98:	076d      	lsls	r5, r5, #29
 8008d9a:	d4e7      	bmi.n	8008d6c <_scanf_float+0x3b0>
 8008d9c:	9d03      	ldr	r5, [sp, #12]
 8008d9e:	602a      	str	r2, [r5, #0]
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	f7f7 fe99 	bl	8000adc <__aeabi_dcmpun>
 8008daa:	b120      	cbz	r0, 8008db6 <_scanf_float+0x3fa>
 8008dac:	4806      	ldr	r0, [pc, #24]	@ (8008dc8 <_scanf_float+0x40c>)
 8008dae:	f000 fac7 	bl	8009340 <nanf>
 8008db2:	6028      	str	r0, [r5, #0]
 8008db4:	e7df      	b.n	8008d76 <_scanf_float+0x3ba>
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 feed 	bl	8000b98 <__aeabi_d2f>
 8008dbe:	e7f8      	b.n	8008db2 <_scanf_float+0x3f6>
 8008dc0:	2700      	movs	r7, #0
 8008dc2:	e633      	b.n	8008a2c <_scanf_float+0x70>
 8008dc4:	0800ce6c 	.word	0x0800ce6c
 8008dc8:	0800cfad 	.word	0x0800cfad

08008dcc <std>:
 8008dcc:	2300      	movs	r3, #0
 8008dce:	b510      	push	{r4, lr}
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8008dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dda:	6083      	str	r3, [r0, #8]
 8008ddc:	8181      	strh	r1, [r0, #12]
 8008dde:	6643      	str	r3, [r0, #100]	@ 0x64
 8008de0:	81c2      	strh	r2, [r0, #14]
 8008de2:	6183      	str	r3, [r0, #24]
 8008de4:	4619      	mov	r1, r3
 8008de6:	2208      	movs	r2, #8
 8008de8:	305c      	adds	r0, #92	@ 0x5c
 8008dea:	f000 fa1b 	bl	8009224 <memset>
 8008dee:	4b0d      	ldr	r3, [pc, #52]	@ (8008e24 <std+0x58>)
 8008df0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008df2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e28 <std+0x5c>)
 8008df4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008df6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e2c <std+0x60>)
 8008df8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8008e30 <std+0x64>)
 8008dfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <std+0x68>)
 8008e00:	6224      	str	r4, [r4, #32]
 8008e02:	429c      	cmp	r4, r3
 8008e04:	d006      	beq.n	8008e14 <std+0x48>
 8008e06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e0a:	4294      	cmp	r4, r2
 8008e0c:	d002      	beq.n	8008e14 <std+0x48>
 8008e0e:	33d0      	adds	r3, #208	@ 0xd0
 8008e10:	429c      	cmp	r4, r3
 8008e12:	d105      	bne.n	8008e20 <std+0x54>
 8008e14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e1c:	f000 ba7e 	b.w	800931c <__retarget_lock_init_recursive>
 8008e20:	bd10      	pop	{r4, pc}
 8008e22:	bf00      	nop
 8008e24:	08009075 	.word	0x08009075
 8008e28:	08009097 	.word	0x08009097
 8008e2c:	080090cf 	.word	0x080090cf
 8008e30:	080090f3 	.word	0x080090f3
 8008e34:	20000398 	.word	0x20000398

08008e38 <stdio_exit_handler>:
 8008e38:	4a02      	ldr	r2, [pc, #8]	@ (8008e44 <stdio_exit_handler+0xc>)
 8008e3a:	4903      	ldr	r1, [pc, #12]	@ (8008e48 <stdio_exit_handler+0x10>)
 8008e3c:	4803      	ldr	r0, [pc, #12]	@ (8008e4c <stdio_exit_handler+0x14>)
 8008e3e:	f000 b869 	b.w	8008f14 <_fwalk_sglue>
 8008e42:	bf00      	nop
 8008e44:	2000001c 	.word	0x2000001c
 8008e48:	0800be5d 	.word	0x0800be5d
 8008e4c:	2000002c 	.word	0x2000002c

08008e50 <cleanup_stdio>:
 8008e50:	6841      	ldr	r1, [r0, #4]
 8008e52:	4b0c      	ldr	r3, [pc, #48]	@ (8008e84 <cleanup_stdio+0x34>)
 8008e54:	4299      	cmp	r1, r3
 8008e56:	b510      	push	{r4, lr}
 8008e58:	4604      	mov	r4, r0
 8008e5a:	d001      	beq.n	8008e60 <cleanup_stdio+0x10>
 8008e5c:	f002 fffe 	bl	800be5c <_fflush_r>
 8008e60:	68a1      	ldr	r1, [r4, #8]
 8008e62:	4b09      	ldr	r3, [pc, #36]	@ (8008e88 <cleanup_stdio+0x38>)
 8008e64:	4299      	cmp	r1, r3
 8008e66:	d002      	beq.n	8008e6e <cleanup_stdio+0x1e>
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f002 fff7 	bl	800be5c <_fflush_r>
 8008e6e:	68e1      	ldr	r1, [r4, #12]
 8008e70:	4b06      	ldr	r3, [pc, #24]	@ (8008e8c <cleanup_stdio+0x3c>)
 8008e72:	4299      	cmp	r1, r3
 8008e74:	d004      	beq.n	8008e80 <cleanup_stdio+0x30>
 8008e76:	4620      	mov	r0, r4
 8008e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e7c:	f002 bfee 	b.w	800be5c <_fflush_r>
 8008e80:	bd10      	pop	{r4, pc}
 8008e82:	bf00      	nop
 8008e84:	20000398 	.word	0x20000398
 8008e88:	20000400 	.word	0x20000400
 8008e8c:	20000468 	.word	0x20000468

08008e90 <global_stdio_init.part.0>:
 8008e90:	b510      	push	{r4, lr}
 8008e92:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec0 <global_stdio_init.part.0+0x30>)
 8008e94:	4c0b      	ldr	r4, [pc, #44]	@ (8008ec4 <global_stdio_init.part.0+0x34>)
 8008e96:	4a0c      	ldr	r2, [pc, #48]	@ (8008ec8 <global_stdio_init.part.0+0x38>)
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	2104      	movs	r1, #4
 8008ea0:	f7ff ff94 	bl	8008dcc <std>
 8008ea4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	2109      	movs	r1, #9
 8008eac:	f7ff ff8e 	bl	8008dcc <std>
 8008eb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eba:	2112      	movs	r1, #18
 8008ebc:	f7ff bf86 	b.w	8008dcc <std>
 8008ec0:	200004d0 	.word	0x200004d0
 8008ec4:	20000398 	.word	0x20000398
 8008ec8:	08008e39 	.word	0x08008e39

08008ecc <__sfp_lock_acquire>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	@ (8008ed4 <__sfp_lock_acquire+0x8>)
 8008ece:	f000 ba26 	b.w	800931e <__retarget_lock_acquire_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	200004d9 	.word	0x200004d9

08008ed8 <__sfp_lock_release>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	@ (8008ee0 <__sfp_lock_release+0x8>)
 8008eda:	f000 ba21 	b.w	8009320 <__retarget_lock_release_recursive>
 8008ede:	bf00      	nop
 8008ee0:	200004d9 	.word	0x200004d9

08008ee4 <__sinit>:
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	f7ff fff0 	bl	8008ecc <__sfp_lock_acquire>
 8008eec:	6a23      	ldr	r3, [r4, #32]
 8008eee:	b11b      	cbz	r3, 8008ef8 <__sinit+0x14>
 8008ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef4:	f7ff bff0 	b.w	8008ed8 <__sfp_lock_release>
 8008ef8:	4b04      	ldr	r3, [pc, #16]	@ (8008f0c <__sinit+0x28>)
 8008efa:	6223      	str	r3, [r4, #32]
 8008efc:	4b04      	ldr	r3, [pc, #16]	@ (8008f10 <__sinit+0x2c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1f5      	bne.n	8008ef0 <__sinit+0xc>
 8008f04:	f7ff ffc4 	bl	8008e90 <global_stdio_init.part.0>
 8008f08:	e7f2      	b.n	8008ef0 <__sinit+0xc>
 8008f0a:	bf00      	nop
 8008f0c:	08008e51 	.word	0x08008e51
 8008f10:	200004d0 	.word	0x200004d0

08008f14 <_fwalk_sglue>:
 8008f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f18:	4607      	mov	r7, r0
 8008f1a:	4688      	mov	r8, r1
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	2600      	movs	r6, #0
 8008f20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f24:	f1b9 0901 	subs.w	r9, r9, #1
 8008f28:	d505      	bpl.n	8008f36 <_fwalk_sglue+0x22>
 8008f2a:	6824      	ldr	r4, [r4, #0]
 8008f2c:	2c00      	cmp	r4, #0
 8008f2e:	d1f7      	bne.n	8008f20 <_fwalk_sglue+0xc>
 8008f30:	4630      	mov	r0, r6
 8008f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d907      	bls.n	8008f4c <_fwalk_sglue+0x38>
 8008f3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f40:	3301      	adds	r3, #1
 8008f42:	d003      	beq.n	8008f4c <_fwalk_sglue+0x38>
 8008f44:	4629      	mov	r1, r5
 8008f46:	4638      	mov	r0, r7
 8008f48:	47c0      	blx	r8
 8008f4a:	4306      	orrs	r6, r0
 8008f4c:	3568      	adds	r5, #104	@ 0x68
 8008f4e:	e7e9      	b.n	8008f24 <_fwalk_sglue+0x10>

08008f50 <iprintf>:
 8008f50:	b40f      	push	{r0, r1, r2, r3}
 8008f52:	b507      	push	{r0, r1, r2, lr}
 8008f54:	4906      	ldr	r1, [pc, #24]	@ (8008f70 <iprintf+0x20>)
 8008f56:	ab04      	add	r3, sp, #16
 8008f58:	6808      	ldr	r0, [r1, #0]
 8008f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f5e:	6881      	ldr	r1, [r0, #8]
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	f002 fde3 	bl	800bb2c <_vfiprintf_r>
 8008f66:	b003      	add	sp, #12
 8008f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f6c:	b004      	add	sp, #16
 8008f6e:	4770      	bx	lr
 8008f70:	20000028 	.word	0x20000028

08008f74 <_puts_r>:
 8008f74:	6a03      	ldr	r3, [r0, #32]
 8008f76:	b570      	push	{r4, r5, r6, lr}
 8008f78:	6884      	ldr	r4, [r0, #8]
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	460e      	mov	r6, r1
 8008f7e:	b90b      	cbnz	r3, 8008f84 <_puts_r+0x10>
 8008f80:	f7ff ffb0 	bl	8008ee4 <__sinit>
 8008f84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f86:	07db      	lsls	r3, r3, #31
 8008f88:	d405      	bmi.n	8008f96 <_puts_r+0x22>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	0598      	lsls	r0, r3, #22
 8008f8e:	d402      	bmi.n	8008f96 <_puts_r+0x22>
 8008f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f92:	f000 f9c4 	bl	800931e <__retarget_lock_acquire_recursive>
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	0719      	lsls	r1, r3, #28
 8008f9a:	d502      	bpl.n	8008fa2 <_puts_r+0x2e>
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d135      	bne.n	800900e <_puts_r+0x9a>
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 f8e7 	bl	8009178 <__swsetup_r>
 8008faa:	b380      	cbz	r0, 800900e <_puts_r+0x9a>
 8008fac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008fb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fb2:	07da      	lsls	r2, r3, #31
 8008fb4:	d405      	bmi.n	8008fc2 <_puts_r+0x4e>
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	059b      	lsls	r3, r3, #22
 8008fba:	d402      	bmi.n	8008fc2 <_puts_r+0x4e>
 8008fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fbe:	f000 f9af 	bl	8009320 <__retarget_lock_release_recursive>
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	bd70      	pop	{r4, r5, r6, pc}
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	da04      	bge.n	8008fd4 <_puts_r+0x60>
 8008fca:	69a2      	ldr	r2, [r4, #24]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	dc17      	bgt.n	8009000 <_puts_r+0x8c>
 8008fd0:	290a      	cmp	r1, #10
 8008fd2:	d015      	beq.n	8009000 <_puts_r+0x8c>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	6022      	str	r2, [r4, #0]
 8008fda:	7019      	strb	r1, [r3, #0]
 8008fdc:	68a3      	ldr	r3, [r4, #8]
 8008fde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	60a3      	str	r3, [r4, #8]
 8008fe6:	2900      	cmp	r1, #0
 8008fe8:	d1ed      	bne.n	8008fc6 <_puts_r+0x52>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	da11      	bge.n	8009012 <_puts_r+0x9e>
 8008fee:	4622      	mov	r2, r4
 8008ff0:	210a      	movs	r1, #10
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f000 f881 	bl	80090fa <__swbuf_r>
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d0d7      	beq.n	8008fac <_puts_r+0x38>
 8008ffc:	250a      	movs	r5, #10
 8008ffe:	e7d7      	b.n	8008fb0 <_puts_r+0x3c>
 8009000:	4622      	mov	r2, r4
 8009002:	4628      	mov	r0, r5
 8009004:	f000 f879 	bl	80090fa <__swbuf_r>
 8009008:	3001      	adds	r0, #1
 800900a:	d1e7      	bne.n	8008fdc <_puts_r+0x68>
 800900c:	e7ce      	b.n	8008fac <_puts_r+0x38>
 800900e:	3e01      	subs	r6, #1
 8009010:	e7e4      	b.n	8008fdc <_puts_r+0x68>
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	6022      	str	r2, [r4, #0]
 8009018:	220a      	movs	r2, #10
 800901a:	701a      	strb	r2, [r3, #0]
 800901c:	e7ee      	b.n	8008ffc <_puts_r+0x88>
	...

08009020 <puts>:
 8009020:	4b02      	ldr	r3, [pc, #8]	@ (800902c <puts+0xc>)
 8009022:	4601      	mov	r1, r0
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	f7ff bfa5 	b.w	8008f74 <_puts_r>
 800902a:	bf00      	nop
 800902c:	20000028 	.word	0x20000028

08009030 <siprintf>:
 8009030:	b40e      	push	{r1, r2, r3}
 8009032:	b510      	push	{r4, lr}
 8009034:	b09d      	sub	sp, #116	@ 0x74
 8009036:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009038:	9002      	str	r0, [sp, #8]
 800903a:	9006      	str	r0, [sp, #24]
 800903c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009040:	480a      	ldr	r0, [pc, #40]	@ (800906c <siprintf+0x3c>)
 8009042:	9107      	str	r1, [sp, #28]
 8009044:	9104      	str	r1, [sp, #16]
 8009046:	490a      	ldr	r1, [pc, #40]	@ (8009070 <siprintf+0x40>)
 8009048:	f853 2b04 	ldr.w	r2, [r3], #4
 800904c:	9105      	str	r1, [sp, #20]
 800904e:	2400      	movs	r4, #0
 8009050:	a902      	add	r1, sp, #8
 8009052:	6800      	ldr	r0, [r0, #0]
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009058:	f002 fc44 	bl	800b8e4 <_svfiprintf_r>
 800905c:	9b02      	ldr	r3, [sp, #8]
 800905e:	701c      	strb	r4, [r3, #0]
 8009060:	b01d      	add	sp, #116	@ 0x74
 8009062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009066:	b003      	add	sp, #12
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	20000028 	.word	0x20000028
 8009070:	ffff0208 	.word	0xffff0208

08009074 <__sread>:
 8009074:	b510      	push	{r4, lr}
 8009076:	460c      	mov	r4, r1
 8009078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907c:	f000 f900 	bl	8009280 <_read_r>
 8009080:	2800      	cmp	r0, #0
 8009082:	bfab      	itete	ge
 8009084:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009086:	89a3      	ldrhlt	r3, [r4, #12]
 8009088:	181b      	addge	r3, r3, r0
 800908a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800908e:	bfac      	ite	ge
 8009090:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009092:	81a3      	strhlt	r3, [r4, #12]
 8009094:	bd10      	pop	{r4, pc}

08009096 <__swrite>:
 8009096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800909a:	461f      	mov	r7, r3
 800909c:	898b      	ldrh	r3, [r1, #12]
 800909e:	05db      	lsls	r3, r3, #23
 80090a0:	4605      	mov	r5, r0
 80090a2:	460c      	mov	r4, r1
 80090a4:	4616      	mov	r6, r2
 80090a6:	d505      	bpl.n	80090b4 <__swrite+0x1e>
 80090a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ac:	2302      	movs	r3, #2
 80090ae:	2200      	movs	r2, #0
 80090b0:	f000 f8d4 	bl	800925c <_lseek_r>
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	4632      	mov	r2, r6
 80090c2:	463b      	mov	r3, r7
 80090c4:	4628      	mov	r0, r5
 80090c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ca:	f000 b8eb 	b.w	80092a4 <_write_r>

080090ce <__sseek>:
 80090ce:	b510      	push	{r4, lr}
 80090d0:	460c      	mov	r4, r1
 80090d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d6:	f000 f8c1 	bl	800925c <_lseek_r>
 80090da:	1c43      	adds	r3, r0, #1
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	bf15      	itete	ne
 80090e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090ea:	81a3      	strheq	r3, [r4, #12]
 80090ec:	bf18      	it	ne
 80090ee:	81a3      	strhne	r3, [r4, #12]
 80090f0:	bd10      	pop	{r4, pc}

080090f2 <__sclose>:
 80090f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f6:	f000 b8a1 	b.w	800923c <_close_r>

080090fa <__swbuf_r>:
 80090fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fc:	460e      	mov	r6, r1
 80090fe:	4614      	mov	r4, r2
 8009100:	4605      	mov	r5, r0
 8009102:	b118      	cbz	r0, 800910c <__swbuf_r+0x12>
 8009104:	6a03      	ldr	r3, [r0, #32]
 8009106:	b90b      	cbnz	r3, 800910c <__swbuf_r+0x12>
 8009108:	f7ff feec 	bl	8008ee4 <__sinit>
 800910c:	69a3      	ldr	r3, [r4, #24]
 800910e:	60a3      	str	r3, [r4, #8]
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	071a      	lsls	r2, r3, #28
 8009114:	d501      	bpl.n	800911a <__swbuf_r+0x20>
 8009116:	6923      	ldr	r3, [r4, #16]
 8009118:	b943      	cbnz	r3, 800912c <__swbuf_r+0x32>
 800911a:	4621      	mov	r1, r4
 800911c:	4628      	mov	r0, r5
 800911e:	f000 f82b 	bl	8009178 <__swsetup_r>
 8009122:	b118      	cbz	r0, 800912c <__swbuf_r+0x32>
 8009124:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009128:	4638      	mov	r0, r7
 800912a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	6922      	ldr	r2, [r4, #16]
 8009130:	1a98      	subs	r0, r3, r2
 8009132:	6963      	ldr	r3, [r4, #20]
 8009134:	b2f6      	uxtb	r6, r6
 8009136:	4283      	cmp	r3, r0
 8009138:	4637      	mov	r7, r6
 800913a:	dc05      	bgt.n	8009148 <__swbuf_r+0x4e>
 800913c:	4621      	mov	r1, r4
 800913e:	4628      	mov	r0, r5
 8009140:	f002 fe8c 	bl	800be5c <_fflush_r>
 8009144:	2800      	cmp	r0, #0
 8009146:	d1ed      	bne.n	8009124 <__swbuf_r+0x2a>
 8009148:	68a3      	ldr	r3, [r4, #8]
 800914a:	3b01      	subs	r3, #1
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	6022      	str	r2, [r4, #0]
 8009154:	701e      	strb	r6, [r3, #0]
 8009156:	6962      	ldr	r2, [r4, #20]
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	429a      	cmp	r2, r3
 800915c:	d004      	beq.n	8009168 <__swbuf_r+0x6e>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	07db      	lsls	r3, r3, #31
 8009162:	d5e1      	bpl.n	8009128 <__swbuf_r+0x2e>
 8009164:	2e0a      	cmp	r6, #10
 8009166:	d1df      	bne.n	8009128 <__swbuf_r+0x2e>
 8009168:	4621      	mov	r1, r4
 800916a:	4628      	mov	r0, r5
 800916c:	f002 fe76 	bl	800be5c <_fflush_r>
 8009170:	2800      	cmp	r0, #0
 8009172:	d0d9      	beq.n	8009128 <__swbuf_r+0x2e>
 8009174:	e7d6      	b.n	8009124 <__swbuf_r+0x2a>
	...

08009178 <__swsetup_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4b29      	ldr	r3, [pc, #164]	@ (8009220 <__swsetup_r+0xa8>)
 800917c:	4605      	mov	r5, r0
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	460c      	mov	r4, r1
 8009182:	b118      	cbz	r0, 800918c <__swsetup_r+0x14>
 8009184:	6a03      	ldr	r3, [r0, #32]
 8009186:	b90b      	cbnz	r3, 800918c <__swsetup_r+0x14>
 8009188:	f7ff feac 	bl	8008ee4 <__sinit>
 800918c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009190:	0719      	lsls	r1, r3, #28
 8009192:	d422      	bmi.n	80091da <__swsetup_r+0x62>
 8009194:	06da      	lsls	r2, r3, #27
 8009196:	d407      	bmi.n	80091a8 <__swsetup_r+0x30>
 8009198:	2209      	movs	r2, #9
 800919a:	602a      	str	r2, [r5, #0]
 800919c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091a6:	e033      	b.n	8009210 <__swsetup_r+0x98>
 80091a8:	0758      	lsls	r0, r3, #29
 80091aa:	d512      	bpl.n	80091d2 <__swsetup_r+0x5a>
 80091ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091ae:	b141      	cbz	r1, 80091c2 <__swsetup_r+0x4a>
 80091b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091b4:	4299      	cmp	r1, r3
 80091b6:	d002      	beq.n	80091be <__swsetup_r+0x46>
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 ff1d 	bl	8009ff8 <_free_r>
 80091be:	2300      	movs	r3, #0
 80091c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091c8:	81a3      	strh	r3, [r4, #12]
 80091ca:	2300      	movs	r3, #0
 80091cc:	6063      	str	r3, [r4, #4]
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f043 0308 	orr.w	r3, r3, #8
 80091d8:	81a3      	strh	r3, [r4, #12]
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	b94b      	cbnz	r3, 80091f2 <__swsetup_r+0x7a>
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e8:	d003      	beq.n	80091f2 <__swsetup_r+0x7a>
 80091ea:	4621      	mov	r1, r4
 80091ec:	4628      	mov	r0, r5
 80091ee:	f002 fe83 	bl	800bef8 <__smakebuf_r>
 80091f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f6:	f013 0201 	ands.w	r2, r3, #1
 80091fa:	d00a      	beq.n	8009212 <__swsetup_r+0x9a>
 80091fc:	2200      	movs	r2, #0
 80091fe:	60a2      	str	r2, [r4, #8]
 8009200:	6962      	ldr	r2, [r4, #20]
 8009202:	4252      	negs	r2, r2
 8009204:	61a2      	str	r2, [r4, #24]
 8009206:	6922      	ldr	r2, [r4, #16]
 8009208:	b942      	cbnz	r2, 800921c <__swsetup_r+0xa4>
 800920a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800920e:	d1c5      	bne.n	800919c <__swsetup_r+0x24>
 8009210:	bd38      	pop	{r3, r4, r5, pc}
 8009212:	0799      	lsls	r1, r3, #30
 8009214:	bf58      	it	pl
 8009216:	6962      	ldrpl	r2, [r4, #20]
 8009218:	60a2      	str	r2, [r4, #8]
 800921a:	e7f4      	b.n	8009206 <__swsetup_r+0x8e>
 800921c:	2000      	movs	r0, #0
 800921e:	e7f7      	b.n	8009210 <__swsetup_r+0x98>
 8009220:	20000028 	.word	0x20000028

08009224 <memset>:
 8009224:	4402      	add	r2, r0
 8009226:	4603      	mov	r3, r0
 8009228:	4293      	cmp	r3, r2
 800922a:	d100      	bne.n	800922e <memset+0xa>
 800922c:	4770      	bx	lr
 800922e:	f803 1b01 	strb.w	r1, [r3], #1
 8009232:	e7f9      	b.n	8009228 <memset+0x4>

08009234 <_localeconv_r>:
 8009234:	4800      	ldr	r0, [pc, #0]	@ (8009238 <_localeconv_r+0x4>)
 8009236:	4770      	bx	lr
 8009238:	20000168 	.word	0x20000168

0800923c <_close_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d06      	ldr	r5, [pc, #24]	@ (8009258 <_close_r+0x1c>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	f7f8 fe3e 	bl	8001ec8 <_close>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	d102      	bne.n	8009256 <_close_r+0x1a>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	b103      	cbz	r3, 8009256 <_close_r+0x1a>
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	200004d4 	.word	0x200004d4

0800925c <_lseek_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4d07      	ldr	r5, [pc, #28]	@ (800927c <_lseek_r+0x20>)
 8009260:	4604      	mov	r4, r0
 8009262:	4608      	mov	r0, r1
 8009264:	4611      	mov	r1, r2
 8009266:	2200      	movs	r2, #0
 8009268:	602a      	str	r2, [r5, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	f7f8 fe50 	bl	8001f10 <_lseek>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d102      	bne.n	800927a <_lseek_r+0x1e>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	b103      	cbz	r3, 800927a <_lseek_r+0x1e>
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	200004d4 	.word	0x200004d4

08009280 <_read_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d07      	ldr	r5, [pc, #28]	@ (80092a0 <_read_r+0x20>)
 8009284:	4604      	mov	r4, r0
 8009286:	4608      	mov	r0, r1
 8009288:	4611      	mov	r1, r2
 800928a:	2200      	movs	r2, #0
 800928c:	602a      	str	r2, [r5, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	f7f8 fdfd 	bl	8001e8e <_read>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d102      	bne.n	800929e <_read_r+0x1e>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	b103      	cbz	r3, 800929e <_read_r+0x1e>
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	200004d4 	.word	0x200004d4

080092a4 <_write_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d07      	ldr	r5, [pc, #28]	@ (80092c4 <_write_r+0x20>)
 80092a8:	4604      	mov	r4, r0
 80092aa:	4608      	mov	r0, r1
 80092ac:	4611      	mov	r1, r2
 80092ae:	2200      	movs	r2, #0
 80092b0:	602a      	str	r2, [r5, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f7f8 f95c 	bl	8001570 <_write>
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	d102      	bne.n	80092c2 <_write_r+0x1e>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	b103      	cbz	r3, 80092c2 <_write_r+0x1e>
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	bd38      	pop	{r3, r4, r5, pc}
 80092c4:	200004d4 	.word	0x200004d4

080092c8 <__errno>:
 80092c8:	4b01      	ldr	r3, [pc, #4]	@ (80092d0 <__errno+0x8>)
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	20000028 	.word	0x20000028

080092d4 <__libc_init_array>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	4d0d      	ldr	r5, [pc, #52]	@ (800930c <__libc_init_array+0x38>)
 80092d8:	4c0d      	ldr	r4, [pc, #52]	@ (8009310 <__libc_init_array+0x3c>)
 80092da:	1b64      	subs	r4, r4, r5
 80092dc:	10a4      	asrs	r4, r4, #2
 80092de:	2600      	movs	r6, #0
 80092e0:	42a6      	cmp	r6, r4
 80092e2:	d109      	bne.n	80092f8 <__libc_init_array+0x24>
 80092e4:	4d0b      	ldr	r5, [pc, #44]	@ (8009314 <__libc_init_array+0x40>)
 80092e6:	4c0c      	ldr	r4, [pc, #48]	@ (8009318 <__libc_init_array+0x44>)
 80092e8:	f003 fac4 	bl	800c874 <_init>
 80092ec:	1b64      	subs	r4, r4, r5
 80092ee:	10a4      	asrs	r4, r4, #2
 80092f0:	2600      	movs	r6, #0
 80092f2:	42a6      	cmp	r6, r4
 80092f4:	d105      	bne.n	8009302 <__libc_init_array+0x2e>
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fc:	4798      	blx	r3
 80092fe:	3601      	adds	r6, #1
 8009300:	e7ee      	b.n	80092e0 <__libc_init_array+0xc>
 8009302:	f855 3b04 	ldr.w	r3, [r5], #4
 8009306:	4798      	blx	r3
 8009308:	3601      	adds	r6, #1
 800930a:	e7f2      	b.n	80092f2 <__libc_init_array+0x1e>
 800930c:	0800d26c 	.word	0x0800d26c
 8009310:	0800d26c 	.word	0x0800d26c
 8009314:	0800d26c 	.word	0x0800d26c
 8009318:	0800d270 	.word	0x0800d270

0800931c <__retarget_lock_init_recursive>:
 800931c:	4770      	bx	lr

0800931e <__retarget_lock_acquire_recursive>:
 800931e:	4770      	bx	lr

08009320 <__retarget_lock_release_recursive>:
 8009320:	4770      	bx	lr

08009322 <memcpy>:
 8009322:	440a      	add	r2, r1
 8009324:	4291      	cmp	r1, r2
 8009326:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800932a:	d100      	bne.n	800932e <memcpy+0xc>
 800932c:	4770      	bx	lr
 800932e:	b510      	push	{r4, lr}
 8009330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009338:	4291      	cmp	r1, r2
 800933a:	d1f9      	bne.n	8009330 <memcpy+0xe>
 800933c:	bd10      	pop	{r4, pc}
	...

08009340 <nanf>:
 8009340:	4800      	ldr	r0, [pc, #0]	@ (8009344 <nanf+0x4>)
 8009342:	4770      	bx	lr
 8009344:	7fc00000 	.word	0x7fc00000

08009348 <quorem>:
 8009348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	6903      	ldr	r3, [r0, #16]
 800934e:	690c      	ldr	r4, [r1, #16]
 8009350:	42a3      	cmp	r3, r4
 8009352:	4607      	mov	r7, r0
 8009354:	db7e      	blt.n	8009454 <quorem+0x10c>
 8009356:	3c01      	subs	r4, #1
 8009358:	f101 0814 	add.w	r8, r1, #20
 800935c:	00a3      	lsls	r3, r4, #2
 800935e:	f100 0514 	add.w	r5, r0, #20
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800936e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009372:	3301      	adds	r3, #1
 8009374:	429a      	cmp	r2, r3
 8009376:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800937a:	fbb2 f6f3 	udiv	r6, r2, r3
 800937e:	d32e      	bcc.n	80093de <quorem+0x96>
 8009380:	f04f 0a00 	mov.w	sl, #0
 8009384:	46c4      	mov	ip, r8
 8009386:	46ae      	mov	lr, r5
 8009388:	46d3      	mov	fp, sl
 800938a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800938e:	b298      	uxth	r0, r3
 8009390:	fb06 a000 	mla	r0, r6, r0, sl
 8009394:	0c02      	lsrs	r2, r0, #16
 8009396:	0c1b      	lsrs	r3, r3, #16
 8009398:	fb06 2303 	mla	r3, r6, r3, r2
 800939c:	f8de 2000 	ldr.w	r2, [lr]
 80093a0:	b280      	uxth	r0, r0
 80093a2:	b292      	uxth	r2, r2
 80093a4:	1a12      	subs	r2, r2, r0
 80093a6:	445a      	add	r2, fp
 80093a8:	f8de 0000 	ldr.w	r0, [lr]
 80093ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093ba:	b292      	uxth	r2, r2
 80093bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093c0:	45e1      	cmp	r9, ip
 80093c2:	f84e 2b04 	str.w	r2, [lr], #4
 80093c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093ca:	d2de      	bcs.n	800938a <quorem+0x42>
 80093cc:	9b00      	ldr	r3, [sp, #0]
 80093ce:	58eb      	ldr	r3, [r5, r3]
 80093d0:	b92b      	cbnz	r3, 80093de <quorem+0x96>
 80093d2:	9b01      	ldr	r3, [sp, #4]
 80093d4:	3b04      	subs	r3, #4
 80093d6:	429d      	cmp	r5, r3
 80093d8:	461a      	mov	r2, r3
 80093da:	d32f      	bcc.n	800943c <quorem+0xf4>
 80093dc:	613c      	str	r4, [r7, #16]
 80093de:	4638      	mov	r0, r7
 80093e0:	f001 f9c6 	bl	800a770 <__mcmp>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	db25      	blt.n	8009434 <quorem+0xec>
 80093e8:	4629      	mov	r1, r5
 80093ea:	2000      	movs	r0, #0
 80093ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80093f0:	f8d1 c000 	ldr.w	ip, [r1]
 80093f4:	fa1f fe82 	uxth.w	lr, r2
 80093f8:	fa1f f38c 	uxth.w	r3, ip
 80093fc:	eba3 030e 	sub.w	r3, r3, lr
 8009400:	4403      	add	r3, r0
 8009402:	0c12      	lsrs	r2, r2, #16
 8009404:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009408:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800940c:	b29b      	uxth	r3, r3
 800940e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009412:	45c1      	cmp	r9, r8
 8009414:	f841 3b04 	str.w	r3, [r1], #4
 8009418:	ea4f 4022 	mov.w	r0, r2, asr #16
 800941c:	d2e6      	bcs.n	80093ec <quorem+0xa4>
 800941e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009426:	b922      	cbnz	r2, 8009432 <quorem+0xea>
 8009428:	3b04      	subs	r3, #4
 800942a:	429d      	cmp	r5, r3
 800942c:	461a      	mov	r2, r3
 800942e:	d30b      	bcc.n	8009448 <quorem+0x100>
 8009430:	613c      	str	r4, [r7, #16]
 8009432:	3601      	adds	r6, #1
 8009434:	4630      	mov	r0, r6
 8009436:	b003      	add	sp, #12
 8009438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943c:	6812      	ldr	r2, [r2, #0]
 800943e:	3b04      	subs	r3, #4
 8009440:	2a00      	cmp	r2, #0
 8009442:	d1cb      	bne.n	80093dc <quorem+0x94>
 8009444:	3c01      	subs	r4, #1
 8009446:	e7c6      	b.n	80093d6 <quorem+0x8e>
 8009448:	6812      	ldr	r2, [r2, #0]
 800944a:	3b04      	subs	r3, #4
 800944c:	2a00      	cmp	r2, #0
 800944e:	d1ef      	bne.n	8009430 <quorem+0xe8>
 8009450:	3c01      	subs	r4, #1
 8009452:	e7ea      	b.n	800942a <quorem+0xe2>
 8009454:	2000      	movs	r0, #0
 8009456:	e7ee      	b.n	8009436 <quorem+0xee>

08009458 <_dtoa_r>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	69c7      	ldr	r7, [r0, #28]
 800945e:	b097      	sub	sp, #92	@ 0x5c
 8009460:	4614      	mov	r4, r2
 8009462:	461d      	mov	r5, r3
 8009464:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009468:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800946a:	4681      	mov	r9, r0
 800946c:	b97f      	cbnz	r7, 800948e <_dtoa_r+0x36>
 800946e:	2010      	movs	r0, #16
 8009470:	f000 fe0c 	bl	800a08c <malloc>
 8009474:	4602      	mov	r2, r0
 8009476:	f8c9 001c 	str.w	r0, [r9, #28]
 800947a:	b920      	cbnz	r0, 8009486 <_dtoa_r+0x2e>
 800947c:	4baa      	ldr	r3, [pc, #680]	@ (8009728 <_dtoa_r+0x2d0>)
 800947e:	21ef      	movs	r1, #239	@ 0xef
 8009480:	48aa      	ldr	r0, [pc, #680]	@ (800972c <_dtoa_r+0x2d4>)
 8009482:	f002 fdd9 	bl	800c038 <__assert_func>
 8009486:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800948a:	6007      	str	r7, [r0, #0]
 800948c:	60c7      	str	r7, [r0, #12]
 800948e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009492:	6819      	ldr	r1, [r3, #0]
 8009494:	b159      	cbz	r1, 80094ae <_dtoa_r+0x56>
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	604a      	str	r2, [r1, #4]
 800949a:	2301      	movs	r3, #1
 800949c:	4093      	lsls	r3, r2
 800949e:	608b      	str	r3, [r1, #8]
 80094a0:	4648      	mov	r0, r9
 80094a2:	f000 fee9 	bl	800a278 <_Bfree>
 80094a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	1e2b      	subs	r3, r5, #0
 80094b0:	bfb9      	ittee	lt
 80094b2:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094b6:	9307      	strlt	r3, [sp, #28]
 80094b8:	2300      	movge	r3, #0
 80094ba:	6033      	strge	r3, [r6, #0]
 80094bc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80094c0:	4b9b      	ldr	r3, [pc, #620]	@ (8009730 <_dtoa_r+0x2d8>)
 80094c2:	bfbc      	itt	lt
 80094c4:	2201      	movlt	r2, #1
 80094c6:	6032      	strlt	r2, [r6, #0]
 80094c8:	ea33 0308 	bics.w	r3, r3, r8
 80094cc:	d112      	bne.n	80094f4 <_dtoa_r+0x9c>
 80094ce:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80094d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80094da:	4323      	orrs	r3, r4
 80094dc:	f000 855b 	beq.w	8009f96 <_dtoa_r+0xb3e>
 80094e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094e2:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8009734 <_dtoa_r+0x2dc>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 855d 	beq.w	8009fa6 <_dtoa_r+0xb4e>
 80094ec:	f10a 0303 	add.w	r3, sl, #3
 80094f0:	f000 bd57 	b.w	8009fa2 <_dtoa_r+0xb4a>
 80094f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80094fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009500:	2200      	movs	r2, #0
 8009502:	2300      	movs	r3, #0
 8009504:	f7f7 fab8 	bl	8000a78 <__aeabi_dcmpeq>
 8009508:	4607      	mov	r7, r0
 800950a:	b158      	cbz	r0, 8009524 <_dtoa_r+0xcc>
 800950c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800950e:	2301      	movs	r3, #1
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009514:	b113      	cbz	r3, 800951c <_dtoa_r+0xc4>
 8009516:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009518:	4b87      	ldr	r3, [pc, #540]	@ (8009738 <_dtoa_r+0x2e0>)
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800973c <_dtoa_r+0x2e4>
 8009520:	f000 bd41 	b.w	8009fa6 <_dtoa_r+0xb4e>
 8009524:	ab14      	add	r3, sp, #80	@ 0x50
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	ab15      	add	r3, sp, #84	@ 0x54
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	4648      	mov	r0, r9
 800952e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009532:	f001 fa35 	bl	800a9a0 <__d2b>
 8009536:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800953a:	9003      	str	r0, [sp, #12]
 800953c:	2e00      	cmp	r6, #0
 800953e:	d077      	beq.n	8009630 <_dtoa_r+0x1d8>
 8009540:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009542:	9712      	str	r7, [sp, #72]	@ 0x48
 8009544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800954c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009550:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009554:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009558:	4619      	mov	r1, r3
 800955a:	2200      	movs	r2, #0
 800955c:	4b78      	ldr	r3, [pc, #480]	@ (8009740 <_dtoa_r+0x2e8>)
 800955e:	f7f6 fe6b 	bl	8000238 <__aeabi_dsub>
 8009562:	a36b      	add	r3, pc, #428	@ (adr r3, 8009710 <_dtoa_r+0x2b8>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f7 f81e 	bl	80005a8 <__aeabi_dmul>
 800956c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009718 <_dtoa_r+0x2c0>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f6 fe63 	bl	800023c <__adddf3>
 8009576:	4604      	mov	r4, r0
 8009578:	4630      	mov	r0, r6
 800957a:	460d      	mov	r5, r1
 800957c:	f7f6 ffaa 	bl	80004d4 <__aeabi_i2d>
 8009580:	a367      	add	r3, pc, #412	@ (adr r3, 8009720 <_dtoa_r+0x2c8>)
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	f7f7 f80f 	bl	80005a8 <__aeabi_dmul>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4620      	mov	r0, r4
 8009590:	4629      	mov	r1, r5
 8009592:	f7f6 fe53 	bl	800023c <__adddf3>
 8009596:	4604      	mov	r4, r0
 8009598:	460d      	mov	r5, r1
 800959a:	f7f7 fab5 	bl	8000b08 <__aeabi_d2iz>
 800959e:	2200      	movs	r2, #0
 80095a0:	4607      	mov	r7, r0
 80095a2:	2300      	movs	r3, #0
 80095a4:	4620      	mov	r0, r4
 80095a6:	4629      	mov	r1, r5
 80095a8:	f7f7 fa70 	bl	8000a8c <__aeabi_dcmplt>
 80095ac:	b140      	cbz	r0, 80095c0 <_dtoa_r+0x168>
 80095ae:	4638      	mov	r0, r7
 80095b0:	f7f6 ff90 	bl	80004d4 <__aeabi_i2d>
 80095b4:	4622      	mov	r2, r4
 80095b6:	462b      	mov	r3, r5
 80095b8:	f7f7 fa5e 	bl	8000a78 <__aeabi_dcmpeq>
 80095bc:	b900      	cbnz	r0, 80095c0 <_dtoa_r+0x168>
 80095be:	3f01      	subs	r7, #1
 80095c0:	2f16      	cmp	r7, #22
 80095c2:	d853      	bhi.n	800966c <_dtoa_r+0x214>
 80095c4:	4b5f      	ldr	r3, [pc, #380]	@ (8009744 <_dtoa_r+0x2ec>)
 80095c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095d2:	f7f7 fa5b 	bl	8000a8c <__aeabi_dcmplt>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d04a      	beq.n	8009670 <_dtoa_r+0x218>
 80095da:	3f01      	subs	r7, #1
 80095dc:	2300      	movs	r3, #0
 80095de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095e2:	1b9b      	subs	r3, r3, r6
 80095e4:	1e5a      	subs	r2, r3, #1
 80095e6:	bf45      	ittet	mi
 80095e8:	f1c3 0301 	rsbmi	r3, r3, #1
 80095ec:	9304      	strmi	r3, [sp, #16]
 80095ee:	2300      	movpl	r3, #0
 80095f0:	2300      	movmi	r3, #0
 80095f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80095f4:	bf54      	ite	pl
 80095f6:	9304      	strpl	r3, [sp, #16]
 80095f8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80095fa:	2f00      	cmp	r7, #0
 80095fc:	db3a      	blt.n	8009674 <_dtoa_r+0x21c>
 80095fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009600:	970e      	str	r7, [sp, #56]	@ 0x38
 8009602:	443b      	add	r3, r7
 8009604:	9309      	str	r3, [sp, #36]	@ 0x24
 8009606:	2300      	movs	r3, #0
 8009608:	930a      	str	r3, [sp, #40]	@ 0x28
 800960a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800960c:	2b09      	cmp	r3, #9
 800960e:	d864      	bhi.n	80096da <_dtoa_r+0x282>
 8009610:	2b05      	cmp	r3, #5
 8009612:	bfc4      	itt	gt
 8009614:	3b04      	subgt	r3, #4
 8009616:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009618:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800961a:	f1a3 0302 	sub.w	r3, r3, #2
 800961e:	bfcc      	ite	gt
 8009620:	2400      	movgt	r4, #0
 8009622:	2401      	movle	r4, #1
 8009624:	2b03      	cmp	r3, #3
 8009626:	d864      	bhi.n	80096f2 <_dtoa_r+0x29a>
 8009628:	e8df f003 	tbb	[pc, r3]
 800962c:	2c385553 	.word	0x2c385553
 8009630:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009634:	441e      	add	r6, r3
 8009636:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800963a:	2b20      	cmp	r3, #32
 800963c:	bfc1      	itttt	gt
 800963e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009642:	fa08 f803 	lslgt.w	r8, r8, r3
 8009646:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800964a:	fa24 f303 	lsrgt.w	r3, r4, r3
 800964e:	bfd6      	itet	le
 8009650:	f1c3 0320 	rsble	r3, r3, #32
 8009654:	ea48 0003 	orrgt.w	r0, r8, r3
 8009658:	fa04 f003 	lslle.w	r0, r4, r3
 800965c:	f7f6 ff2a 	bl	80004b4 <__aeabi_ui2d>
 8009660:	2201      	movs	r2, #1
 8009662:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009666:	3e01      	subs	r6, #1
 8009668:	9212      	str	r2, [sp, #72]	@ 0x48
 800966a:	e775      	b.n	8009558 <_dtoa_r+0x100>
 800966c:	2301      	movs	r3, #1
 800966e:	e7b6      	b.n	80095de <_dtoa_r+0x186>
 8009670:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009672:	e7b5      	b.n	80095e0 <_dtoa_r+0x188>
 8009674:	9b04      	ldr	r3, [sp, #16]
 8009676:	1bdb      	subs	r3, r3, r7
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	427b      	negs	r3, r7
 800967c:	930a      	str	r3, [sp, #40]	@ 0x28
 800967e:	2300      	movs	r3, #0
 8009680:	930e      	str	r3, [sp, #56]	@ 0x38
 8009682:	e7c2      	b.n	800960a <_dtoa_r+0x1b2>
 8009684:	2301      	movs	r3, #1
 8009686:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009688:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800968a:	eb07 0b03 	add.w	fp, r7, r3
 800968e:	f10b 0301 	add.w	r3, fp, #1
 8009692:	2b01      	cmp	r3, #1
 8009694:	9308      	str	r3, [sp, #32]
 8009696:	bfb8      	it	lt
 8009698:	2301      	movlt	r3, #1
 800969a:	e006      	b.n	80096aa <_dtoa_r+0x252>
 800969c:	2301      	movs	r3, #1
 800969e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	dd28      	ble.n	80096f8 <_dtoa_r+0x2a0>
 80096a6:	469b      	mov	fp, r3
 80096a8:	9308      	str	r3, [sp, #32]
 80096aa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80096ae:	2100      	movs	r1, #0
 80096b0:	2204      	movs	r2, #4
 80096b2:	f102 0514 	add.w	r5, r2, #20
 80096b6:	429d      	cmp	r5, r3
 80096b8:	d926      	bls.n	8009708 <_dtoa_r+0x2b0>
 80096ba:	6041      	str	r1, [r0, #4]
 80096bc:	4648      	mov	r0, r9
 80096be:	f000 fd9b 	bl	800a1f8 <_Balloc>
 80096c2:	4682      	mov	sl, r0
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d141      	bne.n	800974c <_dtoa_r+0x2f4>
 80096c8:	4b1f      	ldr	r3, [pc, #124]	@ (8009748 <_dtoa_r+0x2f0>)
 80096ca:	4602      	mov	r2, r0
 80096cc:	f240 11af 	movw	r1, #431	@ 0x1af
 80096d0:	e6d6      	b.n	8009480 <_dtoa_r+0x28>
 80096d2:	2300      	movs	r3, #0
 80096d4:	e7e3      	b.n	800969e <_dtoa_r+0x246>
 80096d6:	2300      	movs	r3, #0
 80096d8:	e7d5      	b.n	8009686 <_dtoa_r+0x22e>
 80096da:	2401      	movs	r4, #1
 80096dc:	2300      	movs	r3, #0
 80096de:	9320      	str	r3, [sp, #128]	@ 0x80
 80096e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096e2:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8cd b020 	str.w	fp, [sp, #32]
 80096ec:	2312      	movs	r3, #18
 80096ee:	9221      	str	r2, [sp, #132]	@ 0x84
 80096f0:	e7db      	b.n	80096aa <_dtoa_r+0x252>
 80096f2:	2301      	movs	r3, #1
 80096f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096f6:	e7f4      	b.n	80096e2 <_dtoa_r+0x28a>
 80096f8:	f04f 0b01 	mov.w	fp, #1
 80096fc:	f8cd b020 	str.w	fp, [sp, #32]
 8009700:	465b      	mov	r3, fp
 8009702:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8009706:	e7d0      	b.n	80096aa <_dtoa_r+0x252>
 8009708:	3101      	adds	r1, #1
 800970a:	0052      	lsls	r2, r2, #1
 800970c:	e7d1      	b.n	80096b2 <_dtoa_r+0x25a>
 800970e:	bf00      	nop
 8009710:	636f4361 	.word	0x636f4361
 8009714:	3fd287a7 	.word	0x3fd287a7
 8009718:	8b60c8b3 	.word	0x8b60c8b3
 800971c:	3fc68a28 	.word	0x3fc68a28
 8009720:	509f79fb 	.word	0x509f79fb
 8009724:	3fd34413 	.word	0x3fd34413
 8009728:	0800ce7e 	.word	0x0800ce7e
 800972c:	0800ce95 	.word	0x0800ce95
 8009730:	7ff00000 	.word	0x7ff00000
 8009734:	0800ce7a 	.word	0x0800ce7a
 8009738:	0800ce49 	.word	0x0800ce49
 800973c:	0800ce48 	.word	0x0800ce48
 8009740:	3ff80000 	.word	0x3ff80000
 8009744:	0800d048 	.word	0x0800d048
 8009748:	0800ceed 	.word	0x0800ceed
 800974c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009750:	6018      	str	r0, [r3, #0]
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	2b0e      	cmp	r3, #14
 8009756:	f200 80a1 	bhi.w	800989c <_dtoa_r+0x444>
 800975a:	2c00      	cmp	r4, #0
 800975c:	f000 809e 	beq.w	800989c <_dtoa_r+0x444>
 8009760:	2f00      	cmp	r7, #0
 8009762:	dd33      	ble.n	80097cc <_dtoa_r+0x374>
 8009764:	4b9c      	ldr	r3, [pc, #624]	@ (80099d8 <_dtoa_r+0x580>)
 8009766:	f007 020f 	and.w	r2, r7, #15
 800976a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800976e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009772:	05f8      	lsls	r0, r7, #23
 8009774:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009778:	ea4f 1427 	mov.w	r4, r7, asr #4
 800977c:	d516      	bpl.n	80097ac <_dtoa_r+0x354>
 800977e:	4b97      	ldr	r3, [pc, #604]	@ (80099dc <_dtoa_r+0x584>)
 8009780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009788:	f7f7 f838 	bl	80007fc <__aeabi_ddiv>
 800978c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009790:	f004 040f 	and.w	r4, r4, #15
 8009794:	2603      	movs	r6, #3
 8009796:	4d91      	ldr	r5, [pc, #580]	@ (80099dc <_dtoa_r+0x584>)
 8009798:	b954      	cbnz	r4, 80097b0 <_dtoa_r+0x358>
 800979a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800979e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097a2:	f7f7 f82b 	bl	80007fc <__aeabi_ddiv>
 80097a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80097aa:	e028      	b.n	80097fe <_dtoa_r+0x3a6>
 80097ac:	2602      	movs	r6, #2
 80097ae:	e7f2      	b.n	8009796 <_dtoa_r+0x33e>
 80097b0:	07e1      	lsls	r1, r4, #31
 80097b2:	d508      	bpl.n	80097c6 <_dtoa_r+0x36e>
 80097b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097bc:	f7f6 fef4 	bl	80005a8 <__aeabi_dmul>
 80097c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097c4:	3601      	adds	r6, #1
 80097c6:	1064      	asrs	r4, r4, #1
 80097c8:	3508      	adds	r5, #8
 80097ca:	e7e5      	b.n	8009798 <_dtoa_r+0x340>
 80097cc:	f000 80af 	beq.w	800992e <_dtoa_r+0x4d6>
 80097d0:	427c      	negs	r4, r7
 80097d2:	4b81      	ldr	r3, [pc, #516]	@ (80099d8 <_dtoa_r+0x580>)
 80097d4:	4d81      	ldr	r5, [pc, #516]	@ (80099dc <_dtoa_r+0x584>)
 80097d6:	f004 020f 	and.w	r2, r4, #15
 80097da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097e6:	f7f6 fedf 	bl	80005a8 <__aeabi_dmul>
 80097ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80097ee:	1124      	asrs	r4, r4, #4
 80097f0:	2300      	movs	r3, #0
 80097f2:	2602      	movs	r6, #2
 80097f4:	2c00      	cmp	r4, #0
 80097f6:	f040 808f 	bne.w	8009918 <_dtoa_r+0x4c0>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1d3      	bne.n	80097a6 <_dtoa_r+0x34e>
 80097fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009800:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8094 	beq.w	8009932 <_dtoa_r+0x4da>
 800980a:	4b75      	ldr	r3, [pc, #468]	@ (80099e0 <_dtoa_r+0x588>)
 800980c:	2200      	movs	r2, #0
 800980e:	4620      	mov	r0, r4
 8009810:	4629      	mov	r1, r5
 8009812:	f7f7 f93b 	bl	8000a8c <__aeabi_dcmplt>
 8009816:	2800      	cmp	r0, #0
 8009818:	f000 808b 	beq.w	8009932 <_dtoa_r+0x4da>
 800981c:	9b08      	ldr	r3, [sp, #32]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 8087 	beq.w	8009932 <_dtoa_r+0x4da>
 8009824:	f1bb 0f00 	cmp.w	fp, #0
 8009828:	dd34      	ble.n	8009894 <_dtoa_r+0x43c>
 800982a:	4620      	mov	r0, r4
 800982c:	4b6d      	ldr	r3, [pc, #436]	@ (80099e4 <_dtoa_r+0x58c>)
 800982e:	2200      	movs	r2, #0
 8009830:	4629      	mov	r1, r5
 8009832:	f7f6 feb9 	bl	80005a8 <__aeabi_dmul>
 8009836:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800983a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800983e:	3601      	adds	r6, #1
 8009840:	465c      	mov	r4, fp
 8009842:	4630      	mov	r0, r6
 8009844:	f7f6 fe46 	bl	80004d4 <__aeabi_i2d>
 8009848:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800984c:	f7f6 feac 	bl	80005a8 <__aeabi_dmul>
 8009850:	4b65      	ldr	r3, [pc, #404]	@ (80099e8 <_dtoa_r+0x590>)
 8009852:	2200      	movs	r2, #0
 8009854:	f7f6 fcf2 	bl	800023c <__adddf3>
 8009858:	4605      	mov	r5, r0
 800985a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800985e:	2c00      	cmp	r4, #0
 8009860:	d16a      	bne.n	8009938 <_dtoa_r+0x4e0>
 8009862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009866:	4b61      	ldr	r3, [pc, #388]	@ (80099ec <_dtoa_r+0x594>)
 8009868:	2200      	movs	r2, #0
 800986a:	f7f6 fce5 	bl	8000238 <__aeabi_dsub>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009876:	462a      	mov	r2, r5
 8009878:	4633      	mov	r3, r6
 800987a:	f7f7 f925 	bl	8000ac8 <__aeabi_dcmpgt>
 800987e:	2800      	cmp	r0, #0
 8009880:	f040 8298 	bne.w	8009db4 <_dtoa_r+0x95c>
 8009884:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009888:	462a      	mov	r2, r5
 800988a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800988e:	f7f7 f8fd 	bl	8000a8c <__aeabi_dcmplt>
 8009892:	bb38      	cbnz	r0, 80098e4 <_dtoa_r+0x48c>
 8009894:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009898:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800989c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f2c0 8157 	blt.w	8009b52 <_dtoa_r+0x6fa>
 80098a4:	2f0e      	cmp	r7, #14
 80098a6:	f300 8154 	bgt.w	8009b52 <_dtoa_r+0x6fa>
 80098aa:	4b4b      	ldr	r3, [pc, #300]	@ (80099d8 <_dtoa_r+0x580>)
 80098ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80098b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f280 80e5 	bge.w	8009a8a <_dtoa_r+0x632>
 80098c0:	9b08      	ldr	r3, [sp, #32]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f300 80e1 	bgt.w	8009a8a <_dtoa_r+0x632>
 80098c8:	d10c      	bne.n	80098e4 <_dtoa_r+0x48c>
 80098ca:	4b48      	ldr	r3, [pc, #288]	@ (80099ec <_dtoa_r+0x594>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098d2:	f7f6 fe69 	bl	80005a8 <__aeabi_dmul>
 80098d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098da:	f7f7 f8eb 	bl	8000ab4 <__aeabi_dcmpge>
 80098de:	2800      	cmp	r0, #0
 80098e0:	f000 8266 	beq.w	8009db0 <_dtoa_r+0x958>
 80098e4:	2400      	movs	r4, #0
 80098e6:	4625      	mov	r5, r4
 80098e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098ea:	4656      	mov	r6, sl
 80098ec:	ea6f 0803 	mvn.w	r8, r3
 80098f0:	2700      	movs	r7, #0
 80098f2:	4621      	mov	r1, r4
 80098f4:	4648      	mov	r0, r9
 80098f6:	f000 fcbf 	bl	800a278 <_Bfree>
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	f000 80bd 	beq.w	8009a7a <_dtoa_r+0x622>
 8009900:	b12f      	cbz	r7, 800990e <_dtoa_r+0x4b6>
 8009902:	42af      	cmp	r7, r5
 8009904:	d003      	beq.n	800990e <_dtoa_r+0x4b6>
 8009906:	4639      	mov	r1, r7
 8009908:	4648      	mov	r0, r9
 800990a:	f000 fcb5 	bl	800a278 <_Bfree>
 800990e:	4629      	mov	r1, r5
 8009910:	4648      	mov	r0, r9
 8009912:	f000 fcb1 	bl	800a278 <_Bfree>
 8009916:	e0b0      	b.n	8009a7a <_dtoa_r+0x622>
 8009918:	07e2      	lsls	r2, r4, #31
 800991a:	d505      	bpl.n	8009928 <_dtoa_r+0x4d0>
 800991c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009920:	f7f6 fe42 	bl	80005a8 <__aeabi_dmul>
 8009924:	3601      	adds	r6, #1
 8009926:	2301      	movs	r3, #1
 8009928:	1064      	asrs	r4, r4, #1
 800992a:	3508      	adds	r5, #8
 800992c:	e762      	b.n	80097f4 <_dtoa_r+0x39c>
 800992e:	2602      	movs	r6, #2
 8009930:	e765      	b.n	80097fe <_dtoa_r+0x3a6>
 8009932:	9c08      	ldr	r4, [sp, #32]
 8009934:	46b8      	mov	r8, r7
 8009936:	e784      	b.n	8009842 <_dtoa_r+0x3ea>
 8009938:	4b27      	ldr	r3, [pc, #156]	@ (80099d8 <_dtoa_r+0x580>)
 800993a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800993c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009940:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009944:	4454      	add	r4, sl
 8009946:	2900      	cmp	r1, #0
 8009948:	d054      	beq.n	80099f4 <_dtoa_r+0x59c>
 800994a:	4929      	ldr	r1, [pc, #164]	@ (80099f0 <_dtoa_r+0x598>)
 800994c:	2000      	movs	r0, #0
 800994e:	f7f6 ff55 	bl	80007fc <__aeabi_ddiv>
 8009952:	4633      	mov	r3, r6
 8009954:	462a      	mov	r2, r5
 8009956:	f7f6 fc6f 	bl	8000238 <__aeabi_dsub>
 800995a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800995e:	4656      	mov	r6, sl
 8009960:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009964:	f7f7 f8d0 	bl	8000b08 <__aeabi_d2iz>
 8009968:	4605      	mov	r5, r0
 800996a:	f7f6 fdb3 	bl	80004d4 <__aeabi_i2d>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009976:	f7f6 fc5f 	bl	8000238 <__aeabi_dsub>
 800997a:	3530      	adds	r5, #48	@ 0x30
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009984:	f806 5b01 	strb.w	r5, [r6], #1
 8009988:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800998c:	f7f7 f87e 	bl	8000a8c <__aeabi_dcmplt>
 8009990:	2800      	cmp	r0, #0
 8009992:	d172      	bne.n	8009a7a <_dtoa_r+0x622>
 8009994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009998:	4911      	ldr	r1, [pc, #68]	@ (80099e0 <_dtoa_r+0x588>)
 800999a:	2000      	movs	r0, #0
 800999c:	f7f6 fc4c 	bl	8000238 <__aeabi_dsub>
 80099a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099a4:	f7f7 f872 	bl	8000a8c <__aeabi_dcmplt>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f040 80b4 	bne.w	8009b16 <_dtoa_r+0x6be>
 80099ae:	42a6      	cmp	r6, r4
 80099b0:	f43f af70 	beq.w	8009894 <_dtoa_r+0x43c>
 80099b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099b8:	4b0a      	ldr	r3, [pc, #40]	@ (80099e4 <_dtoa_r+0x58c>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	f7f6 fdf4 	bl	80005a8 <__aeabi_dmul>
 80099c0:	4b08      	ldr	r3, [pc, #32]	@ (80099e4 <_dtoa_r+0x58c>)
 80099c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099c6:	2200      	movs	r2, #0
 80099c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099cc:	f7f6 fdec 	bl	80005a8 <__aeabi_dmul>
 80099d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099d4:	e7c4      	b.n	8009960 <_dtoa_r+0x508>
 80099d6:	bf00      	nop
 80099d8:	0800d048 	.word	0x0800d048
 80099dc:	0800d020 	.word	0x0800d020
 80099e0:	3ff00000 	.word	0x3ff00000
 80099e4:	40240000 	.word	0x40240000
 80099e8:	401c0000 	.word	0x401c0000
 80099ec:	40140000 	.word	0x40140000
 80099f0:	3fe00000 	.word	0x3fe00000
 80099f4:	4631      	mov	r1, r6
 80099f6:	4628      	mov	r0, r5
 80099f8:	f7f6 fdd6 	bl	80005a8 <__aeabi_dmul>
 80099fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a00:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a02:	4656      	mov	r6, sl
 8009a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a08:	f7f7 f87e 	bl	8000b08 <__aeabi_d2iz>
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	f7f6 fd61 	bl	80004d4 <__aeabi_i2d>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a1a:	f7f6 fc0d 	bl	8000238 <__aeabi_dsub>
 8009a1e:	3530      	adds	r5, #48	@ 0x30
 8009a20:	f806 5b01 	strb.w	r5, [r6], #1
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	42a6      	cmp	r6, r4
 8009a2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a2e:	f04f 0200 	mov.w	r2, #0
 8009a32:	d124      	bne.n	8009a7e <_dtoa_r+0x626>
 8009a34:	4baf      	ldr	r3, [pc, #700]	@ (8009cf4 <_dtoa_r+0x89c>)
 8009a36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a3a:	f7f6 fbff 	bl	800023c <__adddf3>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a46:	f7f7 f83f 	bl	8000ac8 <__aeabi_dcmpgt>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d163      	bne.n	8009b16 <_dtoa_r+0x6be>
 8009a4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a52:	49a8      	ldr	r1, [pc, #672]	@ (8009cf4 <_dtoa_r+0x89c>)
 8009a54:	2000      	movs	r0, #0
 8009a56:	f7f6 fbef 	bl	8000238 <__aeabi_dsub>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a62:	f7f7 f813 	bl	8000a8c <__aeabi_dcmplt>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	f43f af14 	beq.w	8009894 <_dtoa_r+0x43c>
 8009a6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a6e:	1e73      	subs	r3, r6, #1
 8009a70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a76:	2b30      	cmp	r3, #48	@ 0x30
 8009a78:	d0f8      	beq.n	8009a6c <_dtoa_r+0x614>
 8009a7a:	4647      	mov	r7, r8
 8009a7c:	e03b      	b.n	8009af6 <_dtoa_r+0x69e>
 8009a7e:	4b9e      	ldr	r3, [pc, #632]	@ (8009cf8 <_dtoa_r+0x8a0>)
 8009a80:	f7f6 fd92 	bl	80005a8 <__aeabi_dmul>
 8009a84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a88:	e7bc      	b.n	8009a04 <_dtoa_r+0x5ac>
 8009a8a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009a8e:	4656      	mov	r6, sl
 8009a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a94:	4620      	mov	r0, r4
 8009a96:	4629      	mov	r1, r5
 8009a98:	f7f6 feb0 	bl	80007fc <__aeabi_ddiv>
 8009a9c:	f7f7 f834 	bl	8000b08 <__aeabi_d2iz>
 8009aa0:	4680      	mov	r8, r0
 8009aa2:	f7f6 fd17 	bl	80004d4 <__aeabi_i2d>
 8009aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aaa:	f7f6 fd7d 	bl	80005a8 <__aeabi_dmul>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009aba:	f7f6 fbbd 	bl	8000238 <__aeabi_dsub>
 8009abe:	f806 4b01 	strb.w	r4, [r6], #1
 8009ac2:	9d08      	ldr	r5, [sp, #32]
 8009ac4:	eba6 040a 	sub.w	r4, r6, sl
 8009ac8:	42a5      	cmp	r5, r4
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	d133      	bne.n	8009b38 <_dtoa_r+0x6e0>
 8009ad0:	f7f6 fbb4 	bl	800023c <__adddf3>
 8009ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ad8:	4604      	mov	r4, r0
 8009ada:	460d      	mov	r5, r1
 8009adc:	f7f6 fff4 	bl	8000ac8 <__aeabi_dcmpgt>
 8009ae0:	b9c0      	cbnz	r0, 8009b14 <_dtoa_r+0x6bc>
 8009ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7f6 ffc5 	bl	8000a78 <__aeabi_dcmpeq>
 8009aee:	b110      	cbz	r0, 8009af6 <_dtoa_r+0x69e>
 8009af0:	f018 0f01 	tst.w	r8, #1
 8009af4:	d10e      	bne.n	8009b14 <_dtoa_r+0x6bc>
 8009af6:	9903      	ldr	r1, [sp, #12]
 8009af8:	4648      	mov	r0, r9
 8009afa:	f000 fbbd 	bl	800a278 <_Bfree>
 8009afe:	2300      	movs	r3, #0
 8009b00:	7033      	strb	r3, [r6, #0]
 8009b02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009b04:	3701      	adds	r7, #1
 8009b06:	601f      	str	r7, [r3, #0]
 8009b08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 824b 	beq.w	8009fa6 <_dtoa_r+0xb4e>
 8009b10:	601e      	str	r6, [r3, #0]
 8009b12:	e248      	b.n	8009fa6 <_dtoa_r+0xb4e>
 8009b14:	46b8      	mov	r8, r7
 8009b16:	4633      	mov	r3, r6
 8009b18:	461e      	mov	r6, r3
 8009b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b1e:	2a39      	cmp	r2, #57	@ 0x39
 8009b20:	d106      	bne.n	8009b30 <_dtoa_r+0x6d8>
 8009b22:	459a      	cmp	sl, r3
 8009b24:	d1f8      	bne.n	8009b18 <_dtoa_r+0x6c0>
 8009b26:	2230      	movs	r2, #48	@ 0x30
 8009b28:	f108 0801 	add.w	r8, r8, #1
 8009b2c:	f88a 2000 	strb.w	r2, [sl]
 8009b30:	781a      	ldrb	r2, [r3, #0]
 8009b32:	3201      	adds	r2, #1
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	e7a0      	b.n	8009a7a <_dtoa_r+0x622>
 8009b38:	4b6f      	ldr	r3, [pc, #444]	@ (8009cf8 <_dtoa_r+0x8a0>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f7f6 fd34 	bl	80005a8 <__aeabi_dmul>
 8009b40:	2200      	movs	r2, #0
 8009b42:	2300      	movs	r3, #0
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	f7f6 ff96 	bl	8000a78 <__aeabi_dcmpeq>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d09f      	beq.n	8009a90 <_dtoa_r+0x638>
 8009b50:	e7d1      	b.n	8009af6 <_dtoa_r+0x69e>
 8009b52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b54:	2a00      	cmp	r2, #0
 8009b56:	f000 80ea 	beq.w	8009d2e <_dtoa_r+0x8d6>
 8009b5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009b5c:	2a01      	cmp	r2, #1
 8009b5e:	f300 80cd 	bgt.w	8009cfc <_dtoa_r+0x8a4>
 8009b62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b64:	2a00      	cmp	r2, #0
 8009b66:	f000 80c1 	beq.w	8009cec <_dtoa_r+0x894>
 8009b6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b70:	9e04      	ldr	r6, [sp, #16]
 8009b72:	9a04      	ldr	r2, [sp, #16]
 8009b74:	441a      	add	r2, r3
 8009b76:	9204      	str	r2, [sp, #16]
 8009b78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	441a      	add	r2, r3
 8009b7e:	4648      	mov	r0, r9
 8009b80:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b82:	f000 fc77 	bl	800a474 <__i2b>
 8009b86:	4605      	mov	r5, r0
 8009b88:	b166      	cbz	r6, 8009ba4 <_dtoa_r+0x74c>
 8009b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dd09      	ble.n	8009ba4 <_dtoa_r+0x74c>
 8009b90:	42b3      	cmp	r3, r6
 8009b92:	9a04      	ldr	r2, [sp, #16]
 8009b94:	bfa8      	it	ge
 8009b96:	4633      	movge	r3, r6
 8009b98:	1ad2      	subs	r2, r2, r3
 8009b9a:	9204      	str	r2, [sp, #16]
 8009b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b9e:	1af6      	subs	r6, r6, r3
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ba6:	b30b      	cbz	r3, 8009bec <_dtoa_r+0x794>
 8009ba8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 80c6 	beq.w	8009d3c <_dtoa_r+0x8e4>
 8009bb0:	2c00      	cmp	r4, #0
 8009bb2:	f000 80c0 	beq.w	8009d36 <_dtoa_r+0x8de>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4648      	mov	r0, r9
 8009bbc:	f000 fd12 	bl	800a5e4 <__pow5mult>
 8009bc0:	9a03      	ldr	r2, [sp, #12]
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	4648      	mov	r0, r9
 8009bc8:	f000 fc6a 	bl	800a4a0 <__multiply>
 8009bcc:	9903      	ldr	r1, [sp, #12]
 8009bce:	4680      	mov	r8, r0
 8009bd0:	4648      	mov	r0, r9
 8009bd2:	f000 fb51 	bl	800a278 <_Bfree>
 8009bd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bd8:	1b1b      	subs	r3, r3, r4
 8009bda:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bdc:	f000 80b1 	beq.w	8009d42 <_dtoa_r+0x8ea>
 8009be0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009be2:	4641      	mov	r1, r8
 8009be4:	4648      	mov	r0, r9
 8009be6:	f000 fcfd 	bl	800a5e4 <__pow5mult>
 8009bea:	9003      	str	r0, [sp, #12]
 8009bec:	2101      	movs	r1, #1
 8009bee:	4648      	mov	r0, r9
 8009bf0:	f000 fc40 	bl	800a474 <__i2b>
 8009bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 81d8 	beq.w	8009fae <_dtoa_r+0xb56>
 8009bfe:	461a      	mov	r2, r3
 8009c00:	4601      	mov	r1, r0
 8009c02:	4648      	mov	r0, r9
 8009c04:	f000 fcee 	bl	800a5e4 <__pow5mult>
 8009c08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	f300 809f 	bgt.w	8009d50 <_dtoa_r+0x8f8>
 8009c12:	9b06      	ldr	r3, [sp, #24]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f040 8097 	bne.w	8009d48 <_dtoa_r+0x8f0>
 8009c1a:	9b07      	ldr	r3, [sp, #28]
 8009c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f040 8093 	bne.w	8009d4c <_dtoa_r+0x8f4>
 8009c26:	9b07      	ldr	r3, [sp, #28]
 8009c28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c2c:	0d1b      	lsrs	r3, r3, #20
 8009c2e:	051b      	lsls	r3, r3, #20
 8009c30:	b133      	cbz	r3, 8009c40 <_dtoa_r+0x7e8>
 8009c32:	9b04      	ldr	r3, [sp, #16]
 8009c34:	3301      	adds	r3, #1
 8009c36:	9304      	str	r3, [sp, #16]
 8009c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c3e:	2301      	movs	r3, #1
 8009c40:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 81b8 	beq.w	8009fba <_dtoa_r+0xb62>
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c50:	6918      	ldr	r0, [r3, #16]
 8009c52:	f000 fbc3 	bl	800a3dc <__hi0bits>
 8009c56:	f1c0 0020 	rsb	r0, r0, #32
 8009c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c5c:	4418      	add	r0, r3
 8009c5e:	f010 001f 	ands.w	r0, r0, #31
 8009c62:	f000 8082 	beq.w	8009d6a <_dtoa_r+0x912>
 8009c66:	f1c0 0320 	rsb	r3, r0, #32
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	dd73      	ble.n	8009d56 <_dtoa_r+0x8fe>
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	f1c0 001c 	rsb	r0, r0, #28
 8009c74:	4403      	add	r3, r0
 8009c76:	9304      	str	r3, [sp, #16]
 8009c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7a:	4403      	add	r3, r0
 8009c7c:	4406      	add	r6, r0
 8009c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c80:	9b04      	ldr	r3, [sp, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd05      	ble.n	8009c92 <_dtoa_r+0x83a>
 8009c86:	9903      	ldr	r1, [sp, #12]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	4648      	mov	r0, r9
 8009c8c:	f000 fd04 	bl	800a698 <__lshift>
 8009c90:	9003      	str	r0, [sp, #12]
 8009c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dd05      	ble.n	8009ca4 <_dtoa_r+0x84c>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	4648      	mov	r0, r9
 8009c9e:	f000 fcfb 	bl	800a698 <__lshift>
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d061      	beq.n	8009d6e <_dtoa_r+0x916>
 8009caa:	9803      	ldr	r0, [sp, #12]
 8009cac:	4621      	mov	r1, r4
 8009cae:	f000 fd5f 	bl	800a770 <__mcmp>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	da5b      	bge.n	8009d6e <_dtoa_r+0x916>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9903      	ldr	r1, [sp, #12]
 8009cba:	220a      	movs	r2, #10
 8009cbc:	4648      	mov	r0, r9
 8009cbe:	f000 fafd 	bl	800a2bc <__multadd>
 8009cc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cc4:	9003      	str	r0, [sp, #12]
 8009cc6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 8177 	beq.w	8009fbe <_dtoa_r+0xb66>
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	4648      	mov	r0, r9
 8009cd8:	f000 faf0 	bl	800a2bc <__multadd>
 8009cdc:	f1bb 0f00 	cmp.w	fp, #0
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	dc6f      	bgt.n	8009dc4 <_dtoa_r+0x96c>
 8009ce4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	dc49      	bgt.n	8009d7e <_dtoa_r+0x926>
 8009cea:	e06b      	b.n	8009dc4 <_dtoa_r+0x96c>
 8009cec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cf2:	e73c      	b.n	8009b6e <_dtoa_r+0x716>
 8009cf4:	3fe00000 	.word	0x3fe00000
 8009cf8:	40240000 	.word	0x40240000
 8009cfc:	9b08      	ldr	r3, [sp, #32]
 8009cfe:	1e5c      	subs	r4, r3, #1
 8009d00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d02:	42a3      	cmp	r3, r4
 8009d04:	db09      	blt.n	8009d1a <_dtoa_r+0x8c2>
 8009d06:	1b1c      	subs	r4, r3, r4
 8009d08:	9b08      	ldr	r3, [sp, #32]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f6bf af30 	bge.w	8009b70 <_dtoa_r+0x718>
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	9a08      	ldr	r2, [sp, #32]
 8009d14:	1a9e      	subs	r6, r3, r2
 8009d16:	2300      	movs	r3, #0
 8009d18:	e72b      	b.n	8009b72 <_dtoa_r+0x71a>
 8009d1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d1e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d20:	1ae3      	subs	r3, r4, r3
 8009d22:	441a      	add	r2, r3
 8009d24:	9e04      	ldr	r6, [sp, #16]
 8009d26:	9b08      	ldr	r3, [sp, #32]
 8009d28:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d2a:	2400      	movs	r4, #0
 8009d2c:	e721      	b.n	8009b72 <_dtoa_r+0x71a>
 8009d2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d30:	9e04      	ldr	r6, [sp, #16]
 8009d32:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d34:	e728      	b.n	8009b88 <_dtoa_r+0x730>
 8009d36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d3a:	e751      	b.n	8009be0 <_dtoa_r+0x788>
 8009d3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d3e:	9903      	ldr	r1, [sp, #12]
 8009d40:	e750      	b.n	8009be4 <_dtoa_r+0x78c>
 8009d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d46:	e751      	b.n	8009bec <_dtoa_r+0x794>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	e779      	b.n	8009c40 <_dtoa_r+0x7e8>
 8009d4c:	9b06      	ldr	r3, [sp, #24]
 8009d4e:	e777      	b.n	8009c40 <_dtoa_r+0x7e8>
 8009d50:	2300      	movs	r3, #0
 8009d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d54:	e779      	b.n	8009c4a <_dtoa_r+0x7f2>
 8009d56:	d093      	beq.n	8009c80 <_dtoa_r+0x828>
 8009d58:	9a04      	ldr	r2, [sp, #16]
 8009d5a:	331c      	adds	r3, #28
 8009d5c:	441a      	add	r2, r3
 8009d5e:	9204      	str	r2, [sp, #16]
 8009d60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d62:	441a      	add	r2, r3
 8009d64:	441e      	add	r6, r3
 8009d66:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d68:	e78a      	b.n	8009c80 <_dtoa_r+0x828>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	e7f4      	b.n	8009d58 <_dtoa_r+0x900>
 8009d6e:	9b08      	ldr	r3, [sp, #32]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	46b8      	mov	r8, r7
 8009d74:	dc20      	bgt.n	8009db8 <_dtoa_r+0x960>
 8009d76:	469b      	mov	fp, r3
 8009d78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	dd1e      	ble.n	8009dbc <_dtoa_r+0x964>
 8009d7e:	f1bb 0f00 	cmp.w	fp, #0
 8009d82:	f47f adb1 	bne.w	80098e8 <_dtoa_r+0x490>
 8009d86:	4621      	mov	r1, r4
 8009d88:	465b      	mov	r3, fp
 8009d8a:	2205      	movs	r2, #5
 8009d8c:	4648      	mov	r0, r9
 8009d8e:	f000 fa95 	bl	800a2bc <__multadd>
 8009d92:	4601      	mov	r1, r0
 8009d94:	4604      	mov	r4, r0
 8009d96:	9803      	ldr	r0, [sp, #12]
 8009d98:	f000 fcea 	bl	800a770 <__mcmp>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f77f ada3 	ble.w	80098e8 <_dtoa_r+0x490>
 8009da2:	4656      	mov	r6, sl
 8009da4:	2331      	movs	r3, #49	@ 0x31
 8009da6:	f806 3b01 	strb.w	r3, [r6], #1
 8009daa:	f108 0801 	add.w	r8, r8, #1
 8009dae:	e59f      	b.n	80098f0 <_dtoa_r+0x498>
 8009db0:	9c08      	ldr	r4, [sp, #32]
 8009db2:	46b8      	mov	r8, r7
 8009db4:	4625      	mov	r5, r4
 8009db6:	e7f4      	b.n	8009da2 <_dtoa_r+0x94a>
 8009db8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009dbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 8101 	beq.w	8009fc6 <_dtoa_r+0xb6e>
 8009dc4:	2e00      	cmp	r6, #0
 8009dc6:	dd05      	ble.n	8009dd4 <_dtoa_r+0x97c>
 8009dc8:	4629      	mov	r1, r5
 8009dca:	4632      	mov	r2, r6
 8009dcc:	4648      	mov	r0, r9
 8009dce:	f000 fc63 	bl	800a698 <__lshift>
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d05c      	beq.n	8009e94 <_dtoa_r+0xa3c>
 8009dda:	6869      	ldr	r1, [r5, #4]
 8009ddc:	4648      	mov	r0, r9
 8009dde:	f000 fa0b 	bl	800a1f8 <_Balloc>
 8009de2:	4606      	mov	r6, r0
 8009de4:	b928      	cbnz	r0, 8009df2 <_dtoa_r+0x99a>
 8009de6:	4b82      	ldr	r3, [pc, #520]	@ (8009ff0 <_dtoa_r+0xb98>)
 8009de8:	4602      	mov	r2, r0
 8009dea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009dee:	f7ff bb47 	b.w	8009480 <_dtoa_r+0x28>
 8009df2:	692a      	ldr	r2, [r5, #16]
 8009df4:	3202      	adds	r2, #2
 8009df6:	0092      	lsls	r2, r2, #2
 8009df8:	f105 010c 	add.w	r1, r5, #12
 8009dfc:	300c      	adds	r0, #12
 8009dfe:	f7ff fa90 	bl	8009322 <memcpy>
 8009e02:	2201      	movs	r2, #1
 8009e04:	4631      	mov	r1, r6
 8009e06:	4648      	mov	r0, r9
 8009e08:	f000 fc46 	bl	800a698 <__lshift>
 8009e0c:	f10a 0301 	add.w	r3, sl, #1
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	eb0a 030b 	add.w	r3, sl, fp
 8009e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e18:	9b06      	ldr	r3, [sp, #24]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	462f      	mov	r7, r5
 8009e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e22:	4605      	mov	r5, r0
 8009e24:	9b04      	ldr	r3, [sp, #16]
 8009e26:	9803      	ldr	r0, [sp, #12]
 8009e28:	4621      	mov	r1, r4
 8009e2a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009e2e:	f7ff fa8b 	bl	8009348 <quorem>
 8009e32:	4603      	mov	r3, r0
 8009e34:	3330      	adds	r3, #48	@ 0x30
 8009e36:	9006      	str	r0, [sp, #24]
 8009e38:	4639      	mov	r1, r7
 8009e3a:	9803      	ldr	r0, [sp, #12]
 8009e3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e3e:	f000 fc97 	bl	800a770 <__mcmp>
 8009e42:	462a      	mov	r2, r5
 8009e44:	9008      	str	r0, [sp, #32]
 8009e46:	4621      	mov	r1, r4
 8009e48:	4648      	mov	r0, r9
 8009e4a:	f000 fcad 	bl	800a7a8 <__mdiff>
 8009e4e:	68c2      	ldr	r2, [r0, #12]
 8009e50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e52:	4606      	mov	r6, r0
 8009e54:	bb02      	cbnz	r2, 8009e98 <_dtoa_r+0xa40>
 8009e56:	4601      	mov	r1, r0
 8009e58:	9803      	ldr	r0, [sp, #12]
 8009e5a:	f000 fc89 	bl	800a770 <__mcmp>
 8009e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e60:	4602      	mov	r2, r0
 8009e62:	4631      	mov	r1, r6
 8009e64:	4648      	mov	r0, r9
 8009e66:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8009e6a:	f000 fa05 	bl	800a278 <_Bfree>
 8009e6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e72:	9e04      	ldr	r6, [sp, #16]
 8009e74:	ea42 0103 	orr.w	r1, r2, r3
 8009e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e7a:	4319      	orrs	r1, r3
 8009e7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e7e:	d10d      	bne.n	8009e9c <_dtoa_r+0xa44>
 8009e80:	2b39      	cmp	r3, #57	@ 0x39
 8009e82:	d027      	beq.n	8009ed4 <_dtoa_r+0xa7c>
 8009e84:	9a08      	ldr	r2, [sp, #32]
 8009e86:	2a00      	cmp	r2, #0
 8009e88:	dd01      	ble.n	8009e8e <_dtoa_r+0xa36>
 8009e8a:	9b06      	ldr	r3, [sp, #24]
 8009e8c:	3331      	adds	r3, #49	@ 0x31
 8009e8e:	f88b 3000 	strb.w	r3, [fp]
 8009e92:	e52e      	b.n	80098f2 <_dtoa_r+0x49a>
 8009e94:	4628      	mov	r0, r5
 8009e96:	e7b9      	b.n	8009e0c <_dtoa_r+0x9b4>
 8009e98:	2201      	movs	r2, #1
 8009e9a:	e7e2      	b.n	8009e62 <_dtoa_r+0xa0a>
 8009e9c:	9908      	ldr	r1, [sp, #32]
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	db04      	blt.n	8009eac <_dtoa_r+0xa54>
 8009ea2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8009ea4:	4301      	orrs	r1, r0
 8009ea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ea8:	4301      	orrs	r1, r0
 8009eaa:	d120      	bne.n	8009eee <_dtoa_r+0xa96>
 8009eac:	2a00      	cmp	r2, #0
 8009eae:	ddee      	ble.n	8009e8e <_dtoa_r+0xa36>
 8009eb0:	9903      	ldr	r1, [sp, #12]
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	4648      	mov	r0, r9
 8009eb8:	f000 fbee 	bl	800a698 <__lshift>
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	9003      	str	r0, [sp, #12]
 8009ec0:	f000 fc56 	bl	800a770 <__mcmp>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	9b04      	ldr	r3, [sp, #16]
 8009ec8:	dc02      	bgt.n	8009ed0 <_dtoa_r+0xa78>
 8009eca:	d1e0      	bne.n	8009e8e <_dtoa_r+0xa36>
 8009ecc:	07da      	lsls	r2, r3, #31
 8009ece:	d5de      	bpl.n	8009e8e <_dtoa_r+0xa36>
 8009ed0:	2b39      	cmp	r3, #57	@ 0x39
 8009ed2:	d1da      	bne.n	8009e8a <_dtoa_r+0xa32>
 8009ed4:	2339      	movs	r3, #57	@ 0x39
 8009ed6:	f88b 3000 	strb.w	r3, [fp]
 8009eda:	4633      	mov	r3, r6
 8009edc:	461e      	mov	r6, r3
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ee4:	2a39      	cmp	r2, #57	@ 0x39
 8009ee6:	d04e      	beq.n	8009f86 <_dtoa_r+0xb2e>
 8009ee8:	3201      	adds	r2, #1
 8009eea:	701a      	strb	r2, [r3, #0]
 8009eec:	e501      	b.n	80098f2 <_dtoa_r+0x49a>
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	dd03      	ble.n	8009efa <_dtoa_r+0xaa2>
 8009ef2:	2b39      	cmp	r3, #57	@ 0x39
 8009ef4:	d0ee      	beq.n	8009ed4 <_dtoa_r+0xa7c>
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	e7c9      	b.n	8009e8e <_dtoa_r+0xa36>
 8009efa:	9a04      	ldr	r2, [sp, #16]
 8009efc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009efe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f02:	428a      	cmp	r2, r1
 8009f04:	d028      	beq.n	8009f58 <_dtoa_r+0xb00>
 8009f06:	9903      	ldr	r1, [sp, #12]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	220a      	movs	r2, #10
 8009f0c:	4648      	mov	r0, r9
 8009f0e:	f000 f9d5 	bl	800a2bc <__multadd>
 8009f12:	42af      	cmp	r7, r5
 8009f14:	9003      	str	r0, [sp, #12]
 8009f16:	f04f 0300 	mov.w	r3, #0
 8009f1a:	f04f 020a 	mov.w	r2, #10
 8009f1e:	4639      	mov	r1, r7
 8009f20:	4648      	mov	r0, r9
 8009f22:	d107      	bne.n	8009f34 <_dtoa_r+0xadc>
 8009f24:	f000 f9ca 	bl	800a2bc <__multadd>
 8009f28:	4607      	mov	r7, r0
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	9b04      	ldr	r3, [sp, #16]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	e777      	b.n	8009e24 <_dtoa_r+0x9cc>
 8009f34:	f000 f9c2 	bl	800a2bc <__multadd>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	220a      	movs	r2, #10
 8009f40:	4648      	mov	r0, r9
 8009f42:	f000 f9bb 	bl	800a2bc <__multadd>
 8009f46:	4605      	mov	r5, r0
 8009f48:	e7f0      	b.n	8009f2c <_dtoa_r+0xad4>
 8009f4a:	f1bb 0f00 	cmp.w	fp, #0
 8009f4e:	bfcc      	ite	gt
 8009f50:	465e      	movgt	r6, fp
 8009f52:	2601      	movle	r6, #1
 8009f54:	4456      	add	r6, sl
 8009f56:	2700      	movs	r7, #0
 8009f58:	9903      	ldr	r1, [sp, #12]
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	4648      	mov	r0, r9
 8009f60:	f000 fb9a 	bl	800a698 <__lshift>
 8009f64:	4621      	mov	r1, r4
 8009f66:	9003      	str	r0, [sp, #12]
 8009f68:	f000 fc02 	bl	800a770 <__mcmp>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	dcb4      	bgt.n	8009eda <_dtoa_r+0xa82>
 8009f70:	d102      	bne.n	8009f78 <_dtoa_r+0xb20>
 8009f72:	9b04      	ldr	r3, [sp, #16]
 8009f74:	07db      	lsls	r3, r3, #31
 8009f76:	d4b0      	bmi.n	8009eda <_dtoa_r+0xa82>
 8009f78:	4633      	mov	r3, r6
 8009f7a:	461e      	mov	r6, r3
 8009f7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f80:	2a30      	cmp	r2, #48	@ 0x30
 8009f82:	d0fa      	beq.n	8009f7a <_dtoa_r+0xb22>
 8009f84:	e4b5      	b.n	80098f2 <_dtoa_r+0x49a>
 8009f86:	459a      	cmp	sl, r3
 8009f88:	d1a8      	bne.n	8009edc <_dtoa_r+0xa84>
 8009f8a:	2331      	movs	r3, #49	@ 0x31
 8009f8c:	f108 0801 	add.w	r8, r8, #1
 8009f90:	f88a 3000 	strb.w	r3, [sl]
 8009f94:	e4ad      	b.n	80098f2 <_dtoa_r+0x49a>
 8009f96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009ff4 <_dtoa_r+0xb9c>
 8009f9c:	b11b      	cbz	r3, 8009fa6 <_dtoa_r+0xb4e>
 8009f9e:	f10a 0308 	add.w	r3, sl, #8
 8009fa2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	4650      	mov	r0, sl
 8009fa8:	b017      	add	sp, #92	@ 0x5c
 8009faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	f77f ae2e 	ble.w	8009c12 <_dtoa_r+0x7ba>
 8009fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fba:	2001      	movs	r0, #1
 8009fbc:	e64d      	b.n	8009c5a <_dtoa_r+0x802>
 8009fbe:	f1bb 0f00 	cmp.w	fp, #0
 8009fc2:	f77f aed9 	ble.w	8009d78 <_dtoa_r+0x920>
 8009fc6:	4656      	mov	r6, sl
 8009fc8:	9803      	ldr	r0, [sp, #12]
 8009fca:	4621      	mov	r1, r4
 8009fcc:	f7ff f9bc 	bl	8009348 <quorem>
 8009fd0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009fd4:	f806 3b01 	strb.w	r3, [r6], #1
 8009fd8:	eba6 020a 	sub.w	r2, r6, sl
 8009fdc:	4593      	cmp	fp, r2
 8009fde:	ddb4      	ble.n	8009f4a <_dtoa_r+0xaf2>
 8009fe0:	9903      	ldr	r1, [sp, #12]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	220a      	movs	r2, #10
 8009fe6:	4648      	mov	r0, r9
 8009fe8:	f000 f968 	bl	800a2bc <__multadd>
 8009fec:	9003      	str	r0, [sp, #12]
 8009fee:	e7eb      	b.n	8009fc8 <_dtoa_r+0xb70>
 8009ff0:	0800ceed 	.word	0x0800ceed
 8009ff4:	0800ce71 	.word	0x0800ce71

08009ff8 <_free_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	d041      	beq.n	800a084 <_free_r+0x8c>
 800a000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a004:	1f0c      	subs	r4, r1, #4
 800a006:	2b00      	cmp	r3, #0
 800a008:	bfb8      	it	lt
 800a00a:	18e4      	addlt	r4, r4, r3
 800a00c:	f000 f8e8 	bl	800a1e0 <__malloc_lock>
 800a010:	4a1d      	ldr	r2, [pc, #116]	@ (800a088 <_free_r+0x90>)
 800a012:	6813      	ldr	r3, [r2, #0]
 800a014:	b933      	cbnz	r3, 800a024 <_free_r+0x2c>
 800a016:	6063      	str	r3, [r4, #4]
 800a018:	6014      	str	r4, [r2, #0]
 800a01a:	4628      	mov	r0, r5
 800a01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a020:	f000 b8e4 	b.w	800a1ec <__malloc_unlock>
 800a024:	42a3      	cmp	r3, r4
 800a026:	d908      	bls.n	800a03a <_free_r+0x42>
 800a028:	6820      	ldr	r0, [r4, #0]
 800a02a:	1821      	adds	r1, r4, r0
 800a02c:	428b      	cmp	r3, r1
 800a02e:	bf01      	itttt	eq
 800a030:	6819      	ldreq	r1, [r3, #0]
 800a032:	685b      	ldreq	r3, [r3, #4]
 800a034:	1809      	addeq	r1, r1, r0
 800a036:	6021      	streq	r1, [r4, #0]
 800a038:	e7ed      	b.n	800a016 <_free_r+0x1e>
 800a03a:	461a      	mov	r2, r3
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	b10b      	cbz	r3, 800a044 <_free_r+0x4c>
 800a040:	42a3      	cmp	r3, r4
 800a042:	d9fa      	bls.n	800a03a <_free_r+0x42>
 800a044:	6811      	ldr	r1, [r2, #0]
 800a046:	1850      	adds	r0, r2, r1
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d10b      	bne.n	800a064 <_free_r+0x6c>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	4401      	add	r1, r0
 800a050:	1850      	adds	r0, r2, r1
 800a052:	4283      	cmp	r3, r0
 800a054:	6011      	str	r1, [r2, #0]
 800a056:	d1e0      	bne.n	800a01a <_free_r+0x22>
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	6053      	str	r3, [r2, #4]
 800a05e:	4408      	add	r0, r1
 800a060:	6010      	str	r0, [r2, #0]
 800a062:	e7da      	b.n	800a01a <_free_r+0x22>
 800a064:	d902      	bls.n	800a06c <_free_r+0x74>
 800a066:	230c      	movs	r3, #12
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	e7d6      	b.n	800a01a <_free_r+0x22>
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	1821      	adds	r1, r4, r0
 800a070:	428b      	cmp	r3, r1
 800a072:	bf04      	itt	eq
 800a074:	6819      	ldreq	r1, [r3, #0]
 800a076:	685b      	ldreq	r3, [r3, #4]
 800a078:	6063      	str	r3, [r4, #4]
 800a07a:	bf04      	itt	eq
 800a07c:	1809      	addeq	r1, r1, r0
 800a07e:	6021      	streq	r1, [r4, #0]
 800a080:	6054      	str	r4, [r2, #4]
 800a082:	e7ca      	b.n	800a01a <_free_r+0x22>
 800a084:	bd38      	pop	{r3, r4, r5, pc}
 800a086:	bf00      	nop
 800a088:	200004e0 	.word	0x200004e0

0800a08c <malloc>:
 800a08c:	4b02      	ldr	r3, [pc, #8]	@ (800a098 <malloc+0xc>)
 800a08e:	4601      	mov	r1, r0
 800a090:	6818      	ldr	r0, [r3, #0]
 800a092:	f000 b825 	b.w	800a0e0 <_malloc_r>
 800a096:	bf00      	nop
 800a098:	20000028 	.word	0x20000028

0800a09c <sbrk_aligned>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	4e0f      	ldr	r6, [pc, #60]	@ (800a0dc <sbrk_aligned+0x40>)
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	6831      	ldr	r1, [r6, #0]
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	b911      	cbnz	r1, 800a0ae <sbrk_aligned+0x12>
 800a0a8:	f001 ffb0 	bl	800c00c <_sbrk_r>
 800a0ac:	6030      	str	r0, [r6, #0]
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f001 ffab 	bl	800c00c <_sbrk_r>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d103      	bne.n	800a0c2 <sbrk_aligned+0x26>
 800a0ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a0be:	4620      	mov	r0, r4
 800a0c0:	bd70      	pop	{r4, r5, r6, pc}
 800a0c2:	1cc4      	adds	r4, r0, #3
 800a0c4:	f024 0403 	bic.w	r4, r4, #3
 800a0c8:	42a0      	cmp	r0, r4
 800a0ca:	d0f8      	beq.n	800a0be <sbrk_aligned+0x22>
 800a0cc:	1a21      	subs	r1, r4, r0
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f001 ff9c 	bl	800c00c <_sbrk_r>
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d1f2      	bne.n	800a0be <sbrk_aligned+0x22>
 800a0d8:	e7ef      	b.n	800a0ba <sbrk_aligned+0x1e>
 800a0da:	bf00      	nop
 800a0dc:	200004dc 	.word	0x200004dc

0800a0e0 <_malloc_r>:
 800a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	1ccd      	adds	r5, r1, #3
 800a0e6:	f025 0503 	bic.w	r5, r5, #3
 800a0ea:	3508      	adds	r5, #8
 800a0ec:	2d0c      	cmp	r5, #12
 800a0ee:	bf38      	it	cc
 800a0f0:	250c      	movcc	r5, #12
 800a0f2:	2d00      	cmp	r5, #0
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	db01      	blt.n	800a0fc <_malloc_r+0x1c>
 800a0f8:	42a9      	cmp	r1, r5
 800a0fa:	d904      	bls.n	800a106 <_malloc_r+0x26>
 800a0fc:	230c      	movs	r3, #12
 800a0fe:	6033      	str	r3, [r6, #0]
 800a100:	2000      	movs	r0, #0
 800a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1dc <_malloc_r+0xfc>
 800a10a:	f000 f869 	bl	800a1e0 <__malloc_lock>
 800a10e:	f8d8 3000 	ldr.w	r3, [r8]
 800a112:	461c      	mov	r4, r3
 800a114:	bb44      	cbnz	r4, 800a168 <_malloc_r+0x88>
 800a116:	4629      	mov	r1, r5
 800a118:	4630      	mov	r0, r6
 800a11a:	f7ff ffbf 	bl	800a09c <sbrk_aligned>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	4604      	mov	r4, r0
 800a122:	d158      	bne.n	800a1d6 <_malloc_r+0xf6>
 800a124:	f8d8 4000 	ldr.w	r4, [r8]
 800a128:	4627      	mov	r7, r4
 800a12a:	2f00      	cmp	r7, #0
 800a12c:	d143      	bne.n	800a1b6 <_malloc_r+0xd6>
 800a12e:	2c00      	cmp	r4, #0
 800a130:	d04b      	beq.n	800a1ca <_malloc_r+0xea>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	4639      	mov	r1, r7
 800a136:	4630      	mov	r0, r6
 800a138:	eb04 0903 	add.w	r9, r4, r3
 800a13c:	f001 ff66 	bl	800c00c <_sbrk_r>
 800a140:	4581      	cmp	r9, r0
 800a142:	d142      	bne.n	800a1ca <_malloc_r+0xea>
 800a144:	6821      	ldr	r1, [r4, #0]
 800a146:	1a6d      	subs	r5, r5, r1
 800a148:	4629      	mov	r1, r5
 800a14a:	4630      	mov	r0, r6
 800a14c:	f7ff ffa6 	bl	800a09c <sbrk_aligned>
 800a150:	3001      	adds	r0, #1
 800a152:	d03a      	beq.n	800a1ca <_malloc_r+0xea>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	442b      	add	r3, r5
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	f8d8 3000 	ldr.w	r3, [r8]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	bb62      	cbnz	r2, 800a1bc <_malloc_r+0xdc>
 800a162:	f8c8 7000 	str.w	r7, [r8]
 800a166:	e00f      	b.n	800a188 <_malloc_r+0xa8>
 800a168:	6822      	ldr	r2, [r4, #0]
 800a16a:	1b52      	subs	r2, r2, r5
 800a16c:	d420      	bmi.n	800a1b0 <_malloc_r+0xd0>
 800a16e:	2a0b      	cmp	r2, #11
 800a170:	d917      	bls.n	800a1a2 <_malloc_r+0xc2>
 800a172:	1961      	adds	r1, r4, r5
 800a174:	42a3      	cmp	r3, r4
 800a176:	6025      	str	r5, [r4, #0]
 800a178:	bf18      	it	ne
 800a17a:	6059      	strne	r1, [r3, #4]
 800a17c:	6863      	ldr	r3, [r4, #4]
 800a17e:	bf08      	it	eq
 800a180:	f8c8 1000 	streq.w	r1, [r8]
 800a184:	5162      	str	r2, [r4, r5]
 800a186:	604b      	str	r3, [r1, #4]
 800a188:	4630      	mov	r0, r6
 800a18a:	f000 f82f 	bl	800a1ec <__malloc_unlock>
 800a18e:	f104 000b 	add.w	r0, r4, #11
 800a192:	1d23      	adds	r3, r4, #4
 800a194:	f020 0007 	bic.w	r0, r0, #7
 800a198:	1ac2      	subs	r2, r0, r3
 800a19a:	bf1c      	itt	ne
 800a19c:	1a1b      	subne	r3, r3, r0
 800a19e:	50a3      	strne	r3, [r4, r2]
 800a1a0:	e7af      	b.n	800a102 <_malloc_r+0x22>
 800a1a2:	6862      	ldr	r2, [r4, #4]
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	bf0c      	ite	eq
 800a1a8:	f8c8 2000 	streq.w	r2, [r8]
 800a1ac:	605a      	strne	r2, [r3, #4]
 800a1ae:	e7eb      	b.n	800a188 <_malloc_r+0xa8>
 800a1b0:	4623      	mov	r3, r4
 800a1b2:	6864      	ldr	r4, [r4, #4]
 800a1b4:	e7ae      	b.n	800a114 <_malloc_r+0x34>
 800a1b6:	463c      	mov	r4, r7
 800a1b8:	687f      	ldr	r7, [r7, #4]
 800a1ba:	e7b6      	b.n	800a12a <_malloc_r+0x4a>
 800a1bc:	461a      	mov	r2, r3
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	d1fb      	bne.n	800a1bc <_malloc_r+0xdc>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	6053      	str	r3, [r2, #4]
 800a1c8:	e7de      	b.n	800a188 <_malloc_r+0xa8>
 800a1ca:	230c      	movs	r3, #12
 800a1cc:	6033      	str	r3, [r6, #0]
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f000 f80c 	bl	800a1ec <__malloc_unlock>
 800a1d4:	e794      	b.n	800a100 <_malloc_r+0x20>
 800a1d6:	6005      	str	r5, [r0, #0]
 800a1d8:	e7d6      	b.n	800a188 <_malloc_r+0xa8>
 800a1da:	bf00      	nop
 800a1dc:	200004e0 	.word	0x200004e0

0800a1e0 <__malloc_lock>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	@ (800a1e8 <__malloc_lock+0x8>)
 800a1e2:	f7ff b89c 	b.w	800931e <__retarget_lock_acquire_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	200004d8 	.word	0x200004d8

0800a1ec <__malloc_unlock>:
 800a1ec:	4801      	ldr	r0, [pc, #4]	@ (800a1f4 <__malloc_unlock+0x8>)
 800a1ee:	f7ff b897 	b.w	8009320 <__retarget_lock_release_recursive>
 800a1f2:	bf00      	nop
 800a1f4:	200004d8 	.word	0x200004d8

0800a1f8 <_Balloc>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	69c6      	ldr	r6, [r0, #28]
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	460d      	mov	r5, r1
 800a200:	b976      	cbnz	r6, 800a220 <_Balloc+0x28>
 800a202:	2010      	movs	r0, #16
 800a204:	f7ff ff42 	bl	800a08c <malloc>
 800a208:	4602      	mov	r2, r0
 800a20a:	61e0      	str	r0, [r4, #28]
 800a20c:	b920      	cbnz	r0, 800a218 <_Balloc+0x20>
 800a20e:	4b18      	ldr	r3, [pc, #96]	@ (800a270 <_Balloc+0x78>)
 800a210:	4818      	ldr	r0, [pc, #96]	@ (800a274 <_Balloc+0x7c>)
 800a212:	216b      	movs	r1, #107	@ 0x6b
 800a214:	f001 ff10 	bl	800c038 <__assert_func>
 800a218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a21c:	6006      	str	r6, [r0, #0]
 800a21e:	60c6      	str	r6, [r0, #12]
 800a220:	69e6      	ldr	r6, [r4, #28]
 800a222:	68f3      	ldr	r3, [r6, #12]
 800a224:	b183      	cbz	r3, 800a248 <_Balloc+0x50>
 800a226:	69e3      	ldr	r3, [r4, #28]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a22e:	b9b8      	cbnz	r0, 800a260 <_Balloc+0x68>
 800a230:	2101      	movs	r1, #1
 800a232:	fa01 f605 	lsl.w	r6, r1, r5
 800a236:	1d72      	adds	r2, r6, #5
 800a238:	0092      	lsls	r2, r2, #2
 800a23a:	4620      	mov	r0, r4
 800a23c:	f001 ff1a 	bl	800c074 <_calloc_r>
 800a240:	b160      	cbz	r0, 800a25c <_Balloc+0x64>
 800a242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a246:	e00e      	b.n	800a266 <_Balloc+0x6e>
 800a248:	2221      	movs	r2, #33	@ 0x21
 800a24a:	2104      	movs	r1, #4
 800a24c:	4620      	mov	r0, r4
 800a24e:	f001 ff11 	bl	800c074 <_calloc_r>
 800a252:	69e3      	ldr	r3, [r4, #28]
 800a254:	60f0      	str	r0, [r6, #12]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1e4      	bne.n	800a226 <_Balloc+0x2e>
 800a25c:	2000      	movs	r0, #0
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	6802      	ldr	r2, [r0, #0]
 800a262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a266:	2300      	movs	r3, #0
 800a268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a26c:	e7f7      	b.n	800a25e <_Balloc+0x66>
 800a26e:	bf00      	nop
 800a270:	0800ce7e 	.word	0x0800ce7e
 800a274:	0800cefe 	.word	0x0800cefe

0800a278 <_Bfree>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	69c6      	ldr	r6, [r0, #28]
 800a27c:	4605      	mov	r5, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	b976      	cbnz	r6, 800a2a0 <_Bfree+0x28>
 800a282:	2010      	movs	r0, #16
 800a284:	f7ff ff02 	bl	800a08c <malloc>
 800a288:	4602      	mov	r2, r0
 800a28a:	61e8      	str	r0, [r5, #28]
 800a28c:	b920      	cbnz	r0, 800a298 <_Bfree+0x20>
 800a28e:	4b09      	ldr	r3, [pc, #36]	@ (800a2b4 <_Bfree+0x3c>)
 800a290:	4809      	ldr	r0, [pc, #36]	@ (800a2b8 <_Bfree+0x40>)
 800a292:	218f      	movs	r1, #143	@ 0x8f
 800a294:	f001 fed0 	bl	800c038 <__assert_func>
 800a298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a29c:	6006      	str	r6, [r0, #0]
 800a29e:	60c6      	str	r6, [r0, #12]
 800a2a0:	b13c      	cbz	r4, 800a2b2 <_Bfree+0x3a>
 800a2a2:	69eb      	ldr	r3, [r5, #28]
 800a2a4:	6862      	ldr	r2, [r4, #4]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2ac:	6021      	str	r1, [r4, #0]
 800a2ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	0800ce7e 	.word	0x0800ce7e
 800a2b8:	0800cefe 	.word	0x0800cefe

0800a2bc <__multadd>:
 800a2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c0:	690d      	ldr	r5, [r1, #16]
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	461e      	mov	r6, r3
 800a2c8:	f101 0c14 	add.w	ip, r1, #20
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a2d2:	b299      	uxth	r1, r3
 800a2d4:	fb02 6101 	mla	r1, r2, r1, r6
 800a2d8:	0c1e      	lsrs	r6, r3, #16
 800a2da:	0c0b      	lsrs	r3, r1, #16
 800a2dc:	fb02 3306 	mla	r3, r2, r6, r3
 800a2e0:	b289      	uxth	r1, r1
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2e8:	4285      	cmp	r5, r0
 800a2ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a2ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2f2:	dcec      	bgt.n	800a2ce <__multadd+0x12>
 800a2f4:	b30e      	cbz	r6, 800a33a <__multadd+0x7e>
 800a2f6:	68a3      	ldr	r3, [r4, #8]
 800a2f8:	42ab      	cmp	r3, r5
 800a2fa:	dc19      	bgt.n	800a330 <__multadd+0x74>
 800a2fc:	6861      	ldr	r1, [r4, #4]
 800a2fe:	4638      	mov	r0, r7
 800a300:	3101      	adds	r1, #1
 800a302:	f7ff ff79 	bl	800a1f8 <_Balloc>
 800a306:	4680      	mov	r8, r0
 800a308:	b928      	cbnz	r0, 800a316 <__multadd+0x5a>
 800a30a:	4602      	mov	r2, r0
 800a30c:	4b0c      	ldr	r3, [pc, #48]	@ (800a340 <__multadd+0x84>)
 800a30e:	480d      	ldr	r0, [pc, #52]	@ (800a344 <__multadd+0x88>)
 800a310:	21ba      	movs	r1, #186	@ 0xba
 800a312:	f001 fe91 	bl	800c038 <__assert_func>
 800a316:	6922      	ldr	r2, [r4, #16]
 800a318:	3202      	adds	r2, #2
 800a31a:	f104 010c 	add.w	r1, r4, #12
 800a31e:	0092      	lsls	r2, r2, #2
 800a320:	300c      	adds	r0, #12
 800a322:	f7fe fffe 	bl	8009322 <memcpy>
 800a326:	4621      	mov	r1, r4
 800a328:	4638      	mov	r0, r7
 800a32a:	f7ff ffa5 	bl	800a278 <_Bfree>
 800a32e:	4644      	mov	r4, r8
 800a330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a334:	3501      	adds	r5, #1
 800a336:	615e      	str	r6, [r3, #20]
 800a338:	6125      	str	r5, [r4, #16]
 800a33a:	4620      	mov	r0, r4
 800a33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a340:	0800ceed 	.word	0x0800ceed
 800a344:	0800cefe 	.word	0x0800cefe

0800a348 <__s2b>:
 800a348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a34c:	460c      	mov	r4, r1
 800a34e:	4615      	mov	r5, r2
 800a350:	461f      	mov	r7, r3
 800a352:	2209      	movs	r2, #9
 800a354:	3308      	adds	r3, #8
 800a356:	4606      	mov	r6, r0
 800a358:	fb93 f3f2 	sdiv	r3, r3, r2
 800a35c:	2100      	movs	r1, #0
 800a35e:	2201      	movs	r2, #1
 800a360:	429a      	cmp	r2, r3
 800a362:	db09      	blt.n	800a378 <__s2b+0x30>
 800a364:	4630      	mov	r0, r6
 800a366:	f7ff ff47 	bl	800a1f8 <_Balloc>
 800a36a:	b940      	cbnz	r0, 800a37e <__s2b+0x36>
 800a36c:	4602      	mov	r2, r0
 800a36e:	4b19      	ldr	r3, [pc, #100]	@ (800a3d4 <__s2b+0x8c>)
 800a370:	4819      	ldr	r0, [pc, #100]	@ (800a3d8 <__s2b+0x90>)
 800a372:	21d3      	movs	r1, #211	@ 0xd3
 800a374:	f001 fe60 	bl	800c038 <__assert_func>
 800a378:	0052      	lsls	r2, r2, #1
 800a37a:	3101      	adds	r1, #1
 800a37c:	e7f0      	b.n	800a360 <__s2b+0x18>
 800a37e:	9b08      	ldr	r3, [sp, #32]
 800a380:	6143      	str	r3, [r0, #20]
 800a382:	2d09      	cmp	r5, #9
 800a384:	f04f 0301 	mov.w	r3, #1
 800a388:	6103      	str	r3, [r0, #16]
 800a38a:	dd16      	ble.n	800a3ba <__s2b+0x72>
 800a38c:	f104 0909 	add.w	r9, r4, #9
 800a390:	46c8      	mov	r8, r9
 800a392:	442c      	add	r4, r5
 800a394:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a398:	4601      	mov	r1, r0
 800a39a:	3b30      	subs	r3, #48	@ 0x30
 800a39c:	220a      	movs	r2, #10
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f7ff ff8c 	bl	800a2bc <__multadd>
 800a3a4:	45a0      	cmp	r8, r4
 800a3a6:	d1f5      	bne.n	800a394 <__s2b+0x4c>
 800a3a8:	f1a5 0408 	sub.w	r4, r5, #8
 800a3ac:	444c      	add	r4, r9
 800a3ae:	1b2d      	subs	r5, r5, r4
 800a3b0:	1963      	adds	r3, r4, r5
 800a3b2:	42bb      	cmp	r3, r7
 800a3b4:	db04      	blt.n	800a3c0 <__s2b+0x78>
 800a3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ba:	340a      	adds	r4, #10
 800a3bc:	2509      	movs	r5, #9
 800a3be:	e7f6      	b.n	800a3ae <__s2b+0x66>
 800a3c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3c4:	4601      	mov	r1, r0
 800a3c6:	3b30      	subs	r3, #48	@ 0x30
 800a3c8:	220a      	movs	r2, #10
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff ff76 	bl	800a2bc <__multadd>
 800a3d0:	e7ee      	b.n	800a3b0 <__s2b+0x68>
 800a3d2:	bf00      	nop
 800a3d4:	0800ceed 	.word	0x0800ceed
 800a3d8:	0800cefe 	.word	0x0800cefe

0800a3dc <__hi0bits>:
 800a3dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	bf36      	itet	cc
 800a3e4:	0403      	lslcc	r3, r0, #16
 800a3e6:	2000      	movcs	r0, #0
 800a3e8:	2010      	movcc	r0, #16
 800a3ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3ee:	bf3c      	itt	cc
 800a3f0:	021b      	lslcc	r3, r3, #8
 800a3f2:	3008      	addcc	r0, #8
 800a3f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3f8:	bf3c      	itt	cc
 800a3fa:	011b      	lslcc	r3, r3, #4
 800a3fc:	3004      	addcc	r0, #4
 800a3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a402:	bf3c      	itt	cc
 800a404:	009b      	lslcc	r3, r3, #2
 800a406:	3002      	addcc	r0, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	db05      	blt.n	800a418 <__hi0bits+0x3c>
 800a40c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a410:	f100 0001 	add.w	r0, r0, #1
 800a414:	bf08      	it	eq
 800a416:	2020      	moveq	r0, #32
 800a418:	4770      	bx	lr

0800a41a <__lo0bits>:
 800a41a:	6803      	ldr	r3, [r0, #0]
 800a41c:	4602      	mov	r2, r0
 800a41e:	f013 0007 	ands.w	r0, r3, #7
 800a422:	d00b      	beq.n	800a43c <__lo0bits+0x22>
 800a424:	07d9      	lsls	r1, r3, #31
 800a426:	d421      	bmi.n	800a46c <__lo0bits+0x52>
 800a428:	0798      	lsls	r0, r3, #30
 800a42a:	bf49      	itett	mi
 800a42c:	085b      	lsrmi	r3, r3, #1
 800a42e:	089b      	lsrpl	r3, r3, #2
 800a430:	2001      	movmi	r0, #1
 800a432:	6013      	strmi	r3, [r2, #0]
 800a434:	bf5c      	itt	pl
 800a436:	6013      	strpl	r3, [r2, #0]
 800a438:	2002      	movpl	r0, #2
 800a43a:	4770      	bx	lr
 800a43c:	b299      	uxth	r1, r3
 800a43e:	b909      	cbnz	r1, 800a444 <__lo0bits+0x2a>
 800a440:	0c1b      	lsrs	r3, r3, #16
 800a442:	2010      	movs	r0, #16
 800a444:	b2d9      	uxtb	r1, r3
 800a446:	b909      	cbnz	r1, 800a44c <__lo0bits+0x32>
 800a448:	3008      	adds	r0, #8
 800a44a:	0a1b      	lsrs	r3, r3, #8
 800a44c:	0719      	lsls	r1, r3, #28
 800a44e:	bf04      	itt	eq
 800a450:	091b      	lsreq	r3, r3, #4
 800a452:	3004      	addeq	r0, #4
 800a454:	0799      	lsls	r1, r3, #30
 800a456:	bf04      	itt	eq
 800a458:	089b      	lsreq	r3, r3, #2
 800a45a:	3002      	addeq	r0, #2
 800a45c:	07d9      	lsls	r1, r3, #31
 800a45e:	d403      	bmi.n	800a468 <__lo0bits+0x4e>
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	f100 0001 	add.w	r0, r0, #1
 800a466:	d003      	beq.n	800a470 <__lo0bits+0x56>
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	4770      	bx	lr
 800a46c:	2000      	movs	r0, #0
 800a46e:	4770      	bx	lr
 800a470:	2020      	movs	r0, #32
 800a472:	4770      	bx	lr

0800a474 <__i2b>:
 800a474:	b510      	push	{r4, lr}
 800a476:	460c      	mov	r4, r1
 800a478:	2101      	movs	r1, #1
 800a47a:	f7ff febd 	bl	800a1f8 <_Balloc>
 800a47e:	4602      	mov	r2, r0
 800a480:	b928      	cbnz	r0, 800a48e <__i2b+0x1a>
 800a482:	4b05      	ldr	r3, [pc, #20]	@ (800a498 <__i2b+0x24>)
 800a484:	4805      	ldr	r0, [pc, #20]	@ (800a49c <__i2b+0x28>)
 800a486:	f240 1145 	movw	r1, #325	@ 0x145
 800a48a:	f001 fdd5 	bl	800c038 <__assert_func>
 800a48e:	2301      	movs	r3, #1
 800a490:	6144      	str	r4, [r0, #20]
 800a492:	6103      	str	r3, [r0, #16]
 800a494:	bd10      	pop	{r4, pc}
 800a496:	bf00      	nop
 800a498:	0800ceed 	.word	0x0800ceed
 800a49c:	0800cefe 	.word	0x0800cefe

0800a4a0 <__multiply>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	4617      	mov	r7, r2
 800a4a6:	690a      	ldr	r2, [r1, #16]
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	bfa8      	it	ge
 800a4ae:	463b      	movge	r3, r7
 800a4b0:	4689      	mov	r9, r1
 800a4b2:	bfa4      	itt	ge
 800a4b4:	460f      	movge	r7, r1
 800a4b6:	4699      	movge	r9, r3
 800a4b8:	693d      	ldr	r5, [r7, #16]
 800a4ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	6879      	ldr	r1, [r7, #4]
 800a4c2:	eb05 060a 	add.w	r6, r5, sl
 800a4c6:	42b3      	cmp	r3, r6
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	bfb8      	it	lt
 800a4cc:	3101      	addlt	r1, #1
 800a4ce:	f7ff fe93 	bl	800a1f8 <_Balloc>
 800a4d2:	b930      	cbnz	r0, 800a4e2 <__multiply+0x42>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	4b41      	ldr	r3, [pc, #260]	@ (800a5dc <__multiply+0x13c>)
 800a4d8:	4841      	ldr	r0, [pc, #260]	@ (800a5e0 <__multiply+0x140>)
 800a4da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4de:	f001 fdab 	bl	800c038 <__assert_func>
 800a4e2:	f100 0414 	add.w	r4, r0, #20
 800a4e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a4ea:	4623      	mov	r3, r4
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	4573      	cmp	r3, lr
 800a4f0:	d320      	bcc.n	800a534 <__multiply+0x94>
 800a4f2:	f107 0814 	add.w	r8, r7, #20
 800a4f6:	f109 0114 	add.w	r1, r9, #20
 800a4fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a4fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a502:	9302      	str	r3, [sp, #8]
 800a504:	1beb      	subs	r3, r5, r7
 800a506:	3b15      	subs	r3, #21
 800a508:	f023 0303 	bic.w	r3, r3, #3
 800a50c:	3304      	adds	r3, #4
 800a50e:	3715      	adds	r7, #21
 800a510:	42bd      	cmp	r5, r7
 800a512:	bf38      	it	cc
 800a514:	2304      	movcc	r3, #4
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	9103      	str	r1, [sp, #12]
 800a51c:	428b      	cmp	r3, r1
 800a51e:	d80c      	bhi.n	800a53a <__multiply+0x9a>
 800a520:	2e00      	cmp	r6, #0
 800a522:	dd03      	ble.n	800a52c <__multiply+0x8c>
 800a524:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d055      	beq.n	800a5d8 <__multiply+0x138>
 800a52c:	6106      	str	r6, [r0, #16]
 800a52e:	b005      	add	sp, #20
 800a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a534:	f843 2b04 	str.w	r2, [r3], #4
 800a538:	e7d9      	b.n	800a4ee <__multiply+0x4e>
 800a53a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a53e:	f1ba 0f00 	cmp.w	sl, #0
 800a542:	d01f      	beq.n	800a584 <__multiply+0xe4>
 800a544:	46c4      	mov	ip, r8
 800a546:	46a1      	mov	r9, r4
 800a548:	2700      	movs	r7, #0
 800a54a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a54e:	f8d9 3000 	ldr.w	r3, [r9]
 800a552:	fa1f fb82 	uxth.w	fp, r2
 800a556:	b29b      	uxth	r3, r3
 800a558:	fb0a 330b 	mla	r3, sl, fp, r3
 800a55c:	443b      	add	r3, r7
 800a55e:	f8d9 7000 	ldr.w	r7, [r9]
 800a562:	0c12      	lsrs	r2, r2, #16
 800a564:	0c3f      	lsrs	r7, r7, #16
 800a566:	fb0a 7202 	mla	r2, sl, r2, r7
 800a56a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a56e:	b29b      	uxth	r3, r3
 800a570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a574:	4565      	cmp	r5, ip
 800a576:	f849 3b04 	str.w	r3, [r9], #4
 800a57a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a57e:	d8e4      	bhi.n	800a54a <__multiply+0xaa>
 800a580:	9b01      	ldr	r3, [sp, #4]
 800a582:	50e7      	str	r7, [r4, r3]
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a58a:	3104      	adds	r1, #4
 800a58c:	f1b9 0f00 	cmp.w	r9, #0
 800a590:	d020      	beq.n	800a5d4 <__multiply+0x134>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	4647      	mov	r7, r8
 800a596:	46a4      	mov	ip, r4
 800a598:	f04f 0a00 	mov.w	sl, #0
 800a59c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a5a0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a5a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a5a8:	4452      	add	r2, sl
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5b0:	f84c 3b04 	str.w	r3, [ip], #4
 800a5b4:	f857 3b04 	ldr.w	r3, [r7], #4
 800a5b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5bc:	f8bc 3000 	ldrh.w	r3, [ip]
 800a5c0:	fb09 330a 	mla	r3, r9, sl, r3
 800a5c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a5c8:	42bd      	cmp	r5, r7
 800a5ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5ce:	d8e5      	bhi.n	800a59c <__multiply+0xfc>
 800a5d0:	9a01      	ldr	r2, [sp, #4]
 800a5d2:	50a3      	str	r3, [r4, r2]
 800a5d4:	3404      	adds	r4, #4
 800a5d6:	e79f      	b.n	800a518 <__multiply+0x78>
 800a5d8:	3e01      	subs	r6, #1
 800a5da:	e7a1      	b.n	800a520 <__multiply+0x80>
 800a5dc:	0800ceed 	.word	0x0800ceed
 800a5e0:	0800cefe 	.word	0x0800cefe

0800a5e4 <__pow5mult>:
 800a5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e8:	4615      	mov	r5, r2
 800a5ea:	f012 0203 	ands.w	r2, r2, #3
 800a5ee:	4607      	mov	r7, r0
 800a5f0:	460e      	mov	r6, r1
 800a5f2:	d007      	beq.n	800a604 <__pow5mult+0x20>
 800a5f4:	4c25      	ldr	r4, [pc, #148]	@ (800a68c <__pow5mult+0xa8>)
 800a5f6:	3a01      	subs	r2, #1
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5fe:	f7ff fe5d 	bl	800a2bc <__multadd>
 800a602:	4606      	mov	r6, r0
 800a604:	10ad      	asrs	r5, r5, #2
 800a606:	d03d      	beq.n	800a684 <__pow5mult+0xa0>
 800a608:	69fc      	ldr	r4, [r7, #28]
 800a60a:	b97c      	cbnz	r4, 800a62c <__pow5mult+0x48>
 800a60c:	2010      	movs	r0, #16
 800a60e:	f7ff fd3d 	bl	800a08c <malloc>
 800a612:	4602      	mov	r2, r0
 800a614:	61f8      	str	r0, [r7, #28]
 800a616:	b928      	cbnz	r0, 800a624 <__pow5mult+0x40>
 800a618:	4b1d      	ldr	r3, [pc, #116]	@ (800a690 <__pow5mult+0xac>)
 800a61a:	481e      	ldr	r0, [pc, #120]	@ (800a694 <__pow5mult+0xb0>)
 800a61c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a620:	f001 fd0a 	bl	800c038 <__assert_func>
 800a624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a628:	6004      	str	r4, [r0, #0]
 800a62a:	60c4      	str	r4, [r0, #12]
 800a62c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a634:	b94c      	cbnz	r4, 800a64a <__pow5mult+0x66>
 800a636:	f240 2171 	movw	r1, #625	@ 0x271
 800a63a:	4638      	mov	r0, r7
 800a63c:	f7ff ff1a 	bl	800a474 <__i2b>
 800a640:	2300      	movs	r3, #0
 800a642:	f8c8 0008 	str.w	r0, [r8, #8]
 800a646:	4604      	mov	r4, r0
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	f04f 0900 	mov.w	r9, #0
 800a64e:	07eb      	lsls	r3, r5, #31
 800a650:	d50a      	bpl.n	800a668 <__pow5mult+0x84>
 800a652:	4631      	mov	r1, r6
 800a654:	4622      	mov	r2, r4
 800a656:	4638      	mov	r0, r7
 800a658:	f7ff ff22 	bl	800a4a0 <__multiply>
 800a65c:	4631      	mov	r1, r6
 800a65e:	4680      	mov	r8, r0
 800a660:	4638      	mov	r0, r7
 800a662:	f7ff fe09 	bl	800a278 <_Bfree>
 800a666:	4646      	mov	r6, r8
 800a668:	106d      	asrs	r5, r5, #1
 800a66a:	d00b      	beq.n	800a684 <__pow5mult+0xa0>
 800a66c:	6820      	ldr	r0, [r4, #0]
 800a66e:	b938      	cbnz	r0, 800a680 <__pow5mult+0x9c>
 800a670:	4622      	mov	r2, r4
 800a672:	4621      	mov	r1, r4
 800a674:	4638      	mov	r0, r7
 800a676:	f7ff ff13 	bl	800a4a0 <__multiply>
 800a67a:	6020      	str	r0, [r4, #0]
 800a67c:	f8c0 9000 	str.w	r9, [r0]
 800a680:	4604      	mov	r4, r0
 800a682:	e7e4      	b.n	800a64e <__pow5mult+0x6a>
 800a684:	4630      	mov	r0, r6
 800a686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68a:	bf00      	nop
 800a68c:	0800d010 	.word	0x0800d010
 800a690:	0800ce7e 	.word	0x0800ce7e
 800a694:	0800cefe 	.word	0x0800cefe

0800a698 <__lshift>:
 800a698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a69c:	460c      	mov	r4, r1
 800a69e:	6849      	ldr	r1, [r1, #4]
 800a6a0:	6923      	ldr	r3, [r4, #16]
 800a6a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6a6:	68a3      	ldr	r3, [r4, #8]
 800a6a8:	4607      	mov	r7, r0
 800a6aa:	4691      	mov	r9, r2
 800a6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6b0:	f108 0601 	add.w	r6, r8, #1
 800a6b4:	42b3      	cmp	r3, r6
 800a6b6:	db0b      	blt.n	800a6d0 <__lshift+0x38>
 800a6b8:	4638      	mov	r0, r7
 800a6ba:	f7ff fd9d 	bl	800a1f8 <_Balloc>
 800a6be:	4605      	mov	r5, r0
 800a6c0:	b948      	cbnz	r0, 800a6d6 <__lshift+0x3e>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	4b28      	ldr	r3, [pc, #160]	@ (800a768 <__lshift+0xd0>)
 800a6c6:	4829      	ldr	r0, [pc, #164]	@ (800a76c <__lshift+0xd4>)
 800a6c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6cc:	f001 fcb4 	bl	800c038 <__assert_func>
 800a6d0:	3101      	adds	r1, #1
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	e7ee      	b.n	800a6b4 <__lshift+0x1c>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f100 0114 	add.w	r1, r0, #20
 800a6dc:	f100 0210 	add.w	r2, r0, #16
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	4553      	cmp	r3, sl
 800a6e4:	db33      	blt.n	800a74e <__lshift+0xb6>
 800a6e6:	6920      	ldr	r0, [r4, #16]
 800a6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6ec:	f104 0314 	add.w	r3, r4, #20
 800a6f0:	f019 091f 	ands.w	r9, r9, #31
 800a6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6fc:	d02b      	beq.n	800a756 <__lshift+0xbe>
 800a6fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a702:	468a      	mov	sl, r1
 800a704:	2200      	movs	r2, #0
 800a706:	6818      	ldr	r0, [r3, #0]
 800a708:	fa00 f009 	lsl.w	r0, r0, r9
 800a70c:	4310      	orrs	r0, r2
 800a70e:	f84a 0b04 	str.w	r0, [sl], #4
 800a712:	f853 2b04 	ldr.w	r2, [r3], #4
 800a716:	459c      	cmp	ip, r3
 800a718:	fa22 f20e 	lsr.w	r2, r2, lr
 800a71c:	d8f3      	bhi.n	800a706 <__lshift+0x6e>
 800a71e:	ebac 0304 	sub.w	r3, ip, r4
 800a722:	3b15      	subs	r3, #21
 800a724:	f023 0303 	bic.w	r3, r3, #3
 800a728:	3304      	adds	r3, #4
 800a72a:	f104 0015 	add.w	r0, r4, #21
 800a72e:	4560      	cmp	r0, ip
 800a730:	bf88      	it	hi
 800a732:	2304      	movhi	r3, #4
 800a734:	50ca      	str	r2, [r1, r3]
 800a736:	b10a      	cbz	r2, 800a73c <__lshift+0xa4>
 800a738:	f108 0602 	add.w	r6, r8, #2
 800a73c:	3e01      	subs	r6, #1
 800a73e:	4638      	mov	r0, r7
 800a740:	612e      	str	r6, [r5, #16]
 800a742:	4621      	mov	r1, r4
 800a744:	f7ff fd98 	bl	800a278 <_Bfree>
 800a748:	4628      	mov	r0, r5
 800a74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a752:	3301      	adds	r3, #1
 800a754:	e7c5      	b.n	800a6e2 <__lshift+0x4a>
 800a756:	3904      	subs	r1, #4
 800a758:	f853 2b04 	ldr.w	r2, [r3], #4
 800a75c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a760:	459c      	cmp	ip, r3
 800a762:	d8f9      	bhi.n	800a758 <__lshift+0xc0>
 800a764:	e7ea      	b.n	800a73c <__lshift+0xa4>
 800a766:	bf00      	nop
 800a768:	0800ceed 	.word	0x0800ceed
 800a76c:	0800cefe 	.word	0x0800cefe

0800a770 <__mcmp>:
 800a770:	690a      	ldr	r2, [r1, #16]
 800a772:	4603      	mov	r3, r0
 800a774:	6900      	ldr	r0, [r0, #16]
 800a776:	1a80      	subs	r0, r0, r2
 800a778:	b530      	push	{r4, r5, lr}
 800a77a:	d10e      	bne.n	800a79a <__mcmp+0x2a>
 800a77c:	3314      	adds	r3, #20
 800a77e:	3114      	adds	r1, #20
 800a780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a78c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a790:	4295      	cmp	r5, r2
 800a792:	d003      	beq.n	800a79c <__mcmp+0x2c>
 800a794:	d205      	bcs.n	800a7a2 <__mcmp+0x32>
 800a796:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a79a:	bd30      	pop	{r4, r5, pc}
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	d3f3      	bcc.n	800a788 <__mcmp+0x18>
 800a7a0:	e7fb      	b.n	800a79a <__mcmp+0x2a>
 800a7a2:	2001      	movs	r0, #1
 800a7a4:	e7f9      	b.n	800a79a <__mcmp+0x2a>
	...

0800a7a8 <__mdiff>:
 800a7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	4689      	mov	r9, r1
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4648      	mov	r0, r9
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	f7ff ffdb 	bl	800a770 <__mcmp>
 800a7ba:	1e05      	subs	r5, r0, #0
 800a7bc:	d112      	bne.n	800a7e4 <__mdiff+0x3c>
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f7ff fd19 	bl	800a1f8 <_Balloc>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	b928      	cbnz	r0, 800a7d6 <__mdiff+0x2e>
 800a7ca:	4b3e      	ldr	r3, [pc, #248]	@ (800a8c4 <__mdiff+0x11c>)
 800a7cc:	f240 2137 	movw	r1, #567	@ 0x237
 800a7d0:	483d      	ldr	r0, [pc, #244]	@ (800a8c8 <__mdiff+0x120>)
 800a7d2:	f001 fc31 	bl	800c038 <__assert_func>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7dc:	4610      	mov	r0, r2
 800a7de:	b003      	add	sp, #12
 800a7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e4:	bfbc      	itt	lt
 800a7e6:	464b      	movlt	r3, r9
 800a7e8:	46a1      	movlt	r9, r4
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7f0:	bfba      	itte	lt
 800a7f2:	461c      	movlt	r4, r3
 800a7f4:	2501      	movlt	r5, #1
 800a7f6:	2500      	movge	r5, #0
 800a7f8:	f7ff fcfe 	bl	800a1f8 <_Balloc>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	b918      	cbnz	r0, 800a808 <__mdiff+0x60>
 800a800:	4b30      	ldr	r3, [pc, #192]	@ (800a8c4 <__mdiff+0x11c>)
 800a802:	f240 2145 	movw	r1, #581	@ 0x245
 800a806:	e7e3      	b.n	800a7d0 <__mdiff+0x28>
 800a808:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a80c:	6926      	ldr	r6, [r4, #16]
 800a80e:	60c5      	str	r5, [r0, #12]
 800a810:	f109 0310 	add.w	r3, r9, #16
 800a814:	f109 0514 	add.w	r5, r9, #20
 800a818:	f104 0e14 	add.w	lr, r4, #20
 800a81c:	f100 0b14 	add.w	fp, r0, #20
 800a820:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a824:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	46d9      	mov	r9, fp
 800a82c:	f04f 0c00 	mov.w	ip, #0
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a836:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	b281      	uxth	r1, r0
 800a83e:	fa1f f38a 	uxth.w	r3, sl
 800a842:	1a5b      	subs	r3, r3, r1
 800a844:	0c00      	lsrs	r0, r0, #16
 800a846:	4463      	add	r3, ip
 800a848:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a84c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a850:	b29b      	uxth	r3, r3
 800a852:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a856:	4576      	cmp	r6, lr
 800a858:	f849 3b04 	str.w	r3, [r9], #4
 800a85c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a860:	d8e6      	bhi.n	800a830 <__mdiff+0x88>
 800a862:	1b33      	subs	r3, r6, r4
 800a864:	3b15      	subs	r3, #21
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	3415      	adds	r4, #21
 800a86c:	3304      	adds	r3, #4
 800a86e:	42a6      	cmp	r6, r4
 800a870:	bf38      	it	cc
 800a872:	2304      	movcc	r3, #4
 800a874:	441d      	add	r5, r3
 800a876:	445b      	add	r3, fp
 800a878:	461e      	mov	r6, r3
 800a87a:	462c      	mov	r4, r5
 800a87c:	4544      	cmp	r4, r8
 800a87e:	d30e      	bcc.n	800a89e <__mdiff+0xf6>
 800a880:	f108 0103 	add.w	r1, r8, #3
 800a884:	1b49      	subs	r1, r1, r5
 800a886:	f021 0103 	bic.w	r1, r1, #3
 800a88a:	3d03      	subs	r5, #3
 800a88c:	45a8      	cmp	r8, r5
 800a88e:	bf38      	it	cc
 800a890:	2100      	movcc	r1, #0
 800a892:	440b      	add	r3, r1
 800a894:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a898:	b191      	cbz	r1, 800a8c0 <__mdiff+0x118>
 800a89a:	6117      	str	r7, [r2, #16]
 800a89c:	e79e      	b.n	800a7dc <__mdiff+0x34>
 800a89e:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8a2:	46e6      	mov	lr, ip
 800a8a4:	0c08      	lsrs	r0, r1, #16
 800a8a6:	fa1c fc81 	uxtah	ip, ip, r1
 800a8aa:	4471      	add	r1, lr
 800a8ac:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8b0:	b289      	uxth	r1, r1
 800a8b2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8b6:	f846 1b04 	str.w	r1, [r6], #4
 800a8ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8be:	e7dd      	b.n	800a87c <__mdiff+0xd4>
 800a8c0:	3f01      	subs	r7, #1
 800a8c2:	e7e7      	b.n	800a894 <__mdiff+0xec>
 800a8c4:	0800ceed 	.word	0x0800ceed
 800a8c8:	0800cefe 	.word	0x0800cefe

0800a8cc <__ulp>:
 800a8cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a908 <__ulp+0x3c>)
 800a8ce:	400b      	ands	r3, r1
 800a8d0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dc08      	bgt.n	800a8ea <__ulp+0x1e>
 800a8d8:	425b      	negs	r3, r3
 800a8da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a8de:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8e2:	da04      	bge.n	800a8ee <__ulp+0x22>
 800a8e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8e8:	4113      	asrs	r3, r2
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	e008      	b.n	800a900 <__ulp+0x34>
 800a8ee:	f1a2 0314 	sub.w	r3, r2, #20
 800a8f2:	2b1e      	cmp	r3, #30
 800a8f4:	bfda      	itte	le
 800a8f6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a8fa:	40da      	lsrle	r2, r3
 800a8fc:	2201      	movgt	r2, #1
 800a8fe:	2300      	movs	r3, #0
 800a900:	4619      	mov	r1, r3
 800a902:	4610      	mov	r0, r2
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	7ff00000 	.word	0x7ff00000

0800a90c <__b2d>:
 800a90c:	6902      	ldr	r2, [r0, #16]
 800a90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a910:	f100 0614 	add.w	r6, r0, #20
 800a914:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a918:	4f20      	ldr	r7, [pc, #128]	@ (800a99c <__b2d+0x90>)
 800a91a:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a91e:	4620      	mov	r0, r4
 800a920:	f7ff fd5c 	bl	800a3dc <__hi0bits>
 800a924:	4603      	mov	r3, r0
 800a926:	2b0a      	cmp	r3, #10
 800a928:	f1c0 0020 	rsb	r0, r0, #32
 800a92c:	f1a2 0504 	sub.w	r5, r2, #4
 800a930:	6008      	str	r0, [r1, #0]
 800a932:	dc13      	bgt.n	800a95c <__b2d+0x50>
 800a934:	42ae      	cmp	r6, r5
 800a936:	bf38      	it	cc
 800a938:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a93c:	f1c3 0c0b 	rsb	ip, r3, #11
 800a940:	bf28      	it	cs
 800a942:	2200      	movcs	r2, #0
 800a944:	3315      	adds	r3, #21
 800a946:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a94a:	fa04 f303 	lsl.w	r3, r4, r3
 800a94e:	fa22 f20c 	lsr.w	r2, r2, ip
 800a952:	ea4e 0107 	orr.w	r1, lr, r7
 800a956:	431a      	orrs	r2, r3
 800a958:	4610      	mov	r0, r2
 800a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95c:	42ae      	cmp	r6, r5
 800a95e:	bf36      	itet	cc
 800a960:	f1a2 0508 	subcc.w	r5, r2, #8
 800a964:	2200      	movcs	r2, #0
 800a966:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a96a:	3b0b      	subs	r3, #11
 800a96c:	d012      	beq.n	800a994 <__b2d+0x88>
 800a96e:	f1c3 0720 	rsb	r7, r3, #32
 800a972:	fa22 f107 	lsr.w	r1, r2, r7
 800a976:	409c      	lsls	r4, r3
 800a978:	430c      	orrs	r4, r1
 800a97a:	42b5      	cmp	r5, r6
 800a97c:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a980:	bf8c      	ite	hi
 800a982:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a986:	2400      	movls	r4, #0
 800a988:	409a      	lsls	r2, r3
 800a98a:	40fc      	lsrs	r4, r7
 800a98c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a990:	4322      	orrs	r2, r4
 800a992:	e7e1      	b.n	800a958 <__b2d+0x4c>
 800a994:	ea44 0107 	orr.w	r1, r4, r7
 800a998:	e7de      	b.n	800a958 <__b2d+0x4c>
 800a99a:	bf00      	nop
 800a99c:	3ff00000 	.word	0x3ff00000

0800a9a0 <__d2b>:
 800a9a0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	9e08      	ldr	r6, [sp, #32]
 800a9a8:	4690      	mov	r8, r2
 800a9aa:	4699      	mov	r9, r3
 800a9ac:	f7ff fc24 	bl	800a1f8 <_Balloc>
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	b930      	cbnz	r0, 800a9c2 <__d2b+0x22>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	4b24      	ldr	r3, [pc, #144]	@ (800aa48 <__d2b+0xa8>)
 800a9b8:	4824      	ldr	r0, [pc, #144]	@ (800aa4c <__d2b+0xac>)
 800a9ba:	f240 310f 	movw	r1, #783	@ 0x30f
 800a9be:	f001 fb3b 	bl	800c038 <__assert_func>
 800a9c2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9ca:	b10d      	cbz	r5, 800a9d0 <__d2b+0x30>
 800a9cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	f1b8 0300 	subs.w	r3, r8, #0
 800a9d6:	d024      	beq.n	800aa22 <__d2b+0x82>
 800a9d8:	4668      	mov	r0, sp
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	f7ff fd1d 	bl	800a41a <__lo0bits>
 800a9e0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9e4:	b1d8      	cbz	r0, 800aa1e <__d2b+0x7e>
 800a9e6:	f1c0 0320 	rsb	r3, r0, #32
 800a9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ee:	430b      	orrs	r3, r1
 800a9f0:	40c2      	lsrs	r2, r0
 800a9f2:	6163      	str	r3, [r4, #20]
 800a9f4:	9201      	str	r2, [sp, #4]
 800a9f6:	9b01      	ldr	r3, [sp, #4]
 800a9f8:	61a3      	str	r3, [r4, #24]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	bf0c      	ite	eq
 800a9fe:	2201      	moveq	r2, #1
 800aa00:	2202      	movne	r2, #2
 800aa02:	6122      	str	r2, [r4, #16]
 800aa04:	b1ad      	cbz	r5, 800aa32 <__d2b+0x92>
 800aa06:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa0a:	4405      	add	r5, r0
 800aa0c:	6035      	str	r5, [r6, #0]
 800aa0e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa14:	6018      	str	r0, [r3, #0]
 800aa16:	4620      	mov	r0, r4
 800aa18:	b002      	add	sp, #8
 800aa1a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800aa1e:	6161      	str	r1, [r4, #20]
 800aa20:	e7e9      	b.n	800a9f6 <__d2b+0x56>
 800aa22:	a801      	add	r0, sp, #4
 800aa24:	f7ff fcf9 	bl	800a41a <__lo0bits>
 800aa28:	9b01      	ldr	r3, [sp, #4]
 800aa2a:	6163      	str	r3, [r4, #20]
 800aa2c:	3020      	adds	r0, #32
 800aa2e:	2201      	movs	r2, #1
 800aa30:	e7e7      	b.n	800aa02 <__d2b+0x62>
 800aa32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa3a:	6030      	str	r0, [r6, #0]
 800aa3c:	6918      	ldr	r0, [r3, #16]
 800aa3e:	f7ff fccd 	bl	800a3dc <__hi0bits>
 800aa42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa46:	e7e4      	b.n	800aa12 <__d2b+0x72>
 800aa48:	0800ceed 	.word	0x0800ceed
 800aa4c:	0800cefe 	.word	0x0800cefe

0800aa50 <__ratio>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	b085      	sub	sp, #20
 800aa56:	e9cd 1000 	strd	r1, r0, [sp]
 800aa5a:	a902      	add	r1, sp, #8
 800aa5c:	f7ff ff56 	bl	800a90c <__b2d>
 800aa60:	468b      	mov	fp, r1
 800aa62:	4606      	mov	r6, r0
 800aa64:	460f      	mov	r7, r1
 800aa66:	9800      	ldr	r0, [sp, #0]
 800aa68:	a903      	add	r1, sp, #12
 800aa6a:	f7ff ff4f 	bl	800a90c <__b2d>
 800aa6e:	9b01      	ldr	r3, [sp, #4]
 800aa70:	4689      	mov	r9, r1
 800aa72:	460d      	mov	r5, r1
 800aa74:	6919      	ldr	r1, [r3, #16]
 800aa76:	9b00      	ldr	r3, [sp, #0]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	1ac9      	subs	r1, r1, r3
 800aa7c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa80:	1a9b      	subs	r3, r3, r2
 800aa82:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	bfcd      	iteet	gt
 800aa8a:	463a      	movgt	r2, r7
 800aa8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa90:	462a      	movle	r2, r5
 800aa92:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800aa96:	bfd8      	it	le
 800aa98:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	464b      	mov	r3, r9
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	4659      	mov	r1, fp
 800aaa6:	f7f5 fea9 	bl	80007fc <__aeabi_ddiv>
 800aaaa:	b005      	add	sp, #20
 800aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aab0 <__copybits>:
 800aab0:	3901      	subs	r1, #1
 800aab2:	b570      	push	{r4, r5, r6, lr}
 800aab4:	1149      	asrs	r1, r1, #5
 800aab6:	6914      	ldr	r4, [r2, #16]
 800aab8:	3101      	adds	r1, #1
 800aaba:	f102 0314 	add.w	r3, r2, #20
 800aabe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aac2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aac6:	1f05      	subs	r5, r0, #4
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	d30c      	bcc.n	800aae6 <__copybits+0x36>
 800aacc:	1aa3      	subs	r3, r4, r2
 800aace:	3b11      	subs	r3, #17
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	3211      	adds	r2, #17
 800aad6:	42a2      	cmp	r2, r4
 800aad8:	bf88      	it	hi
 800aada:	2300      	movhi	r3, #0
 800aadc:	4418      	add	r0, r3
 800aade:	2300      	movs	r3, #0
 800aae0:	4288      	cmp	r0, r1
 800aae2:	d305      	bcc.n	800aaf0 <__copybits+0x40>
 800aae4:	bd70      	pop	{r4, r5, r6, pc}
 800aae6:	f853 6b04 	ldr.w	r6, [r3], #4
 800aaea:	f845 6f04 	str.w	r6, [r5, #4]!
 800aaee:	e7eb      	b.n	800aac8 <__copybits+0x18>
 800aaf0:	f840 3b04 	str.w	r3, [r0], #4
 800aaf4:	e7f4      	b.n	800aae0 <__copybits+0x30>

0800aaf6 <__any_on>:
 800aaf6:	f100 0214 	add.w	r2, r0, #20
 800aafa:	6900      	ldr	r0, [r0, #16]
 800aafc:	114b      	asrs	r3, r1, #5
 800aafe:	4298      	cmp	r0, r3
 800ab00:	b510      	push	{r4, lr}
 800ab02:	db11      	blt.n	800ab28 <__any_on+0x32>
 800ab04:	dd0a      	ble.n	800ab1c <__any_on+0x26>
 800ab06:	f011 011f 	ands.w	r1, r1, #31
 800ab0a:	d007      	beq.n	800ab1c <__any_on+0x26>
 800ab0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab10:	fa24 f001 	lsr.w	r0, r4, r1
 800ab14:	fa00 f101 	lsl.w	r1, r0, r1
 800ab18:	428c      	cmp	r4, r1
 800ab1a:	d10b      	bne.n	800ab34 <__any_on+0x3e>
 800ab1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d803      	bhi.n	800ab2c <__any_on+0x36>
 800ab24:	2000      	movs	r0, #0
 800ab26:	bd10      	pop	{r4, pc}
 800ab28:	4603      	mov	r3, r0
 800ab2a:	e7f7      	b.n	800ab1c <__any_on+0x26>
 800ab2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab30:	2900      	cmp	r1, #0
 800ab32:	d0f5      	beq.n	800ab20 <__any_on+0x2a>
 800ab34:	2001      	movs	r0, #1
 800ab36:	e7f6      	b.n	800ab26 <__any_on+0x30>

0800ab38 <sulp>:
 800ab38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	4690      	mov	r8, r2
 800ab40:	f7ff fec4 	bl	800a8cc <__ulp>
 800ab44:	4604      	mov	r4, r0
 800ab46:	460d      	mov	r5, r1
 800ab48:	f1b8 0f00 	cmp.w	r8, #0
 800ab4c:	d011      	beq.n	800ab72 <sulp+0x3a>
 800ab4e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab52:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dd0b      	ble.n	800ab72 <sulp+0x3a>
 800ab5a:	051b      	lsls	r3, r3, #20
 800ab5c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab60:	2400      	movs	r4, #0
 800ab62:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab66:	4622      	mov	r2, r4
 800ab68:	462b      	mov	r3, r5
 800ab6a:	f7f5 fd1d 	bl	80005a8 <__aeabi_dmul>
 800ab6e:	4604      	mov	r4, r0
 800ab70:	460d      	mov	r5, r1
 800ab72:	4620      	mov	r0, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab7a:	0000      	movs	r0, r0
 800ab7c:	0000      	movs	r0, r0
	...

0800ab80 <_strtod_l>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	b09f      	sub	sp, #124	@ 0x7c
 800ab86:	460c      	mov	r4, r1
 800ab88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab8e:	9005      	str	r0, [sp, #20]
 800ab90:	f04f 0a00 	mov.w	sl, #0
 800ab94:	f04f 0b00 	mov.w	fp, #0
 800ab98:	460a      	mov	r2, r1
 800ab9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab9c:	7811      	ldrb	r1, [r2, #0]
 800ab9e:	292b      	cmp	r1, #43	@ 0x2b
 800aba0:	d048      	beq.n	800ac34 <_strtod_l+0xb4>
 800aba2:	d836      	bhi.n	800ac12 <_strtod_l+0x92>
 800aba4:	290d      	cmp	r1, #13
 800aba6:	d830      	bhi.n	800ac0a <_strtod_l+0x8a>
 800aba8:	2908      	cmp	r1, #8
 800abaa:	d830      	bhi.n	800ac0e <_strtod_l+0x8e>
 800abac:	2900      	cmp	r1, #0
 800abae:	d039      	beq.n	800ac24 <_strtod_l+0xa4>
 800abb0:	2200      	movs	r2, #0
 800abb2:	920e      	str	r2, [sp, #56]	@ 0x38
 800abb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800abb6:	782a      	ldrb	r2, [r5, #0]
 800abb8:	2a30      	cmp	r2, #48	@ 0x30
 800abba:	f040 80b0 	bne.w	800ad1e <_strtod_l+0x19e>
 800abbe:	786a      	ldrb	r2, [r5, #1]
 800abc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abc4:	2a58      	cmp	r2, #88	@ 0x58
 800abc6:	d16c      	bne.n	800aca2 <_strtod_l+0x122>
 800abc8:	9302      	str	r3, [sp, #8]
 800abca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abcc:	9301      	str	r3, [sp, #4]
 800abce:	ab1a      	add	r3, sp, #104	@ 0x68
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	4a8e      	ldr	r2, [pc, #568]	@ (800ae0c <_strtod_l+0x28c>)
 800abd4:	9805      	ldr	r0, [sp, #20]
 800abd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800abd8:	a919      	add	r1, sp, #100	@ 0x64
 800abda:	f001 fac7 	bl	800c16c <__gethex>
 800abde:	f010 060f 	ands.w	r6, r0, #15
 800abe2:	4604      	mov	r4, r0
 800abe4:	d005      	beq.n	800abf2 <_strtod_l+0x72>
 800abe6:	2e06      	cmp	r6, #6
 800abe8:	d126      	bne.n	800ac38 <_strtod_l+0xb8>
 800abea:	3501      	adds	r5, #1
 800abec:	2300      	movs	r3, #0
 800abee:	9519      	str	r5, [sp, #100]	@ 0x64
 800abf0:	930e      	str	r3, [sp, #56]	@ 0x38
 800abf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f040 857e 	bne.w	800b6f6 <_strtod_l+0xb76>
 800abfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abfc:	b1bb      	cbz	r3, 800ac2e <_strtod_l+0xae>
 800abfe:	4650      	mov	r0, sl
 800ac00:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800ac04:	b01f      	add	sp, #124	@ 0x7c
 800ac06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0a:	2920      	cmp	r1, #32
 800ac0c:	d1d0      	bne.n	800abb0 <_strtod_l+0x30>
 800ac0e:	3201      	adds	r2, #1
 800ac10:	e7c3      	b.n	800ab9a <_strtod_l+0x1a>
 800ac12:	292d      	cmp	r1, #45	@ 0x2d
 800ac14:	d1cc      	bne.n	800abb0 <_strtod_l+0x30>
 800ac16:	2101      	movs	r1, #1
 800ac18:	910e      	str	r1, [sp, #56]	@ 0x38
 800ac1a:	1c51      	adds	r1, r2, #1
 800ac1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac1e:	7852      	ldrb	r2, [r2, #1]
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	d1c7      	bne.n	800abb4 <_strtod_l+0x34>
 800ac24:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac26:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f040 8562 	bne.w	800b6f2 <_strtod_l+0xb72>
 800ac2e:	4650      	mov	r0, sl
 800ac30:	4659      	mov	r1, fp
 800ac32:	e7e7      	b.n	800ac04 <_strtod_l+0x84>
 800ac34:	2100      	movs	r1, #0
 800ac36:	e7ef      	b.n	800ac18 <_strtod_l+0x98>
 800ac38:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac3a:	b13a      	cbz	r2, 800ac4c <_strtod_l+0xcc>
 800ac3c:	2135      	movs	r1, #53	@ 0x35
 800ac3e:	a81c      	add	r0, sp, #112	@ 0x70
 800ac40:	f7ff ff36 	bl	800aab0 <__copybits>
 800ac44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac46:	9805      	ldr	r0, [sp, #20]
 800ac48:	f7ff fb16 	bl	800a278 <_Bfree>
 800ac4c:	3e01      	subs	r6, #1
 800ac4e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac50:	2e04      	cmp	r6, #4
 800ac52:	d806      	bhi.n	800ac62 <_strtod_l+0xe2>
 800ac54:	e8df f006 	tbb	[pc, r6]
 800ac58:	201d0314 	.word	0x201d0314
 800ac5c:	14          	.byte	0x14
 800ac5d:	00          	.byte	0x00
 800ac5e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac62:	05e1      	lsls	r1, r4, #23
 800ac64:	bf48      	it	mi
 800ac66:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac6a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac6e:	0d1b      	lsrs	r3, r3, #20
 800ac70:	051b      	lsls	r3, r3, #20
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1bd      	bne.n	800abf2 <_strtod_l+0x72>
 800ac76:	f7fe fb27 	bl	80092c8 <__errno>
 800ac7a:	2322      	movs	r3, #34	@ 0x22
 800ac7c:	6003      	str	r3, [r0, #0]
 800ac7e:	e7b8      	b.n	800abf2 <_strtod_l+0x72>
 800ac80:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac84:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac8c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac90:	e7e7      	b.n	800ac62 <_strtod_l+0xe2>
 800ac92:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ae10 <_strtod_l+0x290>
 800ac96:	e7e4      	b.n	800ac62 <_strtod_l+0xe2>
 800ac98:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac9c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800aca0:	e7df      	b.n	800ac62 <_strtod_l+0xe2>
 800aca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aca4:	1c5a      	adds	r2, r3, #1
 800aca6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aca8:	785b      	ldrb	r3, [r3, #1]
 800acaa:	2b30      	cmp	r3, #48	@ 0x30
 800acac:	d0f9      	beq.n	800aca2 <_strtod_l+0x122>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d09f      	beq.n	800abf2 <_strtod_l+0x72>
 800acb2:	2301      	movs	r3, #1
 800acb4:	2700      	movs	r7, #0
 800acb6:	9308      	str	r3, [sp, #32]
 800acb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acba:	930c      	str	r3, [sp, #48]	@ 0x30
 800acbc:	970b      	str	r7, [sp, #44]	@ 0x2c
 800acbe:	46b9      	mov	r9, r7
 800acc0:	220a      	movs	r2, #10
 800acc2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800acc4:	7805      	ldrb	r5, [r0, #0]
 800acc6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800acca:	b2d9      	uxtb	r1, r3
 800accc:	2909      	cmp	r1, #9
 800acce:	d928      	bls.n	800ad22 <_strtod_l+0x1a2>
 800acd0:	4950      	ldr	r1, [pc, #320]	@ (800ae14 <_strtod_l+0x294>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	f001 f966 	bl	800bfa4 <strncmp>
 800acd8:	2800      	cmp	r0, #0
 800acda:	d032      	beq.n	800ad42 <_strtod_l+0x1c2>
 800acdc:	2000      	movs	r0, #0
 800acde:	462a      	mov	r2, r5
 800ace0:	900a      	str	r0, [sp, #40]	@ 0x28
 800ace2:	464d      	mov	r5, r9
 800ace4:	4603      	mov	r3, r0
 800ace6:	2a65      	cmp	r2, #101	@ 0x65
 800ace8:	d001      	beq.n	800acee <_strtod_l+0x16e>
 800acea:	2a45      	cmp	r2, #69	@ 0x45
 800acec:	d114      	bne.n	800ad18 <_strtod_l+0x198>
 800acee:	b91d      	cbnz	r5, 800acf8 <_strtod_l+0x178>
 800acf0:	9a08      	ldr	r2, [sp, #32]
 800acf2:	4302      	orrs	r2, r0
 800acf4:	d096      	beq.n	800ac24 <_strtod_l+0xa4>
 800acf6:	2500      	movs	r5, #0
 800acf8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800acfa:	1c62      	adds	r2, r4, #1
 800acfc:	9219      	str	r2, [sp, #100]	@ 0x64
 800acfe:	7862      	ldrb	r2, [r4, #1]
 800ad00:	2a2b      	cmp	r2, #43	@ 0x2b
 800ad02:	d07a      	beq.n	800adfa <_strtod_l+0x27a>
 800ad04:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad06:	d07e      	beq.n	800ae06 <_strtod_l+0x286>
 800ad08:	f04f 0c00 	mov.w	ip, #0
 800ad0c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad10:	2909      	cmp	r1, #9
 800ad12:	f240 8085 	bls.w	800ae20 <_strtod_l+0x2a0>
 800ad16:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad18:	f04f 0800 	mov.w	r8, #0
 800ad1c:	e0a5      	b.n	800ae6a <_strtod_l+0x2ea>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	e7c8      	b.n	800acb4 <_strtod_l+0x134>
 800ad22:	f1b9 0f08 	cmp.w	r9, #8
 800ad26:	bfd8      	it	le
 800ad28:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ad2a:	f100 0001 	add.w	r0, r0, #1
 800ad2e:	bfda      	itte	le
 800ad30:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad34:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ad36:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ad3a:	f109 0901 	add.w	r9, r9, #1
 800ad3e:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad40:	e7bf      	b.n	800acc2 <_strtod_l+0x142>
 800ad42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad48:	785a      	ldrb	r2, [r3, #1]
 800ad4a:	f1b9 0f00 	cmp.w	r9, #0
 800ad4e:	d03b      	beq.n	800adc8 <_strtod_l+0x248>
 800ad50:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad52:	464d      	mov	r5, r9
 800ad54:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad58:	2b09      	cmp	r3, #9
 800ad5a:	d912      	bls.n	800ad82 <_strtod_l+0x202>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e7c2      	b.n	800ace6 <_strtod_l+0x166>
 800ad60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad66:	785a      	ldrb	r2, [r3, #1]
 800ad68:	3001      	adds	r0, #1
 800ad6a:	2a30      	cmp	r2, #48	@ 0x30
 800ad6c:	d0f8      	beq.n	800ad60 <_strtod_l+0x1e0>
 800ad6e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad72:	2b08      	cmp	r3, #8
 800ad74:	f200 84c4 	bhi.w	800b700 <_strtod_l+0xb80>
 800ad78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad7a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad80:	4605      	mov	r5, r0
 800ad82:	3a30      	subs	r2, #48	@ 0x30
 800ad84:	f100 0301 	add.w	r3, r0, #1
 800ad88:	d018      	beq.n	800adbc <_strtod_l+0x23c>
 800ad8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad8c:	4419      	add	r1, r3
 800ad8e:	910a      	str	r1, [sp, #40]	@ 0x28
 800ad90:	462e      	mov	r6, r5
 800ad92:	f04f 0e0a 	mov.w	lr, #10
 800ad96:	1c71      	adds	r1, r6, #1
 800ad98:	eba1 0c05 	sub.w	ip, r1, r5
 800ad9c:	4563      	cmp	r3, ip
 800ad9e:	dc15      	bgt.n	800adcc <_strtod_l+0x24c>
 800ada0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ada4:	182b      	adds	r3, r5, r0
 800ada6:	2b08      	cmp	r3, #8
 800ada8:	f105 0501 	add.w	r5, r5, #1
 800adac:	4405      	add	r5, r0
 800adae:	dc1a      	bgt.n	800ade6 <_strtod_l+0x266>
 800adb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adb2:	230a      	movs	r3, #10
 800adb4:	fb03 2301 	mla	r3, r3, r1, r2
 800adb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adba:	2300      	movs	r3, #0
 800adbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adbe:	1c51      	adds	r1, r2, #1
 800adc0:	9119      	str	r1, [sp, #100]	@ 0x64
 800adc2:	7852      	ldrb	r2, [r2, #1]
 800adc4:	4618      	mov	r0, r3
 800adc6:	e7c5      	b.n	800ad54 <_strtod_l+0x1d4>
 800adc8:	4648      	mov	r0, r9
 800adca:	e7ce      	b.n	800ad6a <_strtod_l+0x1ea>
 800adcc:	2e08      	cmp	r6, #8
 800adce:	dc05      	bgt.n	800addc <_strtod_l+0x25c>
 800add0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800add2:	fb0e f606 	mul.w	r6, lr, r6
 800add6:	960b      	str	r6, [sp, #44]	@ 0x2c
 800add8:	460e      	mov	r6, r1
 800adda:	e7dc      	b.n	800ad96 <_strtod_l+0x216>
 800addc:	2910      	cmp	r1, #16
 800adde:	bfd8      	it	le
 800ade0:	fb0e f707 	mulle.w	r7, lr, r7
 800ade4:	e7f8      	b.n	800add8 <_strtod_l+0x258>
 800ade6:	2b0f      	cmp	r3, #15
 800ade8:	bfdc      	itt	le
 800adea:	230a      	movle	r3, #10
 800adec:	fb03 2707 	mlale	r7, r3, r7, r2
 800adf0:	e7e3      	b.n	800adba <_strtod_l+0x23a>
 800adf2:	2300      	movs	r3, #0
 800adf4:	930a      	str	r3, [sp, #40]	@ 0x28
 800adf6:	2301      	movs	r3, #1
 800adf8:	e77a      	b.n	800acf0 <_strtod_l+0x170>
 800adfa:	f04f 0c00 	mov.w	ip, #0
 800adfe:	1ca2      	adds	r2, r4, #2
 800ae00:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae02:	78a2      	ldrb	r2, [r4, #2]
 800ae04:	e782      	b.n	800ad0c <_strtod_l+0x18c>
 800ae06:	f04f 0c01 	mov.w	ip, #1
 800ae0a:	e7f8      	b.n	800adfe <_strtod_l+0x27e>
 800ae0c:	0800d124 	.word	0x0800d124
 800ae10:	7ff00000 	.word	0x7ff00000
 800ae14:	0800cf57 	.word	0x0800cf57
 800ae18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae1a:	1c51      	adds	r1, r2, #1
 800ae1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae1e:	7852      	ldrb	r2, [r2, #1]
 800ae20:	2a30      	cmp	r2, #48	@ 0x30
 800ae22:	d0f9      	beq.n	800ae18 <_strtod_l+0x298>
 800ae24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae28:	2908      	cmp	r1, #8
 800ae2a:	f63f af75 	bhi.w	800ad18 <_strtod_l+0x198>
 800ae2e:	3a30      	subs	r2, #48	@ 0x30
 800ae30:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae34:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae36:	f04f 080a 	mov.w	r8, #10
 800ae3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae3c:	1c56      	adds	r6, r2, #1
 800ae3e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae40:	7852      	ldrb	r2, [r2, #1]
 800ae42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae46:	f1be 0f09 	cmp.w	lr, #9
 800ae4a:	d939      	bls.n	800aec0 <_strtod_l+0x340>
 800ae4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae4e:	1a76      	subs	r6, r6, r1
 800ae50:	2e08      	cmp	r6, #8
 800ae52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae56:	dc03      	bgt.n	800ae60 <_strtod_l+0x2e0>
 800ae58:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae5a:	4588      	cmp	r8, r1
 800ae5c:	bfa8      	it	ge
 800ae5e:	4688      	movge	r8, r1
 800ae60:	f1bc 0f00 	cmp.w	ip, #0
 800ae64:	d001      	beq.n	800ae6a <_strtod_l+0x2ea>
 800ae66:	f1c8 0800 	rsb	r8, r8, #0
 800ae6a:	2d00      	cmp	r5, #0
 800ae6c:	d14e      	bne.n	800af0c <_strtod_l+0x38c>
 800ae6e:	9908      	ldr	r1, [sp, #32]
 800ae70:	4308      	orrs	r0, r1
 800ae72:	f47f aebe 	bne.w	800abf2 <_strtod_l+0x72>
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f47f aed4 	bne.w	800ac24 <_strtod_l+0xa4>
 800ae7c:	2a69      	cmp	r2, #105	@ 0x69
 800ae7e:	d028      	beq.n	800aed2 <_strtod_l+0x352>
 800ae80:	dc25      	bgt.n	800aece <_strtod_l+0x34e>
 800ae82:	2a49      	cmp	r2, #73	@ 0x49
 800ae84:	d025      	beq.n	800aed2 <_strtod_l+0x352>
 800ae86:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae88:	f47f aecc 	bne.w	800ac24 <_strtod_l+0xa4>
 800ae8c:	4999      	ldr	r1, [pc, #612]	@ (800b0f4 <_strtod_l+0x574>)
 800ae8e:	a819      	add	r0, sp, #100	@ 0x64
 800ae90:	f001 fb8e 	bl	800c5b0 <__match>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	f43f aec5 	beq.w	800ac24 <_strtod_l+0xa4>
 800ae9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	2b28      	cmp	r3, #40	@ 0x28
 800aea0:	d12e      	bne.n	800af00 <_strtod_l+0x380>
 800aea2:	4995      	ldr	r1, [pc, #596]	@ (800b0f8 <_strtod_l+0x578>)
 800aea4:	aa1c      	add	r2, sp, #112	@ 0x70
 800aea6:	a819      	add	r0, sp, #100	@ 0x64
 800aea8:	f001 fb96 	bl	800c5d8 <__hexnan>
 800aeac:	2805      	cmp	r0, #5
 800aeae:	d127      	bne.n	800af00 <_strtod_l+0x380>
 800aeb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aeb2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aeb6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aeba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aebe:	e698      	b.n	800abf2 <_strtod_l+0x72>
 800aec0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aec2:	fb08 2101 	mla	r1, r8, r1, r2
 800aec6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aeca:	9209      	str	r2, [sp, #36]	@ 0x24
 800aecc:	e7b5      	b.n	800ae3a <_strtod_l+0x2ba>
 800aece:	2a6e      	cmp	r2, #110	@ 0x6e
 800aed0:	e7da      	b.n	800ae88 <_strtod_l+0x308>
 800aed2:	498a      	ldr	r1, [pc, #552]	@ (800b0fc <_strtod_l+0x57c>)
 800aed4:	a819      	add	r0, sp, #100	@ 0x64
 800aed6:	f001 fb6b 	bl	800c5b0 <__match>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	f43f aea2 	beq.w	800ac24 <_strtod_l+0xa4>
 800aee0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aee2:	4987      	ldr	r1, [pc, #540]	@ (800b100 <_strtod_l+0x580>)
 800aee4:	3b01      	subs	r3, #1
 800aee6:	a819      	add	r0, sp, #100	@ 0x64
 800aee8:	9319      	str	r3, [sp, #100]	@ 0x64
 800aeea:	f001 fb61 	bl	800c5b0 <__match>
 800aeee:	b910      	cbnz	r0, 800aef6 <_strtod_l+0x376>
 800aef0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aef2:	3301      	adds	r3, #1
 800aef4:	9319      	str	r3, [sp, #100]	@ 0x64
 800aef6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800b104 <_strtod_l+0x584>
 800aefa:	f04f 0a00 	mov.w	sl, #0
 800aefe:	e678      	b.n	800abf2 <_strtod_l+0x72>
 800af00:	4881      	ldr	r0, [pc, #516]	@ (800b108 <_strtod_l+0x588>)
 800af02:	f001 f893 	bl	800c02c <nan>
 800af06:	4682      	mov	sl, r0
 800af08:	468b      	mov	fp, r1
 800af0a:	e672      	b.n	800abf2 <_strtod_l+0x72>
 800af0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af0e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800af10:	eba8 0303 	sub.w	r3, r8, r3
 800af14:	f1b9 0f00 	cmp.w	r9, #0
 800af18:	bf08      	it	eq
 800af1a:	46a9      	moveq	r9, r5
 800af1c:	2d10      	cmp	r5, #16
 800af1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af20:	462c      	mov	r4, r5
 800af22:	bfa8      	it	ge
 800af24:	2410      	movge	r4, #16
 800af26:	f7f5 fac5 	bl	80004b4 <__aeabi_ui2d>
 800af2a:	2d09      	cmp	r5, #9
 800af2c:	4682      	mov	sl, r0
 800af2e:	468b      	mov	fp, r1
 800af30:	dc11      	bgt.n	800af56 <_strtod_l+0x3d6>
 800af32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af34:	2b00      	cmp	r3, #0
 800af36:	f43f ae5c 	beq.w	800abf2 <_strtod_l+0x72>
 800af3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af3c:	dd76      	ble.n	800b02c <_strtod_l+0x4ac>
 800af3e:	2b16      	cmp	r3, #22
 800af40:	dc5d      	bgt.n	800affe <_strtod_l+0x47e>
 800af42:	4972      	ldr	r1, [pc, #456]	@ (800b10c <_strtod_l+0x58c>)
 800af44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af4c:	4652      	mov	r2, sl
 800af4e:	465b      	mov	r3, fp
 800af50:	f7f5 fb2a 	bl	80005a8 <__aeabi_dmul>
 800af54:	e7d7      	b.n	800af06 <_strtod_l+0x386>
 800af56:	4b6d      	ldr	r3, [pc, #436]	@ (800b10c <_strtod_l+0x58c>)
 800af58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af60:	f7f5 fb22 	bl	80005a8 <__aeabi_dmul>
 800af64:	4682      	mov	sl, r0
 800af66:	4638      	mov	r0, r7
 800af68:	468b      	mov	fp, r1
 800af6a:	f7f5 faa3 	bl	80004b4 <__aeabi_ui2d>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4650      	mov	r0, sl
 800af74:	4659      	mov	r1, fp
 800af76:	f7f5 f961 	bl	800023c <__adddf3>
 800af7a:	2d0f      	cmp	r5, #15
 800af7c:	4682      	mov	sl, r0
 800af7e:	468b      	mov	fp, r1
 800af80:	ddd7      	ble.n	800af32 <_strtod_l+0x3b2>
 800af82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af84:	1b2c      	subs	r4, r5, r4
 800af86:	441c      	add	r4, r3
 800af88:	2c00      	cmp	r4, #0
 800af8a:	f340 8093 	ble.w	800b0b4 <_strtod_l+0x534>
 800af8e:	f014 030f 	ands.w	r3, r4, #15
 800af92:	d00a      	beq.n	800afaa <_strtod_l+0x42a>
 800af94:	495d      	ldr	r1, [pc, #372]	@ (800b10c <_strtod_l+0x58c>)
 800af96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af9a:	4652      	mov	r2, sl
 800af9c:	465b      	mov	r3, fp
 800af9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa2:	f7f5 fb01 	bl	80005a8 <__aeabi_dmul>
 800afa6:	4682      	mov	sl, r0
 800afa8:	468b      	mov	fp, r1
 800afaa:	f034 040f 	bics.w	r4, r4, #15
 800afae:	d073      	beq.n	800b098 <_strtod_l+0x518>
 800afb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800afb4:	dd49      	ble.n	800b04a <_strtod_l+0x4ca>
 800afb6:	2400      	movs	r4, #0
 800afb8:	46a0      	mov	r8, r4
 800afba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afbc:	46a1      	mov	r9, r4
 800afbe:	9a05      	ldr	r2, [sp, #20]
 800afc0:	f8df b140 	ldr.w	fp, [pc, #320]	@ 800b104 <_strtod_l+0x584>
 800afc4:	2322      	movs	r3, #34	@ 0x22
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	f04f 0a00 	mov.w	sl, #0
 800afcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f43f ae0f 	beq.w	800abf2 <_strtod_l+0x72>
 800afd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afd6:	9805      	ldr	r0, [sp, #20]
 800afd8:	f7ff f94e 	bl	800a278 <_Bfree>
 800afdc:	9805      	ldr	r0, [sp, #20]
 800afde:	4649      	mov	r1, r9
 800afe0:	f7ff f94a 	bl	800a278 <_Bfree>
 800afe4:	9805      	ldr	r0, [sp, #20]
 800afe6:	4641      	mov	r1, r8
 800afe8:	f7ff f946 	bl	800a278 <_Bfree>
 800afec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afee:	9805      	ldr	r0, [sp, #20]
 800aff0:	f7ff f942 	bl	800a278 <_Bfree>
 800aff4:	9805      	ldr	r0, [sp, #20]
 800aff6:	4621      	mov	r1, r4
 800aff8:	f7ff f93e 	bl	800a278 <_Bfree>
 800affc:	e5f9      	b.n	800abf2 <_strtod_l+0x72>
 800affe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b000:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b004:	4293      	cmp	r3, r2
 800b006:	dbbc      	blt.n	800af82 <_strtod_l+0x402>
 800b008:	4c40      	ldr	r4, [pc, #256]	@ (800b10c <_strtod_l+0x58c>)
 800b00a:	f1c5 050f 	rsb	r5, r5, #15
 800b00e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b012:	4652      	mov	r2, sl
 800b014:	465b      	mov	r3, fp
 800b016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b01a:	f7f5 fac5 	bl	80005a8 <__aeabi_dmul>
 800b01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b020:	1b5d      	subs	r5, r3, r5
 800b022:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b026:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b02a:	e791      	b.n	800af50 <_strtod_l+0x3d0>
 800b02c:	3316      	adds	r3, #22
 800b02e:	dba8      	blt.n	800af82 <_strtod_l+0x402>
 800b030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b032:	eba3 0808 	sub.w	r8, r3, r8
 800b036:	4b35      	ldr	r3, [pc, #212]	@ (800b10c <_strtod_l+0x58c>)
 800b038:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b03c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b040:	4650      	mov	r0, sl
 800b042:	4659      	mov	r1, fp
 800b044:	f7f5 fbda 	bl	80007fc <__aeabi_ddiv>
 800b048:	e75d      	b.n	800af06 <_strtod_l+0x386>
 800b04a:	2300      	movs	r3, #0
 800b04c:	4f30      	ldr	r7, [pc, #192]	@ (800b110 <_strtod_l+0x590>)
 800b04e:	1124      	asrs	r4, r4, #4
 800b050:	4650      	mov	r0, sl
 800b052:	4659      	mov	r1, fp
 800b054:	461e      	mov	r6, r3
 800b056:	2c01      	cmp	r4, #1
 800b058:	dc21      	bgt.n	800b09e <_strtod_l+0x51e>
 800b05a:	b10b      	cbz	r3, 800b060 <_strtod_l+0x4e0>
 800b05c:	4682      	mov	sl, r0
 800b05e:	468b      	mov	fp, r1
 800b060:	492b      	ldr	r1, [pc, #172]	@ (800b110 <_strtod_l+0x590>)
 800b062:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b066:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b06a:	4652      	mov	r2, sl
 800b06c:	465b      	mov	r3, fp
 800b06e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b072:	f7f5 fa99 	bl	80005a8 <__aeabi_dmul>
 800b076:	4b23      	ldr	r3, [pc, #140]	@ (800b104 <_strtod_l+0x584>)
 800b078:	460a      	mov	r2, r1
 800b07a:	400b      	ands	r3, r1
 800b07c:	4925      	ldr	r1, [pc, #148]	@ (800b114 <_strtod_l+0x594>)
 800b07e:	428b      	cmp	r3, r1
 800b080:	4682      	mov	sl, r0
 800b082:	d898      	bhi.n	800afb6 <_strtod_l+0x436>
 800b084:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b088:	428b      	cmp	r3, r1
 800b08a:	bf86      	itte	hi
 800b08c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b118 <_strtod_l+0x598>
 800b090:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b094:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b098:	2300      	movs	r3, #0
 800b09a:	9308      	str	r3, [sp, #32]
 800b09c:	e076      	b.n	800b18c <_strtod_l+0x60c>
 800b09e:	07e2      	lsls	r2, r4, #31
 800b0a0:	d504      	bpl.n	800b0ac <_strtod_l+0x52c>
 800b0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0a6:	f7f5 fa7f 	bl	80005a8 <__aeabi_dmul>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	3601      	adds	r6, #1
 800b0ae:	1064      	asrs	r4, r4, #1
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	e7d0      	b.n	800b056 <_strtod_l+0x4d6>
 800b0b4:	d0f0      	beq.n	800b098 <_strtod_l+0x518>
 800b0b6:	4264      	negs	r4, r4
 800b0b8:	f014 020f 	ands.w	r2, r4, #15
 800b0bc:	d00a      	beq.n	800b0d4 <_strtod_l+0x554>
 800b0be:	4b13      	ldr	r3, [pc, #76]	@ (800b10c <_strtod_l+0x58c>)
 800b0c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0c4:	4650      	mov	r0, sl
 800b0c6:	4659      	mov	r1, fp
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f7f5 fb96 	bl	80007fc <__aeabi_ddiv>
 800b0d0:	4682      	mov	sl, r0
 800b0d2:	468b      	mov	fp, r1
 800b0d4:	1124      	asrs	r4, r4, #4
 800b0d6:	d0df      	beq.n	800b098 <_strtod_l+0x518>
 800b0d8:	2c1f      	cmp	r4, #31
 800b0da:	dd1f      	ble.n	800b11c <_strtod_l+0x59c>
 800b0dc:	2400      	movs	r4, #0
 800b0de:	46a0      	mov	r8, r4
 800b0e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0e2:	46a1      	mov	r9, r4
 800b0e4:	9a05      	ldr	r2, [sp, #20]
 800b0e6:	2322      	movs	r3, #34	@ 0x22
 800b0e8:	f04f 0a00 	mov.w	sl, #0
 800b0ec:	f04f 0b00 	mov.w	fp, #0
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	e76b      	b.n	800afcc <_strtod_l+0x44c>
 800b0f4:	0800ce45 	.word	0x0800ce45
 800b0f8:	0800d110 	.word	0x0800d110
 800b0fc:	0800ce3d 	.word	0x0800ce3d
 800b100:	0800ce74 	.word	0x0800ce74
 800b104:	7ff00000 	.word	0x7ff00000
 800b108:	0800cfad 	.word	0x0800cfad
 800b10c:	0800d048 	.word	0x0800d048
 800b110:	0800d020 	.word	0x0800d020
 800b114:	7ca00000 	.word	0x7ca00000
 800b118:	7fefffff 	.word	0x7fefffff
 800b11c:	f014 0310 	ands.w	r3, r4, #16
 800b120:	bf18      	it	ne
 800b122:	236a      	movne	r3, #106	@ 0x6a
 800b124:	4e78      	ldr	r6, [pc, #480]	@ (800b308 <_strtod_l+0x788>)
 800b126:	9308      	str	r3, [sp, #32]
 800b128:	4650      	mov	r0, sl
 800b12a:	4659      	mov	r1, fp
 800b12c:	2300      	movs	r3, #0
 800b12e:	07e7      	lsls	r7, r4, #31
 800b130:	d504      	bpl.n	800b13c <_strtod_l+0x5bc>
 800b132:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b136:	f7f5 fa37 	bl	80005a8 <__aeabi_dmul>
 800b13a:	2301      	movs	r3, #1
 800b13c:	1064      	asrs	r4, r4, #1
 800b13e:	f106 0608 	add.w	r6, r6, #8
 800b142:	d1f4      	bne.n	800b12e <_strtod_l+0x5ae>
 800b144:	b10b      	cbz	r3, 800b14a <_strtod_l+0x5ca>
 800b146:	4682      	mov	sl, r0
 800b148:	468b      	mov	fp, r1
 800b14a:	9b08      	ldr	r3, [sp, #32]
 800b14c:	b1b3      	cbz	r3, 800b17c <_strtod_l+0x5fc>
 800b14e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b152:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b156:	2b00      	cmp	r3, #0
 800b158:	4659      	mov	r1, fp
 800b15a:	dd0f      	ble.n	800b17c <_strtod_l+0x5fc>
 800b15c:	2b1f      	cmp	r3, #31
 800b15e:	dd58      	ble.n	800b212 <_strtod_l+0x692>
 800b160:	2b34      	cmp	r3, #52	@ 0x34
 800b162:	bfde      	ittt	le
 800b164:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b168:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b16c:	4093      	lslle	r3, r2
 800b16e:	f04f 0a00 	mov.w	sl, #0
 800b172:	bfcc      	ite	gt
 800b174:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b178:	ea03 0b01 	andle.w	fp, r3, r1
 800b17c:	2200      	movs	r2, #0
 800b17e:	2300      	movs	r3, #0
 800b180:	4650      	mov	r0, sl
 800b182:	4659      	mov	r1, fp
 800b184:	f7f5 fc78 	bl	8000a78 <__aeabi_dcmpeq>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d1a7      	bne.n	800b0dc <_strtod_l+0x55c>
 800b18c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b192:	9805      	ldr	r0, [sp, #20]
 800b194:	462b      	mov	r3, r5
 800b196:	464a      	mov	r2, r9
 800b198:	f7ff f8d6 	bl	800a348 <__s2b>
 800b19c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f43f af09 	beq.w	800afb6 <_strtod_l+0x436>
 800b1a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1a8:	2a00      	cmp	r2, #0
 800b1aa:	eba3 0308 	sub.w	r3, r3, r8
 800b1ae:	bfa8      	it	ge
 800b1b0:	2300      	movge	r3, #0
 800b1b2:	9312      	str	r3, [sp, #72]	@ 0x48
 800b1b4:	2400      	movs	r4, #0
 800b1b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b1ba:	9316      	str	r3, [sp, #88]	@ 0x58
 800b1bc:	46a0      	mov	r8, r4
 800b1be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1c0:	9805      	ldr	r0, [sp, #20]
 800b1c2:	6859      	ldr	r1, [r3, #4]
 800b1c4:	f7ff f818 	bl	800a1f8 <_Balloc>
 800b1c8:	4681      	mov	r9, r0
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	f43f aef7 	beq.w	800afbe <_strtod_l+0x43e>
 800b1d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	3202      	adds	r2, #2
 800b1d6:	f103 010c 	add.w	r1, r3, #12
 800b1da:	0092      	lsls	r2, r2, #2
 800b1dc:	300c      	adds	r0, #12
 800b1de:	f7fe f8a0 	bl	8009322 <memcpy>
 800b1e2:	ab1c      	add	r3, sp, #112	@ 0x70
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	9805      	ldr	r0, [sp, #20]
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	465b      	mov	r3, fp
 800b1f0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b1f4:	f7ff fbd4 	bl	800a9a0 <__d2b>
 800b1f8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	f43f aedf 	beq.w	800afbe <_strtod_l+0x43e>
 800b200:	9805      	ldr	r0, [sp, #20]
 800b202:	2101      	movs	r1, #1
 800b204:	f7ff f936 	bl	800a474 <__i2b>
 800b208:	4680      	mov	r8, r0
 800b20a:	b948      	cbnz	r0, 800b220 <_strtod_l+0x6a0>
 800b20c:	f04f 0800 	mov.w	r8, #0
 800b210:	e6d5      	b.n	800afbe <_strtod_l+0x43e>
 800b212:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b216:	fa02 f303 	lsl.w	r3, r2, r3
 800b21a:	ea03 0a0a 	and.w	sl, r3, sl
 800b21e:	e7ad      	b.n	800b17c <_strtod_l+0x5fc>
 800b220:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b222:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b224:	2d00      	cmp	r5, #0
 800b226:	bfab      	itete	ge
 800b228:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b22a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b22c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b22e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b230:	bfac      	ite	ge
 800b232:	18ef      	addge	r7, r5, r3
 800b234:	1b5e      	sublt	r6, r3, r5
 800b236:	9b08      	ldr	r3, [sp, #32]
 800b238:	1aed      	subs	r5, r5, r3
 800b23a:	4415      	add	r5, r2
 800b23c:	4b33      	ldr	r3, [pc, #204]	@ (800b30c <_strtod_l+0x78c>)
 800b23e:	3d01      	subs	r5, #1
 800b240:	429d      	cmp	r5, r3
 800b242:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b246:	da50      	bge.n	800b2ea <_strtod_l+0x76a>
 800b248:	1b5b      	subs	r3, r3, r5
 800b24a:	2b1f      	cmp	r3, #31
 800b24c:	eba2 0203 	sub.w	r2, r2, r3
 800b250:	f04f 0101 	mov.w	r1, #1
 800b254:	dc3d      	bgt.n	800b2d2 <_strtod_l+0x752>
 800b256:	fa01 f303 	lsl.w	r3, r1, r3
 800b25a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b25c:	2300      	movs	r3, #0
 800b25e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b260:	18bd      	adds	r5, r7, r2
 800b262:	9b08      	ldr	r3, [sp, #32]
 800b264:	42af      	cmp	r7, r5
 800b266:	4416      	add	r6, r2
 800b268:	441e      	add	r6, r3
 800b26a:	463b      	mov	r3, r7
 800b26c:	bfa8      	it	ge
 800b26e:	462b      	movge	r3, r5
 800b270:	42b3      	cmp	r3, r6
 800b272:	bfa8      	it	ge
 800b274:	4633      	movge	r3, r6
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfc2      	ittt	gt
 800b27a:	1aed      	subgt	r5, r5, r3
 800b27c:	1af6      	subgt	r6, r6, r3
 800b27e:	1aff      	subgt	r7, r7, r3
 800b280:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b282:	2b00      	cmp	r3, #0
 800b284:	dd16      	ble.n	800b2b4 <_strtod_l+0x734>
 800b286:	4641      	mov	r1, r8
 800b288:	9805      	ldr	r0, [sp, #20]
 800b28a:	461a      	mov	r2, r3
 800b28c:	f7ff f9aa 	bl	800a5e4 <__pow5mult>
 800b290:	4680      	mov	r8, r0
 800b292:	2800      	cmp	r0, #0
 800b294:	d0ba      	beq.n	800b20c <_strtod_l+0x68c>
 800b296:	4601      	mov	r1, r0
 800b298:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b29a:	9805      	ldr	r0, [sp, #20]
 800b29c:	f7ff f900 	bl	800a4a0 <__multiply>
 800b2a0:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	f43f ae8b 	beq.w	800afbe <_strtod_l+0x43e>
 800b2a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2aa:	9805      	ldr	r0, [sp, #20]
 800b2ac:	f7fe ffe4 	bl	800a278 <_Bfree>
 800b2b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2b4:	2d00      	cmp	r5, #0
 800b2b6:	dc1d      	bgt.n	800b2f4 <_strtod_l+0x774>
 800b2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	dd28      	ble.n	800b310 <_strtod_l+0x790>
 800b2be:	4649      	mov	r1, r9
 800b2c0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b2c2:	9805      	ldr	r0, [sp, #20]
 800b2c4:	f7ff f98e 	bl	800a5e4 <__pow5mult>
 800b2c8:	4681      	mov	r9, r0
 800b2ca:	bb08      	cbnz	r0, 800b310 <_strtod_l+0x790>
 800b2cc:	f04f 0900 	mov.w	r9, #0
 800b2d0:	e675      	b.n	800afbe <_strtod_l+0x43e>
 800b2d2:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2d6:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2da:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b2de:	35e2      	adds	r5, #226	@ 0xe2
 800b2e0:	fa01 f305 	lsl.w	r3, r1, r5
 800b2e4:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2e6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b2e8:	e7ba      	b.n	800b260 <_strtod_l+0x6e0>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2f2:	e7b5      	b.n	800b260 <_strtod_l+0x6e0>
 800b2f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2f6:	9805      	ldr	r0, [sp, #20]
 800b2f8:	462a      	mov	r2, r5
 800b2fa:	f7ff f9cd 	bl	800a698 <__lshift>
 800b2fe:	901a      	str	r0, [sp, #104]	@ 0x68
 800b300:	2800      	cmp	r0, #0
 800b302:	d1d9      	bne.n	800b2b8 <_strtod_l+0x738>
 800b304:	e65b      	b.n	800afbe <_strtod_l+0x43e>
 800b306:	bf00      	nop
 800b308:	0800d138 	.word	0x0800d138
 800b30c:	fffffc02 	.word	0xfffffc02
 800b310:	2e00      	cmp	r6, #0
 800b312:	dd07      	ble.n	800b324 <_strtod_l+0x7a4>
 800b314:	4649      	mov	r1, r9
 800b316:	9805      	ldr	r0, [sp, #20]
 800b318:	4632      	mov	r2, r6
 800b31a:	f7ff f9bd 	bl	800a698 <__lshift>
 800b31e:	4681      	mov	r9, r0
 800b320:	2800      	cmp	r0, #0
 800b322:	d0d3      	beq.n	800b2cc <_strtod_l+0x74c>
 800b324:	2f00      	cmp	r7, #0
 800b326:	dd08      	ble.n	800b33a <_strtod_l+0x7ba>
 800b328:	4641      	mov	r1, r8
 800b32a:	9805      	ldr	r0, [sp, #20]
 800b32c:	463a      	mov	r2, r7
 800b32e:	f7ff f9b3 	bl	800a698 <__lshift>
 800b332:	4680      	mov	r8, r0
 800b334:	2800      	cmp	r0, #0
 800b336:	f43f ae42 	beq.w	800afbe <_strtod_l+0x43e>
 800b33a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b33c:	9805      	ldr	r0, [sp, #20]
 800b33e:	464a      	mov	r2, r9
 800b340:	f7ff fa32 	bl	800a7a8 <__mdiff>
 800b344:	4604      	mov	r4, r0
 800b346:	2800      	cmp	r0, #0
 800b348:	f43f ae39 	beq.w	800afbe <_strtod_l+0x43e>
 800b34c:	68c3      	ldr	r3, [r0, #12]
 800b34e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b350:	2300      	movs	r3, #0
 800b352:	60c3      	str	r3, [r0, #12]
 800b354:	4641      	mov	r1, r8
 800b356:	f7ff fa0b 	bl	800a770 <__mcmp>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	da3d      	bge.n	800b3da <_strtod_l+0x85a>
 800b35e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b360:	ea53 030a 	orrs.w	r3, r3, sl
 800b364:	d163      	bne.n	800b42e <_strtod_l+0x8ae>
 800b366:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d15f      	bne.n	800b42e <_strtod_l+0x8ae>
 800b36e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b372:	0d1b      	lsrs	r3, r3, #20
 800b374:	051b      	lsls	r3, r3, #20
 800b376:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b37a:	d958      	bls.n	800b42e <_strtod_l+0x8ae>
 800b37c:	6963      	ldr	r3, [r4, #20]
 800b37e:	b913      	cbnz	r3, 800b386 <_strtod_l+0x806>
 800b380:	6923      	ldr	r3, [r4, #16]
 800b382:	2b01      	cmp	r3, #1
 800b384:	dd53      	ble.n	800b42e <_strtod_l+0x8ae>
 800b386:	4621      	mov	r1, r4
 800b388:	2201      	movs	r2, #1
 800b38a:	9805      	ldr	r0, [sp, #20]
 800b38c:	f7ff f984 	bl	800a698 <__lshift>
 800b390:	4641      	mov	r1, r8
 800b392:	4604      	mov	r4, r0
 800b394:	f7ff f9ec 	bl	800a770 <__mcmp>
 800b398:	2800      	cmp	r0, #0
 800b39a:	dd48      	ble.n	800b42e <_strtod_l+0x8ae>
 800b39c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3a0:	9a08      	ldr	r2, [sp, #32]
 800b3a2:	0d1b      	lsrs	r3, r3, #20
 800b3a4:	051b      	lsls	r3, r3, #20
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	d062      	beq.n	800b470 <_strtod_l+0x8f0>
 800b3aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3ae:	d85f      	bhi.n	800b470 <_strtod_l+0x8f0>
 800b3b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b3b4:	f67f ae96 	bls.w	800b0e4 <_strtod_l+0x564>
 800b3b8:	4ba3      	ldr	r3, [pc, #652]	@ (800b648 <_strtod_l+0xac8>)
 800b3ba:	4650      	mov	r0, sl
 800b3bc:	4659      	mov	r1, fp
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f7f5 f8f2 	bl	80005a8 <__aeabi_dmul>
 800b3c4:	4ba1      	ldr	r3, [pc, #644]	@ (800b64c <_strtod_l+0xacc>)
 800b3c6:	400b      	ands	r3, r1
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	468b      	mov	fp, r1
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f47f ae01 	bne.w	800afd4 <_strtod_l+0x454>
 800b3d2:	9a05      	ldr	r2, [sp, #20]
 800b3d4:	2322      	movs	r3, #34	@ 0x22
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	e5fc      	b.n	800afd4 <_strtod_l+0x454>
 800b3da:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b3de:	d165      	bne.n	800b4ac <_strtod_l+0x92c>
 800b3e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3e6:	b35a      	cbz	r2, 800b440 <_strtod_l+0x8c0>
 800b3e8:	4a99      	ldr	r2, [pc, #612]	@ (800b650 <_strtod_l+0xad0>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d12b      	bne.n	800b446 <_strtod_l+0x8c6>
 800b3ee:	9b08      	ldr	r3, [sp, #32]
 800b3f0:	4651      	mov	r1, sl
 800b3f2:	b303      	cbz	r3, 800b436 <_strtod_l+0x8b6>
 800b3f4:	4b95      	ldr	r3, [pc, #596]	@ (800b64c <_strtod_l+0xacc>)
 800b3f6:	465a      	mov	r2, fp
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b3fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b402:	d81b      	bhi.n	800b43c <_strtod_l+0x8bc>
 800b404:	0d1b      	lsrs	r3, r3, #20
 800b406:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b40a:	fa02 f303 	lsl.w	r3, r2, r3
 800b40e:	4299      	cmp	r1, r3
 800b410:	d119      	bne.n	800b446 <_strtod_l+0x8c6>
 800b412:	4b90      	ldr	r3, [pc, #576]	@ (800b654 <_strtod_l+0xad4>)
 800b414:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b416:	429a      	cmp	r2, r3
 800b418:	d102      	bne.n	800b420 <_strtod_l+0x8a0>
 800b41a:	3101      	adds	r1, #1
 800b41c:	f43f adcf 	beq.w	800afbe <_strtod_l+0x43e>
 800b420:	4b8a      	ldr	r3, [pc, #552]	@ (800b64c <_strtod_l+0xacc>)
 800b422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b424:	401a      	ands	r2, r3
 800b426:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b42a:	f04f 0a00 	mov.w	sl, #0
 800b42e:	9b08      	ldr	r3, [sp, #32]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1c1      	bne.n	800b3b8 <_strtod_l+0x838>
 800b434:	e5ce      	b.n	800afd4 <_strtod_l+0x454>
 800b436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b43a:	e7e8      	b.n	800b40e <_strtod_l+0x88e>
 800b43c:	4613      	mov	r3, r2
 800b43e:	e7e6      	b.n	800b40e <_strtod_l+0x88e>
 800b440:	ea53 030a 	orrs.w	r3, r3, sl
 800b444:	d0aa      	beq.n	800b39c <_strtod_l+0x81c>
 800b446:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b448:	b1db      	cbz	r3, 800b482 <_strtod_l+0x902>
 800b44a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b44c:	4213      	tst	r3, r2
 800b44e:	d0ee      	beq.n	800b42e <_strtod_l+0x8ae>
 800b450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b452:	9a08      	ldr	r2, [sp, #32]
 800b454:	4650      	mov	r0, sl
 800b456:	4659      	mov	r1, fp
 800b458:	b1bb      	cbz	r3, 800b48a <_strtod_l+0x90a>
 800b45a:	f7ff fb6d 	bl	800ab38 <sulp>
 800b45e:	4602      	mov	r2, r0
 800b460:	460b      	mov	r3, r1
 800b462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b466:	f7f4 fee9 	bl	800023c <__adddf3>
 800b46a:	4682      	mov	sl, r0
 800b46c:	468b      	mov	fp, r1
 800b46e:	e7de      	b.n	800b42e <_strtod_l+0x8ae>
 800b470:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b474:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b478:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b47c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b480:	e7d5      	b.n	800b42e <_strtod_l+0x8ae>
 800b482:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b484:	ea13 0f0a 	tst.w	r3, sl
 800b488:	e7e1      	b.n	800b44e <_strtod_l+0x8ce>
 800b48a:	f7ff fb55 	bl	800ab38 <sulp>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b496:	f7f4 fecf 	bl	8000238 <__aeabi_dsub>
 800b49a:	2200      	movs	r2, #0
 800b49c:	2300      	movs	r3, #0
 800b49e:	4682      	mov	sl, r0
 800b4a0:	468b      	mov	fp, r1
 800b4a2:	f7f5 fae9 	bl	8000a78 <__aeabi_dcmpeq>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d0c1      	beq.n	800b42e <_strtod_l+0x8ae>
 800b4aa:	e61b      	b.n	800b0e4 <_strtod_l+0x564>
 800b4ac:	4641      	mov	r1, r8
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7ff face 	bl	800aa50 <__ratio>
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460f      	mov	r7, r1
 800b4be:	f7f5 faef 	bl	8000aa0 <__aeabi_dcmple>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d06d      	beq.n	800b5a2 <_strtod_l+0xa22>
 800b4c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d178      	bne.n	800b5be <_strtod_l+0xa3e>
 800b4cc:	f1ba 0f00 	cmp.w	sl, #0
 800b4d0:	d156      	bne.n	800b580 <_strtod_l+0xa00>
 800b4d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d158      	bne.n	800b58e <_strtod_l+0xa0e>
 800b4dc:	4b5e      	ldr	r3, [pc, #376]	@ (800b658 <_strtod_l+0xad8>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	f7f5 fad2 	bl	8000a8c <__aeabi_dcmplt>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d157      	bne.n	800b59c <_strtod_l+0xa1c>
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	4639      	mov	r1, r7
 800b4f0:	4b5a      	ldr	r3, [pc, #360]	@ (800b65c <_strtod_l+0xadc>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f7f5 f858 	bl	80005a8 <__aeabi_dmul>
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	460f      	mov	r7, r1
 800b4fc:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b500:	9606      	str	r6, [sp, #24]
 800b502:	9307      	str	r3, [sp, #28]
 800b504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b508:	4d50      	ldr	r5, [pc, #320]	@ (800b64c <_strtod_l+0xacc>)
 800b50a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b50e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b510:	401d      	ands	r5, r3
 800b512:	4b53      	ldr	r3, [pc, #332]	@ (800b660 <_strtod_l+0xae0>)
 800b514:	429d      	cmp	r5, r3
 800b516:	f040 80a9 	bne.w	800b66c <_strtod_l+0xaec>
 800b51a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b51c:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b520:	4650      	mov	r0, sl
 800b522:	4659      	mov	r1, fp
 800b524:	f7ff f9d2 	bl	800a8cc <__ulp>
 800b528:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b52c:	f7f5 f83c 	bl	80005a8 <__aeabi_dmul>
 800b530:	4652      	mov	r2, sl
 800b532:	465b      	mov	r3, fp
 800b534:	f7f4 fe82 	bl	800023c <__adddf3>
 800b538:	460b      	mov	r3, r1
 800b53a:	4944      	ldr	r1, [pc, #272]	@ (800b64c <_strtod_l+0xacc>)
 800b53c:	4a49      	ldr	r2, [pc, #292]	@ (800b664 <_strtod_l+0xae4>)
 800b53e:	4019      	ands	r1, r3
 800b540:	4291      	cmp	r1, r2
 800b542:	4682      	mov	sl, r0
 800b544:	d942      	bls.n	800b5cc <_strtod_l+0xa4c>
 800b546:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b548:	4b42      	ldr	r3, [pc, #264]	@ (800b654 <_strtod_l+0xad4>)
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d103      	bne.n	800b556 <_strtod_l+0x9d6>
 800b54e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b550:	3301      	adds	r3, #1
 800b552:	f43f ad34 	beq.w	800afbe <_strtod_l+0x43e>
 800b556:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800b654 <_strtod_l+0xad4>
 800b55a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b55e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b560:	9805      	ldr	r0, [sp, #20]
 800b562:	f7fe fe89 	bl	800a278 <_Bfree>
 800b566:	9805      	ldr	r0, [sp, #20]
 800b568:	4649      	mov	r1, r9
 800b56a:	f7fe fe85 	bl	800a278 <_Bfree>
 800b56e:	9805      	ldr	r0, [sp, #20]
 800b570:	4641      	mov	r1, r8
 800b572:	f7fe fe81 	bl	800a278 <_Bfree>
 800b576:	9805      	ldr	r0, [sp, #20]
 800b578:	4621      	mov	r1, r4
 800b57a:	f7fe fe7d 	bl	800a278 <_Bfree>
 800b57e:	e61e      	b.n	800b1be <_strtod_l+0x63e>
 800b580:	f1ba 0f01 	cmp.w	sl, #1
 800b584:	d103      	bne.n	800b58e <_strtod_l+0xa0e>
 800b586:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f43f adab 	beq.w	800b0e4 <_strtod_l+0x564>
 800b58e:	4b36      	ldr	r3, [pc, #216]	@ (800b668 <_strtod_l+0xae8>)
 800b590:	4f31      	ldr	r7, [pc, #196]	@ (800b658 <_strtod_l+0xad8>)
 800b592:	2200      	movs	r2, #0
 800b594:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b598:	2600      	movs	r6, #0
 800b59a:	e7b3      	b.n	800b504 <_strtod_l+0x984>
 800b59c:	4f2f      	ldr	r7, [pc, #188]	@ (800b65c <_strtod_l+0xadc>)
 800b59e:	2600      	movs	r6, #0
 800b5a0:	e7ac      	b.n	800b4fc <_strtod_l+0x97c>
 800b5a2:	4b2e      	ldr	r3, [pc, #184]	@ (800b65c <_strtod_l+0xadc>)
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	4639      	mov	r1, r7
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f7f4 fffd 	bl	80005a8 <__aeabi_dmul>
 800b5ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	460f      	mov	r7, r1
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0a1      	beq.n	800b4fc <_strtod_l+0x97c>
 800b5b8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b5bc:	e7a2      	b.n	800b504 <_strtod_l+0x984>
 800b5be:	4b26      	ldr	r3, [pc, #152]	@ (800b658 <_strtod_l+0xad8>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5c6:	4616      	mov	r6, r2
 800b5c8:	461f      	mov	r7, r3
 800b5ca:	e79b      	b.n	800b504 <_strtod_l+0x984>
 800b5cc:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b5d0:	9b08      	ldr	r3, [sp, #32]
 800b5d2:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1c1      	bne.n	800b55e <_strtod_l+0x9de>
 800b5da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5de:	0d1b      	lsrs	r3, r3, #20
 800b5e0:	051b      	lsls	r3, r3, #20
 800b5e2:	429d      	cmp	r5, r3
 800b5e4:	d1bb      	bne.n	800b55e <_strtod_l+0x9de>
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	4639      	mov	r1, r7
 800b5ea:	f7f5 fd9b 	bl	8001124 <__aeabi_d2lz>
 800b5ee:	f7f4 ffad 	bl	800054c <__aeabi_l2d>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	f7f4 fe1d 	bl	8000238 <__aeabi_dsub>
 800b5fe:	460b      	mov	r3, r1
 800b600:	4602      	mov	r2, r0
 800b602:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b606:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b60a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b60c:	ea46 060a 	orr.w	r6, r6, sl
 800b610:	431e      	orrs	r6, r3
 800b612:	d068      	beq.n	800b6e6 <_strtod_l+0xb66>
 800b614:	a308      	add	r3, pc, #32	@ (adr r3, 800b638 <_strtod_l+0xab8>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	f7f5 fa37 	bl	8000a8c <__aeabi_dcmplt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	f47f acd8 	bne.w	800afd4 <_strtod_l+0x454>
 800b624:	a306      	add	r3, pc, #24	@ (adr r3, 800b640 <_strtod_l+0xac0>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b62e:	f7f5 fa4b 	bl	8000ac8 <__aeabi_dcmpgt>
 800b632:	2800      	cmp	r0, #0
 800b634:	d093      	beq.n	800b55e <_strtod_l+0x9de>
 800b636:	e4cd      	b.n	800afd4 <_strtod_l+0x454>
 800b638:	94a03595 	.word	0x94a03595
 800b63c:	3fdfffff 	.word	0x3fdfffff
 800b640:	35afe535 	.word	0x35afe535
 800b644:	3fe00000 	.word	0x3fe00000
 800b648:	39500000 	.word	0x39500000
 800b64c:	7ff00000 	.word	0x7ff00000
 800b650:	000fffff 	.word	0x000fffff
 800b654:	7fefffff 	.word	0x7fefffff
 800b658:	3ff00000 	.word	0x3ff00000
 800b65c:	3fe00000 	.word	0x3fe00000
 800b660:	7fe00000 	.word	0x7fe00000
 800b664:	7c9fffff 	.word	0x7c9fffff
 800b668:	bff00000 	.word	0xbff00000
 800b66c:	9b08      	ldr	r3, [sp, #32]
 800b66e:	b323      	cbz	r3, 800b6ba <_strtod_l+0xb3a>
 800b670:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b674:	d821      	bhi.n	800b6ba <_strtod_l+0xb3a>
 800b676:	a328      	add	r3, pc, #160	@ (adr r3, 800b718 <_strtod_l+0xb98>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	f7f5 fa0e 	bl	8000aa0 <__aeabi_dcmple>
 800b684:	b1a0      	cbz	r0, 800b6b0 <_strtod_l+0xb30>
 800b686:	4639      	mov	r1, r7
 800b688:	4630      	mov	r0, r6
 800b68a:	f7f5 fa65 	bl	8000b58 <__aeabi_d2uiz>
 800b68e:	2801      	cmp	r0, #1
 800b690:	bf38      	it	cc
 800b692:	2001      	movcc	r0, #1
 800b694:	f7f4 ff0e 	bl	80004b4 <__aeabi_ui2d>
 800b698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b69a:	4606      	mov	r6, r0
 800b69c:	460f      	mov	r7, r1
 800b69e:	b9fb      	cbnz	r3, 800b6e0 <_strtod_l+0xb60>
 800b6a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b6a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b6ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b6b6:	1b5b      	subs	r3, r3, r5
 800b6b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b6c2:	f7ff f903 	bl	800a8cc <__ulp>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	4659      	mov	r1, fp
 800b6ce:	f7f4 ff6b 	bl	80005a8 <__aeabi_dmul>
 800b6d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6d6:	f7f4 fdb1 	bl	800023c <__adddf3>
 800b6da:	4682      	mov	sl, r0
 800b6dc:	468b      	mov	fp, r1
 800b6de:	e777      	b.n	800b5d0 <_strtod_l+0xa50>
 800b6e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b6e4:	e7e0      	b.n	800b6a8 <_strtod_l+0xb28>
 800b6e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b720 <_strtod_l+0xba0>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f5 f9ce 	bl	8000a8c <__aeabi_dcmplt>
 800b6f0:	e79f      	b.n	800b632 <_strtod_l+0xab2>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b6f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	f7ff ba7d 	b.w	800abfa <_strtod_l+0x7a>
 800b700:	2a65      	cmp	r2, #101	@ 0x65
 800b702:	f43f ab76 	beq.w	800adf2 <_strtod_l+0x272>
 800b706:	2a45      	cmp	r2, #69	@ 0x45
 800b708:	f43f ab73 	beq.w	800adf2 <_strtod_l+0x272>
 800b70c:	2301      	movs	r3, #1
 800b70e:	f7ff bbae 	b.w	800ae6e <_strtod_l+0x2ee>
 800b712:	bf00      	nop
 800b714:	f3af 8000 	nop.w
 800b718:	ffc00000 	.word	0xffc00000
 800b71c:	41dfffff 	.word	0x41dfffff
 800b720:	94a03595 	.word	0x94a03595
 800b724:	3fcfffff 	.word	0x3fcfffff

0800b728 <_strtod_r>:
 800b728:	4b01      	ldr	r3, [pc, #4]	@ (800b730 <_strtod_r+0x8>)
 800b72a:	f7ff ba29 	b.w	800ab80 <_strtod_l>
 800b72e:	bf00      	nop
 800b730:	20000078 	.word	0x20000078

0800b734 <_strtol_l.isra.0>:
 800b734:	2b24      	cmp	r3, #36	@ 0x24
 800b736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b73a:	4686      	mov	lr, r0
 800b73c:	4690      	mov	r8, r2
 800b73e:	d801      	bhi.n	800b744 <_strtol_l.isra.0+0x10>
 800b740:	2b01      	cmp	r3, #1
 800b742:	d106      	bne.n	800b752 <_strtol_l.isra.0+0x1e>
 800b744:	f7fd fdc0 	bl	80092c8 <__errno>
 800b748:	2316      	movs	r3, #22
 800b74a:	6003      	str	r3, [r0, #0]
 800b74c:	2000      	movs	r0, #0
 800b74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b752:	4834      	ldr	r0, [pc, #208]	@ (800b824 <_strtol_l.isra.0+0xf0>)
 800b754:	460d      	mov	r5, r1
 800b756:	462a      	mov	r2, r5
 800b758:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b75c:	5d06      	ldrb	r6, [r0, r4]
 800b75e:	f016 0608 	ands.w	r6, r6, #8
 800b762:	d1f8      	bne.n	800b756 <_strtol_l.isra.0+0x22>
 800b764:	2c2d      	cmp	r4, #45	@ 0x2d
 800b766:	d110      	bne.n	800b78a <_strtol_l.isra.0+0x56>
 800b768:	782c      	ldrb	r4, [r5, #0]
 800b76a:	2601      	movs	r6, #1
 800b76c:	1c95      	adds	r5, r2, #2
 800b76e:	f033 0210 	bics.w	r2, r3, #16
 800b772:	d115      	bne.n	800b7a0 <_strtol_l.isra.0+0x6c>
 800b774:	2c30      	cmp	r4, #48	@ 0x30
 800b776:	d10d      	bne.n	800b794 <_strtol_l.isra.0+0x60>
 800b778:	782a      	ldrb	r2, [r5, #0]
 800b77a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b77e:	2a58      	cmp	r2, #88	@ 0x58
 800b780:	d108      	bne.n	800b794 <_strtol_l.isra.0+0x60>
 800b782:	786c      	ldrb	r4, [r5, #1]
 800b784:	3502      	adds	r5, #2
 800b786:	2310      	movs	r3, #16
 800b788:	e00a      	b.n	800b7a0 <_strtol_l.isra.0+0x6c>
 800b78a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b78c:	bf04      	itt	eq
 800b78e:	782c      	ldrbeq	r4, [r5, #0]
 800b790:	1c95      	addeq	r5, r2, #2
 800b792:	e7ec      	b.n	800b76e <_strtol_l.isra.0+0x3a>
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1f6      	bne.n	800b786 <_strtol_l.isra.0+0x52>
 800b798:	2c30      	cmp	r4, #48	@ 0x30
 800b79a:	bf14      	ite	ne
 800b79c:	230a      	movne	r3, #10
 800b79e:	2308      	moveq	r3, #8
 800b7a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b7a4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	fbbc f9f3 	udiv	r9, ip, r3
 800b7ae:	4610      	mov	r0, r2
 800b7b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7b8:	2f09      	cmp	r7, #9
 800b7ba:	d80f      	bhi.n	800b7dc <_strtol_l.isra.0+0xa8>
 800b7bc:	463c      	mov	r4, r7
 800b7be:	42a3      	cmp	r3, r4
 800b7c0:	dd1b      	ble.n	800b7fa <_strtol_l.isra.0+0xc6>
 800b7c2:	1c57      	adds	r7, r2, #1
 800b7c4:	d007      	beq.n	800b7d6 <_strtol_l.isra.0+0xa2>
 800b7c6:	4581      	cmp	r9, r0
 800b7c8:	d314      	bcc.n	800b7f4 <_strtol_l.isra.0+0xc0>
 800b7ca:	d101      	bne.n	800b7d0 <_strtol_l.isra.0+0x9c>
 800b7cc:	45a2      	cmp	sl, r4
 800b7ce:	db11      	blt.n	800b7f4 <_strtol_l.isra.0+0xc0>
 800b7d0:	fb00 4003 	mla	r0, r0, r3, r4
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7da:	e7eb      	b.n	800b7b4 <_strtol_l.isra.0+0x80>
 800b7dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b7e0:	2f19      	cmp	r7, #25
 800b7e2:	d801      	bhi.n	800b7e8 <_strtol_l.isra.0+0xb4>
 800b7e4:	3c37      	subs	r4, #55	@ 0x37
 800b7e6:	e7ea      	b.n	800b7be <_strtol_l.isra.0+0x8a>
 800b7e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7ec:	2f19      	cmp	r7, #25
 800b7ee:	d804      	bhi.n	800b7fa <_strtol_l.isra.0+0xc6>
 800b7f0:	3c57      	subs	r4, #87	@ 0x57
 800b7f2:	e7e4      	b.n	800b7be <_strtol_l.isra.0+0x8a>
 800b7f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7f8:	e7ed      	b.n	800b7d6 <_strtol_l.isra.0+0xa2>
 800b7fa:	1c53      	adds	r3, r2, #1
 800b7fc:	d108      	bne.n	800b810 <_strtol_l.isra.0+0xdc>
 800b7fe:	2322      	movs	r3, #34	@ 0x22
 800b800:	f8ce 3000 	str.w	r3, [lr]
 800b804:	4660      	mov	r0, ip
 800b806:	f1b8 0f00 	cmp.w	r8, #0
 800b80a:	d0a0      	beq.n	800b74e <_strtol_l.isra.0+0x1a>
 800b80c:	1e69      	subs	r1, r5, #1
 800b80e:	e006      	b.n	800b81e <_strtol_l.isra.0+0xea>
 800b810:	b106      	cbz	r6, 800b814 <_strtol_l.isra.0+0xe0>
 800b812:	4240      	negs	r0, r0
 800b814:	f1b8 0f00 	cmp.w	r8, #0
 800b818:	d099      	beq.n	800b74e <_strtol_l.isra.0+0x1a>
 800b81a:	2a00      	cmp	r2, #0
 800b81c:	d1f6      	bne.n	800b80c <_strtol_l.isra.0+0xd8>
 800b81e:	f8c8 1000 	str.w	r1, [r8]
 800b822:	e794      	b.n	800b74e <_strtol_l.isra.0+0x1a>
 800b824:	0800d161 	.word	0x0800d161

0800b828 <_strtol_r>:
 800b828:	f7ff bf84 	b.w	800b734 <_strtol_l.isra.0>

0800b82c <__ssputs_r>:
 800b82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b830:	688e      	ldr	r6, [r1, #8]
 800b832:	461f      	mov	r7, r3
 800b834:	42be      	cmp	r6, r7
 800b836:	680b      	ldr	r3, [r1, #0]
 800b838:	4682      	mov	sl, r0
 800b83a:	460c      	mov	r4, r1
 800b83c:	4690      	mov	r8, r2
 800b83e:	d82d      	bhi.n	800b89c <__ssputs_r+0x70>
 800b840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b848:	d026      	beq.n	800b898 <__ssputs_r+0x6c>
 800b84a:	6965      	ldr	r5, [r4, #20]
 800b84c:	6909      	ldr	r1, [r1, #16]
 800b84e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b852:	eba3 0901 	sub.w	r9, r3, r1
 800b856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b85a:	1c7b      	adds	r3, r7, #1
 800b85c:	444b      	add	r3, r9
 800b85e:	106d      	asrs	r5, r5, #1
 800b860:	429d      	cmp	r5, r3
 800b862:	bf38      	it	cc
 800b864:	461d      	movcc	r5, r3
 800b866:	0553      	lsls	r3, r2, #21
 800b868:	d527      	bpl.n	800b8ba <__ssputs_r+0x8e>
 800b86a:	4629      	mov	r1, r5
 800b86c:	f7fe fc38 	bl	800a0e0 <_malloc_r>
 800b870:	4606      	mov	r6, r0
 800b872:	b360      	cbz	r0, 800b8ce <__ssputs_r+0xa2>
 800b874:	6921      	ldr	r1, [r4, #16]
 800b876:	464a      	mov	r2, r9
 800b878:	f7fd fd53 	bl	8009322 <memcpy>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	6126      	str	r6, [r4, #16]
 800b88a:	6165      	str	r5, [r4, #20]
 800b88c:	444e      	add	r6, r9
 800b88e:	eba5 0509 	sub.w	r5, r5, r9
 800b892:	6026      	str	r6, [r4, #0]
 800b894:	60a5      	str	r5, [r4, #8]
 800b896:	463e      	mov	r6, r7
 800b898:	42be      	cmp	r6, r7
 800b89a:	d900      	bls.n	800b89e <__ssputs_r+0x72>
 800b89c:	463e      	mov	r6, r7
 800b89e:	6820      	ldr	r0, [r4, #0]
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	4641      	mov	r1, r8
 800b8a4:	f000 fb64 	bl	800bf70 <memmove>
 800b8a8:	68a3      	ldr	r3, [r4, #8]
 800b8aa:	1b9b      	subs	r3, r3, r6
 800b8ac:	60a3      	str	r3, [r4, #8]
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	4433      	add	r3, r6
 800b8b2:	6023      	str	r3, [r4, #0]
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ba:	462a      	mov	r2, r5
 800b8bc:	f000 ff39 	bl	800c732 <_realloc_r>
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d1e0      	bne.n	800b888 <__ssputs_r+0x5c>
 800b8c6:	6921      	ldr	r1, [r4, #16]
 800b8c8:	4650      	mov	r0, sl
 800b8ca:	f7fe fb95 	bl	8009ff8 <_free_r>
 800b8ce:	230c      	movs	r3, #12
 800b8d0:	f8ca 3000 	str.w	r3, [sl]
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8e0:	e7e9      	b.n	800b8b6 <__ssputs_r+0x8a>
	...

0800b8e4 <_svfiprintf_r>:
 800b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e8:	4698      	mov	r8, r3
 800b8ea:	898b      	ldrh	r3, [r1, #12]
 800b8ec:	061b      	lsls	r3, r3, #24
 800b8ee:	b09d      	sub	sp, #116	@ 0x74
 800b8f0:	4607      	mov	r7, r0
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	4614      	mov	r4, r2
 800b8f6:	d510      	bpl.n	800b91a <_svfiprintf_r+0x36>
 800b8f8:	690b      	ldr	r3, [r1, #16]
 800b8fa:	b973      	cbnz	r3, 800b91a <_svfiprintf_r+0x36>
 800b8fc:	2140      	movs	r1, #64	@ 0x40
 800b8fe:	f7fe fbef 	bl	800a0e0 <_malloc_r>
 800b902:	6028      	str	r0, [r5, #0]
 800b904:	6128      	str	r0, [r5, #16]
 800b906:	b930      	cbnz	r0, 800b916 <_svfiprintf_r+0x32>
 800b908:	230c      	movs	r3, #12
 800b90a:	603b      	str	r3, [r7, #0]
 800b90c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b910:	b01d      	add	sp, #116	@ 0x74
 800b912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b916:	2340      	movs	r3, #64	@ 0x40
 800b918:	616b      	str	r3, [r5, #20]
 800b91a:	2300      	movs	r3, #0
 800b91c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91e:	2320      	movs	r3, #32
 800b920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b924:	f8cd 800c 	str.w	r8, [sp, #12]
 800b928:	2330      	movs	r3, #48	@ 0x30
 800b92a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bac8 <_svfiprintf_r+0x1e4>
 800b92e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b932:	f04f 0901 	mov.w	r9, #1
 800b936:	4623      	mov	r3, r4
 800b938:	469a      	mov	sl, r3
 800b93a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b93e:	b10a      	cbz	r2, 800b944 <_svfiprintf_r+0x60>
 800b940:	2a25      	cmp	r2, #37	@ 0x25
 800b942:	d1f9      	bne.n	800b938 <_svfiprintf_r+0x54>
 800b944:	ebba 0b04 	subs.w	fp, sl, r4
 800b948:	d00b      	beq.n	800b962 <_svfiprintf_r+0x7e>
 800b94a:	465b      	mov	r3, fp
 800b94c:	4622      	mov	r2, r4
 800b94e:	4629      	mov	r1, r5
 800b950:	4638      	mov	r0, r7
 800b952:	f7ff ff6b 	bl	800b82c <__ssputs_r>
 800b956:	3001      	adds	r0, #1
 800b958:	f000 80a7 	beq.w	800baaa <_svfiprintf_r+0x1c6>
 800b95c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b95e:	445a      	add	r2, fp
 800b960:	9209      	str	r2, [sp, #36]	@ 0x24
 800b962:	f89a 3000 	ldrb.w	r3, [sl]
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 809f 	beq.w	800baaa <_svfiprintf_r+0x1c6>
 800b96c:	2300      	movs	r3, #0
 800b96e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b976:	f10a 0a01 	add.w	sl, sl, #1
 800b97a:	9304      	str	r3, [sp, #16]
 800b97c:	9307      	str	r3, [sp, #28]
 800b97e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b982:	931a      	str	r3, [sp, #104]	@ 0x68
 800b984:	4654      	mov	r4, sl
 800b986:	2205      	movs	r2, #5
 800b988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b98c:	484e      	ldr	r0, [pc, #312]	@ (800bac8 <_svfiprintf_r+0x1e4>)
 800b98e:	f7f4 fbf7 	bl	8000180 <memchr>
 800b992:	9a04      	ldr	r2, [sp, #16]
 800b994:	b9d8      	cbnz	r0, 800b9ce <_svfiprintf_r+0xea>
 800b996:	06d0      	lsls	r0, r2, #27
 800b998:	bf44      	itt	mi
 800b99a:	2320      	movmi	r3, #32
 800b99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9a0:	0711      	lsls	r1, r2, #28
 800b9a2:	bf44      	itt	mi
 800b9a4:	232b      	movmi	r3, #43	@ 0x2b
 800b9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9b0:	d015      	beq.n	800b9de <_svfiprintf_r+0xfa>
 800b9b2:	9a07      	ldr	r2, [sp, #28]
 800b9b4:	4654      	mov	r4, sl
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	f04f 0c0a 	mov.w	ip, #10
 800b9bc:	4621      	mov	r1, r4
 800b9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9c2:	3b30      	subs	r3, #48	@ 0x30
 800b9c4:	2b09      	cmp	r3, #9
 800b9c6:	d94b      	bls.n	800ba60 <_svfiprintf_r+0x17c>
 800b9c8:	b1b0      	cbz	r0, 800b9f8 <_svfiprintf_r+0x114>
 800b9ca:	9207      	str	r2, [sp, #28]
 800b9cc:	e014      	b.n	800b9f8 <_svfiprintf_r+0x114>
 800b9ce:	eba0 0308 	sub.w	r3, r0, r8
 800b9d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	9304      	str	r3, [sp, #16]
 800b9da:	46a2      	mov	sl, r4
 800b9dc:	e7d2      	b.n	800b984 <_svfiprintf_r+0xa0>
 800b9de:	9b03      	ldr	r3, [sp, #12]
 800b9e0:	1d19      	adds	r1, r3, #4
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	9103      	str	r1, [sp, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	bfbb      	ittet	lt
 800b9ea:	425b      	neglt	r3, r3
 800b9ec:	f042 0202 	orrlt.w	r2, r2, #2
 800b9f0:	9307      	strge	r3, [sp, #28]
 800b9f2:	9307      	strlt	r3, [sp, #28]
 800b9f4:	bfb8      	it	lt
 800b9f6:	9204      	strlt	r2, [sp, #16]
 800b9f8:	7823      	ldrb	r3, [r4, #0]
 800b9fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9fc:	d10a      	bne.n	800ba14 <_svfiprintf_r+0x130>
 800b9fe:	7863      	ldrb	r3, [r4, #1]
 800ba00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba02:	d132      	bne.n	800ba6a <_svfiprintf_r+0x186>
 800ba04:	9b03      	ldr	r3, [sp, #12]
 800ba06:	1d1a      	adds	r2, r3, #4
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	9203      	str	r2, [sp, #12]
 800ba0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba10:	3402      	adds	r4, #2
 800ba12:	9305      	str	r3, [sp, #20]
 800ba14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bacc <_svfiprintf_r+0x1e8>
 800ba18:	7821      	ldrb	r1, [r4, #0]
 800ba1a:	2203      	movs	r2, #3
 800ba1c:	4650      	mov	r0, sl
 800ba1e:	f7f4 fbaf 	bl	8000180 <memchr>
 800ba22:	b138      	cbz	r0, 800ba34 <_svfiprintf_r+0x150>
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	eba0 000a 	sub.w	r0, r0, sl
 800ba2a:	2240      	movs	r2, #64	@ 0x40
 800ba2c:	4082      	lsls	r2, r0
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	3401      	adds	r4, #1
 800ba32:	9304      	str	r3, [sp, #16]
 800ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba38:	4825      	ldr	r0, [pc, #148]	@ (800bad0 <_svfiprintf_r+0x1ec>)
 800ba3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba3e:	2206      	movs	r2, #6
 800ba40:	f7f4 fb9e 	bl	8000180 <memchr>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d036      	beq.n	800bab6 <_svfiprintf_r+0x1d2>
 800ba48:	4b22      	ldr	r3, [pc, #136]	@ (800bad4 <_svfiprintf_r+0x1f0>)
 800ba4a:	bb1b      	cbnz	r3, 800ba94 <_svfiprintf_r+0x1b0>
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	3307      	adds	r3, #7
 800ba50:	f023 0307 	bic.w	r3, r3, #7
 800ba54:	3308      	adds	r3, #8
 800ba56:	9303      	str	r3, [sp, #12]
 800ba58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba5a:	4433      	add	r3, r6
 800ba5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba5e:	e76a      	b.n	800b936 <_svfiprintf_r+0x52>
 800ba60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba64:	460c      	mov	r4, r1
 800ba66:	2001      	movs	r0, #1
 800ba68:	e7a8      	b.n	800b9bc <_svfiprintf_r+0xd8>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	3401      	adds	r4, #1
 800ba6e:	9305      	str	r3, [sp, #20]
 800ba70:	4619      	mov	r1, r3
 800ba72:	f04f 0c0a 	mov.w	ip, #10
 800ba76:	4620      	mov	r0, r4
 800ba78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba7c:	3a30      	subs	r2, #48	@ 0x30
 800ba7e:	2a09      	cmp	r2, #9
 800ba80:	d903      	bls.n	800ba8a <_svfiprintf_r+0x1a6>
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0c6      	beq.n	800ba14 <_svfiprintf_r+0x130>
 800ba86:	9105      	str	r1, [sp, #20]
 800ba88:	e7c4      	b.n	800ba14 <_svfiprintf_r+0x130>
 800ba8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba8e:	4604      	mov	r4, r0
 800ba90:	2301      	movs	r3, #1
 800ba92:	e7f0      	b.n	800ba76 <_svfiprintf_r+0x192>
 800ba94:	ab03      	add	r3, sp, #12
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	462a      	mov	r2, r5
 800ba9a:	4b0f      	ldr	r3, [pc, #60]	@ (800bad8 <_svfiprintf_r+0x1f4>)
 800ba9c:	a904      	add	r1, sp, #16
 800ba9e:	4638      	mov	r0, r7
 800baa0:	f7fc fbd4 	bl	800824c <_printf_float>
 800baa4:	1c42      	adds	r2, r0, #1
 800baa6:	4606      	mov	r6, r0
 800baa8:	d1d6      	bne.n	800ba58 <_svfiprintf_r+0x174>
 800baaa:	89ab      	ldrh	r3, [r5, #12]
 800baac:	065b      	lsls	r3, r3, #25
 800baae:	f53f af2d 	bmi.w	800b90c <_svfiprintf_r+0x28>
 800bab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bab4:	e72c      	b.n	800b910 <_svfiprintf_r+0x2c>
 800bab6:	ab03      	add	r3, sp, #12
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	462a      	mov	r2, r5
 800babc:	4b06      	ldr	r3, [pc, #24]	@ (800bad8 <_svfiprintf_r+0x1f4>)
 800babe:	a904      	add	r1, sp, #16
 800bac0:	4638      	mov	r0, r7
 800bac2:	f7fc fe5d 	bl	8008780 <_printf_i>
 800bac6:	e7ed      	b.n	800baa4 <_svfiprintf_r+0x1c0>
 800bac8:	0800cf59 	.word	0x0800cf59
 800bacc:	0800cf5f 	.word	0x0800cf5f
 800bad0:	0800cf63 	.word	0x0800cf63
 800bad4:	0800824d 	.word	0x0800824d
 800bad8:	0800b82d 	.word	0x0800b82d

0800badc <__sfputc_r>:
 800badc:	6893      	ldr	r3, [r2, #8]
 800bade:	3b01      	subs	r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	b410      	push	{r4}
 800bae4:	6093      	str	r3, [r2, #8]
 800bae6:	da07      	bge.n	800baf8 <__sfputc_r+0x1c>
 800bae8:	6994      	ldr	r4, [r2, #24]
 800baea:	42a3      	cmp	r3, r4
 800baec:	db01      	blt.n	800baf2 <__sfputc_r+0x16>
 800baee:	290a      	cmp	r1, #10
 800baf0:	d102      	bne.n	800baf8 <__sfputc_r+0x1c>
 800baf2:	bc10      	pop	{r4}
 800baf4:	f7fd bb01 	b.w	80090fa <__swbuf_r>
 800baf8:	6813      	ldr	r3, [r2, #0]
 800bafa:	1c58      	adds	r0, r3, #1
 800bafc:	6010      	str	r0, [r2, #0]
 800bafe:	7019      	strb	r1, [r3, #0]
 800bb00:	4608      	mov	r0, r1
 800bb02:	bc10      	pop	{r4}
 800bb04:	4770      	bx	lr

0800bb06 <__sfputs_r>:
 800bb06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb08:	4606      	mov	r6, r0
 800bb0a:	460f      	mov	r7, r1
 800bb0c:	4614      	mov	r4, r2
 800bb0e:	18d5      	adds	r5, r2, r3
 800bb10:	42ac      	cmp	r4, r5
 800bb12:	d101      	bne.n	800bb18 <__sfputs_r+0x12>
 800bb14:	2000      	movs	r0, #0
 800bb16:	e007      	b.n	800bb28 <__sfputs_r+0x22>
 800bb18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb1c:	463a      	mov	r2, r7
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f7ff ffdc 	bl	800badc <__sfputc_r>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d1f3      	bne.n	800bb10 <__sfputs_r+0xa>
 800bb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb2c <_vfiprintf_r>:
 800bb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	460d      	mov	r5, r1
 800bb32:	b09d      	sub	sp, #116	@ 0x74
 800bb34:	4614      	mov	r4, r2
 800bb36:	4698      	mov	r8, r3
 800bb38:	4606      	mov	r6, r0
 800bb3a:	b118      	cbz	r0, 800bb44 <_vfiprintf_r+0x18>
 800bb3c:	6a03      	ldr	r3, [r0, #32]
 800bb3e:	b90b      	cbnz	r3, 800bb44 <_vfiprintf_r+0x18>
 800bb40:	f7fd f9d0 	bl	8008ee4 <__sinit>
 800bb44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb46:	07d9      	lsls	r1, r3, #31
 800bb48:	d405      	bmi.n	800bb56 <_vfiprintf_r+0x2a>
 800bb4a:	89ab      	ldrh	r3, [r5, #12]
 800bb4c:	059a      	lsls	r2, r3, #22
 800bb4e:	d402      	bmi.n	800bb56 <_vfiprintf_r+0x2a>
 800bb50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb52:	f7fd fbe4 	bl	800931e <__retarget_lock_acquire_recursive>
 800bb56:	89ab      	ldrh	r3, [r5, #12]
 800bb58:	071b      	lsls	r3, r3, #28
 800bb5a:	d501      	bpl.n	800bb60 <_vfiprintf_r+0x34>
 800bb5c:	692b      	ldr	r3, [r5, #16]
 800bb5e:	b99b      	cbnz	r3, 800bb88 <_vfiprintf_r+0x5c>
 800bb60:	4629      	mov	r1, r5
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7fd fb08 	bl	8009178 <__swsetup_r>
 800bb68:	b170      	cbz	r0, 800bb88 <_vfiprintf_r+0x5c>
 800bb6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb6c:	07dc      	lsls	r4, r3, #31
 800bb6e:	d504      	bpl.n	800bb7a <_vfiprintf_r+0x4e>
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb74:	b01d      	add	sp, #116	@ 0x74
 800bb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7a:	89ab      	ldrh	r3, [r5, #12]
 800bb7c:	0598      	lsls	r0, r3, #22
 800bb7e:	d4f7      	bmi.n	800bb70 <_vfiprintf_r+0x44>
 800bb80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb82:	f7fd fbcd 	bl	8009320 <__retarget_lock_release_recursive>
 800bb86:	e7f3      	b.n	800bb70 <_vfiprintf_r+0x44>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb8c:	2320      	movs	r3, #32
 800bb8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb92:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb96:	2330      	movs	r3, #48	@ 0x30
 800bb98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd48 <_vfiprintf_r+0x21c>
 800bb9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bba0:	f04f 0901 	mov.w	r9, #1
 800bba4:	4623      	mov	r3, r4
 800bba6:	469a      	mov	sl, r3
 800bba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbac:	b10a      	cbz	r2, 800bbb2 <_vfiprintf_r+0x86>
 800bbae:	2a25      	cmp	r2, #37	@ 0x25
 800bbb0:	d1f9      	bne.n	800bba6 <_vfiprintf_r+0x7a>
 800bbb2:	ebba 0b04 	subs.w	fp, sl, r4
 800bbb6:	d00b      	beq.n	800bbd0 <_vfiprintf_r+0xa4>
 800bbb8:	465b      	mov	r3, fp
 800bbba:	4622      	mov	r2, r4
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	f7ff ffa1 	bl	800bb06 <__sfputs_r>
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	f000 80a7 	beq.w	800bd18 <_vfiprintf_r+0x1ec>
 800bbca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbcc:	445a      	add	r2, fp
 800bbce:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 809f 	beq.w	800bd18 <_vfiprintf_r+0x1ec>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbe4:	f10a 0a01 	add.w	sl, sl, #1
 800bbe8:	9304      	str	r3, [sp, #16]
 800bbea:	9307      	str	r3, [sp, #28]
 800bbec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbf2:	4654      	mov	r4, sl
 800bbf4:	2205      	movs	r2, #5
 800bbf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbfa:	4853      	ldr	r0, [pc, #332]	@ (800bd48 <_vfiprintf_r+0x21c>)
 800bbfc:	f7f4 fac0 	bl	8000180 <memchr>
 800bc00:	9a04      	ldr	r2, [sp, #16]
 800bc02:	b9d8      	cbnz	r0, 800bc3c <_vfiprintf_r+0x110>
 800bc04:	06d1      	lsls	r1, r2, #27
 800bc06:	bf44      	itt	mi
 800bc08:	2320      	movmi	r3, #32
 800bc0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc0e:	0713      	lsls	r3, r2, #28
 800bc10:	bf44      	itt	mi
 800bc12:	232b      	movmi	r3, #43	@ 0x2b
 800bc14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc18:	f89a 3000 	ldrb.w	r3, [sl]
 800bc1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc1e:	d015      	beq.n	800bc4c <_vfiprintf_r+0x120>
 800bc20:	9a07      	ldr	r2, [sp, #28]
 800bc22:	4654      	mov	r4, sl
 800bc24:	2000      	movs	r0, #0
 800bc26:	f04f 0c0a 	mov.w	ip, #10
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc30:	3b30      	subs	r3, #48	@ 0x30
 800bc32:	2b09      	cmp	r3, #9
 800bc34:	d94b      	bls.n	800bcce <_vfiprintf_r+0x1a2>
 800bc36:	b1b0      	cbz	r0, 800bc66 <_vfiprintf_r+0x13a>
 800bc38:	9207      	str	r2, [sp, #28]
 800bc3a:	e014      	b.n	800bc66 <_vfiprintf_r+0x13a>
 800bc3c:	eba0 0308 	sub.w	r3, r0, r8
 800bc40:	fa09 f303 	lsl.w	r3, r9, r3
 800bc44:	4313      	orrs	r3, r2
 800bc46:	9304      	str	r3, [sp, #16]
 800bc48:	46a2      	mov	sl, r4
 800bc4a:	e7d2      	b.n	800bbf2 <_vfiprintf_r+0xc6>
 800bc4c:	9b03      	ldr	r3, [sp, #12]
 800bc4e:	1d19      	adds	r1, r3, #4
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	9103      	str	r1, [sp, #12]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	bfbb      	ittet	lt
 800bc58:	425b      	neglt	r3, r3
 800bc5a:	f042 0202 	orrlt.w	r2, r2, #2
 800bc5e:	9307      	strge	r3, [sp, #28]
 800bc60:	9307      	strlt	r3, [sp, #28]
 800bc62:	bfb8      	it	lt
 800bc64:	9204      	strlt	r2, [sp, #16]
 800bc66:	7823      	ldrb	r3, [r4, #0]
 800bc68:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc6a:	d10a      	bne.n	800bc82 <_vfiprintf_r+0x156>
 800bc6c:	7863      	ldrb	r3, [r4, #1]
 800bc6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc70:	d132      	bne.n	800bcd8 <_vfiprintf_r+0x1ac>
 800bc72:	9b03      	ldr	r3, [sp, #12]
 800bc74:	1d1a      	adds	r2, r3, #4
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	9203      	str	r2, [sp, #12]
 800bc7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc7e:	3402      	adds	r4, #2
 800bc80:	9305      	str	r3, [sp, #20]
 800bc82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bd4c <_vfiprintf_r+0x220>
 800bc86:	7821      	ldrb	r1, [r4, #0]
 800bc88:	2203      	movs	r2, #3
 800bc8a:	4650      	mov	r0, sl
 800bc8c:	f7f4 fa78 	bl	8000180 <memchr>
 800bc90:	b138      	cbz	r0, 800bca2 <_vfiprintf_r+0x176>
 800bc92:	9b04      	ldr	r3, [sp, #16]
 800bc94:	eba0 000a 	sub.w	r0, r0, sl
 800bc98:	2240      	movs	r2, #64	@ 0x40
 800bc9a:	4082      	lsls	r2, r0
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	3401      	adds	r4, #1
 800bca0:	9304      	str	r3, [sp, #16]
 800bca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca6:	482a      	ldr	r0, [pc, #168]	@ (800bd50 <_vfiprintf_r+0x224>)
 800bca8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcac:	2206      	movs	r2, #6
 800bcae:	f7f4 fa67 	bl	8000180 <memchr>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d03f      	beq.n	800bd36 <_vfiprintf_r+0x20a>
 800bcb6:	4b27      	ldr	r3, [pc, #156]	@ (800bd54 <_vfiprintf_r+0x228>)
 800bcb8:	bb1b      	cbnz	r3, 800bd02 <_vfiprintf_r+0x1d6>
 800bcba:	9b03      	ldr	r3, [sp, #12]
 800bcbc:	3307      	adds	r3, #7
 800bcbe:	f023 0307 	bic.w	r3, r3, #7
 800bcc2:	3308      	adds	r3, #8
 800bcc4:	9303      	str	r3, [sp, #12]
 800bcc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc8:	443b      	add	r3, r7
 800bcca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bccc:	e76a      	b.n	800bba4 <_vfiprintf_r+0x78>
 800bcce:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	e7a8      	b.n	800bc2a <_vfiprintf_r+0xfe>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	3401      	adds	r4, #1
 800bcdc:	9305      	str	r3, [sp, #20]
 800bcde:	4619      	mov	r1, r3
 800bce0:	f04f 0c0a 	mov.w	ip, #10
 800bce4:	4620      	mov	r0, r4
 800bce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcea:	3a30      	subs	r2, #48	@ 0x30
 800bcec:	2a09      	cmp	r2, #9
 800bcee:	d903      	bls.n	800bcf8 <_vfiprintf_r+0x1cc>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d0c6      	beq.n	800bc82 <_vfiprintf_r+0x156>
 800bcf4:	9105      	str	r1, [sp, #20]
 800bcf6:	e7c4      	b.n	800bc82 <_vfiprintf_r+0x156>
 800bcf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e7f0      	b.n	800bce4 <_vfiprintf_r+0x1b8>
 800bd02:	ab03      	add	r3, sp, #12
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	462a      	mov	r2, r5
 800bd08:	4b13      	ldr	r3, [pc, #76]	@ (800bd58 <_vfiprintf_r+0x22c>)
 800bd0a:	a904      	add	r1, sp, #16
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7fc fa9d 	bl	800824c <_printf_float>
 800bd12:	4607      	mov	r7, r0
 800bd14:	1c78      	adds	r0, r7, #1
 800bd16:	d1d6      	bne.n	800bcc6 <_vfiprintf_r+0x19a>
 800bd18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd1a:	07d9      	lsls	r1, r3, #31
 800bd1c:	d405      	bmi.n	800bd2a <_vfiprintf_r+0x1fe>
 800bd1e:	89ab      	ldrh	r3, [r5, #12]
 800bd20:	059a      	lsls	r2, r3, #22
 800bd22:	d402      	bmi.n	800bd2a <_vfiprintf_r+0x1fe>
 800bd24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd26:	f7fd fafb 	bl	8009320 <__retarget_lock_release_recursive>
 800bd2a:	89ab      	ldrh	r3, [r5, #12]
 800bd2c:	065b      	lsls	r3, r3, #25
 800bd2e:	f53f af1f 	bmi.w	800bb70 <_vfiprintf_r+0x44>
 800bd32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd34:	e71e      	b.n	800bb74 <_vfiprintf_r+0x48>
 800bd36:	ab03      	add	r3, sp, #12
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	462a      	mov	r2, r5
 800bd3c:	4b06      	ldr	r3, [pc, #24]	@ (800bd58 <_vfiprintf_r+0x22c>)
 800bd3e:	a904      	add	r1, sp, #16
 800bd40:	4630      	mov	r0, r6
 800bd42:	f7fc fd1d 	bl	8008780 <_printf_i>
 800bd46:	e7e4      	b.n	800bd12 <_vfiprintf_r+0x1e6>
 800bd48:	0800cf59 	.word	0x0800cf59
 800bd4c:	0800cf5f 	.word	0x0800cf5f
 800bd50:	0800cf63 	.word	0x0800cf63
 800bd54:	0800824d 	.word	0x0800824d
 800bd58:	0800bb07 	.word	0x0800bb07

0800bd5c <__sflush_r>:
 800bd5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd62:	0716      	lsls	r6, r2, #28
 800bd64:	4605      	mov	r5, r0
 800bd66:	460c      	mov	r4, r1
 800bd68:	d454      	bmi.n	800be14 <__sflush_r+0xb8>
 800bd6a:	684b      	ldr	r3, [r1, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	dc02      	bgt.n	800bd76 <__sflush_r+0x1a>
 800bd70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	dd48      	ble.n	800be08 <__sflush_r+0xac>
 800bd76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd78:	2e00      	cmp	r6, #0
 800bd7a:	d045      	beq.n	800be08 <__sflush_r+0xac>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd82:	682f      	ldr	r7, [r5, #0]
 800bd84:	6a21      	ldr	r1, [r4, #32]
 800bd86:	602b      	str	r3, [r5, #0]
 800bd88:	d030      	beq.n	800bdec <__sflush_r+0x90>
 800bd8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd8c:	89a3      	ldrh	r3, [r4, #12]
 800bd8e:	0759      	lsls	r1, r3, #29
 800bd90:	d505      	bpl.n	800bd9e <__sflush_r+0x42>
 800bd92:	6863      	ldr	r3, [r4, #4]
 800bd94:	1ad2      	subs	r2, r2, r3
 800bd96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd98:	b10b      	cbz	r3, 800bd9e <__sflush_r+0x42>
 800bd9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd9c:	1ad2      	subs	r2, r2, r3
 800bd9e:	2300      	movs	r3, #0
 800bda0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bda2:	6a21      	ldr	r1, [r4, #32]
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b0      	blx	r6
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	89a3      	ldrh	r3, [r4, #12]
 800bdac:	d106      	bne.n	800bdbc <__sflush_r+0x60>
 800bdae:	6829      	ldr	r1, [r5, #0]
 800bdb0:	291d      	cmp	r1, #29
 800bdb2:	d82b      	bhi.n	800be0c <__sflush_r+0xb0>
 800bdb4:	4a28      	ldr	r2, [pc, #160]	@ (800be58 <__sflush_r+0xfc>)
 800bdb6:	40ca      	lsrs	r2, r1
 800bdb8:	07d6      	lsls	r6, r2, #31
 800bdba:	d527      	bpl.n	800be0c <__sflush_r+0xb0>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	6062      	str	r2, [r4, #4]
 800bdc0:	04d9      	lsls	r1, r3, #19
 800bdc2:	6922      	ldr	r2, [r4, #16]
 800bdc4:	6022      	str	r2, [r4, #0]
 800bdc6:	d504      	bpl.n	800bdd2 <__sflush_r+0x76>
 800bdc8:	1c42      	adds	r2, r0, #1
 800bdca:	d101      	bne.n	800bdd0 <__sflush_r+0x74>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b903      	cbnz	r3, 800bdd2 <__sflush_r+0x76>
 800bdd0:	6560      	str	r0, [r4, #84]	@ 0x54
 800bdd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdd4:	602f      	str	r7, [r5, #0]
 800bdd6:	b1b9      	cbz	r1, 800be08 <__sflush_r+0xac>
 800bdd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bddc:	4299      	cmp	r1, r3
 800bdde:	d002      	beq.n	800bde6 <__sflush_r+0x8a>
 800bde0:	4628      	mov	r0, r5
 800bde2:	f7fe f909 	bl	8009ff8 <_free_r>
 800bde6:	2300      	movs	r3, #0
 800bde8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdea:	e00d      	b.n	800be08 <__sflush_r+0xac>
 800bdec:	2301      	movs	r3, #1
 800bdee:	4628      	mov	r0, r5
 800bdf0:	47b0      	blx	r6
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	1c50      	adds	r0, r2, #1
 800bdf6:	d1c9      	bne.n	800bd8c <__sflush_r+0x30>
 800bdf8:	682b      	ldr	r3, [r5, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0c6      	beq.n	800bd8c <__sflush_r+0x30>
 800bdfe:	2b1d      	cmp	r3, #29
 800be00:	d001      	beq.n	800be06 <__sflush_r+0xaa>
 800be02:	2b16      	cmp	r3, #22
 800be04:	d11d      	bne.n	800be42 <__sflush_r+0xe6>
 800be06:	602f      	str	r7, [r5, #0]
 800be08:	2000      	movs	r0, #0
 800be0a:	e021      	b.n	800be50 <__sflush_r+0xf4>
 800be0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be10:	b21b      	sxth	r3, r3
 800be12:	e01a      	b.n	800be4a <__sflush_r+0xee>
 800be14:	690f      	ldr	r7, [r1, #16]
 800be16:	2f00      	cmp	r7, #0
 800be18:	d0f6      	beq.n	800be08 <__sflush_r+0xac>
 800be1a:	0793      	lsls	r3, r2, #30
 800be1c:	680e      	ldr	r6, [r1, #0]
 800be1e:	bf08      	it	eq
 800be20:	694b      	ldreq	r3, [r1, #20]
 800be22:	600f      	str	r7, [r1, #0]
 800be24:	bf18      	it	ne
 800be26:	2300      	movne	r3, #0
 800be28:	1bf6      	subs	r6, r6, r7
 800be2a:	608b      	str	r3, [r1, #8]
 800be2c:	2e00      	cmp	r6, #0
 800be2e:	ddeb      	ble.n	800be08 <__sflush_r+0xac>
 800be30:	6a21      	ldr	r1, [r4, #32]
 800be32:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800be36:	4633      	mov	r3, r6
 800be38:	463a      	mov	r2, r7
 800be3a:	4628      	mov	r0, r5
 800be3c:	47e0      	blx	ip
 800be3e:	2800      	cmp	r0, #0
 800be40:	dc07      	bgt.n	800be52 <__sflush_r+0xf6>
 800be42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be4a:	81a3      	strh	r3, [r4, #12]
 800be4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be52:	4407      	add	r7, r0
 800be54:	1a36      	subs	r6, r6, r0
 800be56:	e7e9      	b.n	800be2c <__sflush_r+0xd0>
 800be58:	20400001 	.word	0x20400001

0800be5c <_fflush_r>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	690b      	ldr	r3, [r1, #16]
 800be60:	4605      	mov	r5, r0
 800be62:	460c      	mov	r4, r1
 800be64:	b913      	cbnz	r3, 800be6c <_fflush_r+0x10>
 800be66:	2500      	movs	r5, #0
 800be68:	4628      	mov	r0, r5
 800be6a:	bd38      	pop	{r3, r4, r5, pc}
 800be6c:	b118      	cbz	r0, 800be76 <_fflush_r+0x1a>
 800be6e:	6a03      	ldr	r3, [r0, #32]
 800be70:	b90b      	cbnz	r3, 800be76 <_fflush_r+0x1a>
 800be72:	f7fd f837 	bl	8008ee4 <__sinit>
 800be76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0f3      	beq.n	800be66 <_fflush_r+0xa>
 800be7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be80:	07d0      	lsls	r0, r2, #31
 800be82:	d404      	bmi.n	800be8e <_fflush_r+0x32>
 800be84:	0599      	lsls	r1, r3, #22
 800be86:	d402      	bmi.n	800be8e <_fflush_r+0x32>
 800be88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be8a:	f7fd fa48 	bl	800931e <__retarget_lock_acquire_recursive>
 800be8e:	4628      	mov	r0, r5
 800be90:	4621      	mov	r1, r4
 800be92:	f7ff ff63 	bl	800bd5c <__sflush_r>
 800be96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be98:	07da      	lsls	r2, r3, #31
 800be9a:	4605      	mov	r5, r0
 800be9c:	d4e4      	bmi.n	800be68 <_fflush_r+0xc>
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	059b      	lsls	r3, r3, #22
 800bea2:	d4e1      	bmi.n	800be68 <_fflush_r+0xc>
 800bea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bea6:	f7fd fa3b 	bl	8009320 <__retarget_lock_release_recursive>
 800beaa:	e7dd      	b.n	800be68 <_fflush_r+0xc>

0800beac <__swhatbuf_r>:
 800beac:	b570      	push	{r4, r5, r6, lr}
 800beae:	460c      	mov	r4, r1
 800beb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb4:	2900      	cmp	r1, #0
 800beb6:	b096      	sub	sp, #88	@ 0x58
 800beb8:	4615      	mov	r5, r2
 800beba:	461e      	mov	r6, r3
 800bebc:	da0d      	bge.n	800beda <__swhatbuf_r+0x2e>
 800bebe:	89a3      	ldrh	r3, [r4, #12]
 800bec0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bec4:	f04f 0100 	mov.w	r1, #0
 800bec8:	bf14      	ite	ne
 800beca:	2340      	movne	r3, #64	@ 0x40
 800becc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bed0:	2000      	movs	r0, #0
 800bed2:	6031      	str	r1, [r6, #0]
 800bed4:	602b      	str	r3, [r5, #0]
 800bed6:	b016      	add	sp, #88	@ 0x58
 800bed8:	bd70      	pop	{r4, r5, r6, pc}
 800beda:	466a      	mov	r2, sp
 800bedc:	f000 f874 	bl	800bfc8 <_fstat_r>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	dbec      	blt.n	800bebe <__swhatbuf_r+0x12>
 800bee4:	9901      	ldr	r1, [sp, #4]
 800bee6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800beea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800beee:	4259      	negs	r1, r3
 800bef0:	4159      	adcs	r1, r3
 800bef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bef6:	e7eb      	b.n	800bed0 <__swhatbuf_r+0x24>

0800bef8 <__smakebuf_r>:
 800bef8:	898b      	ldrh	r3, [r1, #12]
 800befa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800befc:	079d      	lsls	r5, r3, #30
 800befe:	4606      	mov	r6, r0
 800bf00:	460c      	mov	r4, r1
 800bf02:	d507      	bpl.n	800bf14 <__smakebuf_r+0x1c>
 800bf04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	6123      	str	r3, [r4, #16]
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	6163      	str	r3, [r4, #20]
 800bf10:	b003      	add	sp, #12
 800bf12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf14:	ab01      	add	r3, sp, #4
 800bf16:	466a      	mov	r2, sp
 800bf18:	f7ff ffc8 	bl	800beac <__swhatbuf_r>
 800bf1c:	9f00      	ldr	r7, [sp, #0]
 800bf1e:	4605      	mov	r5, r0
 800bf20:	4639      	mov	r1, r7
 800bf22:	4630      	mov	r0, r6
 800bf24:	f7fe f8dc 	bl	800a0e0 <_malloc_r>
 800bf28:	b948      	cbnz	r0, 800bf3e <__smakebuf_r+0x46>
 800bf2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf2e:	059a      	lsls	r2, r3, #22
 800bf30:	d4ee      	bmi.n	800bf10 <__smakebuf_r+0x18>
 800bf32:	f023 0303 	bic.w	r3, r3, #3
 800bf36:	f043 0302 	orr.w	r3, r3, #2
 800bf3a:	81a3      	strh	r3, [r4, #12]
 800bf3c:	e7e2      	b.n	800bf04 <__smakebuf_r+0xc>
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	6020      	str	r0, [r4, #0]
 800bf42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	9b01      	ldr	r3, [sp, #4]
 800bf4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf4e:	b15b      	cbz	r3, 800bf68 <__smakebuf_r+0x70>
 800bf50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf54:	4630      	mov	r0, r6
 800bf56:	f000 f849 	bl	800bfec <_isatty_r>
 800bf5a:	b128      	cbz	r0, 800bf68 <__smakebuf_r+0x70>
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	f023 0303 	bic.w	r3, r3, #3
 800bf62:	f043 0301 	orr.w	r3, r3, #1
 800bf66:	81a3      	strh	r3, [r4, #12]
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	431d      	orrs	r5, r3
 800bf6c:	81a5      	strh	r5, [r4, #12]
 800bf6e:	e7cf      	b.n	800bf10 <__smakebuf_r+0x18>

0800bf70 <memmove>:
 800bf70:	4288      	cmp	r0, r1
 800bf72:	b510      	push	{r4, lr}
 800bf74:	eb01 0402 	add.w	r4, r1, r2
 800bf78:	d902      	bls.n	800bf80 <memmove+0x10>
 800bf7a:	4284      	cmp	r4, r0
 800bf7c:	4623      	mov	r3, r4
 800bf7e:	d807      	bhi.n	800bf90 <memmove+0x20>
 800bf80:	1e43      	subs	r3, r0, #1
 800bf82:	42a1      	cmp	r1, r4
 800bf84:	d008      	beq.n	800bf98 <memmove+0x28>
 800bf86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf8e:	e7f8      	b.n	800bf82 <memmove+0x12>
 800bf90:	4402      	add	r2, r0
 800bf92:	4601      	mov	r1, r0
 800bf94:	428a      	cmp	r2, r1
 800bf96:	d100      	bne.n	800bf9a <memmove+0x2a>
 800bf98:	bd10      	pop	{r4, pc}
 800bf9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfa2:	e7f7      	b.n	800bf94 <memmove+0x24>

0800bfa4 <strncmp>:
 800bfa4:	b510      	push	{r4, lr}
 800bfa6:	b16a      	cbz	r2, 800bfc4 <strncmp+0x20>
 800bfa8:	3901      	subs	r1, #1
 800bfaa:	1884      	adds	r4, r0, r2
 800bfac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d103      	bne.n	800bfc0 <strncmp+0x1c>
 800bfb8:	42a0      	cmp	r0, r4
 800bfba:	d001      	beq.n	800bfc0 <strncmp+0x1c>
 800bfbc:	2a00      	cmp	r2, #0
 800bfbe:	d1f5      	bne.n	800bfac <strncmp+0x8>
 800bfc0:	1ad0      	subs	r0, r2, r3
 800bfc2:	bd10      	pop	{r4, pc}
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	e7fc      	b.n	800bfc2 <strncmp+0x1e>

0800bfc8 <_fstat_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	4d07      	ldr	r5, [pc, #28]	@ (800bfe8 <_fstat_r+0x20>)
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4604      	mov	r4, r0
 800bfd0:	4608      	mov	r0, r1
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	602b      	str	r3, [r5, #0]
 800bfd6:	f7f5 ff82 	bl	8001ede <_fstat>
 800bfda:	1c43      	adds	r3, r0, #1
 800bfdc:	d102      	bne.n	800bfe4 <_fstat_r+0x1c>
 800bfde:	682b      	ldr	r3, [r5, #0]
 800bfe0:	b103      	cbz	r3, 800bfe4 <_fstat_r+0x1c>
 800bfe2:	6023      	str	r3, [r4, #0]
 800bfe4:	bd38      	pop	{r3, r4, r5, pc}
 800bfe6:	bf00      	nop
 800bfe8:	200004d4 	.word	0x200004d4

0800bfec <_isatty_r>:
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	4d06      	ldr	r5, [pc, #24]	@ (800c008 <_isatty_r+0x1c>)
 800bff0:	2300      	movs	r3, #0
 800bff2:	4604      	mov	r4, r0
 800bff4:	4608      	mov	r0, r1
 800bff6:	602b      	str	r3, [r5, #0]
 800bff8:	f7f5 ff80 	bl	8001efc <_isatty>
 800bffc:	1c43      	adds	r3, r0, #1
 800bffe:	d102      	bne.n	800c006 <_isatty_r+0x1a>
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	b103      	cbz	r3, 800c006 <_isatty_r+0x1a>
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	bd38      	pop	{r3, r4, r5, pc}
 800c008:	200004d4 	.word	0x200004d4

0800c00c <_sbrk_r>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4d06      	ldr	r5, [pc, #24]	@ (800c028 <_sbrk_r+0x1c>)
 800c010:	2300      	movs	r3, #0
 800c012:	4604      	mov	r4, r0
 800c014:	4608      	mov	r0, r1
 800c016:	602b      	str	r3, [r5, #0]
 800c018:	f7f5 ff86 	bl	8001f28 <_sbrk>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	d102      	bne.n	800c026 <_sbrk_r+0x1a>
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	b103      	cbz	r3, 800c026 <_sbrk_r+0x1a>
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	200004d4 	.word	0x200004d4

0800c02c <nan>:
 800c02c:	4901      	ldr	r1, [pc, #4]	@ (800c034 <nan+0x8>)
 800c02e:	2000      	movs	r0, #0
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	7ff80000 	.word	0x7ff80000

0800c038 <__assert_func>:
 800c038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c03a:	4614      	mov	r4, r2
 800c03c:	461a      	mov	r2, r3
 800c03e:	4b09      	ldr	r3, [pc, #36]	@ (800c064 <__assert_func+0x2c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4605      	mov	r5, r0
 800c044:	68d8      	ldr	r0, [r3, #12]
 800c046:	b14c      	cbz	r4, 800c05c <__assert_func+0x24>
 800c048:	4b07      	ldr	r3, [pc, #28]	@ (800c068 <__assert_func+0x30>)
 800c04a:	9100      	str	r1, [sp, #0]
 800c04c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c050:	4906      	ldr	r1, [pc, #24]	@ (800c06c <__assert_func+0x34>)
 800c052:	462b      	mov	r3, r5
 800c054:	f000 fba8 	bl	800c7a8 <fiprintf>
 800c058:	f000 fbb8 	bl	800c7cc <abort>
 800c05c:	4b04      	ldr	r3, [pc, #16]	@ (800c070 <__assert_func+0x38>)
 800c05e:	461c      	mov	r4, r3
 800c060:	e7f3      	b.n	800c04a <__assert_func+0x12>
 800c062:	bf00      	nop
 800c064:	20000028 	.word	0x20000028
 800c068:	0800cf72 	.word	0x0800cf72
 800c06c:	0800cf7f 	.word	0x0800cf7f
 800c070:	0800cfad 	.word	0x0800cfad

0800c074 <_calloc_r>:
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	fba1 5402 	umull	r5, r4, r1, r2
 800c07a:	b934      	cbnz	r4, 800c08a <_calloc_r+0x16>
 800c07c:	4629      	mov	r1, r5
 800c07e:	f7fe f82f 	bl	800a0e0 <_malloc_r>
 800c082:	4606      	mov	r6, r0
 800c084:	b928      	cbnz	r0, 800c092 <_calloc_r+0x1e>
 800c086:	4630      	mov	r0, r6
 800c088:	bd70      	pop	{r4, r5, r6, pc}
 800c08a:	220c      	movs	r2, #12
 800c08c:	6002      	str	r2, [r0, #0]
 800c08e:	2600      	movs	r6, #0
 800c090:	e7f9      	b.n	800c086 <_calloc_r+0x12>
 800c092:	462a      	mov	r2, r5
 800c094:	4621      	mov	r1, r4
 800c096:	f7fd f8c5 	bl	8009224 <memset>
 800c09a:	e7f4      	b.n	800c086 <_calloc_r+0x12>

0800c09c <rshift>:
 800c09c:	6903      	ldr	r3, [r0, #16]
 800c09e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0aa:	f100 0414 	add.w	r4, r0, #20
 800c0ae:	dd45      	ble.n	800c13c <rshift+0xa0>
 800c0b0:	f011 011f 	ands.w	r1, r1, #31
 800c0b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0bc:	d10c      	bne.n	800c0d8 <rshift+0x3c>
 800c0be:	f100 0710 	add.w	r7, r0, #16
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	42b1      	cmp	r1, r6
 800c0c6:	d334      	bcc.n	800c132 <rshift+0x96>
 800c0c8:	1a9b      	subs	r3, r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	1eea      	subs	r2, r5, #3
 800c0ce:	4296      	cmp	r6, r2
 800c0d0:	bf38      	it	cc
 800c0d2:	2300      	movcc	r3, #0
 800c0d4:	4423      	add	r3, r4
 800c0d6:	e015      	b.n	800c104 <rshift+0x68>
 800c0d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0dc:	f1c1 0820 	rsb	r8, r1, #32
 800c0e0:	40cf      	lsrs	r7, r1
 800c0e2:	f105 0e04 	add.w	lr, r5, #4
 800c0e6:	46a1      	mov	r9, r4
 800c0e8:	4576      	cmp	r6, lr
 800c0ea:	46f4      	mov	ip, lr
 800c0ec:	d815      	bhi.n	800c11a <rshift+0x7e>
 800c0ee:	1a9a      	subs	r2, r3, r2
 800c0f0:	0092      	lsls	r2, r2, #2
 800c0f2:	3a04      	subs	r2, #4
 800c0f4:	3501      	adds	r5, #1
 800c0f6:	42ae      	cmp	r6, r5
 800c0f8:	bf38      	it	cc
 800c0fa:	2200      	movcc	r2, #0
 800c0fc:	18a3      	adds	r3, r4, r2
 800c0fe:	50a7      	str	r7, [r4, r2]
 800c100:	b107      	cbz	r7, 800c104 <rshift+0x68>
 800c102:	3304      	adds	r3, #4
 800c104:	1b1a      	subs	r2, r3, r4
 800c106:	42a3      	cmp	r3, r4
 800c108:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c10c:	bf08      	it	eq
 800c10e:	2300      	moveq	r3, #0
 800c110:	6102      	str	r2, [r0, #16]
 800c112:	bf08      	it	eq
 800c114:	6143      	streq	r3, [r0, #20]
 800c116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c11a:	f8dc c000 	ldr.w	ip, [ip]
 800c11e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c122:	ea4c 0707 	orr.w	r7, ip, r7
 800c126:	f849 7b04 	str.w	r7, [r9], #4
 800c12a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c12e:	40cf      	lsrs	r7, r1
 800c130:	e7da      	b.n	800c0e8 <rshift+0x4c>
 800c132:	f851 cb04 	ldr.w	ip, [r1], #4
 800c136:	f847 cf04 	str.w	ip, [r7, #4]!
 800c13a:	e7c3      	b.n	800c0c4 <rshift+0x28>
 800c13c:	4623      	mov	r3, r4
 800c13e:	e7e1      	b.n	800c104 <rshift+0x68>

0800c140 <__hexdig_fun>:
 800c140:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c144:	2b09      	cmp	r3, #9
 800c146:	d802      	bhi.n	800c14e <__hexdig_fun+0xe>
 800c148:	3820      	subs	r0, #32
 800c14a:	b2c0      	uxtb	r0, r0
 800c14c:	4770      	bx	lr
 800c14e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c152:	2b05      	cmp	r3, #5
 800c154:	d801      	bhi.n	800c15a <__hexdig_fun+0x1a>
 800c156:	3847      	subs	r0, #71	@ 0x47
 800c158:	e7f7      	b.n	800c14a <__hexdig_fun+0xa>
 800c15a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c15e:	2b05      	cmp	r3, #5
 800c160:	d801      	bhi.n	800c166 <__hexdig_fun+0x26>
 800c162:	3827      	subs	r0, #39	@ 0x27
 800c164:	e7f1      	b.n	800c14a <__hexdig_fun+0xa>
 800c166:	2000      	movs	r0, #0
 800c168:	4770      	bx	lr
	...

0800c16c <__gethex>:
 800c16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	b085      	sub	sp, #20
 800c172:	468a      	mov	sl, r1
 800c174:	9302      	str	r3, [sp, #8]
 800c176:	680b      	ldr	r3, [r1, #0]
 800c178:	9001      	str	r0, [sp, #4]
 800c17a:	4690      	mov	r8, r2
 800c17c:	1c9c      	adds	r4, r3, #2
 800c17e:	46a1      	mov	r9, r4
 800c180:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c184:	2830      	cmp	r0, #48	@ 0x30
 800c186:	d0fa      	beq.n	800c17e <__gethex+0x12>
 800c188:	eba9 0303 	sub.w	r3, r9, r3
 800c18c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c190:	f7ff ffd6 	bl	800c140 <__hexdig_fun>
 800c194:	4605      	mov	r5, r0
 800c196:	2800      	cmp	r0, #0
 800c198:	d168      	bne.n	800c26c <__gethex+0x100>
 800c19a:	49a0      	ldr	r1, [pc, #640]	@ (800c41c <__gethex+0x2b0>)
 800c19c:	2201      	movs	r2, #1
 800c19e:	4648      	mov	r0, r9
 800c1a0:	f7ff ff00 	bl	800bfa4 <strncmp>
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d167      	bne.n	800c27a <__gethex+0x10e>
 800c1aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c1ae:	4626      	mov	r6, r4
 800c1b0:	f7ff ffc6 	bl	800c140 <__hexdig_fun>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d062      	beq.n	800c27e <__gethex+0x112>
 800c1b8:	4623      	mov	r3, r4
 800c1ba:	7818      	ldrb	r0, [r3, #0]
 800c1bc:	2830      	cmp	r0, #48	@ 0x30
 800c1be:	4699      	mov	r9, r3
 800c1c0:	f103 0301 	add.w	r3, r3, #1
 800c1c4:	d0f9      	beq.n	800c1ba <__gethex+0x4e>
 800c1c6:	f7ff ffbb 	bl	800c140 <__hexdig_fun>
 800c1ca:	fab0 f580 	clz	r5, r0
 800c1ce:	096d      	lsrs	r5, r5, #5
 800c1d0:	f04f 0b01 	mov.w	fp, #1
 800c1d4:	464a      	mov	r2, r9
 800c1d6:	4616      	mov	r6, r2
 800c1d8:	3201      	adds	r2, #1
 800c1da:	7830      	ldrb	r0, [r6, #0]
 800c1dc:	f7ff ffb0 	bl	800c140 <__hexdig_fun>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	d1f8      	bne.n	800c1d6 <__gethex+0x6a>
 800c1e4:	498d      	ldr	r1, [pc, #564]	@ (800c41c <__gethex+0x2b0>)
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7ff fedb 	bl	800bfa4 <strncmp>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d13f      	bne.n	800c272 <__gethex+0x106>
 800c1f2:	b944      	cbnz	r4, 800c206 <__gethex+0x9a>
 800c1f4:	1c74      	adds	r4, r6, #1
 800c1f6:	4622      	mov	r2, r4
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	3201      	adds	r2, #1
 800c1fc:	7830      	ldrb	r0, [r6, #0]
 800c1fe:	f7ff ff9f 	bl	800c140 <__hexdig_fun>
 800c202:	2800      	cmp	r0, #0
 800c204:	d1f8      	bne.n	800c1f8 <__gethex+0x8c>
 800c206:	1ba4      	subs	r4, r4, r6
 800c208:	00a7      	lsls	r7, r4, #2
 800c20a:	7833      	ldrb	r3, [r6, #0]
 800c20c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c210:	2b50      	cmp	r3, #80	@ 0x50
 800c212:	d13e      	bne.n	800c292 <__gethex+0x126>
 800c214:	7873      	ldrb	r3, [r6, #1]
 800c216:	2b2b      	cmp	r3, #43	@ 0x2b
 800c218:	d033      	beq.n	800c282 <__gethex+0x116>
 800c21a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c21c:	d034      	beq.n	800c288 <__gethex+0x11c>
 800c21e:	1c71      	adds	r1, r6, #1
 800c220:	2400      	movs	r4, #0
 800c222:	7808      	ldrb	r0, [r1, #0]
 800c224:	f7ff ff8c 	bl	800c140 <__hexdig_fun>
 800c228:	1e43      	subs	r3, r0, #1
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b18      	cmp	r3, #24
 800c22e:	d830      	bhi.n	800c292 <__gethex+0x126>
 800c230:	f1a0 0210 	sub.w	r2, r0, #16
 800c234:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c238:	f7ff ff82 	bl	800c140 <__hexdig_fun>
 800c23c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c240:	fa5f fc8c 	uxtb.w	ip, ip
 800c244:	f1bc 0f18 	cmp.w	ip, #24
 800c248:	f04f 030a 	mov.w	r3, #10
 800c24c:	d91e      	bls.n	800c28c <__gethex+0x120>
 800c24e:	b104      	cbz	r4, 800c252 <__gethex+0xe6>
 800c250:	4252      	negs	r2, r2
 800c252:	4417      	add	r7, r2
 800c254:	f8ca 1000 	str.w	r1, [sl]
 800c258:	b1ed      	cbz	r5, 800c296 <__gethex+0x12a>
 800c25a:	f1bb 0f00 	cmp.w	fp, #0
 800c25e:	bf0c      	ite	eq
 800c260:	2506      	moveq	r5, #6
 800c262:	2500      	movne	r5, #0
 800c264:	4628      	mov	r0, r5
 800c266:	b005      	add	sp, #20
 800c268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26c:	2500      	movs	r5, #0
 800c26e:	462c      	mov	r4, r5
 800c270:	e7b0      	b.n	800c1d4 <__gethex+0x68>
 800c272:	2c00      	cmp	r4, #0
 800c274:	d1c7      	bne.n	800c206 <__gethex+0x9a>
 800c276:	4627      	mov	r7, r4
 800c278:	e7c7      	b.n	800c20a <__gethex+0x9e>
 800c27a:	464e      	mov	r6, r9
 800c27c:	462f      	mov	r7, r5
 800c27e:	2501      	movs	r5, #1
 800c280:	e7c3      	b.n	800c20a <__gethex+0x9e>
 800c282:	2400      	movs	r4, #0
 800c284:	1cb1      	adds	r1, r6, #2
 800c286:	e7cc      	b.n	800c222 <__gethex+0xb6>
 800c288:	2401      	movs	r4, #1
 800c28a:	e7fb      	b.n	800c284 <__gethex+0x118>
 800c28c:	fb03 0002 	mla	r0, r3, r2, r0
 800c290:	e7ce      	b.n	800c230 <__gethex+0xc4>
 800c292:	4631      	mov	r1, r6
 800c294:	e7de      	b.n	800c254 <__gethex+0xe8>
 800c296:	eba6 0309 	sub.w	r3, r6, r9
 800c29a:	3b01      	subs	r3, #1
 800c29c:	4629      	mov	r1, r5
 800c29e:	2b07      	cmp	r3, #7
 800c2a0:	dc0a      	bgt.n	800c2b8 <__gethex+0x14c>
 800c2a2:	9801      	ldr	r0, [sp, #4]
 800c2a4:	f7fd ffa8 	bl	800a1f8 <_Balloc>
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	b940      	cbnz	r0, 800c2be <__gethex+0x152>
 800c2ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c420 <__gethex+0x2b4>)
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	21e4      	movs	r1, #228	@ 0xe4
 800c2b2:	485c      	ldr	r0, [pc, #368]	@ (800c424 <__gethex+0x2b8>)
 800c2b4:	f7ff fec0 	bl	800c038 <__assert_func>
 800c2b8:	3101      	adds	r1, #1
 800c2ba:	105b      	asrs	r3, r3, #1
 800c2bc:	e7ef      	b.n	800c29e <__gethex+0x132>
 800c2be:	f100 0a14 	add.w	sl, r0, #20
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	4655      	mov	r5, sl
 800c2c6:	469b      	mov	fp, r3
 800c2c8:	45b1      	cmp	r9, r6
 800c2ca:	d337      	bcc.n	800c33c <__gethex+0x1d0>
 800c2cc:	f845 bb04 	str.w	fp, [r5], #4
 800c2d0:	eba5 050a 	sub.w	r5, r5, sl
 800c2d4:	10ad      	asrs	r5, r5, #2
 800c2d6:	6125      	str	r5, [r4, #16]
 800c2d8:	4658      	mov	r0, fp
 800c2da:	f7fe f87f 	bl	800a3dc <__hi0bits>
 800c2de:	016d      	lsls	r5, r5, #5
 800c2e0:	f8d8 6000 	ldr.w	r6, [r8]
 800c2e4:	1a2d      	subs	r5, r5, r0
 800c2e6:	42b5      	cmp	r5, r6
 800c2e8:	dd54      	ble.n	800c394 <__gethex+0x228>
 800c2ea:	1bad      	subs	r5, r5, r6
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f7fe fc01 	bl	800aaf6 <__any_on>
 800c2f4:	4681      	mov	r9, r0
 800c2f6:	b178      	cbz	r0, 800c318 <__gethex+0x1ac>
 800c2f8:	1e6b      	subs	r3, r5, #1
 800c2fa:	1159      	asrs	r1, r3, #5
 800c2fc:	f003 021f 	and.w	r2, r3, #31
 800c300:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c304:	f04f 0901 	mov.w	r9, #1
 800c308:	fa09 f202 	lsl.w	r2, r9, r2
 800c30c:	420a      	tst	r2, r1
 800c30e:	d003      	beq.n	800c318 <__gethex+0x1ac>
 800c310:	454b      	cmp	r3, r9
 800c312:	dc36      	bgt.n	800c382 <__gethex+0x216>
 800c314:	f04f 0902 	mov.w	r9, #2
 800c318:	4629      	mov	r1, r5
 800c31a:	4620      	mov	r0, r4
 800c31c:	f7ff febe 	bl	800c09c <rshift>
 800c320:	442f      	add	r7, r5
 800c322:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c326:	42bb      	cmp	r3, r7
 800c328:	da42      	bge.n	800c3b0 <__gethex+0x244>
 800c32a:	9801      	ldr	r0, [sp, #4]
 800c32c:	4621      	mov	r1, r4
 800c32e:	f7fd ffa3 	bl	800a278 <_Bfree>
 800c332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c334:	2300      	movs	r3, #0
 800c336:	6013      	str	r3, [r2, #0]
 800c338:	25a3      	movs	r5, #163	@ 0xa3
 800c33a:	e793      	b.n	800c264 <__gethex+0xf8>
 800c33c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c340:	2a2e      	cmp	r2, #46	@ 0x2e
 800c342:	d012      	beq.n	800c36a <__gethex+0x1fe>
 800c344:	2b20      	cmp	r3, #32
 800c346:	d104      	bne.n	800c352 <__gethex+0x1e6>
 800c348:	f845 bb04 	str.w	fp, [r5], #4
 800c34c:	f04f 0b00 	mov.w	fp, #0
 800c350:	465b      	mov	r3, fp
 800c352:	7830      	ldrb	r0, [r6, #0]
 800c354:	9303      	str	r3, [sp, #12]
 800c356:	f7ff fef3 	bl	800c140 <__hexdig_fun>
 800c35a:	9b03      	ldr	r3, [sp, #12]
 800c35c:	f000 000f 	and.w	r0, r0, #15
 800c360:	4098      	lsls	r0, r3
 800c362:	ea4b 0b00 	orr.w	fp, fp, r0
 800c366:	3304      	adds	r3, #4
 800c368:	e7ae      	b.n	800c2c8 <__gethex+0x15c>
 800c36a:	45b1      	cmp	r9, r6
 800c36c:	d8ea      	bhi.n	800c344 <__gethex+0x1d8>
 800c36e:	492b      	ldr	r1, [pc, #172]	@ (800c41c <__gethex+0x2b0>)
 800c370:	9303      	str	r3, [sp, #12]
 800c372:	2201      	movs	r2, #1
 800c374:	4630      	mov	r0, r6
 800c376:	f7ff fe15 	bl	800bfa4 <strncmp>
 800c37a:	9b03      	ldr	r3, [sp, #12]
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d1e1      	bne.n	800c344 <__gethex+0x1d8>
 800c380:	e7a2      	b.n	800c2c8 <__gethex+0x15c>
 800c382:	1ea9      	subs	r1, r5, #2
 800c384:	4620      	mov	r0, r4
 800c386:	f7fe fbb6 	bl	800aaf6 <__any_on>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d0c2      	beq.n	800c314 <__gethex+0x1a8>
 800c38e:	f04f 0903 	mov.w	r9, #3
 800c392:	e7c1      	b.n	800c318 <__gethex+0x1ac>
 800c394:	da09      	bge.n	800c3aa <__gethex+0x23e>
 800c396:	1b75      	subs	r5, r6, r5
 800c398:	4621      	mov	r1, r4
 800c39a:	9801      	ldr	r0, [sp, #4]
 800c39c:	462a      	mov	r2, r5
 800c39e:	f7fe f97b 	bl	800a698 <__lshift>
 800c3a2:	1b7f      	subs	r7, r7, r5
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	f100 0a14 	add.w	sl, r0, #20
 800c3aa:	f04f 0900 	mov.w	r9, #0
 800c3ae:	e7b8      	b.n	800c322 <__gethex+0x1b6>
 800c3b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3b4:	42bd      	cmp	r5, r7
 800c3b6:	dd6f      	ble.n	800c498 <__gethex+0x32c>
 800c3b8:	1bed      	subs	r5, r5, r7
 800c3ba:	42ae      	cmp	r6, r5
 800c3bc:	dc34      	bgt.n	800c428 <__gethex+0x2bc>
 800c3be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d022      	beq.n	800c40c <__gethex+0x2a0>
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	d024      	beq.n	800c414 <__gethex+0x2a8>
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d115      	bne.n	800c3fa <__gethex+0x28e>
 800c3ce:	42ae      	cmp	r6, r5
 800c3d0:	d113      	bne.n	800c3fa <__gethex+0x28e>
 800c3d2:	2e01      	cmp	r6, #1
 800c3d4:	d10b      	bne.n	800c3ee <__gethex+0x282>
 800c3d6:	9a02      	ldr	r2, [sp, #8]
 800c3d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	2301      	movs	r3, #1
 800c3e0:	6123      	str	r3, [r4, #16]
 800c3e2:	f8ca 3000 	str.w	r3, [sl]
 800c3e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3e8:	2562      	movs	r5, #98	@ 0x62
 800c3ea:	601c      	str	r4, [r3, #0]
 800c3ec:	e73a      	b.n	800c264 <__gethex+0xf8>
 800c3ee:	1e71      	subs	r1, r6, #1
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f7fe fb80 	bl	800aaf6 <__any_on>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d1ed      	bne.n	800c3d6 <__gethex+0x26a>
 800c3fa:	9801      	ldr	r0, [sp, #4]
 800c3fc:	4621      	mov	r1, r4
 800c3fe:	f7fd ff3b 	bl	800a278 <_Bfree>
 800c402:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c404:	2300      	movs	r3, #0
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	2550      	movs	r5, #80	@ 0x50
 800c40a:	e72b      	b.n	800c264 <__gethex+0xf8>
 800c40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1f3      	bne.n	800c3fa <__gethex+0x28e>
 800c412:	e7e0      	b.n	800c3d6 <__gethex+0x26a>
 800c414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1dd      	bne.n	800c3d6 <__gethex+0x26a>
 800c41a:	e7ee      	b.n	800c3fa <__gethex+0x28e>
 800c41c:	0800cf57 	.word	0x0800cf57
 800c420:	0800ceed 	.word	0x0800ceed
 800c424:	0800cfae 	.word	0x0800cfae
 800c428:	1e6f      	subs	r7, r5, #1
 800c42a:	f1b9 0f00 	cmp.w	r9, #0
 800c42e:	d130      	bne.n	800c492 <__gethex+0x326>
 800c430:	b127      	cbz	r7, 800c43c <__gethex+0x2d0>
 800c432:	4639      	mov	r1, r7
 800c434:	4620      	mov	r0, r4
 800c436:	f7fe fb5e 	bl	800aaf6 <__any_on>
 800c43a:	4681      	mov	r9, r0
 800c43c:	117a      	asrs	r2, r7, #5
 800c43e:	2301      	movs	r3, #1
 800c440:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c444:	f007 071f 	and.w	r7, r7, #31
 800c448:	40bb      	lsls	r3, r7
 800c44a:	4213      	tst	r3, r2
 800c44c:	4629      	mov	r1, r5
 800c44e:	4620      	mov	r0, r4
 800c450:	bf18      	it	ne
 800c452:	f049 0902 	orrne.w	r9, r9, #2
 800c456:	f7ff fe21 	bl	800c09c <rshift>
 800c45a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c45e:	1b76      	subs	r6, r6, r5
 800c460:	2502      	movs	r5, #2
 800c462:	f1b9 0f00 	cmp.w	r9, #0
 800c466:	d047      	beq.n	800c4f8 <__gethex+0x38c>
 800c468:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d015      	beq.n	800c49c <__gethex+0x330>
 800c470:	2b03      	cmp	r3, #3
 800c472:	d017      	beq.n	800c4a4 <__gethex+0x338>
 800c474:	2b01      	cmp	r3, #1
 800c476:	d109      	bne.n	800c48c <__gethex+0x320>
 800c478:	f019 0f02 	tst.w	r9, #2
 800c47c:	d006      	beq.n	800c48c <__gethex+0x320>
 800c47e:	f8da 3000 	ldr.w	r3, [sl]
 800c482:	ea49 0903 	orr.w	r9, r9, r3
 800c486:	f019 0f01 	tst.w	r9, #1
 800c48a:	d10e      	bne.n	800c4aa <__gethex+0x33e>
 800c48c:	f045 0510 	orr.w	r5, r5, #16
 800c490:	e032      	b.n	800c4f8 <__gethex+0x38c>
 800c492:	f04f 0901 	mov.w	r9, #1
 800c496:	e7d1      	b.n	800c43c <__gethex+0x2d0>
 800c498:	2501      	movs	r5, #1
 800c49a:	e7e2      	b.n	800c462 <__gethex+0x2f6>
 800c49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c49e:	f1c3 0301 	rsb	r3, r3, #1
 800c4a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d0f0      	beq.n	800c48c <__gethex+0x320>
 800c4aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c4ae:	f104 0314 	add.w	r3, r4, #20
 800c4b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c4b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c4ba:	f04f 0c00 	mov.w	ip, #0
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c4c8:	d01b      	beq.n	800c502 <__gethex+0x396>
 800c4ca:	3201      	adds	r2, #1
 800c4cc:	6002      	str	r2, [r0, #0]
 800c4ce:	2d02      	cmp	r5, #2
 800c4d0:	f104 0314 	add.w	r3, r4, #20
 800c4d4:	d13c      	bne.n	800c550 <__gethex+0x3e4>
 800c4d6:	f8d8 2000 	ldr.w	r2, [r8]
 800c4da:	3a01      	subs	r2, #1
 800c4dc:	42b2      	cmp	r2, r6
 800c4de:	d109      	bne.n	800c4f4 <__gethex+0x388>
 800c4e0:	1171      	asrs	r1, r6, #5
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c4e8:	f006 061f 	and.w	r6, r6, #31
 800c4ec:	fa02 f606 	lsl.w	r6, r2, r6
 800c4f0:	421e      	tst	r6, r3
 800c4f2:	d13a      	bne.n	800c56a <__gethex+0x3fe>
 800c4f4:	f045 0520 	orr.w	r5, r5, #32
 800c4f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4fa:	601c      	str	r4, [r3, #0]
 800c4fc:	9b02      	ldr	r3, [sp, #8]
 800c4fe:	601f      	str	r7, [r3, #0]
 800c500:	e6b0      	b.n	800c264 <__gethex+0xf8>
 800c502:	4299      	cmp	r1, r3
 800c504:	f843 cc04 	str.w	ip, [r3, #-4]
 800c508:	d8d9      	bhi.n	800c4be <__gethex+0x352>
 800c50a:	68a3      	ldr	r3, [r4, #8]
 800c50c:	459b      	cmp	fp, r3
 800c50e:	db17      	blt.n	800c540 <__gethex+0x3d4>
 800c510:	6861      	ldr	r1, [r4, #4]
 800c512:	9801      	ldr	r0, [sp, #4]
 800c514:	3101      	adds	r1, #1
 800c516:	f7fd fe6f 	bl	800a1f8 <_Balloc>
 800c51a:	4681      	mov	r9, r0
 800c51c:	b918      	cbnz	r0, 800c526 <__gethex+0x3ba>
 800c51e:	4b1a      	ldr	r3, [pc, #104]	@ (800c588 <__gethex+0x41c>)
 800c520:	4602      	mov	r2, r0
 800c522:	2184      	movs	r1, #132	@ 0x84
 800c524:	e6c5      	b.n	800c2b2 <__gethex+0x146>
 800c526:	6922      	ldr	r2, [r4, #16]
 800c528:	3202      	adds	r2, #2
 800c52a:	f104 010c 	add.w	r1, r4, #12
 800c52e:	0092      	lsls	r2, r2, #2
 800c530:	300c      	adds	r0, #12
 800c532:	f7fc fef6 	bl	8009322 <memcpy>
 800c536:	4621      	mov	r1, r4
 800c538:	9801      	ldr	r0, [sp, #4]
 800c53a:	f7fd fe9d 	bl	800a278 <_Bfree>
 800c53e:	464c      	mov	r4, r9
 800c540:	6923      	ldr	r3, [r4, #16]
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c548:	6122      	str	r2, [r4, #16]
 800c54a:	2201      	movs	r2, #1
 800c54c:	615a      	str	r2, [r3, #20]
 800c54e:	e7be      	b.n	800c4ce <__gethex+0x362>
 800c550:	6922      	ldr	r2, [r4, #16]
 800c552:	455a      	cmp	r2, fp
 800c554:	dd0b      	ble.n	800c56e <__gethex+0x402>
 800c556:	2101      	movs	r1, #1
 800c558:	4620      	mov	r0, r4
 800c55a:	f7ff fd9f 	bl	800c09c <rshift>
 800c55e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c562:	3701      	adds	r7, #1
 800c564:	42bb      	cmp	r3, r7
 800c566:	f6ff aee0 	blt.w	800c32a <__gethex+0x1be>
 800c56a:	2501      	movs	r5, #1
 800c56c:	e7c2      	b.n	800c4f4 <__gethex+0x388>
 800c56e:	f016 061f 	ands.w	r6, r6, #31
 800c572:	d0fa      	beq.n	800c56a <__gethex+0x3fe>
 800c574:	4453      	add	r3, sl
 800c576:	f1c6 0620 	rsb	r6, r6, #32
 800c57a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c57e:	f7fd ff2d 	bl	800a3dc <__hi0bits>
 800c582:	42b0      	cmp	r0, r6
 800c584:	dbe7      	blt.n	800c556 <__gethex+0x3ea>
 800c586:	e7f0      	b.n	800c56a <__gethex+0x3fe>
 800c588:	0800ceed 	.word	0x0800ceed

0800c58c <L_shift>:
 800c58c:	f1c2 0208 	rsb	r2, r2, #8
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	b570      	push	{r4, r5, r6, lr}
 800c594:	f1c2 0620 	rsb	r6, r2, #32
 800c598:	6843      	ldr	r3, [r0, #4]
 800c59a:	6804      	ldr	r4, [r0, #0]
 800c59c:	fa03 f506 	lsl.w	r5, r3, r6
 800c5a0:	432c      	orrs	r4, r5
 800c5a2:	40d3      	lsrs	r3, r2
 800c5a4:	6004      	str	r4, [r0, #0]
 800c5a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5aa:	4288      	cmp	r0, r1
 800c5ac:	d3f4      	bcc.n	800c598 <L_shift+0xc>
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}

0800c5b0 <__match>:
 800c5b0:	b530      	push	{r4, r5, lr}
 800c5b2:	6803      	ldr	r3, [r0, #0]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ba:	b914      	cbnz	r4, 800c5c2 <__match+0x12>
 800c5bc:	6003      	str	r3, [r0, #0]
 800c5be:	2001      	movs	r0, #1
 800c5c0:	bd30      	pop	{r4, r5, pc}
 800c5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c5ca:	2d19      	cmp	r5, #25
 800c5cc:	bf98      	it	ls
 800c5ce:	3220      	addls	r2, #32
 800c5d0:	42a2      	cmp	r2, r4
 800c5d2:	d0f0      	beq.n	800c5b6 <__match+0x6>
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	e7f3      	b.n	800c5c0 <__match+0x10>

0800c5d8 <__hexnan>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	680b      	ldr	r3, [r1, #0]
 800c5de:	6801      	ldr	r1, [r0, #0]
 800c5e0:	115e      	asrs	r6, r3, #5
 800c5e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c5e6:	f013 031f 	ands.w	r3, r3, #31
 800c5ea:	b087      	sub	sp, #28
 800c5ec:	bf18      	it	ne
 800c5ee:	3604      	addne	r6, #4
 800c5f0:	2500      	movs	r5, #0
 800c5f2:	1f37      	subs	r7, r6, #4
 800c5f4:	4682      	mov	sl, r0
 800c5f6:	4690      	mov	r8, r2
 800c5f8:	9301      	str	r3, [sp, #4]
 800c5fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800c5fe:	46b9      	mov	r9, r7
 800c600:	463c      	mov	r4, r7
 800c602:	9502      	str	r5, [sp, #8]
 800c604:	46ab      	mov	fp, r5
 800c606:	784a      	ldrb	r2, [r1, #1]
 800c608:	1c4b      	adds	r3, r1, #1
 800c60a:	9303      	str	r3, [sp, #12]
 800c60c:	b342      	cbz	r2, 800c660 <__hexnan+0x88>
 800c60e:	4610      	mov	r0, r2
 800c610:	9105      	str	r1, [sp, #20]
 800c612:	9204      	str	r2, [sp, #16]
 800c614:	f7ff fd94 	bl	800c140 <__hexdig_fun>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d151      	bne.n	800c6c0 <__hexnan+0xe8>
 800c61c:	9a04      	ldr	r2, [sp, #16]
 800c61e:	9905      	ldr	r1, [sp, #20]
 800c620:	2a20      	cmp	r2, #32
 800c622:	d818      	bhi.n	800c656 <__hexnan+0x7e>
 800c624:	9b02      	ldr	r3, [sp, #8]
 800c626:	459b      	cmp	fp, r3
 800c628:	dd13      	ble.n	800c652 <__hexnan+0x7a>
 800c62a:	454c      	cmp	r4, r9
 800c62c:	d206      	bcs.n	800c63c <__hexnan+0x64>
 800c62e:	2d07      	cmp	r5, #7
 800c630:	dc04      	bgt.n	800c63c <__hexnan+0x64>
 800c632:	462a      	mov	r2, r5
 800c634:	4649      	mov	r1, r9
 800c636:	4620      	mov	r0, r4
 800c638:	f7ff ffa8 	bl	800c58c <L_shift>
 800c63c:	4544      	cmp	r4, r8
 800c63e:	d952      	bls.n	800c6e6 <__hexnan+0x10e>
 800c640:	2300      	movs	r3, #0
 800c642:	f1a4 0904 	sub.w	r9, r4, #4
 800c646:	f844 3c04 	str.w	r3, [r4, #-4]
 800c64a:	f8cd b008 	str.w	fp, [sp, #8]
 800c64e:	464c      	mov	r4, r9
 800c650:	461d      	mov	r5, r3
 800c652:	9903      	ldr	r1, [sp, #12]
 800c654:	e7d7      	b.n	800c606 <__hexnan+0x2e>
 800c656:	2a29      	cmp	r2, #41	@ 0x29
 800c658:	d157      	bne.n	800c70a <__hexnan+0x132>
 800c65a:	3102      	adds	r1, #2
 800c65c:	f8ca 1000 	str.w	r1, [sl]
 800c660:	f1bb 0f00 	cmp.w	fp, #0
 800c664:	d051      	beq.n	800c70a <__hexnan+0x132>
 800c666:	454c      	cmp	r4, r9
 800c668:	d206      	bcs.n	800c678 <__hexnan+0xa0>
 800c66a:	2d07      	cmp	r5, #7
 800c66c:	dc04      	bgt.n	800c678 <__hexnan+0xa0>
 800c66e:	462a      	mov	r2, r5
 800c670:	4649      	mov	r1, r9
 800c672:	4620      	mov	r0, r4
 800c674:	f7ff ff8a 	bl	800c58c <L_shift>
 800c678:	4544      	cmp	r4, r8
 800c67a:	d936      	bls.n	800c6ea <__hexnan+0x112>
 800c67c:	f1a8 0204 	sub.w	r2, r8, #4
 800c680:	4623      	mov	r3, r4
 800c682:	f853 1b04 	ldr.w	r1, [r3], #4
 800c686:	f842 1f04 	str.w	r1, [r2, #4]!
 800c68a:	429f      	cmp	r7, r3
 800c68c:	d2f9      	bcs.n	800c682 <__hexnan+0xaa>
 800c68e:	1b3b      	subs	r3, r7, r4
 800c690:	f023 0303 	bic.w	r3, r3, #3
 800c694:	3304      	adds	r3, #4
 800c696:	3401      	adds	r4, #1
 800c698:	3e03      	subs	r6, #3
 800c69a:	42b4      	cmp	r4, r6
 800c69c:	bf88      	it	hi
 800c69e:	2304      	movhi	r3, #4
 800c6a0:	4443      	add	r3, r8
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f843 2b04 	str.w	r2, [r3], #4
 800c6a8:	429f      	cmp	r7, r3
 800c6aa:	d2fb      	bcs.n	800c6a4 <__hexnan+0xcc>
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	b91b      	cbnz	r3, 800c6b8 <__hexnan+0xe0>
 800c6b0:	4547      	cmp	r7, r8
 800c6b2:	d128      	bne.n	800c706 <__hexnan+0x12e>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	603b      	str	r3, [r7, #0]
 800c6b8:	2005      	movs	r0, #5
 800c6ba:	b007      	add	sp, #28
 800c6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c0:	3501      	adds	r5, #1
 800c6c2:	2d08      	cmp	r5, #8
 800c6c4:	f10b 0b01 	add.w	fp, fp, #1
 800c6c8:	dd06      	ble.n	800c6d8 <__hexnan+0x100>
 800c6ca:	4544      	cmp	r4, r8
 800c6cc:	d9c1      	bls.n	800c652 <__hexnan+0x7a>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6d4:	2501      	movs	r5, #1
 800c6d6:	3c04      	subs	r4, #4
 800c6d8:	6822      	ldr	r2, [r4, #0]
 800c6da:	f000 000f 	and.w	r0, r0, #15
 800c6de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c6e2:	6020      	str	r0, [r4, #0]
 800c6e4:	e7b5      	b.n	800c652 <__hexnan+0x7a>
 800c6e6:	2508      	movs	r5, #8
 800c6e8:	e7b3      	b.n	800c652 <__hexnan+0x7a>
 800c6ea:	9b01      	ldr	r3, [sp, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0dd      	beq.n	800c6ac <__hexnan+0xd4>
 800c6f0:	f1c3 0320 	rsb	r3, r3, #32
 800c6f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c6f8:	40da      	lsrs	r2, r3
 800c6fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c6fe:	4013      	ands	r3, r2
 800c700:	f846 3c04 	str.w	r3, [r6, #-4]
 800c704:	e7d2      	b.n	800c6ac <__hexnan+0xd4>
 800c706:	3f04      	subs	r7, #4
 800c708:	e7d0      	b.n	800c6ac <__hexnan+0xd4>
 800c70a:	2004      	movs	r0, #4
 800c70c:	e7d5      	b.n	800c6ba <__hexnan+0xe2>

0800c70e <__ascii_mbtowc>:
 800c70e:	b082      	sub	sp, #8
 800c710:	b901      	cbnz	r1, 800c714 <__ascii_mbtowc+0x6>
 800c712:	a901      	add	r1, sp, #4
 800c714:	b142      	cbz	r2, 800c728 <__ascii_mbtowc+0x1a>
 800c716:	b14b      	cbz	r3, 800c72c <__ascii_mbtowc+0x1e>
 800c718:	7813      	ldrb	r3, [r2, #0]
 800c71a:	600b      	str	r3, [r1, #0]
 800c71c:	7812      	ldrb	r2, [r2, #0]
 800c71e:	1e10      	subs	r0, r2, #0
 800c720:	bf18      	it	ne
 800c722:	2001      	movne	r0, #1
 800c724:	b002      	add	sp, #8
 800c726:	4770      	bx	lr
 800c728:	4610      	mov	r0, r2
 800c72a:	e7fb      	b.n	800c724 <__ascii_mbtowc+0x16>
 800c72c:	f06f 0001 	mvn.w	r0, #1
 800c730:	e7f8      	b.n	800c724 <__ascii_mbtowc+0x16>

0800c732 <_realloc_r>:
 800c732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c736:	4607      	mov	r7, r0
 800c738:	4614      	mov	r4, r2
 800c73a:	460d      	mov	r5, r1
 800c73c:	b921      	cbnz	r1, 800c748 <_realloc_r+0x16>
 800c73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c742:	4611      	mov	r1, r2
 800c744:	f7fd bccc 	b.w	800a0e0 <_malloc_r>
 800c748:	b92a      	cbnz	r2, 800c756 <_realloc_r+0x24>
 800c74a:	f7fd fc55 	bl	8009ff8 <_free_r>
 800c74e:	4625      	mov	r5, r4
 800c750:	4628      	mov	r0, r5
 800c752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c756:	f000 f840 	bl	800c7da <_malloc_usable_size_r>
 800c75a:	4284      	cmp	r4, r0
 800c75c:	4606      	mov	r6, r0
 800c75e:	d802      	bhi.n	800c766 <_realloc_r+0x34>
 800c760:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c764:	d8f4      	bhi.n	800c750 <_realloc_r+0x1e>
 800c766:	4621      	mov	r1, r4
 800c768:	4638      	mov	r0, r7
 800c76a:	f7fd fcb9 	bl	800a0e0 <_malloc_r>
 800c76e:	4680      	mov	r8, r0
 800c770:	b908      	cbnz	r0, 800c776 <_realloc_r+0x44>
 800c772:	4645      	mov	r5, r8
 800c774:	e7ec      	b.n	800c750 <_realloc_r+0x1e>
 800c776:	42b4      	cmp	r4, r6
 800c778:	4622      	mov	r2, r4
 800c77a:	4629      	mov	r1, r5
 800c77c:	bf28      	it	cs
 800c77e:	4632      	movcs	r2, r6
 800c780:	f7fc fdcf 	bl	8009322 <memcpy>
 800c784:	4629      	mov	r1, r5
 800c786:	4638      	mov	r0, r7
 800c788:	f7fd fc36 	bl	8009ff8 <_free_r>
 800c78c:	e7f1      	b.n	800c772 <_realloc_r+0x40>

0800c78e <__ascii_wctomb>:
 800c78e:	4603      	mov	r3, r0
 800c790:	4608      	mov	r0, r1
 800c792:	b141      	cbz	r1, 800c7a6 <__ascii_wctomb+0x18>
 800c794:	2aff      	cmp	r2, #255	@ 0xff
 800c796:	d904      	bls.n	800c7a2 <__ascii_wctomb+0x14>
 800c798:	228a      	movs	r2, #138	@ 0x8a
 800c79a:	601a      	str	r2, [r3, #0]
 800c79c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7a0:	4770      	bx	lr
 800c7a2:	700a      	strb	r2, [r1, #0]
 800c7a4:	2001      	movs	r0, #1
 800c7a6:	4770      	bx	lr

0800c7a8 <fiprintf>:
 800c7a8:	b40e      	push	{r1, r2, r3}
 800c7aa:	b503      	push	{r0, r1, lr}
 800c7ac:	4601      	mov	r1, r0
 800c7ae:	ab03      	add	r3, sp, #12
 800c7b0:	4805      	ldr	r0, [pc, #20]	@ (800c7c8 <fiprintf+0x20>)
 800c7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7b6:	6800      	ldr	r0, [r0, #0]
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	f7ff f9b7 	bl	800bb2c <_vfiprintf_r>
 800c7be:	b002      	add	sp, #8
 800c7c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7c4:	b003      	add	sp, #12
 800c7c6:	4770      	bx	lr
 800c7c8:	20000028 	.word	0x20000028

0800c7cc <abort>:
 800c7cc:	b508      	push	{r3, lr}
 800c7ce:	2006      	movs	r0, #6
 800c7d0:	f000 f834 	bl	800c83c <raise>
 800c7d4:	2001      	movs	r0, #1
 800c7d6:	f7f5 fb4f 	bl	8001e78 <_exit>

0800c7da <_malloc_usable_size_r>:
 800c7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7de:	1f18      	subs	r0, r3, #4
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	bfbc      	itt	lt
 800c7e4:	580b      	ldrlt	r3, [r1, r0]
 800c7e6:	18c0      	addlt	r0, r0, r3
 800c7e8:	4770      	bx	lr

0800c7ea <_raise_r>:
 800c7ea:	291f      	cmp	r1, #31
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	d904      	bls.n	800c7fe <_raise_r+0x14>
 800c7f4:	2316      	movs	r3, #22
 800c7f6:	6003      	str	r3, [r0, #0]
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7fc:	bd38      	pop	{r3, r4, r5, pc}
 800c7fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c800:	b112      	cbz	r2, 800c808 <_raise_r+0x1e>
 800c802:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c806:	b94b      	cbnz	r3, 800c81c <_raise_r+0x32>
 800c808:	4628      	mov	r0, r5
 800c80a:	f000 f831 	bl	800c870 <_getpid_r>
 800c80e:	4622      	mov	r2, r4
 800c810:	4601      	mov	r1, r0
 800c812:	4628      	mov	r0, r5
 800c814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c818:	f000 b818 	b.w	800c84c <_kill_r>
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d00a      	beq.n	800c836 <_raise_r+0x4c>
 800c820:	1c59      	adds	r1, r3, #1
 800c822:	d103      	bne.n	800c82c <_raise_r+0x42>
 800c824:	2316      	movs	r3, #22
 800c826:	6003      	str	r3, [r0, #0]
 800c828:	2001      	movs	r0, #1
 800c82a:	e7e7      	b.n	800c7fc <_raise_r+0x12>
 800c82c:	2100      	movs	r1, #0
 800c82e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c832:	4620      	mov	r0, r4
 800c834:	4798      	blx	r3
 800c836:	2000      	movs	r0, #0
 800c838:	e7e0      	b.n	800c7fc <_raise_r+0x12>
	...

0800c83c <raise>:
 800c83c:	4b02      	ldr	r3, [pc, #8]	@ (800c848 <raise+0xc>)
 800c83e:	4601      	mov	r1, r0
 800c840:	6818      	ldr	r0, [r3, #0]
 800c842:	f7ff bfd2 	b.w	800c7ea <_raise_r>
 800c846:	bf00      	nop
 800c848:	20000028 	.word	0x20000028

0800c84c <_kill_r>:
 800c84c:	b538      	push	{r3, r4, r5, lr}
 800c84e:	4d07      	ldr	r5, [pc, #28]	@ (800c86c <_kill_r+0x20>)
 800c850:	2300      	movs	r3, #0
 800c852:	4604      	mov	r4, r0
 800c854:	4608      	mov	r0, r1
 800c856:	4611      	mov	r1, r2
 800c858:	602b      	str	r3, [r5, #0]
 800c85a:	f7f5 fafd 	bl	8001e58 <_kill>
 800c85e:	1c43      	adds	r3, r0, #1
 800c860:	d102      	bne.n	800c868 <_kill_r+0x1c>
 800c862:	682b      	ldr	r3, [r5, #0]
 800c864:	b103      	cbz	r3, 800c868 <_kill_r+0x1c>
 800c866:	6023      	str	r3, [r4, #0]
 800c868:	bd38      	pop	{r3, r4, r5, pc}
 800c86a:	bf00      	nop
 800c86c:	200004d4 	.word	0x200004d4

0800c870 <_getpid_r>:
 800c870:	f7f5 baeb 	b.w	8001e4a <_getpid>

0800c874 <_init>:
 800c874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c876:	bf00      	nop
 800c878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87a:	bc08      	pop	{r3}
 800c87c:	469e      	mov	lr, r3
 800c87e:	4770      	bx	lr

0800c880 <_fini>:
 800c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c882:	bf00      	nop
 800c884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c886:	bc08      	pop	{r3}
 800c888:	469e      	mov	lr, r3
 800c88a:	4770      	bx	lr
